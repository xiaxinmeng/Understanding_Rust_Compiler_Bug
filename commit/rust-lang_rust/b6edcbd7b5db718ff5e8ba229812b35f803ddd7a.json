{"sha": "b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "node_id": "C_kwDOAAsO6NoAKGI2ZWRjYmQ3YjVkYjcxOGZmNWU4YmEyMjk4MTJiMzVmODAzZGRkN2E", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-11-06T01:33:14Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-11-06T01:33:14Z"}, "message": "Review comments", "tree": {"sha": "95fe5883fce6ff6516f961712bc4ee0670edc445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95fe5883fce6ff6516f961712bc4ee0670edc445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "html_url": "https://github.com/rust-lang/rust/commit/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef5e31ac06716e2fd5c5f0dc0991b3760dc0c3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5e31ac06716e2fd5c5f0dc0991b3760dc0c3ae", "html_url": "https://github.com/rust-lang/rust/commit/ef5e31ac06716e2fd5c5f0dc0991b3760dc0c3ae"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "06bfc427bbabcf45a912e802e11f109a40122ea1", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "patch": "@@ -263,7 +263,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     check_gat_where_clauses(tcx, trait_item, encl_trait_def_id);\n }\n \n-/// Require that the user writes as where clauses on GATs the implicit\n+/// Require that the user writes where clauses on GATs for the implicit\n /// outlives bounds involving trait parameters in trait functions and\n /// lifetimes passed as GAT substs. See `self-outlives-lint` test.\n ///\n@@ -288,6 +288,7 @@ fn check_gat_where_clauses(\n     }\n     let generics: &ty::Generics = tcx.generics_of(trait_item.def_id);\n     // If the current associated type doesn't have any (own) params, it's not a GAT\n+    // FIXME(jackh726): we can also warn in the more general case\n     if generics.params.len() == 0 {\n         return;\n     }\n@@ -311,20 +312,15 @@ fn check_gat_where_clauses(\n         // Collect the arguments that are given to this GAT in the return type\n         // of  the function signature. In our example, the GAT in the return\n         // type is `<Self as LendingIterator>::Item<'a>`, so 'a and Self are arguments.\n-        let mut visitor = GATSubstCollector {\n-            tcx,\n-            gat: trait_item.def_id.to_def_id(),\n-            regions: FxHashSet::default(),\n-            types: FxHashSet::default(),\n-        };\n-        sig.output().visit_with(&mut visitor);\n+        let (regions, types) =\n+            GATSubstCollector::visit(tcx, trait_item.def_id.to_def_id(), sig.output());\n \n         // If both regions and types are empty, then this GAT isn't in the\n         // return type, and we shouldn't try to do clause analysis\n         // (particularly, doing so would end up with an empty set of clauses,\n         // since the current method would require none, and we take the\n         // intersection of requirements of all methods)\n-        if visitor.types.is_empty() && visitor.regions.is_empty() {\n+        if types.is_empty() && regions.is_empty() {\n             continue;\n         }\n \n@@ -337,8 +333,8 @@ fn check_gat_where_clauses(\n         // relationship to the type arguments (e.g., Self). If there is an\n         // outlives relationship (`Self: 'a`), then we want to ensure that is\n         // reflected in a where clause on the GAT itself.\n-        for (region, region_idx) in &visitor.regions {\n-            for (ty, ty_idx) in &visitor.types {\n+        for (region, region_idx) in &regions {\n+            for (ty, ty_idx) in &types {\n                 // In our example, requires that Self: 'a\n                 if ty_known_to_outlive(tcx, id, param_env, &wf_tys, *ty, *region) {\n                     debug!(?ty_idx, ?region_idx);\n@@ -376,8 +372,8 @@ fn check_gat_where_clauses(\n         // relationship to the other region arguments. If there is an\n         // outlives relationship, then we want to ensure that is\n         // reflected in a where clause on the GAT itself.\n-        for (region_a, region_a_idx) in &visitor.regions {\n-            for (region_b, region_b_idx) in &visitor.regions {\n+        for (region_a, region_a_idx) in &regions {\n+            for (region_b, region_b_idx) in &regions {\n                 if region_a == region_b {\n                     continue;\n                 }\n@@ -412,6 +408,16 @@ fn check_gat_where_clauses(\n             }\n         }\n \n+        // Imagine we have:\n+        // ```\n+        // trait Foo {\n+        //   type Bar<'me>;\n+        //   fn gimme(&self) -> Self::Bar<'_>;\n+        //   fn gimme_default(&self) -> Self::Bar<'static>;\n+        // }\n+        // ```\n+        // We only want to require clauses on `Bar` that we can prove from *all* functions (in this\n+        // case, `'me` can be `static` from `gimme_default`)\n         match clauses.as_mut() {\n             Some(clauses) => {\n                 clauses.drain_filter(|p| !function_clauses.contains(p));\n@@ -428,12 +434,14 @@ fn check_gat_where_clauses(\n     if !clauses.is_empty() {\n         let written_predicates: ty::GenericPredicates<'_> =\n             tcx.explicit_predicates_of(trait_item.def_id);\n-        let clauses: Vec<_> = clauses\n+        let mut clauses: Vec<_> = clauses\n             .drain_filter(|clause| {\n                 written_predicates.predicates.iter().find(|p| &p.0 == clause).is_none()\n             })\n             .map(|clause| format!(\"{}\", clause))\n             .collect();\n+        // We sort so that order is predictable\n+        clauses.sort();\n         if !clauses.is_empty() {\n             let mut err = tcx.sess.struct_span_err(\n                 trait_item.span,\n@@ -461,6 +469,8 @@ fn check_gat_where_clauses(\n     }\n }\n \n+// FIXME(jackh726): refactor some of the shared logic between the two functions below\n+\n /// Given a known `param_env` and a set of well formed types, can we prove that\n /// `ty` outlives `region`.\n fn ty_known_to_outlive<'tcx>(\n@@ -564,6 +574,23 @@ struct GATSubstCollector<'tcx> {\n     types: FxHashSet<(Ty<'tcx>, usize)>,\n }\n \n+impl<'tcx> GATSubstCollector<'tcx> {\n+    fn visit<T: TypeFoldable<'tcx>>(\n+        tcx: TyCtxt<'tcx>,\n+        gat: DefId,\n+        t: T,\n+    ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n+        let mut visitor = GATSubstCollector {\n+            tcx,\n+            gat,\n+            regions: FxHashSet::default(),\n+            types: FxHashSet::default(),\n+        };\n+        t.visit_with(&mut visitor);\n+        (visitor.regions, visitor.types)\n+    }\n+}\n+\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n "}, {"sha": "af90d158855d8c1d54ed49e8a646c69a31ce7913", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs?ref=b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "patch": "@@ -109,13 +109,15 @@ trait NoGat<'a> {\n }\n \n // Lifetime is not on function; except `Self: 'a`\n+// FIXME: we require two bounds (`where Self: 'a, Self: 'b`) when we should only require one\n trait TraitLifetime<'a> {\n     type Bar<'b>;\n     //~^ Missing required bounds\n     fn method(&'a self) -> Self::Bar<'a>;\n }\n \n // Like above, but we have a where clause that can prove what we want\n+// FIXME: we require two bounds (`where Self: 'a, Self: 'b`) when we should only require one\n trait TraitLifetimeWhere<'a> where Self: 'a {\n     type Bar<'b>;\n     //~^ Missing required bounds"}, {"sha": "bf85780f69f7a7e24274ab8e98c92e7cb6620a24", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6edcbd7b5db718ff5e8ba229812b35f803ddd7a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=b6edcbd7b5db718ff5e8ba229812b35f803ddd7a", "patch": "@@ -28,7 +28,7 @@ error: Missing required bounds on Out\n LL |     type Out<'x, 'y>;\n    |     ^^^^^^^^^^^^^^^^-\n    |                     |\n-   |                     help: add the required where clauses: `where U: 'y, T: 'x`\n+   |                     help: add the required where clauses: `where T: 'x, U: 'y`\n \n error: Missing required bounds on Out\n   --> $DIR/self-outlives-lint.rs:61:5\n@@ -55,39 +55,39 @@ LL |     type Out<'x, D>;\n    |                    help: add the required where clauses: `where D: 'x`\n \n error: Missing required bounds on Bar\n-  --> $DIR/self-outlives-lint.rs:113:5\n+  --> $DIR/self-outlives-lint.rs:114:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n    |                 |\n-   |                 help: add the required where clauses: `where Self: 'b, Self: 'a`\n+   |                 help: add the required where clauses: `where Self: 'a, Self: 'b`\n \n error: Missing required bounds on Bar\n-  --> $DIR/self-outlives-lint.rs:120:5\n+  --> $DIR/self-outlives-lint.rs:122:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n    |                 |\n-   |                 help: add the required where clauses: `where Self: 'b, Self: 'a`\n+   |                 help: add the required where clauses: `where Self: 'a, Self: 'b`\n \n error: Missing required bounds on Bar\n-  --> $DIR/self-outlives-lint.rs:127:5\n+  --> $DIR/self-outlives-lint.rs:129:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n    |                 |\n    |                 help: add the required where clauses: `where Self: 'b`\n \n error: Missing required bounds on Iterator\n-  --> $DIR/self-outlives-lint.rs:141:5\n+  --> $DIR/self-outlives-lint.rs:143:5\n    |\n LL |     type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                                       |\n    |                                                       help: add the required where clauses: `where Self: 'a`\n \n error: Missing required bounds on Bar\n-  --> $DIR/self-outlives-lint.rs:148:5\n+  --> $DIR/self-outlives-lint.rs:150:5\n    |\n LL |     type Bar<'a, 'b>;\n    |     ^^^^^^^^^^^^^^^^-"}]}