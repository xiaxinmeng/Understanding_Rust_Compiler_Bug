{"sha": "cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTlhYmI3OGNkNmMxYjhjNzRiNzgxMTBiOGM5MmMxZjA5ODRiYTA=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-19T08:38:15Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-19T08:53:48Z"}, "message": "Add more VecDeque::rotate_{left|right} tests", "tree": {"sha": "6c6389b82150d0f9e3848a822c8812ac1356a1c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6389b82150d0f9e3848a822c8812ac1356a1c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "html_url": "https://github.com/rust-lang/rust/commit/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08155314889e9c9b4cb0e35c117cc4ba93c29388", "url": "https://api.github.com/repos/rust-lang/rust/commits/08155314889e9c9b4cb0e35c117cc4ba93c29388", "html_url": "https://github.com/rust-lang/rust/commit/08155314889e9c9b4cb0e35c117cc4ba93c29388"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "146abd1b7508aa21acce24c74fdf590644c4cd6d", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "patch": "@@ -13,11 +13,12 @@\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n+#![feature(repeat_generic_slice)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(repeat_generic_slice)]\n+#![feature(vecdeque_rotate)]\n \n extern crate core;\n extern crate rand;"}, {"sha": "c8a6d86413ad6535a4ea8571908bf08e8e9da8cd", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "patch": "@@ -1309,3 +1309,137 @@ fn test_try_reserve_exact() {\n     }\n \n }\n+\n+#[test]\n+fn test_rotate_nop() {\n+    let mut v: VecDeque<_> = (0..10).collect();\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(0);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(10);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(0);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(10);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(3);\n+    v.rotate_right(3);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(3);\n+    v.rotate_left(3);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(6);\n+    v.rotate_right(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(6);\n+    v.rotate_left(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(3);\n+    v.rotate_left(7);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(4);\n+    v.rotate_right(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(1);\n+    v.rotate_left(2);\n+    v.rotate_left(3);\n+    v.rotate_left(4);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(1);\n+    v.rotate_right(2);\n+    v.rotate_right(3);\n+    v.rotate_right(4);\n+    assert_unchanged(&v);\n+\n+    fn assert_unchanged(v: &VecDeque<i32>) {\n+        assert_eq!(v, &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    }\n+}\n+\n+#[test]\n+fn test_rotate_left_parts() {\n+    let mut v: VecDeque<_> = (1..=7).collect();\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[3, 4, 5, 6, 7, 1][..], &[2][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[5, 6, 7, 1][..], &[2, 3, 4][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[7, 1][..], &[2, 3, 4, 5, 6][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[2, 3, 4, 5, 6, 7, 1][..], &[][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[4, 5, 6, 7, 1, 2][..], &[3][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[6, 7, 1, 2][..], &[3, 4, 5][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[1, 2][..], &[3, 4, 5, 6, 7][..]));\n+}\n+\n+#[test]\n+fn test_rotate_right_parts() {\n+    let mut v: VecDeque<_> = (1..=7).collect();\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[6, 7][..], &[1, 2, 3, 4, 5][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[4, 5, 6, 7][..], &[1, 2, 3][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[2, 3, 4, 5, 6, 7][..], &[1][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[7, 1, 2, 3, 4, 5, 6][..], &[][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[5, 6][..], &[7, 1, 2, 3, 4][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[3, 4, 5, 6][..], &[7, 1, 2][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[1, 2, 3, 4, 5, 6][..], &[7][..]));\n+}\n+\n+#[test]\n+fn test_rotate_left_random() {\n+    let shifts = [\n+        6, 1, 0, 11, 12, 1, 11, 7, 9, 3, 6, 1,\n+        4, 0, 5, 1, 3, 1, 12, 8, 3, 1, 11, 11,\n+        9, 4, 12, 3, 12, 9, 11, 1, 7, 9, 7, 2,\n+    ];\n+    let n = 12;\n+    let mut v: VecDeque<_> = (0..n).collect();\n+    let mut total_shift = 0;\n+    for shift in shifts.iter().cloned() {\n+        v.rotate_left(shift);\n+        total_shift += shift;\n+        for i in 0..n {\n+            assert_eq!(v[i], (i + total_shift) % n);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_rotate_right_random() {\n+    let shifts = [\n+        6, 1, 0, 11, 12, 1, 11, 7, 9, 3, 6, 1,\n+        4, 0, 5, 1, 3, 1, 12, 8, 3, 1, 11, 11,\n+        9, 4, 12, 3, 12, 9, 11, 1, 7, 9, 7, 2,\n+    ];\n+    let n = 12;\n+    let mut v: VecDeque<_> = (0..n).collect();\n+    let mut total_shift = 0;\n+    for shift in shifts.iter().cloned() {\n+        v.rotate_right(shift);\n+        total_shift += shift;\n+        for i in 0..n {\n+            assert_eq!(v[(i + total_shift) % n], i);\n+        }\n+    }\n+}"}]}