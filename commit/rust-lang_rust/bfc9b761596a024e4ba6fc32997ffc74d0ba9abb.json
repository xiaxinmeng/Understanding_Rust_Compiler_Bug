{"sha": "bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYzliNzYxNTk2YTAyNGU0YmE2ZmMzMjk5N2ZmYzc0ZDBiYTlhYmI=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-02T20:19:55Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T15:22:22Z"}, "message": "add collect_writes.rs", "tree": {"sha": "70176f6dc927f70a34a87200761bbf9cba568772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70176f6dc927f70a34a87200761bbf9cba568772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "html_url": "https://github.com/rust-lang/rust/commit/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0ce0858e4a07239ea6d38c14991bba46c413fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0ce0858e4a07239ea6d38c14991bba46c413fc", "html_url": "https://github.com/rust-lang/rust/commit/3f0ce0858e4a07239ea6d38c14991bba46c413fc"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "e21fa63ccc27e7d290fa8b83abab3063f6f0e472", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "patch": "@@ -39,6 +39,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(collection_placement)]\n #![feature(nonzero)]\n #![feature(underscore_lifetimes)]\n+#![feature(crate_visibility_modifier)]\n \n extern crate arena;\n #[macro_use]"}, {"sha": "a0c01fa834b6989668cc4538f7d757340628e330", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc9b761596a024e4ba6fc32997ffc74d0ba9abb/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=bfc9b761596a024e4ba6fc32997ffc74d0ba9abb", "patch": "@@ -0,0 +1,50 @@\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::{Local, Location};\n+use rustc::mir::Mir;\n+use rustc::mir::visit::PlaceContext;\n+use rustc::mir::visit::Visitor;\n+\n+pub struct FindLocalAssignmentVisitor {\n+    needle: Local,\n+    locations: Vec<Location>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n+    fn visit_local(&mut self,\n+                   local: &Local,\n+                   place_context: PlaceContext<'tcx>,\n+                   location: Location) {\n+        if self.needle != *local {\n+            return;\n+        }   \n+\n+        match place_context {\n+            PlaceContext::Store | PlaceContext::Call => {\n+                self.locations.push(location);\n+            }\n+            PlaceContext::AsmOutput | PlaceContext::Drop| PlaceContext::Inspect |\n+            PlaceContext::Borrow{..}| PlaceContext::Projection(..)| PlaceContext::Copy| \n+            PlaceContext::Move| PlaceContext::StorageLive| PlaceContext::StorageDead|\n+            PlaceContext::Validate => {\n+            }\n+        }\n+\n+        Visitor::visit_local(self,local,place_context,location)\n+    }\n+}\n+\n+crate trait FindAssignments { \n+    fn find_assignments(&self, local: Local) -> Vec<Location>;                                         \n+    }\n+    \n+impl<'tcx> FindAssignments for Mir<'tcx>{\n+    fn find_assignments(&self, local: Local) -> Vec<Location>{\n+            let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n+            visitor.visit_mir(self);\n+            visitor.locations\n+    }\n+}\n+"}]}