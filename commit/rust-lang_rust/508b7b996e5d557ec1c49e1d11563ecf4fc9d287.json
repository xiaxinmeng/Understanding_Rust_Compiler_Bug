{"sha": "508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOGI3Yjk5NmU1ZDU1N2VjMWM0OWUxZDExNTYzZWNmNGZjOWQyODc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-14T18:04:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-19T05:45:58Z"}, "message": "Move runtime files to C instead of C++\n\nExplicitly have the only C++ portion of the runtime be one file with exception\nhandling. All other runtime files must now live in C and be fully defined in C.", "tree": {"sha": "56afc4b9b834d4496c175a3ab701823dbba72e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56afc4b9b834d4496c175a3ab701823dbba72e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "html_url": "https://github.com/rust-lang/rust/commit/508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bf0788027932a0b547819cc9edd13c40426e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8bf0788027932a0b547819cc9edd13c40426e36", "html_url": "https://github.com/rust-lang/rust/commit/e8bf0788027932a0b547819cc9edd13c40426e36"}], "stats": {"total": 456, "additions": 248, "deletions": 208}, "files": [{"sha": "dc2aefeb8653475587559a1acac443131e9bc2c7", "filename": "mk/clean.mk", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -12,13 +12,19 @@\n # Cleanup\n ######################################################################\n \n-CLEAN_STAGE_RULES =\t\t\t\t\t\t\t\t\\\n- $(foreach stage, $(STAGES),\t\t\t\t\t\\\n-  $(foreach host, $(CFG_HOST),\t\t\\\n+CLEAN_STAGE_RULES :=\t\t\t\t\t\t\t\\\n+ $(foreach stage, $(STAGES),\t\t\t\t\t\t\\\n+  $(foreach host, $(CFG_HOST),\t\t\t\t\t\t\\\n    clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n-   $(foreach target, $(CFG_TARGET),\t\t\\\n+   $(foreach target, $(CFG_TARGET),\t\t\t\t\t\\\n     clean$(stage)_T_$(target)_H_$(host))))\n \n+CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES)\t\t\t\t\\\n+    $(foreach host, $(CFG_HOST), clean-generic-H-$(host))\n+\n+CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES)\t\t\t\t\\\n+    $(foreach host, $(CFG_TARGET), clean-generic-T-$(host))\n+\n CLEAN_LLVM_RULES = \t\t\t\t\t\t\t\t\\\n  $(foreach target, $(CFG_HOST),\t\t\\\n   clean-llvm$(target))\n@@ -33,19 +39,6 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find $(CFG_BUILD)/rustllvm \\\n-\t         $(CFG_BUILD)/rt \\\n-\t\t $(CFG_BUILD)/test \\\n-         -name '*.[odasS]' -o \\\n-         -name '*.so' -o      \\\n-         -name '*.dylib' -o   \\\n-         -name '*.dll' -o     \\\n-         -name '*.def' -o     \\\n-         -name '*.bc'         \\\n-         | xargs rm -f\n-\t$(Q)find $(CFG_BUILD)\\\n-         -name '*.dSYM'       \\\n-         | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n \t$(Q)rm -Rf $(DOCS)\n@@ -60,6 +53,27 @@ clean-misc:\n \t$(Q)rm -Rf $(foreach sub, index styles files search javascript, \\\n                  $(wildcard doc/*/$(sub)))\n \n+define CLEAN_GENERIC\n+\n+clean-generic-$(2)-$(1):\n+\t$(Q)find $(1)/rustllvm \\\n+\t         $(1)/rt \\\n+\t\t $(1)/test \\\n+         -name '*.[odasS]' -o \\\n+         -name '*.so' -o      \\\n+         -name '*.dylib' -o   \\\n+         -name '*.dll' -o     \\\n+         -name '*.def' -o     \\\n+         -name '*.bc'         \\\n+         | xargs rm -f\n+\t$(Q)find $(1)\\\n+         -name '*.dSYM'       \\\n+         | xargs rm -Rf\n+endef\n+\n+$(foreach host, $(CFG_HOST), $(eval $(call CLEAN_GENERIC,$(host),H)))\n+$(foreach targ, $(CFG_TARGET), $(eval $(call CLEAN_GENERIC,$(targ),T)))\n+\n define CLEAN_HOST_STAGE_N\n \n clean$(1)_H_$(2):"}, {"sha": "622f85302d3c0d136a56fd929f27edfe220e99a2", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -206,7 +206,7 @@ CFG_LIB_GLOB_arm-apple-darwin = lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_arm-apple-darwin = lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_arm-apple-darwin := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS)\n CFG_GCCISH_CXXFLAGS_arm-apple-darwin := -fno-rtti $(CFG_IOS_FLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind \n+CFG_GCCISH_LINK_FLAGS_arm-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_arm-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-darwin :=\n CFG_GCCISH_POST_LIB_FLAGS_arm-apple-darwin :=\n@@ -506,7 +506,7 @@ define CFG_MAKE_TOOLCHAIN\n         -c -o $$(1) $$(2)\n   CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n         $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1))              \\\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n   CFG_COMPILE_CXX_$(1) = $$(CXX_$(1)) \\"}, {"sha": "94de05d0eaf11704605574becd366d3c6abcd60a", "filename": "mk/rt.mk", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -90,13 +90,18 @@ endif\n endif\n \n RUNTIME_CXXS_$(1)_$(2) := \\\n-              rt/rust_builtin.cpp \\\n-              rt/rust_upcall.cpp \\\n-              rt/miniz.cpp \\\n-              rt/rust_android_dummy.cpp \\\n-              rt/rust_test_helpers.cpp\n+\t      rt/rust_cxx_glue.cpp\n \n-RUNTIME_CS_$(1)_$(2) :=\n+RUNTIME_CS_$(1)_$(2) := \\\n+              rt/rust_builtin.c \\\n+              rt/rust_upcall.c \\\n+              rt/miniz.c \\\n+              rt/rust_android_dummy.c \\\n+              rt/rust_test_helpers.c\n+\n+# stage0 remove this after the next snapshot\n+%.cpp:\n+\t@touch tmp/foo.o\n \n RUNTIME_S_$(1)_$(2) := rt/arch/$$(HOST_$(1))/_context.S \\\n \t\t\trt/arch/$$(HOST_$(1))/record_sp.S\n@@ -114,7 +119,7 @@ ALL_OBJ_FILES += $$(RUNTIME_OBJS_$(1)_$(2))\n MORESTACK_OBJS_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/morestack.o\n ALL_OBJ_FILES += $$(MORESTACK_OBJS_$(1)_$(2))\n \n-$$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.cpp $$(MKFILE_DEPS)\n+$$(RT_BUILD_DIR_$(1)_$(2))/rust_cxx_glue.o: rt/rust_cxx_glue.cpp $$(MKFILE_DEPS)\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(RUNTIME_INCS_$(1)_$(2)) \\\n                  $$(SNAP_DEFINES) $$(RUNTIME_CXXFLAGS_$(1)_$(2))) $$<\n@@ -241,13 +246,13 @@ endif\n UV_SUPPORT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),uv_support)\n UV_SUPPORT_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/uv_support\n UV_SUPPORT_LIB_$(1) := $$(UV_SUPPORT_DIR_$(1))/$$(UV_SUPPORT_NAME_$(1))\n-UV_SUPPORT_CS_$(1) := rt/rust_uv.cpp\n-UV_SUPPORT_OBJS_$(1) := $$(UV_SUPPORT_CS_$(1):rt/%.cpp=$$(UV_SUPPORT_DIR_$(1))/%.o)\n+UV_SUPPORT_CS_$(1) := rt/rust_uv.c\n+UV_SUPPORT_OBJS_$(1) := $$(UV_SUPPORT_CS_$(1):rt/%.c=$$(UV_SUPPORT_DIR_$(1))/%.o)\n \n-$$(UV_SUPPORT_DIR_$(1))/%.o: rt/%.cpp\n+$$(UV_SUPPORT_DIR_$(1))/%.o: rt/%.c\n \t@$$(call E, compile: $$@)\n \t@mkdir -p $$(@D)\n-\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, \\\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n \t\t-I $$(S)src/libuv/include \\\n                  $$(RUNTIME_CFLAGS_$(1))) $$<\n "}, {"sha": "0d32d2d7dbae0e09eb00200347d9b3ead26decac", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -63,6 +63,7 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n mod imp {\n+    use cast;\n     use libc;\n     use option::{Option, Some, None};\n     use iter::Iterator;"}, {"sha": "2b803b06d099394684d3ce4527dcae77db91b669", "filename": "src/rt/miniz.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Fminiz.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Fminiz.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fminiz.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "previous_filename": "src/rt/miniz.cpp"}, {"sha": "9d91b99507336cf822f3430e72c6377fc6d23c7f", "filename": "src/rt/rust_android_dummy.c", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_android_dummy.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_android_dummy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -14,92 +14,92 @@ char **backtrace_symbols(void *const *array, int size) { return 0; }\n \n void backtrace_symbols_fd (void *const *array, int size, int fd) {}\n \n-extern \"C\" volatile int* __errno_location() {\n+volatile int* __errno_location() {\n     return &errno;\n }\n \n-extern \"C\" float log2f(float f)\n+float log2f(float f)\n {\n     return logf( f ) / logf( 2 );\n }\n \n-extern \"C\" double log2( double n )\n+double log2( double n )\n {\n     return log( n ) / log( 2 );\n }\n \n-extern \"C\" void telldir()\n+void telldir()\n {\n }\n \n-extern \"C\" void seekdir()\n+void seekdir()\n {\n }\n \n-extern \"C\" void mkfifo()\n+void mkfifo()\n {\n }\n \n-extern \"C\" void abs()\n+void abs()\n {\n }\n \n-extern \"C\" void labs()\n+void labs()\n {\n }\n \n-extern \"C\" void rand()\n+void rand()\n {\n }\n \n-extern \"C\" void srand()\n+void srand()\n {\n }\n \n-extern \"C\" void atof()\n+void atof()\n {\n }\n \n-extern \"C\" int glob(const char *pattern,\n+int glob(const char *pattern,\n                     int flags,\n                     int (*errfunc) (const char *epath, int eerrno),\n                     glob_t *pglob)\n {\n     return 0;\n }\n \n-extern \"C\" void globfree(glob_t *pglob)\n+void globfree(glob_t *pglob)\n {\n }\n \n-extern \"C\" int pthread_atfork(void (*prefork)(void),\n+int pthread_atfork(void (*prefork)(void),\n                               void (*postfork_parent)(void),\n                               void (*postfork_child)(void))\n {\n     return 0;\n }\n \n-extern \"C\" int mlockall(int flags)\n+int mlockall(int flags)\n {\n     return 0;\n }\n \n-extern \"C\" int munlockall(void)\n+int munlockall(void)\n {\n     return 0;\n }\n \n-extern \"C\" int shm_open(const char *name, int oflag, mode_t mode)\n+int shm_open(const char *name, int oflag, mode_t mode)\n {\n     return 0;\n }\n \n-extern \"C\" int shm_unlink(const char *name)\n+int shm_unlink(const char *name)\n {\n     return 0;\n }\n \n-extern \"C\" int posix_madvise(void *addr, size_t len, int advice)\n+int posix_madvise(void *addr, size_t len, int advice)\n {\n     return 0;\n }", "previous_filename": "src/rt/rust_android_dummy.cpp"}, {"sha": "c8ed61bfc41a91bc51f1116ce6f93242b54cabb1", "filename": "src/rt/rust_builtin.c", "status": "renamed", "additions": 58, "deletions": 77, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -58,12 +58,12 @@ timegm(struct tm *tm)\n #endif\n \n #if defined(__WIN32__)\n-extern \"C\" CDECL char**\n+char**\n rust_env_pairs() {\n     return 0;\n }\n #else\n-extern \"C\" CDECL char**\n+char**\n rust_env_pairs() {\n #if defined(__APPLE__) && !(TARGET_OS_IPHONE)\n     char **environ = *_NSGetEnviron();\n@@ -72,18 +72,18 @@ rust_env_pairs() {\n }\n #endif\n \n-extern \"C\" CDECL char*\n+char*\n #if defined(__WIN32__)\n rust_list_dir_val(WIN32_FIND_DATA* entry_ptr) {\n     return entry_ptr->cFileName;\n }\n #else\n-rust_list_dir_val(dirent* entry_ptr) {\n+rust_list_dir_val(struct dirent* entry_ptr) {\n     return entry_ptr->d_name;\n }\n #endif\n \n-extern \"C\" CDECL size_t\n+size_t\n #if defined(__WIN32__)\n rust_list_dir_wfd_size() {\n     return sizeof(WIN32_FIND_DATAW);\n@@ -94,7 +94,7 @@ rust_list_dir_wfd_size() {\n }\n #endif\n \n-extern \"C\" CDECL void*\n+void*\n #if defined(__WIN32__)\n rust_list_dir_wfd_fp_buf(WIN32_FIND_DATAW* wfd) {\n     if(wfd == NULL) {\n@@ -110,7 +110,7 @@ rust_list_dir_wfd_fp_buf(void* wfd) {\n }\n #endif\n \n-extern \"C\" CDECL int\n+int\n rust_path_is_dir(const char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n@@ -119,7 +119,7 @@ rust_path_is_dir(const char *path) {\n     return S_ISDIR(buf.st_mode);\n }\n \n-extern \"C\" CDECL int\n+int\n #if defined(__WIN32__)\n rust_path_is_dir_u16(const wchar_t *path) {\n     struct _stat buf;\n@@ -137,7 +137,7 @@ rust_path_is_dir_u16(const void *path) {\n }\n #endif\n \n-extern \"C\" CDECL int\n+int\n rust_path_exists(const char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n@@ -146,7 +146,7 @@ rust_path_exists(const char *path) {\n     return 1;\n }\n \n-extern \"C\" CDECL int\n+int\n #if defined(__WIN32__)\n rust_path_exists_u16(const wchar_t *path) {\n     struct _stat buf;\n@@ -162,12 +162,12 @@ rust_path_exists_u16(const void *path) {\n }\n #endif\n \n-extern \"C\" CDECL FILE* rust_get_stdin() {return stdin;}\n-extern \"C\" CDECL FILE* rust_get_stdout() {return stdout;}\n-extern \"C\" CDECL FILE* rust_get_stderr() {return stderr;}\n+FILE* rust_get_stdin() {return stdin;}\n+FILE* rust_get_stdout() {return stdout;}\n+FILE* rust_get_stderr() {return stderr;}\n \n #if defined(__WIN32__)\n-extern \"C\" CDECL void\n+void\n rust_get_time(int64_t *sec, int32_t *nsec) {\n     FILETIME fileTime;\n     GetSystemTimeAsFileTime(&fileTime);\n@@ -186,15 +186,15 @@ rust_get_time(int64_t *sec, int32_t *nsec) {\n     *nsec = (ns_since_1970 % 1000000) * 1000;\n }\n #else\n-extern \"C\" CDECL void\n+void\n rust_get_time(int64_t *sec, int32_t *nsec) {\n #ifdef __APPLE__\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     *sec = tv.tv_sec;\n     *nsec = tv.tv_usec * 1000;\n #else\n-    timespec ts;\n+    struct timespec ts;\n     clock_gettime(CLOCK_REALTIME, &ts);\n     *sec = ts.tv_sec;\n     *nsec = ts.tv_nsec;\n@@ -204,7 +204,7 @@ rust_get_time(int64_t *sec, int32_t *nsec) {\n \n const int64_t ns_per_s = 1000000000LL;\n \n-extern \"C\" CDECL void\n+void\n rust_precise_time_ns(uint64_t *ns) {\n \n #ifdef __APPLE__\n@@ -227,23 +227,22 @@ rust_precise_time_ns(uint64_t *ns) {\n     assert(query_result);\n     *ns = (uint64_t)((ticks.QuadPart * ns_per_s) / ticks_per_s.QuadPart);\n #else\n-    timespec ts;\n+    struct timespec ts;\n     clock_gettime(CLOCK_MONOTONIC, &ts);\n     *ns = (uint64_t)(ts.tv_sec * ns_per_s + ts.tv_nsec);\n #endif\n }\n \n-struct\n-rust_vec\n+typedef struct\n {\n     size_t fill;    // in bytes; if zero, heapified\n     size_t alloc;   // in bytes\n     uint8_t data[0];\n-};\n+} rust_vec;\n \n typedef rust_vec rust_str;\n \n-struct rust_tm {\n+typedef struct {\n     int32_t tm_sec;\n     int32_t tm_min;\n     int32_t tm_hour;\n@@ -256,10 +255,10 @@ struct rust_tm {\n     int32_t tm_gmtoff;\n     rust_str *tm_zone;\n     int32_t tm_nsec;\n-};\n+} rust_tm;\n \n-void rust_tm_to_tm(rust_tm* in_tm, tm* out_tm) {\n-    memset(out_tm, 0, sizeof(tm));\n+void rust_tm_to_tm(rust_tm* in_tm, struct tm* out_tm) {\n+    memset(out_tm, 0, sizeof(struct tm));\n     out_tm->tm_sec = in_tm->tm_sec;\n     out_tm->tm_min = in_tm->tm_min;\n     out_tm->tm_hour = in_tm->tm_hour;\n@@ -271,7 +270,7 @@ void rust_tm_to_tm(rust_tm* in_tm, tm* out_tm) {\n     out_tm->tm_isdst = in_tm->tm_isdst;\n }\n \n-void tm_to_rust_tm(tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n+void tm_to_rust_tm(struct tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n                    const char *zone, int32_t nsec) {\n     out_tm->tm_sec = in_tm->tm_sec;\n     out_tm->tm_min = in_tm->tm_min;\n@@ -300,13 +299,13 @@ void tm_to_rust_tm(tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n #define LOCALTIME(clock, result) localtime_s((result), (clock))\n #define TIMEGM(result) _mkgmtime64(result)\n #else\n-struct tm* GMTIME(const time_t *clock, tm *result) {\n+struct tm* GMTIME(const time_t *clock, struct tm *result) {\n     struct tm* t = gmtime(clock);\n     if (t == NULL || result == NULL) { return NULL; }\n     *result = *t;\n     return result;\n }\n-struct tm* LOCALTIME(const time_t *clock, tm *result) {\n+struct tm* LOCALTIME(const time_t *clock, struct tm *result) {\n     struct tm* t = localtime(clock);\n     if (t == NULL || result == NULL) { return NULL; }\n     *result = *t;\n@@ -321,23 +320,23 @@ struct tm* LOCALTIME(const time_t *clock, tm *result) {\n #define TIMEGM(result) timegm(result)\n #endif\n \n-extern \"C\" CDECL void\n+void\n rust_tzset() {\n     TZSET();\n }\n \n-extern \"C\" CDECL void\n+void\n rust_gmtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n-    tm tm;\n+    struct tm tm;\n     time_t s = sec;\n     GMTIME(&s, &tm);\n \n     tm_to_rust_tm(&tm, timeptr, 0, \"UTC\", nsec);\n }\n \n-extern \"C\" CDECL void\n+void\n rust_localtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n-    tm tm;\n+    struct tm tm;\n     time_t s = sec;\n     LOCALTIME(&s, &tm);\n \n@@ -365,16 +364,16 @@ rust_localtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     tm_to_rust_tm(&tm, timeptr, gmtoff, zone, nsec);\n }\n \n-extern \"C\" CDECL int64_t\n+int64_t\n rust_timegm(rust_tm* timeptr) {\n-    tm t;\n+    struct tm t;\n     rust_tm_to_tm(timeptr, &t);\n     return TIMEGM(&t);\n }\n \n-extern \"C\" CDECL int64_t\n+int64_t\n rust_mktime(rust_tm* timeptr) {\n-    tm t;\n+    struct tm t;\n     rust_tm_to_tm(timeptr, &t);\n     return mktime(&t);\n }\n@@ -383,47 +382,29 @@ rust_mktime(rust_tm* timeptr) {\n #include <sys/types.h>\n #include <dirent.h>\n \n-extern \"C\" DIR*\n+DIR*\n rust_opendir(char *dirname) {\n     return opendir(dirname);\n }\n \n-extern \"C\" dirent*\n+struct dirent*\n rust_readdir(DIR *dirp) {\n     return readdir(dirp);\n }\n \n #else\n \n-extern \"C\" void\n+void\n rust_opendir() {\n }\n \n-extern \"C\" void\n+void\n rust_readdir() {\n }\n \n #endif\n \n-typedef void *(rust_try_fn)(void*, void*);\n-\n-extern \"C\" CDECL uintptr_t\n-rust_try(rust_try_fn f, void *fptr, void *env) {\n-    try {\n-        f(fptr, env);\n-    } catch (uintptr_t token) {\n-        assert(token != 0);\n-        return token;\n-    }\n-    return 0;\n-}\n-\n-extern \"C\" CDECL void\n-rust_begin_unwind(uintptr_t token) {\n-    throw token;\n-}\n-\n-extern \"C\" CDECL uintptr_t\n+uintptr_t\n rust_running_on_valgrind() {\n     return RUNNING_ON_VALGRIND;\n }\n@@ -470,24 +451,24 @@ get_num_cpus() {\n }\n #endif\n \n-extern \"C\" CDECL uintptr_t\n+uintptr_t\n rust_get_num_cpus() {\n     return get_num_cpus();\n }\n \n-extern \"C\" CDECL unsigned int\n+unsigned int\n rust_valgrind_stack_register(void *start, void *end) {\n   return VALGRIND_STACK_REGISTER(start, end);\n }\n \n-extern \"C\" CDECL void\n+void\n rust_valgrind_stack_deregister(unsigned int id) {\n   VALGRIND_STACK_DEREGISTER(id);\n }\n \n #if defined(__WIN32__)\n \n-extern \"C\" CDECL void\n+void\n rust_unset_sigprocmask() {\n     // empty stub for windows to keep linker happy\n }\n@@ -497,7 +478,7 @@ rust_unset_sigprocmask() {\n #include <signal.h>\n #include <unistd.h>\n \n-extern \"C\" CDECL void\n+void\n rust_unset_sigprocmask() {\n     // this can't be safely converted to rust code because the\n     // representation of sigset_t is platform-dependent\n@@ -526,7 +507,7 @@ win32_require(LPCTSTR fn, BOOL ok) {\n     }\n }\n \n-extern \"C\" CDECL void\n+void\n rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n     win32_require\n         (_T(\"CryptAcquireContext\"),\n@@ -536,12 +517,12 @@ rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n                              CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n \n }\n-extern \"C\" CDECL void\n+void\n rust_win32_rand_gen(HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer) {\n     win32_require\n         (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, dwLen, pbBuffer));\n }\n-extern \"C\" CDECL void\n+void\n rust_win32_rand_release(HCRYPTPROV hProv) {\n     win32_require\n         (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n@@ -552,15 +533,15 @@ rust_win32_rand_release(HCRYPTPROV hProv) {\n // these symbols are listed in rustrt.def.in, so they need to exist; but they\n // should never be called.\n \n-extern \"C\" CDECL void\n+void\n rust_win32_rand_acquire() {\n     abort();\n }\n-extern \"C\" CDECL void\n+void\n rust_win32_rand_gen() {\n     abort();\n }\n-extern \"C\" CDECL void\n+void\n rust_win32_rand_release() {\n     abort();\n }\n@@ -569,20 +550,20 @@ rust_win32_rand_release() {\n \n #if defined(__WIN32__)\n \n-extern \"C\" CDECL int\n+int\n rust_crit_section_size() { return sizeof(CRITICAL_SECTION); }\n-extern \"C\" CDECL int\n+int\n rust_pthread_mutex_t_size() { return 0; }\n-extern \"C\" CDECL int\n+int\n rust_pthread_cond_t_size() { return 0; }\n \n #else\n \n-extern \"C\" CDECL int\n+int\n rust_crit_section_size() { return 0; }\n-extern \"C\" CDECL int\n+int\n rust_pthread_mutex_t_size() { return sizeof(pthread_mutex_t); }\n-extern \"C\" CDECL int\n+int\n rust_pthread_cond_t_size() { return sizeof(pthread_cond_t); }\n \n #endif", "previous_filename": "src/rt/rust_builtin.cpp"}, {"sha": "b44d29642c4b7a820810f8d62cb4395375995965", "filename": "src/rt/rust_cxx_glue.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_cxx_glue.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_cxx_glue.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cxx_glue.cpp?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/* Foreign builtins which require C++ */\n+\n+#include \"rust_globals.h\"\n+\n+typedef void *(rust_try_fn)(void*, void*);\n+\n+extern \"C\" CDECL uintptr_t\n+rust_try(rust_try_fn f, void *fptr, void *env) {\n+    try {\n+        f(fptr, env);\n+    } catch (uintptr_t token) {\n+        assert(token != 0);\n+        return token;\n+    }\n+    return 0;\n+}\n+\n+extern \"C\" CDECL void\n+rust_begin_unwind(uintptr_t token) {\n+    throw token;\n+}"}, {"sha": "317f8af237fa186241c20fc978d592b8427bf53b", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -39,6 +39,10 @@\n #define __STDC_FORMAT_MACROS 1\n #endif\n \n+#ifndef _GNU_SOURCE\n+#define _GNU_SOURCE 1\n+#endif\n+\n #define ERROR 0\n \n #include <stdlib.h>\n@@ -62,11 +66,15 @@\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n+#if defined(__cplusplus)\n extern \"C\" {\n+#endif\n #include <windows.h>\n #include <tchar.h>\n #include <wincrypt.h>\n+#if defined(__cplusplus)\n }\n+#endif\n #elif defined(__GNUC__)\n #include <unistd.h>\n #include <dlfcn.h>"}, {"sha": "d2b69337e7251332d06583564e39e0b13d7fcd52", "filename": "src/rt/rust_test_helpers.c", "status": "renamed", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -14,50 +14,50 @@\n \n // These functions are used in the unit tests for C ABI calls.\n \n-extern \"C\" CDECL uint32_t\n+uint32_t\n rust_dbg_extern_identity_u32(uint32_t u) {\n     return u;\n }\n \n-extern \"C\" CDECL uint64_t\n+uint64_t\n rust_dbg_extern_identity_u64(uint64_t u) {\n     return u;\n }\n \n-extern \"C\" CDECL double\n+double\n rust_dbg_extern_identity_double(double u) {\n     return u;\n }\n \n-extern \"C\" CDECL char\n+char\n rust_dbg_extern_identity_u8(char u) {\n     return u;\n }\n \n typedef void *(*dbg_callback)(void*);\n \n-extern \"C\" CDECL void *\n+void *\n rust_dbg_call(dbg_callback cb, void *data) {\n     return cb(data);\n }\n \n-extern \"C\" CDECL void rust_dbg_do_nothing() { }\n+void rust_dbg_do_nothing() { }\n \n struct TwoU8s {\n     uint8_t one;\n     uint8_t two;\n };\n \n-extern \"C\" CDECL TwoU8s\n+struct TwoU8s\n rust_dbg_extern_return_TwoU8s() {\n     struct TwoU8s s;\n     s.one = 10;\n     s.two = 20;\n     return s;\n }\n \n-extern \"C\" CDECL TwoU8s\n-rust_dbg_extern_identity_TwoU8s(TwoU8s u) {\n+struct TwoU8s\n+rust_dbg_extern_identity_TwoU8s(struct TwoU8s u) {\n     return u;\n }\n \n@@ -66,16 +66,16 @@ struct TwoU16s {\n     uint16_t two;\n };\n \n-extern \"C\" CDECL TwoU16s\n+struct TwoU16s\n rust_dbg_extern_return_TwoU16s() {\n     struct TwoU16s s;\n     s.one = 10;\n     s.two = 20;\n     return s;\n }\n \n-extern \"C\" CDECL TwoU16s\n-rust_dbg_extern_identity_TwoU16s(TwoU16s u) {\n+struct TwoU16s\n+rust_dbg_extern_identity_TwoU16s(struct TwoU16s u) {\n     return u;\n }\n \n@@ -84,16 +84,16 @@ struct TwoU32s {\n     uint32_t two;\n };\n \n-extern \"C\" CDECL TwoU32s\n+struct TwoU32s\n rust_dbg_extern_return_TwoU32s() {\n     struct TwoU32s s;\n     s.one = 10;\n     s.two = 20;\n     return s;\n }\n \n-extern \"C\" CDECL TwoU32s\n-rust_dbg_extern_identity_TwoU32s(TwoU32s u) {\n+struct TwoU32s\n+rust_dbg_extern_identity_TwoU32s(struct TwoU32s u) {\n     return u;\n }\n \n@@ -102,16 +102,16 @@ struct TwoU64s {\n     uint64_t two;\n };\n \n-extern \"C\" CDECL TwoU64s\n+struct TwoU64s\n rust_dbg_extern_return_TwoU64s() {\n     struct TwoU64s s;\n     s.one = 10;\n     s.two = 20;\n     return s;\n }\n \n-extern \"C\" CDECL TwoU64s\n-rust_dbg_extern_identity_TwoU64s(TwoU64s u) {\n+struct TwoU64s\n+rust_dbg_extern_identity_TwoU64s(struct TwoU64s u) {\n     return u;\n }\n \n@@ -120,12 +120,12 @@ struct TwoDoubles {\n     double two;\n };\n \n-extern \"C\" CDECL TwoDoubles\n-rust_dbg_extern_identity_TwoDoubles(TwoDoubles u) {\n+struct TwoDoubles\n+rust_dbg_extern_identity_TwoDoubles(struct TwoDoubles u) {\n     return u;\n }\n \n-extern \"C\" CDECL intptr_t\n+intptr_t\n rust_get_test_int() {\n   return 1;\n }\n@@ -149,29 +149,29 @@ struct floats {\n     double c;\n };\n \n-extern \"C\" quad\n-rust_dbg_abi_1(quad q) {\n-    quad qq = { q.c + 1,\n-                q.d - 1,\n-                q.a + 1,\n-                q.b - 1 };\n+struct quad\n+rust_dbg_abi_1(struct quad q) {\n+    struct quad qq = { q.c + 1,\n+                       q.d - 1,\n+                       q.a + 1,\n+                       q.b - 1 };\n     return qq;\n }\n \n-extern \"C\" floats\n-rust_dbg_abi_2(floats f) {\n-    floats ff = { f.c + 1.0,\n-                  0xff,\n-                  f.a - 1.0 };\n+struct floats\n+rust_dbg_abi_2(struct floats f) {\n+    struct floats ff = { f.c + 1.0,\n+                         0xff,\n+                         f.a - 1.0 };\n     return ff;\n }\n \n-extern \"C\" int\n+int\n rust_dbg_static_mut;\n \n int rust_dbg_static_mut = 3;\n \n-extern \"C\" void\n+void\n rust_dbg_static_mut_check_four() {\n     assert(rust_dbg_static_mut == 4);\n }", "previous_filename": "src/rt/rust_test_helpers.cpp"}, {"sha": "16621d29d4a38621eeeb4c5c2f53de3891899f23", "filename": "src/rt/rust_upcall.c", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_upcall.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_upcall.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -35,24 +35,24 @@ struct _Unwind_Exception;\n #  endif\n #endif\n \n-extern \"C\" _Unwind_Reason_Code\n+_Unwind_Reason_Code\n PERSONALITY_FUNC(int version,\n                      _Unwind_Action actions,\n                      uint64_t exception_class,\n-                     _Unwind_Exception *ue_header,\n-                     _Unwind_Context *context);\n+                     struct _Unwind_Exception *ue_header,\n+                     struct _Unwind_Context *context);\n \n struct s_rust_personality_args {\n     _Unwind_Reason_Code retval;\n     int version;\n     _Unwind_Action actions;\n     uint64_t exception_class;\n-    _Unwind_Exception *ue_header;\n-    _Unwind_Context *context;\n+    struct _Unwind_Exception *ue_header;\n+    struct _Unwind_Context *context;\n };\n \n-extern \"C\" void\n-upcall_s_rust_personality(s_rust_personality_args *args) {\n+void\n+upcall_s_rust_personality(struct s_rust_personality_args *args) {\n     args->retval = PERSONALITY_FUNC(args->version,\n                                     args->actions,\n                                     args->exception_class,\n@@ -65,15 +65,15 @@ upcall_s_rust_personality(s_rust_personality_args *args) {\n    out what to do with each landing pad. Just a stack-switching\n    wrapper around the C++ personality function.\n */\n-extern \"C\" _Unwind_Reason_Code\n+_Unwind_Reason_Code\n upcall_rust_personality(int version,\n                         _Unwind_Action actions,\n                         uint64_t exception_class,\n-                        _Unwind_Exception *ue_header,\n-                        _Unwind_Context *context) {\n-    s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n-                                    version, actions, exception_class,\n-                                    ue_header, context};\n+                        struct _Unwind_Exception *ue_header,\n+                        struct _Unwind_Context *context) {\n+    struct s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n+                                           version, actions, exception_class,\n+                                           ue_header, context};\n     upcall_s_rust_personality(&args);\n     return args.retval;\n }\n@@ -82,7 +82,7 @@ upcall_rust_personality(int version,\n // correct limit into TLS.\n // NB: This must run on the Rust stack because it\n // needs to acquire the value of the stack pointer\n-extern \"C\" CDECL void\n+void\n upcall_reset_stack_limit() {\n }\n ", "previous_filename": "src/rt/rust_upcall.cpp"}, {"sha": "9c9f7d14e5a3091d7872b05ad9ca020fe5c95bf8", "filename": "src/rt/rust_uv.c", "status": "renamed", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_uv.c", "raw_url": "https://github.com/rust-lang/rust/raw/508b7b996e5d557ec1c49e1d11563ecf4fc9d287/src%2Frt%2Frust_uv.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.c?ref=508b7b996e5d557ec1c49e1d11563ecf4fc9d287", "patch": "@@ -22,7 +22,7 @@\n \n #include \"rust_globals.h\"\n \n-extern \"C\" void*\n+void*\n rust_uv_loop_new() {\n // XXX libuv doesn't always ignore SIGPIPE even though we don't need it.\n #ifndef __WIN32__\n@@ -31,67 +31,67 @@ rust_uv_loop_new() {\n     return (void*)uv_loop_new();\n }\n \n-extern \"C\" void\n+void\n rust_uv_loop_set_data(uv_loop_t* loop, void* data) {\n     loop->data = data;\n }\n \n-extern \"C\" uv_udp_t*\n+uv_udp_t*\n rust_uv_get_udp_handle_from_send_req(uv_udp_send_t* send_req) {\n     return send_req->handle;\n }\n \n-extern \"C\" uv_stream_t*\n+uv_stream_t*\n rust_uv_get_stream_handle_from_connect_req(uv_connect_t* connect) {\n     return connect->handle;\n }\n-extern \"C\" uv_stream_t*\n+uv_stream_t*\n rust_uv_get_stream_handle_from_write_req(uv_write_t* write_req) {\n     return write_req->handle;\n }\n \n-extern \"C\" uv_loop_t*\n+uv_loop_t*\n rust_uv_get_loop_for_uv_handle(uv_handle_t* handle) {\n     return handle->loop;\n }\n \n-extern \"C\" void*\n+void*\n rust_uv_get_data_for_uv_loop(uv_loop_t* loop) {\n     return loop->data;\n }\n \n-extern \"C\" void\n+void\n rust_uv_set_data_for_uv_loop(uv_loop_t* loop,\n         void* data) {\n     loop->data = data;\n }\n \n-extern \"C\" void*\n+void*\n rust_uv_get_data_for_uv_handle(uv_handle_t* handle) {\n     return handle->data;\n }\n \n-extern \"C\" void\n+void\n rust_uv_set_data_for_uv_handle(uv_handle_t* handle, void* data) {\n     handle->data = data;\n }\n \n-extern \"C\" void*\n+void*\n rust_uv_get_data_for_req(uv_req_t* req) {\n     return req->data;\n }\n \n-extern \"C\" void\n+void\n rust_uv_set_data_for_req(uv_req_t* req, void* data) {\n     req->data = data;\n }\n \n-extern \"C\" int\n+int\n rust_sockaddr_size() {\n     return sizeof(struct sockaddr_storage);\n }\n \n-extern \"C\" struct sockaddr*\n+struct sockaddr*\n rust_malloc_ip4_addr(char *name, int port) {\n     struct sockaddr_in *addr = (struct sockaddr_in*) calloc(1, rust_sockaddr_size());\n     assert(addr != NULL);\n@@ -101,7 +101,7 @@ rust_malloc_ip4_addr(char *name, int port) {\n     return (struct sockaddr*) addr;\n }\n \n-extern \"C\" struct sockaddr*\n+struct sockaddr*\n rust_malloc_ip6_addr(char *name, int port) {\n     struct sockaddr_in6 *addr = (struct sockaddr_in6*) calloc(1, rust_sockaddr_size());\n     assert(addr != NULL);\n@@ -111,58 +111,58 @@ rust_malloc_ip6_addr(char *name, int port) {\n     return (struct sockaddr*) addr;\n }\n \n-extern \"C\" unsigned int\n+unsigned int\n rust_ip4_port(struct sockaddr_in* src) {\n     return ntohs(src->sin_port);\n }\n-extern \"C\" unsigned int\n+unsigned int\n rust_ip6_port(struct sockaddr_in6* src) {\n     return ntohs(src->sin6_port);\n }\n \n-extern \"C\" int\n-rust_is_ipv4_sockaddr(sockaddr* addr) {\n+int\n+rust_is_ipv4_sockaddr(struct sockaddr* addr) {\n     return addr->sa_family == AF_INET;\n }\n \n-extern \"C\" int\n-rust_is_ipv6_sockaddr(sockaddr* addr) {\n+int\n+rust_is_ipv6_sockaddr(struct sockaddr* addr) {\n     return addr->sa_family == AF_INET6;\n }\n \n-extern \"C\" uintptr_t\n+uintptr_t\n rust_uv_handle_type_max() {\n   return UV_HANDLE_TYPE_MAX;\n }\n \n-extern \"C\" uintptr_t\n+uintptr_t\n rust_uv_req_type_max() {\n   return UV_REQ_TYPE_MAX;\n }\n \n-extern \"C\" int\n+int\n rust_uv_get_result_from_fs_req(uv_fs_t* req) {\n   return req->result;\n }\n-extern \"C\" const char*\n+const char*\n rust_uv_get_path_from_fs_req(uv_fs_t* req) {\n   return req->path;\n }\n-extern \"C\" void*\n+void*\n rust_uv_get_ptr_from_fs_req(uv_fs_t* req) {\n   return req->ptr;\n }\n-extern \"C\" uv_loop_t*\n+uv_loop_t*\n rust_uv_get_loop_from_fs_req(uv_fs_t* req) {\n   return req->loop;\n }\n \n-extern \"C\" uv_loop_t*\n+uv_loop_t*\n rust_uv_get_loop_from_getaddrinfo_req(uv_getaddrinfo_t* req) {\n   return req->loop;\n }\n \n-extern \"C\" void\n+void\n rust_uv_populate_uv_stat(uv_fs_t* req_in, uv_stat_t* stat_out) {\n   stat_out->st_dev = req_in->statbuf.st_dev;\n   stat_out->st_mode = req_in->statbuf.st_mode;\n@@ -186,27 +186,27 @@ rust_uv_populate_uv_stat(uv_fs_t* req_in, uv_stat_t* stat_out) {\n   stat_out->st_birthtim.tv_nsec = req_in->statbuf.st_birthtim.tv_nsec;\n }\n \n-extern \"C\" void\n+void\n rust_set_stdio_container_flags(uv_stdio_container_t *c, int flags) {\n   c->flags = (uv_stdio_flags) flags;\n }\n \n-extern \"C\" void\n+void\n rust_set_stdio_container_fd(uv_stdio_container_t *c, int fd) {\n   c->data.fd = fd;\n }\n \n-extern \"C\" void\n+void\n rust_set_stdio_container_stream(uv_stdio_container_t *c, uv_stream_t *stream) {\n   c->data.stream = stream;\n }\n \n-extern \"C\" int\n+int\n rust_uv_process_pid(uv_process_t* p) {\n   return p->pid;\n }\n \n-extern \"C\" int\n+int\n rust_uv_guess_handle(int fd) {\n   return uv_guess_handle(fd);\n }", "previous_filename": "src/rt/rust_uv.cpp"}]}