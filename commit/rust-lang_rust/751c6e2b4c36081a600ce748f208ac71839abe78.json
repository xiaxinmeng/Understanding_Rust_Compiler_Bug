{"sha": "751c6e2b4c36081a600ce748f208ac71839abe78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWM2ZTJiNGMzNjA4MWE2MDBjZTc0OGYyMDhhYzcxODM5YWJlNzg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-18T15:41:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-18T15:41:32Z"}, "message": "Rollup merge of #43290 - nodakai:fix-ref-path-new, r=Mark-Simulacrum\n\nlibstd: remove redundant & from &Path::new(...)\n\n```rust\nfn Path::new<S: AsRef ...>(s: &S) -> &Path\n```\n\n* https://doc.rust-lang.org/std/path/struct.Path.html#method.new", "tree": {"sha": "a06af36d12a6d48367873a58b0e041f5c3f39fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06af36d12a6d48367873a58b0e041f5c3f39fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751c6e2b4c36081a600ce748f208ac71839abe78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751c6e2b4c36081a600ce748f208ac71839abe78", "html_url": "https://github.com/rust-lang/rust/commit/751c6e2b4c36081a600ce748f208ac71839abe78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751c6e2b4c36081a600ce748f208ac71839abe78/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a566710c59c28891d367e0ce721f278b824aa25", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a566710c59c28891d367e0ce721f278b824aa25", "html_url": "https://github.com/rust-lang/rust/commit/6a566710c59c28891d367e0ce721f278b824aa25"}, {"sha": "2e8859ce4e97df8e2b1372e20efe4f8676c0f178", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8859ce4e97df8e2b1372e20efe4f8676c0f178", "html_url": "https://github.com/rust-lang/rust/commit/2e8859ce4e97df8e2b1372e20efe4f8676c0f178"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "38d3312b4e7dd6a7569cdd5381de742edc8e538e", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=751c6e2b4c36081a600ce748f208ac71839abe78", "patch": "@@ -2346,17 +2346,17 @@ mod tests {\n \n     #[test]\n     fn recursive_mkdir_slash() {\n-        check!(fs::create_dir_all(&Path::new(\"/\")));\n+        check!(fs::create_dir_all(Path::new(\"/\")));\n     }\n \n     #[test]\n     fn recursive_mkdir_dot() {\n-        check!(fs::create_dir_all(&Path::new(\".\")));\n+        check!(fs::create_dir_all(Path::new(\".\")));\n     }\n \n     #[test]\n     fn recursive_mkdir_empty() {\n-        check!(fs::create_dir_all(&Path::new(\"\")));\n+        check!(fs::create_dir_all(Path::new(\"\")));\n     }\n \n     #[test]"}, {"sha": "319965ab3965e21646216d88dad3b4b6a4cdb7ec", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=751c6e2b4c36081a600ce748f208ac71839abe78", "patch": "@@ -29,7 +29,7 @@ impl TcpStream {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(TcpStream(File::open(&Path::new(path.as_str()), &options)?))\n+        Ok(TcpStream(File::open(Path::new(path.as_str()), &options)?))\n     }\n \n     pub fn connect_timeout(_addr: &SocketAddr, _timeout: Duration) -> Result<TcpStream> {\n@@ -177,7 +177,7 @@ impl TcpListener {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(TcpListener(File::open(&Path::new(path.as_str()), &options)?))\n+        Ok(TcpListener(File::open(Path::new(path.as_str()), &options)?))\n     }\n \n     pub fn accept(&self) -> Result<(TcpStream, SocketAddr)> {"}, {"sha": "7e7666e7ef3641b43ccced4bea02bdc11d1c37c2", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=751c6e2b4c36081a600ce748f208ac71839abe78", "patch": "@@ -30,7 +30,7 @@ impl UdpSocket {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(UdpSocket(File::open(&Path::new(path.as_str()), &options)?, UnsafeCell::new(None)))\n+        Ok(UdpSocket(File::open(Path::new(path.as_str()), &options)?, UnsafeCell::new(None)))\n     }\n \n     fn get_conn(&self) -> &mut Option<SocketAddr> {"}, {"sha": "ffa6bf0fa3ed14feb90bc224bf8f16b23edd5645", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751c6e2b4c36081a600ce748f208ac71839abe78/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=751c6e2b4c36081a600ce748f208ac71839abe78", "patch": "@@ -393,7 +393,7 @@ impl Stdio {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n                 opts.write(!readable);\n-                let fd = File::open(&Path::new(\"null:\"), &opts)?;\n+                let fd = File::open(Path::new(\"null:\"), &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_fd()), None))\n             }\n         }"}]}