{"sha": "87776d7d5322422e5239e153e793b687f7f9c379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3Nzc2ZDdkNTMyMjQyMmU1MjM5ZTE1M2U3OTNiNjg3ZjdmOWMzNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-18T01:34:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-18T01:34:32Z"}, "message": "Auto merge of #79132 - pietroalbini:beta-next, r=Mark-Simulacrum\n\nPrepare beta 1.49.0\n\nThis PR sets everything up for beta 1.49.0, and backports the following PRs to it:\n\n* #79107 - build-manifest: strip newline from rustc version\n* #78986 - Avoid installing external LLVM dylibs\n* #79074 - Install CI llvm into the library directory\n* #78364 - Update RELEASES.md for 1.48.0\n* #77939 - Ensure that the source code display is working with DOS backline\n\nr? `@ghost`\ncc `@rust-lang/release`", "tree": {"sha": "5d1bf316da295b74f0791e25dc15f928c88980b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1bf316da295b74f0791e25dc15f928c88980b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87776d7d5322422e5239e153e793b687f7f9c379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87776d7d5322422e5239e153e793b687f7f9c379", "html_url": "https://github.com/rust-lang/rust/commit/87776d7d5322422e5239e153e793b687f7f9c379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87776d7d5322422e5239e153e793b687f7f9c379/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c919f490bbcd2b29b74016101f7ec71aaa24bdbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c919f490bbcd2b29b74016101f7ec71aaa24bdbb", "html_url": "https://github.com/rust-lang/rust/commit/c919f490bbcd2b29b74016101f7ec71aaa24bdbb"}, {"sha": "7477867b01d5c59a5847633808088f1e53708f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7477867b01d5c59a5847633808088f1e53708f9e", "html_url": "https://github.com/rust-lang/rust/commit/7477867b01d5c59a5847633808088f1e53708f9e"}], "stats": {"total": 67, "additions": 31, "deletions": 36}, "files": [{"sha": "29fccc0533bfe297e951a5371c94b8d0863b71c0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=87776d7d5322422e5239e153e793b687f7f9c379", "patch": "@@ -1336,7 +1336,13 @@ impl Step for Rls {\n         let rls = builder\n             .ensure(tool::Rls { compiler, target, extra_features: Vec::new() })\n             .or_else(|| {\n-                missing_tool(\"RLS\", builder.build.config.missing_tools);\n+                // We ignore failure on aarch64 Windows because RLS currently\n+                // fails to build, due to winapi 0.2 not supporting aarch64.\n+                missing_tool(\n+                    \"RLS\",\n+                    builder.build.config.missing_tools\n+                        || (target.triple.contains(\"aarch64\") && target.triple.contains(\"windows\")),\n+                );\n                 None\n             })?;\n "}, {"sha": "8681f84f6ab0ad29a8384774f97f785ec07650ca", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=87776d7d5322422e5239e153e793b687f7f9c379", "patch": "@@ -63,7 +63,7 @@ fi\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n-export RUST_RELEASE_CHANNEL=nightly\n+export RUST_RELEASE_CHANNEL=beta\n \n # Always set the release channel for bootstrap; this is normally not important (i.e., only dist\n # builds would seem to matter) but in practice bootstrap wants to know whether we're targeting"}, {"sha": "e5fe11004ab6c2fb4759cb2c9bfb19bf2ffe5000", "filename": "src/stage0.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/87776d7d5322422e5239e153e793b687f7f9c379/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=87776d7d5322422e5239e153e793b687f7f9c379", "patch": "@@ -12,15 +12,15 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-10-16\n-rustc: beta\n-cargo: beta\n+date: 2020-11-16\n+rustc: 1.48.0\n+cargo: 1.48.0\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-10-12\n+#rustfmt: nightly-2020-10-12\n \n # When making a stable release the process currently looks like:\n #\n@@ -40,4 +40,4 @@ rustfmt: nightly-2020-10-12\n # looking at a beta source tarball and it's uncommented we'll shortly comment it\n # out.\n \n-#dev: 1\n+dev: 1"}, {"sha": "303268fae27a1ddeb048cd58bdcde2683d9a7038", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/87776d7d5322422e5239e153e793b687f7f9c379/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87776d7d5322422e5239e153e793b687f7f9c379/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=87776d7d5322422e5239e153e793b687f7f9c379", "patch": "@@ -1,25 +1,20 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n   --> $DIR/session-derive-errors.rs:28:1\n    |\n-LL | / #[error = \"E0123\"]\n-LL | |\n-LL | | enum SessionDiagnosticOnEnum {\n-LL | |     Foo,\n-LL | |     Bar,\n-LL | | }\n-   | |_^\n+LL | #[error = \"E0123\"]\n+   | ^\n \n error: `#[label = ...]` is not a valid SessionDiagnostic struct attribute\n   --> $DIR/session-derive-errors.rs:37:1\n    |\n LL | #[label = \"This is in the wrong place\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n \n error: `#[suggestion = ...]` is not a valid SessionDiagnostic field attribute\n   --> $DIR/session-derive-errors.rs:44:5\n    |\n LL |     #[suggestion = \"this is the wrong kind of attribute\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^\n \n error: `error` specified multiple times\n   --> $DIR/session-derive-errors.rs:52:11\n@@ -37,21 +32,21 @@ error: `code` not specified\n   --> $DIR/session-derive-errors.rs:67:1\n    |\n LL | struct ErrorCodeNotProvided {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^\n    |\n    = help: use the [code = \"...\"] attribute to set this diagnostic's error code \n \n error: the `#[message = \"...\"]` attribute can only be applied to fields of type Span\n   --> $DIR/session-derive-errors.rs:95:5\n    |\n LL |     #[message = \"this message is applied to a String field\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^\n \n error: `name` doesn't refer to a field on this type\n   --> $DIR/session-derive-errors.rs:102:1\n    |\n LL | #[message = \"This error has a field, and references {name}\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/session-derive-errors.rs:110:1\n@@ -77,59 +72,53 @@ error: The `#[label = ...]` attribute can only be applied to fields of type Span\n   --> $DIR/session-derive-errors.rs:138:5\n    |\n LL |     #[label = \"See here\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^\n \n error: `nonsense` is not a valid key for `#[suggestion(...)]`\n   --> $DIR/session-derive-errors.rs:163:18\n    |\n LL |     #[suggestion(nonsense = \"This is nonsense\")]\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^\n \n error: `msg` is not a valid key for `#[suggestion(...)]`\n   --> $DIR/session-derive-errors.rs:171:18\n    |\n LL |     #[suggestion(msg = \"This is a suggestion\")]\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^\n \n error: missing suggestion message\n   --> $DIR/session-derive-errors.rs:179:7\n    |\n LL |     #[suggestion(code = \"This is suggested code\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^\n    |\n    = help: provide a suggestion message using #[suggestion(message = \"...\")]\n \n error: wrong field type for suggestion\n   --> $DIR/session-derive-errors.rs:194:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: Applicability,\n-   | |_____________________________^\n+LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+   |     ^\n    |\n    = help: #[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Span\n   --> $DIR/session-derive-errors.rs:209:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Span, Span, Applicability),\n-   | |___________________________________________^\n+LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+   |     ^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n   --> $DIR/session-derive-errors.rs:217:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Applicability, Applicability, Span),\n-   | |____________________________________________________^\n+LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+   |     ^\n \n error: invalid annotation list `#[label(...)]`\n   --> $DIR/session-derive-errors.rs:225:7\n    |\n LL |     #[label(\"wrong kind of annotation for label\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^\n \n error: aborting due to 18 previous errors\n "}]}