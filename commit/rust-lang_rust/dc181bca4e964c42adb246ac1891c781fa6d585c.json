{"sha": "dc181bca4e964c42adb246ac1891c781fa6d585c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTgxYmNhNGU5NjRjNDJhZGIyNDZhYzE4OTFjNzgxZmE2ZDU4NWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-04T01:49:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-04T01:51:41Z"}, "message": "rustc: Stub Rust intrinsics. We check in the .ll file for now to temporarily dodge a dependency on clang.", "tree": {"sha": "ef99d018332ef885821c50301f2506c3ded10d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef99d018332ef885821c50301f2506c3ded10d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc181bca4e964c42adb246ac1891c781fa6d585c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc181bca4e964c42adb246ac1891c781fa6d585c", "html_url": "https://github.com/rust-lang/rust/commit/dc181bca4e964c42adb246ac1891c781fa6d585c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc181bca4e964c42adb246ac1891c781fa6d585c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c36645b358a5e3ed8502177076b69ad4e243a030", "url": "https://api.github.com/repos/rust-lang/rust/commits/c36645b358a5e3ed8502177076b69ad4e243a030", "html_url": "https://github.com/rust-lang/rust/commit/c36645b358a5e3ed8502177076b69ad4e243a030"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "7c4b54500e780f60bd3f344021bc400e9f6017f4", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc181bca4e964c42adb246ac1891c781fa6d585c/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc181bca4e964c42adb246ac1891c781fa6d585c/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=dc181bca4e964c42adb246ac1891c781fa6d585c", "patch": "@@ -0,0 +1,8 @@\n+#include \"../rust_internal.h\"\n+\n+extern \"C\" size_t\n+rust_intrinsic_vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n+{\n+    return v->fill / ty->size;\n+}\n+"}, {"sha": "ebd5d15cff4a7dfa0e9bcb87c00392404ae659ed", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dc181bca4e964c42adb246ac1891c781fa6d585c/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/dc181bca4e964c42adb246ac1891c781fa6d585c/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=dc181bca4e964c42adb246ac1891c781fa6d585c", "patch": "@@ -0,0 +1,66 @@\n+; ModuleID = 'intrinsics.cpp'\n+target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32\"\n+target triple = \"$(LLVM_TRIPLE)\"\n+\n+%0 = type { i32, i8**, i32 }\n+%1 = type { %\"struct.hash_map<rust_task *, rust_handle<rust_task> *>::map_entry\"* }\n+%2 = type { %\"struct.hash_map<rust_port *, rust_handle<rust_port> *>::map_entry\"* }\n+%3 = type { %\"struct.hash_map<rust_dom *, rust_handle<rust_dom> *>::map_entry\"* }\n+%4 = type { i32, %struct.rust_dom**, i32 }\n+%5 = type { i32 (...)**, %6 }\n+%6 = type { i32, %class.rust_message_queue**, i32 }\n+%7 = type opaque\n+%8 = type { %\"struct.hash_map<rust_port *, rust_proxy<rust_port> *>::map_entry\"* }\n+%class.array_list = type { i32, %struct.maybe_proxy**, i32 }\n+%class.hash_map = type { %\"struct.hash_map<rust_task *, rust_proxy<rust_task> *>::map_entry\"* }\n+%class.indexed_list = type { i32 (...)**, %4 }\n+%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n+%class.ptr_vec = type { %struct.rust_dom*, i32, i32, %class.rust_crate_cache** }\n+%class.rust_crate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }\n+%class.rust_crate_cache = type { [4 x i8], %\"class.rust_crate_cache::rust_sym\"**, %\"class.rust_crate_cache::c_sym\"**, %\"class.rust_crate_cache::lib\"**, %struct.type_desc*, %class.rust_crate*, %struct.rust_dom*, i32 }\n+%\"class.rust_crate_cache::c_sym\" = type { [4 x i8], i32, %\"class.rust_crate_cache::lib\"*, %struct.rust_dom* }\n+%\"class.rust_crate_cache::lib\" = type { [4 x i8], i32, %struct.rust_dom* }\n+%\"class.rust_crate_cache::rust_sym\" = type { [4 x i8], i32, %\"class.rust_crate_cache::c_sym\"*, %struct.rust_dom* }\n+%class.rust_handle = type opaque\n+%class.rust_kernel = type { [12 x i8], %class.memory_region*, %class.rust_log, %class.rust_srv*, %1, %2, %3, i8, %class.lock_and_signal, %class.indexed_list, %5 }\n+%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_dom*, i8, i8 }\n+%class.rust_message_queue = type { [20 x i8], %class.memory_region, %class.rust_kernel*, %7*, i32 }\n+%class.rust_srv = type { i32 (...)**, %class.memory_region, %class.memory_region }\n+%class.rust_task_list = type { [16 x i8], %struct.rust_dom*, i8* }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n+%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }\n+%struct._opaque_pthread_attr_t = type { i32, [36 x i8] }\n+%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }\n+%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n+%struct.gc_alloc = type { %struct.gc_alloc*, %struct.gc_alloc*, i32, [0 x i8] }\n+%\"struct.hash_map<rust_dom *, rust_handle<rust_dom> *>::map_entry\" = type opaque\n+%\"struct.hash_map<rust_port *, rust_handle<rust_port> *>::map_entry\" = type opaque\n+%\"struct.hash_map<rust_port *, rust_proxy<rust_port> *>::map_entry\" = type opaque\n+%\"struct.hash_map<rust_task *, rust_handle<rust_task> *>::map_entry\" = type opaque\n+%\"struct.hash_map<rust_task *, rust_proxy<rust_task> *>::map_entry\" = type opaque\n+%struct.maybe_proxy = type { [4 x i8], %struct.rust_task* }\n+%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n+%struct.rust_alarm = type { %struct.rust_task*, i32 }\n+%struct.rust_cond = type { i8 }\n+%struct.rust_dom = type { [4 x i8], i32, %class.rust_crate*, %class.rust_log, i32, %class.rust_srv*, %class.memory_region, %class.memory_region, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.ptr_vec, %struct.randctx, %struct.rust_task*, %struct.rust_task*, i32, %class.rust_kernel*, i32, %class.hash_map, %8, %class.rust_message_queue*, %struct._opaque_pthread_attr_t }\n+%struct.rust_task = type { [8 x i8], %struct.stk_seg*, i32, i32, %struct.gc_alloc*, %struct.rust_dom*, %class.rust_crate_cache*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, i32, %class.timer, i32*, %class.array_list, %struct.rust_alarm, %class.rust_handle* }\n+%struct.rust_vec = type { [4 x i8], i32, i32, i32, [0 x i8] }\n+%struct.stk_seg = type { i32, i32, [0 x i8] }\n+%struct.type_desc = type { %struct.type_desc**, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+\n+define i32 @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind readonly ssp {\n+entry:\n+  %fill = getelementptr inbounds %struct.rust_vec* %v, i32 0, i32 2\n+  %tmp1 = load i32* %fill, align 4, !tbaa !0\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %tmp3 = load i32* %size, align 4, !tbaa !0\n+  %div = udiv i32 %tmp1, %tmp3\n+  ret i32 %div\n+}\n+\n+!0 = metadata !{metadata !\"long\", metadata !1}\n+!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n+!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}"}]}