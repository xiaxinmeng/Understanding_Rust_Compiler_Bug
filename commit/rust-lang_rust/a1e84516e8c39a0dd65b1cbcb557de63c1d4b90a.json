{"sha": "a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZTg0NTE2ZThjMzlhMGRkNjViMWNiY2I1NTdkZTYzYzFkNGI5MGE=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-04-30T09:42:34Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-04-30T09:53:38Z"}, "message": "Avoid `rustup` invocation for non-rustup rust installation", "tree": {"sha": "b0e670eb93268e409ae03061b4a391f91386c9d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e670eb93268e409ae03061b4a391f91386c9d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl6qoCUACgkQztOS3gxI\nPQAaRg/8DiDmL2xpX+ZuA1ZIKpgWQL+OU3hN/pZ4RuahQJE2tYH2gn8emSd4Gew7\nnu68olf8thSgSkU7s3+XKJeCyTvgY4yleUUCGwkLcW53TboQ6458pdn3XWdvH3TP\n5Ca+rdSM3NsQHpdG9pzmG82du52AP10qebTCWt+fZtcaqLQlw+BNBu63FIraALjI\n1gIk9BZwouKWryHprpSoKW0Lv7bzUHL2SScKgvJpyWLzPeDwuodlCRzliqQT/ep0\nvznRMW7em80mMckGP9D/HQoXBJ00j9ZILlRVTgjMqE2XS59viA3sy7FcxSOw5jqQ\nrAXi/vZx+HpT+wlAdZsM4B/AT+tnGlh5UW0Cga3A4h3Z1rrQOSctxU73knK35bdZ\nQaoP6yENleStm33mzVMf0Tfc6leBjX9Q/Axt3If3iQnKvzw3Y0ZaGakgOqo+KkgM\nA2aRtTs/qhW5G6005yyrr+4d9RiWndVU5ZJ2Qq37jgnM9notTNsSmRVR+ueCVLHG\nopNuX9KTz+glPcS6P0+Cl1y0GIU4tl2kilFXB6hLCJN4PTi2KTAqxFzYc/en5/te\nHYQKWP3O9xHysAUsQe3Wk/sFfLbcQRDXOL90rXwckdyVb052bqMpLrGlvhRO/jPp\nGzhIE/kquoPCEClLzz0lk71gN+GDRC4houbA81ohxNWcpFkcp/Y=\n=tjQk\n-----END PGP SIGNATURE-----", "payload": "tree b0e670eb93268e409ae03061b4a391f91386c9d6\nparent 1cde354c35f425026184b8d72f4f5865e96975d4\nauthor oxalica <oxalicc@pm.me> 1588239754 +0800\ncommitter oxalica <oxalicc@pm.me> 1588240418 +0800\n\nAvoid `rustup` invocation for non-rustup rust installation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "html_url": "https://github.com/rust-lang/rust/commit/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cde354c35f425026184b8d72f4f5865e96975d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cde354c35f425026184b8d72f4f5865e96975d4", "html_url": "https://github.com/rust-lang/rust/commit/1cde354c35f425026184b8d72f4f5865e96975d4"}], "stats": {"total": 100, "additions": 67, "deletions": 33}, "files": [{"sha": "bf4d85dcb08d4c5e64cf2d1371b3fb723034d345", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 67, "deletions": 33, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "patch": "@@ -10,7 +10,6 @@ pub mod pre_commit;\n pub mod codegen;\n mod ast_src;\n \n-use anyhow::Context;\n use std::{\n     env,\n     io::Write,\n@@ -24,9 +23,9 @@ use crate::{\n     not_bash::{date_iso, fs2, pushd, rm_rf, run},\n };\n \n-pub use anyhow::Result;\n+pub use anyhow::{bail, Context as _, Result};\n \n-const TOOLCHAIN: &str = \"stable\";\n+const RUSTFMT_TOOLCHAIN: &str = \"stable\";\n \n pub fn project_root() -> PathBuf {\n     Path::new(\n@@ -57,15 +56,25 @@ pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     let _dir = pushd(project_root());\n     ensure_rustfmt()?;\n \n-    let check = if mode == Mode::Verify { \"--check\" } else { \"\" };\n-    run!(\"rustup run {} -- cargo fmt -- {}\", TOOLCHAIN, check)?;\n-    Ok(())\n+    if Command::new(\"cargo\")\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .args(&[\"fmt\", \"--\"])\n+        .args(if mode == Mode::Verify { &[\"--check\"][..] } else { &[] })\n+        .stderr(Stdio::inherit())\n+        .status()?\n+        .success()\n+    {\n+        Ok(())\n+    } else {\n+        bail!(\"Rustfmt failed\");\n+    }\n }\n \n fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     ensure_rustfmt()?;\n-    let mut rustfmt = Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"rustfmt\", \"--config-path\"])\n+    let mut rustfmt = Command::new(\"rustfmt\")\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .args(&[\"--config-path\"])\n         .arg(project_root().join(\"rustfmt.toml\"))\n         .args(&[\"--config\", \"fn_single_line=true\"])\n         .stdin(Stdio::piped())\n@@ -79,29 +88,42 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n }\n \n fn ensure_rustfmt() -> Result<()> {\n-    match Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"fmt\", \"--version\"])\n+    match Command::new(\"rustfmt\")\n+        .args(&[\"--version\"])\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .stdout(Stdio::piped())\n         .stderr(Stdio::null())\n-        .stdout(Stdio::null())\n-        .status()\n+        .spawn()\n+        .and_then(|child| child.wait_with_output())\n     {\n-        Ok(status) if status.success() => return Ok(()),\n-        _ => (),\n-    };\n-    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n-    run!(\"rustup component add rustfmt --toolchain {}\", TOOLCHAIN)?;\n-    Ok(())\n+        Ok(output)\n+            if output.status.success()\n+                && std::str::from_utf8(&output.stdout)?.contains(RUSTFMT_TOOLCHAIN) =>\n+        {\n+            Ok(())\n+        }\n+        _ => {\n+            bail!(\n+                \"Failed to run rustfmt from toolchain '{0}'. \\\n+                Please run `rustup component add rustfmt --toolchain {0}` to install it.\",\n+                RUSTFMT_TOOLCHAIN,\n+            );\n+        }\n+    }\n }\n \n pub fn run_clippy() -> Result<()> {\n-    match Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"clippy\", \"--version\"])\n+    match Command::new(\"cargo\")\n+        .args(&[\"clippy\", \"--version\"])\n         .stderr(Stdio::null())\n         .stdout(Stdio::null())\n         .status()\n     {\n         Ok(status) if status.success() => (),\n-        _ => install_clippy().context(\"install clippy\")?,\n+        _ => bail!(\n+            \"Failed run cargo clippy. \\\n+            Please run `rustup component add clippy` to install it.\",\n+        ),\n     };\n \n     let allowed_lints = [\n@@ -110,17 +132,7 @@ pub fn run_clippy() -> Result<()> {\n         \"clippy::nonminimal_bool\",\n         \"clippy::redundant_pattern_matching\",\n     ];\n-    run!(\n-        \"rustup run {} -- cargo clippy --all-features --all-targets -- -A {}\",\n-        TOOLCHAIN,\n-        allowed_lints.join(\" -A \")\n-    )?;\n-    Ok(())\n-}\n-\n-fn install_clippy() -> Result<()> {\n-    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n-    run!(\"rustup component add clippy --toolchain {}\", TOOLCHAIN)?;\n+    run!(\"cargo clippy --all-features --all-targets -- -A {}\", allowed_lints.join(\" -A \"))?;\n     Ok(())\n }\n \n@@ -130,7 +142,29 @@ pub fn run_fuzzer() -> Result<()> {\n         run!(\"cargo install cargo-fuzz\")?;\n     };\n \n-    run!(\"rustup run nightly -- cargo fuzz run parser\")?;\n+    // Expecting nightly rustc\n+    match Command::new(\"rustc\")\n+        .args(&[\"--version\"])\n+        .env(\"RUSTUP_TOOLCHAIN\", \"nightly\")\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::null())\n+        .spawn()\n+        .and_then(|child| child.wait_with_output())\n+    {\n+        Ok(output)\n+            if output.status.success()\n+                && std::str::from_utf8(&output.stdout)?.contains(\"nightly\") => {}\n+        _ => bail!(\"fuzz tests require nightly rustc\"),\n+    }\n+\n+    let status = Command::new(\"cargo\")\n+        .env(\"RUSTUP_TOOLCHAIN\", \"nightly\")\n+        .args(&[\"fuzz\", \"run\", \"parser\"])\n+        .stderr(Stdio::inherit())\n+        .status()?;\n+    if !status.success() {\n+        bail!(\"{}\", status);\n+    }\n     Ok(())\n }\n "}]}