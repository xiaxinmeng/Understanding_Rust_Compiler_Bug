{"sha": "57ae890265d99c1c01ad50730d372b8354a8d7d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YWU4OTAyNjVkOTljMWMwMWFkNTA3MzBkMzcyYjgzNTRhOGQ3ZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-30T12:57:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:15Z"}, "message": "Simplify const prop checks through PlaceContext", "tree": {"sha": "a0cbfdbbae72595e6f6503579d24bfa9dcbc98c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0cbfdbbae72595e6f6503579d24bfa9dcbc98c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ae890265d99c1c01ad50730d372b8354a8d7d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53cACgkQpp+NIls6\n19kRmBAAgRxzsfCh6apAOKeW99YSaSg9ROWQJcoA2S9s0E/RnRZ6BxLAyaZwXvCn\n1DcuXQBoDfFnPmCOjw+dRESaokzcXYPUe03q831SCtDwJkR/wmC4J4m8AqZ05P58\nYOTEanSovvSI/xJioovZGPWTTxAXTs9Mjydf85/7RokwLz2ruB4yHYajTtWr4j2u\n2RyszmglU9LP0vlhpqKykFJgX7SR+4/ZiDs6tlcF6ZAxnV7hUUkt44LgHZ/5kSLo\nN9EQUXuhXEHsx3KgOTKPiufXl+yiVBe3pT3BTDUc0GtuE2tytZsjcwcJHi2eQxhA\n4K+kSiaMsT5GqKDoNsPZ0fIyIe8e22axpUPXFarEcXID3D6pR1nQW4IsJkwZ8nNZ\nrnpqmD5M4Z0/tegDIZmrGvkHKpZjxhqm3r1PUQ8QH/qYFCyB9MW2ceC1Bl3NWOa0\ni+W/oOmDxMqx1SeBU2xZQs/BW564eD5FyUthyvEp1POPG5CspYIN28YDedHGMjL/\nOcRxDf0p8MqI6vX0m1hLT0JJVN2a9qtASCp+iaWZScgmYIs7x11qUExDPgbtsZXZ\ngX57vNWWEeFvtzLFM15IiPwe5StU3G5SNhaYsnBH5fLMpeXuHdTq26+ciw+lnoLG\nV9skIPnCkjnKJefhXOol5viRcjXgkodzF/IRWi3hC1xv3e226Ek=\n=TjHY\n-----END PGP SIGNATURE-----", "payload": "tree a0cbfdbbae72595e6f6503579d24bfa9dcbc98c0\nparent 65ed591197cdb6e17f505a0b2d8c38d730491c98\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517317033 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494455 +0100\n\nSimplify const prop checks through PlaceContext\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ae890265d99c1c01ad50730d372b8354a8d7d7", "html_url": "https://github.com/rust-lang/rust/commit/57ae890265d99c1c01ad50730d372b8354a8d7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ae890265d99c1c01ad50730d372b8354a8d7d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ed591197cdb6e17f505a0b2d8c38d730491c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ed591197cdb6e17f505a0b2d8c38d730491c98", "html_url": "https://github.com/rust-lang/rust/commit/65ed591197cdb6e17f505a0b2d8c38d730491c98"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "91f7d79108bb8d6a3c6a0f4e643f1d6fced47252", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57ae890265d99c1c01ad50730d372b8354a8d7d7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ae890265d99c1c01ad50730d372b8354a8d7d7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=57ae890265d99c1c01ad50730d372b8354a8d7d7", "patch": "@@ -171,7 +171,7 @@ pub struct Allocation {\n     /// The alignment of the allocation to detect unaligned reads.\n     pub align: Align,\n     /// Whether the allocation (of a static) should be put into mutable memory when translating\n-    /// \n+    ///\n     /// Only happens for `static mut` or `static` with interior mutability\n     pub runtime_mutability: Mutability,\n }"}, {"sha": "f461fb736c5aca0c358b8f24b518b1c502a8b30e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 51, "deletions": 53, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/57ae890265d99c1c01ad50730d372b8354a8d7d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ae890265d99c1c01ad50730d372b8354a8d7d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=57ae890265d99c1c01ad50730d372b8354a8d7d7", "patch": "@@ -15,8 +15,8 @@\n \n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local};\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n-use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp};\n-use rustc::mir::visit::Visitor;\n+use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, BorrowKind};\n+use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::ty::layout::LayoutOf;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, self, Instance};\n@@ -64,11 +64,16 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: MirSource,\n     ) -> OptimizationFinder<'b, 'a, 'tcx> {\n+        let can_const_prop = CanConstProp::check(\n+            mir,\n+            tcx,\n+            tcx.param_env(source.def_id),\n+        );\n         OptimizationFinder {\n             mir,\n             tcx,\n             source,\n-            can_const_prop: CanConstProp::check(mir),\n+            can_const_prop,\n             places: IndexVec::from_elem(None, &mir.local_decls),\n         }\n     }\n@@ -272,78 +277,71 @@ fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (tcx, param_env).layout_of(ty).ok().map(|layout| layout.size.bytes())\n }\n \n-struct CanConstProp {\n+struct CanConstProp<'b, 'a, 'tcx:'a+'b> {\n     can_const_prop: IndexVec<Local, bool>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n     found_assignment: IndexVec<Local, bool>,\n+    mir: &'b Mir<'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl CanConstProp {\n+impl<'b, 'a, 'tcx:'b> CanConstProp<'b, 'a, 'tcx> {\n     /// returns true if `local` can be propagated\n-    fn check<'tcx>(mir: &Mir<'tcx>) -> IndexVec<Local, bool> {\n+    fn check(\n+        mir: &'b Mir<'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n             found_assignment: IndexVec::from_elem(false, &mir.local_decls),\n+            mir,\n+            tcx,\n+            param_env,\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n-            *val = mir.local_kind(local) == LocalKind::Temp;\n+            *val = mir.local_kind(local) != LocalKind::Arg;\n         }\n         cpv.visit_mir(mir);\n         cpv.can_const_prop\n     }\n }\n \n-fn place_to_local(mut place: &Place) -> Option<Local> {\n-    while let Place::Projection(ref proj) = place {\n-        place = &proj.base;\n-    }\n-    if let Place::Local(local) = *place {\n-        Some(local)\n-    } else {\n-        None\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for CanConstProp {\n-    fn visit_statement(\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for CanConstProp<'a, 'b, 'tcx> {\n+    fn visit_local(\n         &mut self,\n-        block: BasicBlock,\n-        statement: &Statement<'tcx>,\n-        location: Location,\n+        &local: &Local,\n+        context: PlaceContext<'tcx>,\n+        _: Location,\n     ) {\n-        self.super_statement(block, statement, location);\n-        match statement.kind {\n-            StatementKind::SetDiscriminant { ref place, .. } |\n-            StatementKind::Assign(ref place, _) => {\n-                if let Some(local) = place_to_local(place) {\n-                    if self.found_assignment[local] {\n-                        self.can_const_prop[local] = false;\n-                    } else {\n-                        self.found_assignment[local] = true\n-                    }\n-                }\n+        use rustc::mir::visit::PlaceContext::*;\n+        match context {\n+            // Constants must have at most one write\n+            // FIXME(oli-obk): we could be more powerful here, if the multiple writes\n+            // only occur in independent execution paths\n+            Store => if self.found_assignment[local] {\n+                self.can_const_prop[local] = false;\n+            } else {\n+                self.found_assignment[local] = true\n             },\n-            StatementKind::InlineAsm { ref outputs, .. } => {\n-                for place in outputs {\n-                    if let Some(local) = place_to_local(place) {\n-                        if self.found_assignment[local] {\n-                            self.can_const_prop[local] = false;\n-                        } else {\n-                            self.found_assignment[local] = true\n-                        }\n-                        return;\n-                    }\n+            // Reading constants is allowed an arbitrary number of times\n+            Copy | Move |\n+            StorageDead | StorageLive |\n+            Validate |\n+            Inspect => {},\n+            Borrow { kind: BorrowKind::Shared, .. } => {\n+                // cannot const prop immutable borrows of types with interior mutability\n+                let has_interior_mutability = self\n+                    .mir\n+                    .local_decls[local]\n+                    .ty\n+                    .is_freeze(self.tcx, self.param_env, self.mir.span);\n+                if has_interior_mutability {\n+                    self.can_const_prop[local] = false;\n                 }\n             }\n-            _ => {}\n-        }\n-    }\n-    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-        self.super_rvalue(rvalue, location);\n-        if let Rvalue::Ref(_, _, ref place) = *rvalue {\n-            if let Some(local) = place_to_local(place) {\n-                self.can_const_prop[local] = false;\n-            }\n+            _ => self.can_const_prop[local] = false,\n         }\n     }\n }"}]}