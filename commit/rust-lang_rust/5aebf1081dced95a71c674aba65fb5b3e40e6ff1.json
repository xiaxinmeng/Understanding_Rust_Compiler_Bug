{"sha": "5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWJmMTA4MWRjZWQ5NWE3MWM2NzRhYmE2NWZiNWIzZTQwZTZmZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T15:43:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T18:07:59Z"}, "message": "Refactor applySourceChange", "tree": {"sha": "bacedf66912eee5a366a3c93c60a39ba29744f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacedf66912eee5a366a3c93c60a39ba29744f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "html_url": "https://github.com/rust-lang/rust/commit/5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d2527880d86653ce00940c65620319b36afcff", "url": "https://api.github.com/repos/rust-lang/rust/commits/83d2527880d86653ce00940c65620319b36afcff", "html_url": "https://github.com/rust-lang/rust/commit/83d2527880d86653ce00940c65620319b36afcff"}], "stats": {"total": 157, "additions": 68, "deletions": 89}, "files": [{"sha": "849c2ec6c6fac0167b6333affcbe3ef4e2a4ccc8", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -40,11 +40,10 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n \n+    ctx: Ctx\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-    ctx: Ctx\n-\n     constructor(ctx: Ctx) {\n         this.ctx = ctx\n     }\n@@ -53,9 +52,8 @@ class TextDocumentContentProvider\n         _uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n-            return '';\n-        }\n+        if (editor == null) return '';\n+\n         return this.ctx.client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n             null,"}, {"sha": "0a0a36e23076d573f204941e4f6114b7df47640a", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -3,10 +3,9 @@ import { Ctx, Cmd } from '../ctx'\n import { analyzerStatus } from './analyzer_status';\n import { matchingBrace } from './matching_brace';\n import { joinLines } from './join_lines';\n-import * as applySourceChange from './apply_source_change';\n+import { onEnter } from './on_enter';\n import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n-import * as onEnter from './on_enter';\n import * as parentModule from './parent_module';\n import * as runnables from './runnables';\n import * as syntaxTree from './syntaxTree';\n@@ -17,7 +16,6 @@ function collectGarbage(ctx: Ctx): Cmd {\n \n export {\n     analyzerStatus,\n-    applySourceChange,\n     expandMacro,\n     joinLines,\n     matchingBrace,"}, {"sha": "1a4b8a2d80882029bf04dbfb6566b2f7bd86404d", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -1,16 +1,14 @@\n import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Ctx, Cmd } from '../ctx';\n import {\n-    handle as applySourceChange,\n-    SourceChange,\n-} from './apply_source_change';\n+    applySourceChange, SourceChange\n+} from '../source_change';\n \n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor) {\n-            return;\n-        }\n+        if (!editor) return;\n+\n         const request: JoinLinesParams = {\n             range: ctx.client.code2ProtocolConverter.asRange(editor.selection),\n             textDocument: { uri: editor.document.uri.toString() },\n@@ -19,7 +17,7 @@ export function joinLines(ctx: Ctx): Cmd {\n             'rust-analyzer/joinLines',\n             request,\n         );\n-        await applySourceChange(change);\n+        await applySourceChange(ctx, change);\n     }\n }\n "}, {"sha": "4503e13f0083e0f462bb1c80628aab42e99a2274", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -1,33 +1,28 @@\n-import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { Server } from '../server';\n import {\n-    handle as applySourceChange,\n+    applySourceChange,\n     SourceChange,\n-} from './apply_source_change';\n+} from '../source_change';\n+import { Cmd, Ctx } from '../ctx';\n \n-export async function handle(event: { text: string }): Promise<boolean> {\n-    const editor = vscode.window.activeTextEditor;\n-    if (\n-        editor == null ||\n-        editor.document.languageId !== 'rust' ||\n-        event.text !== '\\n'\n-    ) {\n-        return false;\n-    }\n-    const request: lc.TextDocumentPositionParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    };\n-    const change = await Server.client.sendRequest<undefined | SourceChange>(\n-        'rust-analyzer/onEnter',\n-        request,\n-    );\n-    if (!change) {\n-        return false;\n+export function onEnter(ctx: Ctx): Cmd {\n+    return async (event: { text: string }) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor || event.text !== '\\n') return false;\n+\n+        const request: lc.TextDocumentPositionParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: ctx.client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        };\n+        const change = await ctx.client.sendRequest<undefined | SourceChange>(\n+            'rust-analyzer/onEnter',\n+            request,\n+        );\n+        if (!change) return false;\n+\n+        await applySourceChange(ctx, change);\n+        return true;\n     }\n-    await applySourceChange(change);\n-    return true;\n }"}, {"sha": "22af5ef321a529baa22400e762c6b46f3ecb499d", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -27,6 +27,28 @@ export class Ctx {\n         this.pushCleanup(d);\n     }\n \n+    overrideCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n+        const defaultCmd = `default:${name}`;\n+        const override = factory(this);\n+        const original = (...args: any[]) =>\n+            vscode.commands.executeCommand(defaultCmd, ...args);\n+        try {\n+            const d = vscode.commands.registerCommand(\n+                name,\n+                async (...args: any[]) => {\n+                    if (!(await override(...args))) {\n+                        return await original(...args);\n+                    }\n+                },\n+            );\n+            this.pushCleanup(d);\n+        } catch (_) {\n+            vscode.window.showWarningMessage(\n+                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n+            );\n+        }\n+    }\n+\n     pushCleanup(d: { dispose(): any }) {\n         this.extCtx.subscriptions.push(d);\n     }"}, {"sha": "c3f2806302c9291c965db6acc9e8be3e5a8171ed", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 10, "deletions": 42, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -27,44 +27,12 @@ export async function activate(context: vscode.ExtensionContext) {\n     function registerCommand(name: string, f: any) {\n         disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n     }\n-    function overrideCommand(\n-        name: string,\n-        f: (...args: any[]) => Promise<boolean>,\n-    ) {\n-        const defaultCmd = `default:${name}`;\n-        const original = (...args: any[]) =>\n-            vscode.commands.executeCommand(defaultCmd, ...args);\n-\n-        try {\n-            registerCommand(name, async (...args: any[]) => {\n-                const editor = vscode.window.activeTextEditor;\n-                if (\n-                    !editor ||\n-                    !editor.document ||\n-                    editor.document.languageId !== 'rust'\n-                ) {\n-                    return await original(...args);\n-                }\n-                if (!(await f(...args))) {\n-                    return await original(...args);\n-                }\n-            });\n-        } catch (_) {\n-            vscode.window.showWarningMessage(\n-                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n-            );\n-        }\n-    }\n \n     // Commands are requests from vscode to the language server\n     registerCommand('rust-analyzer.parentModule', commands.parentModule.handle);\n     registerCommand('rust-analyzer.run', commands.runnables.handle);\n     // Unlike the above this does not send requests to the language server\n     registerCommand('rust-analyzer.runSingle', commands.runnables.handleSingle);\n-    registerCommand(\n-        'rust-analyzer.applySourceChange',\n-        commands.applySourceChange.handle,\n-    );\n     registerCommand(\n         'rust-analyzer.showReferences',\n         (uri: string, position: lc.Position, locations: lc.Location[]) => {\n@@ -78,7 +46,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     );\n \n     if (Server.config.enableEnhancedTyping) {\n-        overrideCommand('type', commands.onEnter.handle);\n+        ctx.overrideCommand('type', commands.onEnter);\n     }\n \n     const watchStatus = new StatusDisplay(\n@@ -91,15 +59,15 @@ export async function activate(context: vscode.ExtensionContext) {\n         string,\n         lc.GenericNotificationHandler,\n     ]> = [\n-        [\n-            'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle,\n-        ],\n-        [\n-            '$/progress',\n-            params => watchStatus.handleProgressNotification(params),\n-        ],\n-    ];\n+            [\n+                'rust-analyzer/publishDecorations',\n+                notifications.publishDecorations.handle,\n+            ],\n+            [\n+                '$/progress',\n+                params => watchStatus.handleProgressNotification(params),\n+            ],\n+        ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();\n "}, {"sha": "a4f9068b2741956cf6c4eecff9a4093658b9e1fc", "filename": "editors/code/src/source_change.ts", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5aebf1081dced95a71c674aba65fb5b3e40e6ff1/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=5aebf1081dced95a71c674aba65fb5b3e40e6ff1", "patch": "@@ -1,16 +1,16 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Server } from '../server';\n+import { Ctx } from './ctx';\n \n export interface SourceChange {\n     label: string;\n     workspaceEdit: lc.WorkspaceEdit;\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n-export async function handle(change: SourceChange) {\n-    const wsEdit = Server.client.protocol2CodeConverter.asWorkspaceEdit(\n+export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n+    const wsEdit = ctx.client.protocol2CodeConverter.asWorkspaceEdit(\n         change.workspaceEdit,\n     );\n     let created;\n@@ -32,10 +32,10 @@ export async function handle(change: SourceChange) {\n         const doc = await vscode.workspace.openTextDocument(toOpenUri);\n         await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n-        const uri = Server.client.protocol2CodeConverter.asUri(\n+        const uri = ctx.client.protocol2CodeConverter.asUri(\n             toReveal.textDocument.uri,\n         );\n-        const position = Server.client.protocol2CodeConverter.asPosition(\n+        const position = ctx.client.protocol2CodeConverter.asPosition(\n             toReveal.position,\n         );\n         const editor = vscode.window.activeTextEditor;", "previous_filename": "editors/code/src/commands/apply_source_change.ts"}]}