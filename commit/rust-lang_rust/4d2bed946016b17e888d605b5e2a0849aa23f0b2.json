{"sha": "4d2bed946016b17e888d605b5e2a0849aa23f0b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMmJlZDk0NjAxNmIxN2U4ODhkNjA1YjVlMmEwODQ5YWEyM2YwYjI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-22T13:33:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:43:41Z"}, "message": "Stabilize `const_let` inside const functions", "tree": {"sha": "8926fe4b029a4db676243ced6bf7a7c656923a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8926fe4b029a4db676243ced6bf7a7c656923a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2bed946016b17e888d605b5e2a0849aa23f0b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2bed946016b17e888d605b5e2a0849aa23f0b2", "html_url": "https://github.com/rust-lang/rust/commit/4d2bed946016b17e888d605b5e2a0849aa23f0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2bed946016b17e888d605b5e2a0849aa23f0b2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e90a12a8a95933604a8b609197fce61bb24a38c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e90a12a8a95933604a8b609197fce61bb24a38c", "html_url": "https://github.com/rust-lang/rust/commit/3e90a12a8a95933604a8b609197fce61bb24a38c"}], "stats": {"total": 244, "additions": 56, "deletions": 188}, "files": [{"sha": "2607f5fd08b4217d9d93f6ee07f20b8aee401613", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -1748,6 +1748,8 @@ pub enum StatementKind<'tcx> {\n     /// (e.g. inspecting constants and discriminant values), and the\n     /// kind of pattern it comes from. This is in order to adapt potential\n     /// error messages to these specific patterns.\n+    ///\n+    /// Note that this also is emitted for regular `let` bindings to aid destructuring diagnostics\n     FakeRead(FakeReadCause, Place<'tcx>),\n \n     /// Write the discriminant for a variant to the enum Place."}, {"sha": "61e79990f92258375fe44d50edf5f9b07fcf0f9a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 7, "deletions": 45, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        if self.tcx.features().const_let {\n+        if self.const_let_allowed() {\n             let mut dest = dest;\n             let index = loop {\n                 match dest {\n@@ -320,6 +320,10 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n+    fn const_let_allowed(&self) -> bool {\n+        self.tcx.features().const_let || self.mode == Mode::ConstFn\n+    }\n+\n     /// Qualify a whole const, static initializer or const fn.\n     fn qualify_const(&mut self) -> (Qualif, Lrc<BitSet<Local>>) {\n         debug!(\"qualifying {} {:?}\", self.mode, self.def_id);\n@@ -357,7 +361,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.tcx.features().const_let {\n+                    if !self.const_let_allowed() {\n                         // Check for unused values. This usually means\n                         // there are extra statements in the AST.\n                         for temp in mir.temps_iter() {\n@@ -464,7 +468,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.tcx.features().const_let => {\n+            LocalKind::Var if !self.const_let_allowed() => {\n                 if self.mode != Mode::Fn {\n                     emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n                                     self.span, GateIssue::Language,\n@@ -1154,48 +1158,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n         self.visit_rvalue(rvalue, location);\n \n-        // Check the allowed const fn argument forms.\n-        if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n-            if self.mir.local_kind(index) == LocalKind::Var &&\n-               self.const_fn_arg_vars.insert(index) &&\n-               !self.tcx.features().const_let {\n-\n-                // Direct use of an argument is permitted.\n-                match *rvalue {\n-                    Rvalue::Use(Operand::Copy(Place::Local(local))) |\n-                    Rvalue::Use(Operand::Move(Place::Local(local))) => {\n-                        if self.mir.local_kind(local) == LocalKind::Arg {\n-                            return;\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-\n-                // Avoid a generic error for other uses of arguments.\n-                if self.qualif.contains(Qualif::FN_ARGUMENT) {\n-                    let decl = &self.mir.local_decls[index];\n-                    let mut err = feature_err(\n-                        &self.tcx.sess.parse_sess,\n-                        \"const_let\",\n-                        decl.source_info.span,\n-                        GateIssue::Language,\n-                        \"arguments of constant functions can only be immutable by-value bindings\"\n-                    );\n-                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\"Constant functions are not allowed to mutate anything. Thus, \\\n-                                  binding to an argument with a mutable pattern is not allowed.\");\n-                        err.note(\"Remove any mutable bindings from the argument list to fix this \\\n-                                  error. In case you need to mutate the argument, try lazily \\\n-                                  initializing a global variable instead of using a const fn, or \\\n-                                  refactoring the code to a functional style to avoid mutation if \\\n-                                  possible.\");\n-                    }\n-                    err.emit();\n-                    return;\n-                }\n-            }\n-        }\n-\n         self.assign(dest, location);\n     }\n "}, {"sha": "5729775e15dc08b04d657c05914e4f8ff653fed4", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -64,12 +64,6 @@ pub fn is_min_const_fn(\n         }\n     }\n \n-    for local in mir.vars_iter() {\n-        return Err((\n-            mir.local_decls[local].source_info.span,\n-            \"local variables in const fn are unstable\".into(),\n-        ));\n-    }\n     for local in &mir.local_decls {\n         check_ty(tcx, local.ty, local.source_info.span)?;\n     }\n@@ -229,7 +223,7 @@ fn check_statement(\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::FakeRead(..) => Err((span, \"match in const fn is unstable\".into())),\n+        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span, PlaceMode::Read),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -270,15 +264,8 @@ fn check_place(\n     mode: PlaceMode,\n ) -> McfResult {\n     match place {\n-        Place::Local(l) => match mode {\n-            PlaceMode::Assign => match mir.local_kind(*l) {\n-                LocalKind::Temp | LocalKind::ReturnPointer => Ok(()),\n-                LocalKind::Arg | LocalKind::Var => {\n-                    Err((span, \"assignments in const fn are unstable\".into()))\n-                }\n-            },\n-            PlaceMode::Read => Ok(()),\n-        },\n+        // assignments to locals, arguments, temporaries or the return slot are fine\n+        Place::Local(_) => Ok(()),\n         // promoteds are always fine, they are essentially constants\n         Place::Promoted(_) => Ok(()),\n         Place::Static(_) => Err((span, \"cannot access `static` items in const fn\".into())),"}, {"sha": "8aa6871fa75875556277949d5c0587215ea55451", "filename": "src/test/ui/consts/const-fn-destructuring-arg.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -8,20 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// test that certain things are disallowed in constant functions\n+// compile-pass\n \n-#![feature(const_fn)]\n-\n-// no destructuring\n-const fn i((\n-            a,\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-            b\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-           ): (u32, u32)) -> u32 {\n+const fn i((a, b): (u32, u32)) -> u32 {\n     a + b\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "029d63a7720a80976192256b0158059aa99d6657", "filename": "src/test/ui/consts/const-fn-destructuring-arg.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr?ref=3e90a12a8a95933604a8b609197fce61bb24a38c", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:17:13\n-   |\n-LL |             a,\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:19:13\n-   |\n-LL |             b\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:22:5\n-   |\n-LL |     a + b\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:22:9\n-   |\n-LL |     a + b\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "aee5539980c6ef7881746dcae9ab9f9dd3074fce", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -38,14 +38,8 @@ const fn get_Y_addr() -> &'static u32 {\n \n const fn get() -> u32 {\n     let x = 22;\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR statements in constant functions are unstable\n     let y = 44;\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR statements in constant functions are unstable\n     x + y\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "90a7314b7d1fd5b9a664e04fa72f6bb6b0be911c", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -16,55 +16,7 @@ error[E0013]: constant functions cannot refer to statics, use a constant instead\n LL |     &Y\n    |     ^^\n \n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:40:13\n-   |\n-LL |     let x = 22;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:40:13\n-   |\n-LL |     let x = 22;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:43:13\n-   |\n-LL |     let y = 44;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:43:13\n-   |\n-LL |     let y = 44;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:46:5\n-   |\n-LL |     x + y\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:46:9\n-   |\n-LL |     x + y\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0013, E0015, E0658.\n+Some errors occurred: E0013, E0015.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "39adf088642be3d8614098b33f5856232f93e514", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:110:44\n    |\n@@ -221,7 +215,7 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "80db24006ec3f111a4a8078a0f3e4935b3d6fd5e", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -106,7 +106,7 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n-const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n+const fn foo30_6() -> bool { let x = true; x }\n const fn foo36(a: bool, b: bool) -> bool { a && b }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo37(a: bool, b: bool) -> bool { a || b }"}, {"sha": "530282cfea92398b1c4ff6dfccdaaa6cb89a23cc", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:110:44\n    |\n@@ -208,6 +202,6 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "aad251a205e9ad5ed14cbdb08bc28a6980ad7ebf", "filename": "src/test/ui/feature-gates/feature-gate-const_let.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -10,13 +10,13 @@\n \n // Test use of const let without feature gate.\n \n-#![feature(const_fn)]\n-\n-const fn foo() -> usize {\n+const FOO: usize = {\n+    //~^ ERROR statements in constants are unstable\n+    //~| ERROR: let bindings in constants are unstable\n     let x = 42;\n-    //~^ ERROR statements in constant functions are unstable\n-    //~| ERROR: let bindings in constant functions are unstable\n+    //~^ ERROR statements in constants are unstable\n+    //~| ERROR: let bindings in constants are unstable\n     42\n-}\n+};\n \n fn main() {}"}, {"sha": "4fab6ec540ebcec37b0248fdf180a91282dffe47", "filename": "src/test/ui/feature-gates/feature-gate-const_let.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2bed946016b17e888d605b5e2a0849aa23f0b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr?ref=4d2bed946016b17e888d605b5e2a0849aa23f0b2", "patch": "@@ -1,19 +1,47 @@\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n   --> $DIR/feature-gate-const_let.rs:16:13\n    |\n LL |     let x = 42;\n    |             ^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n+error[E0658]: statements in constants are unstable (see issue #48821)\n   --> $DIR/feature-gate-const_let.rs:16:13\n    |\n LL |     let x = 42;\n    |             ^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/feature-gate-const_let.rs:13:1\n+   |\n+LL | / const FOO: usize = {\n+LL | |     //~^ ERROR statements in constants are unstable\n+LL | |     //~| ERROR: let bindings in constants are unstable\n+LL | |     let x = 42;\n+...  |\n+LL | |     42\n+LL | | };\n+   | |__^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/feature-gate-const_let.rs:13:1\n+   |\n+LL | / const FOO: usize = {\n+LL | |     //~^ ERROR statements in constants are unstable\n+LL | |     //~| ERROR: let bindings in constants are unstable\n+LL | |     let x = 42;\n+...  |\n+LL | |     42\n+LL | | };\n+   | |__^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}