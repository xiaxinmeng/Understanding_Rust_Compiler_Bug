{"sha": "0958c8f4cad247204ed7d9f9723f273ef81074f1", "node_id": "C_kwDOAAsO6NoAKDA5NThjOGY0Y2FkMjQ3MjA0ZWQ3ZDlmOTcyM2YyNzNlZjgxMDc0ZjE", "commit": {"author": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2022-02-14T19:01:19Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2022-02-14T21:09:53Z"}, "message": "llvm: migrate to new parameter-bearing uwtable attr\n\nIn https://reviews.llvm.org/D114543 the uwtable attribute gained a flag\nso that we can ask for sync uwtables instead of async, as the former are\nmuch cheaper. The default is async, so that's what I've done here, but I\nleft a TODO that we might be able to do better.\n\nWhile in here I went ahead and dropped support for removing uwtable\nattributes in rustc: we never did it, so I didn't write the extra C++\nbridge code to make it work. Maybe I should have done the same thing\nwith the `sync|async` parameter but we'll see.", "tree": {"sha": "dee36b326af39468769a97bcbe1f4de2cd4de51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee36b326af39468769a97bcbe1f4de2cd4de51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0958c8f4cad247204ed7d9f9723f273ef81074f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0958c8f4cad247204ed7d9f9723f273ef81074f1", "html_url": "https://github.com/rust-lang/rust/commit/0958c8f4cad247204ed7d9f9723f273ef81074f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0958c8f4cad247204ed7d9f9723f273ef81074f1/comments", "author": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dd59ed2154f4158ae37e6994b678a6249a7bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/52dd59ed2154f4158ae37e6994b678a6249a7bb0"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "7680d4fd233be498e81688d21e0a92c7151466c0", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=0958c8f4cad247204ed7d9f9723f273ef81074f1", "patch": "@@ -64,7 +64,7 @@ pub(crate) unsafe fn codegen(\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n         if tcx.sess.must_emit_unwind_tables() {\n-            attributes::emit_uwtable(llfn, true);\n+            attributes::emit_uwtable(llfn);\n         }\n \n         let callee = kind.fn_name(method.name);\n@@ -111,7 +111,7 @@ pub(crate) unsafe fn codegen(\n         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n     }\n     if tcx.sess.must_emit_unwind_tables() {\n-        attributes::emit_uwtable(llfn, true);\n+        attributes::emit_uwtable(llfn);\n     }\n \n     let kind = if has_alloc_error_handler { AllocatorKind::Global } else { AllocatorKind::Default };"}, {"sha": "30a52d6bd67fc5f49b51a223f4ac4b4f9302aa47", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=0958c8f4cad247204ed7d9f9723f273ef81074f1", "patch": "@@ -59,8 +59,11 @@ pub fn sanitize<'ll>(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function.\n #[inline]\n-pub fn emit_uwtable(val: &Value, emit: bool) {\n-    Attribute::UWTable.toggle_llfn(Function, val, emit);\n+pub fn emit_uwtable(val: &Value) {\n+    // NOTE: We should determine if we even need async unwind tables, as they\n+    // take have more overhead and if we can use sync unwind tables we\n+    // probably should.\n+    llvm::EmitUWTableAttr(val, true);\n }\n \n /// Tell LLVM if this function should be 'naked', i.e., skip the epilogue and prologue.\n@@ -275,7 +278,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     // You can also find more info on why Windows always requires uwtables here:\n     //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n     if cx.sess().must_emit_unwind_tables() {\n-        attributes::emit_uwtable(llfn, true);\n+        attributes::emit_uwtable(llfn);\n     }\n \n     if cx.sess().opts.debugging_opts.profile_sample_use.is_some() {"}, {"sha": "90d4367a280a48fc34642a1e63dc36fec21b2f23", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0958c8f4cad247204ed7d9f9723f273ef81074f1", "patch": "@@ -1182,6 +1182,7 @@ extern \"C\" {\n     pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddStructRetAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n+    pub fn LLVMRustEmitUWTableAttr(Fn: &Value, async_: bool);\n     pub fn LLVMRustAddFunctionAttrStringValue(\n         Fn: &Value,\n         index: c_uint,"}, {"sha": "8586b0466c8d0208d51b17d0a4517ba20c388893", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=0958c8f4cad247204ed7d9f9723f273ef81074f1", "patch": "@@ -31,6 +31,10 @@ impl LLVMRustResult {\n     }\n }\n \n+pub fn EmitUWTableAttr(llfn: &Value, async_: bool) {\n+    unsafe { LLVMRustEmitUWTableAttr(llfn, async_) }\n+}\n+\n pub fn AddFunctionAttrStringValue(llfn: &Value, idx: AttributePlace, attr: &CStr, value: &CStr) {\n     unsafe {\n         LLVMRustAddFunctionAttrStringValue(llfn, idx.as_uint(), attr.as_ptr(), value.as_ptr())"}, {"sha": "23333199506515712d5a32e678086e477f87c48b", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0958c8f4cad247204ed7d9f9723f273ef81074f1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=0958c8f4cad247204ed7d9f9723f273ef81074f1", "patch": "@@ -334,6 +334,17 @@ extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n   AddAttribute(F, Index, Attr);\n }\n \n+extern \"C\" void LLVMRustEmitUWTableAttr(LLVMValueRef Fn, bool Async) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_LT(15, 0)\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::UWTable);\n+#else\n+  Attribute Attr = Attribute::getWithUWTableKind(\n+      F->getContext(), Async ? UWTableKind::Async : UWTableKind::Sync);\n+#endif\n+  AddAttribute(F, AttributeList::AttrIndex::FunctionIndex, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,"}]}