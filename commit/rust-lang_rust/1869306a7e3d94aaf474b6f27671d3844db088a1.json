{"sha": "1869306a7e3d94aaf474b6f27671d3844db088a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjkzMDZhN2UzZDk0YWFmNDc0YjZmMjc2NzFkMzg0NGRiMDg4YTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T05:43:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T22:32:24Z"}, "message": "change syntax from lambda[send] to sendfn", "tree": {"sha": "0d28ec435d519f011119814f512a1323cd341bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d28ec435d519f011119814f512a1323cd341bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1869306a7e3d94aaf474b6f27671d3844db088a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1869306a7e3d94aaf474b6f27671d3844db088a1", "html_url": "https://github.com/rust-lang/rust/commit/1869306a7e3d94aaf474b6f27671d3844db088a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1869306a7e3d94aaf474b6f27671d3844db088a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f512e67fb97bf9d1cbf9337c8c6e877c91faea06", "url": "https://api.github.com/repos/rust-lang/rust/commits/f512e67fb97bf9d1cbf9337c8c6e877c91faea06", "html_url": "https://github.com/rust-lang/rust/commit/f512e67fb97bf9d1cbf9337c8c6e877c91faea06"}], "stats": {"total": 97, "additions": 15, "deletions": 82}, "files": [{"sha": "2a794b9159baef4b20bfd1a97ac0d5764e268b18", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=1869306a7e3d94aaf474b6f27671d3844db088a1", "patch": "@@ -349,7 +349,6 @@ fn mk_test_wrapper(cx: test_ctxt,\n \n     let wrapper_capture: @ast::capture = @{\n         node: {\n-            is_send: false,\n             copies: [],\n             moves: []\n         },"}, {"sha": "5a179c9bd51ec8905c3d59d711a8eaff56d4909d", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=1869306a7e3d94aaf474b6f27671d3844db088a1", "patch": "@@ -255,7 +255,6 @@ tag expr_ {\n \n // At the moment, one can only capture local variables.\n type capture_ = {\n-    is_send: bool,\n     copies: [spanned<ident>],\n     moves: [spanned<ident>]\n };"}, {"sha": "9f42a92f62dd2b867d5b9799cb132e26271ffe9e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 79, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=1869306a7e3d94aaf474b6f27671d3844db088a1", "patch": "@@ -14,13 +14,6 @@ tag restriction { UNRESTRICTED; RESTRICT_NO_CALL_EXPRS; RESTRICT_NO_BAR_OP; }\n \n tag file_type { CRATE_FILE; SOURCE_FILE; }\n \n-tag fn_kw {\n-    fn_kw_fn;\n-    fn_kw_fn_at;\n-    fn_kw_lambda;\n-    fn_kw_block;\n-}\n-\n type parse_sess = @{cm: codemap::codemap, mutable next_id: node_id};\n \n fn next_node_id(sess: parse_sess) -> node_id {\n@@ -544,13 +537,9 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"block\") {\n         t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"lambda\") {\n-        if eat(p, token::LBRACKET) { // lambda[send](...)\n-            expect_word(p, \"send\");\n-            expect(p, token::RBRACKET);\n-            t = parse_ty_fn(ast::proto_send, p);\n-        } else { // lambda(...)\n-            t = parse_ty_fn(ast::proto_shared(ast::sugar_sexy), p);\n-        }\n+        t = parse_ty_fn(ast::proto_shared(ast::sugar_sexy), p);\n+    } else if eat_word(p, \"sendfn\") {\n+        t = parse_ty_fn(ast::proto_send, p);\n     } else if eat_word(p, \"obj\") {\n         t = parse_ty_obj(p);\n     } else if p.peek() == token::MOD_SEP || is_ident(p.peek()) {\n@@ -844,12 +833,14 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n                 ret parse_spawn_expr(p);\n         */\n     } else if eat_word(p, \"fn\") {\n-        let kw = parse_fn_anon_kw(p);\n-        ret parse_fn_expr(p, kw);\n+        let proto = parse_fn_ty_proto(p);\n+        ret parse_fn_expr(p, proto);\n     } else if eat_word(p, \"block\") {\n-        ret parse_fn_expr(p, fn_kw_block);\n+        ret parse_fn_expr(p, ast::proto_block);\n     } else if eat_word(p, \"lambda\") {\n-        ret parse_fn_expr(p, fn_kw_lambda);\n+        ret parse_fn_expr(p, ast::proto_shared(ast::sugar_sexy));\n+    } else if eat_word(p, \"sendfn\") {\n+        ret parse_fn_expr(p, ast::proto_send);\n     } else if eat_word(p, \"unchecked\") {\n         ret parse_block_expr(p, lo, ast::unchecked_blk);\n     } else if eat_word(p, \"unsafe\") {\n@@ -1290,7 +1281,7 @@ fn parse_if_expr(p: parser) -> @ast::expr {\n \n // Parses:\n //\n-//   CC := [send; copy ID*; move ID*]\n+//   CC := [copy ID*; move ID*]\n //\n // where any part is optional and trailing ; is permitted.\n fn parse_capture_clause(p: parser) -> @ast::capture {\n@@ -1322,17 +1313,13 @@ fn parse_capture_clause(p: parser) -> @ast::capture {\n         std::util::unreachable();\n     }\n \n-    let is_send = false;\n     let copies = [];\n     let moves = [];\n \n     let lo = p.get_lo_pos();\n     if eat(p, token::LBRACKET) {\n         while !eat(p, token::RBRACKET) {\n-            if eat_word(p, \"send\") {\n-                is_send = true;\n-                expect_opt_trailing_semi(p);\n-            } else if eat_word(p, \"copy\") {\n+            if eat_word(p, \"copy\") {\n                 copies += eat_ident_list(p);\n                 expect_opt_trailing_semi(p);\n             } else if eat_word(p, \"move\") {\n@@ -1346,68 +1333,25 @@ fn parse_capture_clause(p: parser) -> @ast::capture {\n     }\n     let hi = p.get_last_hi_pos();\n \n-    ret @spanned(lo, hi, {is_send: is_send, copies: copies, moves: moves});\n+    ret @spanned(lo, hi, {copies: copies, moves: moves});\n }\n \n-fn select_proto(p: parser, kw: fn_kw, is_send: bool) -> ast::proto {\n-    ret alt (kw, is_send) {\n-      (fn_kw_fn., true) { ast::proto_bare }\n-      (fn_kw_fn_at., true) { ast::proto_send }\n-      (fn_kw_lambda., true) { ast::proto_send }\n-      (fn_kw_block., true) { p.fatal(\"block cannot be declared sendable\") }\n-      (fn_kw_fn., false) { ast::proto_bare }\n-      (fn_kw_fn_at., false) { ast::proto_shared(ast::sugar_normal) }\n-      (fn_kw_lambda., false) { ast::proto_shared(ast::sugar_sexy) }\n-      (fn_kw_block., false) { ast::proto_block }\n-    };\n-}\n-\n-fn parse_fn_expr(p: parser, kw: fn_kw) -> @ast::expr {\n+fn parse_fn_expr(p: parser, proto: ast::proto) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n     let captures = parse_capture_clause(p);\n-    let is_send = captures.node.is_send;\n-    let proto = select_proto(p, kw, is_send);\n     let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n     let body = parse_block(p);\n     let _fn = {decl: decl, proto: proto, body: body};\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, captures));\n }\n \n-/*\n-** This version triggers an LLVM bug: **\n-\n-fn parse_fn_expr(p: parser, kw: fn_kw) -> @ast::expr {\n-    let lo = p.get_last_lo_pos();\n-    let captures = parse_capture_clause(p);\n-    let is_send = captures.node.is_send;\n-    //let proto = select_proto(p, kw, is_send);\n-    log_err (kw, captures, is_send);\n-    let proto = alt (kw, is_send) {\n-      (fn_kw_fn., true) { ast::proto_bare }\n-      (fn_kw_fn_at., true) { ast::proto_send }\n-      (fn_kw_lambda., true) { ast::proto_send }\n-      (fn_kw_block., true) { p.fatal(\"block cannot be declared sendable\") }\n-      (fn_kw_fn., false) { ast::proto_bare }\n-      (fn_kw_fn_at., false) { ast::proto_shared(ast::sugar_normal) }\n-      (fn_kw_lambda., false) { ast::proto_shared(ast::sugar_sexy) }\n-      (fn_kw_block., false) { ast::proto_block }\n-    };\n-    fail \"foo\";\n-    //let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n-    //let body = parse_block(p);\n-    //let _fn = {decl: decl, proto: proto, body: body};\n-    //ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, captures));\n-}\n-*/\n-\n-\n fn parse_fn_block_expr(p: parser) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n     let decl = parse_fn_block_decl(p);\n     let mid = p.get_last_hi_pos();\n     let body = parse_block_tail(p, lo, ast::default_blk);\n     let _fn = {decl: decl, proto: ast::proto_block, body: body};\n-    let captures = @spanned(lo, mid, {is_send: false, copies: [], moves: []});\n+    let captures = @spanned(lo, mid, {copies: [], moves: []});\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn, captures));\n }\n \n@@ -2191,15 +2135,6 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n     }\n }\n \n-fn parse_fn_anon_kw(p: parser) -> fn_kw {\n-    if p.peek() == token::AT {\n-        p.bump();\n-        fn_kw_fn_at\n-    } else {\n-        fn_kw_fn\n-    }\n-}\n-\n fn parse_method_proto(p: parser) -> ast::proto {\n     if eat_word(p, \"fn\") {\n         ret ast::proto_bare;"}, {"sha": "0b0c16eb178dbfb9009b7f8dd6b9e4b56aa8198d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1869306a7e3d94aaf474b6f27671d3844db088a1/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=1869306a7e3d94aaf474b6f27671d3844db088a1", "patch": "@@ -1600,7 +1600,7 @@ fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n           ast::proto_bare. { \"fn\" }\n           ast::proto_block. { \"block\" }\n-          ast::proto_send. { \"lambda[send]\" }\n+          ast::proto_send. { \"sendfn\" }\n           ast::proto_shared(ast::sugar_normal.) { \"fn@\" }\n           ast::proto_shared(ast::sugar_sexy.) { \"lambda\" }\n         };"}]}