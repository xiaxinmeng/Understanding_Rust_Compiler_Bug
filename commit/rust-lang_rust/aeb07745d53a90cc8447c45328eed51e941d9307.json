{"sha": "aeb07745d53a90cc8447c45328eed51e941d9307", "node_id": "C_kwDOAAsO6NoAKGFlYjA3NzQ1ZDUzYTkwY2M4NDQ3YzQ1MzI4ZWVkNTFlOTQxZDkzMDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-23T18:10:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-23T18:10:10Z"}, "message": "Spawn a proc-macro-srv instance per workspace", "tree": {"sha": "3d4e653e9a973f21a19a9bf72d254b7eab85832d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4e653e9a973f21a19a9bf72d254b7eab85832d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb07745d53a90cc8447c45328eed51e941d9307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb07745d53a90cc8447c45328eed51e941d9307", "html_url": "https://github.com/rust-lang/rust/commit/aeb07745d53a90cc8447c45328eed51e941d9307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb07745d53a90cc8447c45328eed51e941d9307/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a6fac37ad61ff512993ee64b47deff9a52c560", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a6fac37ad61ff512993ee64b47deff9a52c560", "html_url": "https://github.com/rust-lang/rust/commit/84a6fac37ad61ff512993ee64b47deff9a52c560"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "700e3e19bb96bde7bc4ebda99b5927738542668e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=aeb07745d53a90cc8447c45328eed51e941d9307", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct GlobalState {\n     pub(crate) proc_macro_changed: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_client: Option<ProcMacroServer>,\n+    pub(crate) proc_macro_clients: Vec<Option<ProcMacroServer>>,\n \n     pub(crate) flycheck: Vec<FlycheckHandle>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n@@ -151,7 +151,7 @@ impl GlobalState {\n             proc_macro_changed: false,\n             last_reported_status: None,\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_client: None,\n+            proc_macro_clients: vec![],\n \n             flycheck: Vec::new(),\n             flycheck_sender,"}, {"sha": "deb777c952fdf7d7658f92b77b8d50f68244499c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=aeb07745d53a90cc8447c45328eed51e941d9307", "patch": "@@ -44,7 +44,7 @@ use crate::{\n };\n \n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_client = None;\n+    state.proc_macro_clients.clear();\n     state.proc_macro_changed = false;\n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n     state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());"}, {"sha": "d69b2be25650b457d1571b09854ccee821e97907", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb07745d53a90cc8447c45328eed51e941d9307/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=aeb07745d53a90cc8447c45328eed51e941d9307", "patch": "@@ -303,18 +303,21 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        if self.proc_macro_client.is_none() {\n+        if self.proc_macro_clients.is_empty() {\n             if let Some((path, args)) = self.config.proc_macro_srv() {\n-                match ProcMacroServer::spawn(path.clone(), args) {\n-                    Ok(it) => self.proc_macro_client = Some(it),\n-                    Err(err) => {\n-                        tracing::error!(\n-                            \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n-                            path.display(),\n-                            err\n-                        );\n-                    }\n-                }\n+                self.proc_macro_clients = (0..self.workspaces.len())\n+                    .map(|_| match ProcMacroServer::spawn(path.clone(), args.clone()) {\n+                        Ok(it) => Some(it),\n+                        Err(err) => {\n+                            tracing::error!(\n+                                \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n+                                path.display(),\n+                                err\n+                            );\n+                            None\n+                        }\n+                    })\n+                    .collect();\n             }\n         }\n \n@@ -331,15 +334,7 @@ impl GlobalState {\n \n         // Create crate graph from all the workspaces\n         let crate_graph = {\n-            let proc_macro_client = self.proc_macro_client.as_ref();\n             let dummy_replacements = self.config.dummy_replacements();\n-            let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n-                load_proc_macro(\n-                    proc_macro_client,\n-                    path,\n-                    dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n-                )\n-            };\n \n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n@@ -359,7 +354,15 @@ impl GlobalState {\n             };\n \n             let mut crate_graph = CrateGraph::default();\n-            for ws in self.workspaces.iter() {\n+            for (idx, ws) in self.workspaces.iter().enumerate() {\n+                let proc_macro_client = self.proc_macro_clients[idx].as_ref();\n+                let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n+                    load_proc_macro(\n+                        proc_macro_client,\n+                        path,\n+                        dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n+                    )\n+                };\n                 crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n             }\n             crate_graph"}]}