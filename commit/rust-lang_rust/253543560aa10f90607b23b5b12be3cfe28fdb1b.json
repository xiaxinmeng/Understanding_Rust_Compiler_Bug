{"sha": "253543560aa10f90607b23b5b12be3cfe28fdb1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzU0MzU2MGFhMTBmOTA2MDdiMjNiNWIxMmJlM2NmZTI4ZmRiMWI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-26T17:06:53Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-12-19T02:19:05Z"}, "message": "add fixme", "tree": {"sha": "18bceb24141c5300eaf3e81177f864695807f350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18bceb24141c5300eaf3e81177f864695807f350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253543560aa10f90607b23b5b12be3cfe28fdb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253543560aa10f90607b23b5b12be3cfe28fdb1b", "html_url": "https://github.com/rust-lang/rust/commit/253543560aa10f90607b23b5b12be3cfe28fdb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253543560aa10f90607b23b5b12be3cfe28fdb1b/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "951f041347529e504b132640d829914a0f7ef7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/951f041347529e504b132640d829914a0f7ef7c6", "html_url": "https://github.com/rust-lang/rust/commit/951f041347529e504b132640d829914a0f7ef7c6"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "96de5185b88cd02b5bda13ff36a22c43f4feaebf", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/253543560aa10f90607b23b5b12be3cfe28fdb1b/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253543560aa10f90607b23b5b12be3cfe28fdb1b/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=253543560aa10f90607b23b5b12be3cfe28fdb1b", "patch": "@@ -52,6 +52,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n     pub const fn new_in(a: A) -> Self {\n+        // FIXME(mark-i-m): remove bootstrapping cfgs these after a cycle\n         let cap = {\n             #[cfg(not(bootstrap))]\n             { if mem::size_of::<T>() == 0 { core::usize::MAX } else { 0 } }"}]}