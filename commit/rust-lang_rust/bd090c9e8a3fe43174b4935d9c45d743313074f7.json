{"sha": "bd090c9e8a3fe43174b4935d9c45d743313074f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMDkwYzllOGEzZmU0MzE3NGI0OTM1ZDljNDVkNzQzMzEzMDc0Zjc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-23T00:02:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-23T00:02:13Z"}, "message": "Rollup merge of #68388 - varkor:toogeneric-wf, r=eddyb\n\nMake `TooGeneric` error in WF checking a proper error\n\n`TooGeneric` is encountered during WF checking when we cannot determine that a constant involving a generic parameter will always be evaluated successfully (rather than resulting in an error). In these cases, the burden of proof should be with the caller, so that we can avoid post-monomorphisation tim errors (which was the previous previous behaviour). This commit ensures that this situation produces a proper compiler error, rather than silently ignoring it or ICEing.\n\nFixes https://github.com/rust-lang/rust/issues/66962.\n\nr? @eddyb", "tree": {"sha": "539ecad76dd61a0c6c87fb651a5ccdf9aff13f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539ecad76dd61a0c6c87fb651a5ccdf9aff13f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd090c9e8a3fe43174b4935d9c45d743313074f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKOKFCRBK7hj4Ov3rIwAAdHIIADloVaK6zaXQR08ZF4qaVafw\nj9uUyk9k9X2jWQbxzOKpdaTAsXTUm2rdBxw2LFB3u4qiKIN7gMuPUGiBXH/2YS53\nkcQQoHyvvDKR9ooNMZlr6KKFrCKQVVgKbZuAMnxrLtBBN+HtmpzkTKDDcC59NF/t\norfI4VyWjpK137vFM4oGg2le/9YNHJZxA/u7b/Dmb1uz9nuSon1obLRY4BC1bjuy\nMTxxGE6RnFSj+AuByPRxtK+IK3u+urqP2gJaBwTGTPml9xrBESYmrWaM291xXqM+\nyKI/ZBaoK5zSBNYxDPNfB5x67P6D+cjV9JBzAbPZin3bnWPWUkczm3XTfAzDaas=\n=mGxC\n-----END PGP SIGNATURE-----\n", "payload": "tree 539ecad76dd61a0c6c87fb651a5ccdf9aff13f9a\nparent 51e4424ea4e8ffe1145eec2acc4cec55a7a0ffed\nparent dd0507c054ea27ae836025761908d339a478e0ab\nauthor Tyler Mandry <tmandry@gmail.com> 1579737733 -0800\ncommitter GitHub <noreply@github.com> 1579737733 -0800\n\nRollup merge of #68388 - varkor:toogeneric-wf, r=eddyb\n\nMake `TooGeneric` error in WF checking a proper error\n\n`TooGeneric` is encountered during WF checking when we cannot determine that a constant involving a generic parameter will always be evaluated successfully (rather than resulting in an error). In these cases, the burden of proof should be with the caller, so that we can avoid post-monomorphisation tim errors (which was the previous previous behaviour). This commit ensures that this situation produces a proper compiler error, rather than silently ignoring it or ICEing.\n\nFixes https://github.com/rust-lang/rust/issues/66962.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd090c9e8a3fe43174b4935d9c45d743313074f7", "html_url": "https://github.com/rust-lang/rust/commit/bd090c9e8a3fe43174b4935d9c45d743313074f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd090c9e8a3fe43174b4935d9c45d743313074f7/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e4424ea4e8ffe1145eec2acc4cec55a7a0ffed", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e4424ea4e8ffe1145eec2acc4cec55a7a0ffed", "html_url": "https://github.com/rust-lang/rust/commit/51e4424ea4e8ffe1145eec2acc4cec55a7a0ffed"}, {"sha": "dd0507c054ea27ae836025761908d339a478e0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0507c054ea27ae836025761908d339a478e0ab", "html_url": "https://github.com/rust-lang/rust/commit/dd0507c054ea27ae836025761908d339a478e0ab"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "cdb50779e00cc5eb92035873cb42b190f8735883", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bd090c9e8a3fe43174b4935d9c45d743313074f7", "patch": "@@ -919,17 +919,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n \n-            // already reported in the query\n-            ConstEvalFailure(err) => {\n-                if let ErrorHandled::TooGeneric = err {\n-                    // Silence this error, as it can be produced during intermediate steps\n-                    // when a constant is not yet able to be evaluated (but will be later).\n-                    return;\n-                }\n-                self.tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\"constant in type had an ignored error: {:?}\", err),\n-                );\n+            ConstEvalFailure(ErrorHandled::TooGeneric) => {\n+                // In this instance, we have a const expression containing an unevaluated\n+                // generic parameter. We have no idea whether this expression is valid or\n+                // not (e.g. it might result in an error), but we don't want to just assume\n+                // that it's okay, because that might result in post-monomorphisation time\n+                // errors. The onus is really on the caller to provide values that it can\n+                // prove are well-formed.\n+                let mut err = self\n+                    .tcx\n+                    .sess\n+                    .struct_span_err(span, \"constant expression depends on a generic parameter\");\n+                // FIXME(const_generics): we should suggest to the user how they can resolve this\n+                // issue. However, this is currently not actually possible\n+                // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n+                err.note(\"this may fail depending on what value the parameter takes\");\n+                err\n+            }\n+\n+            // Already reported in the query.\n+            ConstEvalFailure(ErrorHandled::Reported) => {\n+                self.tcx\n+                    .sess\n+                    .delay_span_bug(span, &format!(\"constant in type had an ignored error\"));\n                 return;\n             }\n "}, {"sha": "d996bf56fcc10c443cc524cbe24d8598b672cec8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=bd090c9e8a3fe43174b4935d9c45d743313074f7", "patch": "@@ -1,18 +1,17 @@\n-// run-pass\n-\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n #[allow(dead_code)]\n-struct ArithArrayLen<const N: usize>([u32; 0 + N]); // ok\n+struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+//~^ ERROR constant expression depends on a generic parameter\n \n #[derive(PartialEq, Eq)]\n struct Config {\n     arr_size: usize,\n }\n \n struct B<const CFG: Config> {\n-    arr: [u8; CFG.arr_size], // ok\n+    arr: [u8; CFG.arr_size], //~ ERROR constant expression depends on a generic parameter\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "6ae70c493b1dd3afc4c76c09d783170e234d867f", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd090c9e8a3fe43174b4935d9c45d743313074f7/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=bd090c9e8a3fe43174b4935d9c45d743313074f7", "patch": "@@ -1,8 +1,26 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n+  --> $DIR/array-size-in-generic-struct-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n+   |\n+LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+   |                                      ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n+   |\n+LL |     arr: [u8; CFG.arr_size],\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}]}