{"sha": "a310ccc9a4ff515b6fa8914970f14296caf768bc", "node_id": "C_kwDOAAsO6NoAKGEzMTBjY2M5YTRmZjUxNWI2ZmE4OTE0OTcwZjE0Mjk2Y2FmNzY4YmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-08T12:06:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-08T12:06:32Z"}, "message": "some clippy-induced cleanup", "tree": {"sha": "263b2a65cebe3ad49729fcaba67f5220dc67c6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263b2a65cebe3ad49729fcaba67f5220dc67c6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a310ccc9a4ff515b6fa8914970f14296caf768bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a310ccc9a4ff515b6fa8914970f14296caf768bc", "html_url": "https://github.com/rust-lang/rust/commit/a310ccc9a4ff515b6fa8914970f14296caf768bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a310ccc9a4ff515b6fa8914970f14296caf768bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62e09ac1717191f537bf4d3a52cdfd54413a3e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62e09ac1717191f537bf4d3a52cdfd54413a3e0", "html_url": "https://github.com/rust-lang/rust/commit/e62e09ac1717191f537bf4d3a52cdfd54413a3e0"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "c81eab1ad23e6c956be65993d21cfd63765c0bf0", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -259,10 +259,7 @@ impl MemoryCellClocks {\n     /// Load the internal atomic memory cells if they exist.\n     #[inline]\n     fn atomic(&self) -> Option<&AtomicMemoryCellClocks> {\n-        match &self.atomic_ops {\n-            Some(op) => Some(&*op),\n-            None => None,\n-        }\n+        self.atomic_ops.as_deref()\n     }\n \n     /// Load or create the internal atomic memory metadata\n@@ -1482,7 +1479,7 @@ impl GlobalState {\n         let thread_name = &self.thread_info.borrow()[thread].thread_name;\n         if let Some(name) = thread_name {\n             let name: &str = name;\n-            format!(\"Thread(id = {:?}, name = {:?})\", thread.to_u32(), &*name)\n+            format!(\"Thread(id = {:?}, name = {:?})\", thread.to_u32(), name)\n         } else {\n             format!(\"Thread(id = {:?})\", thread.to_u32())\n         }"}, {"sha": "c14aca6c781a74e6627c3211cbd66d81f4ef86b3", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -255,7 +255,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Push frame.\n-        let mir = &*this.load_mir(f.def, None)?;\n+        let mir = this.load_mir(f.def, None)?;\n         this.push_stack_frame(f, mir, dest, stack_pop)?;\n \n         // Initialize arguments."}, {"sha": "45057632df9b528274b767cbc76c4f87a8eeeb52", "filename": "src/mono_hash_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fmono_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fmono_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_hash_map.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -61,7 +61,7 @@ impl<K: Hash + Eq, V> AllocMap<K, V> for MonoHashMap<K, V> {\n \n     #[inline(always)]\n     fn filter_map_collect<T>(&self, mut f: impl FnMut(&K, &V) -> Option<T>) -> Vec<T> {\n-        self.0.borrow().iter().filter_map(move |(k, v)| f(k, &*v)).collect()\n+        self.0.borrow().iter().filter_map(move |(k, v)| f(k, v)).collect()\n     }\n \n     /// The most interesting method: Providing a shared reference without"}, {"sha": "a81dcdc110f1cc227a6b33981dcfa7ef4fe6a083", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -243,7 +243,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // First: functions that diverge.\n         let ret = match ret {\n             None =>\n-                match &*link_name.as_str() {\n+                match link_name.as_str() {\n                     \"miri_start_panic\" => {\n                         // `check_shim` happens inside `handle_miri_start_panic`.\n                         this.handle_miri_start_panic(abi, link_name, args, unwind)?;\n@@ -259,7 +259,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n                         let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                         return Ok(Some((\n-                            &*this.load_mir(panic_impl_instance.def, None)?,\n+                            this.load_mir(panic_impl_instance.def, None)?,\n                             panic_impl_instance,\n                         )));\n                     }\n@@ -361,7 +361,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n         // shim, add it to the corresponding submodule.\n-        match &*link_name.as_str() {\n+        match link_name.as_str() {\n             // Miri-specific extern functions\n             \"miri_static_root\" => {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n@@ -573,7 +573,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n-                let f = match &*link_name.as_str() {\n+                let f = match link_name.as_str() {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),\n                     \"sinhf\" => f.sinh(),\n@@ -596,7 +596,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f32::from_bits(this.read_scalar(f1)?.to_u32()?);\n                 let f2 = f32::from_bits(this.read_scalar(f2)?.to_u32()?);\n-                let n = match &*link_name.as_str() {\n+                let n = match link_name.as_str() {\n                     \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n                     \"atan2f\" => f1.atan2(f2),\n                     _ => bug!(),\n@@ -615,7 +615,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n-                let f = match &*link_name.as_str() {\n+                let f = match link_name.as_str() {\n                     \"cbrt\" => f.cbrt(),\n                     \"cosh\" => f.cosh(),\n                     \"sinh\" => f.sinh(),\n@@ -636,7 +636,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(f2)?.to_u64()?);\n-                let n = match &*link_name.as_str() {\n+                let n = match link_name.as_str() {\n                     \"_hypot\" | \"hypot\" => f1.hypot(f2),\n                     \"atan2\" => f1.atan2(f2),\n                     _ => bug!(),"}, {"sha": "f2688bb08caa41b00b5e0369667ce74f42a4c80a", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -55,7 +55,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Otherwise, load the MIR.\n-        Ok(Some((&*this.load_mir(instance.def, None)?, instance)))\n+        Ok(Some((this.load_mir(instance.def, None)?, instance)))\n     }\n \n     /// Returns `true` if the computation was performed, and `false` if we should just evaluate"}, {"sha": "5f59426bc5bcea3281ce4f6fcbe9bacace692da2", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -26,7 +26,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        match &*link_name.as_str() {\n+        match link_name.as_str() {\n             // Environment related shims\n             \"getenv\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "c68845571034585f1331d7f34a577715b3eb17f1", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -446,7 +446,7 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n                 }\n             }\n             Err(e) =>\n-                return match e.raw_os_error() {\n+                match e.raw_os_error() {\n                     Some(error) => Ok(error),\n                     None =>\n                         throw_unsup_format!("}, {"sha": "01bf17db9f09cf7df80b56d230a4c047a07b7967", "filename": "src/shims/unix/linux/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -9,7 +9,7 @@ impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n-        Ok(match &*name {\n+        Ok(match name {\n             \"__pthread_get_minstack\" => None,\n             \"getrandom\" => None, // std falls back to syscall(SYS_getrandom, ...) when this is NULL.\n             \"statx\" => None,     // std falls back to syscall(SYS_statx, ...) when this is NULL."}, {"sha": "ab3f39147c60fa0a55613753dbdf07e830f65d77", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -21,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        match &*link_name.as_str() {\n+        match link_name.as_str() {\n             // errno\n             \"__errno_location\" => {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "f7dd38f639b0a697c1683da3b947b26d1ae122aa", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -19,7 +19,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        match &*link_name.as_str() {\n+        match link_name.as_str() {\n             // errno\n             \"__error\" => {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "08a319159bc590c9827428b20f73604724bc5e65", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a310ccc9a4ff515b6fa8914970f14296caf768bc/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=a310ccc9a4ff515b6fa8914970f14296caf768bc", "patch": "@@ -28,7 +28,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // DWORD = ULONG = u32\n         // BOOL = i32\n         // BOOLEAN = u8\n-        match &*link_name.as_str() {\n+        match link_name.as_str() {\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n                 let [name, buf, size] ="}]}