{"sha": "05fc97e31b1d04bf5d5885edd98a1510f0931a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZmM5N2UzMWIxZDA0YmY1ZDU4ODVlZGQ5OGExNTEwZjA5MzFhNjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-24T12:40:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-24T12:40:25Z"}, "message": "Merge #8955\n\n8955: feature: Support standalone Rust files r=matklad a=SomeoneToIgnore\n\n![standalone](https://user-images.githubusercontent.com/2690773/119277037-0b579380-bc26-11eb-8d77-20d46ab4916a.gif)\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6388\r\n\r\nCaveats: \r\n\r\n* I've decided to support multiple detached files in the code (anticipating the scratch files), but I found no way to open multiple files in VSCode at once: running `code *.rs` makes the plugin to register in the `vscode.workspace.textDocuments` only the first file, while code actually displays all files later.\r\nApparently what happens is the same as when you have VSCode open at some workplace already and then run `code some_other_file.rs`: it gets opened in the same workspace of the same VSCode with no server to support it.\r\nIf there's a way to override it, I'd appreciate the pointer.\r\n\r\n* No way to toggle inlay hints, since the setting is updated for the workspace (which does not exist for a single file opened)\r\n> [2021-05-24 00:22:49.100] [exthost] [error] Error: Unable to write to Workspace Settings because no workspace is opened. Please open a workspace first and try again.\r\n\r\n* No runners/lens to run or check the code are implemented for this mode. \r\nIn theory, we can detect `rustc`, run it on a file and run the resulting binary, but not sure if worth doing it at this stage.\r\n\r\nOtherwise imports, hints, completion and other features work.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "27a99294690e75990250b0c1306ef99fad4558fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a99294690e75990250b0c1306ef99fad4558fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05fc97e31b1d04bf5d5885edd98a1510f0931a62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgq565CRBK7hj4Ov3rIwAAtdsIACwDxl3YOsV87RgQVmv/I44k\nZnMo+bZ7bVvNaZ8Po92qm7xuqtaob7v+W5pIPEQKgvlqcoBjxqlepPkt47g1Zpjo\n89W6+RHvVI/m5ePm4kfIT0b6xJPzbG2AFJghMQvNxtBs3Y8YEZ9MYCYdAMnc1TTU\n7oIe/Dtq69Y9M/9lU7b9XsPmaAQTKm4blZ+0D920h0kubXFx81sPe37kWQwoJZOm\nSYWgRHKcQebTau4aFTR2GT+Dx8negfeKy7EnBrhgnxej26aV6yCdC2qDDHNCf34w\nK7+4q+Vy4gmZb4sjo2j91r2Qx2N+vda5hHwVeOask4qmHjOu09ffNRR3/gF6wUQ=\n=k7H5\n-----END PGP SIGNATURE-----\n", "payload": "tree 27a99294690e75990250b0c1306ef99fad4558fa\nparent 31a19148e967163ea9ebb42e341944be76ce8960\nparent 5c0369b1d0c5351672f2a16e9a0d17beee84bcbe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621860025 +0000\ncommitter GitHub <noreply@github.com> 1621860025 +0000\n\nMerge #8955\n\n8955: feature: Support standalone Rust files r=matklad a=SomeoneToIgnore\n\n![standalone](https://user-images.githubusercontent.com/2690773/119277037-0b579380-bc26-11eb-8d77-20d46ab4916a.gif)\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6388\r\n\r\nCaveats: \r\n\r\n* I've decided to support multiple detached files in the code (anticipating the scratch files), but I found no way to open multiple files in VSCode at once: running `code *.rs` makes the plugin to register in the `vscode.workspace.textDocuments` only the first file, while code actually displays all files later.\r\nApparently what happens is the same as when you have VSCode open at some workplace already and then run `code some_other_file.rs`: it gets opened in the same workspace of the same VSCode with no server to support it.\r\nIf there's a way to override it, I'd appreciate the pointer.\r\n\r\n* No way to toggle inlay hints, since the setting is updated for the workspace (which does not exist for a single file opened)\r\n> [2021-05-24 00:22:49.100] [exthost] [error] Error: Unable to write to Workspace Settings because no workspace is opened. Please open a workspace first and try again.\r\n\r\n* No runners/lens to run or check the code are implemented for this mode. \r\nIn theory, we can detect `rustc`, run it on a file and run the resulting binary, but not sure if worth doing it at this stage.\r\n\r\nOtherwise imports, hints, completion and other features work.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05fc97e31b1d04bf5d5885edd98a1510f0931a62", "html_url": "https://github.com/rust-lang/rust/commit/05fc97e31b1d04bf5d5885edd98a1510f0931a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05fc97e31b1d04bf5d5885edd98a1510f0931a62/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31a19148e967163ea9ebb42e341944be76ce8960", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a19148e967163ea9ebb42e341944be76ce8960", "html_url": "https://github.com/rust-lang/rust/commit/31a19148e967163ea9ebb42e341944be76ce8960"}, {"sha": "5c0369b1d0c5351672f2a16e9a0d17beee84bcbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0369b1d0c5351672f2a16e9a0d17beee84bcbe", "html_url": "https://github.com/rust-lang/rust/commit/5c0369b1d0c5351672f2a16e9a0d17beee84bcbe"}], "stats": {"total": 271, "additions": 210, "deletions": 61}, "files": [{"sha": "4e39d6dd3c64f85c5ee2fa413c4a2b26a99c6a38", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -50,7 +50,9 @@ impl Sysroot {\n \n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n         log::debug!(\"Discovering sysroot for {}\", cargo_toml.display());\n-        let current_dir = cargo_toml.parent().unwrap();\n+        let current_dir = cargo_toml.parent().ok_or_else(|| {\n+            format_err!(\"Failed to find the parent directory for {}\", cargo_toml.display())\n+        })?;\n         let sysroot_dir = discover_sysroot_dir(current_dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, current_dir)?;\n         let res = Sysroot::load(&sysroot_src_dir)?;"}, {"sha": "84990075f728e4d56be8d31d9156284d56cdf0aa", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -4,7 +4,7 @@\n \n use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n \n-use anyhow::{Context, Result};\n+use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cargo_workspace::DepKind;\n use cfg::CfgOptions;\n@@ -49,6 +49,18 @@ pub enum ProjectWorkspace {\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n+\n+    // FIXME: The primary limitation of this approach is that the set of detached files needs to be fixed at the beginning.\n+    // That's not the end user experience we should strive for.\n+    // Ideally, you should be able to just open a random detached file in existing cargo projects, and get the basic features working.\n+    // That needs some changes on the salsa-level though.\n+    // In particular, we should split the unified CrateGraph (which currently has maximal durability) into proper crate graph, and a set of ad hoc roots (with minimal durability).\n+    // Then, we need to hide the graph behind the queries such that most queries look only at the proper crate graph, and fall back to ad hoc roots only if there's no results.\n+    // After this, we should be able to tweak the logic in reload.rs to add newly opened files, which don't belong to any existing crates, to the set of the detached files.\n+    // //\n+    /// Project with a set of disjoint files, not belonging to any particular workspace.\n+    /// Backed by basic sysroot crates for basic completion and highlighting.\n+    DetachedFiles { files: Vec<AbsPathBuf>, sysroot: Sysroot, rustc_cfg: Vec<CfgFlag> },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -75,6 +87,12 @@ impl fmt::Debug for ProjectWorkspace {\n                 debug_struct.field(\"n_rustc_cfg\", &rustc_cfg.len());\n                 debug_struct.finish()\n             }\n+            ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => f\n+                .debug_struct(\"DetachedFiles\")\n+                .field(\"n_files\", &files.len())\n+                .field(\"n_sysroot_crates\", &sysroot.crates().len())\n+                .field(\"n_rustc_cfg\", &rustc_cfg.len())\n+                .finish(),\n         }\n     }\n }\n@@ -165,6 +183,14 @@ impl ProjectWorkspace {\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n+    pub fn load_detached_files(detached_files: Vec<AbsPathBuf>) -> Result<ProjectWorkspace> {\n+        let sysroot = Sysroot::discover(\n+            &detached_files.first().ok_or_else(|| format_err!(\"No detached files to load\"))?,\n+        )?;\n+        let rustc_cfg = rustc_cfg::get(None, None);\n+        Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n@@ -224,6 +250,19 @@ impl ProjectWorkspace {\n                     })\n                 }))\n                 .collect(),\n+            ProjectWorkspace::DetachedFiles { files, sysroot, .. } => files\n+                .into_iter()\n+                .map(|detached_file| PackageRoot {\n+                    is_member: true,\n+                    include: vec![detached_file.clone()],\n+                    exclude: Vec::new(),\n+                })\n+                .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    is_member: false,\n+                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    exclude: Vec::new(),\n+                }))\n+                .collect(),\n         }\n     }\n \n@@ -234,6 +273,9 @@ impl ProjectWorkspace {\n                 let rustc_package_len = rustc.as_ref().map_or(0, |rc| rc.packages().len());\n                 cargo.packages().len() + sysroot.crates().len() + rustc_package_len\n             }\n+            ProjectWorkspace::DetachedFiles { sysroot, files, .. } => {\n+                sysroot.crates().len() + files.len()\n+            }\n         }\n     }\n \n@@ -267,6 +309,9 @@ impl ProjectWorkspace {\n                 rustc,\n                 rustc.as_ref().zip(build_data).and_then(|(it, map)| map.get(it.workspace_root())),\n             ),\n+            ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n+                detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot)\n+            }\n         };\n         if crate_graph.patch_cfg_if() {\n             log::debug!(\"Patched std to depend on cfg-if\")\n@@ -474,6 +519,48 @@ fn cargo_to_crate_graph(\n     crate_graph\n }\n \n+fn detached_files_to_crate_graph(\n+    rustc_cfg: Vec<CfgFlag>,\n+    load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+    detached_files: &[AbsPathBuf],\n+    sysroot: &Sysroot,\n+) -> CrateGraph {\n+    let _p = profile::span(\"detached_files_to_crate_graph\");\n+    let mut crate_graph = CrateGraph::default();\n+    let (public_deps, _libproc_macro) =\n+        sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load);\n+\n+    let mut cfg_options = CfgOptions::default();\n+    cfg_options.extend(rustc_cfg);\n+\n+    for detached_file in detached_files {\n+        let file_id = match load(&detached_file) {\n+            Some(file_id) => file_id,\n+            None => {\n+                log::error!(\"Failed to load detached file {:?}\", detached_file);\n+                continue;\n+            }\n+        };\n+        let display_name = detached_file\n+            .file_stem()\n+            .and_then(|os_str| os_str.to_str())\n+            .map(|file_stem| CrateDisplayName::from_canonical_name(file_stem.to_string()));\n+        let detached_file_crate = crate_graph.add_crate_root(\n+            file_id,\n+            Edition::Edition2018,\n+            display_name,\n+            cfg_options.clone(),\n+            Env::default(),\n+            Vec::new(),\n+        );\n+\n+        for (name, krate) in public_deps.iter() {\n+            add_dep(&mut crate_graph, detached_file_crate, name.clone(), *krate);\n+        }\n+    }\n+    crate_graph\n+}\n+\n fn handle_rustc_crates(\n     rustc_workspace: &CargoWorkspace,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,"}, {"sha": "6c883dd58bd8059475ac45ddb9b444baf246b569", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -199,7 +199,7 @@ fn run_server() -> Result<()> {\n             config.update(json);\n         }\n \n-        if config.linked_projects().is_empty() {\n+        if config.linked_projects().is_empty() && config.detached_files().is_empty() {\n             let workspace_roots = initialize_params\n                 .workspace_folders\n                 .map(|workspaces| {\n@@ -217,7 +217,6 @@ fn run_server() -> Result<()> {\n             if discovered.is_empty() {\n                 log::error!(\"failed to find any projects in {:?}\", workspace_roots);\n             }\n-\n             config.discovered_projects = Some(discovered);\n         }\n "}, {"sha": "7c02a507cdea50f92037607e3add819ce69b6281", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -236,6 +236,7 @@ impl Default for ConfigData {\n pub struct Config {\n     caps: lsp_types::ClientCapabilities,\n     data: ConfigData,\n+    detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n }\n@@ -328,13 +329,23 @@ pub struct WorkspaceSymbolConfig {\n \n impl Config {\n     pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n-        Config { caps, data: ConfigData::default(), discovered_projects: None, root_path }\n+        Config {\n+            caps,\n+            data: ConfigData::default(),\n+            detached_files: Vec::new(),\n+            discovered_projects: None,\n+            root_path,\n+        }\n     }\n-    pub fn update(&mut self, json: serde_json::Value) {\n+    pub fn update(&mut self, mut json: serde_json::Value) {\n         log::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return;\n         }\n+        self.detached_files = get_field::<Vec<PathBuf>>(&mut json, \"detachedFiles\", None, \"[]\")\n+            .into_iter()\n+            .map(AbsPathBuf::assert)\n+            .collect();\n         self.data = ConfigData::from_json(json);\n     }\n \n@@ -387,6 +398,10 @@ impl Config {\n         }\n     }\n \n+    pub fn detached_files(&self) -> &[AbsPathBuf] {\n+        &self.detached_files\n+    }\n+\n     pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n         let caps =\n             try_or!(self.caps.text_document.as_ref()?.synchronization.clone()?, Default::default());"}, {"sha": "6a36d29d4d8f1a02af04f0c9146040bc022496b3", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -312,6 +312,7 @@ impl GlobalStateSnapshot {\n                 cargo.target_by_root(&path).map(|it| (cargo, it))\n             }\n             ProjectWorkspace::Json { .. } => None,\n+            ProjectWorkspace::DetachedFiles { .. } => None,\n         })\n     }\n }"}, {"sha": "f48210424825ec4c48e6e883c5659c7c8c2b864c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -661,19 +661,28 @@ pub(crate) fn handle_runnables(\n             }\n         }\n         None => {\n-            res.push(lsp_ext::Runnable {\n-                label: \"cargo check --workspace\".to_string(),\n-                location: None,\n-                kind: lsp_ext::RunnableKind::Cargo,\n-                args: lsp_ext::CargoRunnable {\n-                    workspace_root: None,\n-                    override_cargo: config.override_cargo,\n-                    cargo_args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n-                    cargo_extra_args: config.cargo_extra_args,\n-                    executable_args: Vec::new(),\n-                    expect_test: None,\n-                },\n-            });\n+            if !snap.config.linked_projects().is_empty()\n+                || !snap\n+                    .config\n+                    .discovered_projects\n+                    .as_ref()\n+                    .map(|projects| projects.is_empty())\n+                    .unwrap_or(true)\n+            {\n+                res.push(lsp_ext::Runnable {\n+                    label: \"cargo check --workspace\".to_string(),\n+                    location: None,\n+                    kind: lsp_ext::RunnableKind::Cargo,\n+                    args: lsp_ext::CargoRunnable {\n+                        workspace_root: None,\n+                        override_cargo: config.override_cargo,\n+                        cargo_args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n+                        cargo_extra_args: config.cargo_extra_args,\n+                        executable_args: Vec::new(),\n+                        expect_test: None,\n+                    },\n+                });\n+            }\n         }\n     }\n     Ok(res)"}, {"sha": "cb002f7009d67f207395f2fb6ef71a353dc87870", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -103,6 +103,7 @@ impl fmt::Debug for Event {\n impl GlobalState {\n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n         if self.config.linked_projects().is_empty()\n+            && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             self.show_message("}, {"sha": "7a53e4a8b955e8a7b0515a40d3d82c528580b067", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -147,6 +147,7 @@ impl GlobalState {\n \n         self.task_pool.handle.spawn_with_sender({\n             let linked_projects = self.config.linked_projects();\n+            let detached_files = self.config.detached_files().to_vec();\n             let cargo_config = self.config.cargo();\n \n             move |sender| {\n@@ -161,7 +162,7 @@ impl GlobalState {\n \n                 sender.send(Task::FetchWorkspace(ProjectWorkspaceProgress::Begin)).unwrap();\n \n-                let workspaces = linked_projects\n+                let mut workspaces = linked_projects\n                     .iter()\n                     .map(|project| match project {\n                         LinkedProject::ProjectManifest(manifest) => {\n@@ -180,6 +181,11 @@ impl GlobalState {\n                     })\n                     .collect::<Vec<_>>();\n \n+                if !detached_files.is_empty() {\n+                    workspaces\n+                        .push(project_model::ProjectWorkspace::load_detached_files(detached_files));\n+                }\n+\n                 log::info!(\"did fetch workspaces {:?}\", workspaces);\n                 sender\n                     .send(Task::FetchWorkspace(ProjectWorkspaceProgress::End(workspaces)))\n@@ -407,6 +413,7 @@ impl GlobalState {\n                         _ => None,\n                     }\n                 }\n+                ProjectWorkspace::DetachedFiles { .. } => None,\n             })\n             .map(|(id, root)| {\n                 let sender = sender.clone();"}, {"sha": "69dbe2535371a4fc2b3c10ce2d6a2c95b9e38e7f", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -4,6 +4,7 @@ import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/common/utils/is';\n import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n+import { Workspace } from './ctx';\n \n export interface Env {\n     [name: string]: string;\n@@ -23,14 +24,19 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n-export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc.LanguageClient {\n+export function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n \n     const newEnv = Object.assign({}, process.env);\n     Object.assign(newEnv, extraEnv);\n \n+    let cwd = undefined;\n+    if (workspace.kind === \"Workspace Folder\") {\n+        cwd = workspace.folder.fsPath;\n+    };\n+\n     const run: lc.Executable = {\n         command: serverPath,\n         options: { cwd, env: newEnv },\n@@ -43,9 +49,14 @@ export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc\n         'Rust Analyzer Language Server Trace',\n     );\n \n+    let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+    if (workspace.kind === \"Detached Files\") {\n+        initializationOptions = { \"detachedFiles\": workspace.files.map(file => file.uri.fsPath), ...initializationOptions };\n+    }\n+\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: vscode.workspace.getConfiguration(\"rust-analyzer\"),\n+        initializationOptions,\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {"}, {"sha": "22c5f62a1cb479a4d387325456b0b932bd472a9b", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -7,6 +7,16 @@ import { createClient } from './client';\n import { isRustEditor, RustEditor } from './util';\n import { ServerStatusParams } from './lsp_ext';\n \n+export type Workspace =\n+    {\n+        kind: 'Workspace Folder';\n+        folder: vscode.Uri;\n+    }\n+    | {\n+        kind: 'Detached Files';\n+        files: vscode.TextDocument[];\n+    };\n+\n export class Ctx {\n     private constructor(\n         readonly config: Config,\n@@ -22,9 +32,9 @@ export class Ctx {\n         config: Config,\n         extCtx: vscode.ExtensionContext,\n         serverPath: string,\n-        cwd: string,\n+        workspace: Workspace,\n     ): Promise<Ctx> {\n-        const client = createClient(serverPath, cwd, config.serverExtraEnv);\n+        const client = createClient(serverPath, workspace, config.serverExtraEnv);\n \n         const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         extCtx.subscriptions.push(statusBar);"}, {"sha": "b735186fe1915dfae1ed99f421916a6d6d2cbd15", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/05fc97e31b1d04bf5d5885edd98a1510f0931a62/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=05fc97e31b1d04bf5d5885edd98a1510f0931a62", "patch": "@@ -7,7 +7,7 @@ import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { Ctx } from './ctx';\n import { Config } from './config';\n-import { log, assert, isValidExecutable } from './util';\n+import { log, assert, isValidExecutable, isRustDocument } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n import { activateTaskProvider } from './tasks';\n@@ -28,26 +28,6 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n async function tryActivate(context: vscode.ExtensionContext) {\n-    // Register a \"dumb\" onEnter command for the case where server fails to\n-    // start.\n-    //\n-    // FIXME: refactor command registration code such that commands are\n-    // **always** registered, even if the server does not start. Use API like\n-    // this perhaps?\n-    //\n-    // ```TypeScript\n-    // registerCommand(\n-    //    factory: (Ctx) => ((Ctx) => any),\n-    //    fallback: () => any = () => vscode.window.showErrorMessage(\n-    //        \"rust-analyzer is not available\"\n-    //    ),\n-    // )\n-    const defaultOnEnter = vscode.commands.registerCommand(\n-        'rust-analyzer.onEnter',\n-        () => vscode.commands.executeCommand('default:type', { text: '\\n' }),\n-    );\n-    context.subscriptions.push(defaultOnEnter);\n-\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(config, state).catch(err => {\n@@ -67,14 +47,52 @@ async function tryActivate(context: vscode.ExtensionContext) {\n \n     const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n     if (workspaceFolder === undefined) {\n-        throw new Error(\"no folder is opened\");\n+        const rustDocuments = vscode.workspace.textDocuments.filter(document => isRustDocument(document));\n+        if (rustDocuments.length > 0) {\n+            ctx = await Ctx.create(config, context, serverPath, { kind: 'Detached Files', files: rustDocuments });\n+        } else {\n+            throw new Error(\"no rust files are opened\");\n+        }\n+    } else {\n+        // Note: we try to start the server before we activate type hints so that it\n+        // registers its `onDidChangeDocument` handler before us.\n+        //\n+        // This a horribly, horribly wrong way to deal with this problem.\n+        ctx = await Ctx.create(config, context, serverPath, { kind: \"Workspace Folder\", folder: workspaceFolder.uri });\n+        ctx.pushCleanup(activateTaskProvider(workspaceFolder, ctx.config));\n     }\n+    await initCommonContext(context, ctx);\n+\n+    activateInlayHints(ctx);\n+    warnAboutExtensionConflicts();\n+\n+    vscode.workspace.onDidChangeConfiguration(\n+        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n+        null,\n+        ctx.subscriptions,\n+    );\n+}\n \n-    // Note: we try to start the server before we activate type hints so that it\n-    // registers its `onDidChangeDocument` handler before us.\n+async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n+    // Register a \"dumb\" onEnter command for the case where server fails to\n+    // start.\n+    //\n+    // FIXME: refactor command registration code such that commands are\n+    // **always** registered, even if the server does not start. Use API like\n+    // this perhaps?\n     //\n-    // This a horribly, horribly wrong way to deal with this problem.\n-    ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n+    // ```TypeScript\n+    // registerCommand(\n+    //    factory: (Ctx) => ((Ctx) => any),\n+    //    fallback: () => any = () => vscode.window.showErrorMessage(\n+    //        \"rust-analyzer is not available\"\n+    //    ),\n+    // )\n+    const defaultOnEnter = vscode.commands.registerCommand(\n+        'rust-analyzer.onEnter',\n+        () => vscode.commands.executeCommand('default:type', { text: '\\n' }),\n+    );\n+    context.subscriptions.push(defaultOnEnter);\n \n     await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n \n@@ -134,17 +152,6 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('resolveCodeAction', commands.resolveCodeAction);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n     ctx.registerCommand('gotoLocation', commands.gotoLocation);\n-\n-    ctx.pushCleanup(activateTaskProvider(workspaceFolder, ctx.config));\n-\n-    activateInlayHints(ctx);\n-    warnAboutExtensionConflicts();\n-\n-    vscode.workspace.onDidChangeConfiguration(\n-        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n-        null,\n-        ctx.subscriptions,\n-    );\n }\n \n export async function deactivate() {"}]}