{"sha": "09f30cabf0bb01131080032ae9858c065b64ac8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZjMwY2FiZjBiYjAxMTMxMDgwMDMyYWU5ODU4YzA2NWI2NGFjOGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T11:48:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T11:53:04Z"}, "message": "cargo miri: make sure we see the same sysroot for rustc and miri", "tree": {"sha": "b8254483a42ce2fdcb15dea6c05d3d025856876f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8254483a42ce2fdcb15dea6c05d3d025856876f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09f30cabf0bb01131080032ae9858c065b64ac8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09f30cabf0bb01131080032ae9858c065b64ac8b", "html_url": "https://github.com/rust-lang/rust/commit/09f30cabf0bb01131080032ae9858c065b64ac8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09f30cabf0bb01131080032ae9858c065b64ac8b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2448e9d9db656ac25e90d70f2bacee318d214025", "url": "https://api.github.com/repos/rust-lang/rust/commits/2448e9d9db656ac25e90d70f2bacee318d214025", "html_url": "https://github.com/rust-lang/rust/commit/2448e9d9db656ac25e90d70f2bacee318d214025"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "5e3a35917b24a61e1b288704835b1c8baaeebf33", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/09f30cabf0bb01131080032ae9858c065b64ac8b/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f30cabf0bb01131080032ae9858c065b64ac8b/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=09f30cabf0bb01131080032ae9858c065b64ac8b", "patch": "@@ -119,6 +119,39 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+/// Make sure that the `miri` and `rustc` binary are from the same sysroot.\n+/// This can be violated e.g. when miri is locally built and installed with a different\n+/// toolchain than what is used when `cargo miri` is run.\n+fn test_sysroot_consistency() {\n+    fn get_sysroot(mut cmd: Command) -> PathBuf {\n+        let out = cmd.arg(\"--print\").arg(\"sysroot\")\n+            .env_remove(\"MIRI_SYSROOT\") // We want to test their \"native\" sysroot, not the manually set one\n+            .output().expect(\"Failed to run rustc to get sysroot info\");\n+        assert!(out.status.success(), \"Bad statuc code when getting sysroot info\");\n+        let sysroot = out.stdout.lines().nth(0)\n+            .expect(\"didn't get at least one line for the sysroot\").unwrap();\n+        PathBuf::from(sysroot).canonicalize()\n+            .expect(\"Failed to canonicalize sysroot\")\n+    }\n+\n+    let rustc_sysroot = get_sysroot(Command::new(\"rustc\"));\n+    let miri_sysroot = {\n+        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+        path.set_file_name(\"miri\");\n+        get_sysroot(Command::new(path))\n+    };\n+\n+    if rustc_sysroot != miri_sysroot {\n+        show_error(format!(\n+            \"miri was built for a different sysroot than the rustc in your current toolchain.\\n\\\n+             Make sure you use the same toolchain to run miri that you used to build it!\\n\\\n+             rustc sysroot: `{}`\\n\\\n+             miri sysroot: `{}`\",\n+             rustc_sysroot.display(), miri_sysroot.display()\n+        ));\n+    }\n+}\n+\n fn xargo_version() -> Option<(u32, u32, u32)> {\n     let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n     if !out.status.success() {\n@@ -269,7 +302,7 @@ path = \"lib.rs\"\n     if print_env {\n         println!(\"MIRI_SYSROOT={}\", sysroot.display());\n     } else if !ask_user {\n-        println!(\"A libstd for Miri is now available in `{}`\", sysroot.display());\n+        println!(\"A libstd for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n \n@@ -313,6 +346,9 @@ fn in_cargo_miri() {\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n+    // Some basic sanity checks\n+    test_sysroot_consistency();\n+\n     // We always setup.\n     let ask = subcommand != MiriCommand::Setup;\n     setup(ask);"}]}