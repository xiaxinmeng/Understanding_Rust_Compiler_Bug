{"sha": "add0a42034b4e3d565ae5934e355bce9b88d15a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDBhNDIwMzRiNGUzZDU2NWFlNTkzNGUzNTViY2U5Yjg4ZDE1YTE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-05T20:02:34Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-05T20:34:38Z"}, "message": "Remove `for_each_child_stable`\n\nNow that `Resolutions` has a deterministic iteration order, it's no\nlonger necessary to sort its entries before iterating over them", "tree": {"sha": "115cceea872d26bd6bb027be96e65f731b9e3d13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115cceea872d26bd6bb027be96e65f731b9e3d13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add0a42034b4e3d565ae5934e355bce9b88d15a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl2Y/mAACgkQtAh+UQ6Y\nsWQ84g//cM7ar8LgO+X+tlnvzYVm5ek7t7FQeGMyAbXJB/MmbvddlnoM4Remv7lU\nnJB6w+wUPwQoL+RaQtUjp2X4AxKU/UkKhZlfLlDLqvH/Od77A7dvb2PN9BSpFWox\nj8VmWSzX8O3ZRGZ7r+KcC8zKjyLlashXp29Xmdzk4L0ww2YbJ+MuKaQoMWuUahdr\n2xDJbppM1T+yZSvKnJJ+TzfnR66ldC74BoiLZLvBN2epVfP+w7NSRUgJ1FgadblC\nPgfnCLAAMUE+P2hwfXjvJQwUJ3ie/XDDyGDr+KtzpTWpVUypc9mAf4A/Dx7Wvs7T\nounD3BcXeoDyL4ssZCUt7EMH+uICSWcSdnjabqyJRANU710gqdee67+U1aLIrbuS\niiaig1N9DJLzrYFolKx9ImY8ERFKBNOFlHA1ggt/FrZVE1ojqGWtks1Uc7eJBpNe\nrm5fQfgRJ3lqLOfOB2mfjunMsa3gtpkeWCvfV+lxkf7dMAR/us06uyogiPcXPH+g\nsJ46WYZOyLOd2OolcF2co7Q7/SOqj4bMYEdGaAGdbR6ntAg3ycidCTaHq3wus+xq\nrHcZR3RLwBbds9zHiUFJ7PgYZVkpiN/aTxzT+gArw/uXe6iEANUkyhiV8EzoBB/L\nZctN7k7eU4ATAtw1ekXfckSRUgrf0ybMY58M/1ctA6Z79fOizbM=\n=N8tk\n-----END PGP SIGNATURE-----", "payload": "tree 115cceea872d26bd6bb027be96e65f731b9e3d13\nparent dd403e4ab0ae25a27c35a803eb229416625b8e55\nauthor Aaron Hill <aa1ronham@gmail.com> 1570305754 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1570307678 -0400\n\nRemove `for_each_child_stable`\n\nNow that `Resolutions` has a deterministic iteration order, it's no\nlonger necessary to sort its entries before iterating over them\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add0a42034b4e3d565ae5934e355bce9b88d15a1", "html_url": "https://github.com/rust-lang/rust/commit/add0a42034b4e3d565ae5934e355bce9b88d15a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add0a42034b4e3d565ae5934e355bce9b88d15a1/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd403e4ab0ae25a27c35a803eb229416625b8e55", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd403e4ab0ae25a27c35a803eb229416625b8e55", "html_url": "https://github.com/rust-lang/rust/commit/dd403e4ab0ae25a27c35a803eb229416625b8e55"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "5c85650718c1ed082699b46a3ba09c124e23a3e9", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=add0a42034b4e3d565ae5934e355bce9b88d15a1", "patch": "@@ -527,7 +527,7 @@ impl<'a> Resolver<'a> {\n                         in_module_is_extern)) = worklist.pop() {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n-            in_module.for_each_child_stable(self, |this, ident, ns, name_binding| {\n+            in_module.for_each_child(self, |this, ident, ns, name_binding| {\n                 // avoid imports entirely\n                 if name_binding.is_import() && !name_binding.is_extern_crate() { return; }\n                 // avoid non-importable candidates as well"}, {"sha": "1016989ca6e38d5f73f81e9093fb74b4392aef3b", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=add0a42034b4e3d565ae5934e355bce9b88d15a1", "patch": "@@ -728,7 +728,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             // abort if the module is already found\n             if result.is_some() { break; }\n \n-            in_module.for_each_child_stable(self.r, |_, ident, _, name_binding| {\n+            in_module.for_each_child(self.r, |_, ident, _, name_binding| {\n                 // abort if the module is already found or if name_binding is private external\n                 if result.is_some() || !name_binding.vis.is_visible_locally() {\n                     return\n@@ -760,7 +760,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n     fn collect_enum_variants(&mut self, def_id: DefId) -> Option<Vec<Path>> {\n         self.find_module(def_id).map(|(enum_module, enum_import_suggestion)| {\n             let mut variants = Vec::new();\n-            enum_module.for_each_child_stable(self.r, |_, ident, _, name_binding| {\n+            enum_module.for_each_child(self.r, |_, ident, _, name_binding| {\n                 if let Res::Def(DefKind::Variant, _) = name_binding.res() {\n                     let mut segms = enum_import_suggestion.path.segments.clone();\n                     segms.push(ast::PathSegment::from_ident(ident));"}, {"sha": "eaa4850f65c0ab5409e981142a1cf1e69c2ac42e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=add0a42034b4e3d565ae5934e355bce9b88d15a1", "patch": "@@ -497,17 +497,6 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn for_each_child_stable<R, F>(&'a self, resolver: &mut R, mut f: F)\n-        where R: AsMut<Resolver<'a>>, F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>)\n-    {\n-        let resolutions = resolver.as_mut().resolutions(self).borrow();\n-        let mut resolutions = resolutions.iter().collect::<Vec<_>>();\n-        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.as_str(), ns));\n-        for &(&(ident, ns), &resolution) in resolutions.iter() {\n-            resolution.borrow().binding.map(|binding| f(resolver, ident, ns, binding));\n-        }\n-    }\n-\n     fn res(&self) -> Option<Res> {\n         match self.kind {\n             ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),"}, {"sha": "d8826d4072a9d3d8d7217c1ec7e340dbb9a67f12", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=add0a42034b4e3d565ae5934e355bce9b88d15a1", "patch": "@@ -5,10 +5,10 @@ LL |     let x = Option(1);\n    |             ^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     let x = std::prelude::v1::Option::None(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     let x = std::prelude::v1::Option::Some(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = std::option::Option::None(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = std::option::Option::Some(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n@@ -17,10 +17,10 @@ LL |     if let Option(_) = x {\n    |            ^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     if let std::prelude::v1::Option::None(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     if let std::prelude::v1::Option::Some(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     if let std::option::Option::None(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     if let std::option::Option::Some(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n@@ -47,14 +47,14 @@ LL |     let z = ManyVariants();\n    |             ^^^^^^^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     let z = ManyVariants::Eight();\n+LL |     let z = ManyVariants::One();\n+   |             ^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Two();\n+   |             ^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Three();\n    |             ^^^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Five();\n-   |             ^^^^^^^^^^^^^^^^^^\n LL |     let z = ManyVariants::Four();\n    |             ^^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Nine();\n-   |             ^^^^^^^^^^^^^^^^^^\n and 6 other candidates\n \n error: aborting due to 5 previous errors"}, {"sha": "856d6506f2a9f98971abc041f0cb2420c1c5d5d6", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/add0a42034b4e3d565ae5934e355bce9b88d15a1/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=add0a42034b4e3d565ae5934e355bce9b88d15a1", "patch": "@@ -63,7 +63,7 @@ LL | fn qux() -> Some {\n    |             ^^^^\n    |             |\n    |             not a type\n-   |             help: try using the variant's enum: `Option`\n+   |             help: try using the variant's enum: `std::option::Option`\n \n error: aborting due to 7 previous errors\n "}]}