{"sha": "492341593094d3b1a3ffa2e5d6e5820fb0dd7a83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjM0MTU5MzA5NGQzYjFhM2ZmYTJlNWQ2ZTU4MjBmYjBkZDdhODM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-24T13:31:11Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-24T13:31:11Z"}, "message": "Be more helping with `cargo clippy --help`", "tree": {"sha": "28d72e556fcd43c6ac01bce0b9e8dfd09a4d8dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d72e556fcd43c6ac01bce0b9e8dfd09a4d8dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYDg09AAoJEF5CfHlMukXogy4P/1x07OXembiDw1k9vlSaho5z\n/aRHQNEI531C/rTBeZPJfSeXYOun+3K6WKyJA51adv3T4DO/CnU1pESTctH5hahI\n1heimC6S3I4g6hKYcTfAtNcnR9PvSAPe57PJQaUubxAkBWE4V97ljPCysr9/NAlZ\nvtQ1cdltDvFsB0VhEzDQdNZaZjGrei9LG5Ejr8DThw1QroIOdGgBp7vD1i9vt0Vh\n7d+4WGPMZFtoOYotvvWWMWFb7Kvzuh2e8kVORxXH8eSg1QoepMmPt2GOP24dKZBS\nvdcZg+n8MwJU7p4sskZJmNJElL3V7VVm8l389K3KbTVYjzErIn+RukpjLmTgf1KD\nJIKEhiWLcJ5Hce6a274vp+RY7c0/T3Aremfi5AFW1FXT34oS+0z+yl5VxTMBT5CP\nupvBZNrXvi6VpopU1oZqE8ptXn8JqkzzfjRYJoRobdTzZ9V6yXOt0Lx6OELfrz2r\ne607bkMWMH3wqY8a9EnZPxDlpsep00lnlxnEDaXnKIUigGqYqcpTXtxjBJ7DY3gJ\ndcSYzQUMBVqA4WLKLqJo0hBdM+yQ9Uv2IrCiieuyAaKwJTfxDoo/6BKdGwCbsEOX\nCB2ES9rLmfUHOxl67p1DOWP/tbnQajtwBLfH2YKCW9gpHPoZesSzYX6qK/1XYXo+\n5RjKEUmh445EFuSkIFFm\n=pztG\n-----END PGP SIGNATURE-----", "payload": "tree 28d72e556fcd43c6ac01bce0b9e8dfd09a4d8dcd\nparent 9fcc04e7dfe965d1eb9c6a45ad26c319525b54d7\nauthor mcarton <cartonmartin+git@gmail.com> 1477315871 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1477315871 +0200\n\nBe more helping with `cargo clippy --help`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83", "html_url": "https://github.com/rust-lang/rust/commit/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcc04e7dfe965d1eb9c6a45ad26c319525b54d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcc04e7dfe965d1eb9c6a45ad26c319525b54d7", "html_url": "https://github.com/rust-lang/rust/commit/9fcc04e7dfe965d1eb9c6a45ad26c319525b54d7"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "594e017fd010a7581dd05b33039028e77750563d", "filename": "src/main.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492341593094d3b1a3ffa2e5d6e5820fb0dd7a83/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=492341593094d3b1a3ffa2e5d6e5820fb0dd7a83", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n+#![feature(static_in_const)]\n \n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n@@ -110,6 +111,27 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n \n use std::path::Path;\n \n+const CARGO_CLIPPY_HELP: &str = \"\\\n+Checks a package to catch common mistakes and improve your Rust code.\n+\n+Usage:\n+    cargo clippy [options] [--] [<opts>...]\n+\n+Common options:\n+    -h, --help               Print this message\n+    --features               Features to compile for the package\n+\n+Other options are the same as `cargo rustc`.\n+\n+To allow or deny a lint from the command line you can use `cargo clippy --` with\n+one of:\n+\n+    -W --warn OPT       Set lint warnings\n+    -A --allow OPT      Set lint allowed\n+    -D --deny OPT       Set lint denied\n+    -F --forbid OPT     Set lint forbidden\\\n+\";\n+\n pub fn main() {\n     use std::env;\n \n@@ -138,9 +160,19 @@ pub fn main() {\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n+\n+        match std::env::args().nth(2).as_ref().map(AsRef::as_ref) {\n+            Some(\"--help\") | Some(\"-h\") => {\n+                println!(\"{}\", CARGO_CLIPPY_HELP);\n+                return;\n+            }\n+            _ => (),\n+        }\n+\n         let manifest_path_arg = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n \n         let mut metadata = cargo::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)).expect(\"could not obtain cargo metadata\");\n+\n         assert_eq!(metadata.version, 1);\n \n         let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));"}]}