{"sha": "601c2edb4d64a45c702ce56b7e8ec1d232dff099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWMyZWRiNGQ2NGE0NWM3MDJjZTU2YjdlOGVjMWQyMzJkZmYwOTk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-19T08:01:03Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-21T02:45:50Z"}, "message": "Fix fallout in rusti & rustpkg.", "tree": {"sha": "b136ba5ffcf1c7218e98d798ad1b211453480ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b136ba5ffcf1c7218e98d798ad1b211453480ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601c2edb4d64a45c702ce56b7e8ec1d232dff099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601c2edb4d64a45c702ce56b7e8ec1d232dff099", "html_url": "https://github.com/rust-lang/rust/commit/601c2edb4d64a45c702ce56b7e8ec1d232dff099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601c2edb4d64a45c702ce56b7e8ec1d232dff099/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd82c4566bc0a436d9feb68891369fd4a79ca73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd82c4566bc0a436d9feb68891369fd4a79ca73e", "html_url": "https://github.com/rust-lang/rust/commit/cd82c4566bc0a436d9feb68891369fd4a79ca73e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "257c651efc6f104bab84f66f13b5680aac7e7b1d", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=601c2edb4d64a45c702ce56b7e8ec1d232dff099", "patch": "@@ -131,7 +131,7 @@ fn record(repl: Repl, blk: @ast::blk, intr: @token::ident_interner) -> Repl {\n \n /// Run an input string in a Repl, returning the new Repl.\n fn run(repl: Repl, input: ~str) -> Repl {\n-    let options: @session::options = @{\n+    let options = @session::options {\n         crate_type: session::unknown_crate,\n         binary: repl.binary,\n         addl_lib_search_paths: repl.lib_search_paths.map(|p| Path(*p)),\n@@ -157,7 +157,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n \n     let outputs = driver::build_output_filenames(wrapped, &None, &None, sess);\n     debug!(\"calling compile_upto\");\n-    let {crate: crate, tcx: _} = driver::compile_upto(sess, cfg, wrapped,\n+    let (crate, _) = driver::compile_upto(sess, cfg, wrapped,\n                                                  driver::cu_everything,\n                                                  Some(outputs));\n \n@@ -196,7 +196,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n     match do task::try {\n         let src_path = Path(src_filename);\n-        let options: @session::options = @{\n+        let options = @session::options {\n             binary: binary,\n             addl_lib_search_paths: ~[os::getcwd()],\n             .. *session::basic_options()"}, {"sha": "f4393425e18d44cc9846d1a94843968d8eddbfb2", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=601c2edb4d64a45c702ce56b7e8ec1d232dff099", "patch": "@@ -64,15 +64,15 @@ impl PackageScript {\n         }\n \n         let binary = os::args()[0];\n-        let options: @session::options = @{\n+        let options = @session::options {\n             binary: binary,\n             crate_type: session::bin_crate,\n             .. *session::basic_options()\n         };\n         let input = driver::file_input(script);\n         let sess = driver::build_session(options, diagnostic::emit);\n         let cfg = driver::build_configuration(sess, binary, input);\n-        let {crate, _} = driver::compile_upto(sess, cfg, input,\n+        let (crate, _) = driver::compile_upto(sess, cfg, input,\n                                               driver::cu_parse, None);\n         let mut id = None;\n         let mut vers = None;"}, {"sha": "5e549d9649080c68c20f814109617eb628c003fe", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601c2edb4d64a45c702ce56b7e8ec1d232dff099/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=601c2edb4d64a45c702ce56b7e8ec1d232dff099", "patch": "@@ -599,7 +599,7 @@ pub fn compile_input(sysroot: Option<Path>, input: driver::input, dir: &Path,\n     let test_dir = dir.push(~\"test\");\n     let binary = os::args()[0];\n     let matches = getopts(flags, driver::optgroups()).get();\n-    let options = @{\n+    let options = @session::options {\n         crate_type: session::unknown_crate,\n         optimize: if opt { session::Aggressive } else { session::No },\n         test: test,\n@@ -612,15 +612,15 @@ pub fn compile_input(sysroot: Option<Path>, input: driver::input, dir: &Path,\n         crate_cfg.push(attr::mk_word_item(@cfg));\n     }\n \n-    let options = @{\n+    let options = @session::options {\n         cfg: vec::append(options.cfg, crate_cfg),\n         .. *options\n     };\n     let sess = driver::build_session(options, diagnostic::emit);\n     let cfg = driver::build_configuration(sess, binary, input);\n     let mut outputs = driver::build_output_filenames(input, &None, &None,\n                                                      sess);\n-    let {crate, _} = driver::compile_upto(sess, cfg, input, driver::cu_parse,\n+    let (crate, _) = driver::compile_upto(sess, cfg, input, driver::cu_parse,\n                                           Some(outputs));\n \n     let mut name = None;"}]}