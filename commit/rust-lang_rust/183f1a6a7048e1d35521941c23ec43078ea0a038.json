{"sha": "183f1a6a7048e1d35521941c23ec43078ea0a038", "node_id": "C_kwDOAAsO6NoAKDE4M2YxYTZhNzA0OGUxZDM1NTIxOTQxYzIzZWM0MzA3OGVhMGEwMzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T20:41:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T20:41:59Z"}, "message": "Fix lifetime suggestion for type aliases with objects in them", "tree": {"sha": "87e8b4f9ce497a7adac6006209bd193fd549cf6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e8b4f9ce497a7adac6006209bd193fd549cf6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183f1a6a7048e1d35521941c23ec43078ea0a038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183f1a6a7048e1d35521941c23ec43078ea0a038", "html_url": "https://github.com/rust-lang/rust/commit/183f1a6a7048e1d35521941c23ec43078ea0a038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183f1a6a7048e1d35521941c23ec43078ea0a038/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "html_url": "https://github.com/rust-lang/rust/commit/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "328f569bb74fc8ef6e85332b8b4df6ac13b2339b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/183f1a6a7048e1d35521941c23ec43078ea0a038/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183f1a6a7048e1d35521941c23ec43078ea0a038/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=183f1a6a7048e1d35521941c23ec43078ea0a038", "patch": "@@ -845,7 +845,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let Some((alias_tys, alias_span)) = self\n+            let Some((alias_tys, alias_span, lt_addition_span)) = self\n                 .infcx\n                 .tcx\n                 .return_type_impl_or_dyn_traits_with_type_alias(suitable_region.def_id) else { return; };\n@@ -858,10 +858,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ()\n                 }\n                 if let TyKind::TraitObject(_, lt, _) = alias_ty.kind {\n-                    spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    if lt.ident.name == kw::Empty {\n+                        spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    } else {\n+                        spans_suggs.push((lt.ident.span, \"'a\".to_string()));\n+                    }\n                 }\n             }\n-            spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+\n+            if let Some(lt_addition_span) = lt_addition_span {\n+                spans_suggs.push((lt_addition_span, \"'a, \".to_string()));\n+            } else {\n+                spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+            }\n+\n             diag.multipart_suggestion_verbose(\n                 &format!(\n                     \"to declare that the trait object {captures}, you can add a lifetime parameter `'a` in the type alias\""}, {"sha": "cf388f3e855184770c187e4de5e0b46383126ac6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/183f1a6a7048e1d35521941c23ec43078ea0a038/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183f1a6a7048e1d35521941c23ec43078ea0a038/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=183f1a6a7048e1d35521941c23ec43078ea0a038", "patch": "@@ -1116,11 +1116,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         v.0\n     }\n \n-    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in its return type and associated alias span when type alias is used\n+    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in\n+    /// its return type, and the associated alias span when type alias is used,\n+    /// along with a span for lifetime suggestion (if there are existing generics).\n     pub fn return_type_impl_or_dyn_traits_with_type_alias(\n         self,\n         scope_def_id: LocalDefId,\n-    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span)> {\n+    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span, Option<Span>)> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         let mut v = TraitObjectVisitor(vec![], self.hir());\n         // when the return type is a type alias\n@@ -1134,7 +1136,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         {\n             v.visit_ty(alias_ty);\n             if !v.0.is_empty() {\n-                return Some((v.0, alias_generics.span));\n+                return Some((v.0, alias_generics.span, alias_generics.span_for_lifetime_suggestion()));\n             }\n         }\n         return None;"}, {"sha": "c9e043577ed6d90b652644371c59fb02a11b6b7b", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/183f1a6a7048e1d35521941c23ec43078ea0a038/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183f1a6a7048e1d35521941c23ec43078ea0a038/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs?ref=183f1a6a7048e1d35521941c23ec43078ea0a038", "patch": "@@ -0,0 +1,11 @@\n+type Lazy<T> = Box<dyn Fn() -> T + 'static>;\n+\n+fn test(x: &i32) -> Lazy<i32> {\n+    Box::new(|| {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR closure may outlive the current function\n+        *x\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "28b4b4aa290d522efa9ed664aefa656ee872e382", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/183f1a6a7048e1d35521941c23ec43078ea0a038/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/183f1a6a7048e1d35521941c23ec43078ea0a038/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr?ref=183f1a6a7048e1d35521941c23ec43078ea0a038", "patch": "@@ -0,0 +1,43 @@\n+error: lifetime may not live long enough\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL |   fn test(x: &i32) -> Lazy<i32> {\n+   |              - let's call the lifetime of this reference `'1`\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^ returning this value requires that `'1` must outlive `'static`\n+   |\n+help: to declare that the trait object captures data from argument `x`, you can add a lifetime parameter `'a` in the type alias\n+   |\n+LL | type Lazy<'a, T> = Box<dyn Fn() -> T + 'a>;\n+   |           +++                          ~~\n+\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:14\n+   |\n+LL |     Box::new(|| {\n+   |              ^^ may outlive borrowed value `x`\n+...\n+LL |         *x\n+   |         -- `x` is borrowed here\n+   |\n+note: closure is returned here\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(move || {\n+   |              ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}]}