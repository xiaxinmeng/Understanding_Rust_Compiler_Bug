{"sha": "d5a448b3f47b22c9cb010198bdcc49d4392b090b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTQ0OGIzZjQ3YjIyYzljYjAxMDE5OGJkY2M0OWQ0MzkyYjA5MGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-13T17:10:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-13T17:10:04Z"}, "message": "Auto merge of #53270 - petrochenkov:macuse-regr, r=alexcrichton\n\nFix a few regressions from enabling macro modularization\n\nThe first commit restores the old behavior for some minor unstable stuff (`rustc_*` and `derive_*` attributes) and adds a new feature gate for arbitrary tokens in non-macro attributes.\n\nThe second commit fixes https://github.com/rust-lang/rust/issues/53205\n\nThe third commit fixes https://github.com/rust-lang/rust/issues/53144.\nSame technique is used as for other things blocking expansion progress - if something causes indeterminacy too often, then prohibit it.\nIn this case referring to crate-local macro-expanded `#[macro_export]` macros via module-relative paths is prohibited, see comments in code for more details.\n\ncc https://github.com/rust-lang/rust/pull/50911", "tree": {"sha": "9f47b8e75e0a508001d99285f1481bbdef5eb054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f47b8e75e0a508001d99285f1481bbdef5eb054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a448b3f47b22c9cb010198bdcc49d4392b090b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a448b3f47b22c9cb010198bdcc49d4392b090b", "html_url": "https://github.com/rust-lang/rust/commit/d5a448b3f47b22c9cb010198bdcc49d4392b090b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a448b3f47b22c9cb010198bdcc49d4392b090b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78ae85e5942b5d41c7bddf8243ede7f350d4886", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78ae85e5942b5d41c7bddf8243ede7f350d4886", "html_url": "https://github.com/rust-lang/rust/commit/a78ae85e5942b5d41c7bddf8243ede7f350d4886"}, {"sha": "dd0a766e06fc553a0321fb04eb51910bfd2c7097", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0a766e06fc553a0321fb04eb51910bfd2c7097", "html_url": "https://github.com/rust-lang/rust/commit/dd0a766e06fc553a0321fb04eb51910bfd2c7097"}], "stats": {"total": 378, "additions": 262, "deletions": 116}, "files": [{"sha": "bf87b00c14969b667eb863136ed5ff4e9597bb53", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -789,7 +789,6 @@ impl<'a, 'b, 'cl> BuildReducedGraphVisitor<'a, 'b, 'cl> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n-        self.resolver.unresolved_invocations_macro_export.insert(mark);\n         let invocation = self.resolver.invocations[&mark];\n         invocation.module.set(self.resolver.current_module);\n         invocation.legacy_scope.set(self.legacy_scope);"}, {"sha": "e31e2cc1dff59ee919e992991f273bf2f650136e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1385,6 +1385,8 @@ pub struct Resolver<'a, 'b: 'a> {\n     use_injections: Vec<UseError<'a>>,\n     /// `use` injections for proc macros wrongly imported with #[macro_use]\n     proc_mac_errors: Vec<macros::ProcMacError>,\n+    /// crate-local macro expanded `macro_export` referred to by a module-relative path\n+    macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n \n     gated_errors: FxHashSet<Span>,\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n@@ -1432,9 +1434,6 @@ pub struct Resolver<'a, 'b: 'a> {\n \n     /// Only supposed to be used by rustdoc, otherwise should be false.\n     pub ignore_extern_prelude_feature: bool,\n-\n-    /// Macro invocations in the whole crate that can expand into a `#[macro_export] macro_rules`.\n-    unresolved_invocations_macro_export: FxHashSet<Mark>,\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n@@ -1706,6 +1705,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             proc_mac_errors: Vec::new(),\n             gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n+            macro_expanded_macro_export_errors: BTreeSet::new(),\n \n             arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n@@ -1737,7 +1737,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n             ignore_extern_prelude_feature: false,\n-            unresolved_invocations_macro_export: FxHashSet(),\n         }\n     }\n \n@@ -4126,6 +4125,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             ns: Namespace,\n                                             module: Module<'a>,\n                                             found_traits: &mut Vec<TraitCandidate>) {\n+        assert!(ns == TypeNS || ns == ValueNS);\n         let mut traits = module.traits.borrow_mut();\n         if traits.is_none() {\n             let mut collected_traits = Vec::new();\n@@ -4371,6 +4371,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.report_proc_macro_import(krate);\n         let mut reported_spans = FxHashSet();\n \n+        for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {\n+            let msg = \"macro-expanded `macro_export` macros from the current crate \\\n+                       cannot be referred to by absolute paths\";\n+            self.session.struct_span_err(span_use, msg)\n+                        .span_note(span_def, \"the macro is defined here\")\n+                        .emit();\n+        }\n+\n         for &AmbiguityError { span, name, b1, b2, lexical } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n             let participle = |binding: &NameBinding| {"}, {"sha": "fe9d3c7eb998268bcdf7ae683e7817acdb4f3ce0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -28,6 +28,7 @@ use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, feature_err, emit_feature_err, is_builtin_attr_name, GateIssue};\n+use syntax::feature_gate::EXPLAIN_DERIVE_UNDERSCORE;\n use syntax::fold::{self, Folder};\n use syntax::parse::parser::PathStyle;\n use syntax::parse::token::{self, Token};\n@@ -195,9 +196,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n \n         self.current_module = invocation.module.get();\n         self.current_module.unresolved_invocations.borrow_mut().remove(&mark);\n-        self.unresolved_invocations_macro_export.remove(&mark);\n         self.current_module.unresolved_invocations.borrow_mut().extend(derives);\n-        self.unresolved_invocations_macro_export.extend(derives);\n         for &derive in derives {\n             self.invocations.insert(derive, invocation);\n         }\n@@ -338,19 +337,37 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             match attr_kind {\n                 NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper |\n                 NonMacroAttrKind::Custom if is_attr_invoc => {\n+                    let features = self.session.features_untracked();\n                     if attr_kind == NonMacroAttrKind::Tool &&\n-                       !self.session.features_untracked().tool_attributes {\n+                       !features.tool_attributes {\n                         feature_err(&self.session.parse_sess, \"tool_attributes\",\n                                     invoc.span(), GateIssue::Language,\n                                     \"tool attributes are unstable\").emit();\n                     }\n-                    if attr_kind == NonMacroAttrKind::Custom &&\n-                       !self.session.features_untracked().custom_attribute {\n-                        let msg = format!(\"The attribute `{}` is currently unknown to the compiler \\\n-                                           and may have meaning added to it in the future\", path);\n-                        feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n-                                    GateIssue::Language, &msg).emit();\n+                    if attr_kind == NonMacroAttrKind::Custom {\n+                        assert!(path.segments.len() == 1);\n+                        let name = path.segments[0].ident.name.as_str();\n+                        if name.starts_with(\"rustc_\") {\n+                            if !features.rustc_attrs {\n+                                let msg = \"unless otherwise specified, attributes with the prefix \\\n+                                        `rustc_` are reserved for internal compiler diagnostics\";\n+                                feature_err(&self.session.parse_sess, \"rustc_attrs\", invoc.span(),\n+                                            GateIssue::Language, &msg).emit();\n+                            }\n+                        } else if name.starts_with(\"derive_\") {\n+                            if !features.custom_derive {\n+                                feature_err(&self.session.parse_sess, \"custom_derive\", invoc.span(),\n+                                            GateIssue::Language, EXPLAIN_DERIVE_UNDERSCORE).emit();\n+                            }\n+                        } else if !features.custom_attribute {\n+                            let msg = format!(\"The attribute `{}` is currently unknown to the \\\n+                                               compiler and may have meaning added to it in the \\\n+                                               future\", path);\n+                            feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n+                                        GateIssue::Language, &msg).emit();\n+                        }\n                     }\n+\n                     return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr {\n                         mark_used: attr_kind == NonMacroAttrKind::Tool,\n                     })));\n@@ -650,7 +667,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::BuiltinAttrs => {\n-                    if is_builtin_attr_name(ident.name) {\n+                    // FIXME: Only built-in attributes are not considered as candidates for\n+                    // non-attributes to fight off regressions on stable channel (#53205).\n+                    // We need to come up with some more principled approach instead.\n+                    if is_attr && is_builtin_attr_name(ident.name) {\n                         let binding = (Def::NonMacroAttr(NonMacroAttrKind::Builtin),\n                                        ty::Visibility::Public, ident.span, Mark::root())\n                                        .to_name_binding(self.arenas);"}, {"sha": "715292bc11622891508a833f5d8636ad08e7177f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -146,6 +146,14 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             .try_borrow_mut()\n             .map_err(|_| Determined)?; // This happens when there is a cycle of imports\n \n+        if let Some(binding) = resolution.binding {\n+            if !restricted_shadowing && binding.expansion != Mark::root() {\n+                if let NameBindingKind::Def(_, true) = binding.kind {\n+                    self.macro_expanded_macro_export_errors.insert((path_span, binding.span));\n+                }\n+            }\n+        }\n+\n         if record_used {\n             if let Some(binding) = resolution.binding {\n                 if let Some(shadowed_glob) = resolution.shadowed_glob {\n@@ -211,9 +219,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         // if it cannot be shadowed by some new item/import expanded from a macro.\n         // This happens either if there are no unexpanded macros, or expanded names cannot\n         // shadow globs (that happens in macro namespace or with restricted shadowing).\n-        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty() ||\n-                                (ns == MacroNS && ptr::eq(module, self.graph_root) &&\n-                                 !self.unresolved_invocations_macro_export.is_empty());\n+        //\n+        // Additionally, any macro in any module can plant names in the root module if it creates\n+        // `macro_export` macros, so the root module effectively has unresolved invocations if any\n+        // module has unresolved invocations.\n+        // However, it causes resolution/expansion to stuck too often (#53144), so, to make\n+        // progress, we have to ignore those potential unresolved invocations from other modules\n+        // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted\n+        // shadowing is enabled, see `macro_expanded_macro_export_errors`).\n+        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty();\n         if let Some(binding) = resolution.binding {\n             if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n                 return check_usable(self, binding);"}, {"sha": "b779b2eb689e8aabbba8d55aea9ddde481115859", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -90,7 +90,7 @@ macro_rules! declare_features {\n                 self.macros_in_extern || self.proc_macro_path_invoc ||\n                 self.proc_macro_mod || self.proc_macro_expr ||\n                 self.proc_macro_non_items || self.proc_macro_gen ||\n-                self.stmt_expr_attributes\n+                self.stmt_expr_attributes || self.unrestricted_attribute_tokens\n             }\n         }\n     };\n@@ -504,6 +504,9 @@ declare_features! (\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (active, impl_header_lifetime_elision, \"1.30.0\", Some(15872), Some(Edition::Edition2018)),\n+\n+    // Support for arbitrary delimited token streams in non-macro attributes.\n+    (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n );\n \n declare_features! (\n@@ -721,8 +724,7 @@ pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name) ||\n-    attr.name().as_str().starts_with(\"rustc_\")\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name)\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n@@ -1521,25 +1523,27 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n-        let mut allow_attr_literal = false;\n-        if attr.path == \"repr\" {\n-            if let Some(content) = attr.meta_item_list() {\n-                allow_attr_literal = content.iter().any(\n-                    |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n-            }\n-        }\n-\n-        if self.context.features.use_extern_macros() && attr::is_known(attr) {\n-            return\n-        }\n+        match attr.parse_meta(self.context.parse_sess) {\n+            Ok(meta) => {\n+                // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n+                let mut allow_attr_literal = false;\n+                if attr.path == \"repr\" {\n+                    if let Some(content) = meta.meta_item_list() {\n+                        allow_attr_literal = content.iter().any(\n+                            |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n+                    }\n+                }\n \n-        if !allow_attr_literal {\n-            let meta = panictry!(attr.parse_meta(self.context.parse_sess));\n-            if contains_novel_literal(&meta) {\n-                gate_feature_post!(&self, attr_literals, attr.span,\n-                                   \"non-string literals in attributes, or string \\\n-                                   literals in top-level positions, are experimental\");\n+                if !allow_attr_literal && contains_novel_literal(&meta) {\n+                    gate_feature_post!(&self, attr_literals, attr.span,\n+                                    \"non-string literals in attributes, or string \\\n+                                    literals in top-level positions, are experimental\");\n+                }\n+            }\n+            Err(mut err) => {\n+                err.cancel();\n+                gate_feature_post!(&self, unrestricted_attribute_tokens, attr.span,\n+                                    \"arbitrary tokens in non-macro attributes are unstable\");\n             }\n         }\n     }"}, {"sha": "8d53699c0640e0bb2ce3088491c9329cc8d73ce2", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -21,7 +21,7 @@ extern crate derive_b;\n #[C] //~ ERROR: The attribute `C` is currently unknown to the compiler\n #[B(D)]\n #[B(E = \"foo\")]\n-#[B arbitrary tokens] //~ expected one of `(` or `=`, found `arbitrary`\n+#[B arbitrary tokens] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n struct B;\n \n fn main() {}"}, {"sha": "8d36745116b65b3b7e229833e9bd2a8cdcb123d0", "filename": "src/test/compile-fail/gated-attr-literals.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -11,37 +11,33 @@\n // Check that literals in attributes don't parse without the feature gate.\n \n // gate-test-attr_literals\n-// gate-test-custom_attribute\n \n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![feature(custom_attribute)]\n \n-#[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n-#[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr] // OK\n+#[fake_attr(100)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(1, 2, 3)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(\"hello\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n-#[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(name = \"hello\")] // OK\n+#[fake_attr(1, \"hi\", key = 12, true, false)]\n     //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(key = \"hello\", val = 10)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(key(\"hello\"), val(10))]\n     //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(enabled = true, disabled = false)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(true)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(pi = 3.14159)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(b\"hi\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n+#[fake_doc(r\"doc\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n struct Q {  }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "a77b172487600fa30accb038d043a483d2b8fe98", "filename": "src/test/compile-fail/macro-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc = $not_there] //~ error: unexpected token: `$`\n+#[doc = $not_there] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n fn main() { }"}, {"sha": "41db88121cb5292ef9adc410391404a7d7dfcbbc", "filename": "src/test/parse-fail/attr-bad-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // asterisk is bogus\n-#[path*] //~ ERROR expected one of `(` or `=`\n+#[path*] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n mod m {}"}, {"sha": "918d2c17123e88b427106040538b454fd8a6b529", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![feature(proc_macro_path_invoc)]\n+#![feature(proc_macro_path_invoc, unrestricted_attribute_tokens)]\n \n extern crate derive_b;\n "}, {"sha": "7295de80db56dec9a6fa29d19596a87dfd2c2cef", "filename": "src/test/ui/feature-gate-rustc-attrs-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n+\n+#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+\n+fn main() {}"}, {"sha": "54a580ce9f9426b339f6954b9c45412650d1544c", "filename": "src/test/ui/feature-gate-rustc-attrs-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:15:1\n+   |\n+LL | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:16:1\n+   |\n+LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "99bc51b69c6cbebf31df08a19d9e539dbcb50e7d", "filename": "src/test/ui/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -12,8 +12,6 @@\n \n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n-#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n-#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_foo]\n //~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n "}, {"sha": "52a4d3664ce23388b658411fef00c7e4be3460d9", "filename": "src/test/ui/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1,27 +1,11 @@\n-error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n-   |\n-LL | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n-\n-error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:16:1\n-   |\n-LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n-   | ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n-\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:17:1\n+  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n    |\n LL | #[rustc_foo]\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "daebbe658a23bbf2dd5e0ba12da187186edbce3e", "filename": "src/test/ui/feature-gate-unrestricted-attribute-tokens.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(custom_attribute)]\n+\n+#[my_attr(a b c d)]\n+//~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n+//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n+//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n+fn main() {}"}, {"sha": "cc5694b1598d3b9b2e5aab1d0d2e4b74ee6506aa", "filename": "src/test/ui/feature-gate-unrestricted-attribute-tokens.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,20 @@\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:13\n+   |\n+LL | #[my_attr(a b c d)]\n+   |             ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:15\n+   |\n+LL | #[my_attr(a b c d)]\n+   |               ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:17\n+   |\n+LL | #[my_attr(a b c d)]\n+   |                 ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ab1f312e161e87ba42d288e17349d6b140071697", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Crate-local macro expanded `macro_export` macros cannot be accessed with module-relative paths.\n+\n+#![feature(use_extern_macros)]\n+\n+macro_rules! define_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ()\n+    }\n+}}\n+\n+define_exported!();\n+\n+mod m {\n+    use exported;\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+}\n+\n+fn main() {\n+    ::exported!();\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+}"}, {"sha": "6da52842d83d7d09631799c3e97936ca65a6ca10", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -0,0 +1,36 @@\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-3.rs:25:9\n+   |\n+LL |     use exported;\n+   |         ^^^^^^^^\n+   |\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n+\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-3.rs:30:5\n+   |\n+LL |     ::exported!();\n+   |     ^^^^^^^^^^\n+   |\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "acac2d151fe9ad5ef8008d3caf10f1a5de111bf7", "filename": "src/test/ui/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     concat!(test!());\n-    //~^ ERROR expected a macro, found built-in attribute\n+    //~^ ERROR cannot find macro `test!` in this scope\n }"}, {"sha": "51d6041e92220e356b6f873a9ec54c9c8e5ca952", "filename": "src/test/ui/issue-11692-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1,4 +1,4 @@\n-error: expected a macro, found built-in attribute\n+error: cannot find macro `test!` in this scope\n   --> $DIR/issue-11692-2.rs:12:13\n    |\n LL |     concat!(test!());"}, {"sha": "d325b0460015c7f18660ce555e42aa0136757b44", "filename": "src/test/ui/macro-path-prelude-fail-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(use_extern_macros)]\n \n-#[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n+#[derive(inline)] //~ ERROR cannot find derive macro `inline` in this scope\n struct S;\n \n fn main() {\n-    inline!(); //~ ERROR expected a macro, found built-in attribute\n+    inline!(); //~ ERROR cannot find macro `inline!` in this scope\n }"}, {"sha": "c9af4b66427516df4a674b863d0a2c7b5e68d057", "filename": "src/test/ui/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1,14 +1,14 @@\n-error: expected a macro, found built-in attribute\n+error: cannot find derive macro `inline` in this scope\n   --> $DIR/macro-path-prelude-fail-3.rs:13:10\n    |\n-LL | #[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n+LL | #[derive(inline)] //~ ERROR cannot find derive macro `inline` in this scope\n    |          ^^^^^^\n \n-error: expected a macro, found built-in attribute\n+error: cannot find macro `inline!` in this scope\n   --> $DIR/macro-path-prelude-fail-3.rs:17:5\n    |\n-LL |     inline!(); //~ ERROR expected a macro, found built-in attribute\n-   |     ^^^^^^\n+LL |     inline!(); //~ ERROR cannot find macro `inline!` in this scope\n+   |     ^^^^^^ help: you could try the macro: `line`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6831cd81d7daebffc0291d15a21f65ca8a21d74b", "filename": "src/test/ui/macro-path-prelude-shadowing.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.rs?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -21,7 +21,9 @@ add_macro_expanded_things_to_macro_prelude!();\n \n mod m1 {\n     fn check() {\n-        inline!(); //~ ERROR `inline` is ambiguous\n+        inline!(); // OK. Theoretically ambiguous, but we do not consider built-in attributes\n+                   // as candidates for non-attribute macro invocations to avoid regressions\n+                   // on stable channel\n     }\n }\n "}, {"sha": "c0892f97376e32fd0ccbacdfb5824f824395957a", "filename": "src/test/ui/macro-path-prelude-shadowing.stderr", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-shadowing.stderr?ref=d5a448b3f47b22c9cb010198bdcc49d4392b090b", "patch": "@@ -1,42 +1,21 @@\n-error[E0659]: `inline` is ambiguous\n-  --> $DIR/macro-path-prelude-shadowing.rs:24:9\n-   |\n-LL |         inline!(); //~ ERROR `inline` is ambiguous\n-   |         ^^^^^^\n-   |\n-note: `inline` could refer to the name imported here\n-  --> $DIR/macro-path-prelude-shadowing.rs:16:5\n-   |\n-LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^\n-...\n-LL | add_macro_expanded_things_to_macro_prelude!();\n-   | ---------------------------------------------- in this macro invocation\n-note: `inline` could also refer to the name defined here\n-  --> $DIR/macro-path-prelude-shadowing.rs:24:9\n-   |\n-LL |         inline!(); //~ ERROR `inline` is ambiguous\n-   |         ^^^^^^\n-   = note: macro-expanded macro imports do not shadow\n-\n error[E0659]: `std` is ambiguous\n-  --> $DIR/macro-path-prelude-shadowing.rs:37:9\n+  --> $DIR/macro-path-prelude-shadowing.rs:39:9\n    |\n LL |         std::panic!(); //~ ERROR `std` is ambiguous\n    |         ^^^^^^^^^^\n    |\n note: `std` could refer to the name imported here\n-  --> $DIR/macro-path-prelude-shadowing.rs:35:9\n+  --> $DIR/macro-path-prelude-shadowing.rs:37:9\n    |\n LL |     use m2::*; // glob-import user-defined `std`\n    |         ^^^^^\n note: `std` could also refer to the name defined here\n-  --> $DIR/macro-path-prelude-shadowing.rs:37:9\n+  --> $DIR/macro-path-prelude-shadowing.rs:39:9\n    |\n LL |         std::panic!(); //~ ERROR `std` is ambiguous\n    |         ^^^\n    = note: consider adding an explicit import of `std` to disambiguate\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0659`."}]}