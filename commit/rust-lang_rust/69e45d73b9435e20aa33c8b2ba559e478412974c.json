{"sha": "69e45d73b9435e20aa33c8b2ba559e478412974c", "node_id": "C_kwDOAAsO6NoAKDY5ZTQ1ZDczYjk0MzVlMjBhYTMzYzhiMmJhNTU5ZTQ3ODQxMjk3NGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T20:57:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T20:57:39Z"}, "message": "Rollup merge of #95740 - Amanieu:kreg0, r=nagisa\n\nasm: Add a kreg0 register class on x86 which includes k0\n\nPreviously we only exposed a kreg register class which excludes the k0\nregister since it can't be used in many instructions. However k0 is a\nvalid register and we need to have a way of marking it as clobbered for\nclobber_abi.\n\nFixes #94977", "tree": {"sha": "9e205358d4a48d0952a320df3a748802304c487a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e205358d4a48d0952a320df3a748802304c487a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e45d73b9435e20aa33c8b2ba559e478412974c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXyJECRBK7hj4Ov3rIwAAlIUIAD7UNYVFJDFCGe45SN97rqJu\nSYQ/Aw9mk3n4wNWoAJludXMcuyeWcxRxy6YZWEWg25vh48297wzXicaKkbs0CM8O\nCm1/jVAWvjMvqPf6P7xSRkZ1R2w79fFixfApE+q8eXSyliJcNqRfqeIKnXh6WOwt\nKXNjATFteeCBm1DHjAM/5LqVNH69LDXV7FidWSeWEGsh1H7Sh4nQCzF0ar6bv4Q1\nj1kscrVbG3TMOTus06Bd/z8PBIPpFImPN+iyUgWFxl3KCgZ/1cdZe7tBVyDTI2sy\nTEYzOrsQH/MxlJbGCTJDeUOZjhV4m31FoDorvw4ZW/WGLzLnQ7R4hlrNfPlVsBw=\n=rolL\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e205358d4a48d0952a320df3a748802304c487a\nparent 4ca19e09d302a4cbde14f9cb1bc109179dc824cd\nparent b2bc46938c123214d36c1463e23810c13e0293b4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650401859 +0200\ncommitter GitHub <noreply@github.com> 1650401859 +0200\n\nRollup merge of #95740 - Amanieu:kreg0, r=nagisa\n\nasm: Add a kreg0 register class on x86 which includes k0\n\nPreviously we only exposed a kreg register class which excludes the k0\nregister since it can't be used in many instructions. However k0 is a\nvalid register and we need to have a way of marking it as clobbered for\nclobber_abi.\n\nFixes #94977\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e45d73b9435e20aa33c8b2ba559e478412974c", "html_url": "https://github.com/rust-lang/rust/commit/69e45d73b9435e20aa33c8b2ba559e478412974c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e45d73b9435e20aa33c8b2ba559e478412974c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "html_url": "https://github.com/rust-lang/rust/commit/4ca19e09d302a4cbde14f9cb1bc109179dc824cd"}, {"sha": "b2bc46938c123214d36c1463e23810c13e0293b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bc46938c123214d36c1463e23810c13e0293b4", "html_url": "https://github.com/rust-lang/rust/commit/b2bc46938c123214d36c1463e23810c13e0293b4"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "2e8cd934eb2986fb22f6633618722ec912ab8f44", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -589,6 +589,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => unimplemented!(),\n+            InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => unimplemented!(),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n             InlineAsmRegClass::X86(\n                 X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg,\n@@ -654,6 +655,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg) => unimplemented!(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => cx.type_i16(),\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n@@ -784,6 +786,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => None,\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n             unreachable!(\"clobber-only\")\n         }"}, {"sha": "e994001f96fd9b47cd6fa2e3c550c9ee1351b04d", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -602,7 +602,9 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n             InlineAsmRegClass::X86(\n-                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg,\n+                X86InlineAsmRegClass::x87_reg\n+                | X86InlineAsmRegClass::mmx_reg\n+                | X86InlineAsmRegClass::kreg0,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n@@ -687,7 +689,11 @@ fn modifier_to_llvm(\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+        InlineAsmRegClass::X86(\n+            X86InlineAsmRegClass::x87_reg\n+            | X86InlineAsmRegClass::mmx_reg\n+            | X86InlineAsmRegClass::kreg0,\n+        ) => {\n             unreachable!(\"clobber-only\")\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n@@ -757,7 +763,11 @@ fn dummy_output_type<'ll>(cx: &CodegenCx<'ll, '_>, reg: InlineAsmRegClass) -> &'\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+        InlineAsmRegClass::X86(\n+            X86InlineAsmRegClass::x87_reg\n+            | X86InlineAsmRegClass::mmx_reg\n+            | X86InlineAsmRegClass::kreg0,\n+        ) => {\n             unreachable!(\"clobber-only\")\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),"}, {"sha": "e3ce8105a8b47a825ccb5499944993015f4bea92", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -803,6 +803,7 @@ symbols! {\n         keyword,\n         kind,\n         kreg,\n+        kreg0,\n         label,\n         label_break_value,\n         lang,"}, {"sha": "6bc807c7c4421649f89e81867da730d26a88b733", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -893,7 +893,7 @@ impl InlineAsmClobberAbi {\n \n                     xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n \n-                    k1, k2, k3, k4, k5, k6, k7,\n+                    k0, k1, k2, k3, k4, k5, k6, k7,\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n@@ -908,7 +908,7 @@ impl InlineAsmClobberAbi {\n                     zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23,\n                     zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31,\n \n-                    k1, k2, k3, k4, k5, k6, k7,\n+                    k0, k1, k2, k3, k4, k5, k6, k7,\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n@@ -927,7 +927,7 @@ impl InlineAsmClobberAbi {\n                     zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23,\n                     zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31,\n \n-                    k1, k2, k3, k4, k5, k6, k7,\n+                    k0, k1, k2, k3, k4, k5, k6, k7,\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,"}, {"sha": "854674c7f2fa7c98804c4ce6cc28bc9d5c483a9b", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -14,6 +14,7 @@ def_reg_class! {\n         ymm_reg,\n         zmm_reg,\n         kreg,\n+        kreg0,\n         mmx_reg,\n         x87_reg,\n     }\n@@ -38,7 +39,7 @@ impl X86InlineAsmRegClass {\n             }\n             Self::reg_byte => &[],\n             Self::xmm_reg | Self::ymm_reg | Self::zmm_reg => &['x', 'y', 'z'],\n-            Self::kreg => &[],\n+            Self::kreg | Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n         }\n     }\n@@ -77,7 +78,7 @@ impl X86InlineAsmRegClass {\n                 256 => Some(('y', \"ymm0\")),\n                 _ => Some(('x', \"xmm0\")),\n             },\n-            Self::kreg => None,\n+            Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n         }\n     }\n@@ -95,7 +96,7 @@ impl X86InlineAsmRegClass {\n             Self::xmm_reg => Some(('x', \"xmm0\")),\n             Self::ymm_reg => Some(('y', \"ymm0\")),\n             Self::zmm_reg => Some(('z', \"zmm0\")),\n-            Self::kreg => None,\n+            Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n         }\n     }\n@@ -132,6 +133,7 @@ impl X86InlineAsmRegClass {\n                 avx512f: I8, I16;\n                 avx512bw: I32, I64;\n             },\n+            Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n         }\n     }\n@@ -294,6 +296,7 @@ def_regs! {\n         zmm29: zmm_reg = [\"zmm29\", \"xmm29\", \"ymm29\"] % x86_64_only,\n         zmm30: zmm_reg = [\"zmm30\", \"xmm30\", \"ymm30\"] % x86_64_only,\n         zmm31: zmm_reg = [\"zmm31\", \"xmm31\", \"ymm31\"] % x86_64_only,\n+        k0: kreg0 = [\"k0\"],\n         k1: kreg = [\"k1\"],\n         k2: kreg = [\"k2\"],\n         k3: kreg = [\"k3\"],\n@@ -323,8 +326,6 @@ def_regs! {\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"ip\", \"eip\", \"rip\"] =>\n             \"the instruction pointer cannot be used as an operand for inline asm\",\n-        #error = [\"k0\"] =>\n-            \"the k0 AVX mask register cannot be used as an operand for inline asm\",\n     }\n }\n "}, {"sha": "a87152e0321b9b4a658f53e1772894c8e471b904", "filename": "src/test/codegen/asm-clobber_abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -6,29 +6,29 @@\n use std::arch::asm;\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64() {\n     asm!(\"\", clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64() {\n     asm!(\"\", clobber_abi(\"win64\"));\n }\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64_edx() {\n     let foo: i32;\n     asm!(\"\", out(\"edx\") foo, clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64_edx() {\n     let foo: i32;"}, {"sha": "272372ebedc1d01c5f716badcc5c7a6b2c08dffd", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -29,13 +29,13 @@ fn main() {\n         //~^ ERROR invalid register `rsp`: the stack pointer cannot be used as an operand\n         asm!(\"\", in(\"ip\") foo);\n         //~^ ERROR invalid register `ip`: the instruction pointer cannot be used as an operand\n-        asm!(\"\", in(\"k0\") foo);\n-        //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n \n         asm!(\"\", in(\"st(2)\") foo);\n         //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n         asm!(\"\", in(\"mm0\") foo);\n         //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+        asm!(\"\", in(\"k0\") foo);\n+        //~^ ERROR register class `kreg0` can only be used as a clobber, not as an input or output\n         asm!(\"\", out(\"st(2)\") _);\n         asm!(\"\", out(\"mm0\") _);\n         asm!(\"{}\", in(x87_reg) foo);"}, {"sha": "84b8b5ec2850b77d81505c0b3754e3a20d4f2777", "filename": "src/test/ui/asm/x86_64/bad-reg.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e45d73b9435e20aa33c8b2ba559e478412974c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr?ref=69e45d73b9435e20aa33c8b2ba559e478412974c", "patch": "@@ -64,24 +64,24 @@ error: invalid register `ip`: the instruction pointer cannot be used as an opera\n LL |         asm!(\"\", in(\"ip\") foo);\n    |                  ^^^^^^^^^^^^\n \n-error: invalid register `k0`: the k0 AVX mask register cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:32:18\n-   |\n-LL |         asm!(\"\", in(\"k0\") foo);\n-   |                  ^^^^^^^^^^^^\n-\n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:35:18\n+  --> $DIR/bad-reg.rs:33:18\n    |\n LL |         asm!(\"\", in(\"st(2)\") foo);\n    |                  ^^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:37:18\n+  --> $DIR/bad-reg.rs:35:18\n    |\n LL |         asm!(\"\", in(\"mm0\") foo);\n    |                  ^^^^^^^^^^^^^\n \n+error: register class `kreg0` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:37:18\n+   |\n+LL |         asm!(\"\", in(\"k0\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n   --> $DIR/bad-reg.rs:41:20\n    |"}]}