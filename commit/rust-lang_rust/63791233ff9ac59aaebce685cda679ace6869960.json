{"sha": "63791233ff9ac59aaebce685cda679ace6869960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzkxMjMzZmY5YWM1OWFhZWJjZTY4NWNkYTY3OWFjZTY4Njk5NjA=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-19T23:34:06Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-19T23:34:06Z"}, "message": "Add `ExitStatusError` for `vxworks`", "tree": {"sha": "dbbd54eec09fc55059f6c7711e62f7f3d5636f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbbd54eec09fc55059f6c7711e62f7f3d5636f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63791233ff9ac59aaebce685cda679ace6869960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63791233ff9ac59aaebce685cda679ace6869960", "html_url": "https://github.com/rust-lang/rust/commit/63791233ff9ac59aaebce685cda679ace6869960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63791233ff9ac59aaebce685cda679ace6869960/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8450eec8fa635a9132f799012fed83ba59121e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8450eec8fa635a9132f799012fed83ba59121e", "html_url": "https://github.com/rust-lang/rust/commit/be8450eec8fa635a9132f799012fed83ba59121e"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "ed55e1aa715ae5ac5cea3b99fdce5b0d3614f4ee", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63791233ff9ac59aaebce685cda679ace6869960/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63791233ff9ac59aaebce685cda679ace6869960/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=63791233ff9ac59aaebce685cda679ace6869960", "patch": "@@ -495,7 +495,7 @@ impl ExitStatus {\n \n     pub fn exit_ok(&self) -> Result<(), ExitStatusError> {\n         // This assumes that WIFEXITED(status) && WEXITSTATUS==0 corresponds to status==0.  This is\n-        // true on all actual versios of Unix, is widely assumed, and is specified in SuS\n+        // true on all actual versions of Unix, is widely assumed, and is specified in SuS\n         // https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html .  If it is not\n         // true for a platform pretending to be Unix, the tests (our doctests, and also\n         // procsss_unix/tests.rs) will spot it.  `ExitStatusError::code` assumes this too."}, {"sha": "c17822f51253266d1e66d3cbde32b88b9809fc1b", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/63791233ff9ac59aaebce685cda679ace6869960/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63791233ff9ac59aaebce685cda679ace6869960/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=63791233ff9ac59aaebce685cda679ace6869960", "patch": "@@ -1,5 +1,8 @@\n+use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n+use crate::num::NonZeroI32;\n+use crate::os::raw::NonZero_c_int;\n use crate::sys;\n use crate::sys::cvt;\n use crate::sys::process::process_common::*;\n@@ -187,8 +190,16 @@ impl ExitStatus {\n         libc::WIFEXITED(self.0)\n     }\n \n-    pub fn success(&self) -> bool {\n-        self.code() == Some(0)\n+    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {\n+        // This assumes that WIFEXITED(status) && WEXITSTATUS==0 corresponds to status==0.  This is\n+        // true on all actual versions of Unix, is widely assumed, and is specified in SuS\n+        // https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html .  If it is not\n+        // true for a platform pretending to be Unix, the tests (our doctests, and also\n+        // procsss_unix/tests.rs) will spot it.  `ExitStatusError::code` assumes this too.\n+        match NonZero_c_int::try_from(self.0) {\n+            Ok(failure) => Err(ExitStatusError(failure)),\n+            Err(_) => Ok(()),\n+        }\n     }\n \n     pub fn code(&self) -> Option<i32> {\n@@ -235,3 +246,18 @@ impl fmt::Display for ExitStatus {\n         }\n     }\n }\n+\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitStatusError(NonZero_c_int);\n+\n+impl Into<ExitStatus> for ExitStatusError {\n+    fn into(self) -> ExitStatus {\n+        ExitStatus(self.0.into())\n+    }\n+}\n+\n+impl ExitStatusError {\n+    pub fn code(self) -> Option<NonZeroI32> {\n+        ExitStatus(self.0.into()).code().map(|st| st.try_into().unwrap())\n+    }\n+}"}]}