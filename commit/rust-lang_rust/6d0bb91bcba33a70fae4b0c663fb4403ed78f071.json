{"sha": "6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGJiOTFiY2JhMzNhNzBmYWU0YjBjNjYzZmI0NDAzZWQ3OGYwNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-15T13:00:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-15T13:00:43Z"}, "message": "Auto merge of #68248 - JohnTitor:rollup-x0kml5f, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #67784 (Reset Formatter flags on exit from pad_integral)\n - #67914 (Don't run const propagation on items with inconsistent bounds)\n - #68141 (use winapi for non-stdlib Windows bindings)\n - #68211 (Add failing example for E0170 explanation)\n - #68219 (Untangle ZST validation from integer validation and generalize it to all zsts)\n - #68222 (Update the wasi-libc bundled with libstd)\n - #68226 (Avoid calling tcx.hir().get() on CRATE_HIR_ID)\n - #68227 (Update to a version of cmake with windows arm64 support)\n - #68229 (Update iovec to a version with no winapi dependency)\n - #68230 (Update libssh2-sys to a version that can build for aarch64-pc-windows\u2026)\n - #68231 (Better support for cross compilation on Windows.)\n - #68233 (Update compiler_builtins with changes to fix 128 bit integer remainder for aarch64 windows.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "49ad0d439dbcdc46e462fc95d9186c46d4c37421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ad0d439dbcdc46e462fc95d9186c46d4c37421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "html_url": "https://github.com/rust-lang/rust/commit/6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74353c7d2e61b111a9241490b9fbbd1ebe491fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74353c7d2e61b111a9241490b9fbbd1ebe491fe", "html_url": "https://github.com/rust-lang/rust/commit/c74353c7d2e61b111a9241490b9fbbd1ebe491fe"}, {"sha": "d2840e6bf11969c8b0275149cda25f6ce4ee60ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2840e6bf11969c8b0275149cda25f6ce4ee60ac", "html_url": "https://github.com/rust-lang/rust/commit/d2840e6bf11969c8b0275149cda25f6ce4ee60ac"}], "stats": {"total": 616, "additions": 306, "deletions": 310}, "files": [{"sha": "b5a7b29e43caa14b17fee407c09940e6b5a71e49", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -207,6 +207,7 @@ dependencies = [\n  \"serde_json\",\n  \"time\",\n  \"toml\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -520,9 +521,9 @@ dependencies = [\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.38\"\n+version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"96210eec534fc3fbfc0452a63769424eaa80205fda6cea98e5b61cb3d97bcec8\"\n+checksum = \"81fb25b677f8bf1eb325017cb6bb8452f87969db0fedb4f757b297bee78a7c62\"\n dependencies = [\n  \"cc\",\n ]\n@@ -576,9 +577,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.22\"\n+version = \"0.1.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e6f083abf9bb9005a27d2da62706f661245278cb7096da37ab27410eaf60f2c1\"\n+checksum = \"b9975aefa63997ef75ca9cf013ff1bb81487aaa0b622c21053afd3b92979a7af\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\",\n@@ -1587,12 +1588,11 @@ dependencies = [\n \n [[package]]\n name = \"iovec\"\n-version = \"0.1.2\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\n+checksum = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n dependencies = [\n  \"libc\",\n- \"winapi 0.2.8\",\n ]\n \n [[package]]\n@@ -1812,9 +1812,9 @@ dependencies = [\n \n [[package]]\n name = \"libssh2-sys\"\n-version = \"0.2.11\"\n+version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126a1f4078368b163bfdee65fbab072af08a1b374a5551b21e87ade27b1fbf9d\"\n+checksum = \"36aa6e813339d3a063292b77091dfbbb6152ff9006a459895fa5bebed7d34f10\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -3497,6 +3497,7 @@ dependencies = [\n  \"serialize\",\n  \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3524,6 +3525,7 @@ dependencies = [\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3543,6 +3545,7 @@ dependencies = [\n  \"term_size\",\n  \"termcolor\",\n  \"unicode-width\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3654,6 +3657,7 @@ dependencies = [\n  \"smallvec 1.0.0\",\n  \"syntax\",\n  \"tempfile\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3723,6 +3727,7 @@ dependencies = [\n  \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n  \"syntax\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]"}, {"sha": "c09f58cc591a69365e2004e8cfe0c298b3b52229", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -49,5 +49,9 @@ lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n \n+[target.'cfg(windows)'.dependencies.winapi]\n+version = \"0.3\"\n+features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\"]\n+\n [dev-dependencies]\n pretty_assertions = \"0.5\""}, {"sha": "efeb86540b7b7215b2c0ce2182022a1514fbe3a4", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 10, "deletions": 78, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -35,84 +35,16 @@ use std::io;\n use std::mem;\n use std::ptr;\n \n-type HANDLE = *mut u8;\n-type BOOL = i32;\n-type DWORD = u32;\n-type LPHANDLE = *mut HANDLE;\n-type LPVOID = *mut u8;\n-type JOBOBJECTINFOCLASS = i32;\n-type SIZE_T = usize;\n-type LARGE_INTEGER = i64;\n-type UINT = u32;\n-type ULONG_PTR = usize;\n-type ULONGLONG = u64;\n-\n-const FALSE: BOOL = 0;\n-const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n-const PROCESS_DUP_HANDLE: DWORD = 0x40;\n-const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n-const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n-const JOB_OBJECT_LIMIT_PRIORITY_CLASS: DWORD = 0x00000020;\n-const SEM_FAILCRITICALERRORS: UINT = 0x0001;\n-const SEM_NOGPFAULTERRORBOX: UINT = 0x0002;\n-const BELOW_NORMAL_PRIORITY_CLASS: DWORD = 0x00004000;\n-\n-extern \"system\" {\n-    fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n-    fn CloseHandle(hObject: HANDLE) -> BOOL;\n-    fn GetCurrentProcess() -> HANDLE;\n-    fn OpenProcess(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) -> HANDLE;\n-    fn DuplicateHandle(\n-        hSourceProcessHandle: HANDLE,\n-        hSourceHandle: HANDLE,\n-        hTargetProcessHandle: HANDLE,\n-        lpTargetHandle: LPHANDLE,\n-        dwDesiredAccess: DWORD,\n-        bInheritHandle: BOOL,\n-        dwOptions: DWORD,\n-    ) -> BOOL;\n-    fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) -> BOOL;\n-    fn SetInformationJobObject(\n-        hJob: HANDLE,\n-        JobObjectInformationClass: JOBOBJECTINFOCLASS,\n-        lpJobObjectInformation: LPVOID,\n-        cbJobObjectInformationLength: DWORD,\n-    ) -> BOOL;\n-    fn SetErrorMode(mode: UINT) -> UINT;\n-}\n-\n-#[repr(C)]\n-struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION {\n-    BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,\n-    IoInfo: IO_COUNTERS,\n-    ProcessMemoryLimit: SIZE_T,\n-    JobMemoryLimit: SIZE_T,\n-    PeakProcessMemoryUsed: SIZE_T,\n-    PeakJobMemoryUsed: SIZE_T,\n-}\n-\n-#[repr(C)]\n-struct IO_COUNTERS {\n-    ReadOperationCount: ULONGLONG,\n-    WriteOperationCount: ULONGLONG,\n-    OtherOperationCount: ULONGLONG,\n-    ReadTransferCount: ULONGLONG,\n-    WriteTransferCount: ULONGLONG,\n-    OtherTransferCount: ULONGLONG,\n-}\n-\n-#[repr(C)]\n-struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n-    PerProcessUserTimeLimit: LARGE_INTEGER,\n-    PerJobUserTimeLimit: LARGE_INTEGER,\n-    LimitFlags: DWORD,\n-    MinimumWorkingsetSize: SIZE_T,\n-    MaximumWorkingsetSize: SIZE_T,\n-    ActiveProcessLimit: DWORD,\n-    Affinity: ULONG_PTR,\n-    PriorityClass: DWORD,\n-    SchedulingClass: DWORD,\n-}\n+use winapi::shared::minwindef::{DWORD, FALSE, LPVOID};\n+use winapi::um::errhandlingapi::SetErrorMode;\n+use winapi::um::handleapi::{CloseHandle, DuplicateHandle};\n+use winapi::um::jobapi2::{AssignProcessToJobObject, CreateJobObjectW, SetInformationJobObject};\n+use winapi::um::processthreadsapi::{GetCurrentProcess, OpenProcess};\n+use winapi::um::winbase::{BELOW_NORMAL_PRIORITY_CLASS, SEM_NOGPFAULTERRORBOX};\n+use winapi::um::winnt::{\n+    JobObjectExtendedLimitInformation, DUPLICATE_SAME_ACCESS, JOBOBJECT_EXTENDED_LIMIT_INFORMATION,\n+    JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE, JOB_OBJECT_LIMIT_PRIORITY_CLASS, PROCESS_DUP_HANDLE,\n+};\n \n pub unsafe fn setup(build: &mut Build) {\n     // Enable the Windows Error Reporting dialog which msys disables,"}, {"sha": "89e1a7319cf59bb01cb00376fdc143044b167cc6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -230,6 +230,8 @@ impl Step for Llvm {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"NetBSD\");\n             } else if target.contains(\"freebsd\") {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"FreeBSD\");\n+            } else if target.contains(\"windows\") {\n+                cfg.define(\"CMAKE_SYSTEM_NAME\", \"Windows\");\n             }\n \n             cfg.define(\"LLVM_NATIVE_BUILD\", builder.llvm_out(builder.config.build).join(\"build\"));"}, {"sha": "7d1efe4610f9ce1e2168e255af31205b59f704f0", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -123,37 +123,24 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     // what can be found here:\n     //\n     // http://www.flexhex.com/docs/articles/hard-links.phtml\n-    //\n-    // Copied from std\n     #[cfg(windows)]\n-    #[allow(nonstandard_style)]\n     fn symlink_dir_inner(target: &Path, junction: &Path) -> io::Result<()> {\n         use std::ffi::OsStr;\n         use std::os::windows::ffi::OsStrExt;\n         use std::ptr;\n \n-        const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n-        const GENERIC_WRITE: DWORD = 0x40000000;\n-        const OPEN_EXISTING: DWORD = 3;\n-        const FILE_FLAG_OPEN_REPARSE_POINT: DWORD = 0x00200000;\n-        const FILE_FLAG_BACKUP_SEMANTICS: DWORD = 0x02000000;\n-        const FSCTL_SET_REPARSE_POINT: DWORD = 0x900a4;\n-        const IO_REPARSE_TAG_MOUNT_POINT: DWORD = 0xa0000003;\n-        const FILE_SHARE_DELETE: DWORD = 0x4;\n-        const FILE_SHARE_READ: DWORD = 0x1;\n-        const FILE_SHARE_WRITE: DWORD = 0x2;\n-\n-        type BOOL = i32;\n-        type DWORD = u32;\n-        type HANDLE = *mut u8;\n-        type LPCWSTR = *const u16;\n-        type LPDWORD = *mut DWORD;\n-        type LPOVERLAPPED = *mut u8;\n-        type LPSECURITY_ATTRIBUTES = *mut u8;\n-        type LPVOID = *mut u8;\n-        type WCHAR = u16;\n-        type WORD = u16;\n-\n+        use winapi::shared::minwindef::{DWORD, WORD};\n+        use winapi::um::fileapi::{CreateFileW, OPEN_EXISTING};\n+        use winapi::um::handleapi::CloseHandle;\n+        use winapi::um::ioapiset::DeviceIoControl;\n+        use winapi::um::winbase::{FILE_FLAG_BACKUP_SEMANTICS, FILE_FLAG_OPEN_REPARSE_POINT};\n+        use winapi::um::winioctl::FSCTL_SET_REPARSE_POINT;\n+        use winapi::um::winnt::{\n+            FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE, GENERIC_WRITE,\n+            IO_REPARSE_TAG_MOUNT_POINT, MAXIMUM_REPARSE_DATA_BUFFER_SIZE, WCHAR,\n+        };\n+\n+        #[allow(non_snake_case)]\n         #[repr(C)]\n         struct REPARSE_MOUNTPOINT_DATA_BUFFER {\n             ReparseTag: DWORD,\n@@ -165,29 +152,6 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n             ReparseTarget: WCHAR,\n         }\n \n-        extern \"system\" {\n-            fn CreateFileW(\n-                lpFileName: LPCWSTR,\n-                dwDesiredAccess: DWORD,\n-                dwShareMode: DWORD,\n-                lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n-                dwCreationDisposition: DWORD,\n-                dwFlagsAndAttributes: DWORD,\n-                hTemplateFile: HANDLE,\n-            ) -> HANDLE;\n-            fn DeviceIoControl(\n-                hDevice: HANDLE,\n-                dwIoControlCode: DWORD,\n-                lpInBuffer: LPVOID,\n-                nInBufferSize: DWORD,\n-                lpOutBuffer: LPVOID,\n-                nOutBufferSize: DWORD,\n-                lpBytesReturned: LPDWORD,\n-                lpOverlapped: LPOVERLAPPED,\n-            ) -> BOOL;\n-            fn CloseHandle(hObject: HANDLE) -> BOOL;\n-        }\n-\n         fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n             Ok(s.as_ref().encode_wide().chain(Some(0)).collect())\n         }\n@@ -212,7 +176,7 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n                 ptr::null_mut(),\n             );\n \n-            let mut data = [0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n+            let mut data = [0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize];\n             let db = data.as_mut_ptr() as *mut REPARSE_MOUNTPOINT_DATA_BUFFER;\n             let buf = &mut (*db).ReparseTarget as *mut u16;\n             let mut i = 0;"}, {"sha": "b8686775642983b6888d3dbd1350a0d0def8fba9", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -12,7 +12,7 @@ export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n git clone https://github.com/CraneStation/wasi-libc\n \n cd wasi-libc\n-git reset --hard f645f498dfbbbc00a7a97874d33082d3605c3f21\n+git reset --hard 1fad33890a5e299027ce0eab7b6ad5260585e347\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd .."}, {"sha": "e68f3c58a3e07769aedfe787b866d3d1b1733a03", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1244,12 +1244,15 @@ impl<'a> Formatter<'a> {\n             // The sign and prefix goes before the padding if the fill character\n             // is zero\n             Some(min) if self.sign_aware_zero_pad() => {\n-                self.fill = '0';\n-                self.align = rt::v1::Alignment::Right;\n+                let old_fill = crate::mem::replace(&mut self.fill, '0');\n+                let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);\n                 write_prefix(self, sign, prefix)?;\n                 let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n                 self.buf.write_str(buf)?;\n-                post_padding.write(self.buf)\n+                post_padding.write(self.buf)?;\n+                self.fill = old_fill;\n+                self.align = old_align;\n+                Ok(())\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {"}, {"sha": "7b281ce48e6aa4e102ea048daabaa53708b66080", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -28,3 +28,18 @@ fn test_estimated_capacity() {\n     assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 0);\n     assert_eq!(format_args!(\"{}. 16-bytes piece\", \"World\").estimated_capacity(), 32);\n }\n+\n+#[test]\n+fn pad_integral_resets() {\n+    struct Bar;\n+\n+    impl core::fmt::Display for Bar {\n+        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+            \"1\".fmt(f)?;\n+            f.pad_integral(true, \"\", \"5\")?;\n+            \"1\".fmt(f)\n+        }\n+    }\n+\n+    assert_eq!(format!(\"{:<03}\", Bar), \"1  0051  \");\n+}"}, {"sha": "ee214bea7b8fc39f45968fb28f4bfec728b3405f", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1219,7 +1219,7 @@ pub fn may_define_opaque_type(tcx: TyCtxt<'_>, def_id: DefId, opaque_hir_id: hir\n     let res = hir_id == scope;\n     trace!(\n         \"may_define_opaque_type(def={:?}, opaque_node={:?}) = {}\",\n-        tcx.hir().get(hir_id),\n+        tcx.hir().find(hir_id),\n         tcx.hir().get(opaque_hir_id),\n         res\n     );"}, {"sha": "b894aabd9010073f222cb5f4b7b43bce29fa75e9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -34,7 +34,6 @@\n #![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n-#![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]"}, {"sha": "e7a4c5b5921052aa9ba41d3c713e3db873d63b05", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n+use crate::traits::TraitQueryMode;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_data_structures::base_n;\n@@ -167,7 +168,9 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => return true,\n         };\n \n-        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n+        // We shouldn't encounter any overflow here, so we use TraitQueryMode::Standard\\\n+        // to report an error if overflow somehow occurs.\n+        tcx.substitute_normalize_and_test_predicates((def_id, &substs, TraitQueryMode::Standard))\n     }\n \n     pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {"}, {"sha": "a20e011b91a7543697bdb006784a82e205397ace", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1148,11 +1148,11 @@ rustc_queries! {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n \n-        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n+        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>, traits::TraitQueryMode)) -> bool {\n             no_force\n             desc { |tcx|\n-                \"testing substituted normalized predicates:`{}`\",\n-                tcx.def_path_str(key.0)\n+                \"testing substituted normalized predicates in mode {:?}:`{}`\",\n+                key.2, tcx.def_path_str(key.0)\n             }\n         }\n "}, {"sha": "9e5abc80822c7cf5d5653355bfc25acc4e7b289f", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -16,6 +16,7 @@ use super::CodeSelectionError;\n use super::{ConstEvalFailure, Unimplemented};\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n+use crate::traits::TraitQueryMode;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     type Predicate = ty::Predicate<'tcx>;\n@@ -62,6 +63,9 @@ pub struct FulfillmentContext<'tcx> {\n     // a snapshot (they don't *straddle* a snapshot, so there\n     // is no trouble there).\n     usable_in_snapshot: bool,\n+\n+    // The `TraitQueryMode` used when constructing a `SelectionContext`\n+    query_mode: TraitQueryMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -75,12 +79,26 @@ pub struct PendingPredicateObligation<'tcx> {\n static_assert_size!(PendingPredicateObligation<'_>, 136);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n-    /// Creates a new fulfillment context.\n+    /// Creates a new fulfillment context with `TraitQueryMode::Standard`\n+    /// You almost always want to use this instead of `with_query_mode`\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: false,\n+            query_mode: TraitQueryMode::Standard,\n+        }\n+    }\n+\n+    /// Creates a new fulfillment context with the specified query mode.\n+    /// This should only be used when you want to ignore overflow,\n+    /// rather than reporting it as an error.\n+    pub fn with_query_mode(query_mode: TraitQueryMode) -> FulfillmentContext<'tcx> {\n+        FulfillmentContext {\n+            predicates: ObligationForest::new(),\n+            register_region_obligations: true,\n+            usable_in_snapshot: false,\n+            query_mode,\n         }\n     }\n \n@@ -89,6 +107,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: true,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -97,6 +116,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: false,\n             usable_in_snapshot: false,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -217,7 +237,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        let mut selcx = SelectionContext::new(infcx);\n+        let mut selcx = SelectionContext::with_query_mode(infcx, self.query_mode);\n         self.select(&mut selcx)\n     }\n "}, {"sha": "31de5409fc8be9389b6b3cfc953cc34f3661d1bb", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -95,7 +95,7 @@ pub enum IntercrateMode {\n }\n \n /// The mode that trait queries run in.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, HashStable)]\n pub enum TraitQueryMode {\n     // Standard/un-canonicalized queries get accurate\n     // spans etc. passed in and hence can do reasonable\n@@ -1017,13 +1017,14 @@ where\n fn normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n+    mode: TraitQueryMode,\n ) -> bool {\n-    debug!(\"normalize_and_test_predicates(predicates={:?})\", predicates);\n+    debug!(\"normalize_and_test_predicates(predicates={:?}, mode={:?})\", predicates, mode);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::reveal_all();\n-        let mut selcx = SelectionContext::new(&infcx);\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut selcx = SelectionContext::with_query_mode(&infcx, mode);\n+        let mut fulfill_cx = FulfillmentContext::with_query_mode(mode);\n         let cause = ObligationCause::dummy();\n         let Normalized { value: predicates, obligations } =\n             normalize(&mut selcx, param_env, cause.clone(), &predicates);\n@@ -1043,12 +1044,12 @@ fn normalize_and_test_predicates<'tcx>(\n \n fn substitute_normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: (DefId, SubstsRef<'tcx>),\n+    key: (DefId, SubstsRef<'tcx>, TraitQueryMode),\n ) -> bool {\n     debug!(\"substitute_normalize_and_test_predicates(key={:?})\", key);\n \n     let predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    let result = normalize_and_test_predicates(tcx, predicates);\n+    let result = normalize_and_test_predicates(tcx, predicates, key.2);\n \n     debug!(\"substitute_normalize_and_test_predicates(key={:?}) = {:?}\", key, result);\n     result\n@@ -1101,7 +1102,10 @@ fn vtable_methods<'tcx>(\n             // Note that this method could then never be called, so we\n             // do not want to try and codegen it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n+            // We don't expect overflow here, so report an error if it somehow ends\n+            // up happening.\n+            if !normalize_and_test_predicates(tcx, predicates.predicates, TraitQueryMode::Standard)\n+            {\n                 debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }"}, {"sha": "3fb3720a5638a1dc7d253425b4f57b13e357dd85", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -125,6 +125,15 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (DefId, SubstsRef<'tcx>, traits::TraitQueryMode) {\n+    fn query_crate(&self) -> CrateNum {\n+        self.0.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}\n+\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate"}, {"sha": "fb4f818c4b2492b003fc0811b96c3dcc86a35fc0", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -31,3 +31,6 @@ measureme = \"0.7.1\"\n [dependencies.parking_lot]\n version = \"0.9\"\n features = [\"nightly\"]\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }"}, {"sha": "2a0139fa90d5a2b742cf9c0c11fd3372b3834066", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -87,39 +87,11 @@ cfg_if! {\n     } else if #[cfg(windows)] {\n         use std::mem;\n         use std::os::windows::prelude::*;\n-        use std::os::windows::raw::HANDLE;\n         use std::fs::{File, OpenOptions};\n-        use std::os::raw::{c_ulong, c_int};\n-\n-        type DWORD = c_ulong;\n-        type BOOL = c_int;\n-        type ULONG_PTR = usize;\n-\n-        type LPOVERLAPPED = *mut OVERLAPPED;\n-        const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x0000_0002;\n-        const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x0000_0001;\n-\n-        const FILE_SHARE_DELETE: DWORD = 0x4;\n-        const FILE_SHARE_READ: DWORD = 0x1;\n-        const FILE_SHARE_WRITE: DWORD = 0x2;\n-\n-        #[repr(C)]\n-        struct OVERLAPPED {\n-            Internal: ULONG_PTR,\n-            InternalHigh: ULONG_PTR,\n-            Offset: DWORD,\n-            OffsetHigh: DWORD,\n-            hEvent: HANDLE,\n-        }\n \n-        extern \"system\" {\n-            fn LockFileEx(hFile: HANDLE,\n-                          dwFlags: DWORD,\n-                          dwReserved: DWORD,\n-                          nNumberOfBytesToLockLow: DWORD,\n-                          nNumberOfBytesToLockHigh: DWORD,\n-                          lpOverlapped: LPOVERLAPPED) -> BOOL;\n-        }\n+        use winapi::um::minwinbase::{OVERLAPPED, LOCKFILE_FAIL_IMMEDIATELY, LOCKFILE_EXCLUSIVE_LOCK};\n+        use winapi::um::fileapi::LockFileEx;\n+        use winapi::um::winnt::{FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE};\n \n         #[derive(Debug)]\n         pub struct Lock {"}, {"sha": "6db2910bca4967cc82befdaf20898737d3ce42bd", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -33,9 +33,6 @@ extern crate libc;\n #[macro_use]\n extern crate cfg_if;\n \n-#[cfg(windows)]\n-extern crate libc;\n-\n pub use rustc_serialize::hex::ToHex;\n \n #[inline(never)]"}, {"sha": "004db0a79a8808fbfc6e2681a828752cdd51acf9", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -569,39 +569,19 @@ fn get_resident() -> Option<usize> {\n \n #[cfg(windows)]\n fn get_resident() -> Option<usize> {\n-    type BOOL = i32;\n-    type DWORD = u32;\n-    type HANDLE = *mut u8;\n-    use libc::size_t;\n-    #[repr(C)]\n-    #[allow(non_snake_case)]\n-    struct PROCESS_MEMORY_COUNTERS {\n-        cb: DWORD,\n-        PageFaultCount: DWORD,\n-        PeakWorkingSetSize: size_t,\n-        WorkingSetSize: size_t,\n-        QuotaPeakPagedPoolUsage: size_t,\n-        QuotaPagedPoolUsage: size_t,\n-        QuotaPeakNonPagedPoolUsage: size_t,\n-        QuotaNonPagedPoolUsage: size_t,\n-        PagefileUsage: size_t,\n-        PeakPagefileUsage: size_t,\n-    }\n-    #[allow(non_camel_case_types)]\n-    type PPROCESS_MEMORY_COUNTERS = *mut PROCESS_MEMORY_COUNTERS;\n-    #[link(name = \"psapi\")]\n-    extern \"system\" {\n-        fn GetCurrentProcess() -> HANDLE;\n-        fn GetProcessMemoryInfo(\n-            Process: HANDLE,\n-            ppsmemCounters: PPROCESS_MEMORY_COUNTERS,\n-            cb: DWORD,\n-        ) -> BOOL;\n-    }\n-    let mut pmc: PROCESS_MEMORY_COUNTERS = unsafe { std::mem::zeroed() };\n-    pmc.cb = std::mem::size_of_val(&pmc) as DWORD;\n-    match unsafe { GetProcessMemoryInfo(GetCurrentProcess(), &mut pmc, pmc.cb) } {\n+    use std::mem::{self, MaybeUninit};\n+    use winapi::shared::minwindef::DWORD;\n+    use winapi::um::processthreadsapi::GetCurrentProcess;\n+    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+    match unsafe {\n+        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+    } {\n         0 => None,\n-        _ => Some(pmc.WorkingSetSize as usize),\n+        _ => {\n+            let pmc = unsafe { pmc.assume_init() };\n+            Some(pmc.WorkingSetSize as usize)\n+        }\n     }\n }"}, {"sha": "b856e5da5a093262125cd339be50409ab79f436c", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -32,5 +32,8 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }\n+\n [features]\n llvm = ['rustc_interface/llvm']"}, {"sha": "019ff431bcb97d2f56ecfc05a6abba63aff89134", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -514,15 +514,10 @@ fn stdout_isatty() -> bool {\n \n #[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type HANDLE = *mut u8;\n-    type LPDWORD = *mut u32;\n-    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n-    extern \"system\" {\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n-    }\n+    use winapi::um::consoleapi::GetConsoleMode;\n+    use winapi::um::processenv::GetStdHandle;\n+    use winapi::um::winbase::STD_OUTPUT_HANDLE;\n+\n     unsafe {\n         let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n         let mut out = 0;\n@@ -1214,11 +1209,8 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     #[cfg(windows)]\n     unsafe {\n         if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n-            extern \"system\" {\n-                fn DebugBreak();\n-            }\n             // Trigger a debugger if we crashed during bootstrap\n-            DebugBreak();\n+            winapi::um::debugapi::DebugBreak();\n         }\n     }\n }"}, {"sha": "9678cd173b7cac28f51164f0317689a46cccc356", "filename": "src/librustc_error_codes/error_codes/E0170.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_error_codes%2Ferror_codes%2FE0170.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_error_codes%2Ferror_codes%2FE0170.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0170.md?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,3 +1,24 @@\n+A pattern binding is using the same name as one of the variants of a type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0170\n+# #![deny(warnings)]\n+enum Method {\n+    GET,\n+    POST,\n+}\n+\n+fn is_empty(s: Method) -> bool {\n+    match s {\n+        GET => true,\n+        _ => false\n+    }\n+}\n+\n+fn main() {}\n+```\n+\n Enum variants are qualified by default. For example, given this type:\n \n ```"}, {"sha": "01ea80659d6b9d021095e82faa5b6de594bb2fff", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -19,3 +19,6 @@ atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.6.1\"\n term_size = \"0.3.1\"\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"handleapi\", \"synchapi\", \"winbase\"] }"}, {"sha": "a73472021d4127bd246b1543c8d1d9d22eba1dcb", "filename": "src/librustc_errors/lock.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_errors%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_errors%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flock.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -12,31 +12,14 @@\n use std::any::Any;\n \n #[cfg(windows)]\n-#[allow(nonstandard_style)]\n pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use std::ffi::CString;\n     use std::io;\n \n-    type LPSECURITY_ATTRIBUTES = *mut u8;\n-    type BOOL = i32;\n-    type LPCSTR = *const u8;\n-    type HANDLE = *mut u8;\n-    type DWORD = u32;\n-\n-    const INFINITE: DWORD = !0;\n-    const WAIT_OBJECT_0: DWORD = 0;\n-    const WAIT_ABANDONED: DWORD = 0x00000080;\n-\n-    extern \"system\" {\n-        fn CreateMutexA(\n-            lpMutexAttributes: LPSECURITY_ATTRIBUTES,\n-            bInitialOwner: BOOL,\n-            lpName: LPCSTR,\n-        ) -> HANDLE;\n-        fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n-        fn ReleaseMutex(hMutex: HANDLE) -> BOOL;\n-        fn CloseHandle(hObject: HANDLE) -> BOOL;\n-    }\n+    use winapi::shared::ntdef::HANDLE;\n+    use winapi::um::handleapi::CloseHandle;\n+    use winapi::um::synchapi::{CreateMutexA, ReleaseMutex, WaitForSingleObject};\n+    use winapi::um::winbase::{INFINITE, WAIT_ABANDONED, WAIT_OBJECT_0};\n \n     struct Handle(HANDLE);\n \n@@ -65,7 +48,7 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n         //\n         // This will silently create one if it doesn't already exist, or it'll\n         // open up a handle to one if it already exists.\n-        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr() as *const u8);\n+        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr());\n         if mutex.is_null() {\n             panic!(\n                 \"failed to create global mutex named `{}`: {}\","}, {"sha": "7baae90beabb5a50d5e97786abe2323d8fbc2d28", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -43,6 +43,9 @@ rustc_resolve = { path = \"../librustc_resolve\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"libloaderapi\"] }\n+\n [dev-dependencies]\n rustc_target = { path = \"../librustc_target\" }\n "}, {"sha": "21f9fa48165918f254e716ce59519bda17e4fa01", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -340,19 +340,17 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     fn current_dll_path() -> Option<PathBuf> {\n         use std::ffi::OsString;\n         use std::os::windows::prelude::*;\n+        use std::ptr;\n \n-        extern \"system\" {\n-            fn GetModuleHandleExW(dwFlags: u32, lpModuleName: usize, phModule: *mut usize) -> i32;\n-            fn GetModuleFileNameW(hModule: usize, lpFilename: *mut u16, nSize: u32) -> u32;\n-        }\n-\n-        const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS: u32 = 0x00000004;\n+        use winapi::um::libloaderapi::{\n+            GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+        };\n \n         unsafe {\n-            let mut module = 0;\n+            let mut module = ptr::null_mut();\n             let r = GetModuleHandleExW(\n                 GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n-                current_dll_path as usize,\n+                current_dll_path as usize as *mut _,\n                 &mut module,\n             );\n             if r == 0 {"}, {"sha": "405ce0307cd822f7fff95ddab38f192f12c8eff2", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -215,12 +215,14 @@ fn main() {\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(llvm_link_arg).arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n-        if lib.starts_with(\"-LIBPATH:\") {\n-            println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n-        } else if is_crossed {\n-            if lib.starts_with(\"-L\") {\n+        if is_crossed {\n+            if lib.starts_with(\"-LIBPATH:\") {\n+                println!(\"cargo:rustc-link-search=native={}\", lib[9..].replace(&host, &target));\n+            } else if lib.starts_with(\"-L\") {\n                 println!(\"cargo:rustc-link-search=native={}\", lib[2..].replace(&host, &target));\n             }\n+        } else if lib.starts_with(\"-LIBPATH:\") {\n+            println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n         } else if lib.starts_with(\"-l\") {\n             println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n         } else if lib.starts_with(\"-L\") {"}, {"sha": "0a0bcb190bea720b1b90c7746d371915ce3f4967", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -27,3 +27,6 @@ rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"errhandlingapi\", \"libloaderapi\"] }"}, {"sha": "f04d0239d49237f04810d567b5c262cc405e6a10", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -111,9 +111,9 @@ mod dl {\n     ) -> Result<*mut u8, String> {\n         check_for_errors_in(|| libc::dlsym(handle as *mut libc::c_void, symbol) as *mut u8)\n     }\n+\n     pub(super) unsafe fn close(handle: *mut u8) {\n         libc::dlclose(handle as *mut libc::c_void);\n-        ()\n     }\n }\n \n@@ -124,27 +124,15 @@ mod dl {\n     use std::os::windows::prelude::*;\n     use std::ptr;\n \n-    use libc::{c_char, c_uint, c_void};\n-\n-    type DWORD = u32;\n-    type HMODULE = *mut u8;\n-    type BOOL = i32;\n-    type LPCWSTR = *const u16;\n-    type LPCSTR = *const i8;\n-\n-    extern \"system\" {\n-        fn SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: *mut DWORD) -> c_uint;\n-        fn LoadLibraryW(name: LPCWSTR) -> HMODULE;\n-        fn GetModuleHandleExW(dwFlags: DWORD, name: LPCWSTR, handle: *mut HMODULE) -> BOOL;\n-        fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n-        fn FreeLibrary(handle: HMODULE) -> BOOL;\n-    }\n+    use winapi::shared::minwindef::HMODULE;\n+    use winapi::um::errhandlingapi::SetThreadErrorMode;\n+    use winapi::um::libloaderapi::{FreeLibrary, GetModuleHandleExW, GetProcAddress, LoadLibraryW};\n+    use winapi::um::winbase::SEM_FAILCRITICALERRORS;\n \n     pub(super) fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n         // disable \"dll load failed\" error dialog.\n         let prev_error_mode = unsafe {\n-            // SEM_FAILCRITICALERRORS 0x01\n-            let new_error_mode = 1;\n+            let new_error_mode = SEM_FAILCRITICALERRORS;\n             let mut prev_error_mode = 0;\n             let result = SetThreadErrorMode(new_error_mode, &mut prev_error_mode);\n             if result == 0 {\n@@ -156,12 +144,12 @@ mod dl {\n         let result = match filename {\n             Some(filename) => {\n                 let filename_str: Vec<_> = filename.encode_wide().chain(Some(0)).collect();\n-                let result = unsafe { LoadLibraryW(filename_str.as_ptr()) };\n+                let result = unsafe { LoadLibraryW(filename_str.as_ptr()) } as *mut u8;\n                 ptr_result(result)\n             }\n             None => {\n                 let mut handle = ptr::null_mut();\n-                let succeeded = unsafe { GetModuleHandleExW(0 as DWORD, ptr::null(), &mut handle) };\n+                let succeeded = unsafe { GetModuleHandleExW(0, ptr::null(), &mut handle) };\n                 if succeeded == 0 {\n                     Err(io::Error::last_os_error().to_string())\n                 } else {\n@@ -177,7 +165,10 @@ mod dl {\n         result\n     }\n \n-    pub(super) unsafe fn symbol(handle: *mut u8, symbol: *const c_char) -> Result<*mut u8, String> {\n+    pub(super) unsafe fn symbol(\n+        handle: *mut u8,\n+        symbol: *const libc::c_char,\n+    ) -> Result<*mut u8, String> {\n         let ptr = GetProcAddress(handle as HMODULE, symbol) as *mut u8;\n         ptr_result(ptr)\n     }"}, {"sha": "6934ec0bdb6aa56aad958961a8fbf5fc9552e0ac", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -587,12 +587,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // padding.\n                     match tys.kind {\n                         ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n-                        ty::Tuple(tys) if tys.len() == 0 => true,\n-                        ty::Adt(adt_def, _)\n-                            if adt_def.is_struct() && adt_def.all_fields().next().is_none() =>\n-                        {\n-                            true\n-                        }\n                         _ => false,\n                     }\n                 } =>\n@@ -609,11 +603,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 }\n                 // This is the element type size.\n                 let layout = self.ecx.layout_of(tys)?;\n-                // Empty tuples and fieldless structs (the only ZSTs that allow reaching this code)\n-                // have no data to be checked.\n-                if layout.is_zst() {\n-                    return Ok(());\n-                }\n                 // This is the size in bytes of the whole array.\n                 let size = layout.size * len;\n                 // Size is not 0, get a pointer.\n@@ -656,6 +645,13 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     }\n                 }\n             }\n+            // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element\n+            // of an array and not all of them, because there's only a single value of a specific\n+            // ZST type, so either validation fails for all elements or none.\n+            ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {\n+                // Validate just the first element\n+                self.walk_aggregate(op, fields.take(1))?\n+            }\n             _ => {\n                 self.walk_aggregate(op, fields)? // default handler\n             }"}, {"sha": "90c97480c756221ebd7164a1696fde8f3d428c81", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -14,6 +14,7 @@ use rustc::mir::{\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n+use rustc::traits::TraitQueryMode;\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n };\n@@ -74,6 +75,46 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n+        // Check if it's even possible to satisfy the 'where' clauses\n+        // for this item.\n+        // This branch will never be taken for any normal function.\n+        // However, it's possible to `#!feature(trivial_bounds)]` to write\n+        // a function with impossible to satisfy clauses, e.g.:\n+        // `fn foo() where String: Copy {}`\n+        //\n+        // We don't usually need to worry about this kind of case,\n+        // since we would get a compilation error if the user tried\n+        // to call it. However, since we can do const propagation\n+        // even without any calls to the function, we need to make\n+        // sure that it even makes sense to try to evaluate the body.\n+        // If there are unsatisfiable where clauses, then all bets are\n+        // off, and we just give up.\n+        //\n+        // Note that we use TraitQueryMode::Canonical here, which causes\n+        // us to treat overflow like any other error. This is because we\n+        // are \"speculatively\" evaluating this item with the default substs.\n+        // While this usually succeeds, it may fail with tricky impls\n+        // (e.g. the typenum crate). Const-propagation is fundamentally\n+        // \"best-effort\", and does not affect correctness in any way.\n+        // Therefore, it's perfectly fine to just \"give up\" if we're\n+        // unable to check the bounds with the default substs.\n+        //\n+        // False negatives (failing to run const-prop on something when we actually\n+        // could) are fine. However, false positives (running const-prop on\n+        // an item with unsatisfiable bounds) can lead to us generating invalid\n+        // MIR.\n+        if !tcx.substitute_normalize_and_test_predicates((\n+            source.def_id(),\n+            InternalSubsts::identity_for_item(tcx, source.def_id()),\n+            TraitQueryMode::Canonical,\n+        )) {\n+            trace!(\n+                \"ConstProp skipped for item with unsatisfiable predicates: {:?}\",\n+                source.def_id()\n+            );\n+            return;\n+        }\n+\n         trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n         let dummy_body = &Body::new("}, {"sha": "70a5b10e9be99543db11ad8a509af3217bdac4f3", "filename": "src/test/ui/consts/huge-values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,11 +1,17 @@\n // build-pass\n // ignore-32bit\n \n+// This test is a canary test that will essentially not compile in a reasonable time frame\n+// (so it'll take hours) if any of the optimizations regress. With the optimizations, these compile\n+// in milliseconds just as if the length were set to `1`.\n+\n #[derive(Clone, Copy)]\n struct Foo;\n \n fn main() {\n     let _ = [(); 4_000_000_000];\n     let _ = [0u8; 4_000_000_000];\n     let _ = [Foo; 4_000_000_000];\n+    let _ = [(Foo, (), Foo, ((), Foo, [0; 0])); 4_000_000_000];\n+    let _ = [[0; 0]; 4_000_000_000];\n }"}, {"sha": "ad52608b3f46d27de9715ebeb5dc44f378f3d4cc", "filename": "src/test/ui/consts/issue-67696-const-prop-ice.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fissue-67696-const-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fissue-67696-const-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-67696-const-prop-ice.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// compile-flags: --emit=mir,link\n+// Checks that we don't ICE due to attempting to run const prop\n+// on a function with unsatisifable 'where' clauses\n+\n+#![allow(unused)]\n+\n+trait A {\n+    fn foo(&self) -> Self where Self: Copy;\n+}\n+\n+impl A for [fn(&())] {\n+    fn foo(&self) -> Self where Self: Copy { *(&[] as &[_]) }\n+}\n+\n+impl A for i32 {\n+    fn foo(&self) -> Self { 3 }\n+}\n+\n+fn main() {}"}, {"sha": "c7144f05ec7a4ad264caf48af23621c0c4156c7e", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,5 +1,9 @@\n #![feature(const_raw_ptr_deref, never_type)]\n \n-const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!; 0] = unsafe { &*(1_usize as *const [!; 0]) }; // ok\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 0]) }; // ok\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) }; //~ ERROR undefined behavior\n \n fn main() {}"}, {"sha": "cb995b8216f4ec154662d90a6241c0b7edbd7443", "filename": "src/test/ui/consts/validate_never_arrays.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,11 +1,27 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:3:1\n    |\n-LL | const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n+LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_never_arrays.rs:6:1\n+   |\n+LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_never_arrays.rs:7:1\n+   |\n+LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "69eee66e64d89a1ed04b91cdf2a55b0bb3108bb8", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-associated-functions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-associated-functions.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -1,4 +1,8 @@\n-// run-pass\n+// check-pass\n+// compile-flags: --emit=mir,link\n+// Force mir to be emitted, to ensure that const\n+// propagation doesn't ICE on a function\n+// with an 'impossible' body. See issue #67696\n // Inconsistent bounds with trait implementations\n \n #![feature(trivial_bounds)]"}, {"sha": "3a114a0b71517de80c20bcb2b7133e0e4167dbaf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0bb91bcba33a70fae4b0c663fb4403ed78f071/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6d0bb91bcba33a70fae4b0c663fb4403ed78f071", "patch": "@@ -42,10 +42,8 @@ mod tests;\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n-    const SEM_NOGPFAULTERRORBOX: u32 = 0x0002;\n-    extern \"system\" {\n-        fn SetErrorMode(mode: u32) -> u32;\n-    }\n+    use winapi::um::errhandlingapi::SetErrorMode;\n+    use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n \n     lazy_static! {\n         static ref LOCK: Mutex<()> = { Mutex::new(()) };"}]}