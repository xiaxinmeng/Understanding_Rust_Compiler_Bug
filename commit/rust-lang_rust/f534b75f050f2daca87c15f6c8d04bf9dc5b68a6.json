{"sha": "f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzRiNzVmMDUwZjJkYWNhODdjMTVmNmM4ZDA0YmY5ZGM1YjY4YTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T20:44:21Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-10T20:58:09Z"}, "message": "Use Vec<u8> for LOCAL_STD{OUT,ERR} instead of dyn Write.\n\nIt was only ever used with Vec<u8> anyway. This simplifies some things.\n\n- It no longer needs to be flushed, because that's a no-op anyway for\n  a Vec<u8>.\n\n- Writing to a Vec<u8> never fails.\n\n- No #[cfg(test)] code is needed anymore to use `realstd` instead of\n  `std`, because Vec comes from alloc, not std (like Write).", "tree": {"sha": "955d68e656130dbaf65cd0ac2f220c9911c2ed0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955d68e656130dbaf65cd0ac2f220c9911c2ed0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "html_url": "https://github.com/rust-lang/rust/commit/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "html_url": "https://github.com/rust-lang/rust/commit/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050"}], "stats": {"total": 108, "additions": 29, "deletions": 79}, "files": [{"sha": "94a7a5ba79322d5e743ee5f8d6afdecfadacefb7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "patch": "@@ -148,9 +148,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n \n     let main_handler = move || {\n         rustc_span::with_session_globals(edition, || {\n-            if let Some(stderr) = stderr {\n-                io::set_panic(Some(stderr.clone()));\n-            }\n+            io::set_panic(stderr.clone());\n             f()\n         })\n     };\n@@ -188,9 +186,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n             // on the new threads.\n             let main_handler = move |thread: rayon::ThreadBuilder| {\n                 rustc_span::SESSION_GLOBALS.set(session_globals, || {\n-                    if let Some(stderr) = stderr {\n-                        io::set_panic(Some(stderr.clone()));\n-                    }\n+                    io::set_panic(stderr.clone());\n                     thread.run()\n                 })\n             };"}, {"sha": "f6038f4ce11ec037239be961d5f9eaea426955d2", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "patch": "@@ -16,7 +16,7 @@ use crate::sys_common;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n use crate::thread::LocalKey;\n \n-type LocalStream = Arc<Mutex<dyn Write + Send>>;\n+type LocalStream = Arc<Mutex<Vec<u8>>>;\n \n thread_local! {\n     /// Used by the test crate to capture the output of the print! and println! macros.\n@@ -911,13 +911,8 @@ pub fn set_panic(sink: Option<LocalStream>) -> Option<LocalStream> {\n         // LOCAL_STDERR is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n-    let s =\n-        LOCAL_STDERR.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(|s| {\n-            let _ = s.lock().unwrap_or_else(|e| e.into_inner()).flush();\n-            Some(s)\n-        });\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    s\n+    LOCAL_STDERR.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink))\n }\n \n /// Resets the thread-local stdout handle to the specified writer\n@@ -941,13 +936,8 @@ pub fn set_print(sink: Option<LocalStream>) -> Option<LocalStream> {\n         // LOCAL_STDOUT is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n-    let s =\n-        LOCAL_STDOUT.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(|s| {\n-            let _ = s.lock().unwrap_or_else(|e| e.into_inner()).flush();\n-            Some(s)\n-        });\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    s\n+    LOCAL_STDOUT.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink))\n }\n \n pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n@@ -956,9 +946,10 @@ pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n         return (None, None);\n     }\n \n-    LOCAL_STDOUT.with(|stdout| {\n-        LOCAL_STDERR.with(|stderr| (stdout.borrow().clone(), stderr.borrow().clone()))\n-    })\n+    (\n+        LOCAL_STDOUT.with(|s| s.borrow().clone()),\n+        LOCAL_STDERR.with(|s| s.borrow().clone()),\n+    )\n }\n \n /// Write `args` to output stream `local_s` if possible, `global_s`\n@@ -979,28 +970,22 @@ fn print_to<T>(\n ) where\n     T: Write,\n {\n-    let result = LOCAL_STREAMS\n-        .load(Ordering::Relaxed)\n-        .then(|| {\n-            local_s\n-                .try_with(|s| {\n-                    // Note that we completely remove a local sink to write to in case\n-                    // our printing recursively panics/prints, so the recursive\n-                    // panic/print goes to the global sink instead of our local sink.\n-                    let prev = s.borrow_mut().take();\n-                    if let Some(w) = prev {\n-                        let result = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);\n-                        *s.borrow_mut() = Some(w);\n-                        return result;\n-                    }\n-                    global_s().write_fmt(args)\n-                })\n-                .ok()\n-        })\n-        .flatten()\n-        .unwrap_or_else(|| global_s().write_fmt(args));\n-\n-    if let Err(e) = result {\n+    if LOCAL_STREAMS.load(Ordering::Relaxed)\n+        && local_s.try_with(|s| {\n+            // Note that we completely remove a local sink to write to in case\n+            // our printing recursively panics/prints, so the recursive\n+            // panic/print goes to the global sink instead of our local sink.\n+            s.take().map(|w| {\n+                let _ = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);\n+                *s.borrow_mut() = Some(w);\n+            })\n+        }) == Ok(Some(()))\n+    {\n+        // Succesfully wrote to local stream.\n+        return;\n+    }\n+\n+    if let Err(e) = global_s().write_fmt(args) {\n         panic!(\"failed printing to {}: {}\", label, e);\n     }\n }"}, {"sha": "a0c2a27438a920c71d9af7ab07982f76e37fb3a3", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "patch": "@@ -297,6 +297,7 @@\n #![feature(raw)]\n #![feature(raw_ref_macros)]\n #![feature(ready_macro)]\n+#![feature(refcell_take)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n #![feature(shrink_to)]"}, {"sha": "a5d4d72b00dd85846f355ece500dbcb095ddb8b2", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "patch": "@@ -219,28 +219,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     };\n \n     if let Some(local) = set_panic(None) {\n-        let mut stream = local.lock().unwrap_or_else(|e| e.into_inner());\n-\n-        #[cfg(test)]\n-        {\n-            use crate::io;\n-            struct Wrapper<'a>(&'a mut (dyn ::realstd::io::Write + Send));\n-            impl io::Write for Wrapper<'_> {\n-                fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-                    self.0.write(buf).map_err(|_| io::ErrorKind::Other.into())\n-                }\n-                fn flush(&mut self) -> io::Result<()> {\n-                    self.0.flush().map_err(|_| io::ErrorKind::Other.into())\n-                }\n-            }\n-            write(&mut Wrapper(&mut *stream));\n-        }\n-\n-        #[cfg(not(test))]\n-        write(&mut *stream);\n-\n-        drop(stream);\n-\n+        write(&mut *local.lock().unwrap_or_else(|e| e.into_inner()));\n         set_panic(Some(local));\n     } else if let Some(mut out) = panic_output() {\n         write(&mut out);"}, {"sha": "fa740c5baa81653ce6e5448e9da6e9ca5b6fcb39", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "patch": "@@ -5,7 +5,7 @@\n \n use std::fmt;\n use std::fmt::{Display, Formatter};\n-use std::io::{self, set_panic, Write};\n+use std::io::set_panic;\n use std::sync::{Arc, Mutex};\n \n pub struct A;\n@@ -16,19 +16,8 @@ impl Display for A {\n     }\n }\n \n-struct Sink;\n-\n-impl Write for Sink {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        Ok(buf.len())\n-    }\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n fn main() {\n-    set_panic(Some(Arc::new(Mutex::new(Sink))));\n+    set_panic(Some(Arc::new(Mutex::new(Vec::new()))));\n     assert!(std::panic::catch_unwind(|| {\n         eprintln!(\"{}\", A);\n     })"}]}