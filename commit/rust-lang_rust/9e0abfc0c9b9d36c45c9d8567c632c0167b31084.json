{"sha": "9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMGFiZmMwYzliOWQzNmM0NWM5ZDg1NjdjNjMyYzAxNjdiMzEwODQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-22T13:49:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-22T13:49:33Z"}, "message": "Merge #592\n\n592: Allow types to the left of `:` in where predicates r=matklad a=regiontog\n\nAdresses #584 \n\nCo-authored-by: Erlend Tobiassen <erlend.tobiassen@gmail.com>", "tree": {"sha": "dca47e7881e8a19507e6effb7642109b2e0be992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca47e7881e8a19507e6effb7642109b2e0be992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "html_url": "https://github.com/rust-lang/rust/commit/9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e396cb3548c8a36ba505cc08248333c225e56d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e396cb3548c8a36ba505cc08248333c225e56d2a", "html_url": "https://github.com/rust-lang/rust/commit/e396cb3548c8a36ba505cc08248333c225e56d2a"}, {"sha": "84f888e93ddfcaa573f65ddf49180a4665f14b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f888e93ddfcaa573f65ddf49180a4665f14b50", "html_url": "https://github.com/rust-lang/rust/commit/84f888e93ddfcaa573f65ddf49180a4665f14b50"}], "stats": {"total": 128, "additions": 91, "deletions": 37}, "files": [{"sha": "1ec813b3e1953b42e7d670af23e9b548f87ac839", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "patch": "@@ -104,22 +104,36 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n     }\n     let m = p.start();\n     p.bump();\n-    loop {\n-        if !(paths::is_path_start(p)\n-            || p.current() == LIFETIME\n-            || p.current() == FOR_KW\n-            || p.current() == L_ANGLE)\n-        {\n+\n+    while is_where_predicate(p) {\n+        where_predicate(p);\n+\n+        let comma = p.eat(COMMA);\n+\n+        if is_where_clause_end(p) {\n             break;\n         }\n-        where_predicate(p);\n-        if p.current() != L_CURLY && p.current() != SEMI && p.current() != EQ {\n-            p.expect(COMMA);\n+\n+        if !comma {\n+            p.error(\"expected comma\");\n         }\n     }\n+\n     m.complete(p, WHERE_CLAUSE);\n }\n \n+fn is_where_predicate(p: &mut Parser) -> bool {\n+    match p.current() {\n+        LIFETIME => true,\n+        IMPL_KW => false,\n+        token => types::TYPE_FIRST.contains(token),\n+    }\n+}\n+\n+fn is_where_clause_end(p: &mut Parser) -> bool {\n+    p.current() == L_CURLY || p.current() == SEMI || p.current() == EQ\n+}\n+\n fn where_predicate(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n@@ -131,20 +145,17 @@ fn where_predicate(p: &mut Parser) {\n                 p.error(\"expected colon\");\n             }\n         }\n+        IMPL_KW => {\n+            p.error(\"expected lifetime or type\");\n+        }\n         _ => {\n             // test where_pred_for\n             // fn test<F>()\n             // where\n             //    for<'a> F: Fn(&'a str)\n             // { }\n-            if p.at(FOR_KW) {\n-                types::for_binder(p);\n-            }\n-            if paths::is_path_start(p) || p.at(L_ANGLE) {\n-                types::path_type_(p, false);\n-            } else {\n-                p.error(\"expected a type\");\n-            }\n+            types::type_(p);\n+\n             if p.at(COLON) {\n                 bounds(p);\n             } else {"}, {"sha": "8a2a73b9b18af2c22823138d5584f4c4a5864089", "filename": "crates/ra_syntax/tests/data/parser/err/0027_incomplere_where_for.txt", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0027_incomplere_where_for.txt?ref=9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "patch": "@@ -12,14 +12,15 @@ SOURCE_FILE@[0; 30)\n       WHERE_KW@[13; 18)\n       WHITESPACE@[18; 19)\n       WHERE_PRED@[19; 26)\n-        FOR_KW@[19; 22)\n-        TYPE_PARAM_LIST@[22; 26)\n-          L_ANGLE@[22; 23)\n-          LIFETIME_PARAM@[23; 25)\n-            LIFETIME@[23; 25) \"'a\"\n-          R_ANGLE@[25; 26)\n-          err: `expected a type`\n-          err: `expected colon`\n+        FOR_TYPE@[19; 26)\n+          FOR_KW@[19; 22)\n+          TYPE_PARAM_LIST@[22; 26)\n+            L_ANGLE@[22; 23)\n+            LIFETIME_PARAM@[23; 25)\n+              LIFETIME@[23; 25) \"'a\"\n+            R_ANGLE@[25; 26)\n+            err: `expected a path`\n+            err: `expected colon`\n     WHITESPACE@[26; 27)\n     BLOCK@[27; 29)\n       L_CURLY@[27; 28)"}, {"sha": "41420ea921f4f150aac2265839af19d5404638d2", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0003_where_pred_for.txt", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0003_where_pred_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0003_where_pred_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0003_where_pred_for.txt?ref=9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "patch": "@@ -18,18 +18,19 @@ SOURCE_FILE@[0; 49)\n       WHERE_KW@[13; 18)\n       WHITESPACE@[18; 22)\n       WHERE_PRED@[22; 44)\n-        FOR_KW@[22; 25)\n-        TYPE_PARAM_LIST@[25; 29)\n-          L_ANGLE@[25; 26)\n-          LIFETIME_PARAM@[26; 28)\n-            LIFETIME@[26; 28) \"'a\"\n-          R_ANGLE@[28; 29)\n-        WHITESPACE@[29; 30)\n-        PATH_TYPE@[30; 31)\n-          PATH@[30; 31)\n-            PATH_SEGMENT@[30; 31)\n-              NAME_REF@[30; 31)\n-                IDENT@[30; 31) \"F\"\n+        FOR_TYPE@[22; 31)\n+          FOR_KW@[22; 25)\n+          TYPE_PARAM_LIST@[25; 29)\n+            L_ANGLE@[25; 26)\n+            LIFETIME_PARAM@[26; 28)\n+              LIFETIME@[26; 28) \"'a\"\n+            R_ANGLE@[28; 29)\n+          WHITESPACE@[29; 30)\n+          PATH_TYPE@[30; 31)\n+            PATH@[30; 31)\n+              PATH_SEGMENT@[30; 31)\n+                NAME_REF@[30; 31)\n+                  IDENT@[30; 31) \"F\"\n         COLON@[31; 32)\n         WHITESPACE@[32; 33)\n         PATH_TYPE@[33; 44)"}, {"sha": "8bfc341a50a1ee387006c3209e4424cb29039c86", "filename": "crates/ra_syntax/tests/data/parser/ok/0038_where_pred_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.rs?ref=9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "patch": "@@ -0,0 +1 @@\n+fn test() where (u64, u64): Foo {}\n\\ No newline at end of file"}, {"sha": "4842e9b90a14097ce3c2ffba319d5e0e70b87609", "filename": "crates/ra_syntax/tests/data/parser/ok/0038_where_pred_type.txt", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9e0abfc0c9b9d36c45c9d8567c632c0167b31084/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0038_where_pred_type.txt?ref=9e0abfc0c9b9d36c45c9d8567c632c0167b31084", "patch": "@@ -0,0 +1,40 @@\n+SOURCE_FILE@[0; 34)\n+  FN_DEF@[0; 34)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"test\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    WHERE_CLAUSE@[10; 31)\n+      WHERE_KW@[10; 15)\n+      WHITESPACE@[15; 16)\n+      WHERE_PRED@[16; 31)\n+        TUPLE_TYPE@[16; 26)\n+          L_PAREN@[16; 17)\n+          PATH_TYPE@[17; 20)\n+            PATH@[17; 20)\n+              PATH_SEGMENT@[17; 20)\n+                NAME_REF@[17; 20)\n+                  IDENT@[17; 20) \"u64\"\n+          COMMA@[20; 21)\n+          WHITESPACE@[21; 22)\n+          PATH_TYPE@[22; 25)\n+            PATH@[22; 25)\n+              PATH_SEGMENT@[22; 25)\n+                NAME_REF@[22; 25)\n+                  IDENT@[22; 25) \"u64\"\n+          R_PAREN@[25; 26)\n+        COLON@[26; 27)\n+        WHITESPACE@[27; 28)\n+        PATH_TYPE@[28; 31)\n+          PATH@[28; 31)\n+            PATH_SEGMENT@[28; 31)\n+              NAME_REF@[28; 31)\n+                IDENT@[28; 31) \"Foo\"\n+    WHITESPACE@[31; 32)\n+    BLOCK@[32; 34)\n+      L_CURLY@[32; 33)\n+      R_CURLY@[33; 34)"}]}