{"sha": "ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2QzMmNmZTYyNzM1YTE5ZGQ5ZTgxZmUzMGEzYjQ0OGMzOWZlMmY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T02:36:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T02:36:39Z"}, "message": "Remove code related to the dropping of generator arguments", "tree": {"sha": "464cdfb9275985b7f51ab3bee817f1b592a7159b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/464cdfb9275985b7f51ab3bee817f1b592a7159b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f", "html_url": "https://github.com/rust-lang/rust/commit/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d30e7e982bb1f2e60bc8ed449489c021416c845", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d30e7e982bb1f2e60bc8ed449489c021416c845", "html_url": "https://github.com/rust-lang/rust/commit/2d30e7e982bb1f2e60bc8ed449489c021416c845"}], "stats": {"total": 50, "additions": 5, "deletions": 45}, "files": [{"sha": "d2fd0fdc0540d95317f2d07fe358727ebc65ddc9", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ffcd32cfe62735a19dd9e81fe30a3b448c39fe2f", "patch": "@@ -448,16 +448,7 @@ fn generate_drop<'a, 'tcx>(\n }\n \n fn insert_resume_after_return<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        def_id: DefId,\n-                                        mir: &mut Mir<'tcx>) -> Option<BasicBlock> {\n-    let drop_arg = mir.local_decls.raw[2].ty.needs_drop(tcx, tcx.param_env(def_id));\n-\n-    let cleanup = if drop_arg {\n-        Some(BasicBlock::new(mir.basic_blocks().len() + 1))\n-    } else {\n-        None\n-    };\n-\n+                                        mir: &mut Mir<'tcx>) {\n     let assert_block = BasicBlock::new(mir.basic_blocks().len());\n     let term = TerminatorKind::Assert {\n         cond: Operand::Constant(box Constant {\n@@ -470,7 +461,7 @@ fn insert_resume_after_return<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         expected: true,\n         msg: AssertMessage::GeneratorResumedAfterReturn,\n         target: assert_block,\n-        cleanup: cleanup,\n+        cleanup: None,\n     };\n \n     let source_info = SourceInfo {\n@@ -486,44 +477,13 @@ fn insert_resume_after_return<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }),\n         is_cleanup: false,\n     });\n-\n-    if drop_arg {\n-        let resume_block = BasicBlock::new(mir.basic_blocks().len() + 1);\n-\n-        let term = TerminatorKind::Drop {\n-            location: Lvalue::Local(Local::new(2)),\n-            target: resume_block,\n-            unwind: None,\n-        };\n-\n-        mir.basic_blocks_mut().push(BasicBlockData {\n-            statements: Vec::new(),\n-            terminator: Some(Terminator {\n-                source_info,\n-                kind: term,\n-            }),\n-            is_cleanup: true,\n-        });\n-\n-        mir.basic_blocks_mut().push(BasicBlockData {\n-            statements: Vec::new(),\n-            terminator: Some(Terminator {\n-                source_info,\n-                kind: TerminatorKind::Resume,\n-            }),\n-            is_cleanup: true,\n-        });\n-    }\n-\n-    cleanup\n }\n \n fn generate_entry_point<'a, 'tcx>(\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 mut transform: TransformVisitor<'a, 'tcx>,\n                 def_id: DefId,\n                 source: MirSource,\n-                cleanup: Option<BasicBlock>,\n                 mir: &mut Mir<'tcx>) {\n     // Poison the generator when it unwinds\n     for block in mir.basic_blocks_mut() {\n@@ -551,7 +511,7 @@ fn generate_entry_point<'a, 'tcx>(\n         expected: true,\n         msg: AssertMessage::GeneratorResumedAfterPanic,\n         target: transform.return_block,\n-        cleanup: cleanup,\n+        cleanup: None,\n     };\n \n     mir.basic_blocks_mut().push(BasicBlockData {\n@@ -685,7 +645,7 @@ impl MirPass for StateTransform {\n         mir.spread_arg = None;\n         mir.generator_layout = Some(layout);\n \n-        let arg_cleanup = insert_resume_after_return(tcx, def_id, mir);\n+        insert_resume_after_return(tcx, mir);\n \n         let (_return_block, drop_clean) = insert_clean_drop(mir);\n \n@@ -707,6 +667,6 @@ impl MirPass for StateTransform {\n \n         mir.generator_drop = Some(box drop_impl);\n \n-        generate_entry_point(tcx, transform, def_id, source, arg_cleanup, mir);\n+        generate_entry_point(tcx, transform, def_id, source, mir);\n     }\n }"}]}