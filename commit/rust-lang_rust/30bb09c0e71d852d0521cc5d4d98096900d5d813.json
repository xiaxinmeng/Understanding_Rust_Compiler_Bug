{"sha": "30bb09c0e71d852d0521cc5d4d98096900d5d813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmIwOWMwZTcxZDg1MmQwNTIxY2M1ZDRkOTgwOTY5MDBkNWQ4MTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-01T23:55:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T02:47:47Z"}, "message": "test: Remove `fn@`, `fn~`, and `fn&` from the test suite. rs=defun", "tree": {"sha": "54d25d29bcbd2e6f2e16a21e23b79c23db6042b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d25d29bcbd2e6f2e16a21e23b79c23db6042b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bb09c0e71d852d0521cc5d4d98096900d5d813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bb09c0e71d852d0521cc5d4d98096900d5d813", "html_url": "https://github.com/rust-lang/rust/commit/30bb09c0e71d852d0521cc5d4d98096900d5d813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bb09c0e71d852d0521cc5d4d98096900d5d813/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542119f61f376fa71bfc4b34fbb25be604279dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/542119f61f376fa71bfc4b34fbb25be604279dc4", "html_url": "https://github.com/rust-lang/rust/commit/542119f61f376fa71bfc4b34fbb25be604279dc4"}], "stats": {"total": 596, "additions": 306, "deletions": 290}, "files": [{"sha": "b425c595f82eb2e13518c3cfa52fd8cc98ed0881", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -2291,13 +2291,12 @@ be private. But this encapsulation is at the module level, not the\n struct level. Note that fields and methods are _public_ by default.\n \n ~~~\n-mod farm {\n-# use farm;\n+pub mod farm {\n # pub type Chicken = int;\n # type Cow = int;\n # enum Human = int;\n # impl Human { fn rest(&self) { } }\n-# pub fn make_me_a_farm() -> farm::Farm { farm::Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n+# pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n     pub struct Farm {\n         priv chickens: ~[Chicken],\n         priv cows: ~[Cow],"}, {"sha": "a818ff58f9440e1b5d43a8c2e92d011f8be1bd65", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -14,7 +14,7 @@ use core::dvec::DVec;\n \n pub struct Entry<A,B> {key: A, value: B}\n \n-pub struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<Entry<A,B>> }\n+pub struct alist<A,B> { eq_fn: @fn(A,A) -> bool, data: DVec<Entry<A,B>> }\n \n pub fn alist_add<A:Copy,B:Copy>(lst: alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});"}, {"sha": "dd2ffd5002c9416d991a0651c97fc721b14f756d", "filename": "src/test/auxiliary/issue4516_ty_param_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n pub fn to_closure<A:Durable + Copy>(x: A) -> @fn() -> A {\n-    fn@() -> A { copy x }\n+    let result: @fn() -> A = || copy x;\n+    result\n }"}, {"sha": "e026e78ffb81d1e73b8f7ba201be85df8bfc14ab", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,7 +16,7 @@ use std::time::precise_time_s;\n use std::oldmap;\n use std::oldmap::{Map, HashMap};\n \n-use io::{Reader, ReaderUtil};\n+use core::io::{Reader, ReaderUtil};\n \n macro_rules! bench (\n     ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))"}, {"sha": "7f1f4bd1834ea58375af93110156ec861b9dad0d", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,8 +11,8 @@\n // A raw test of vector appending performance.\n \n extern mod std;\n-use dvec::DVec;\n-use io::WriterUtil;\n+use core::dvec::DVec;\n+use core::io::WriterUtil;\n \n fn collect_raw(num: uint) -> ~[uint] {\n     let mut result = ~[];"}, {"sha": "0b172011648ad6ee08a9d1bef17ec2d3aed844db", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -267,7 +267,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         colors = do par::mapi(*color_vec) {\n             let colors = arc::clone(&color);\n             let graph = arc::clone(&graph);\n-            fn~(+i: uint, +c: &color) -> color {\n+            let result: ~fn(+x: uint, +y: &color) -> color = |i, c| {\n                 let colors = arc::get(&colors);\n                 let graph = arc::get(&graph);\n                 match *c {\n@@ -290,20 +290,22 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n                   gray(parent) => { black(parent) }\n                   black(parent) => { black(parent) }\n                 }\n-            }\n+            };\n+            result\n         };\n         assert(colors.len() == old_len);\n     }\n \n     // Convert the results.\n     do par::map(colors) {\n-        fn~(c: &color) -> i64 {\n+        let result: ~fn(c: &color) -> i64 = |c| {\n             match *c {\n                 white => { -1i64 }\n                 black(parent) => { parent }\n                 _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n             }\n-        }\n+        };\n+        result\n     }\n }\n \n@@ -387,14 +389,15 @@ fn validate(edges: ~[(node_id, node_id)],\n \n     let status = do par::alli(tree) {\n         let edges = copy edges;\n-        fn~(+u: uint, v: &i64) -> bool {\n+        let result: ~fn(+x: uint, v: &i64) -> bool = |u, v| {\n             let u = u as node_id;\n             if *v == -1i64 || u == root {\n                 true\n             } else {\n                 edges.contains(&(u, *v)) || edges.contains(&(*v, u))\n             }\n-        }\n+        };\n+        result\n     };\n \n     if !status { return status }"}, {"sha": "fbd80d5813008bbd4a2011e53c35222f38623c20", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -21,10 +21,10 @@\n #[legacy_modes];\n \n extern mod std;\n-use io::Writer;\n-use io::WriterUtil;\n+use core::io::Writer;\n+use core::io::WriterUtil;\n \n-use comm::{Port, Chan, SharedChan};\n+use core::comm::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }"}, {"sha": "2513538374590de37897db4b8ba79a54f49d38b8", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -17,10 +17,10 @@\n #[legacy_modes];\n \n extern mod std;\n-use io::Writer;\n-use io::WriterUtil;\n+use core::io::Writer;\n+use core::io::WriterUtil;\n \n-use comm::{Port, PortSet, Chan, stream};\n+use core::comm::{Port, PortSet, Chan, stream};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }"}, {"sha": "2bc89f64a298c7e9e36c97ee1c5ae562cd701570", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,7 +16,7 @@\n  * http://shootout.alioth.debian.org/\n  */\n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n "}, {"sha": "35c6694ee0c7474053f75137421ae8aa9cc7394d", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -17,9 +17,9 @@ extern mod std;\n use std::oldmap;\n use std::oldmap::HashMap;\n use std::sort;\n-use io::ReaderUtil;\n-use comm::{stream, Port, Chan};\n-use cmp::Ord;\n+use core::io::ReaderUtil;\n+use core::comm::{stream, Port, Chan};\n+use core::cmp::Ord;\n \n // given a map, print a sorted version of it\n fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {"}, {"sha": "146a4b8c86928c594359a04440c10a76e18b996f", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -24,7 +24,7 @@\n //\n //  writes pbm image to output path\n \n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use core::hashmap::linear::LinearMap;\n \n struct cmplx {"}, {"sha": "f4127e6c7726571d10e431636cb062f53fc0c343", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -45,7 +45,7 @@ fn main() {\n     io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n }\n \n-mod NBodySystem {\n+pub mod NBodySystem {\n     use Body;\n \n     pub fn make() -> ~[Body::Props] {\n@@ -162,7 +162,7 @@ mod NBodySystem {\n     }\n }\n \n-mod Body {\n+pub mod Body {\n     use Body;\n \n     pub const PI: float = 3.141592653589793;"}, {"sha": "e0d2fbb0513b4f42cbff3ed4d7663622836b1a16", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -29,7 +29,7 @@ use core::comm::*;\n use core::io::WriterUtil;\n \n use core::result;\n-use result::{Ok, Err};\n+use core::result::{Ok, Err};\n \n fn fib(n: int) -> int {\n     fn pfib(c: Chan<int>, n: int) {"}, {"sha": "d54376a253256a38feb8eaa41997858789195ae0", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n \n extern mod std;\n use std::smallintmap::SmallIntMap;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n     for uint::range(min, max) |i| {"}, {"sha": "dc8136bc122b34238914fdefd97fcbc4b0ff4e81", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,8 @@\n extern mod std;\n \n use std::bitv;\n-use io::{ReaderUtil, WriterUtil};\n+use core::io::{ReaderUtil, WriterUtil};\n+use core::io;\n \n // Computes a single solution to a given 9x9 sudoku\n //"}, {"sha": "05781b20a9b3f61122861543ad55285464998d99", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -46,7 +46,7 @@ type nillist = List<()>;\n struct State {\n     box: @nillist,\n     unique: ~nillist,\n-    fn_box: fn@() -> @nillist,\n+    fn_box: @fn() -> @nillist,\n     tuple: (@nillist, ~nillist),\n     vec: ~[@nillist],\n     res: r\n@@ -78,7 +78,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 box: @Nil,\n                 unique: ~Nil,\n-                fn_box: fn@() -> @nillist { @Nil::<()> },\n+                fn_box: || @Nil::<()>,\n                 tuple: (@Nil, ~Nil),\n                 vec: ~[@Nil],\n                 res: r(@Nil)\n@@ -90,7 +90,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 box: @Cons((), st.box),\n                 unique: ~Cons((), @*st.unique),\n-                fn_box: fn@() -> @nillist { @Cons((), fn_box()) },\n+                fn_box: || @Cons((), fn_box()),\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n                 vec: st.vec + ~[@Cons((), st.vec.last())],"}, {"sha": "40390ceeee499bd19e84cd98d6be43bcafc9b923", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -46,7 +46,7 @@ fn grandchild_group(num_tasks: uint) {\n     // Master grandchild task exits early.\n }\n \n-fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n+fn spawn_supervised_blocking(myname: &str, +f: ~fn()) {\n     let mut res = None;\n     task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n     error!(\"%s group waiting\", myname);"}, {"sha": "2436e4da8df259cabba670937f3e58719b4c4070", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -28,5 +28,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = fn@() { debug!(\"meow\"); }; //~ ERROR attempted to take value of method\n+  nyan.speak = || debug!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "4e8af4f042105db8445aef4d05feb57e04ecce3b", "filename": "src/test/compile-fail/borrowck-addr-of-upvar.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,16 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: @int) -> fn@() -> &static/int {\n-    fn@() -> &static/int {&*x} //~ ERROR illegal borrow\n+fn foo(x: @int) -> @fn() -> &static/int {\n+    let result: @fn() -> &static/int = || &*x;  //~ ERROR illegal borrow\n+    result\n }\n \n-fn bar(x: @int) -> fn@() -> &int {\n-    fn@() -> &int {&*x} //~ ERROR illegal borrow\n+fn bar(x: @int) -> @fn() -> &int {\n+    let result: @fn() -> &int = || &*x; //~ ERROR illegal borrow\n+    result\n }\n \n-fn zed(x: @int) -> fn@() -> int {\n-    fn@() -> int {*&*x}\n+fn zed(x: @int) -> @fn() -> int {\n+    let result: @fn() -> int = || *&*x;\n+    result\n }\n \n fn main() {"}, {"sha": "8dc86c9a1631001c409c070ca119f60cca3e181a", "filename": "src/test/compile-fail/borrowck-call-sendfn.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,7 +10,11 @@\n \n // xfail-test #2978\n \n-fn call(x: @{f: fn~()}) {\n+struct Foo {\n+    f: ~fn()\n+}\n+\n+fn call(x: @Foo) {\n     x.f(); //~ ERROR foo\n     //~^ NOTE bar\n }"}, {"sha": "aca63308d874eaa43bcfe81479e898f260e027bd", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -22,7 +22,7 @@ fn box_imm() {\n \n     let v = ~3;\n     let _w = &v; //~ NOTE loan of immutable local variable granted here\n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         debug!(\"v=%d\", *v);\n         //~^ ERROR by-move capture of immutable local variable prohibited due to outstanding loan\n     });"}, {"sha": "1031183491549683203c363bf5dbd7f0314a22ce", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> bool) -> bool { f(10i) }\n+fn f(f: @fn(int) -> bool) -> bool { f(10i) }\n \n fn main() {\n     assert do f() |i| { i == 10i } == 10i;"}, {"sha": "2a30f9fb96faf157a7ef96b844db9174a7211b6e", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn reproduce<T:Copy>(t: T) -> fn@() -> T {\n-    fn@() -> T { t }\n+fn reproduce<T:Copy>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t;\n+    result\n }\n \n fn main() {\n     // type of x is the variable X,\n     // with the lower bound @mut int\n     let x = @mut 3;\n \n-    // type of r is fn@() -> X\n+    // type of r is @fn() -> X\n     let r = reproduce(x);\n \n     // Requires that X be a subtype of"}, {"sha": "5df2007721defa2d1214e69f1dbba6f62dd30380", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn mk_identity<T:Copy>() -> fn@(T) -> T {\n-    fn@(t: T) -> T { t }\n+fn mk_identity<T:Copy>() -> @fn(T) -> T {\n+    let result: @fn(t: T) -> T = |t| t;\n+    result\n }\n \n fn main() {\n-    // type of r is fn@(X) -> X\n+    // type of r is @fn(X) -> X\n     // for some fresh X\n     let r = mk_identity();\n "}, {"sha": "acc371076e70475fed0a405bdfa19d6aab3214db", "filename": "src/test/compile-fail/issue-1451.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-struct T { f: fn@() };\n-struct S { f: fn@() };\n+struct T { f: @fn() };\n+struct S { f: @fn() };\n \n fn fooS(t: S) {\n }\n@@ -22,11 +22,11 @@ fn bar() {\n }\n \n fn main() {\n-    let x: fn@() = bar;\n+    let x: @fn() = bar;\n     fooS(S {f: x});\n     fooS(S {f: bar});\n \n-    let x: fn@() = bar;\n+    let x: @fn() = bar;\n     fooT(T {f: x});\n     fooT(T {f: bar});\n }"}, {"sha": "af37949573108f3d334870f24d569db808c622d6", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct boxedFn { theFn: fn~() -> uint }\n+struct boxedFn { theFn: ~fn() -> uint }\n \n fn createClosure (closedUint: uint) -> boxedFn {\n-    boxedFn {theFn: fn@ () -> uint { closedUint }} //~ ERROR mismatched types\n+    let result: @fn() -> uint = || closedUint;\n+    boxedFn { theFn: result } //~ ERROR mismatched types\n }\n \n fn main () {"}, {"sha": "40c2772f2347f0ced90dd3e179d1700632fc99a0", "filename": "src/test/compile-fail/issue-2074.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,13 +10,13 @@\n \n // xfail-test\n fn main() {\n-    let one = fn@() -> uint {\n+    let one: @fn() -> uint = || {\n         enum r { a };\n-        return a as uint;\n+        a as uint\n     };\n-    let two = fn@() -> uint {\n+    let two = @fn() -> uint = || {\n         enum r { a };\n-        return a as uint;\n+        a as uint\n     };\n     one(); two();\n }"}, {"sha": "928abae242383600bc937970289bba380192c72c", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n }"}, {"sha": "31ab555b38ab69b0255629d6764e4412b9d79ada", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn copy1<T:Copy>(t: T) -> fn@() -> T {\n-    fn@() -> T { t } //~ ERROR value may contain borrowed pointers\n+fn copy1<T:Copy>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t; //~ ERROR value may contain borrowed pointers\n+    result\n }\n \n-fn copy2<T:Copy + &static>(t: T) -> fn@() -> T {\n-    fn@() -> T { t }\n+fn copy2<T:Copy + &static>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t;\n+    result\n }\n \n fn main() {\n@@ -23,7 +25,10 @@ fn main() {\n     copy2(@3);\n     copy2(@&x); //~ ERROR does not fulfill `&static`\n \n-    copy2(fn@() {});\n-    copy2(fn~() {}); //~ ERROR does not fulfill `Copy`\n-    copy2(fn&() {}); //~ ERROR does not fulfill `&static`\n+    let boxed: @fn() = || {};\n+    copy2(boxed);\n+    let owned: ~fn() = || {};\n+    copy2(owned);    //~ ERROR does not fulfill `Copy`\n+    let borrowed: &fn() = || {};\n+    copy2(borrowed); //~ ERROR does not fulfill `&static`\n }"}, {"sha": "1ed18a0297a9ab04e37319daa57512fc8e37705c", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // error-pattern:assigning to captured outer immutable variable in a stack closure\n-// Make sure that nesting a block within a fn@ doesn't let us\n-// mutate upvars from a fn@.\n-fn f2(x: fn()) { x(); }\n+// Make sure that nesting a block within a @fn doesn't let us\n+// mutate upvars from a @fn.\n+fn f2(x: &fn()) { x(); }\n \n fn main() {\n     let i = 0;\n-    let ctr = fn@ () -> int { f2(|| i = i + 1 ); return i; };\n+    let ctr: @fn() -> int = || { f2(|| i = i + 1 ); i };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "eaa51a8c3dd56e25e9dd3943545cfea3886bf3c6", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern:assigning to captured outer variable in a heap closure\n-// Make sure we can't write to upvars from fn@s\n+// Make sure we can't write to upvars from @fns\n fn main() {\n     let i = 0;\n-    let ctr = fn@ () -> int { i = i + 1; return i; };\n+    let ctr: @fn() -> int = || { i = i + 1; i };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "75815d2643cbbc3563f02c0d4e5ea9c6111a7bee", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: fn()) { f(); }\n+fn force(f: &fn()) { f(); }\n fn main() {\n     let x: int;\n-    force(fn&() {\n+    force(|| {\n         log(debug, x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "1fddea8096607570f5252b1eda7c458b6166a7a9", "filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    let j = fn@() -> int {\n+    let j: @fn() -> int = || {\n         let i: int;\n-        return i; //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     j();\n }"}, {"sha": "13b8fb04a426a75cfc009bdcadfe535b8f2ba4e2", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    let f = fn@() -> int {\n+    let f: @fn() -> int = || {\n         let i: int;\n-        return i; //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     log(error, f());\n }"}, {"sha": "914b7d9d677ad1cdd83d3948e189e9bdd8cc9d77", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let a: ~[int] = ~[];\n-    vec::each(a, fn@(_x: &int) -> bool {\n-        //~^ ERROR not all control paths return a value\n+    vec::each(a, |_| -> bool {\n+        //~^ ERROR mismatched types\n     });\n }"}, {"sha": "9e4d16f96e6c3840612eb0005754ca77e36d912d", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -68,5 +68,5 @@ impl Drop for r {\n \n fn main() {\n     let x = r { x: () };\n-    fn@() { copy x; }; //~ ERROR copying a value of non-copyable type\n+    || { copy x; }; //~ ERROR copying a value of non-copyable type\n }"}, {"sha": "d432c5eac46d477448987ecb49fbebcd4ea2ce0b", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // xfail-test - #2093\n-fn let_in<T>(x: T, f: fn(T)) {}\n+fn let_in<T>(x: T, f: &fn(T)) {}\n \n fn main() {\n-    let_in(3u, fn&(i) { assert i == 3; });\n+    let_in(3u, |i| { assert i == 3; });\n     //~^ ERROR expected `uint` but found `int`\n \n-    let_in(3, fn&(i) { assert i == 3u; });\n+    let_in(3, |i| { assert i == 3u; });\n     //~^ ERROR expected `int` but found `uint`\n }"}, {"sha": "2744afb113d5fc112fd6ede03fc7f1c56905b691", "filename": "src/test/compile-fail/pure-subtyping.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,36 +12,36 @@\n \n fn take<T>(_v: T) {}\n \n-fn assign_to_pure(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<pure fn()>(x);\n-    take::<pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n-    take::<pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n+fn assign_to_pure(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&pure fn()>(x);\n+    take::<&pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n+    take::<&pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n }\n \n-fn assign_to_impure(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<fn()>(x);\n-    take::<fn()>(y);\n-    take::<fn()>(z); //~ ERROR expected impure fn but found unsafe fn\n+fn assign_to_impure(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&fn()>(x);\n+    take::<&fn()>(y);\n+    take::<&fn()>(z); //~ ERROR expected impure fn but found unsafe fn\n }\n \n-fn assign_to_unsafe(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<unsafe fn()>(x);\n-    take::<unsafe fn()>(y);\n-    take::<unsafe fn()>(z);\n+fn assign_to_unsafe(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&unsafe fn()>(x);\n+    take::<&unsafe fn()>(y);\n+    take::<&unsafe fn()>(z);\n }\n \n-fn assign_to_pure2(x: pure fn@(), y: fn@(), z: unsafe fn@()) {\n-    take::<pure fn()>(x);\n-    take::<pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n-    take::<pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n+fn assign_to_pure2(x: @pure fn(), y: @fn(), z: @unsafe fn()) {\n+    take::<&pure fn()>(x);\n+    take::<&pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n+    take::<&pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n \n-    take::<pure fn~()>(x); //~ ERROR expected ~ closure, found @ closure\n-    take::<pure fn~()>(y); //~ ERROR expected ~ closure, found @ closure\n-    take::<pure fn~()>(z); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(x); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(y); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(z); //~ ERROR expected ~ closure, found @ closure\n \n-    take::<unsafe fn~()>(x); //~ ERROR expected ~ closure, found @ closure\n-    take::<unsafe fn~()>(y); //~ ERROR expected ~ closure, found @ closure\n-    take::<unsafe fn~()>(z); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(x); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(y); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(z); //~ ERROR expected ~ closure, found @ closure\n }\n \n fn main() {"}, {"sha": "a4f1825fcaee67eb3dc9cbc5b594f2810bd16e10", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n // we reported errors in this case:\n \n fn not_ok(a: &uint, b: &b/uint) {\n-    let mut g: fn@(x: &uint) = fn@(x: &b/uint) {};\n+    let mut g: @fn(x: &uint) = |x: &b/uint| {};\n     //~^ ERROR mismatched types\n     g(a);\n }"}, {"sha": "936aa79d0328de1b503308c801b84b7e16374436", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -14,7 +14,7 @@\n // the normal case.\n \n struct contravariant {\n-    f: fn@() -> &self/int\n+    f: @fn() -> &self/int\n }\n \n fn to_same_lifetime(bi: contravariant/&r) {"}, {"sha": "27e1452d9572991b4fccea4ab5b205b29c711cef", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n // You can upcast to a *larger region* but not a smaller one.\n \n struct covariant {\n-    f: fn@(x: &self/int) -> int\n+    f: @fn(x: &self/int) -> int\n }\n \n fn to_same_lifetime(bi: covariant/&r) {"}, {"sha": "c84afc6ca64fdf23ccb071770555914223cac437", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: fn@(x: @mut &self/int)\n+    f: @fn(x: @mut &self/int)\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "b958aa70aa4039b5a8687a62c06d13a80cf06fdd", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: fn@() -> @mut &self/int\n+    f: @fn() -> @mut &self/int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "ca105a1dd5e02f067497e1ef554436f6c872a18c", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,15 +13,15 @@ struct direct {\n }\n \n struct indirect1 {\n-    g: fn@(direct)\n+    g: @fn(direct)\n }\n \n struct indirect2 {\n-    g: fn@(direct/&)\n+    g: @fn(direct/&)\n }\n \n struct indirect3 {\n-    g: fn@(direct/&self)\n+    g: @fn(direct/&self)\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types"}, {"sha": "11414a11108473b13636e7d63fe829185e49d725", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n \n // check that the &int here does not cause us to think that `foo`\n // contains region pointers\n-enum foo = fn~(x: &int);\n+enum foo = ~fn(x: &int);\n \n fn take_foo(x: foo/&) {} //~ ERROR no region bound is allowed on `foo`\n "}, {"sha": "b4cbbacea3f09753590b9fb7623a25728d0073a3", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,9 +12,8 @@ fn ignore<T>(_t: T) {}\n \n fn nested() {\n     let y = 3;\n-    ignore(fn&(z: &z/int) -> &z/int {\n-        if false { return &y; } //~ ERROR illegal borrow\n-        return z;\n+    ignore(|z: &z/int| -> &z/int {\n+        if false { &y } else { z } //~ ERROR illegal borrow\n     });\n }\n "}, {"sha": "714b863ca1d32a4b7be1ea220e75e2a32966e6e9", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -14,13 +14,13 @@ fn nested(x: &x/int) {\n     let y = 3;\n     let mut ay = &y; //~ ERROR cannot infer an appropriate lifetime\n \n-    ignore(fn&(z: &z/int) {\n+    ignore(|z: &z/int| {\n         ay = x;\n         ay = &y;  //~ ERROR cannot infer an appropriate lifetime\n         ay = z;\n     });\n \n-    ignore(fn&(z: &z/int) -> &z/int {\n+    ignore(|z: &z/int| -> &z/int {\n         if false { return x; }  //~ ERROR mismatched types\n         if false { return ay; }\n         return z;"}, {"sha": "66f1007afcf97a2b6e07238dddae49b5f49fc419", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,13 +12,12 @@ fn with<T>(t: T, f: fn(T)) { f(t) }\n \n fn nested<'x>(x: &'x int) {  // (1)\n     do with(\n-        fn&(x: &'x int, // Refers to the region `x` at (1)\n-            y: &'y int, // A fresh region `y` (2)\n-            z: fn<'z>(x: &'x int, // Refers to `x` at (1)\n-                      y: &'y int, // Refers to `y` at (2)\n-                      z: &'z int) -> &'z int) // A fresh region `z` (3)\n-            -> &x/int {\n-\n+        |x: &'x int, // Refers to the region `x` at (1)\n+         y: &'y int, // A fresh region `y` (2)\n+         z: &fn<'z>(x: &'x int, // Refers to `x` at (1)\n+                    y: &'y int, // Refers to `y` at (2)\n+                    z: &'z int) -> &'z int| // A fresh region `z` (3)\n+                 -> &x/int {\n             if false { return z(x, y, x); }\n \n             if false { return z(x, y, y); }"}, {"sha": "33bb06e4f264378c0ba137cdd01eb307f4222638", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(f: fn@(uint) -> uint) -> uint {\n+fn test(f: @fn(uint) -> uint) -> uint {\n     return f(22u);\n }\n \n fn main() {\n-    let f = fn~(x: uint) -> uint { return 4u; };\n+    let f: ~fn(x: uint) -> uint = |x| 4u;\n     log(debug, test(f)); //~ ERROR expected @ closure, found ~ closure\n }"}, {"sha": "00e3e612e8f5babf7e5f3adb1c0a2a4c401cd25d", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,4 +12,4 @@\n \n extern mod std;\n \n-fn main() { task::spawn(fn~() -> int { 10 }); }\n+fn main() { task::spawn(|| -> int { 10 }); }"}, {"sha": "67fdfffe1d3b63b744c2d353d32ba5020bb0c5a2", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn blk1(b: fn()) -> fn@() { return fn@() { }; }\n+fn blk1(b: &fn()) -> @fn() { return || { }; }\n fn test1() { (do blk1 { debug!(\"hi\"); })(); }"}, {"sha": "56b7acc7f0f18f7a88448abf522d0533f8de14c9", "filename": "src/test/run-fail/issue-2144.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Fissue-2144.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Fissue-2144.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2144.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n // Don't leak when the landing pads need to request more stack\n // than is allowed during normal execution\n \n-fn useBlock(f: fn~() -> uint) { useBlock(|| 22u ) }\n+fn useBlock(f: ~fn() -> uint) { useBlock(|| 22u ) }\n fn main() {\n     useBlock(|| 22u );\n }"}, {"sha": "326c304ef3b7554021d025e35ea5a1170de0e3a5", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,9 +16,9 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x = @fn~() {\n+    let x: @~fn() = @(|| {\n         log(error, copy y);\n-    };\n+    });\n     failfn();\n     log(error, x);\n }"}, {"sha": "a2227e6c94ac274b8029b261795514a80c25ebe8", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,7 +16,7 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x = @fn@() {\n+    let x: @@fn() = @|| {\n         log(error, copy y);\n     };\n     failfn();"}, {"sha": "b84ae2e94fcea48f2aa8a0b5bf03a35a281ee3f2", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,6 +16,6 @@ fn f(a: @int) {\n \n fn main() {\n     let b = @0;\n-    let g : fn@() = || f(b);\n+    let g: @fn() = || f(b);\n     g();\n }"}, {"sha": "f92f7874fc39914c5170abe1316934edc586c5a9", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -14,12 +14,13 @@ fn main() {\n     let cheese = ~\"roquefort\";\n     let carrots = @~\"crunchy\";\n \n-    fn@(tasties: @~str, macerate: fn(~str)) {\n+    let result: @fn(@~str, &fn(~str)) = (|tasties, macerate| {\n         macerate(copy *tasties);\n-    } (carrots, |food| {\n+    });\n+    result(carrots, |food| {\n         let mush = food + cheese;\n         let cheese = copy cheese;\n-        let f = fn@() {\n+        let f: &fn() = || {\n             let chew = mush + cheese;\n             fail!(~\"so yummy\")\n         };"}, {"sha": "0f19d4ee16b8ad286ac55547e714e21e1c4807a1", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,8 +12,9 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n-    fn@() -> (A, u16) { (a, b) }\n+fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+    let result: @fn() -> (A, u16) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "1de3fde58f29a22914c682247a6cee98a4a3929d", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -23,8 +23,9 @@ fn make_cycle<A:Copy>(a: A) {\n     g.rec = Some(g);\n }\n \n-fn f<A:Owned + Copy,B:Owned + Copy>(a: A, b: B) -> fn@() -> (A, B) {\n-    fn@() -> (A, B) { (a, b) }\n+fn f<A:Owned + Copy,B:Owned + Copy>(a: A, b: B) -> @fn() -> (A, B) {\n+    let result: @fn() -> (A, B) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "1549eb6fbc23407c4403b8c89c48e0049d06cd48", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,19 +10,15 @@\n \n extern mod std;\n \n-fn asSendfn( f : fn~()->uint ) -> uint {\n+fn asSendfn( f : ~fn()->uint ) -> uint {\n    return f();\n }\n \n-fn asLambda( f : fn@()->uint ) -> uint {\n+fn asLambda( f : @fn()->uint ) -> uint {\n    return f();\n }\n \n-fn asBlock( f : fn&()->uint ) -> uint {\n-   return f();\n-}\n-\n-fn asAny( f : fn()->uint ) -> uint {\n+fn asBlock( f : &fn()->uint ) -> uint {\n    return f();\n }\n "}, {"sha": "04adeb9c71b1899eb23c459996ce398eaf1fd3e9", "filename": "src/test/run-pass/block-arg-used-as-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn to_lambda(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n+fn to_lambda(f: @fn(uint) -> uint) -> @fn(uint) -> uint {\n     return f;\n }\n \n pub fn main() {\n-    let x: fn@(uint) -> uint = to_lambda(|x| x * 2u );\n+    let x: @fn(uint) -> uint = to_lambda(|x| x * 2u );\n     let y = to_lambda(x);\n \n     let x_r = x(22u);"}, {"sha": "7089e596619e07d5fd2c20702463ac90e5690309", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,21 +11,21 @@\n pub fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move = fn@() -> uint { ptr::addr_of(&(*x)) as uint };\n+    let lam_move: @fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n \n     let x = ~2;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn@() -> uint = || ptr::addr_of(&(*x)) as uint;\n+    let lam_move: @fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n \n     let x = ~3;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let snd_move = fn~() -> uint { ptr::addr_of(&(*x)) as uint };\n+    let snd_move: ~fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert snd_move() == y;\n \n     let x = ~4;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn~() -> uint = || ptr::addr_of(&(*x)) as uint;\n+    let lam_move: ~fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n }"}, {"sha": "4b2c2d0d3081651fa22a6d9fcb0e6324517a8f3c", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -58,10 +58,8 @@ class cat : noisy, scratchy, bitey {\n   new(in_x : uint, in_y : int, in_name: str)\n     { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n       self.name = in_name; self.scratched = dvec();\n-      let hsher: hashfn<body_part> =\n-        fn@(p: body_part) -> uint { int::hash(p as int) };\n-      let eqer : eqfn<body_part> =\n-        fn@(p: body_part, q: body_part)  -> bool { p == q };\n+      let hsher: hashfn<body_part> = |p| int::hash(p as int);\n+      let eqer : eqfn<body_part> = |p, q| p == q;\n       let t : hashmap<body_part, uint> =\n         hashmap::<body_part, uint>(hsher, eqer);\n       self.bite_counts = t;"}, {"sha": "8c31b39ac28257d4de2d481fa83502f236cfed7c", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,8 +16,9 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n-    fn@() -> (A, u16) { (a, b) }\n+fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+    let result: @fn() -> (A, u16) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "cd148417f4c673c988a3e7070e35d80146ed814a", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z: fn@() }\n+struct foo { z: @fn() }\n \n fn nop() { }\n fn nop_foo(_x : @mut foo) { }\n \n pub fn main() {\n     let w = @mut foo{ z: || nop() };\n-    let x: fn@() = || nop_foo(w);\n+    let x: @fn() = || nop_foo(w);\n     w.z = x;\n }"}, {"sha": "8b613093944c5feff2bd4e98ac1c4303522a976f", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z : fn@() }\n+struct foo { z : @fn() }\n \n fn nop() { }\n fn nop_foo(_y: ~[int], _x : @mut foo) { }\n \n pub fn main() {\n     let w = @mut foo{ z: || nop() };\n-    let x : fn@() = || nop_foo(~[], w);\n+    let x : @fn() = || nop_foo(~[], w);\n     w.z = x;\n }"}, {"sha": "f724a86555c76992106028014dd18b96a1849f95", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z: fn@() }\n+struct foo { z: @fn() }\n \n fn nop() { }\n fn nop_foo(_y: @int, _x: @mut foo) { }\n@@ -17,6 +17,6 @@ fn o() -> @int { @10 }\n \n pub fn main() {\n     let w = @mut foo { z: || nop() };\n-    let x : fn@() = || nop_foo(o(), w);\n+    let x : @fn() = || nop_foo(o(), w);\n     w.z = x;\n }"}, {"sha": "c89d693c816359bb3681e560d9fd388407fb697b", "filename": "src/test/run-pass/do-for-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in for/do exprs\n \n-fn f(f: fn@() -> bool) { }\n+fn f(f: @fn() -> bool) { }\n \n-fn d(f: fn@()) { }\n+fn d(f: @fn()) { }\n \n pub fn main() {\n     for f { }"}, {"sha": "b1113f5ad51f0bd870ad2ca4747e01c9825213a2", "filename": "src/test/run-pass/do-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-stack.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn&(int)) { f(10) }\n+fn f(f: &fn(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert i == 10 }"}, {"sha": "a7a34d06f1e83d9b9927c07332db2c0bb8209490", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int)) { f(10) }\n+fn f(f: @fn(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert i == 10 }"}, {"sha": "d82331c6045294b770bfd46dc39a5f53b6e09c03", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> int) -> int { f(10) }\n+fn f(f: @fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert do f() |i| { i } == 10;"}, {"sha": "09337d892a71f1598fb70726c83bf04eafa2f046", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> int) -> int { f(10) }\n+fn f(f: @fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert do f |i| { i } == 10;"}, {"sha": "88c78e9e99755354940e50bb64b21b19e11e561c", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -15,8 +15,8 @@ extern mod std;\n  *\n  * The hash should concentrate entropy in the lower bits.\n  */\n-type HashFn<K> = pure fn~(K) -> uint;\n-type EqFn<K> = pure fn~(K, K) -> bool;\n+type HashFn<K> = ~pure fn(K) -> uint;\n+type EqFn<K> = ~pure fn(K, K) -> bool;\n \n struct LM { resize_at: uint, size: uint }\n "}, {"sha": "7f477d3f103ad852440255ec3704b1f85ac0a868", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = match true { true => { expected }, _ => fail!() };"}, {"sha": "5612cca639d0f01b75d272a0efde940e43b0990e", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };"}, {"sha": "3c1131455f17ebe21481ba9eaebb5282f6b452cb", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(~T, ~T) -> bool;\n+type compare<T> = @fn(~T, ~T) -> bool;\n \n fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {"}, {"sha": "2d45e6a7a3eecf52107a0bebec462849c8ed1209", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = match true {"}, {"sha": "df7fbb8d5b2c0bdb8513723c8f6db446c2ecdce5", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n   let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };"}, {"sha": "eb82a2a44454e63c436955dadbe62f5d35f15bf8", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n \n \n fn test_fn() {\n-    type t = fn@() -> int;\n+    type t = @fn() -> int;\n     fn ten() -> int { return 10; }\n     let rs: t = { ten };\n     //assert (rs() == 10);"}, {"sha": "737ff99440d52a6f0182ead33a0bc509577d5cf8", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = { expected };"}, {"sha": "eeda810b5c6ca6b52e0c8c2f4221c4e4ee60790d", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "a9074b6f97f38c5174238cd37b5e58942c3b43ad", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(~T, ~T) -> bool;\n+type compare<T> = @fn(~T, ~T) -> bool;\n \n fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { copy expected };"}, {"sha": "6624e6ea0152f3ffc2a68a2ecfe694b47fdc0f1c", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "63187bee76fe7fdc736f744e80d7479d3d6d34ee", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n // xfail-fast\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "fd5e88da730d247eae2016c53ba2ff9b7cc34954", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };"}, {"sha": "08809d03515734ad0427fc7e396edadabf766f04", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "18cc4048242c9214ffbfa4b3c16d6711d4042cd2", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n \n // Tests for if as expressions with dynamic type sizes\n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "e28191ce35ef33e4b1a77a72e7caecd19540cb7c", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,15 +10,15 @@\n \n // xfail-fast\n \n-fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f( |a| fix_help(f, a), x);\n }\n \n-fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n+fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "0c34a94c9821bcb93fdb896d48e8304f48712446", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,15 +10,15 @@\n \n // xfail-fast\n \n-fn fix_help<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f(|a| fix_help(f, a), x);\n }\n \n-fn fix<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n+fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "6facfc92d3e24f7af03dc3d77dc48c5909ce3850", "filename": "src/test/run-pass/fn-assign-managed-to-bare-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn add(n: int) -> fn@(int) -> int {\n-      fn@(m: int) -> int { m + n }\n+fn add(n: int) -> @fn(int) -> int {\n+    let result: @fn(int) -> int = |m| m + n;\n+    result\n }\n \n-pub fn main()\n-{\n+pub fn main() {\n       assert add(3)(4) == 7;\n       let add3 : fn(int)->int = add(3);\n       assert add3(4) == 7;"}, {"sha": "be07da77baa7bbdf061b90398bb0a856e739bcff", "filename": "src/test/run-pass/fn-assign-managed-to-bare-2.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,20 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn add(n: int) -> fn@(int) -> int {\n-    fn@(m: int) -> int { m + n }\n+fn add(n: int) -> @fn(int) -> int {\n+    let result: @fn(int) -> int = |m| m + n;\n+    result\n }\n \n pub fn main()\n {\n     assert add(3)(4) == 7;\n \n-    let add1 : fn@(int)->int = add(1);\n+    let add1 : @fn(int)->int = add(1);\n     assert add1(6) == 7;\n \n-    let add2 : &(fn@(int)->int) = &add(2);\n+    let add2 : &(@fn(int)->int) = &add(2);\n     assert (*add2)(5) == 7;\n \n-    let add3 : fn(int)->int = add(3);\n+    let add3 : &fn(int)->int = add(3);\n     assert add3(4) == 7;\n }"}, {"sha": "853b44ed76cb67d7df58f7924afab8d011eab57f", "filename": "src/test/run-pass/fn-bare-coerce-to-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,7 +10,7 @@\n \n fn bare() {}\n \n-fn likes_shared(f: fn@()) { f() }\n+fn likes_shared(f: @fn()) { f() }\n \n pub fn main() {\n     likes_shared(bare);"}, {"sha": "39e4f52873a395e5c058bea4b06bae8f1ae48466", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct r {\n-    field: fn@()\n+    field: @fn()\n }\n \n pub fn main() {"}, {"sha": "a753005069ff937393b1ef3be806fe2e6d67ddbe", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    // We should be able to type infer inside of fn@s.\n-    let f = fn@() { let i = 10; };\n+    // We should be able to type infer inside of @fns.\n+    let f = || {\n+        let i = 10;\n+    };\n }"}, {"sha": "b51f60f95a8aee9be7d5b2d0c2b4a8b727338356", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: fn@(int) -> int) -> int { let n: int = f(3); return n; }\n+fn ho(f: @fn(int) -> int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "72d4ab7aeabc9218c5c736c712954e4c5b38dd3a", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -29,7 +29,7 @@ mod map_reduce {\n     use std::oldmap::HashMap;\n     use core::comm::*;\n \n-    pub type putter = fn@(~str, ~str);\n+    pub type putter = @fn(~str, ~str);\n \n     pub type mapper = extern fn(~str, putter);\n "}, {"sha": "723cc8ef633e6cbbd9a1c9e1544d4815dd1a14f7", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n // type must be known in this context' if the passing down doesn't\n // happen.)\n \n-fn eat_tup(_r: ~@(int, fn@(Pair) -> int)) {}\n+fn eat_tup(_r: ~@(int, @fn(Pair) -> int)) {}\n fn eat_rec(_r: @~Rec) {}\n \n struct Rec { a: int, b: fn(Pair) -> int }"}, {"sha": "33be716cc5f48bdef192cf3b6355b64a9681e576", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // xfail-test\n-pub fn main() {  let early_error: fn@(str) -> !  = {|msg| fail!() }; }\n+pub fn main() {  let early_error: @fn(str) -> !  = {|msg| fail!() }; }\n "}, {"sha": "67877795cc0d8d7b633b0fd49941a6d13a120fbf", "filename": "src/test/run-pass/issue-1895.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1895.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,8 +10,7 @@\n \n pub fn main() {\n   let x = 1;\n-  let y = fn@() -> int {\n-             x\n-          }();\n+  let y: @fn() -> int = || x;\n+  let z = y();\n }\n "}, {"sha": "e3327283a8162f49f72664a7c5dced8073069328", "filename": "src/test/run-pass/issue-1989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1989.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -17,13 +17,13 @@ enum maybe_pointy {\n \n struct Pointy {\n     a : maybe_pointy,\n-    f : fn@()->(),\n+    f : @fn()->(),\n }\n \n fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy{\n         a : none,\n-        f : fn@()->(){},\n+        f : || {},\n     }\n }\n "}, {"sha": "cd2273ab173fe62b083efccd0a0818ad113f7995", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -18,29 +18,29 @@ trait iterable<A> {\n     fn iter(blk: fn(A));\n }\n \n-impl<A> iterable<A> for fn@(fn(A)) {\n+impl<A> iterable<A> for @fn(&fn(A)) {\n     fn iter(blk: fn(A)) { self(blk); }\n }\n \n-impl iterable<uint> for fn@(fn(uint)) {\n+impl iterable<uint> for @fn(&fn(uint)) {\n     fn iter(blk: fn(&&v: uint)) { self( |i| blk(i) ) }\n }\n \n-fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n+fn filter<A,IA:iterable<A>>(self: IA, prd: @fn(A) -> bool, blk: &fn(A)) {\n     do self.iter |a| {\n         if prd(a) { blk(a) }\n     }\n }\n \n-fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: fn(B, A) -> B) -> B {\n+fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: &fn(B, A) -> B) -> B {\n     let mut b = b0;\n     do self.iter |a| {\n         b = blk(b, a);\n     }\n     b\n }\n \n-fn range(lo: uint, hi: uint, it: fn(uint)) {\n+fn range(lo: uint, hi: uint, it: &fn(uint)) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n@@ -49,8 +49,8 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n }\n \n pub fn main() {\n-    let range: fn@(fn&(uint)) = |a| range(0u, 1000u, a);\n-    let filt: fn@(fn&(v: uint)) = |a| filter(\n+    let range: @fn(&fn(uint)) = |a| range(0u, 1000u, a);\n+    let filt: @fn(&fn(v: uint)) = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "c769c33390fa5a3da7d332c7f7b2542a17b8bf82", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n const generations: uint = 1024+256+128+49;\n \n-fn child_no(x: uint) -> fn~() {\n+fn child_no(x: uint) -> ~fn() {\n      || {\n         if x < generations {\n             task::spawn(child_no(x+1));"}, {"sha": "3842e073faf13e7c4b83b77a8f25a63327a5d564", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,19 +10,19 @@\n \n // xfail-test\n mod a {\n-fn foo(f: fn&()) { f() }\n+fn foo(f: &fn()) { f() }\n fn bar() {}\n pub fn main() { foo(||bar()); }\n }\n \n mod b {\n-fn foo(f: Option<fn&()>) { f.iter(|x|x()) }\n+fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n fn bar() {}\n pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-fn foo(f: Option<fn&()>) { f.iter(|x|x()) }\n+fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n fn bar() {}\n pub fn main() { foo(Some(||bar())); }\n }"}, {"sha": "05869952fb8b55afff1ba9c9a9f14baf7cba6b45", "filename": "src/test/run-pass/issue-2190.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n type t = {\n-    f: fn~()\n+    f: ~fn()\n };\n \n pub fn main() {"}, {"sha": "2eb63102224c9831d10d897c05ee82a0c43df0bc", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct cat {\n-    meow: fn@(),\n+    meow: @fn(),\n }\n \n fn cat() -> cat {\n     cat {\n-        meow: fn@() { error!(\"meow\"); }\n+        meow: || error!(\"meow\")\n     }\n }\n "}, {"sha": "852c6d995c60e587cba32e7158d4a5668f34606e", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Connection = fn@(~[u8]);\n+type Connection = @fn(~[u8]);\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = fn@(_data: ~[u8]) { };\n+    let mock_connection: Connection = |_| {};\n     Some(mock_connection)\n }\n "}, {"sha": "0e4f7d9749dd6d4c874545f713e5335fe91ec59a", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n use core::path::{Path};\n \n-type rsrc_loader = fn~ (path: &Path) -> result::Result<~str, ~str>;\n+type rsrc_loader = ~fn(path: &Path) -> result::Result<~str, ~str>;\n \n #[test]\n fn tester()"}, {"sha": "d0afd0107ee3e3239a0a7a8a6fcabe7ac6202872", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -3,7 +3,7 @@ extern mod std;\n use core::comm::Chan;\n \n type RingBuffer = ~[float];\n-type SamplesFn = fn~ (samples: &RingBuffer);\n+type SamplesFn = ~fn(samples: &RingBuffer);\n \n enum Msg\n {"}, {"sha": "a1f57b380c17dc0d7da2cd7b233067f7107ee7be", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // This should typecheck even though the type of e is not fully\n-// resolved when we finish typechecking the fn@.\n+// resolved when we finish typechecking the @fn.\n \n \n struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let f = fn@ () { log(error, e.n); };\n+    let f: @fn() = || log(error, e.n);\n     e.refs += ~[1];\n }"}, {"sha": "2dc7079af53279e1c15d9a830d85b50f9e1af935", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure we don't leak fn@s in silly ways.\n-fn force(f: fn@()) { f() }\n+// Make sure we don't leak @fns in silly ways.\n+fn force(f: @fn()) { f() }\n pub fn main() {\n     let x = 7;\n-    let _f = fn@() { log(error, x); };\n-    force(fn@() { log(error, x); });\n+    let _f: @fn() = || log(error, x);\n+    force(|| log(error, x));\n }"}, {"sha": "b5fb43680984705479e87ad728a8db2f588a7ac9", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -12,10 +12,11 @@\n \n struct A { a: ~int }\n \n-fn foo() -> fn@() -> int {\n+fn foo() -> @fn() -> int {\n     let k = ~22;\n     let _u = A {a: copy k};\n-    return fn@() -> int { 22 };\n+    let result: @fn() -> int = || 22;\n+    result\n }\n \n pub fn main() {"}, {"sha": "0535e63fcb494e5dacaf9a37dfae2c2b3955cc29", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n struct A { a: ~int }\n \n pub fn main() {\n-    fn invoke(f: fn@()) { f(); }\n+    fn invoke(f: @fn()) { f(); }\n     let k = ~22;\n     let _u = A {a: copy k};\n     invoke(|| log(error, copy k) )"}, {"sha": "ee9af0d9d6c13090306563e4b59cca9b2ccff7bf", "filename": "src/test/run-pass/monomorphize-trait-in-fn-at.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // test that invoking functions which require\n-// dictionaries from inside an fn@ works\n+// dictionaries from inside an @fn works\n // (at one point, it didn't)\n \n fn mk_nil<C:ty_ops>(cx: C) -> uint {\n@@ -25,8 +25,6 @@ impl ty_ops for () {\n }\n \n pub fn main() {\n-    let fn_env = fn@() -> uint {\n-        mk_nil(())\n-    };\n+    let fn_env: @fn() -> uint = || mk_nil(());\n     assert fn_env() == 22u;\n }"}, {"sha": "48f4a75ed4e4c1f7800788f9a3366581d9572b70", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(-thing: fn@()) { }\n+fn f2(-thing: @fn()) { }\n \n-fn f(-thing: fn@()) {\n+fn f(-thing: @fn()) {\n     f2(thing);\n }\n \n pub fn main() {\n-    f(fn@() {});\n+    f(|| {});\n }"}, {"sha": "10ac45922aa6cbd7b150f42f0d45151e5c6e567a", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,9 +11,9 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> fn@() { return || (); }\n+fn shared() -> @fn() { return || (); }\n \n-fn unique() -> fn~() { return || (); }\n+fn unique() -> ~fn() { return || (); }\n \n pub fn main() {\n }"}, {"sha": "4b580e7fa797aaac35c75b349b9b6bce10f60e34", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test fn~ is not inferred\n+// xfail-test ~fn is not inferred\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> fn@() { || () }\n+fn shared() -> @fn() { || () }\n \n-fn unique() -> fn~() { || () }\n+fn unique() -> ~fn() { || () }\n \n pub fn main() {\n }"}, {"sha": "21a3e35068916e42581422454f87673947fa39df", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,11 +10,11 @@\n \n // Tests for the new |args| expr lambda syntax\n \n-fn f(i: int, f: fn(int) -> int) -> int { f(i) }\n+fn f(i: int, f: &fn(int) -> int) -> int { f(i) }\n \n fn g(g: fn()) { }\n \n-fn ff() -> fn@(int) -> int {\n+fn ff() -> @fn(int) -> int {\n     return |x| x + 1;\n }\n \n@@ -23,7 +23,7 @@ pub fn main() {\n     g(||());\n     assert do f(10) |a| { a } == 10;\n     do g() { }\n-    let _x: fn@() -> int = || 10;\n-    let _y: fn@(int) -> int = |a| a;\n+    let _x: @fn() -> int = || 10;\n+    let _y: @fn(int) -> int = |a| a;\n     assert ff()(10) == 11;\n }"}, {"sha": "8c3423bf8444135fbddb3f0501c6546da3dc5ca9", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -66,5 +66,6 @@ pub fn main() {\n     assert q.y == !(p.y);\n \n     // Issue #1733\n-    fn~(_x: int){}(p[true]);\n+    let result: ~fn(int) = |_|();\n+    result(p[true]);\n }"}, {"sha": "852c580667ad7651b3a6fc257c806b77bf86432c", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -463,9 +463,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_closure_ptr(&self, ck: uint) -> bool {\n-        self.align_to::<fn@()>();\n+        self.align_to::<@fn()>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }\n-        self.bump_past::<fn@()>();\n+        self.bump_past::<@fn()>();\n         true\n     }\n }"}, {"sha": "e78a6e69bddb30f94f66966f43d47103cc942339", "filename": "src/test/run-pass/regions-equiv-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -13,7 +13,7 @@\n \n fn ok(a: &uint) {\n     // Here &r is an alias for &:\n-    let mut g: fn@(x: &uint) = fn@(x: &r/uint) {};\n+    let mut g: @fn(x: &uint) = |x: &r/uint| {};\n     g(a);\n }\n "}, {"sha": "b28d8534fecabc0865dd1895537aa25b86c57eca", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -11,21 +11,21 @@\n // Issue #2263.\n \n // Should pass region checking.\n-fn ok(f: fn@(x: &uint)) {\n+fn ok(f: @fn(x: &uint)) {\n     // Here, g is a function that can accept a uint pointer with\n     // lifetime r, and f is a function that can accept a uint pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: fn@(y: &r/uint) = fn@(x: &r/uint) { };\n+    let mut g: @fn(y: &r/uint) = |x: &r/uint| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: fn@(x: &uint)) {\n-    let mut g = fn@(x: &r/uint) { };\n+fn ok_inferred(f: @fn(x: &uint)) {\n+    let mut g: @fn(x: &r/uint) = |_| {};\n     g = f;\n }\n "}, {"sha": "ce4e6218d0bfb2eb041b547fe5d5ff826bbe7467", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n         error!(\"new_sched_id %?\", new_sched_id);\n         let new_task_id = rustrt::rust_new_task_in_sched(new_sched_id);\n         assert !new_task_id.is_null();\n-        let f = fn~() {\n+        let f: ~fn() = || {\n             unsafe {\n                 let child_sched_id = rustrt::rust_get_sched_id();\n                 error!(\"child_sched_id %?\", child_sched_id);"}, {"sha": "c0af726dd8d641353caab9d14080963f51684245", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -31,10 +31,8 @@ fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n }\n \n fn spawn<A:Copy,B:Copy>(f: extern fn(&~fn(A,B)->Pair<A,B>)) {\n-    let arg = fn~(a: A, b: B) -> Pair<A,B> {\n-        return make_generic_record(a, b);\n-    };\n-    task::spawn(|| f(&arg) );\n+    let arg: ~fn(A, B) -> Pair<A,B> = |a, b| make_generic_record(a, b);\n+    task::spawn(|| f(&arg));\n }\n \n fn test05() {"}, {"sha": "92e709a373870137a03261cdccbef974586484f1", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -15,6 +15,6 @@ fn test(f: fn(uint) -> uint) -> uint {\n }\n \n pub fn main() {\n-    let y = test(fn~(x: uint) -> uint { return 4u * x; });\n+    let y = test(|x| 4u * x);\n     assert y == 88u;\n }"}, {"sha": "9b71f678122cd70dad64d236e0abfe3a0c119c3b", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,17 +10,17 @@\n \n pub fn main() { test05(); }\n \n-fn test05_start(&&f: fn~(int)) {\n+fn test05_start(&&f: ~fn(int)) {\n     f(22);\n }\n \n fn test05() {\n     let three = ~3;\n-    let fn_to_send = fn~(n: int) {\n+    let fn_to_send: ~fn(int) = |n| {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         test05_start(fn_to_send);\n     });\n }"}, {"sha": "48a2b30209825898918c21d33b7b06731d194bfe", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -39,7 +39,7 @@ fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n     }\n }\n \n-fn joinable(f: fn~()) -> Port<bool> {\n+fn joinable(f: ~fn()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\","}, {"sha": "cbfff832736ece307bd9f1d293bf08d0d548bf2b", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = ~1;\n     let x_in_parent = ptr::addr_of(&(*x)) as uint;\n \n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         let x_in_child = ptr::addr_of(&(*x)) as uint;\n         ch.send(x_in_child);\n     });"}, {"sha": "3a23a8246a5619aaa287c8b93584985f0f6a0f0e", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -15,11 +15,12 @@ enum maybe_pointy {\n \n struct Pointy {\n     a : maybe_pointy,\n-    d : fn~() -> uint,\n+    d : ~fn() -> uint,\n }\n \n-fn make_uniq_closure<A:Owned + Copy>(a: A) -> fn~() -> uint {\n-    fn~() -> uint { ptr::addr_of(&a) as uint }\n+fn make_uniq_closure<A:Owned + Copy>(a: A) -> ~fn() -> uint {\n+    let result: ~fn() -> uint = || ptr::addr_of(&a) as uint;\n+    result\n }\n \n fn empty_pointy() -> @mut Pointy {"}, {"sha": "b54daa477ecbe4b12bac24761eb0dbc77a93f199", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -16,14 +16,14 @@ enum maybe_pointy {\n struct Pointy {\n     a : maybe_pointy,\n     c : ~int,\n-    d : fn~()->(),\n+    d : ~fn()->(),\n }\n \n fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy {\n         a : none,\n         c : ~22,\n-        d : fn~()->(){},\n+        d : || {},\n     }\n }\n "}, {"sha": "62023fdae53b5481fa7bd27270e700b60af73f63", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb09c0e71d852d0521cc5d4d98096900d5d813/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=30bb09c0e71d852d0521cc5d4d98096900d5d813", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let x = ~1;\n-    let lam_move = fn@() { };\n+    let lam_move: @fn() = || {};\n     lam_move();\n }"}]}