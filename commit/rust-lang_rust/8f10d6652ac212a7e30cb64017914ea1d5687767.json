{"sha": "8f10d6652ac212a7e30cb64017914ea1d5687767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTBkNjY1MmFjMjEyYTdlMzBjYjY0MDE3OTE0ZWExZDU2ODc3Njc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T17:15:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T21:07:56Z"}, "message": "Rollup merge of #37089 - GuillaumeGomez:io_urls, r=frewsxcv\n\nAdd missing urls in io module\n\nr? @steveklabnik", "tree": {"sha": "fc75a2a97d671aacbe556e126727009a84b90d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc75a2a97d671aacbe556e126727009a84b90d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f10d6652ac212a7e30cb64017914ea1d5687767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f10d6652ac212a7e30cb64017914ea1d5687767", "html_url": "https://github.com/rust-lang/rust/commit/8f10d6652ac212a7e30cb64017914ea1d5687767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f10d6652ac212a7e30cb64017914ea1d5687767/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20991829e2639d1786acbd52621b220c89f0d9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/20991829e2639d1786acbd52621b220c89f0d9cb", "html_url": "https://github.com/rust-lang/rust/commit/20991829e2639d1786acbd52621b220c89f0d9cb"}, {"sha": "b5bedfcd3ff5821d12fac009c75a4cf6844531a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bedfcd3ff5821d12fac009c75a4cf6844531a1", "html_url": "https://github.com/rust-lang/rust/commit/b5bedfcd3ff5821d12fac009c75a4cf6844531a1"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "14d046ab0520b4cf5b66282fa128fd1434a8f176", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8f10d6652ac212a7e30cb64017914ea1d5687767/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f10d6652ac212a7e30cb64017914ea1d5687767/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8f10d6652ac212a7e30cb64017914ea1d5687767", "patch": "@@ -12,18 +12,15 @@\n //!\n //! The `std::io` module contains a number of common things you'll need\n //! when doing input and output. The most core part of this module is\n-//! the [`Read`][read] and [`Write`][write] traits, which provide the\n+//! the [`Read`] and [`Write`] traits, which provide the\n //! most general interface for reading and writing input and output.\n //!\n-//! [read]: trait.Read.html\n-//! [write]: trait.Write.html\n-//!\n //! # Read and Write\n //!\n-//! Because they are traits, `Read` and `Write` are implemented by a number\n+//! Because they are traits, [`Read`] and [`Write`] are implemented by a number\n //! of other types, and you can implement them for your types too. As such,\n //! you'll see a few different types of I/O throughout the documentation in\n-//! this module: `File`s, `TcpStream`s, and sometimes even `Vec<T>`s. For\n+//! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n //! example, `Read` adds a `read()` method, which we can use on `File`s:\n //!\n //! ```\n@@ -43,15 +40,15 @@\n //! # }\n //! ```\n //!\n-//! `Read` and `Write` are so important, implementors of the two traits have a\n+//! [`Read`] and [`Write`] are so important, implementors of the two traits have a\n //! nickname: readers and writers. So you'll sometimes see 'a reader' instead\n-//! of 'a type that implements the `Read` trait'. Much easier!\n+//! of 'a type that implements the [`Read`] trait'. Much easier!\n //!\n //! ## Seek and BufRead\n //!\n-//! Beyond that, there are two important traits that are provided: [`Seek`][seek]\n-//! and [`BufRead`][bufread]. Both of these build on top of a reader to control\n-//! how the reading happens. `Seek` lets you control where the next byte is\n+//! Beyond that, there are two important traits that are provided: [`Seek`]\n+//! and [`BufRead`]. Both of these build on top of a reader to control\n+//! how the reading happens. [`Seek`] lets you control where the next byte is\n //! coming from:\n //!\n //! ```\n@@ -75,21 +72,18 @@\n //! # }\n //! ```\n //!\n-//! [seek]: trait.Seek.html\n-//! [bufread]: trait.BufRead.html\n-//!\n-//! `BufRead` uses an internal buffer to provide a number of other ways to read, but\n+//! [`BufRead`] uses an internal buffer to provide a number of other ways to read, but\n //! to show it off, we'll need to talk about buffers in general. Keep reading!\n //!\n //! ## BufReader and BufWriter\n //!\n //! Byte-based interfaces are unwieldy and can be inefficient, as we'd need to be\n //! making near-constant calls to the operating system. To help with this,\n-//! `std::io` comes with two structs, `BufReader` and `BufWriter`, which wrap\n+//! `std::io` comes with two structs, [`BufReader`] and [`BufWriter`], which wrap\n //! readers and writers. The wrapper uses a buffer, reducing the number of\n //! calls and providing nicer methods for accessing exactly what you want.\n //!\n-//! For example, `BufReader` works with the `BufRead` trait to add extra\n+//! For example, [`BufReader`] works with the [`BufRead`] trait to add extra\n //! methods to any reader:\n //!\n //! ```\n@@ -111,8 +105,8 @@\n //! # }\n //! ```\n //!\n-//! `BufWriter` doesn't add any new ways of writing; it just buffers every call\n-//! to [`write()`][write()]:\n+//! [`BufWriter`] doesn't add any new ways of writing; it just buffers every call\n+//! to [`write()`]:\n //!\n //! ```\n //! use std::io;\n@@ -134,8 +128,6 @@\n //! # }\n //! ```\n //!\n-//! [write()]: trait.Write.html#tymethod.write\n-//!\n //! ## Standard input and output\n //!\n //! A very common source of input is standard input:\n@@ -165,13 +157,13 @@\n //! # }\n //! ```\n //!\n-//! Of course, using `io::stdout()` directly is less common than something like\n-//! `println!`.\n+//! Of course, using [`io::stdout()`] directly is less common than something like\n+//! [`println!`].\n //!\n //! ## Iterator types\n //!\n //! A large number of the structures provided by `std::io` are for various\n-//! ways of iterating over I/O. For example, `Lines` is used to split over\n+//! ways of iterating over I/O. For example, [`Lines`] is used to split over\n //! lines:\n //!\n //! ```\n@@ -211,10 +203,10 @@\n //!\n //! ## io::Result\n //!\n-//! Last, but certainly not least, is [`io::Result`][result]. This type is used\n+//! Last, but certainly not least, is [`io::Result`]. This type is used\n //! as the return type of many `std::io` functions that can cause an error, and\n //! can be returned from your own functions as well. Many of the examples in this\n-//! module use the [`try!`][try] macro:\n+//! module use the [`try!`] macro:\n //!\n //! ```\n //! use std::io;\n@@ -230,14 +222,11 @@\n //! }\n //! ```\n //!\n-//! The return type of `read_input()`, `io::Result<()>`, is a very common type\n-//! for functions which don't have a 'real' return value, but do want to return\n-//! errors if they happen. In this case, the only purpose of this function is\n+//! The return type of `read_input()`, [`io::Result<()>`][`io::Result`], is a very\n+//! common type for functions which don't have a 'real' return value, but do want to\n+//! return errors if they happen. In this case, the only purpose of this function is\n //! to read the line and print it, so we use `()`.\n //!\n-//! [result]: type.Result.html\n-//! [try]: ../macro.try.html\n-//!\n //! ## Platform-specific behavior\n //!\n //! Many I/O functions throughout the standard library are documented to indicate\n@@ -246,6 +235,22 @@\n //! any possibly unclear semantics. Note, however, that this is informative, not a binding\n //! contract. The implementation of many of these functions are subject to change over\n //! time and may call fewer or more syscalls/library functions.\n+//!\n+//! [`Read`]: trait.Read.html\n+//! [`Write`]: trait.Write.html\n+//! [`Seek`]: trait.Seek.html\n+//! [`BufRead`]: trait.BufRead.html\n+//! [`File`]: ../fs/struct.File.html\n+//! [`TcpStream`]: ../net/struct.TcpStream.html\n+//! [`Vec<T>`]: ../vec/struct.Vec.html\n+//! [`BufReader`]: struct.BufReader.html\n+//! [`BufWriter`]: struct.BufWriter.html\n+//! [`write()`]: trait.Write.html#tymethod.write\n+//! [`io::stdout()`]: fn.stdout.html\n+//! [`println!`]: ../macro.println.html\n+//! [`Lines`]: struct.Lines.html\n+//! [`io::Result`]: type.Result.html\n+//! [`try!`]: ../macro.try.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}