{"sha": "64f11b96396ded4388618af95d639ae9be0978e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZjExYjk2Mzk2ZGVkNDM4ODYxOGFmOTVkNjM5YWU5YmUwOTc4ZTk=", "commit": {"author": {"name": "Dmitry Murygin", "email": "murygin.dmitry@huawei.com", "date": "2020-12-04T05:06:53Z"}, "committer": {"name": "Dmitry Murygin", "email": "murygin.dmitry@huawei.com", "date": "2020-12-04T05:25:59Z"}, "message": "Update tests of \"unused_lifetimes\" lint for async functions and corresponding source code", "tree": {"sha": "3546562ee8fc76646c2843f003926420e5cd3f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3546562ee8fc76646c2843f003926420e5cd3f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f11b96396ded4388618af95d639ae9be0978e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f11b96396ded4388618af95d639ae9be0978e9", "html_url": "https://github.com/rust-lang/rust/commit/64f11b96396ded4388618af95d639ae9be0978e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f11b96396ded4388618af95d639ae9be0978e9/comments", "author": null, "committer": null, "parents": [{"sha": "5be3f9f10e9fd59ea03816840a6051413fbdefae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be3f9f10e9fd59ea03816840a6051413fbdefae", "html_url": "https://github.com/rust-lang/rust/commit/5be3f9f10e9fd59ea03816840a6051413fbdefae"}], "stats": {"total": 129, "additions": 65, "deletions": 64}, "files": [{"sha": "521465863864125aa2699ba0ed0259d36f889599", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/64f11b96396ded4388618af95d639ae9be0978e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f11b96396ded4388618af95d639ae9be0978e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=64f11b96396ded4388618af95d639ae9be0978e9", "patch": "@@ -644,17 +644,17 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             } else {\n                                 bug!();\n                             };\n-                            if let hir::ParamName::Plain(param_name) = name {\n-                                if param_name.name == kw::UnderscoreLifetime {\n-                                    // Pick the elided lifetime \"definition\" if one exists\n-                                    // and use it to make an elision scope.\n-                                    self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n-                                    elision = Some(reg);\n-                                } else {\n-                                    lifetimes.insert(name, reg);\n-                                }\n+                            // We cannot predict what lifetimes are unused in opaque type.\n+                            self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n+                            if let hir::ParamName::Plain(Ident {\n+                                name: kw::UnderscoreLifetime,\n+                                ..\n+                            }) = name\n+                            {\n+                                // Pick the elided lifetime \"definition\" if one exists\n+                                // and use it to make an elision scope.\n+                                elision = Some(reg);\n                             } else {\n-                                self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n                                 lifetimes.insert(name, reg);\n                             }\n                         }"}, {"sha": "5bd6ae8d3a42d06814e82f920effcfa0388be58b", "filename": "src/test/ui/async-await/unused-lifetime.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/64f11b96396ded4388618af95d639ae9be0978e9/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f11b96396ded4388618af95d639ae9be0978e9/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs?ref=64f11b96396ded4388618af95d639ae9be0978e9", "patch": "@@ -1,42 +1,47 @@\n-// edition:2018\n+// Check \"unused_lifetimes\" lint on both async and sync functions\n \n-// Avoid spurious warnings of unused lifetime. The below async functions\n-// are desugered to have an unused lifetime\n-// but we don't want to warn about that as there's nothing they can do about it.\n+// edition:2018\n \n #![deny(unused_lifetimes)]\n-#![allow(dead_code)]\n-\n-pub async fn october(s: &str) {\n-    println!(\"{}\", s);\n-}\n-\n-pub async fn async_fn(&mut ref s: &mut[i32]) {\n-    println!(\"{:?}\", s);\n-}\n-\n-macro_rules! foo_macro {\n-    () => {\n-        pub async fn async_fn_in_macro(&mut ref _s: &mut[i32]) {}\n-    };\n-}\n-\n-foo_macro!();\n-\n-pub async fn func_with_unused_lifetime<'a>(s: &'a str) {\n-    //~^ ERROR lifetime parameter `'a` never used\n-    println!(\"{}\", s);\n-}\n-\n-pub async fn func_with_two_unused_lifetime<'a, 'b>(s: &'a str, t: &'b str) {\n-    //~^ ERROR lifetime parameter `'a` never used\n-    //~^^ ERROR lifetime parameter `'b` never used\n-    println!(\"{}\", s);\n-}\n-\n-pub async fn func_with_unused_lifetime_in_two_params<'c>(s: &'c str, t: &'c str) {\n-    //~^ ERROR lifetime parameter `'c` never used\n-    println!(\"{}\", s);\n-}\n+\n+\n+// Async part with unused lifetimes\n+//\n+// Even wrong cases don't cause errors because async functions are desugared with all lifetimes\n+// involved in the signature. So, we cannot predict what lifetimes are unused in async function.\n+async fn async_wrong_without_args<'a>() {}\n+\n+async fn async_wrong_1_lifetime<'a>(_: &i32) {}\n+\n+async fn async_wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n+\n+async fn async_right_1_lifetime<'a>(_: &'a i32) {}\n+\n+async fn async_right_2_lifetimes<'a, 'b>(_: &'a i32, _: &'b i32) {}\n+\n+async fn async_right_trait_bound_lifetime<'a, I>(_: I)\n+where\n+    I: Iterator<Item = &'a i32>\n+{}\n+\n+\n+// Sync part with unused lifetimes\n+//\n+// These functions are compiled as supposed\n+fn wrong_without_args<'a>() {} //~ ERROR lifetime parameter `'a` never used\n+\n+fn wrong_1_lifetime<'a>(_: &i32) {} //~ ERROR lifetime parameter `'a` never used\n+\n+fn wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {} //~ ERROR lifetime parameter `'b` never used\n+\n+fn right_1_lifetime<'a>(_: &'a i32) {}\n+\n+fn right_2_lifetimes<'a, 'b>(_: &'a i32, _: &'b i32) {}\n+\n+fn right_trait_bound_lifetime<'a, I>(_: I)\n+where\n+    I: Iterator<Item = &'a i32>\n+{}\n+\n \n fn main() {}"}, {"sha": "4e90f43fdd07b9be6ca3e50f936fd14ad189b3c2", "filename": "src/test/ui/async-await/unused-lifetime.stderr", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64f11b96396ded4388618af95d639ae9be0978e9/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64f11b96396ded4388618af95d639ae9be0978e9/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr?ref=64f11b96396ded4388618af95d639ae9be0978e9", "patch": "@@ -1,32 +1,28 @@\n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:26:40\n+  --> $DIR/unused-lifetime.rs:31:23\n    |\n-LL | pub async fn func_with_unused_lifetime<'a>(s: &'a str) {\n-   |                                        ^^\n+LL | fn wrong_without_args<'a>() {}\n+   |                      -^^- help: elide the unused lifetime\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-lifetime.rs:7:9\n+  --> $DIR/unused-lifetime.rs:5:9\n    |\n LL | #![deny(unused_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:31:44\n+  --> $DIR/unused-lifetime.rs:33:21\n    |\n-LL | pub async fn func_with_two_unused_lifetime<'a, 'b>(s: &'a str, t: &'b str) {\n-   |                                            ^^\n+LL | fn wrong_1_lifetime<'a>(_: &i32) {}\n+   |                    -^^- help: elide the unused lifetime\n \n error: lifetime parameter `'b` never used\n-  --> $DIR/unused-lifetime.rs:31:48\n+  --> $DIR/unused-lifetime.rs:35:26\n    |\n-LL | pub async fn func_with_two_unused_lifetime<'a, 'b>(s: &'a str, t: &'b str) {\n-   |                                                ^^\n+LL | fn wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n+   |                        --^^\n+   |                        |\n+   |                        help: elide the unused lifetime\n \n-error: lifetime parameter `'c` never used\n-  --> $DIR/unused-lifetime.rs:37:54\n-   |\n-LL | pub async fn func_with_unused_lifetime_in_two_params<'c>(s: &'c str, t: &'c str) {\n-   |                                                      ^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}