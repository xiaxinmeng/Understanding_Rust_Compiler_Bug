{"sha": "86fadbd4e59f12535edcc280ec227d7ee8a0848d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmFkYmQ0ZTU5ZjEyNTM1ZWRjYzI4MGVjMjI3ZDdlZThhMDg0OGQ=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-24T18:04:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:37Z"}, "message": "extract `Roots` struct", "tree": {"sha": "4983387f125e520101ac057b95c90eb722293ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4983387f125e520101ac057b95c90eb722293ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86fadbd4e59f12535edcc280ec227d7ee8a0848d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86fadbd4e59f12535edcc280ec227d7ee8a0848d", "html_url": "https://github.com/rust-lang/rust/commit/86fadbd4e59f12535edcc280ec227d7ee8a0848d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86fadbd4e59f12535edcc280ec227d7ee8a0848d/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "html_url": "https://github.com/rust-lang/rust/commit/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "cba3a463aefa93c1e83584a85d6ff68d7435c880", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/86fadbd4e59f12535edcc280ec227d7ee8a0848d/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fadbd4e59f12535edcc280ec227d7ee8a0848d/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=86fadbd4e59f12535edcc280ec227d7ee8a0848d", "patch": "@@ -18,6 +18,7 @@ mod io;\n use std::{\n     cmp::Reverse,\n     fmt, fs, mem,\n+    ops::{Deref, DerefMut},\n     path::{Path, PathBuf},\n     sync::Arc,\n     thread,\n@@ -88,8 +89,38 @@ struct VfsFileData {\n     text: Arc<String>,\n }\n \n-pub struct Vfs {\n+pub(crate) struct Roots {\n     roots: Arena<VfsRoot, Arc<RootFilter>>,\n+}\n+\n+impl Roots {\n+    pub(crate) fn new() -> Roots {\n+        Roots {\n+            roots: Arena::default(),\n+        }\n+    }\n+    pub(crate) fn find(&self, path: &Path) -> Option<(VfsRoot, RelativePathBuf)> {\n+        self.roots\n+            .iter()\n+            .find_map(|(root, data)| data.can_contain(path).map(|it| (root, it)))\n+    }\n+}\n+\n+impl Deref for Roots {\n+    type Target = Arena<VfsRoot, Arc<RootFilter>>;\n+    fn deref(&self) -> &Self::Target {\n+        &self.roots\n+    }\n+}\n+\n+impl DerefMut for Roots {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.roots\n+    }\n+}\n+\n+pub struct Vfs {\n+    roots: Arc<Roots>,\n     files: Arena<VfsFile, VfsFileData>,\n     root2files: FxHashMap<VfsRoot, FxHashSet<VfsFile>>,\n     pending_changes: Vec<VfsChange>,\n@@ -103,26 +134,22 @@ impl fmt::Debug for Vfs {\n }\n \n impl Vfs {\n-    pub fn new(mut roots: Vec<PathBuf>) -> (Vfs, Vec<VfsRoot>) {\n+    pub fn new(roots: Vec<PathBuf>) -> (Vfs, Vec<VfsRoot>) {\n+        let mut root_paths = roots;\n         let worker = io::Worker::start();\n \n-        let mut res = Vfs {\n-            roots: Arena::default(),\n-            files: Arena::default(),\n-            root2files: FxHashMap::default(),\n-            worker,\n-            pending_changes: Vec::new(),\n-        };\n+        let mut roots = Roots::new();\n+        let mut root2files = FxHashMap::default();\n \n         // A hack to make nesting work.\n-        roots.sort_by_key(|it| Reverse(it.as_os_str().len()));\n-        for (i, path) in roots.iter().enumerate() {\n+        root_paths.sort_by_key(|it| Reverse(it.as_os_str().len()));\n+        for (i, path) in root_paths.iter().enumerate() {\n             let root_filter = Arc::new(RootFilter::new(path.clone()));\n \n-            let root = res.roots.alloc(root_filter.clone());\n-            res.root2files.insert(root, Default::default());\n+            let root = roots.alloc(root_filter.clone());\n+            root2files.insert(root, Default::default());\n \n-            let nested_roots = roots[..i]\n+            let nested_roots = root_paths[..i]\n                 .iter()\n                 .filter(|it| it.starts_with(path))\n                 .map(|it| it.clone())\n@@ -134,10 +161,17 @@ impl Vfs {\n                 root_filter,\n                 nested_roots,\n             };\n-            res.worker.sender().send(task).unwrap();\n+            worker.sender().send(task).unwrap();\n         }\n-        let roots = res.roots.iter().map(|(id, _)| id).collect();\n-        (res, roots)\n+        let res = Vfs {\n+            roots: Arc::new(roots),\n+            files: Arena::default(),\n+            root2files,\n+            worker,\n+            pending_changes: Vec::new(),\n+        };\n+        let vfs_roots = res.roots.iter().map(|(id, _)| id).collect();\n+        (res, vfs_roots)\n     }\n \n     pub fn root2path(&self, root: VfsRoot) -> PathBuf {\n@@ -399,10 +433,7 @@ impl Vfs {\n     }\n \n     fn find_root(&self, path: &Path) -> Option<(VfsRoot, RelativePathBuf, Option<VfsFile>)> {\n-        let (root, path) = self\n-            .roots\n-            .iter()\n-            .find_map(|(root, data)| data.can_contain(path).map(|it| (root, it)))?;\n+        let (root, path) = self.roots.find(&path)?;\n         let file = self.root2files[&root]\n             .iter()\n             .map(|&it| it)"}]}