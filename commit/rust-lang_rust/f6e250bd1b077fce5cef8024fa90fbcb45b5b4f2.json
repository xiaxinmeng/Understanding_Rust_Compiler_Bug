{"sha": "f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTI1MGJkMWIwNzdmY2U1Y2VmODAyNGZhOTBmYmNiNDViNWI0ZjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-19T13:10:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T13:10:52Z"}, "message": "Merge #4948\n\n4948: Speedup VFS::partition r=matklad a=matklad\n\nThe task of `partition` function is to bin the flat list of paths into\ndisjoint filesets. Ideally, it should be incremental -- each new file\nshould be added to a specific fileset.\n\nHowever, preliminary measurnments show that it is actually fast enough\nif we just optimize this to use a binary search instead of a linear\nscan.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "dae453e237a54c1a4e86634b71fae8890e850796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae453e237a54c1a4e86634b71fae8890e850796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7LlcCRBK7hj4Ov3rIwAAdHIIAIZIYNwcA6CzoJPAYJQF7Vxm\nT3xYihWbL5XETIZyqtdFSFghLUmaZG2btB88ZMCbKbCZyoWXZZLXRFWJexIYUWbR\nUuYkFzKPlVCCLGUTsujalSWG3iwQ/jyTfko9yxk7kFws0mfj5N6+2Bq2YIxramX+\nPtcYjF10r2tJzvbuOceq/eNzLtYf3fDGQwabHxl3w8UjXwma0Fruax0IpRfGrPWx\nxnvCM/NuzX8DdjoajZ7b7wIwBP+6EvE+Bm33/RK/TwCrBjGvWw4PVE47wFYvTQE7\n4XfJBskVAW8AI6iU+SelZdq4varUzto9iQhcZpMMUH6drPXL6twSZZhQsus0fpI=\n=vjFF\n-----END PGP SIGNATURE-----\n", "payload": "tree dae453e237a54c1a4e86634b71fae8890e850796\nparent 902a9c6da7939abec74bb4e4be9d1d16dfb15daa\nparent b9f3c5d585ee266f0fd5db77c2a3f331a0bddf2d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592572252 +0000\ncommitter GitHub <noreply@github.com> 1592572252 +0000\n\nMerge #4948\n\n4948: Speedup VFS::partition r=matklad a=matklad\n\nThe task of `partition` function is to bin the flat list of paths into\ndisjoint filesets. Ideally, it should be incremental -- each new file\nshould be added to a specific fileset.\n\nHowever, preliminary measurnments show that it is actually fast enough\nif we just optimize this to use a binary search instead of a linear\nscan.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "html_url": "https://github.com/rust-lang/rust/commit/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902a9c6da7939abec74bb4e4be9d1d16dfb15daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/902a9c6da7939abec74bb4e4be9d1d16dfb15daa", "html_url": "https://github.com/rust-lang/rust/commit/902a9c6da7939abec74bb4e4be9d1d16dfb15daa"}, {"sha": "b9f3c5d585ee266f0fd5db77c2a3f331a0bddf2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f3c5d585ee266f0fd5db77c2a3f331a0bddf2d", "html_url": "https://github.com/rust-lang/rust/commit/b9f3c5d585ee266f0fd5db77c2a3f331a0bddf2d"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "190c509130250c1bc7e285ecf27852fc9fc7c1c1", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "patch": "@@ -2,7 +2,7 @@\n //! relative paths.\n use std::{\n     convert::{TryFrom, TryInto},\n-    ops,\n+    io, ops,\n     path::{Component, Path, PathBuf},\n };\n \n@@ -46,6 +46,9 @@ impl TryFrom<&str> for AbsPathBuf {\n }\n \n impl AbsPathBuf {\n+    pub fn canonicalized(path: &Path) -> io::Result<AbsPathBuf> {\n+        path.canonicalize().map(|it| AbsPathBuf::try_from(it).unwrap())\n+    }\n     pub fn as_path(&self) -> &AbsPath {\n         AbsPath::new_unchecked(self.0.as_path())\n     }"}, {"sha": "f2ff0e4359db61b416f5cfad2fbe9cd0700ca14d", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "patch": "@@ -1,5 +1,4 @@\n //! Missing batteries for standard libraries.\n-\n use std::{cell::Cell, fmt, time::Instant};\n \n #[inline(always)]"}, {"sha": "724606a3d4142072dc6b2b70bfdf4dafeee7dcb1", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "patch": "@@ -2,7 +2,7 @@\n //!\n //! Files which do not belong to any explicitly configured `FileSet` belong to\n //! the default `FileSet`.\n-use std::{cmp, fmt, iter};\n+use std::{fmt, iter};\n \n use paths::AbsPathBuf;\n use rustc_hash::FxHashMap;\n@@ -44,6 +44,12 @@ pub struct FileSetConfig {\n     roots: Vec<(AbsPathBuf, usize)>,\n }\n \n+impl Default for FileSetConfig {\n+    fn default() -> Self {\n+        FileSetConfig::builder().build()\n+    }\n+}\n+\n impl FileSetConfig {\n     pub fn builder() -> FileSetConfigBuilder {\n         FileSetConfigBuilder::default()\n@@ -60,14 +66,19 @@ impl FileSetConfig {\n         self.n_file_sets\n     }\n     fn classify(&self, path: &VfsPath) -> usize {\n-        for (root, idx) in self.roots.iter() {\n-            if let Some(path) = path.as_path() {\n-                if path.starts_with(root) {\n-                    return *idx;\n-                }\n-            }\n+        let path = match path.as_path() {\n+            Some(it) => it,\n+            None => return self.len() - 1,\n+        };\n+        let idx = match self.roots.binary_search_by(|(p, _)| p.as_path().cmp(path)) {\n+            Ok(it) => it,\n+            Err(it) => it.saturating_sub(1),\n+        };\n+        if path.starts_with(&self.roots[idx].0) {\n+            self.roots[idx].1\n+        } else {\n+            self.len() - 1\n         }\n-        self.len() - 1\n     }\n }\n \n@@ -82,6 +93,9 @@ impl Default for FileSetConfigBuilder {\n }\n \n impl FileSetConfigBuilder {\n+    pub fn len(&self) -> usize {\n+        self.roots.len()\n+    }\n     pub fn add_file_set(&mut self, roots: Vec<AbsPathBuf>) {\n         self.roots.push(roots)\n     }\n@@ -93,7 +107,7 @@ impl FileSetConfigBuilder {\n             .enumerate()\n             .flat_map(|(i, paths)| paths.into_iter().zip(iter::repeat(i)))\n             .collect();\n-        roots.sort_by_key(|(path, _)| cmp::Reverse(path.to_string_lossy().len()));\n+        roots.sort();\n         FileSetConfig { n_file_sets, roots }\n     }\n }"}, {"sha": "055219b0cd11f23f41054d49b2c9cfd398c34708", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "patch": "@@ -79,6 +79,9 @@ pub enum ChangeKind {\n }\n \n impl Vfs {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n     pub fn file_id(&self, path: &VfsPath) -> Option<FileId> {\n         self.interner.get(path).filter(|&it| self.get(it).is_some())\n     }"}]}