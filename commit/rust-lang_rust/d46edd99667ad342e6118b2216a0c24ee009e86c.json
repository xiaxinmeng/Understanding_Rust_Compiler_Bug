{"sha": "d46edd99667ad342e6118b2216a0c24ee009e86c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmVkZDk5NjY3YWQzNDJlNjExOGIyMjE2YTBjMjRlZTAwOWU4NmM=", "commit": {"author": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-23T21:40:57Z"}, "committer": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-23T22:04:37Z"}, "message": "Keep sign in int-to-float casts", "tree": {"sha": "00be29e3591d66ce3f9ae8486f62b96ba312b72c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00be29e3591d66ce3f9ae8486f62b96ba312b72c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46edd99667ad342e6118b2216a0c24ee009e86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46edd99667ad342e6118b2216a0c24ee009e86c", "html_url": "https://github.com/rust-lang/rust/commit/d46edd99667ad342e6118b2216a0c24ee009e86c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46edd99667ad342e6118b2216a0c24ee009e86c/comments", "author": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f80c3b8c4fcb5d0db37b84a77a58303322cf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f80c3b8c4fcb5d0db37b84a77a58303322cf4e", "html_url": "https://github.com/rust-lang/rust/commit/30f80c3b8c4fcb5d0db37b84a77a58303322cf4e"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "6a33aaaaab204f660f1cda1aae0f158599561ec5", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d46edd99667ad342e6118b2216a0c24ee009e86c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46edd99667ad342e6118b2216a0c24ee009e86c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d46edd99667ad342e6118b2216a0c24ee009e86c", "patch": "@@ -1236,6 +1236,13 @@ declare_clippy_lint! {\n     /// let _ = 2i32 as i32;\n     /// let _ = 0.5 as f32;\n     /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// let _ = 2_i32;\n+    /// let _ = 0.5_f32;\n+    /// ```\n     pub UNNECESSARY_CAST,\n     complexity,\n     \"cast to the same type, e.g., `x as i32` where `x: i32`\"\n@@ -1612,7 +1619,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     let to_nbits = fp_ty_mantissa_nbits(cast_to);\n                     if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits && num_lit.is_decimal();\n                     then {\n-                        show_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n+                        let literal_str = if is_unary_neg(ex) { format!(\"-{}\", num_lit.integer) } else { num_lit.integer.into() };\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n                         return;\n                     }\n                 }\n@@ -1624,7 +1632,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     LitKind::Float(_, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n                         show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n                     },\n-                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => (),\n+                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n                         if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n                             span_lint(\n@@ -1649,6 +1657,10 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n     }\n }\n \n+fn is_unary_neg(expr: &Expr<'_>) -> bool {\n+    matches!(expr.kind, ExprKind::Unary(UnOp::UnNeg, _))\n+}\n+\n fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     match expr.kind {\n         ExprKind::Lit(ref lit) => Some(lit),"}, {"sha": "350da4965d11d9323433b7cf33631f1fd7e3e0a7", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=d46edd99667ad342e6118b2216a0c24ee009e86c", "patch": "@@ -8,6 +8,9 @@ fn main() {\n     100_f32;\n     100_f64;\n     100_f64;\n+    let _ = -100_f32;\n+    let _ = -100_f64;\n+    let _ = -100_f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "ad2fb2e628921477fad7cf24c73e87a00b681898", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=d46edd99667ad342e6118b2216a0c24ee009e86c", "patch": "@@ -8,6 +8,9 @@ fn main() {\n     100 as f32;\n     100 as f64;\n     100_i32 as f64;\n+    let _ = -100 as f32;\n+    let _ = -100 as f64;\n+    let _ = -100_i32 as f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "5a210fc89097bcdc7f5c93260b08ae89709849ed", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d46edd99667ad342e6118b2216a0c24ee009e86c/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=d46edd99667ad342e6118b2216a0c24ee009e86c", "patch": "@@ -18,59 +18,77 @@ error: casting integer literal to `f64` is unnecessary\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:11:13\n+   |\n+LL |     let _ = -100 as f32;\n+   |             ^^^^^^^^^^^ help: try: `-100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:12:13\n+   |\n+LL |     let _ = -100 as f64;\n+   |             ^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:13:13\n+   |\n+LL |     let _ = -100_i32 as f64;\n+   |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n+\n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:22:5\n+  --> $DIR/unnecessary_cast_fixable.rs:25:5\n    |\n LL |     1 as u32;\n    |     ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:23:5\n+  --> $DIR/unnecessary_cast_fixable.rs:26:5\n    |\n LL |     0x10 as i32;\n    |     ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:24:5\n+  --> $DIR/unnecessary_cast_fixable.rs:27:5\n    |\n LL |     0b10 as usize;\n    |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:25:5\n+  --> $DIR/unnecessary_cast_fixable.rs:28:5\n    |\n LL |     0o73 as u16;\n    |     ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:26:5\n+  --> $DIR/unnecessary_cast_fixable.rs:29:5\n    |\n LL |     1_000_000_000 as u32;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+  --> $DIR/unnecessary_cast_fixable.rs:31:5\n    |\n LL |     1.0 as f64;\n    |     ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:29:5\n+  --> $DIR/unnecessary_cast_fixable.rs:32:5\n    |\n LL |     0.5 as f32;\n    |     ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:33:13\n+  --> $DIR/unnecessary_cast_fixable.rs:36:13\n    |\n LL |     let _ = -1 as i32;\n    |             ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:34:13\n+  --> $DIR/unnecessary_cast_fixable.rs:37:13\n    |\n LL |     let _ = -1.0 as f32;\n    |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 15 previous errors\n "}]}