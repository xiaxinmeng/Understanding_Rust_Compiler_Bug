{"sha": "8ef397400707e3c11424c8a1aa6bc9302617a138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjM5NzQwMDcwN2UzYzExNDI0YzhhMWFhNmJjOTMwMjYxN2ExMzg=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-22T20:37:17Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-23T14:10:23Z"}, "message": "Pass `StackPopUnwind` to `eval_fn_call()` and some other functions that are called by `eval_fn_call()`", "tree": {"sha": "60f12c523427e9240425807cfbac5bec30e2816e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f12c523427e9240425807cfbac5bec30e2816e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef397400707e3c11424c8a1aa6bc9302617a138", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYKpiTxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLj/6wEApkoNUFY/bY95EEvDDjHReoZXO5Rz\nVOvG2a7LoAWClyEA/2T/HOafceLnjvhQkV9NRvrg9+gC2raUE+Ay+iIM3SQO\n=TpWx\n-----END PGP SIGNATURE-----", "payload": "tree 60f12c523427e9240425807cfbac5bec30e2816e\nparent 876fdcb9ec95dae6fdf081decfeb59db87a60b0f\nauthor hyd-dev <yd-huang@outlook.com> 1621715837 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1621779023 +0800\n\nPass `StackPopUnwind` to `eval_fn_call()` and some other functions that are called by `eval_fn_call()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef397400707e3c11424c8a1aa6bc9302617a138", "html_url": "https://github.com/rust-lang/rust/commit/8ef397400707e3c11424c8a1aa6bc9302617a138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef397400707e3c11424c8a1aa6bc9302617a138/comments", "author": null, "committer": null, "parents": [{"sha": "876fdcb9ec95dae6fdf081decfeb59db87a60b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/876fdcb9ec95dae6fdf081decfeb59db87a60b0f", "html_url": "https://github.com/rust-lang/rust/commit/876fdcb9ec95dae6fdf081decfeb59db87a60b0f"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "773df7d7b60c14f2f1142837d05aa0778fe16a50", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=8ef397400707e3c11424c8a1aa6bc9302617a138", "patch": "@@ -17,7 +17,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, InterpCx, InterpResult, Memory,\n-    OpTy, PlaceTy, Pointer, Scalar,\n+    OpTy, PlaceTy, Pointer, Scalar, StackPopUnwind,\n };\n \n use super::error::*;\n@@ -223,7 +223,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _abi: Abi,\n         args: &[OpTy<'tcx>],\n         _ret: Option<(&PlaceTy<'tcx>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>, // unwinding is not supported in consts\n+        _unwind: StackPopUnwind, // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n \n@@ -263,7 +263,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(&PlaceTy<'tcx>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         // Shared intrinsics.\n         if ecx.emulate_intrinsic(instance, args, ret)? {"}, {"sha": "0d01dc3c219bc908931de3fc686326cb9f07aa9b", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=8ef397400707e3c11424c8a1aa6bc9302617a138", "patch": "@@ -14,7 +14,7 @@ use rustc_target::spec::abi::Abi;\n \n use super::{\n     AllocId, Allocation, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult, LocalValue,\n-    MemPlace, Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n+    MemPlace, Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar, StackPopUnwind,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -163,7 +163,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>>;\n \n     /// Execute `fn_val`.  It is the hook's responsibility to advance the instruction\n@@ -174,7 +174,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx>;\n \n     /// Directly process an intrinsic without pushing a stack frame. It is the hook's\n@@ -184,7 +184,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx>;\n \n     /// Called to evaluate `Assert` MIR terminators that trigger a panic.\n@@ -456,7 +456,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _abi: Abi,\n         _args: &[OpTy<$tcx>],\n         _ret: Option<(&PlaceTy<$tcx>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<$tcx> {\n         match fn_val {}\n     }"}, {"sha": "cefd47d718f8fcf1050e22c84cb21b60066b81b4", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=8ef397400707e3c11424c8a1aa6bc9302617a138", "patch": "@@ -105,7 +105,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                     None => None,\n                 };\n-                self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup, can_unwind)?;\n+                self.eval_fn_call(\n+                    fn_val,\n+                    abi,\n+                    &args[..],\n+                    ret,\n+                    if can_unwind {\n+                        cleanup.map_or(StackPopUnwind::Skip, StackPopUnwind::Cleanup)\n+                    } else {\n+                        StackPopUnwind::NotAllowed\n+                    },\n+                )?;\n                 // Sanity-check that `eval_fn_call` either pushed a new frame or\n                 // did a jump to another block.\n                 if self.frame_idx() == old_stack && self.frame().loc == old_loc {\n@@ -235,8 +245,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         caller_abi: Abi,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         ret: Option<(&PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n-        can_unwind: bool,\n+        mut unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         trace!(\"eval_fn_call: {:#?}\", fn_val);\n \n@@ -306,22 +315,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     check_abi(callee_abi)?;\n                 }\n \n-                let can_unwind = can_unwind\n+                if !matches!(unwind, StackPopUnwind::NotAllowed)\n                     && self\n-                        .fn_can_unwind(self.tcx.codegen_fn_attrs(callee_def_id).flags, callee_abi);\n+                        .fn_can_unwind(self.tcx.codegen_fn_attrs(callee_def_id).flags, callee_abi)\n+                {\n+                    unwind = StackPopUnwind::NotAllowed;\n+                }\n \n                 self.push_stack_frame(\n                     instance,\n                     body,\n                     ret.map(|p| p.0),\n-                    StackPopCleanup::Goto {\n-                        ret: ret.map(|p| p.1),\n-                        unwind: match (unwind, can_unwind) {\n-                            (Some(unwind), true) => StackPopUnwind::Cleanup(unwind),\n-                            (None, true) => StackPopUnwind::Skip,\n-                            (_, false) => StackPopUnwind::NotAllowed,\n-                        },\n-                    },\n+                    StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },\n                 )?;\n \n                 // If an error is raised here, pop the frame again to get an accurate backtrace.\n@@ -466,7 +471,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     OpTy::from(ImmTy::from_immediate(receiver_place.ptr.into(), this_receiver_ptr));\n                 trace!(\"Patched self operand to {:#?}\", args[0]);\n                 // recurse with concrete function\n-                self.eval_fn_call(drop_fn, caller_abi, &args, ret, unwind, can_unwind)\n+                self.eval_fn_call(drop_fn, caller_abi, &args, ret, unwind)\n             }\n         }\n     }\n@@ -505,8 +510,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Abi::Rust,\n             &[arg.into()],\n             Some((&dest.into(), target)),\n-            unwind,\n-            true,\n+            unwind.map_or(StackPopUnwind::Skip, StackPopUnwind::Cleanup),\n         )\n     }\n }"}, {"sha": "681d63c6fc9664c7116368a79fb9b5e49ec29717", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef397400707e3c11424c8a1aa6bc9302617a138/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=8ef397400707e3c11424c8a1aa6bc9302617a138", "patch": "@@ -33,6 +33,7 @@ use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, ConstValue, CtfeValidationMode, Frame, ImmTy,\n     Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, Memory, MemoryKind, OpTy,\n     Operand as InterpOperand, PlaceTy, Pointer, Scalar, ScalarMaybeUninit, StackPopCleanup,\n+    StackPopUnwind,\n };\n use crate::transform::MirPass;\n \n@@ -198,7 +199,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _abi: Abi,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n-        _unwind: Option<BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<&'mir Body<'tcx>>> {\n         Ok(None)\n     }\n@@ -208,7 +209,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n-        _unwind: Option<BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         throw_machine_stop_str!(\"calling intrinsics isn't supported in ConstProp\")\n     }"}]}