{"sha": "9b6b1a625b24d7f52647998b496de10b9fd05bf4", "node_id": "C_kwDOAAsO6NoAKDliNmIxYTYyNWIyNGQ3ZjUyNjQ3OTk4YjQ5NmRlMTBiOWZkMDViZjQ", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-05T21:14:59Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T12:55:03Z"}, "message": "Add new `Deinit` statement kind", "tree": {"sha": "05fee2d810999c8222d4add9297a41c14a2d4b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fee2d810999c8222d4add9297a41c14a2d4b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6b1a625b24d7f52647998b496de10b9fd05bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6b1a625b24d7f52647998b496de10b9fd05bf4", "html_url": "https://github.com/rust-lang/rust/commit/9b6b1a625b24d7f52647998b496de10b9fd05bf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6b1a625b24d7f52647998b496de10b9fd05bf4/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00e77078c0bd003323af67b4deb27627226d2e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00e77078c0bd003323af67b4deb27627226d2e6", "html_url": "https://github.com/rust-lang/rust/commit/d00e77078c0bd003323af67b4deb27627226d2e6"}], "stats": {"total": 207, "additions": 141, "deletions": 66}, "files": [{"sha": "d38e89cd79edd785476d5a49c810d3ee8d01567c", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -386,6 +386,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n \n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::SetDiscriminant { .. }\n+            | mir::StatementKind::Deinit(..)\n             | mir::StatementKind::StorageLive(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "76d240bb89f59cfb5dce98a0913ce876046d16d8", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -63,9 +63,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n-            StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, **place, Shallow(None));\n-            }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,\n@@ -91,6 +88,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n \n         self.super_statement(statement, location);"}, {"sha": "0c0676f93ad9bf4e0fd26d201bc18af351b3e267", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -626,9 +626,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, (**place, span), Shallow(None), flow_state);\n-            }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ..\n             }) => {\n@@ -654,6 +651,9 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n     }\n "}, {"sha": "ece801716b2dbacc6715dc87e2d37113304fce63", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -1303,28 +1303,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::SetDiscriminant { ref place, variant_index } => {\n-                let place_type = place.ty(body, tcx).ty;\n-                let adt = match place_type.kind() {\n-                    ty::Adt(adt, _) if adt.is_enum() => adt,\n-                    _ => {\n-                        span_bug!(\n-                            stmt.source_info.span,\n-                            \"bad set discriminant ({:?} = {:?}): lhs is not an enum\",\n-                            place,\n-                            variant_index\n-                        );\n-                    }\n-                };\n-                if variant_index.as_usize() >= adt.variants().len() {\n-                    span_bug!(\n-                        stmt.source_info.span,\n-                        \"bad set discriminant ({:?} = {:?}): value of of range\",\n-                        place,\n-                        variant_index\n-                    );\n-                };\n-            }\n             StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {\n                 let place_ty = place.ty(body, tcx).ty;\n                 if let Err(terr) = self.relate_type_and_user_type(\n@@ -1358,6 +1336,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n             | StatementKind::Nop => {}\n+            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+                bug!(\"Statement not allowed in this MIR phase\")\n+            }\n         }\n     }\n "}, {"sha": "8c45993a8b76bf7e4a171be65c81def5e6e6025c", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -772,6 +772,7 @@ fn codegen_stmt<'tcx>(\n         }\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)\n+        | StatementKind::Deinit(_)\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }"}, {"sha": "57074f00210fe88111b4f369de5bb49f50237b35", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -518,6 +518,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         StatementKind::Assign(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }\n+                        | StatementKind::Deinit(_)\n                         | StatementKind::StorageLive(_)\n                         | StatementKind::StorageDead(_)\n                         | StatementKind::Retag(_, _)"}, {"sha": "d9ebfc3e871436b901f4139b4d9524c5981a64bd", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -48,6 +48,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n+            mir::StatementKind::Deinit(..) => {\n+                // For now, don't codegen this to anything. In the future it may be worth\n+                // experimenting with what kind of information we can emit to LLVM without hurting\n+                // perf here\n+                bx\n+            }\n             mir::StatementKind::StorageLive(local) => {\n                 if let LocalRef::Place(cg_place) = self.locals[local] {\n                     cg_place.storage_live(&mut bx);"}, {"sha": "a165fa23f30acf5e40af7a2a4d4171ba84ada542", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -890,6 +890,11 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n     ) -> InterpResult<'tcx> {\n         self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)\n     }\n+\n+    /// Mark the entire referenced range as uninitalized\n+    pub fn write_uninit(&mut self) {\n+        self.alloc.mark_init(self.range, false);\n+    }\n }\n \n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {"}, {"sha": "8dc74035d61d009b0ec59dbd2ec4c69b4e694e66", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -791,6 +791,42 @@ where\n         }\n     }\n \n+    pub fn write_uninit(&mut self, dest: &PlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n+        let mplace = match dest.place {\n+            Place::Ptr(mplace) => MPlaceTy { mplace, layout: dest.layout },\n+            Place::Local { frame, local } => {\n+                match M::access_local_mut(self, frame, local)? {\n+                    Ok(local) => match dest.layout.abi {\n+                        Abi::Scalar(_) => {\n+                            *local = LocalValue::Live(Operand::Immediate(Immediate::Scalar(\n+                                ScalarMaybeUninit::Uninit,\n+                            )));\n+                            return Ok(());\n+                        }\n+                        Abi::ScalarPair(..) => {\n+                            *local = LocalValue::Live(Operand::Immediate(Immediate::ScalarPair(\n+                                ScalarMaybeUninit::Uninit,\n+                                ScalarMaybeUninit::Uninit,\n+                            )));\n+                            return Ok(());\n+                        }\n+                        _ => self.force_allocation(dest)?,\n+                    },\n+                    Err(mplace) => {\n+                        // The local is in memory, go on below.\n+                        MPlaceTy { mplace, layout: dest.layout }\n+                    }\n+                }\n+            }\n+        };\n+        let Some(mut alloc) = self.get_place_alloc_mut(&mplace)? else {\n+            // Zero-sized access\n+            return Ok(());\n+        };\n+        alloc.write_uninit();\n+        Ok(())\n+    }\n+\n     /// Copies the data from an operand to a place. This does not support transmuting!\n     /// Use `copy_op_transmute` if the layouts could disagree.\n     #[inline(always)]"}, {"sha": "eb1a184bf9b219139c00b16fa4431cf8735d4b18", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -90,6 +90,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_discriminant(*variant_index, &dest)?;\n             }\n \n+            Deinit(place) => {\n+                let dest = self.eval_place(**place)?;\n+                self.write_uninit(&dest)?;\n+            }\n+\n             // Mark locals as alive\n             StorageLive(local) => {\n                 self.storage_live(*local)?;"}, {"sha": "7e2a50444db062d24cf0b06757927c07c034ba38", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -692,6 +692,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n         match statement.kind {\n             StatementKind::Assign(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)"}, {"sha": "58a7f6d1be0b173e32a1932e29b5124d38c5368b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -346,9 +346,24 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.fail(location, format!(\"bad arg ({:?} != usize)\", op_cnt_ty))\n                 }\n             }\n-            StatementKind::SetDiscriminant { .. } => {\n-                if self.mir_phase < MirPhase::DropsLowered {\n-                    self.fail(location, \"`SetDiscriminant` is not allowed until drop elaboration\");\n+            StatementKind::SetDiscriminant { place, .. } => {\n+                if self.mir_phase < MirPhase::Deaggregated {\n+                    self.fail(location, \"`SetDiscriminant`is not allowed until deaggregation\");\n+                }\n+                let pty = place.ty(&self.body.local_decls, self.tcx).ty.kind();\n+                if !matches!(pty, ty::Adt(..) | ty::Generator(..) | ty::Opaque(..)) {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"`SetDiscriminant` is only allowed on ADTs and generators, not {:?}\",\n+                            pty\n+                        ),\n+                    );\n+                }\n+            }\n+            StatementKind::Deinit(..) => {\n+                if self.mir_phase < MirPhase::Deaggregated {\n+                    self.fail(location, \"`Deinit`is not allowed until deaggregation\");\n                 }\n             }\n             StatementKind::Retag(_, _) => {"}, {"sha": "180a40043db0788c1d4ab881d7a105598f03bcad", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -14,22 +14,26 @@ use std::iter::TrustedLen;\n /// (lhs as Variant).field1 = arg1;\n /// discriminant(lhs) = variant_index;  // If lhs is an enum or generator.\n pub fn expand_aggregate<'tcx>(\n-    mut lhs: Place<'tcx>,\n+    orig_lhs: Place<'tcx>,\n     operands: impl Iterator<Item = (Operand<'tcx>, Ty<'tcx>)> + TrustedLen,\n     kind: AggregateKind<'tcx>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n ) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n+    let mut lhs = orig_lhs;\n     let mut set_discriminant = None;\n     let active_field_index = match kind {\n         AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n             let adt_def = tcx.adt_def(adt_did);\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n+                    kind: StatementKind::SetDiscriminant {\n+                        place: Box::new(orig_lhs),\n+                        variant_index,\n+                    },\n                     source_info,\n                 });\n-                lhs = tcx.mk_place_downcast(lhs, adt_def, variant_index);\n+                lhs = tcx.mk_place_downcast(orig_lhs, adt_def, variant_index);\n             }\n             active_field_index\n         }\n@@ -38,7 +42,7 @@ pub fn expand_aggregate<'tcx>(\n             // variant 0 (Unresumed).\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n+                kind: StatementKind::SetDiscriminant { place: Box::new(orig_lhs), variant_index },\n                 source_info,\n             });\n \n@@ -50,27 +54,24 @@ pub fn expand_aggregate<'tcx>(\n         _ => None,\n     };\n \n-    operands\n-        .enumerate()\n-        .map(move |(i, (op, ty))| {\n-            let lhs_field = if let AggregateKind::Array(_) = kind {\n-                let offset = u64::try_from(i).unwrap();\n-                tcx.mk_place_elem(\n-                    lhs,\n-                    ProjectionElem::ConstantIndex {\n-                        offset,\n-                        min_length: offset + 1,\n-                        from_end: false,\n-                    },\n-                )\n-            } else {\n-                let field = Field::new(active_field_index.unwrap_or(i));\n-                tcx.mk_place_field(lhs, field, ty)\n-            };\n-            Statement {\n-                source_info,\n-                kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n-            }\n-        })\n+    let operands = operands.enumerate().map(move |(i, (op, ty))| {\n+        let lhs_field = if let AggregateKind::Array(_) = kind {\n+            let offset = u64::try_from(i).unwrap();\n+            tcx.mk_place_elem(\n+                lhs,\n+                ProjectionElem::ConstantIndex { offset, min_length: offset + 1, from_end: false },\n+            )\n+        } else {\n+            let field = Field::new(active_field_index.unwrap_or(i));\n+            tcx.mk_place_field(lhs, field, ty)\n+        };\n+        Statement {\n+            source_info,\n+            kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n+        }\n+    });\n+    [Statement { source_info, kind: StatementKind::Deinit(Box::new(orig_lhs)) }]\n+        .into_iter()\n+        .chain(operands)\n         .chain(set_discriminant)\n }"}, {"sha": "3832025f0385314c610695714b67bf1e28ac8397", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -1590,6 +1590,8 @@ pub enum StatementKind<'tcx> {\n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n \n+    Deinit(Box<Place<'tcx>>),\n+\n     /// Start a live range for the storage of the local.\n     StorageLive(Local),\n \n@@ -1739,6 +1741,7 @@ impl Debug for Statement<'_> {\n             SetDiscriminant { ref place, variant_index } => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n+            Deinit(ref place) => write!(fmt, \"Deinit({:?})\", place),\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }"}, {"sha": "afcd5db8f487c0d8da1db8b5dfb337ea97c19a3b", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -243,6 +243,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Assign(..) => \"Assign\",\n         FakeRead(..) => \"FakeRead\",\n         SetDiscriminant { .. } => \"SetDiscriminant\",\n+        Deinit(..) => \"Deinit\",\n         StorageLive(..) => \"StorageLive\",\n         StorageDead(..) => \"StorageDead\",\n         Retag(..) => \"Retag\","}, {"sha": "49a789072f95dc2bf87ed92e476f27a8c1d947ca", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -399,6 +399,13 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n+                    StatementKind::Deinit(place) => {\n+                        self.visit_place(\n+                            place,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        )\n+                    }\n                     StatementKind::StorageLive(local) => {\n                         self.visit_local(\n                             local,"}, {"sha": "2730e8bd49b7696ce409e1b1198cee3d52139db4", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -131,7 +131,8 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // If a place is assigned to in a statement, it needs storage for that statement.\n             StatementKind::Assign(box (place, _))\n-            | StatementKind::SetDiscriminant { box place, .. } => {\n+            | StatementKind::SetDiscriminant { box place, .. }\n+            | StatementKind::Deinit(box place) => {\n                 trans.gen(place.local);\n             }\n "}, {"sha": "73072464872c307c96a470059d2d6448508f9bdf", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -296,10 +296,10 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::StorageDead(local) => {\n                 self.gather_move(Place::from(*local));\n             }\n-            StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::SetDiscriminant { .. } | StatementKind::Deinit(..) => {\n                 span_bug!(\n                     stmt.source_info.span,\n-                    \"SetDiscriminant should not exist during borrowck\"\n+                    \"SetDiscriminant/Deinit should not exist during borrowck\"\n                 );\n             }\n             StatementKind::Retag { .. }"}, {"sha": "d1d6e7cfe2fed77e17e30fb6c9b907b3ef6ca168", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -97,6 +97,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             StatementKind::Assign(..)\n             | StatementKind::FakeRead(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }"}, {"sha": "5b7b343949c02f02288e9f303103241e856af3aa", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -827,6 +827,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n+        | StatementKind::Deinit(..)\n         | StatementKind::Retag(_, _)\n         | StatementKind::AscribeUserType(_, _) => {\n             Some(statement.source_info.span)"}, {"sha": "3732a308e3ac3276a4093291988cef991691c8fd", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -530,6 +530,7 @@ impl<'a> Conflicts<'a> {\n             StatementKind::Assign(_) => {}\n \n             StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag(..)"}, {"sha": "144ea0ec61931c377bffa6f53fe8e0c881a01ed1", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -1441,6 +1441,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n \n             StatementKind::FakeRead(..)\n             | StatementKind::SetDiscriminant { .. }\n+            | StatementKind::Deinit(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(..)"}, {"sha": "4d214b0356ca7f1a56925c1344bbe7659226aa65", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -50,6 +50,7 @@ impl RemoveNoopLandingPads {\n \n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n+                | StatementKind::Deinit(..)\n                 | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;"}, {"sha": "aaee6f491cd33750a88c5a030dc8fa2dd7b12061", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -21,7 +21,9 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n-                if let StatementKind::Assign(box (place, _)) = statement.kind {\n+                if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) =\n+                    statement.kind\n+                {\n                     let place_ty = place.ty(local_decls, tcx).ty;\n                     if !maybe_zst(place_ty) {\n                         continue;"}, {"sha": "33ea1c4ba2f59a5d3664c03dc6fa1c88e5d5f7e0", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -242,6 +242,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             // These statements have no influence on the place\n             // we are interested in\n             StatementKind::FakeRead(_)\n+            | StatementKind::Deinit(_)\n             | StatementKind::StorageLive(_)\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n@@ -308,6 +309,7 @@ fn find_determining_place<'tcx>(\n             // These statements have no influence on the place\n             // we are interested in\n             StatementKind::FakeRead(_)\n+            | StatementKind::Deinit(_)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(_, _)"}, {"sha": "b42e3909cf386bc7b322383ac424dceaf4f28aec", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -498,7 +498,8 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n                 self.visit_rvalue(rvalue, location);\n             }\n \n-            StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n+            StatementKind::SetDiscriminant { ref place, variant_index: _ }\n+            | StatementKind::Deinit(ref place) => {\n                 self.visit_lhs(place, location);\n             }\n         }\n@@ -534,9 +535,8 @@ fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>)\n                     }\n                     StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),\n \n-                    StatementKind::SetDiscriminant { ref place, .. } => {\n-                        used_locals.is_used(place.local)\n-                    }\n+                    StatementKind::SetDiscriminant { ref place, .. }\n+                    | StatementKind::Deinit(ref place) => used_locals.is_used(place.local),\n                     _ => true,\n                 };\n "}, {"sha": "fe411220484890f33e6abaa68d2a53477eea7f17", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b1a625b24d7f52647998b496de10b9fd05bf4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b1a625b24d7f52647998b496de10b9fd05bf4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=9b6b1a625b24d7f52647998b496de10b9fd05bf4", "patch": "@@ -211,7 +211,8 @@ fn check_statement<'tcx>(\n \n         StatementKind::FakeRead(box (_, place)) => check_place(tcx, *place, span, body),\n         // just an assignment\n-        StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n+        StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => \n+            check_place(tcx, **place, span, body),\n \n         StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n             check_operand(tcx, dst, span, body)?;"}]}