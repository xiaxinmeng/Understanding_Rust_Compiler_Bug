{"sha": "cc830ef18b3014158715f0fd5635a179c5bd7844", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODMwZWYxOGIzMDE0MTU4NzE1ZjBmZDU2MzVhMTc5YzViZDc4NDQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-03T04:51:21Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-03T17:41:42Z"}, "message": "libstd: implement PartialEq<Path> for PathBuf and Cow<Path>", "tree": {"sha": "d7339841ef867d500b90429a89c4345906e9b2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7339841ef867d500b90429a89c4345906e9b2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc830ef18b3014158715f0fd5635a179c5bd7844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc830ef18b3014158715f0fd5635a179c5bd7844", "html_url": "https://github.com/rust-lang/rust/commit/cc830ef18b3014158715f0fd5635a179c5bd7844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc830ef18b3014158715f0fd5635a179c5bd7844/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7690ec89ffeac4b4537e71c980d65ead9177d76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7690ec89ffeac4b4537e71c980d65ead9177d76c", "html_url": "https://github.com/rust-lang/rust/commit/7690ec89ffeac4b4537e71c980d65ead9177d76c"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "9a5852663cb673a2d39cad1d8864e32174a0f4e8", "filename": "src/libstd/path.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cc830ef18b3014158715f0fd5635a179c5bd7844/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc830ef18b3014158715f0fd5635a179c5bd7844/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=cc830ef18b3014158715f0fd5635a179c5bd7844", "patch": "@@ -1909,6 +1909,29 @@ impl<'a> IntoIterator for &'a Path {\n     fn into_iter(self) -> Iter<'a> { self.iter() }\n }\n \n+macro_rules! impl_eq {\n+    ($lhs:ty, $rhs: ty) => {\n+        #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n+        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+            #[inline]\n+            fn eq(&self, other: &$rhs) -> bool { <Path as PartialEq>::eq(self, other) }\n+        }\n+\n+        #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n+        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+            #[inline]\n+            fn eq(&self, other: &$lhs) -> bool { <Path as PartialEq>::eq(self, other) }\n+        }\n+\n+    }\n+}\n+\n+impl_eq!(PathBuf, Path);\n+impl_eq!(PathBuf, &'a Path);\n+impl_eq!(Cow<'a, Path>, Path);\n+impl_eq!(Cow<'a, Path>, &'b Path);\n+impl_eq!(Cow<'a, Path>, PathBuf);\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -3106,6 +3129,31 @@ mod tests {\n         tfe!(\"/\", \"foo\", \"/\", false);\n     }\n \n+    #[test]\n+    fn test_eq_recievers() {\n+        use borrow::Cow;\n+\n+        let borrowed: &Path = Path::new(\"foo/bar\");\n+        let mut owned: PathBuf = PathBuf::new();\n+        owned.push(\"foo\");\n+        owned.push(\"bar\");\n+        let borrowed_cow: Cow<Path> = borrowed.into();\n+        let owned_cow: Cow<Path> = owned.clone().into();\n+\n+        macro_rules! t {\n+            ($($current:expr),+) => {\n+                $(\n+                    assert_eq!($current, borrowed);\n+                    assert_eq!($current, owned);\n+                    assert_eq!($current, borrowed_cow);\n+                    assert_eq!($current, owned_cow);\n+                )+\n+            }\n+        }\n+\n+        t!(borrowed, owned, borrowed_cow, owned_cow);\n+    }\n+\n     #[test]\n     pub fn test_compare() {\n         use hash::{Hash, Hasher, SipHasher};"}]}