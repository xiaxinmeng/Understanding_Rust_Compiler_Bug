{"sha": "28446ef19eebaee31bbbd2706fed29632ee7b7f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NDQ2ZWYxOWVlYmFlZTMxYmJiZDI3MDZmZWQyOTYzMmVlN2I3Zjk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-24T20:02:54Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:52Z"}, "message": "Inline elaborate_trait_refs_that_define_assoc_type into transitive_bounds_that_define_assoc_type", "tree": {"sha": "3a7611211deb23ca3928504fecc51c710dab6c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7611211deb23ca3928504fecc51c710dab6c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28446ef19eebaee31bbbd2706fed29632ee7b7f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/gACgkQgTGiTgx5\n7692/hAApzWYltTLG4FvvVUuI5TcsLrSV8kDA2IWfCvGUq8K+XktUq/GQVvQaZ2q\nI81iEVyUPQ4aN+YAeBadNm6BxNW2/7WGePUQFZExqWVRLDbONeKpHaCtbW5eNhVn\nsc8hf7d5F+Ff7SJSCCM2YIApg7KGuqVg4s64KOBnS/0TPoDvb5Lkl20qylClqu3b\nJisVSqDTNmToT+qwUrCq4zl6dpCBzVcGN0Y61pLdDZCy6GFl/sRBTGPrQMgEpFdC\nx+C3EnIpN+KoXNqThdvnkvv/o2T1s10bfKT2fJad7+cpjiDYTO+sgvs19fNZ5XZx\nj/ths4Xw7ezF8v4eKQMOt5K03dIaNPDhyx7pxH5vgwY6FelL2TvLcN71oq3nsLSe\n1pb4Azpe5rV4e0k6CxXqvW8TbT8AC7K9iZXuAriVFmrAmjAR1BQryDzC07j9+sRW\nveY1+mq3KLUGxqq7qSAEfboaZ05fZkbqxJmpIkbJAOtH+o3ONg7KWRG9UdnYg1kK\n1+BTH+s0b2FNgf1JA06iH0mdcRz4IrimihYOpVg3uNf+1t9/AKw1emWeZKbADy60\n55XYmFj176VBHA+orWk467Tm+DJhhOfl1Pk7CcUC76mxMgDavRjafO5IeP3+iZoP\ncjVrkvaHdWk9RxcmS2Y4f5duEYloiXeX++7UoaRQpfNGdrjSyts=\n=h5Bm\n-----END PGP SIGNATURE-----", "payload": "tree 3a7611211deb23ca3928504fecc51c710dab6c75\nparent 9e0538bd07292d6b2d4d215d0cb91d5c9d05aee4\nauthor Santiago Pastorino <spastorino@gmail.com> 1606248174 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487032 -0300\n\nInline elaborate_trait_refs_that_define_assoc_type into transitive_bounds_that_define_assoc_type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28446ef19eebaee31bbbd2706fed29632ee7b7f9", "html_url": "https://github.com/rust-lang/rust/commit/28446ef19eebaee31bbbd2706fed29632ee7b7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28446ef19eebaee31bbbd2706fed29632ee7b7f9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0538bd07292d6b2d4d215d0cb91d5c9d05aee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0538bd07292d6b2d4d215d0cb91d5c9d05aee4", "html_url": "https://github.com/rust-lang/rust/commit/9e0538bd07292d6b2d4d215d0cb91d5c9d05aee4"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "e084530d17a5e4b5dd0d3896f1a72da73c631a7b", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/28446ef19eebaee31bbbd2706fed29632ee7b7f9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28446ef19eebaee31bbbd2706fed29632ee7b7f9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=28446ef19eebaee31bbbd2706fed29632ee7b7f9", "patch": "@@ -90,37 +90,6 @@ pub fn elaborate_trait_refs<'tcx>(\n     elaborate_predicates(tcx, predicates)\n }\n \n-/// A specialized variant of `elaborate_trait_refs` that only elaborates trait references that may\n-/// define the given associated type `assoc_name`. It uses the\n-/// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that\n-/// aren't related to `assoc_item`.  This is used when resolving types like `Self::Item` or\n-/// `T::Item` and helps to avoid cycle errors (see e.g. #35237).\n-pub fn elaborate_trait_refs_that_define_assoc_type<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n-    assoc_name: Ident,\n-) -> FxHashSet<ty::PolyTraitRef<'tcx>> {\n-    let mut stack: Vec<_> = trait_refs.collect();\n-    let mut trait_refs = FxHashSet::default();\n-\n-    while let Some(trait_ref) = stack.pop() {\n-        if trait_refs.insert(trait_ref) {\n-            let super_predicates =\n-                tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n-            for (super_predicate, _) in super_predicates.predicates {\n-                let bound_predicate = super_predicate.bound_atom();\n-                let subst_predicate = super_predicate\n-                    .subst_supertrait(tcx, &bound_predicate.rebind(trait_ref.skip_binder()));\n-                if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n-                    stack.push(binder.value);\n-                }\n-            }\n-        }\n-    }\n-\n-    trait_refs\n-}\n-\n pub fn elaborate_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n@@ -319,12 +288,35 @@ pub fn transitive_bounds<'tcx>(\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n }\n \n+/// A specialized variant of `elaborate_trait_refs` that only elaborates trait references that may\n+/// define the given associated type `assoc_name`. It uses the\n+/// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that\n+/// aren't related to `assoc_item`.  This is used when resolving types like `Self::Item` or\n+/// `T::Item` and helps to avoid cycle errors (see e.g. #35237).\n pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     assoc_name: Ident,\n ) -> FxHashSet<ty::PolyTraitRef<'tcx>> {\n-    elaborate_trait_refs_that_define_assoc_type(tcx, bounds, assoc_name)\n+    let mut stack: Vec<_> = bounds.collect();\n+    let mut trait_refs = FxHashSet::default();\n+\n+    while let Some(trait_ref) = stack.pop() {\n+        if trait_refs.insert(trait_ref) {\n+            let super_predicates =\n+                tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n+            for (super_predicate, _) in super_predicates.predicates {\n+                let bound_predicate = super_predicate.bound_atom();\n+                let subst_predicate = super_predicate\n+                    .subst_supertrait(tcx, &bound_predicate.rebind(trait_ref.skip_binder()));\n+                if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n+                    stack.push(binder.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    trait_refs\n }\n \n ///////////////////////////////////////////////////////////////////////////"}]}