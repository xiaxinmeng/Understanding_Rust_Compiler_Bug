{"sha": "66e30ec712eedc535fdb6a5394e0406ef4ddc737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTMwZWM3MTJlZWRjNTM1ZmRiNmE1Mzk0ZTA0MDZlZjRkZGM3Mzc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-23T02:51:57Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T14:54:53Z"}, "message": "Get rid of doctree::ExternCrate", "tree": {"sha": "2022066a6e97421109aea41f3fb8d7b8bae2430d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2022066a6e97421109aea41f3fb8d7b8bae2430d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e30ec712eedc535fdb6a5394e0406ef4ddc737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e30ec712eedc535fdb6a5394e0406ef4ddc737", "html_url": "https://github.com/rust-lang/rust/commit/66e30ec712eedc535fdb6a5394e0406ef4ddc737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e30ec712eedc535fdb6a5394e0406ef4ddc737/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a58fa06827f2b824176ed01643bd76852a2028a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a58fa06827f2b824176ed01643bd76852a2028a", "html_url": "https://github.com/rust-lang/rust/commit/2a58fa06827f2b824176ed01643bd76852a2028a"}], "stats": {"total": 112, "additions": 49, "deletions": 63}, "files": [{"sha": "8356e50f6374a69283c6e5cd3da24b09642aaf10", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 47, "deletions": 36, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=66e30ec712eedc535fdb6a5394e0406ef4ddc737", "patch": "@@ -14,7 +14,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::bug;\n@@ -229,7 +229,6 @@ impl Clean<Item> for doctree::Module<'_> {\n         let attrs = self.attrs.clean(cx);\n \n         let mut items: Vec<Item> = vec![];\n-        items.extend(self.extern_crates.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n@@ -2004,6 +2003,9 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n                     is_auto: is_auto.clean(cx),\n                 })\n             }\n+            ItemKind::ExternCrate(orig_name) => {\n+                return clean_extern_crate(item, name, orig_name, cx);\n+            }\n             _ => unreachable!(\"not yet converted\"),\n         };\n \n@@ -2081,45 +2083,54 @@ fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n     ret\n }\n \n-impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Vec<Item> {\n-        let please_inline = self.vis.node.is_pub()\n-            && self.attrs.iter().any(|a| {\n-                a.has_name(sym::doc)\n-                    && match a.meta_item_list() {\n-                        Some(l) => attr::list_contains_name(&l, sym::inline),\n-                        None => false,\n-                    }\n-            });\n+fn clean_extern_crate(\n+    krate: &hir::Item<'_>,\n+    name: Symbol,\n+    orig_name: Option<Symbol>,\n+    cx: &DocContext<'_>,\n+) -> Vec<Item> {\n+    // this is the ID of the `extern crate` statement\n+    let def_id = cx.tcx.hir().local_def_id(krate.hir_id);\n+    let cnum = cx.tcx.extern_mod_stmt_cnum(def_id).unwrap_or(LOCAL_CRATE);\n+    // this is the ID of the crate itself\n+    let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+    let please_inline = krate.vis.node.is_pub()\n+        && krate.attrs.iter().any(|a| {\n+            a.has_name(sym::doc)\n+                && match a.meta_item_list() {\n+                    Some(l) => attr::list_contains_name(&l, sym::inline),\n+                    None => false,\n+                }\n+        });\n \n-        if please_inline {\n-            let mut visited = FxHashSet::default();\n+    if please_inline {\n+        let mut visited = FxHashSet::default();\n \n-            let res = Res::Def(DefKind::Mod, DefId { krate: self.cnum, index: CRATE_DEF_INDEX });\n+        let res = Res::Def(DefKind::Mod, crate_def_id);\n \n-            if let Some(items) = inline::try_inline(\n-                cx,\n-                cx.tcx.parent_module(self.hir_id).to_def_id(),\n-                res,\n-                self.name,\n-                Some(self.attrs),\n-                &mut visited,\n-            ) {\n-                return items;\n-            }\n+        if let Some(items) = inline::try_inline(\n+            cx,\n+            cx.tcx.parent_module(krate.hir_id).to_def_id(),\n+            res,\n+            name,\n+            Some(krate.attrs),\n+            &mut visited,\n+        ) {\n+            return items;\n         }\n-\n-        vec![Item {\n-            name: None,\n-            attrs: self.attrs.clean(cx),\n-            source: self.span.clean(cx),\n-            def_id: DefId { krate: self.cnum, index: CRATE_DEF_INDEX },\n-            visibility: self.vis.clean(cx),\n-            stability: None,\n-            deprecation: None,\n-            kind: ExternCrateItem(self.name.clean(cx), self.path.clone()),\n-        }]\n     }\n+    let path = orig_name.map(|x| x.to_string());\n+    // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n+    vec![Item {\n+        name: None,\n+        attrs: krate.attrs.clean(cx),\n+        source: krate.span.clean(cx),\n+        def_id: crate_def_id,\n+        visibility: krate.vis.clean(cx),\n+        stability: None,\n+        deprecation: None,\n+        kind: ExternCrateItem(name.clean(cx), path),\n+    }]\n }\n \n impl Clean<Vec<Item>> for doctree::Import<'_> {"}, {"sha": "20f747e2014158b3712c0501e078055c9db93d0e", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=66e30ec712eedc535fdb6a5394e0406ef4ddc737", "patch": "@@ -6,15 +6,12 @@ use rustc_ast as ast;\n use rustc_span::{self, symbol::Ident, Span, Symbol};\n \n use rustc_hir as hir;\n-use rustc_hir::def_id::CrateNum;\n-use rustc_hir::HirId;\n \n crate struct Module<'hir> {\n     crate name: Option<Symbol>,\n     crate attrs: &'hir [ast::Attribute],\n     crate where_outer: Span,\n     crate where_inner: Span,\n-    crate extern_crates: Vec<ExternCrate<'hir>>,\n     crate imports: Vec<Import<'hir>>,\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n@@ -33,7 +30,6 @@ impl Module<'hir> {\n             where_outer: rustc_span::DUMMY_SP,\n             where_inner: rustc_span::DUMMY_SP,\n             attrs,\n-            extern_crates: Vec::new(),\n             imports: Vec::new(),\n             mods: Vec::new(),\n             items: Vec::new(),\n@@ -69,16 +65,6 @@ crate struct Macro {\n     crate imported_from: Option<Symbol>,\n }\n \n-crate struct ExternCrate<'hir> {\n-    crate name: Symbol,\n-    crate hir_id: HirId,\n-    crate cnum: CrateNum,\n-    crate path: Option<String>,\n-    crate vis: &'hir hir::Visibility<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n-}\n-\n #[derive(Debug)]\n crate struct Import<'hir> {\n     crate name: Symbol,"}, {"sha": "e57717dab76cf65267192079611627e7bb260761", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e30ec712eedc535fdb6a5394e0406ef4ddc737/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=66e30ec712eedc535fdb6a5394e0406ef4ddc737", "patch": "@@ -5,7 +5,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n@@ -248,18 +248,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             // If we're inlining, skip private items.\n             _ if self.inlining && !item.vis.node.is_pub() => {}\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::ExternCrate(orig_name) => {\n-                let def_id = self.cx.tcx.hir().local_def_id(item.hir_id);\n-                om.extern_crates.push(ExternCrate {\n-                    cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id).unwrap_or(LOCAL_CRATE),\n-                    name: ident.name,\n-                    hir_id: item.hir_id,\n-                    path: orig_name.map(|x| x.to_string()),\n-                    vis: &item.vis,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                })\n-            }\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n             hir::ItemKind::Use(ref path, kind) => {\n                 let is_glob = kind == hir::UseKind::Glob;\n@@ -313,6 +301,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 ));\n             }\n             hir::ItemKind::Fn(..)\n+            | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Union(..)"}]}