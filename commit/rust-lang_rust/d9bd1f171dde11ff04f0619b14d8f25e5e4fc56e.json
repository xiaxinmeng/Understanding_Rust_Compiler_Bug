{"sha": "d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmQxZjE3MWRkZTExZmYwNGYwNjE5YjE0ZDhmMjVlNWU0ZmM1NmU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-02T21:55:35Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Add eager resolve capability", "tree": {"sha": "f5dde9ec4ee81337b0c87bb5e547dd3401f8fffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5dde9ec4ee81337b0c87bb5e547dd3401f8fffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "html_url": "https://github.com/rust-lang/rust/commit/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7be4afb000d97948bb7f11bcd074fc1e11716e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7be4afb000d97948bb7f11bcd074fc1e11716e", "html_url": "https://github.com/rust-lang/rust/commit/2a7be4afb000d97948bb7f11bcd074fc1e11716e"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "e9a02aeb8c2857aff3d926ab82f8364e268f7adf", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -29,6 +29,10 @@ impl CompletionConfig {\n     pub fn allow_snippets(&mut self, yes: bool) {\n         self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n     }\n+\n+    pub fn should_resolve_immediately(&self) -> bool {\n+        !self.resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]"}, {"sha": "5906637a6a0105cf9be7e0c8f01684729a0e09d0", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -3,8 +3,11 @@\n use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n-use ide_db::helpers::insert_use::{ImportScope, MergeBehaviour};\n-use syntax::TextRange;\n+use ide_db::helpers::{\n+    insert_use::{self, ImportScope, MergeBehaviour},\n+    mod_path_to_ast,\n+};\n+use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -207,6 +210,7 @@ impl CompletionItem {\n             score: None,\n             ref_match: None,\n             import_to_add: None,\n+            resolve_import_immediately: true,\n         }\n     }\n \n@@ -279,6 +283,7 @@ pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n     import_to_add: Option<ImportToAdd>,\n+    resolve_import_immediately: bool,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -300,6 +305,7 @@ impl Builder {\n         let mut label = self.label;\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;\n+        let mut text_edits = TextEdit::builder();\n \n         if let Some(import_to_add) = self.import_to_add.as_ref() {\n             let mut import_path_without_last_segment = import_to_add.import_path.to_owned();\n@@ -314,20 +320,35 @@ impl Builder {\n                 }\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n+\n+            if self.resolve_import_immediately {\n+                let rewriter = insert_use::insert_use(\n+                    &import_to_add.import_scope,\n+                    mod_path_to_ast(&import_to_add.import_path),\n+                    import_to_add.merge_behaviour,\n+                );\n+                if let Some(old_ast) = rewriter.rewrite_root() {\n+                    algo::diff(&old_ast, &rewriter.rewrite(&old_ast))\n+                        .into_text_edit(&mut text_edits);\n+                }\n+            }\n         }\n \n-        let text_edit = match self.text_edit {\n+        let original_edit = match self.text_edit {\n             Some(it) => it,\n             None => {\n                 TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n             }\n         };\n \n+        let mut resulting_edit = text_edits.finish();\n+        resulting_edit.union(original_edit).expect(\"Failed to unite text edits\");\n+\n         CompletionItem {\n             source_range: self.source_range,\n             label,\n             insert_text_format: self.insert_text_format,\n-            text_edit,\n+            text_edit: resulting_edit,\n             detail: self.detail,\n             documentation: self.documentation,\n             lookup,\n@@ -400,8 +421,13 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(mut self, import_to_add: Option<ImportToAdd>) -> Builder {\n+    pub(crate) fn add_import(\n+        mut self,\n+        import_to_add: Option<ImportToAdd>,\n+        resolve_import_immediately: bool,\n+    ) -> Builder {\n         self.import_to_add = import_to_add;\n+        self.resolve_import_immediately = resolve_import_immediately;\n         self\n     }\n     pub(crate) fn set_ref_match("}, {"sha": "b7a3a3935c500df484640bf35ec7870bcda67258", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -194,7 +194,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(import_to_add)\n+                .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n                 .build();\n                 return Some(item);\n             }\n@@ -249,7 +249,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .add_import(import_to_add)\n+            .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "c08824c6a7566efea630dea550021ddd76823dd3", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -71,7 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(import_to_add)\n+        .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "3492384c629b0c607c6e85b4f7d66b3e4aae8733", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -47,7 +47,7 @@ impl<'a> FunctionRender<'a> {\n             .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(import_to_add)\n+            .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n             .build()\n     }\n "}, {"sha": "15648b5b778eba9575b0746171127c592aa54a95", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -50,7 +50,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(import_to_add)\n+                .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "88351ee15ac43fb610b4097ffee9477fbd44ee95", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn check_edit_with_config(\n         .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n     let mut actual = db.file_text(position.file_id).to_string();\n     completion.text_edit().apply(&mut actual);\n-    // TODO kb how to apply imports now?\n+    // git  how to apply imports now?\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n "}, {"sha": "eeb2f6f932e3e576d6a239213276e80f2f997556", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "patch": "@@ -623,7 +623,7 @@ pub(crate) fn handle_resolve_completion(\n     for supported_completion_resolve_cap in &snap.config.completion.resolve_capabilities {\n         match supported_completion_resolve_cap {\n             ide::CompletionResolveCapability::AdditionalTextEdits => {\n-                // TODO kb actually add all additional edits here?\n+                // FIXME actually add all additional edits here?\n                 if let Some(import_to_add) = server_completion_data.item.import_to_add() {\n                     append_import_edits(\n                         &mut original_completion,\n@@ -633,7 +633,7 @@ pub(crate) fn handle_resolve_completion(\n                     );\n                 }\n             }\n-            // TODO kb calculate the rest also?\n+            // FIXME resolve the other capabilities also?\n             _ => {}\n         }\n     }"}]}