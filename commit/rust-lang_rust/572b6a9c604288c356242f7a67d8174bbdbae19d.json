{"sha": "572b6a9c604288c356242f7a67d8174bbdbae19d", "node_id": "C_kwDOAAsO6NoAKDU3MmI2YTljNjA0Mjg4YzM1NjI0MmY3YTY3ZDgxNzRiYmRiYWUxOWQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-06T18:08:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-06T09:41:12Z"}, "message": "rustc_target: Refactor internal linker flavors\n\nIn accordance with the design from https://github.com/rust-lang/rust/pull/96827#issuecomment-1208441595", "tree": {"sha": "0bd0253ac0fd7529f27bc8247c7170182e819d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd0253ac0fd7529f27bc8247c7170182e819d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572b6a9c604288c356242f7a67d8174bbdbae19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572b6a9c604288c356242f7a67d8174bbdbae19d", "html_url": "https://github.com/rust-lang/rust/commit/572b6a9c604288c356242f7a67d8174bbdbae19d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572b6a9c604288c356242f7a67d8174bbdbae19d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd30785eb6e55f317b41b7c278f438807eeb174", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd30785eb6e55f317b41b7c278f438807eeb174", "html_url": "https://github.com/rust-lang/rust/commit/4bd30785eb6e55f317b41b7c278f438807eeb174"}], "stats": {"total": 1007, "additions": 569, "deletions": 438}, "files": [{"sha": "6131bb4baf5ac52d4a49913ac7bdd300f718a1dd", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -23,8 +23,8 @@ use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n-use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n+use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, LinkerFlavorCli, Lld, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, Target};\n \n use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use super::command::Command;\n@@ -748,8 +748,7 @@ fn link_natively<'a>(\n         // then it should not default to linking executables as pie. Different\n         // versions of gcc seem to use different quotes in the error message so\n         // don't check for them.\n-        if sess.target.linker_is_gnu\n-            && flavor != LinkerFlavor::Ld\n+        if matches!(flavor, LinkerFlavor::Gnu(Cc::Yes, _))\n             && unknown_arg_regex.is_match(&out)\n             && out.contains(\"-no-pie\")\n             && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-no-pie\")\n@@ -767,8 +766,7 @@ fn link_natively<'a>(\n \n         // Detect '-static-pie' used with an older version of gcc or clang not supporting it.\n         // Fallback from '-static-pie' to '-static' in that case.\n-        if sess.target.linker_is_gnu\n-            && flavor != LinkerFlavor::Ld\n+        if matches!(flavor, LinkerFlavor::Gnu(Cc::Yes, _))\n             && unknown_arg_regex.is_match(&out)\n             && (out.contains(\"-static-pie\") || out.contains(\"--no-dynamic-linker\"))\n             && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-static-pie\")\n@@ -903,7 +901,7 @@ fn link_natively<'a>(\n                 // install the Visual Studio build tools.\n                 if let Some(code) = prog.status.code() {\n                     if sess.target.is_like_msvc\n-                        && flavor == LinkerFlavor::Msvc\n+                        && flavor == LinkerFlavor::Msvc(Lld::No)\n                         // Respect the command line override\n                         && sess.opts.cg.linker.is_none()\n                         // Match exactly \"link.exe\"\n@@ -1187,7 +1185,10 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n             // only the linker flavor is known; use the default linker for the selected flavor\n             (None, Some(flavor)) => Some((\n                 PathBuf::from(match flavor {\n-                    LinkerFlavor::Gcc => {\n+                    LinkerFlavor::Gnu(Cc::Yes, _)\n+                    | LinkerFlavor::Darwin(Cc::Yes, _)\n+                    | LinkerFlavor::WasmLld(Cc::Yes)\n+                    | LinkerFlavor::Unix(Cc::Yes) => {\n                         if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n                             // been Sun Studio, which is not flag-compatible\n@@ -1200,9 +1201,14 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                             \"cc\"\n                         }\n                     }\n-                    LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::Gnu(_, Lld::Yes)\n+                    | LinkerFlavor::Darwin(_, Lld::Yes)\n+                    | LinkerFlavor::WasmLld(..)\n+                    | LinkerFlavor::Msvc(Lld::Yes) => \"lld\",\n+                    LinkerFlavor::Gnu(..) | LinkerFlavor::Darwin(..) | LinkerFlavor::Unix(..) => {\n+                        \"ld\"\n+                    }\n+                    LinkerFlavor::Msvc(..) => \"link.exe\",\n                     LinkerFlavor::EmCc => {\n                         if cfg!(windows) {\n                             \"emcc.bat\"\n@@ -1227,15 +1233,20 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     || stem == \"clang\"\n                     || stem.ends_with(\"-clang\")\n                 {\n-                    LinkerFlavor::Gcc\n+                    LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n                 } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {\n-                    LinkerFlavor::Lld(LldFlavor::Wasm)\n-                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::Ld\n-                } else if stem == \"link\" || stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc\n+                    LinkerFlavor::WasmLld(Cc::No)\n+                } else if stem == \"ld\" || stem.ends_with(\"-ld\") {\n+                    LinkerFlavor::from_cli(LinkerFlavorCli::Ld, &sess.target)\n+                } else if stem == \"ld.lld\" {\n+                    LinkerFlavor::Gnu(Cc::No, Lld::Yes)\n+                } else if stem == \"link\" {\n+                    LinkerFlavor::Msvc(Lld::No)\n+                } else if stem == \"lld-link\" {\n+                    LinkerFlavor::Msvc(Lld::Yes)\n                 } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.lld_flavor)\n+                    let lld_flavor = sess.target.linker_flavor.lld_flavor();\n+                    LinkerFlavor::from_cli(LinkerFlavorCli::Lld(lld_flavor), &sess.target)\n                 } else {\n                     // fall back to the value in the target spec\n                     sess.target.linker_flavor\n@@ -1249,7 +1260,8 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n-    let linker_flavor = sess.opts.cg.linker_flavor.map(LinkerFlavor::from_cli);\n+    let linker_flavor =\n+        sess.opts.cg.linker_flavor.map(|flavor| LinkerFlavor::from_cli(flavor, &sess.target));\n     if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }\n@@ -1320,7 +1332,7 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n                     let verbatim = lib.verbatim.unwrap_or(false);\n                     if sess.target.is_like_msvc {\n                         Some(format!(\"{}{}\", name, if verbatim { \"\" } else { \".lib\" }))\n-                    } else if sess.target.linker_is_gnu {\n+                    } else if sess.target.linker_flavor.is_gnu() {\n                         Some(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, name))\n                     } else {\n                         Some(format!(\"-l{}\", name))\n@@ -1607,7 +1619,7 @@ fn add_pre_link_objects(\n     let empty = Default::default();\n     let objects = if self_contained {\n         &opts.pre_link_objects_self_contained\n-    } else if !(sess.target.os == \"fuchsia\" && flavor == LinkerFlavor::Gcc) {\n+    } else if !(sess.target.os == \"fuchsia\" && matches!(flavor, LinkerFlavor::Gnu(Cc::Yes, _))) {\n         &opts.pre_link_objects\n     } else {\n         &empty\n@@ -1647,7 +1659,7 @@ fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor)\n fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_type: CrateType) {\n     match (crate_type, &sess.target.link_script) {\n         (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n-            if !sess.target.linker_is_gnu {\n+            if !sess.target.linker_flavor.is_gnu() {\n                 sess.fatal(\"can only use link script when linking with GNU-like linker\");\n             }\n \n@@ -1890,7 +1902,7 @@ fn add_rpath_args(\n             out_filename: out_filename.to_path_buf(),\n             has_rpath: sess.target.has_rpath,\n             is_like_osx: sess.target.is_like_osx,\n-            linker_is_gnu: sess.target.linker_is_gnu,\n+            linker_is_gnu: sess.target.linker_flavor.is_gnu(),\n         };\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n     }\n@@ -2104,7 +2116,7 @@ fn add_order_independent_options(\n \n     if sess.target.os == \"fuchsia\"\n         && crate_type == CrateType::Executable\n-        && flavor != LinkerFlavor::Gcc\n+        && !matches!(flavor, LinkerFlavor::Gnu(Cc::Yes, _))\n     {\n         let prefix = if sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n@@ -2717,12 +2729,12 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n         || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\" | \"macos\")\n-        || (flavor != LinkerFlavor::Gcc && flavor != LinkerFlavor::Lld(LldFlavor::Ld64))\n+        || !matches!(flavor, LinkerFlavor::Darwin(..))\n     {\n         return;\n     }\n \n-    if os == \"macos\" && flavor != LinkerFlavor::Lld(LldFlavor::Ld64) {\n+    if os == \"macos\" && !matches!(flavor, LinkerFlavor::Darwin(Cc::No, _)) {\n         return;\n     }\n \n@@ -2756,10 +2768,10 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     };\n \n     match flavor {\n-        LinkerFlavor::Gcc => {\n+        LinkerFlavor::Darwin(Cc::Yes, _) => {\n             cmd.args(&[\"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n         }\n-        LinkerFlavor::Lld(LldFlavor::Ld64) => {\n+        LinkerFlavor::Darwin(Cc::No, _) => {\n             cmd.args(&[\"-syslibroot\", &sdk_root]);\n         }\n         _ => unreachable!(),\n@@ -2822,7 +2834,10 @@ fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n \n fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     if let Some(ld_impl) = sess.opts.unstable_opts.gcc_ld {\n-        if let LinkerFlavor::Gcc = flavor {\n+        if let LinkerFlavor::Gnu(Cc::Yes, _)\n+        | LinkerFlavor::Darwin(Cc::Yes, _)\n+        | LinkerFlavor::WasmLld(Cc::Yes) = flavor\n+        {\n             match ld_impl {\n                 LdImpl::Lld => {\n                     // Implement the \"self-contained\" part of -Zgcc-ld\n@@ -2837,7 +2852,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n                     // Implement the \"linker flavor\" part of -Zgcc-ld\n                     // by asking cc to use some kind of lld.\n                     cmd.arg(\"-fuse-ld=lld\");\n-                    if sess.target.lld_flavor != LldFlavor::Ld {\n+                    if !flavor.is_gnu() {\n                         // Tell clang to use a non-default LLD flavor.\n                         // Gcc doesn't understand the target option, but we currently assume\n                         // that gcc is not used for Apple and Wasm targets (#97402)."}, {"sha": "c71d332475a5fe623bfa22ddd12a285991e91750", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 37, "deletions": 45, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, S\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n use rustc_session::Session;\n-use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n+use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, Lld};\n \n use cc::windows_registry;\n \n@@ -56,8 +56,13 @@ pub fn get_linker<'a>(\n     let mut cmd = match linker.to_str() {\n         Some(linker) if cfg!(windows) && linker.ends_with(\".bat\") => Command::bat_script(linker),\n         _ => match flavor {\n-            LinkerFlavor::Lld(f) => Command::lld(linker, f),\n-            LinkerFlavor::Msvc if sess.opts.cg.linker.is_none() && sess.target.linker.is_none() => {\n+            LinkerFlavor::Gnu(Cc::No, Lld::Yes)\n+            | LinkerFlavor::Darwin(Cc::No, Lld::Yes)\n+            | LinkerFlavor::WasmLld(Cc::No)\n+            | LinkerFlavor::Msvc(Lld::Yes) => Command::lld(linker, flavor.lld_flavor()),\n+            LinkerFlavor::Msvc(Lld::No)\n+                if sess.opts.cg.linker.is_none() && sess.target.linker.is_none() =>\n+            {\n                 Command::new(msvc_tool.as_ref().map_or(linker, |t| t.path()))\n             }\n             _ => Command::new(linker),\n@@ -68,9 +73,7 @@ pub fn get_linker<'a>(\n     // To comply with the Windows App Certification Kit,\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target;\n-    if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n-        && t.vendor == \"uwp\"\n-    {\n+    if matches!(flavor, LinkerFlavor::Msvc(..)) && t.vendor == \"uwp\" {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n             if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n@@ -126,23 +129,22 @@ pub fn get_linker<'a>(\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     match flavor {\n-        LinkerFlavor::Gcc => {\n-            Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: false })\n-                as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Ld if sess.target.os == \"l4re\" => {\n+        LinkerFlavor::Unix(Cc::No) if sess.target.os == \"l4re\" => {\n             Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n         }\n-        LinkerFlavor::Lld(LldFlavor::Ld)\n-        | LinkerFlavor::Lld(LldFlavor::Ld64)\n-        | LinkerFlavor::Ld => {\n-            Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: true })\n-                as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Lld(LldFlavor::Wasm) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n+        LinkerFlavor::WasmLld(Cc::No) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n+        LinkerFlavor::Gnu(cc, _)\n+        | LinkerFlavor::Darwin(cc, _)\n+        | LinkerFlavor::WasmLld(cc)\n+        | LinkerFlavor::Unix(cc) => Box::new(GccLinker {\n+            cmd,\n+            sess,\n+            target_cpu,\n+            hinted_static: false,\n+            is_ld: cc == Cc::No,\n+            is_gnu: flavor.is_gnu(),\n+        }) as Box<dyn Linker>,\n+        LinkerFlavor::Msvc(..) => Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::EmCc => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::Bpf => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::Ptx => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n@@ -211,6 +213,7 @@ pub struct GccLinker<'a> {\n     hinted_static: bool, // Keeps track of the current hinting mode.\n     // Link as ld\n     is_ld: bool,\n+    is_gnu: bool,\n }\n \n impl<'a> GccLinker<'a> {\n@@ -359,7 +362,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n         match output_kind {\n             LinkOutputKind::DynamicNoPicExe => {\n-                if !self.is_ld && self.sess.target.linker_is_gnu {\n+                if !self.is_ld && self.is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -373,7 +376,7 @@ impl<'a> Linker for GccLinker<'a> {\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n                 self.cmd.arg(\"-static\");\n-                if !self.is_ld && self.sess.target.linker_is_gnu {\n+                if !self.is_ld && self.is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -432,31 +435,25 @@ impl<'a> Linker for GccLinker<'a> {\n                 // has -needed-l{} / -needed_library {}\n                 // but we have no way to detect that here.\n                 self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n-            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n+            } else if self.is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--no-as-needed\");\n             } else {\n                 self.sess.warn(\"`as-needed` modifier not supported for current linker\");\n             }\n         }\n         self.hint_dynamic();\n-        self.cmd.arg(format!(\n-            \"-l{}{lib}\",\n-            if verbatim && self.sess.target.linker_is_gnu { \":\" } else { \"\" },\n-        ));\n+        self.cmd.arg(format!(\"-l{}{lib}\", if verbatim && self.is_gnu { \":\" } else { \"\" },));\n         if !as_needed {\n             if self.sess.target.is_like_osx {\n                 // See above FIXME comment\n-            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n+            } else if self.is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--as-needed\");\n             }\n         }\n     }\n     fn link_staticlib(&mut self, lib: &str, verbatim: bool) {\n         self.hint_static();\n-        self.cmd.arg(format!(\n-            \"-l{}{lib}\",\n-            if verbatim && self.sess.target.linker_is_gnu { \":\" } else { \"\" },\n-        ));\n+        self.cmd.arg(format!(\"-l{}{lib}\", if verbatim && self.is_gnu { \":\" } else { \"\" },));\n     }\n     fn link_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n@@ -511,10 +508,7 @@ impl<'a> Linker for GccLinker<'a> {\n         let target = &self.sess.target;\n         if !target.is_like_osx {\n             self.linker_arg(\"--whole-archive\");\n-            self.cmd.arg(format!(\n-                \"-l{}{lib}\",\n-                if verbatim && self.sess.target.linker_is_gnu { \":\" } else { \"\" },\n-            ));\n+            self.cmd.arg(format!(\"-l{}{lib}\", if verbatim && self.is_gnu { \":\" } else { \"\" },));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n@@ -559,21 +553,19 @@ impl<'a> Linker for GccLinker<'a> {\n         // eliminate the metadata. If we're building an executable, however,\n         // --gc-sections drops the size of hello world from 1.8MB to 597K, a 67%\n         // reduction.\n-        } else if (self.sess.target.linker_is_gnu || self.sess.target.is_like_wasm)\n-            && !keep_metadata\n-        {\n+        } else if (self.is_gnu || self.sess.target.is_like_wasm) && !keep_metadata {\n             self.linker_arg(\"--gc-sections\");\n         }\n     }\n \n     fn no_gc_sections(&mut self) {\n-        if self.sess.target.linker_is_gnu || self.sess.target.is_like_wasm {\n+        if self.is_gnu || self.sess.target.is_like_wasm {\n             self.linker_arg(\"--no-gc-sections\");\n         }\n     }\n \n     fn optimize(&mut self) {\n-        if !self.sess.target.linker_is_gnu && !self.sess.target.is_like_wasm {\n+        if !self.is_gnu && !self.sess.target.is_like_wasm {\n             return;\n         }\n \n@@ -587,7 +579,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn pgo_gen(&mut self) {\n-        if !self.sess.target.linker_is_gnu {\n+        if !self.is_gnu {\n             return;\n         }\n \n@@ -758,13 +750,13 @@ impl<'a> Linker for GccLinker<'a> {\n     fn add_no_exec(&mut self) {\n         if self.sess.target.is_like_windows {\n             self.linker_arg(\"--nxcompat\");\n-        } else if self.sess.target.linker_is_gnu {\n+        } else if self.is_gnu {\n             self.linker_arg(\"-znoexecstack\");\n         }\n     }\n \n     fn add_as_needed(&mut self) {\n-        if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n+        if self.is_gnu && !self.sess.target.is_like_windows {\n             self.linker_arg(\"--as-needed\");\n         } else if self.sess.target.is_like_solaris {\n             // -z ignore is the Solaris equivalent to the GNU ld --as-needed option"}, {"sha": "2d2671549cf5196dd6c8fbb1a6d6fa56433ed1e0", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{FramePointer, LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"arm64-apple-ios14.0-macabi\";\n \n     let mut base = opts(\"ios\", Arch::Arm64_macabi);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "529e98d2cf31c302ea917fadd526c57ca258f244", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel, Target, TargetOptions};\n+use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelroLevel, Target, TargetOptions};\n \n const LINKER_SCRIPT: &str = include_str!(\"./aarch64_nintendo_switch_freestanding_linker_script.ld\");\n \n@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             link_script: Some(LINKER_SCRIPT.into()),\n             os: \"horizon\".into(),"}, {"sha": "4ae6d4120c9958978820a67141fdf7ef8edfd923", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -6,11 +6,11 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+strict-align,+neon,+fp-armv8\".into(),\n         relocation_model: RelocModel::Static,"}, {"sha": "2385cb69abbefe581d035db1f0efdda80a27c70d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -6,12 +6,12 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n         abi: \"softfloat\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+strict-align,-neon,-fp-armv8\".into(),\n         relocation_model: RelocModel::Static,"}, {"sha": "817ff2422a203837046295d00c2f77bf92b6a512", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -2,13 +2,13 @@\n // uefi-base module for generic UEFI options.\n \n use super::uefi_msvc_base;\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = uefi_msvc_base::opts();\n \n     base.max_atomic_width = Some(128);\n-    base.add_pre_link_args(LinkerFlavor::Msvc, &[\"/machine:arm64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Msvc(Lld::No), &[\"/machine:arm64\"]);\n \n     Target {\n         llvm_target: \"aarch64-unknown-windows\".into(),"}, {"sha": "40bc59ca145e5f0d72eb467dcc46da0b192c552f", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,7 +1,7 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{cvs, DebuginfoKind, FramePointer, SplitDebuginfo, StaticCow, TargetOptions};\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor};\n+use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n+use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n \n fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n@@ -20,17 +20,16 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     .into();\n \n     let mut args = TargetOptions::link_args(\n-        LinkerFlavor::Lld(LldFlavor::Ld64),\n+        LinkerFlavor::Darwin(Cc::No, Lld::No),\n         &[\"-arch\", arch, \"-platform_version\"],\n     );\n-    // Manually add owned args unsupported by link arg building helpers.\n-    args.entry(LinkerFlavor::Lld(LldFlavor::Ld64)).or_default().extend([\n-        platform_name,\n-        platform_version.clone(),\n-        platform_version,\n-    ]);\n+    super::add_link_args_iter(\n+        &mut args,\n+        LinkerFlavor::Darwin(Cc::No, Lld::No),\n+        [platform_name, platform_version.clone(), platform_version].into_iter(),\n+    );\n     if abi != \"macabi\" {\n-        super::add_link_args(&mut args, LinkerFlavor::Gcc, &[\"-arch\", arch]);\n+        super::add_link_args(&mut args, LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-arch\", arch]);\n     }\n \n     args\n@@ -55,11 +54,11 @@ pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOp\n     TargetOptions {\n         os: os.into(),\n         vendor: \"apple\".into(),\n+        linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n         pre_link_args: pre_link_args(os, arch, abi),\n-        linker_is_gnu: false,\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n         default_dwarf_version: 2,\n@@ -71,7 +70,6 @@ pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOp\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,\n-        lld_flavor: LldFlavor::Ld64,\n \n         debuginfo_kind: DebuginfoKind::DwarfDsym,\n         // The historical default for macOS targets is to run `dsymutil` which"}, {"sha": "8c65d6afcc1823a507b47b5a0373cfb6b808afbb", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,7 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -13,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n             endian: Endian::Big,\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "7013bc60d16ba216383cc27d5323489414b8256f", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,7 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -13,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             abi: \"eabihf\".into(),\n             endian: Endian::Big,\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "7ac1aab3b43c8f851dcd3e634defb690f80e7c3c", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -16,7 +16,7 @@\n //! The default link script is very likely wrong, so you should use\n //! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -35,7 +35,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Ld,\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n             linker: Some(\"arm-none-eabi-ld\".into()),\n             asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n             // Force-enable 32-bit atomics, which allows the use of atomic load/store only."}, {"sha": "40ec6f961f5445b366fb375d35429d0451e84260", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{cvs, LinkerFlavor, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, RelocModel, Target, TargetOptions};\n \n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///\n /// Requires the devkitARM toolchain for 3DS targets on the host system.\n \n pub fn target() -> Target {\n     let pre_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n         &[\"-specs=3dsx.specs\", \"-mtune=mpcore\", \"-mfloat-abi=hard\", \"-mtp=soft\"],\n     );\n \n@@ -21,7 +21,6 @@ pub fn target() -> Target {\n             env: \"newlib\".into(),\n             vendor: \"nintendo\".into(),\n             abi: \"eabihf\".into(),\n-            linker_flavor: LinkerFlavor::Gcc,\n             cpu: \"mpcore\".into(),\n             families: cvs![\"unix\"],\n             linker: Some(\"arm-none-eabi-gcc\".into()),"}, {"sha": "402e0fd92363e5946f77b6c8e6901744377ae53c", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, Target, TargetOptions};\n \n // This target if is for the baseline of the Android v7a ABI\n // in thumb mode. It's named armv7-* instead of thumbv7-*\n@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-march=armv7-a\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-march=armv7-a\"]);\n     Target {\n         llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,"}, {"sha": "4e20fb3256975c783f811d6df34ad16235ef4125", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -14,12 +14,12 @@\n // - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n // linking. rationale: matches `thumb` targets\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n         abi: \"eabi\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".into(),\n         relocation_model: RelocModel::Static,"}, {"sha": "ae70129ae5182303f82f6f0f57b4428c8092515a", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -5,12 +5,12 @@\n // changes (list in `armv7a_none_eabi.rs`) to bring it closer to the bare-metal\n // `thumb` & `aarch64` targets.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n         abi: \"eabihf\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".into(),\n         relocation_model: RelocModel::Static,"}, {"sha": "25f301ccce744304d177a51002c8aa38ca102032", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -12,7 +11,7 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "40449759dd377fca70def34075a2daacdb3fdf62", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -12,7 +11,7 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             abi: \"eabihf\".into(),\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "9c3406b53130ec59c802e06a6a6d64615526cfef", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, RelocModel, Target, TargetOptions};\n \n /// A base target for AVR devices using the GNU toolchain.\n ///\n@@ -17,8 +17,11 @@ pub fn target(target_cpu: &'static str, mmcu: &'static str) -> Target {\n \n             linker: Some(\"avr-gcc\".into()),\n             eh_frame_header: false,\n-            pre_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[mmcu]),\n-            late_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-lgcc\"]),\n+            pre_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[mmcu]),\n+            late_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-lgcc\"],\n+            ),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             relocation_model: RelocModel::Static,"}, {"sha": "4c2775850d13245cd7f67968e0367a14eac86a1d", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{crt_objects, cvs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{crt_objects, cvs, Cc, LinkOutputKind, LinkerFlavor, Lld, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // This mirrors the linker options provided by clang. We presume lld for\n@@ -7,7 +7,7 @@ pub fn opts() -> TargetOptions {\n     //\n     // https://github.com/llvm/llvm-project/blob/db9322b2066c55254e7691efeab863f43bfcc084/clang/lib/Driver/ToolChains/Fuchsia.cpp#L31\n     let pre_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Ld,\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n         &[\n             \"--build-id\",\n             \"--hash-style=gnu\",\n@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         os: \"fuchsia\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         dynamic_linking: true,\n         families: cvs![\"unix\"],"}, {"sha": "dd9991381e7b93651d13dbce842a51c123376078", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let pre_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Ld,\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n         &[\"--build-id\", \"--hash-style=gnu\", \"--Bstatic\"],\n     );\n \n     TargetOptions {\n         os: \"hermit\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         has_thread_local: true,\n         pre_link_args,"}, {"sha": "3aad05eb2719b7aa28b532400a6fa7950f1a58b9", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::Target;\n+use crate::spec::{Cc, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -9,7 +9,7 @@ pub fn target() -> Target {\n \n     base.crt_static_default = false;\n     base.has_rpath = true;\n-    base.linker_is_gnu = false;\n+    base.linker_flavor = LinkerFlavor::Unix(Cc::Yes);\n \n     base.c_enum_min_bits = 8;\n "}, {"sha": "15607c12ea906c54ad95416d84a039caac439bd4", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     // ld64 only understand i386 and not i686\n     let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;"}, {"sha": "7a11138754fa85f8e4f3cfa6071144e48df8a0e8", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{FramePointer, LinkerFlavor, Target};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n@@ -9,8 +9,11 @@ pub fn target() -> Target {\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n+        &[\"-m\", \"i386pe\", \"--large-address-aware\"],\n+    );\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-Wl,--large-address-aware\"]);\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".into(),"}, {"sha": "db4c00dc697d79ea88d9347f235a025e32b99483", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n \n     base.add_pre_link_args(\n-        LinkerFlavor::Msvc,\n+        LinkerFlavor::Msvc(Lld::No),\n         &[\n             // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n             // space available to x86 Windows binaries on x86_64."}, {"sha": "35ca78034f1708f6ec467c2f9f89c9b65a669d2f", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-znotext\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\", \"-Wl,-znotext\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "e6b72336c5cf5f80ed9521e73313379e832e8104", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "73e536a7e4d934b0b8614535da510d2b79cdd524", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.supported_sanitizers = SanitizerSet::ADDRESS;\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "3825082ba25e401a75a3e95958ddc41fbb6b74e3", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-melf_i386\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\", \"-Wl,-melf_i386\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind"}, {"sha": "b191996c7de0dc33b2e02b7b999bbeca9bdaeef6", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "8babe559712801e8e9f480a2a0764de8103a151c", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-fuse-ld=lld\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\", \"-fuse-ld=lld\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "a3e32569827fb9967674fbd367382cb539d9043d", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{FramePointer, LinkerFlavor, Target};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n@@ -8,8 +8,11 @@ pub fn target() -> Target {\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n+        &[\"-m\", \"i386pe\", \"--large-address-aware\"],\n+    );\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-Wl,--large-address-aware\"]);\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".into(),"}, {"sha": "b5cfdfcebea90977a2c869bd8930cf0f645dcdc0", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "8ac351584434848f258c452b37cafa6964ba8084", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{cvs, FramePointer, LinkerFlavor, TargetOptions};\n+use crate::spec::{cvs, Cc, FramePointer, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let late_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::Unix(Cc::Yes),\n         &[\n             // The illumos libc contains a stack unwinding implementation, as\n             // does libgcc_s.  The latter implementation includes several\n@@ -30,7 +30,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         families: cvs![\"unix\"],\n         is_like_solaris: true,\n-        linker_is_gnu: false,\n+        linker_flavor: LinkerFlavor::Unix(Cc::Yes),\n         limit_rdylib_exports: false, // Linker doesn't support this\n         frame_pointer: FramePointer::Always,\n         eh_frame_header: false,"}, {"sha": "3a4d83fad175102425f9a6579b49ecc8d50d8b4e", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,13 +1,12 @@\n-use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".into(),\n         env: \"uclibc\".into(),\n-        linker_flavor: LinkerFlavor::Ld,\n+        linker_flavor: LinkerFlavor::Unix(Cc::No),\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n-        linker_is_gnu: false,\n         families: cvs![\"unix\"],\n         relocation_model: RelocModel::Static,\n         ..Default::default()"}, {"sha": "75beb91b13a5ec5558b9530cd4fba88c09c5d0ba", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,13 @@\n-use crate::spec::{cvs, Target, TargetOptions};\n-use crate::spec::{LinkerFlavor, LldFlavor, RelocModel};\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, RelocModel, Target, TargetOptions};\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n pub fn target() -> Target {\n-    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Ld, &[\"--emit-relocs\", \"--nmagic\"]);\n+    let pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n+        &[\"--emit-relocs\", \"--nmagic\"],\n+    );\n \n     Target {\n         llvm_target: \"mipsel-sony-psp\".into(),\n@@ -16,7 +18,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             os: \"psp\".into(),\n             vendor: \"sony\".into(),\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             cpu: \"mips2\".into(),\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,"}, {"sha": "43b01e7a062dc913cd995469f55782dddb9b53f1", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -2,8 +2,7 @@\n //!\n //! Can be used for MIPS M4K core (e.g. on PIC32MX devices)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, RelocModel};\n-use crate::spec::{PanicStrategy, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -13,7 +12,7 @@ pub fn target() -> Target {\n         arch: \"mips\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             cpu: \"mips32r2\".into(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".into(),\n             max_atomic_width: Some(32),"}, {"sha": "9396d769dc702ac18c70df77e150428d7f2d205f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 182, "deletions": 47, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -90,17 +90,73 @@ mod windows_msvc_base;\n mod windows_uwp_gnu_base;\n mod windows_uwp_msvc_base;\n \n+/// Linker is called through a C/C++ compiler.\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub enum Cc {\n+    Yes,\n+    No,\n+}\n+\n+/// Linker is LLD.\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub enum Lld {\n+    Yes,\n+    No,\n+}\n+\n+/// All linkers have some kinds of command line interfaces and rustc needs to know which commands\n+/// to use with each of them. So we cluster all such interfaces into a (somewhat arbitrary) number\n+/// of classes that we call \"linker flavors\".\n+///\n+/// Technically, it's not even necessary, we can nearly always infer the flavor from linker name\n+/// and target properties like `is_like_windows`/`is_like_osx`/etc. However, the PRs originally\n+/// introducing `-Clinker-flavor` (#40018 and friends) were aiming to reduce this kind of inference\n+/// and provide something certain and explicitly specified instead, and that design goal is still\n+/// relevant now.\n+///\n+/// The second goal is to keep the number of flavors to the minimum if possible.\n+/// LLD somewhat forces our hand here because that linker is self-sufficent only if its executable\n+/// (`argv[0]`) is named in specific way, otherwise it doesn't work and requires a\n+/// `-flavor LLD_FLAVOR` argument to choose which logic to use. Our shipped `rust-lld` in\n+/// particular is not named in such specific way, so it needs the flavor option, so we make our\n+/// linker flavors sufficiently fine-grained to satisfy LLD without inferring its flavor from other\n+/// target properties, in accordance with the first design goal.\n+///\n+/// The first component of the flavor is tightly coupled with the compilation target,\n+/// while the `Cc` and `Lld` flags can vary withing the same target.\n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n-    Gcc,\n-    Ld,\n-    Lld(LldFlavor),\n-    Msvc,\n+    /// Unix-like linker with GNU extensions (both naked and compiler-wrapped forms).\n+    /// Besides similar \"default\" Linux/BSD linkers this also includes Windows/GNU linker,\n+    /// which is somewhat different because it doesn't produce ELFs.\n+    Gnu(Cc, Lld),\n+    /// Unix-like linker for Apple targets (both naked and compiler-wrapped forms).\n+    /// Extracted from the \"umbrella\" `Unix` flavor due to its corresponding LLD flavor.\n+    Darwin(Cc, Lld),\n+    /// Unix-like linker for Wasm targets (both naked and compiler-wrapped forms).\n+    /// Extracted from the \"umbrella\" `Unix` flavor due to its corresponding LLD flavor.\n+    /// Non-LLD version does not exist, so the lld flag is currently hardcoded here.\n+    WasmLld(Cc),\n+    /// Basic Unix-like linker for \"any other Unix\" targets (Solaris/illumos, L4Re, MSP430, etc),\n+    /// possibly with non-GNU extensions (both naked and compiler-wrapped forms).\n+    /// LLD doesn't support any of these.\n+    Unix(Cc),\n+    /// MSVC-style linker for Windows and UEFI, LLD supports it.\n+    Msvc(Lld),\n+    /// Emscripten Compiler Frontend, a wrapper around `WasmLld(Cc::Yes)` that has a different\n+    /// interface and produces some additional JavaScript output.\n     EmCc,\n+    // Below: other linker-like tools with unique interfaces for exotic targets.\n+    /// Linker tool for BPF.\n     Bpf,\n+    /// Linker tool for Nvidia PTX.\n     Ptx,\n }\n \n+/// Linker flavors available externally through command line (`-Clinker-flavor`)\n+/// or json target specifications.\n+/// FIXME: This set has accumulated historically, bring it more in line with the internal\n+/// linker flavors (`LinkerFlavor`).\n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavorCli {\n     Gcc,\n@@ -148,12 +204,32 @@ impl ToJson for LldFlavor {\n }\n \n impl LinkerFlavor {\n-    pub fn from_cli(cli: LinkerFlavorCli) -> LinkerFlavor {\n+    pub fn from_cli(cli: LinkerFlavorCli, target: &TargetOptions) -> LinkerFlavor {\n+        Self::from_cli_impl(cli, target.linker_flavor.lld_flavor(), target.linker_flavor.is_gnu())\n+    }\n+\n+    /// The passed CLI flavor is preferred over other args coming from the default target spec,\n+    /// so this function can produce a flavor that is incompatible with the current target.\n+    /// FIXME: Produce errors when `-Clinker-flavor` is set to something incompatible\n+    /// with the current target.\n+    fn from_cli_impl(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n         match cli {\n-            LinkerFlavorCli::Gcc => LinkerFlavor::Gcc,\n-            LinkerFlavorCli::Ld => LinkerFlavor::Ld,\n-            LinkerFlavorCli::Lld(lld_flavor) => LinkerFlavor::Lld(lld_flavor),\n-            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n+            LinkerFlavorCli::Gcc => match lld_flavor {\n+                LldFlavor::Ld if is_gnu => LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                LldFlavor::Ld64 => LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n+                LldFlavor::Wasm => LinkerFlavor::WasmLld(Cc::Yes),\n+                LldFlavor::Ld | LldFlavor::Link => LinkerFlavor::Unix(Cc::Yes),\n+            },\n+            LinkerFlavorCli::Ld => match lld_flavor {\n+                LldFlavor::Ld if is_gnu => LinkerFlavor::Gnu(Cc::No, Lld::No),\n+                LldFlavor::Ld64 => LinkerFlavor::Darwin(Cc::No, Lld::No),\n+                LldFlavor::Ld | LldFlavor::Wasm | LldFlavor::Link => LinkerFlavor::Unix(Cc::No),\n+            },\n+            LinkerFlavorCli::Lld(LldFlavor::Ld) => LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n+            LinkerFlavorCli::Lld(LldFlavor::Ld64) => LinkerFlavor::Darwin(Cc::No, Lld::Yes),\n+            LinkerFlavorCli::Lld(LldFlavor::Wasm) => LinkerFlavor::WasmLld(Cc::No),\n+            LinkerFlavorCli::Lld(LldFlavor::Link) => LinkerFlavor::Msvc(Lld::Yes),\n+            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc(Lld::No),\n             LinkerFlavorCli::Em => LinkerFlavor::EmCc,\n             LinkerFlavorCli::BpfLinker => LinkerFlavor::Bpf,\n             LinkerFlavorCli::PtxLinker => LinkerFlavor::Ptx,\n@@ -162,15 +238,40 @@ impl LinkerFlavor {\n \n     fn to_cli(self) -> LinkerFlavorCli {\n         match self {\n-            LinkerFlavor::Gcc => LinkerFlavorCli::Gcc,\n-            LinkerFlavor::Ld => LinkerFlavorCli::Ld,\n-            LinkerFlavor::Lld(lld_flavor) => LinkerFlavorCli::Lld(lld_flavor),\n-            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n+            LinkerFlavor::Gnu(Cc::Yes, _)\n+            | LinkerFlavor::Darwin(Cc::Yes, _)\n+            | LinkerFlavor::WasmLld(Cc::Yes)\n+            | LinkerFlavor::Unix(Cc::Yes) => LinkerFlavorCli::Gcc,\n+            LinkerFlavor::Gnu(_, Lld::Yes) => LinkerFlavorCli::Lld(LldFlavor::Ld),\n+            LinkerFlavor::Darwin(_, Lld::Yes) => LinkerFlavorCli::Lld(LldFlavor::Ld64),\n+            LinkerFlavor::WasmLld(..) => LinkerFlavorCli::Lld(LldFlavor::Wasm),\n+            LinkerFlavor::Gnu(..) | LinkerFlavor::Darwin(..) | LinkerFlavor::Unix(..) => {\n+                LinkerFlavorCli::Ld\n+            }\n+            LinkerFlavor::Msvc(Lld::Yes) => LinkerFlavorCli::Lld(LldFlavor::Link),\n+            LinkerFlavor::Msvc(..) => LinkerFlavorCli::Msvc,\n             LinkerFlavor::EmCc => LinkerFlavorCli::Em,\n             LinkerFlavor::Bpf => LinkerFlavorCli::BpfLinker,\n             LinkerFlavor::Ptx => LinkerFlavorCli::PtxLinker,\n         }\n     }\n+\n+    pub fn lld_flavor(self) -> LldFlavor {\n+        match self {\n+            LinkerFlavor::Gnu(..)\n+            | LinkerFlavor::Unix(..)\n+            | LinkerFlavor::EmCc\n+            | LinkerFlavor::Bpf\n+            | LinkerFlavor::Ptx => LldFlavor::Ld,\n+            LinkerFlavor::Darwin(..) => LldFlavor::Ld64,\n+            LinkerFlavor::WasmLld(..) => LldFlavor::Wasm,\n+            LinkerFlavor::Msvc(..) => LldFlavor::Link,\n+        }\n+    }\n+\n+    pub fn is_gnu(self) -> bool {\n+        matches!(self, LinkerFlavor::Gnu(..))\n+    }\n }\n \n macro_rules! linker_flavor_cli_impls {\n@@ -1258,16 +1359,11 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<StaticCow<str>>,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n-    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n+    /// on the command line. Defaults to `LinkerFlavor::Gnu(Cc::Yes, Lld::No)`.\n     pub linker_flavor: LinkerFlavor,\n     linker_flavor_json: LinkerFlavorCli,\n-    /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n-    /// without clarifying its flavor in any way.\n-    /// FIXME: Merge this into `LinkerFlavor`.\n-    pub lld_flavor: LldFlavor,\n-    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n-    /// FIXME: Merge this into `LinkerFlavor`.\n-    pub linker_is_gnu: bool,\n+    lld_flavor_json: LldFlavor,\n+    linker_is_gnu_json: bool,\n \n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n@@ -1300,7 +1396,7 @@ pub struct TargetOptions {\n \n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n-    /// to linkers where `linker_is_gnu` is true.\n+    /// to linkers where linker flavor matches `LinkerFlavor::Gnu(..)`.\n     pub link_script: Option<StaticCow<str>>,\n     /// Environment variables to be set for the linker invocation.\n     pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n@@ -1575,22 +1671,38 @@ pub struct TargetOptions {\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n /// that have a compatible command line interface.\n-fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'static str]) {\n-    let mut insert = |flavor| {\n-        link_args.entry(flavor).or_default().extend(args.iter().copied().map(Cow::Borrowed))\n-    };\n+fn add_link_args_iter(\n+    link_args: &mut LinkArgs,\n+    flavor: LinkerFlavor,\n+    args: impl Iterator<Item = StaticCow<str>> + Clone,\n+) {\n+    let mut insert = |flavor| link_args.entry(flavor).or_default().extend(args.clone());\n     insert(flavor);\n     match flavor {\n-        LinkerFlavor::Ld => insert(LinkerFlavor::Lld(LldFlavor::Ld)),\n-        LinkerFlavor::Msvc => insert(LinkerFlavor::Lld(LldFlavor::Link)),\n-        LinkerFlavor::Lld(LldFlavor::Ld64) | LinkerFlavor::Lld(LldFlavor::Wasm) => {}\n-        LinkerFlavor::Lld(lld_flavor) => {\n-            panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n+        LinkerFlavor::Gnu(cc, lld) => {\n+            assert_eq!(lld, Lld::No);\n+            insert(LinkerFlavor::Gnu(cc, Lld::Yes));\n+        }\n+        LinkerFlavor::Darwin(cc, lld) => {\n+            assert_eq!(lld, Lld::No);\n+            insert(LinkerFlavor::Darwin(cc, Lld::Yes));\n         }\n-        LinkerFlavor::Gcc | LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => {}\n+        LinkerFlavor::Msvc(lld) => {\n+            assert_eq!(lld, Lld::No);\n+            insert(LinkerFlavor::Msvc(Lld::Yes));\n+        }\n+        LinkerFlavor::WasmLld(..)\n+        | LinkerFlavor::Unix(..)\n+        | LinkerFlavor::EmCc\n+        | LinkerFlavor::Bpf\n+        | LinkerFlavor::Ptx => {}\n     }\n }\n \n+fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'static str]) {\n+    add_link_args_iter(link_args, flavor, args.iter().copied().map(Cow::Borrowed))\n+}\n+\n impl TargetOptions {\n     fn link_args(flavor: LinkerFlavor, args: &[&'static str]) -> LinkArgs {\n         let mut link_args = LinkArgs::new();\n@@ -1607,23 +1719,40 @@ impl TargetOptions {\n     }\n \n     fn update_from_cli(&mut self) {\n-        self.linker_flavor = LinkerFlavor::from_cli(self.linker_flavor_json);\n+        self.linker_flavor = LinkerFlavor::from_cli_impl(\n+            self.linker_flavor_json,\n+            self.lld_flavor_json,\n+            self.linker_is_gnu_json,\n+        );\n         for (args, args_json) in [\n             (&mut self.pre_link_args, &self.pre_link_args_json),\n             (&mut self.late_link_args, &self.late_link_args_json),\n             (&mut self.late_link_args_dynamic, &self.late_link_args_dynamic_json),\n             (&mut self.late_link_args_static, &self.late_link_args_static_json),\n             (&mut self.post_link_args, &self.post_link_args_json),\n         ] {\n-            *args = args_json\n-                .iter()\n-                .map(|(flavor, args)| (LinkerFlavor::from_cli(*flavor), args.clone()))\n-                .collect();\n+            args.clear();\n+            for (flavor, args_json) in args_json {\n+                // Cannot use `from_cli` due to borrow checker.\n+                let linker_flavor = LinkerFlavor::from_cli_impl(\n+                    *flavor,\n+                    self.lld_flavor_json,\n+                    self.linker_is_gnu_json,\n+                );\n+                match linker_flavor {\n+                    LinkerFlavor::Gnu(_, Lld::Yes)\n+                    | LinkerFlavor::Darwin(_, Lld::Yes)\n+                    | LinkerFlavor::Msvc(Lld::Yes) => {}\n+                    _ => add_link_args_iter(args, linker_flavor, args_json.iter().cloned()),\n+                }\n+            }\n         }\n     }\n \n     fn update_to_cli(&mut self) {\n         self.linker_flavor_json = self.linker_flavor.to_cli();\n+        self.lld_flavor_json = self.linker_flavor.lld_flavor();\n+        self.linker_is_gnu_json = self.linker_flavor.is_gnu();\n         for (args, args_json) in [\n             (&self.pre_link_args, &mut self.pre_link_args_json),\n             (&self.late_link_args, &mut self.late_link_args_json),\n@@ -1650,10 +1779,10 @@ impl Default for TargetOptions {\n             abi: \"\".into(),\n             vendor: \"unknown\".into(),\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n-            linker_flavor: LinkerFlavor::Gcc,\n+            linker_flavor: LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n             linker_flavor_json: LinkerFlavorCli::Gcc,\n-            lld_flavor: LldFlavor::Ld,\n-            linker_is_gnu: true,\n+            lld_flavor_json: LldFlavor::Ld,\n+            linker_is_gnu_json: true,\n             link_script: None,\n             asm_args: cvs![],\n             cpu: \"generic\".into(),\n@@ -1922,6 +2051,12 @@ impl Target {\n                     base.$key_name = s;\n                 }\n             } );\n+            ($key_name:ident = $json_name:expr, bool) => ( {\n+                let name = $json_name;\n+                if let Some(s) = obj.remove(name).and_then(|b| b.as_bool()) {\n+                    base.$key_name = s;\n+                }\n+            } );\n             ($key_name:ident, u64) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove(&name).and_then(|j| Json::as_u64(&j)) {\n@@ -2093,9 +2228,9 @@ impl Target {\n                         .map(|s| s.to_string().into());\n                 }\n             } );\n-            ($key_name:ident, LldFlavor) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n+            ($key_name:ident = $json_name:expr, LldFlavor) => ( {\n+                let name = $json_name;\n+                obj.remove(name).and_then(|o| o.as_str().and_then(|s| {\n                     if let Some(flavor) = LldFlavor::from_str(&s) {\n                         base.$key_name = flavor;\n                     } else {\n@@ -2289,8 +2424,8 @@ impl Target {\n         key!(vendor);\n         key!(linker, optional);\n         key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n-        key!(lld_flavor, LldFlavor)?;\n-        key!(linker_is_gnu, bool);\n+        key!(lld_flavor_json = \"lld-flavor\", LldFlavor)?;\n+        key!(linker_is_gnu_json = \"linker-is-gnu\", bool);\n         key!(pre_link_objects = \"pre-link-objects\", link_objects);\n         key!(post_link_objects = \"post-link-objects\", link_objects);\n         key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n@@ -2539,8 +2674,8 @@ impl ToJson for Target {\n         target_option_val!(vendor);\n         target_option_val!(linker);\n         target_option_val!(linker_flavor_json, \"linker-flavor\");\n-        target_option_val!(lld_flavor);\n-        target_option_val!(linker_is_gnu);\n+        target_option_val!(lld_flavor_json, \"lld-flavor\");\n+        target_option_val!(linker_is_gnu_json, \"linker-is-gnu\");\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n         target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");"}, {"sha": "251fd2a0a7ab71a64dd44b128c4c9aff61da8453", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             // dependency on this specific gcc.\n             asm_args: cvs![\"-mcpu=msp430\"],\n             linker: Some(\"msp430-elf-gcc\".into()),\n-            linker_is_gnu: false,\n+            linker_flavor: LinkerFlavor::Unix(Cc::Yes),\n \n             // There are no atomic CAS instructions available in the MSP430\n             // instruction set, and the LLVM backend doesn't currently support"}, {"sha": "1dad9133ea3d2755e11a564719cdcb31224bdd6d", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,17 +1,15 @@\n-use crate::spec::{DebuginfoKind, LinkerFlavor, LldFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{DebuginfoKind, LinkerFlavor, Lld, SplitDebuginfo, TargetOptions};\n use std::borrow::Cow;\n \n pub fn opts() -> TargetOptions {\n     // Suppress the verbose logo and authorship debugging output, which would needlessly\n     // clog any log files.\n-    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Msvc, &[\"/NOLOGO\"]);\n+    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Msvc(Lld::No), &[\"/NOLOGO\"]);\n \n     TargetOptions {\n-        linker_flavor: LinkerFlavor::Msvc,\n+        linker_flavor: LinkerFlavor::Msvc(Lld::No),\n         is_like_windows: true,\n         is_like_msvc: true,\n-        lld_flavor: LldFlavor::Link,\n-        linker_is_gnu: false,\n         pre_link_args,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,"}, {"sha": "b0582b235b9a49285d4ecdd2e27dfb3bf4864bfb", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n             linker_flavor: LinkerFlavor::Ptx,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".into()),\n-            linker_is_gnu: false,\n \n             // With `ptx-linker` approach, it can be later overridden via link flags.\n             cpu: \"sm_30\".into(),"}, {"sha": "08b273207301c022853b9e42bb51b12373072b6e", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "ce64de861cd26476b61472b297970c5118f30e8e", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "81286a668fe711a88f6a2219fc3509d3d41539e4", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "7232dce3e96cc670da69379f026be66b429c3a68", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "10da7872c736194a52ada07d36d29082510b680b", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "8c941e106515348baeb489ce41083a24d9aeb96c", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "fd896e086b541e44b1e5d4af935faf0ace77bf73", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "3cffcf49772ed4f6e477fb3f19ac2adad7f13127", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "342f321bd5bf7ad2ad4a6c184d512cf64736b756", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,13 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     // Extra hint to linker that we are generating secure-PLT code.\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--target=powerpc-unknown-freebsd13.0\"]);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+        &[\"-m32\", \"--target=powerpc-unknown-freebsd13.0\"],\n+    );\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "c8c61dc46eefe3a477028668d80339788e3c1dc6", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "5c51ec91f715ddceddd05e0e9ef472aaae21a68f", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-mspe\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "fc7d802cbf44b4ed32e0516d17b7af6985b7b631", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "912149c79e44c864e6a418d722ea134791247bc3", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "a8c1c2a6132ea428e69d77e1f8398af17f1de7f5", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--secure-plt\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m32\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "abb8d13daef4012b6f7daa8d702060422270fab8", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\", \"--secure-plt\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-mspe\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n     base.stack_probes = StackProbeType::Inline;\n "}, {"sha": "75a65a268494c072bf4d8125b4e1b492b8753795", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +8,7 @@ pub fn target() -> Target {\n         arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),"}, {"sha": "f2242bbe08714af5197567a941f62d4b0a1b4cfa", "filename": "compiler/rustc_target/src/spec/riscv32im_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +8,7 @@ pub fn target() -> Target {\n         arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),"}, {"sha": "55c6e4d16e5a40ea6631b95ced319796e246f7c5", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +8,7 @@ pub fn target() -> Target {\n         arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(32),"}, {"sha": "a263e5d5cde28c065beaf1f1ddf3af5daf5902be", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_xous_elf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -10,7 +9,7 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             os: \"xous\".into(),\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(32),"}, {"sha": "25638a092b5d39c8b4b7dfd2550f81e0f3abd195", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{cvs, Target, TargetOptions};\n-use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{cvs, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -13,7 +12,6 @@ pub fn target() -> Target {\n             os: \"espidf\".into(),\n             env: \"newlib\".into(),\n             vendor: \"espressif\".into(),\n-            linker_flavor: LinkerFlavor::Gcc,\n             linker: Some(\"riscv32-esp-elf-gcc\".into()),\n             cpu: \"generic-rv32\".into(),\n "}, {"sha": "01e773fae9734bae3d8ae64ad8e180dee373ede7", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +8,7 @@ pub fn target() -> Target {\n         arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),"}, {"sha": "67806d578c8e4d757717a81ca02ca89240a70b62", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,5 @@\n-use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use crate::spec::{RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         arch: \"riscv64\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             llvm_abiname: \"lp64d\".into(),\n             cpu: \"generic-rv64\".into(),"}, {"sha": "f371e09bed74d1aa75bf38c02464e4c931bad622", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,5 @@\n-use crate::spec::{CodeModel, Target, TargetOptions};\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use crate::spec::{RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         arch: \"riscv64\".into(),\n \n         options: TargetOptions {\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             cpu: \"generic-rv64\".into(),\n             max_atomic_width: Some(64),"}, {"sha": "f97cdb4fb28427b8d453d35da79a14b4b40cafdd", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -7,7 +7,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         families: cvs![\"unix\"],\n         is_like_solaris: true,\n-        linker_is_gnu: false,\n+        linker_flavor: LinkerFlavor::Unix(Cc::Yes),\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eh_frame_header: false,\n "}, {"sha": "38ab066b0879f75df5ca60217dfe30712c041781", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "06a5f782a6dfbb1054b4cc5129259f8d84985ca7", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "12968abda082eb772726c69ba4ff780dcfce19e4", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,12 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mv8plus\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-mv8plus\"]);\n \n     Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".into(),"}, {"sha": "440194ef216bf9f20232b02dbe0519c8dac22b40", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.endian = Endian::Big;\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\"]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".into();\n     base.vendor = \"sun\".into();"}, {"sha": "172da0ed5df88d5f5b848981bbdc27e32eabc90c", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -19,11 +19,13 @@ impl Target {\n             assert!(self.is_like_windows);\n         }\n \n-        // Check that default linker flavor and lld flavor are compatible\n-        // with some other key properties.\n-        assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n-        assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n-        assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n+        // Check that default linker flavor is compatible with some other key properties.\n+        assert_eq!(self.is_like_osx, matches!(self.linker_flavor, LinkerFlavor::Darwin(..)));\n+        assert_eq!(self.is_like_msvc, matches!(self.linker_flavor, LinkerFlavor::Msvc(..)));\n+        assert_eq!(\n+            self.is_like_wasm && self.os != \"emscripten\",\n+            matches!(self.linker_flavor, LinkerFlavor::WasmLld(..))\n+        );\n         assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::EmCc));\n         assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::Bpf));\n         assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::Ptx));\n@@ -38,44 +40,25 @@ impl Target {\n             for (&flavor, flavor_args) in args {\n                 assert!(!flavor_args.is_empty());\n                 // Check that flavors mentioned in link args are compatible with the default flavor.\n-                match (self.linker_flavor, self.lld_flavor) {\n-                    (\n-                        LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc,\n-                        LldFlavor::Ld,\n-                    ) => {\n-                        assert_matches!(\n-                            flavor,\n-                            LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc\n-                        )\n-                    }\n-                    (LinkerFlavor::Gcc, LldFlavor::Ld64) => {\n-                        assert_matches!(\n-                            flavor,\n-                            LinkerFlavor::Lld(LldFlavor::Ld64) | LinkerFlavor::Gcc\n-                        )\n+                match self.linker_flavor {\n+                    LinkerFlavor::Gnu(..) => {\n+                        assert_matches!(flavor, LinkerFlavor::Gnu(..));\n                     }\n-                    (LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link), LldFlavor::Link) => {\n-                        assert_matches!(\n-                            flavor,\n-                            LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link)\n-                        )\n+                    LinkerFlavor::Darwin(..) => {\n+                        assert_matches!(flavor, LinkerFlavor::Darwin(..))\n                     }\n-                    (LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc, LldFlavor::Wasm) => {\n-                        assert_matches!(\n-                            flavor,\n-                            LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n-                        )\n+                    LinkerFlavor::WasmLld(..) => {\n+                        assert_matches!(flavor, LinkerFlavor::WasmLld(..))\n                     }\n-                    (LinkerFlavor::EmCc, LldFlavor::Wasm) => {\n-                        assert_matches!(flavor, LinkerFlavor::EmCc)\n+                    LinkerFlavor::Unix(..) => {\n+                        assert_matches!(flavor, LinkerFlavor::Unix(..));\n                     }\n-                    (LinkerFlavor::Bpf, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::Bpf)\n+                    LinkerFlavor::Msvc(..) => {\n+                        assert_matches!(flavor, LinkerFlavor::Msvc(..))\n                     }\n-                    (LinkerFlavor::Ptx, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::Ptx)\n+                    LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => {\n+                        assert_eq!(flavor, self.linker_flavor)\n                     }\n-                    flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n                 }\n \n                 // Check that link args for cc and non-cc versions of flavors are consistent.\n@@ -88,25 +71,29 @@ impl Target {\n                         }\n                     }\n                 };\n+\n                 match self.linker_flavor {\n-                    LinkerFlavor::Gcc => match self.lld_flavor {\n-                        LldFlavor::Ld => {\n-                            check_noncc(LinkerFlavor::Ld);\n-                            check_noncc(LinkerFlavor::Lld(LldFlavor::Ld));\n-                        }\n-                        LldFlavor::Ld64 => check_noncc(LinkerFlavor::Lld(LldFlavor::Ld64)),\n-                        LldFlavor::Wasm => check_noncc(LinkerFlavor::Lld(LldFlavor::Wasm)),\n-                        LldFlavor::Link => {}\n-                    },\n+                    LinkerFlavor::Gnu(Cc::Yes, lld) => check_noncc(LinkerFlavor::Gnu(Cc::No, lld)),\n+                    LinkerFlavor::WasmLld(Cc::Yes) => check_noncc(LinkerFlavor::WasmLld(Cc::No)),\n+                    LinkerFlavor::Unix(Cc::Yes) => check_noncc(LinkerFlavor::Unix(Cc::No)),\n                     _ => {}\n                 }\n             }\n \n             // Check that link args for lld and non-lld versions of flavors are consistent.\n-            assert_eq!(args.get(&LinkerFlavor::Ld), args.get(&LinkerFlavor::Lld(LldFlavor::Ld)));\n+            for cc in [Cc::No, Cc::Yes] {\n+                assert_eq!(\n+                    args.get(&LinkerFlavor::Gnu(cc, Lld::No)),\n+                    args.get(&LinkerFlavor::Gnu(cc, Lld::Yes)),\n+                );\n+                assert_eq!(\n+                    args.get(&LinkerFlavor::Darwin(cc, Lld::No)),\n+                    args.get(&LinkerFlavor::Darwin(cc, Lld::Yes)),\n+                );\n+            }\n             assert_eq!(\n-                args.get(&LinkerFlavor::Msvc),\n-                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n+                args.get(&LinkerFlavor::Msvc(Lld::No)),\n+                args.get(&LinkerFlavor::Msvc(Lld::Yes)),\n             );\n         }\n "}, {"sha": "000766c57ce795e80a8e871324dae4d32b7cc19f", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -27,13 +27,12 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use crate::spec::TargetOptions;\n-use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         // In most cases, LLD is good enough\n         linker: Some(\"rust-lld\".into()),\n         // Because these devices have very little resources having an unwinder is too onerous so we"}, {"sha": "5a3e4c88d3a9b5f130b6137e770bb9112a1776e6", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -16,9 +16,8 @@\n //! The default link script is very likely wrong, so you should use\n //! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{\n-    cvs, FramePointer, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions,\n-};\n+use crate::spec::{cvs, Cc, FramePointer, LinkerFlavor, Lld};\n+use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -37,7 +36,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Ld,\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n             linker: Some(\"arm-none-eabi-ld\".into()),\n \n             // extra args passed to the external assembler (assuming `arm-none-eabi-as`):"}, {"sha": "f1be274f067c28b8b3318576c692162f0663ba9e", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, Lld, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    base.add_pre_link_args(LinkerFlavor::Msvc, &[\"/OPT:NOLBR\"]);\n+    base.add_pre_link_args(LinkerFlavor::Msvc(Lld::No), &[\"/OPT:NOLBR\"]);\n \n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".into(),"}, {"sha": "8d80fcd5fe5799ec3efe1abe1cb71b1a82e5e2d7", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n \n // This target if is for the Android v7a ABI in thumb mode with\n // NEON unconditionally enabled and, therefore, with 32 FPU registers\n@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-march=armv7-a\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-march=armv7-a\"]);\n     Target {\n         llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,"}, {"sha": "8968d3c8fc100d4d22496250df62e9b61d7f14a4", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -9,14 +9,13 @@\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy};\n-use crate::spec::{StackProbeType, TargetOptions};\n+use crate::spec::{LinkerFlavor, Lld, PanicStrategy, StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n \n     base.add_pre_link_args(\n-        LinkerFlavor::Msvc,\n+        LinkerFlavor::Msvc(Lld::No),\n         &[\n             // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n             // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n@@ -37,7 +36,7 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         os: \"uefi\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n+        linker_flavor: LinkerFlavor::Msvc(Lld::Yes),\n         disable_redzone: true,\n         exe_suffix: \".efi\".into(),\n         allows_weak_linkage: false,"}, {"sha": "8dad941b534b6a00125de8e30e7a5ad8b01fd753", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -10,14 +10,12 @@\n //! This target is more or less managed by the Rust and WebAssembly Working\n //! Group nowadays at <https://github.com/rustwasm>.\n \n-use super::wasm_base;\n-use super::{LinkerFlavor, LldFlavor, Target};\n+use super::{wasm_base, Cc, LinkerFlavor, Target};\n use crate::spec::abi::Abi;\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n     options.os = \"unknown\".into();\n-    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n \n     // This is a default for backwards-compatibility with the original\n     // definition of this target oh-so-long-ago. Once the \"wasm\" ABI is\n@@ -30,7 +28,7 @@ pub fn target() -> Target {\n     options.default_adjusted_cabi = Some(Abi::Wasm);\n \n     options.add_pre_link_args(\n-        LinkerFlavor::Lld(LldFlavor::Wasm),\n+        LinkerFlavor::WasmLld(Cc::No),\n         &[\n             // For now this target just never has an entry symbol no matter the output\n             // type, so unconditionally pass this.\n@@ -44,7 +42,7 @@ pub fn target() -> Target {\n         ],\n     );\n     options.add_pre_link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::WasmLld(Cc::Yes),\n         &[\n             // Make sure clang uses LLD as its linker and is configured appropriately\n             // otherwise"}, {"sha": "93a956403e50fe56276e03c3398100c762a16c91", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -72,15 +72,13 @@\n //! best we can with this target. Don't start relying on too much here unless\n //! you know what you're getting in to!\n \n-use super::wasm_base;\n-use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n+use super::{crt_objects, wasm_base, Cc, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n \n     options.os = \"wasi\".into();\n-    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n-    options.add_pre_link_args(LinkerFlavor::Gcc, &[\"--target=wasm32-wasi\"]);\n+    options.add_pre_link_args(LinkerFlavor::WasmLld(Cc::Yes), &[\"--target=wasm32-wasi\"]);\n \n     options.pre_link_objects_self_contained = crt_objects::pre_wasi_self_contained();\n     options.post_link_objects_self_contained = crt_objects::post_wasi_self_contained();"}, {"sha": "3fda398d24c85fb327a75255a3a1f4230367cc3e", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -7,16 +7,14 @@\n //! the standard library is available, most of it returns an error immediately\n //! (e.g. trying to create a TCP stream or something like that).\n \n-use super::wasm_base;\n-use super::{LinkerFlavor, LldFlavor, Target};\n+use super::{wasm_base, Cc, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n     options.os = \"unknown\".into();\n-    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n \n     options.add_pre_link_args(\n-        LinkerFlavor::Lld(LldFlavor::Wasm),\n+        LinkerFlavor::WasmLld(Cc::No),\n         &[\n             // For now this target just never has an entry symbol no matter the output\n             // type, so unconditionally pass this.\n@@ -25,7 +23,7 @@ pub fn target() -> Target {\n         ],\n     );\n     options.add_pre_link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::WasmLld(Cc::Yes),\n         &[\n             // Make sure clang uses LLD as its linker and is configured appropriately\n             // otherwise"}, {"sha": "528a84a8b37cbae3a2142cefff14f0206fe15551", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,5 +1,5 @@\n use super::crt_objects::LinkSelfContainedDefault;\n-use super::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n+use super::{cvs, Cc, LinkerFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n \n pub fn options() -> TargetOptions {\n     macro_rules! args {\n@@ -49,8 +49,8 @@ pub fn options() -> TargetOptions {\n         };\n     }\n \n-    let mut pre_link_args = TargetOptions::link_args(LinkerFlavor::Lld(LldFlavor::Wasm), args!(\"\"));\n-    super::add_link_args(&mut pre_link_args, LinkerFlavor::Gcc, args!(\"-Wl,\"));\n+    let mut pre_link_args = TargetOptions::link_args(LinkerFlavor::WasmLld(Cc::No), args!(\"\"));\n+    super::add_link_args(&mut pre_link_args, LinkerFlavor::WasmLld(Cc::Yes), args!(\"-Wl,\"));\n \n     TargetOptions {\n         is_like_wasm: true,\n@@ -91,8 +91,7 @@ pub fn options() -> TargetOptions {\n \n         // we use the LLD shipped with the Rust toolchain by default\n         linker: Some(\"rust-lld\".into()),\n-        lld_flavor: LldFlavor::Wasm,\n-        linker_is_gnu: false,\n+        linker_flavor: LinkerFlavor::WasmLld(Cc::No),\n \n         pre_link_args,\n "}, {"sha": "a32ca469b2f58d55c5df3c486a697d08f38711cd", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n use crate::spec::crt_objects::{self, LinkSelfContainedDefault};\n-use crate::spec::{cvs, DebuginfoKind, LinkerFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, Cc, DebuginfoKind, LinkerFlavor, Lld, SplitDebuginfo, TargetOptions};\n use std::borrow::Cow;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Ld,\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n         &[\n             // Enable ASLR\n             \"--dynamicbase\",\n@@ -14,7 +14,7 @@ pub fn opts() -> TargetOptions {\n     );\n     super::add_link_args(\n         &mut pre_link_args,\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n         &[\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n@@ -42,23 +42,33 @@ pub fn opts() -> TargetOptions {\n         \"-luser32\",\n         \"-lkernel32\",\n     ];\n-    let mut late_link_args = TargetOptions::link_args(LinkerFlavor::Ld, mingw_libs);\n-    super::add_link_args(&mut late_link_args, LinkerFlavor::Gcc, mingw_libs);\n+    let mut late_link_args =\n+        TargetOptions::link_args(LinkerFlavor::Gnu(Cc::No, Lld::No), mingw_libs);\n+    super::add_link_args(&mut late_link_args, LinkerFlavor::Gnu(Cc::Yes, Lld::No), mingw_libs);\n     // If any of our crates are dynamically linked then we need to use\n     // the shared libgcc_s-dw2-1.dll. This is required to support\n     // unwinding across DLL boundaries.\n     let dynamic_unwind_libs = &[\"-lgcc_s\"];\n     let mut late_link_args_dynamic =\n-        TargetOptions::link_args(LinkerFlavor::Ld, dynamic_unwind_libs);\n-    super::add_link_args(&mut late_link_args_dynamic, LinkerFlavor::Gcc, dynamic_unwind_libs);\n+        TargetOptions::link_args(LinkerFlavor::Gnu(Cc::No, Lld::No), dynamic_unwind_libs);\n+    super::add_link_args(\n+        &mut late_link_args_dynamic,\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+        dynamic_unwind_libs,\n+    );\n     // If all of our crates are statically linked then we can get away\n     // with statically linking the libgcc unwinding code. This allows\n     // binaries to be redistributed without the libgcc_s-dw2-1.dll\n     // dependency, but unfortunately break unwinding across DLL\n     // boundaries when unwinding across FFI boundaries.\n     let static_unwind_libs = &[\"-lgcc_eh\", \"-l:libpthread.a\"];\n-    let mut late_link_args_static = TargetOptions::link_args(LinkerFlavor::Ld, static_unwind_libs);\n-    super::add_link_args(&mut late_link_args_static, LinkerFlavor::Gcc, static_unwind_libs);\n+    let mut late_link_args_static =\n+        TargetOptions::link_args(LinkerFlavor::Gnu(Cc::No, Lld::No), static_unwind_libs);\n+    super::add_link_args(\n+        &mut late_link_args_static,\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+        static_unwind_libs,\n+    );\n \n     TargetOptions {\n         os: \"windows\".into(),"}, {"sha": "58210c75a3da22364b60e734f4735e1101402f06", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,15 +1,17 @@\n-use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // We cannot use `-nodefaultlibs` because compiler-rt has to be passed\n     // as a path since it's not added to linker search path by the default.\n     // There were attempts to make it behave like libgcc (so one can just use -l<name>)\n     // but LLVM maintainers rejected it: https://reviews.llvm.org/D51440\n-    let pre_link_args =\n-        TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-nolibc\", \"--unwindlib=none\"]);\n+    let pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+        &[\"-nolibc\", \"--unwindlib=none\"],\n+    );\n     // Order of `late_link_args*` does not matter with LLD.\n     let late_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n         &[\"-lmingw32\", \"-lmingwex\", \"-lmsvcrt\", \"-lkernel32\", \"-luser32\"],\n     );\n "}, {"sha": "f30c33d997e33bb2e4fbba09050a71f9e24f1b32", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{Cc, LinkArgs, LinkerFlavor, Lld, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::windows_gnu_base::opts();\n@@ -15,8 +15,9 @@ pub fn opts() -> TargetOptions {\n         \"-lmingwex\",\n         \"-lmingw32\",\n     ];\n-    let mut late_link_args = TargetOptions::link_args(LinkerFlavor::Ld, mingw_libs);\n-    super::add_link_args(&mut late_link_args, LinkerFlavor::Gcc, mingw_libs);\n+    let mut late_link_args =\n+        TargetOptions::link_args(LinkerFlavor::Gnu(Cc::No, Lld::No), mingw_libs);\n+    super::add_link_args(&mut late_link_args, LinkerFlavor::Gnu(Cc::Yes, Lld::No), mingw_libs);\n     // Reset the flags back to empty until the FIXME above is addressed.\n     let late_link_args_dynamic = LinkArgs::new();\n     let late_link_args_static = LinkArgs::new();"}, {"sha": "8c942c59dd035f33e26b8318521da79e3a2add8f", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkerFlavor, Lld, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n     opts.abi = \"uwp\".into();\n     opts.vendor = \"uwp\".into();\n-    opts.add_pre_link_args(LinkerFlavor::Msvc, &[\"/APPCONTAINER\", \"mincore.lib\"]);\n+    opts.add_pre_link_args(LinkerFlavor::Msvc(Lld::No), &[\"/APPCONTAINER\", \"mincore.lib\"]);\n \n     opts\n }"}, {"sha": "087be1b957b1425885bc5303efe8cdc05065682a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::TargetOptions;\n-use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = \"x86_64\";\n     let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n     base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers ="}, {"sha": "13259205ac0f87fd088caf9932e53f8dcf18c85c", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n \n     let mut base = opts(\"ios\", Arch::X86_64_macabi);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "cba6fda19dc3e4cb9b7a7b984cc02eacd8e33bce", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,12 +1,10 @@\n use std::borrow::Cow;\n \n-use crate::spec::cvs;\n-\n-use super::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use super::{cvs, Cc, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let pre_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Ld,\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n         &[\n             \"-e\",\n             \"elf_entry\",\n@@ -61,7 +59,7 @@ pub fn target() -> Target {\n         env: \"sgx\".into(),\n         vendor: \"fortanix\".into(),\n         abi: \"fortanix\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         max_atomic_width: Some(64),\n         cpu: \"x86-64\".into(),"}, {"sha": "9c9137848550f2e630f4b283139d5303ed0113fc", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.cpu = \"x86-64\".into();\n     // https://developer.android.com/ndk/guides/abis.html#86-64\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "cb62a8173222e3a934151a6cb116c162261a6d68", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\"]);\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);"}, {"sha": "37feaa9dbbf844575d896d08b0f21311fb71b6ab", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     // Use high-entropy 64 bit address space for ASLR\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n+        &[\"-m\", \"i386pep\", \"--high-entropy-va\"],\n+    );\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-gcc\".into());\n "}, {"sha": "039bc2bd2bb849a0bfb94ca8e54114cfce01ff84", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnullvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnullvm_base::opts();\n     base.cpu = \"x86-64\".into();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-clang\".into());\n "}, {"sha": "0f31ea86b3f1696983636c84c406ba6b1832c6c9", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\"]);\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"sun\".into();\n     base.max_atomic_width = Some(64);"}, {"sha": "67ce3768db0c8989d11def78aa300d96af8601a1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "98988ab359542c8b1a9bdd9f31c6e197cce9984c", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;"}, {"sha": "9a7a3b501cfdc4f078954c8733eac988ee16af8d", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;"}, {"sha": "04a12a7bfa642843c272ba8eb47857bbae30fec8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, Target};\n+use crate::spec::{Cc, LinkerFlavor, SanitizerSet, Target};\n \n pub fn target() -> Target {\n     let mut base = super::illumos_base::opts();\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-std=c99\"]);\n+    base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\", \"-std=c99\"]);\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;"}, {"sha": "a91ab365b668ad700830a5f2f029dc40a024f5b2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS"}, {"sha": "626d5b480c632faa3be2e5d6ff3535fac44ce638", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.abi = \"x32\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mx32\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-mx32\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.has_thread_local = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI"}, {"sha": "9087dc3df6007b7faf9622d428ce05f79399d4f2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS"}, {"sha": "64ae425d8c0b735fe069a7d09eb36a3e8e8cd449", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOptions};\n+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI"}, {"sha": "e4d33c2b8c62d9fee2f58a716a601d254435d5a6", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -4,7 +4,7 @@\n // `target-cpu` compiler flags to opt-in more hardware-specific\n // features.\n \n-use super::{CodeModel, LinkerFlavor, LldFlavor, PanicStrategy};\n+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n use super::{RelroLevel, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -15,7 +15,7 @@ pub fn target() -> Target {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features:\n             \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\""}, {"sha": "ebd9636ff5102094a7df96f5f1327d842f28e64e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_linuxkernel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,7 +1,7 @@\n // This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n // generic Linux kernel options.\n \n-use crate::spec::{CodeModel, LinkerFlavor, Target};\n+use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_kernel_base::opts();\n@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     base.features =\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\".into();\n     base.code_model = Some(CodeModel::Kernel);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n \n     Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use"}, {"sha": "66b8e20226f19cf4cb7d842833e96c3dcd41ca6b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "b47f15cf5789758eef199f8aecd2d8ff305cfd21", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n \n     Target {"}, {"sha": "c3eaa6939bb13c5358ad67805d3bd404be61d701", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,11 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     // Use high-entropy 64 bit address space for ASLR\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Gnu(Cc::No, Lld::No),\n+        &[\"-m\", \"i386pep\", \"--high-entropy-va\"],\n+    );\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "365ade6bcf9c060d1839593c449c6cdbc5ec4618", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b6a9c604288c356242f7a67d8174bbdbae19d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=572b6a9c604288c356242f7a67d8174bbdbae19d", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n     base.disable_redzone = true;\n "}]}