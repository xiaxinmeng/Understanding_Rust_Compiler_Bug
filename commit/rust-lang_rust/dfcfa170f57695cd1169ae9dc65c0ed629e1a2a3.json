{"sha": "dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2ZhMTcwZjU3Njk1Y2QxMTY5YWU5ZGM2NWMwZWQ2MjllMWEyYTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-10T16:23:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-17T21:17:31Z"}, "message": "Make async/await lowering use resume arguments", "tree": {"sha": "74f797db3278d63872d4ee01b8b745b8dbda58ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74f797db3278d63872d4ee01b8b745b8dbda58ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "html_url": "https://github.com/rust-lang/rust/commit/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18adc45a26127be7c38c81b8c6e1caaab3c8132e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18adc45a26127be7c38c81b8c6e1caaab3c8132e", "html_url": "https://github.com/rust-lang/rust/commit/18adc45a26127be7c38c81b8c6e1caaab3c8132e"}], "stats": {"total": 109, "additions": 86, "deletions": 23}, "files": [{"sha": "104634f4fa0bbf32e308ecd30c8a9744e90a8e7b", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 76, "deletions": 19, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "patch": "@@ -10,6 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::DUMMY_SP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {\n@@ -483,14 +484,44 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             Some(ty) => FnRetTy::Ty(ty),\n             None => FnRetTy::Default(span),\n         };\n-        let ast_decl = FnDecl { inputs: vec![], output };\n+\n+        let task_context_id = self.resolver.next_node_id();\n+        let task_context_hid = self.lower_node_id(task_context_id);\n+        let ast_decl = FnDecl {\n+            inputs: vec![Param {\n+                attrs: AttrVec::new(),\n+                ty: AstP(Ty {\n+                    id: self.resolver.next_node_id(),\n+                    kind: TyKind::Infer,\n+                    span: DUMMY_SP,\n+                }),\n+                pat: AstP(Pat {\n+                    id: task_context_id,\n+                    kind: PatKind::Ident(\n+                        BindingMode::ByValue(Mutability::Mut),\n+                        Ident::with_dummy_span(sym::_task_context),\n+                        None,\n+                    ),\n+                    span: DUMMY_SP,\n+                }),\n+                id: self.resolver.next_node_id(),\n+                span: DUMMY_SP,\n+                is_placeholder: false,\n+            }],\n+            output,\n+        };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n         let body_id = self.lower_fn_body(&ast_decl, |this| {\n             this.generator_kind = Some(hir::GeneratorKind::Async(async_gen_kind));\n-            body(this)\n+\n+            let old_ctx = this.task_context;\n+            this.task_context = Some(task_context_hid);\n+            let res = body(this);\n+            this.task_context = old_ctx;\n+            res\n         });\n \n-        // `static || -> <ret_ty> { body }`:\n+        // `static |task_context| -> <ret_ty> { body }`:\n         let generator_kind = hir::ExprKind::Closure(\n             capture_clause,\n             decl,\n@@ -523,9 +554,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// ```rust\n     /// match <expr> {\n     ///     mut pinned => loop {\n-    ///         match ::std::future::poll_with_tls_context(unsafe {\n-    ///             <::std::pin::Pin>::new_unchecked(&mut pinned)\n-    ///         }) {\n+    ///         match unsafe { ::std::future::poll_with_context(\n+    ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n+    ///             task_context,\n+    ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n     ///             ::std::task::Poll::Pending => {}\n     ///         }\n@@ -561,12 +593,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let (pinned_pat, pinned_pat_hid) =\n             self.pat_ident_binding_mode(span, pinned_ident, hir::BindingAnnotation::Mutable);\n \n-        // ::std::future::poll_with_tls_context(unsafe {\n-        //     ::std::pin::Pin::new_unchecked(&mut pinned)\n-        // })`\n+        let task_context_ident = Ident::with_dummy_span(sym::_task_context);\n+\n+        // unsafe {\n+        //     ::std::future::poll_with_context(\n+        //         ::std::pin::Pin::new_unchecked(&mut pinned),\n+        //         task_context,\n+        //     )\n+        // }\n         let poll_expr = {\n             let pinned = self.expr_ident(span, pinned_ident, pinned_pat_hid);\n             let ref_mut_pinned = self.expr_mut_addr_of(span, pinned);\n+            let task_context = if let Some(task_context_hid) = self.task_context {\n+                self.expr_ident_mut(span, task_context_ident, task_context_hid)\n+            } else {\n+                // Use of `await` outside of an async context, we cannot use `task_context` here.\n+                self.expr_err(span)\n+            };\n             let pin_ty_id = self.next_id();\n             let new_unchecked_expr_kind = self.expr_call_std_assoc_fn(\n                 pin_ty_id,\n@@ -575,14 +618,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 \"new_unchecked\",\n                 arena_vec![self; ref_mut_pinned],\n             );\n-            let new_unchecked =\n-                self.arena.alloc(self.expr(span, new_unchecked_expr_kind, ThinVec::new()));\n-            let unsafe_expr = self.expr_unsafe(new_unchecked);\n-            self.expr_call_std_path(\n+            let new_unchecked = self.expr(span, new_unchecked_expr_kind, ThinVec::new());\n+            let call = self.expr_call_std_path(\n                 gen_future_span,\n-                &[sym::future, sym::poll_with_tls_context],\n-                arena_vec![self; unsafe_expr],\n-            )\n+                &[sym::future, sym::poll_with_context],\n+                arena_vec![self; new_unchecked, task_context],\n+            );\n+            self.arena.alloc(self.expr_unsafe(call))\n         };\n \n         // `::std::task::Poll::Ready(result) => break result`\n@@ -629,12 +671,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ExprKind::Yield(unit, hir::YieldSource::Await),\n                 ThinVec::new(),\n             );\n-            self.stmt_expr(span, yield_expr)\n+            let yield_expr = self.arena.alloc(yield_expr);\n+\n+            if let Some(task_context_hid) = self.task_context {\n+                let lhs = self.expr_ident(span, task_context_ident, task_context_hid);\n+                let assign = self.expr(\n+                    span,\n+                    hir::ExprKind::Assign(lhs, yield_expr, span),\n+                    AttrVec::new(),\n+                );\n+                self.stmt_expr(span, assign)\n+            } else {\n+                // Use of `await` outside of an async context. Return `yield_expr` so that we can\n+                // proceed with type checking.\n+                self.stmt(span, hir::StmtKind::Semi(yield_expr))\n+            }\n         };\n \n-        let loop_block = self.block_all(span, arena_vec![self; inner_match_stmt, yield_stmt], None);\n+        let loop_block =\n+            self.block_all(span, arena_vec![self; inner_match_stmt, yield_stmt], None);\n \n-        // loop { .. }\n+        // loop { ...; task_context = yield (); }\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: loop_hir_id,\n             kind: hir::ExprKind::Loop(loop_block, None, hir::LoopSource::Loop),"}, {"sha": "b1fd3da99ce0132f23db09d4831bdaf9108d8603", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "patch": "@@ -809,7 +809,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     /// Construct `ExprKind::Err` for the given `span`.\n-    fn expr_err(&mut self, span: Span) -> hir::Expr<'hir> {\n+    crate fn expr_err(&mut self, span: Span) -> hir::Expr<'hir> {\n         self.expr(span, hir::ExprKind::Err, AttrVec::new())\n     }\n "}, {"sha": "3c1a82febdae40b0f1c054b058a678d590a7c2be", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "patch": "@@ -117,6 +117,10 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n+    /// When inside an `async` context, this is the `HirId` of the\n+    /// `task_context` local bound to the resume argument of the generator.\n+    task_context: Option<hir::HirId>,\n+\n     /// Used to get the current `fn`'s def span to point to when using `await`\n     /// outside of an `async fn`.\n     current_item: Option<Span>,\n@@ -295,6 +299,7 @@ pub fn lower_crate<'a, 'hir>(\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n         generator_kind: None,\n+        task_context: None,\n         current_item: None,\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,"}, {"sha": "e7adbaa03eba4649606459d8fce1597b4ea3b8a8", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "patch": "@@ -544,7 +544,7 @@ symbols! {\n         plugin_registrar,\n         plugins,\n         Poll,\n-        poll_with_tls_context,\n+        poll_with_context,\n         powerpc_target_feature,\n         precise_pointer_size_matching,\n         pref_align_of,\n@@ -720,6 +720,7 @@ symbols! {\n         target_has_atomic_load_store,\n         target_thread_local,\n         task,\n+        _task_context,\n         tbm_target_feature,\n         termination_trait,\n         termination_trait_test,"}, {"sha": "0624c049048c70896535f2db2a5e58214aeb8719", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=dfcfa170f57695cd1169ae9dc65c0ed629e1a2a3", "patch": "@@ -33,10 +33,10 @@ error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]: std:\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]`\n    | \n-  ::: $SRC_DIR/libstd/future.rs:LL:COL\n+  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n    |\n LL |     F: Future,\n-   |        ------ required by this bound in `std::future::poll_with_tls_context`\n+   |        ------ required by this bound in `std::future::poll_with_context`\n \n error: aborting due to 4 previous errors\n "}]}