{"sha": "7b2deb562822112cc30d23958e7459564e2c6ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMmRlYjU2MjgyMjExMmNjMzBkMjM5NThlNzQ1OTU2NGUyYzZlZjk=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-08-22T19:24:48Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-09-02T07:43:17Z"}, "message": "rustc_{errors,session}: add `delay_good_path_bug`\n\nThe first use case of this detection of regression for trimmed paths\ncomputation, that is in the case of rustc, which should be computed only\nin case of errors or warnings.\n\nOur current user of this method is deeply nested, being a side effect\nfrom `Display` formatting on lots of rustc types. So taking only the\ncaller to the error message is not enough - we should collect the\ntraceback instead.", "tree": {"sha": "9d1d7cc154ccb2d672c3f43f09036f790f0d5357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1d7cc154ccb2d672c3f43f09036f790f0d5357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2deb562822112cc30d23958e7459564e2c6ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2deb562822112cc30d23958e7459564e2c6ef9", "html_url": "https://github.com/rust-lang/rust/commit/7b2deb562822112cc30d23958e7459564e2c6ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2deb562822112cc30d23958e7459564e2c6ef9/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a042e74b797a74763db075b038284657b4a03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a042e74b797a74763db075b038284657b4a03a", "html_url": "https://github.com/rust-lang/rust/commit/75a042e74b797a74763db075b038284657b4a03a"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "2abd20869aecf0e66341ada087654164f1973c32", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7b2deb562822112cc30d23958e7459564e2c6ef9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2deb562822112cc30d23958e7459564e2c6ef9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=7b2deb562822112cc30d23958e7459564e2c6ef9", "patch": "@@ -4,6 +4,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n+#![feature(backtrace)]\n #![feature(nll)]\n \n #[macro_use]\n@@ -296,9 +297,11 @@ struct HandlerInner {\n     /// This is not necessarily the count that's reported to the user once\n     /// compilation ends.\n     err_count: usize,\n+    warn_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n     delayed_span_bugs: Vec<Diagnostic>,\n+    delayed_good_path_bugs: Vec<Diagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -361,13 +364,15 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            let has_bugs = !bugs.is_empty();\n-            for bug in bugs {\n-                self.emit_diagnostic(&bug);\n-            }\n-            if has_bugs {\n-                panic!(\"no errors encountered even though `delay_span_bug` issued\");\n-            }\n+            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+        }\n+\n+        if !self.has_any_message() {\n+            let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n+            self.flush_delayed(\n+                bugs,\n+                \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n+            );\n         }\n     }\n }\n@@ -422,10 +427,12 @@ impl Handler {\n             inner: Lock::new(HandlerInner {\n                 flags,\n                 err_count: 0,\n+                warn_count: 0,\n                 deduplicated_err_count: 0,\n                 deduplicated_warn_count: 0,\n                 emitter,\n                 delayed_span_bugs: Vec::new(),\n+                delayed_good_path_bugs: Vec::new(),\n                 taught_diagnostics: Default::default(),\n                 emitted_diagnostic_codes: Default::default(),\n                 emitted_diagnostics: Default::default(),\n@@ -448,11 +455,13 @@ impl Handler {\n     pub fn reset_err_count(&self) {\n         let mut inner = self.inner.borrow_mut();\n         inner.err_count = 0;\n+        inner.warn_count = 0;\n         inner.deduplicated_err_count = 0;\n         inner.deduplicated_warn_count = 0;\n \n         // actually free the underlying memory (which `clear` would not do)\n         inner.delayed_span_bugs = Default::default();\n+        inner.delayed_good_path_bugs = Default::default();\n         inner.taught_diagnostics = Default::default();\n         inner.emitted_diagnostic_codes = Default::default();\n         inner.emitted_diagnostics = Default::default();\n@@ -629,6 +638,10 @@ impl Handler {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n \n+    pub fn delay_good_path_bug(&self, msg: &str) {\n+        self.inner.borrow_mut().delay_good_path_bug(msg)\n+    }\n+\n     pub fn span_bug_no_panic(&self, span: impl Into<MultiSpan>, msg: &str) {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), span);\n     }\n@@ -768,6 +781,8 @@ impl HandlerInner {\n         }\n         if diagnostic.is_error() {\n             self.bump_err_count();\n+        } else {\n+            self.bump_warn_count();\n         }\n     }\n \n@@ -859,6 +874,9 @@ impl HandlerInner {\n     fn has_errors_or_delayed_span_bugs(&self) -> bool {\n         self.has_errors() || !self.delayed_span_bugs.is_empty()\n     }\n+    fn has_any_message(&self) -> bool {\n+        self.err_count() > 0 || self.warn_count > 0\n+    }\n \n     fn abort_if_errors(&mut self) {\n         self.emit_stashed_diagnostics();\n@@ -892,6 +910,15 @@ impl HandlerInner {\n         self.delay_as_bug(diagnostic)\n     }\n \n+    fn delay_good_path_bug(&mut self, msg: &str) {\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        if self.flags.report_delayed_bugs {\n+            self.emit_diagnostic(&diagnostic);\n+        }\n+        diagnostic.note(&format!(\"delayed at {}\", std::backtrace::Backtrace::force_capture()));\n+        self.delayed_good_path_bugs.push(diagnostic);\n+    }\n+\n     fn failure(&mut self, msg: &str) {\n         self.emit_diagnostic(&Diagnostic::new(FailureNote, msg));\n     }\n@@ -925,11 +952,25 @@ impl HandlerInner {\n         self.delayed_span_bugs.push(diagnostic);\n     }\n \n+    fn flush_delayed(&mut self, bugs: Vec<Diagnostic>, explanation: &str) {\n+        let has_bugs = !bugs.is_empty();\n+        for bug in bugs {\n+            self.emit_diagnostic(&bug);\n+        }\n+        if has_bugs {\n+            panic!(\"{}\", explanation);\n+        }\n+    }\n+\n     fn bump_err_count(&mut self) {\n         self.err_count += 1;\n         self.panic_if_treat_err_as_bug();\n     }\n \n+    fn bump_warn_count(&mut self) {\n+        self.warn_count += 1;\n+    }\n+\n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n             let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {"}, {"sha": "ff22b4ce4ad9fb89f53503862e7451936969c0fd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b2deb562822112cc30d23958e7459564e2c6ef9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2deb562822112cc30d23958e7459564e2c6ef9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7b2deb562822112cc30d23958e7459564e2c6ef9", "patch": "@@ -442,6 +442,24 @@ impl Session {\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().delay_span_bug(sp, msg)\n     }\n+\n+    /// Used for code paths of expensive computations that should only take place when\n+    /// warnings or errors are emitted. If no messages are emitted (\"good path\"), then\n+    /// it's likely a bug.\n+    pub fn delay_good_path_bug(&self, msg: &str) {\n+        if self.opts.debugging_opts.print_type_sizes\n+            || self.opts.debugging_opts.query_dep_graph\n+            || self.opts.debugging_opts.dump_mir.is_some()\n+            || self.opts.debugging_opts.unpretty.is_some()\n+            || self.opts.output_types.contains_key(&OutputType::Mir)\n+            || std::env::var_os(\"RUSTC_LOG\").is_some()\n+        {\n+            return;\n+        }\n+\n+        self.diagnostic().delay_good_path_bug(msg)\n+    }\n+\n     pub fn note_without_error(&self, msg: &str) {\n         self.diagnostic().note_without_error(msg)\n     }"}]}