{"sha": "799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OWNhZGIyYmQ5ODBkMWJjZGNjODMxYzJkMGU1MGVjM2IyNzUyN2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-11T09:32:39Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-11T09:32:39Z"}, "message": "Remove unnecessary feature gates from const fns", "tree": {"sha": "c3f16114ab31c7785299f10ea86aebd30ffd228b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f16114ab31c7785299f10ea86aebd30ffd228b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "html_url": "https://github.com/rust-lang/rust/commit/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "html_url": "https://github.com/rust-lang/rust/commit/4c0116e13ffd4b84e6691cd3b1f09269c4e76728"}], "stats": {"total": 12, "additions": 1, "deletions": 11}, "files": [{"sha": "24965ff69318435e874eaad52f9dc8a1b58edcc3", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -26,7 +26,6 @@ const fn done<T>() -> *mut Arc<T> { 1_usize as *mut _ }\n unsafe impl<T> Sync for Lazy<T> {}\n \n impl<T> Lazy<T> {\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Lazy<T> {\n         Lazy {\n             lock: Mutex::new(),"}, {"sha": "1feb6f268fa0f2d4ca1d30c245601beb371c46a9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -271,6 +271,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(min_const_unsafe_fn)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "940f50f25b81a5e9e3c1b59277a69d4d3d984b28", "filename": "src/libstd/sys/sgx/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -18,7 +18,6 @@ pub struct Condvar {\n }\n \n impl Condvar {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }\n     }"}, {"sha": "994cf91eea0cd6e58e06a9ca48fbbbfe3d0046ea", "filename": "src/libstd/sys/sgx/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -20,7 +20,6 @@ pub struct Mutex {\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Mutex {\n         Mutex { inner: SpinMutex::new(WaitVariable::new(false)) }\n     }\n@@ -79,7 +78,6 @@ pub struct ReentrantMutex {\n }\n \n impl ReentrantMutex {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn uninitialized() -> ReentrantMutex {\n         ReentrantMutex {\n             inner: SpinMutex::new(WaitVariable::new(ReentrantLock { owner: None, count: 0 }))"}, {"sha": "a1551dbb53b2ddb4de0eb5dd5438609811ea9ef4", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -21,7 +21,6 @@ pub struct RWLock {\n //unsafe impl Sync for RWLock {} // FIXME\n \n impl RWLock {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> RWLock {\n         RWLock {\n             readers: SpinMutex::new(WaitVariable::new(None)),"}, {"sha": "ef0def13eee882d4e91f5bd2c36b38940bdc6688", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -50,7 +50,6 @@ pub struct WaitVariable<T> {\n }\n \n impl<T> WaitVariable<T> {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new(var: T) -> Self {\n         WaitVariable {\n             queue: WaitQueue::new(),\n@@ -137,7 +136,6 @@ impl<'a, T> Drop for WaitGuard<'a, T> {\n }\n \n impl WaitQueue {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Self {\n         WaitQueue {\n             inner: UnsafeList::new()\n@@ -255,7 +253,6 @@ mod unsafe_list {\n     }\n \n     impl<T> UnsafeList<T> {\n-        #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n         pub const fn new() -> Self {\n             unsafe {\n                 UnsafeList {"}, {"sha": "b6f29dd5fc3d3184f6a528fcb36f70b64b3f1051", "filename": "src/libstd/sys_common/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fcondvar.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -25,7 +25,6 @@ impl Condvar {\n     ///\n     /// Behavior is undefined if the condition variable is moved after it is\n     /// first used with any of the functions below.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Condvar { Condvar(imp::Condvar::new()) }\n \n     /// Prepares the condition variable for use."}, {"sha": "c6d531c7a1ac59cbb3b641ea96fc645a3b2f6d2d", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -27,7 +27,6 @@ impl Mutex {\n     /// Also, until `init` is called, behavior is undefined if this\n     /// mutex is ever used reentrantly, i.e., `raw_lock` or `try_lock`\n     /// are called by the thread currently holding the lock.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Mutex { Mutex(imp::Mutex::new()) }\n \n     /// Prepare the mutex for use."}, {"sha": "71a4f01ec4cab9f2d3edcee78af3373f2484e24f", "filename": "src/libstd/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cadb2bd980d1bcdcc831c2d0e50ec3b27527b/src%2Flibstd%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Frwlock.rs?ref=799cadb2bd980d1bcdcc831c2d0e50ec3b27527b", "patch": "@@ -22,7 +22,6 @@ impl RWLock {\n     ///\n     /// Behavior is undefined if the reader-writer lock is moved after it is\n     /// first used with any of the functions below.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> RWLock { RWLock(imp::RWLock::new()) }\n \n     /// Acquires shared access to the underlying lock, blocking the current"}]}