{"sha": "c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTdhYzA0ZTJlYmRhMzc4ZmQ5ZTM4ZjZlYzA4NzhhZTNhMmJhZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-10T16:18:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-10T16:18:44Z"}, "message": "Auto merge of #24177 - alexcrichton:rustdoc, r=aturon\n\nThis commit series starts out with more official test harness support for rustdoc tests, and then each commit afterwards adds a test (where appropriate). Each commit should also test and finish independently of all others (they're all pretty separable).\r\n\r\nI've uploaded a [copy of the documentation](http://people.mozilla.org/~acrichton/doc/std/) generated after all these commits were applied, and a double check on issues being closed would be greatly appreciated! I'll also browse the docs a bit and make sure nothing regressed too horribly.", "tree": {"sha": "f26b1f3541943b61937faf150f90b46e9a8f15c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26b1f3541943b61937faf150f90b46e9a8f15c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "html_url": "https://github.com/rust-lang/rust/commit/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9539627ac76ca37d617a329dbd79c50c59cf59ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9539627ac76ca37d617a329dbd79c50c59cf59ee", "html_url": "https://github.com/rust-lang/rust/commit/9539627ac76ca37d617a329dbd79c50c59cf59ee"}, {"sha": "445faca8441aae34c91318b6ad9e2049885af8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/445faca8441aae34c91318b6ad9e2049885af8dc", "html_url": "https://github.com/rust-lang/rust/commit/445faca8441aae34c91318b6ad9e2049885af8dc"}], "stats": {"total": 3040, "additions": 2128, "deletions": 912}, "files": [{"sha": "8108e10752a2069ef9d94d12a2192c5484980360", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -1128,6 +1128,7 @@ do\n     make_dir $h/test/debuginfo-gdb\n     make_dir $h/test/debuginfo-lldb\n     make_dir $h/test/codegen\n+    make_dir $h/test/rustdoc\n done\n \n # Configure submodules"}, {"sha": "666d95b6d651d83a05b06f0302d395828cd16af1", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -118,42 +118,13 @@ ONLY_RLIB_collections := 1\n ONLY_RLIB_unicode := 1\n ONLY_RLIB_rustc_bitflags := 1\n \n+# Documented-by-default crates\n+DOC_CRATES := std alloc collections core libc unicode\n+\n ################################################################################\n # You should not need to edit below this line\n ################################################################################\n \n-# On channels where the only usable crate is std, only build documentation for\n-# std. This keeps distributions small and doesn't clutter up the API docs with\n-# confusing internal details from the crates behind the facade.\n-#\n-# (Disabled while cmr figures out how to change rustdoc to make reexports work\n-# slightly nicer. Otherwise, all cross-crate links to Vec will go to\n-# libcollections, breaking them, and [src] links for anything reexported will\n-# not work.)\n-\n-#ifeq ($(CFG_RELEASE_CHANNEL),stable)\n-#DOC_CRATES := std\n-#else\n-#ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-#DOC_CRATES := std\n-#else\n-DOC_CRATES := $(filter-out rustc, \\\n-\t   $(filter-out rustc_trans, \\\n-\t   $(filter-out rustc_typeck, \\\n-\t   $(filter-out rustc_borrowck, \\\n-\t   $(filter-out rustc_resolve, \\\n-\t   $(filter-out rustc_driver, \\\n-\t   $(filter-out rustc_privacy, \\\n-\t   $(filter-out rustc_lint, \\\n-\t   $(filter-out log, \\\n-\t   $(filter-out getopts, \\\n-\t   $(filter-out syntax, $(CRATES))))))))))))\n-#endif\n-#endif\n-COMPILER_DOC_CRATES := rustc rustc_trans rustc_borrowck rustc_resolve \\\n-                       rustc_typeck rustc_driver syntax rustc_privacy \\\n-                       rustc_lint\n-\n # This macro creates some simple definitions for each crate being built, just\n # some munging of all of the parameters above.\n #"}, {"sha": "d179d337faa61215f8084ae9f4ca6215fc05199c", "filename": "mk/docs.mk", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -250,18 +250,20 @@ endif\n doc/$(1)/:\n \t$$(Q)mkdir -p $$@\n \n-$(2) += doc/$(1)/index.html\n doc/$(1)/index.html: CFG_COMPILER_HOST_TRIPLE = $(CFG_TARGET)\n doc/$(1)/index.html: $$(LIB_DOC_DEP_$(1)) doc/$(1)/\n \t@$$(call E, rustdoc: $$@)\n \t$$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(CFG_BUILD)) \\\n-\t\t$$(RUSTDOC) --cfg dox --cfg stage2 $$<\n+\t\t$$(RUSTDOC) --cfg dox --cfg stage2 $$(RUSTFLAGS_$(1)) $$<\n endef\n \n-$(foreach crate,$(DOC_CRATES),$(eval $(call DEF_LIB_DOC,$(crate),DOC_TARGETS)))\n+$(foreach crate,$(CRATES),$(eval $(call DEF_LIB_DOC,$(crate))))\n \n+COMPILER_DOC_TARGETS := $(CRATES:%=doc/%/index.html)\n ifdef CFG_COMPILER_DOCS\n-  $(foreach crate,$(COMPILER_DOC_CRATES),$(eval $(call DEF_LIB_DOC,$(crate),COMPILER_DOC_TARGETS)))\n+  DOC_TARGETS += $(COMPILER_DOC_TARGETS)\n+else\n+  DOC_TARGETS += $(DOC_CRATES:%=doc/%/index.html)\n endif\n \n ifdef CFG_DISABLE_DOCS"}, {"sha": "a540d2bace4c604fc6bcde29e4f651c5120911c3", "filename": "mk/tests.mk", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -22,9 +22,11 @@ $(eval $(call RUST_CRATE,coretest))\n DEPS_collectionstest :=\n $(eval $(call RUST_CRATE,collectionstest))\n \n-TEST_TARGET_CRATES = $(filter-out core unicode,$(TARGET_CRATES)) collectionstest coretest\n+TEST_TARGET_CRATES = $(filter-out core unicode,$(TARGET_CRATES)) \\\n+\t\t\tcollectionstest coretest\n TEST_DOC_CRATES = $(DOC_CRATES)\n-TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve rustc_trans rustc_lint,\\\n+TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\\n+\t\t   \t\trustc_trans rustc_lint,\\\n                      $(HOST_CRATES))\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n@@ -304,6 +306,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n     check-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rustdocck-exec \\\n         check-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n         check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec \\\n@@ -471,6 +474,7 @@ DEBUGINFO_GDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n DEBUGINFO_LLDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n CODEGEN_RS := $(wildcard $(S)src/test/codegen/*.rs)\n CODEGEN_CC := $(wildcard $(S)src/test/codegen/*.cc)\n+RUSTDOCCK_RS := $(wildcard $(S)src/test/rustdoc/*.rs)\n \n # perf tests are the same as bench tests only they run under\n # a performance monitor.\n@@ -489,6 +493,7 @@ PRETTY_TESTS := $(PRETTY_RS)\n DEBUGINFO_GDB_TESTS := $(DEBUGINFO_GDB_RS)\n DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n+RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n CTEST_BUILD_BASE_rpass = run-pass\n@@ -550,6 +555,11 @@ CTEST_BUILD_BASE_codegen = codegen\n CTEST_MODE_codegen = codegen\n CTEST_RUNTOOL_codegen = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_rustdocck = rustdoc\n+CTEST_BUILD_BASE_rustdocck = rustdoc\n+CTEST_MODE_rustdocck = rustdoc\n+CTEST_RUNTOOL_rustdocck = $(CTEST_RUNTOOL)\n+\n # CTEST_DISABLE_$(TEST_GROUP), if set, will cause the test group to be\n # disabled and the associated message to be printed as a warning\n # during attempts to run those tests.\n@@ -618,12 +628,14 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+        --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n         --clang-path $(if $(CFG_CLANG),$(CFG_CLANG),clang) \\\n         --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n         --aux-base $$(S)src/test/auxiliary/ \\\n         --stage-id stage$(1)-$(2) \\\n         --target $(2) \\\n         --host $(3) \\\n+\t--python $$(CFG_PYTHON) \\\n         --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n         --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n         --android-cross-path=$(CFG_ANDROID_CROSS_PATH) \\\n@@ -660,6 +672,9 @@ CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n                                                $(S)src/etc/lldb_batchmode.py \\\n                                                $(S)src/etc/lldb_rust_formatters.py\n CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n+CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n+        $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n+\t$(S)src/etc/htmldocck.py\n \n endef\n \n@@ -722,7 +737,8 @@ endif\n \n endef\n \n-CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail pfail bench perf debuginfo-gdb debuginfo-lldb codegen\n+CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail pfail \\\n+\tbench perf debuginfo-gdb debuginfo-lldb codegen rustdocck\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -890,6 +906,7 @@ TEST_GROUPS = \\\n \tbench \\\n \tperf \\\n \trmake \\\n+\trustdocck \\\n \tdebuginfo-gdb \\\n \tdebuginfo-lldb \\\n \tcodegen \\"}, {"sha": "dcac32ccb8a40564eb2217cca1c409f0ccdc7f3f", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -23,7 +23,8 @@ pub enum Mode {\n     Pretty,\n     DebugInfoGdb,\n     DebugInfoLldb,\n-    Codegen\n+    Codegen,\n+    Rustdoc,\n }\n \n impl FromStr for Mode {\n@@ -39,6 +40,7 @@ impl FromStr for Mode {\n           \"debuginfo-lldb\" => Ok(DebugInfoLldb),\n           \"debuginfo-gdb\" => Ok(DebugInfoGdb),\n           \"codegen\" => Ok(Codegen),\n+          \"rustdoc\" => Ok(Rustdoc),\n           _ => Err(()),\n         }\n     }\n@@ -56,6 +58,7 @@ impl fmt::Display for Mode {\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n             Codegen => \"codegen\",\n+            Rustdoc => \"rustdoc\",\n         }, f)\n     }\n }\n@@ -71,6 +74,12 @@ pub struct Config {\n     // The rustc executable\n     pub rustc_path: PathBuf,\n \n+    // The rustdoc executable\n+    pub rustdoc_path: PathBuf,\n+\n+    // The python executable\n+    pub python: String,\n+\n     // The clang executable\n     pub clang_path: Option<PathBuf>,\n "}, {"sha": "e680be2a8c526bf0ec7263e6ee9fc9f609f3c1c7", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -60,6 +60,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         vec!(reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n+          reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\"),\n+          reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\"),\n           optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n           optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n           optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n@@ -128,6 +130,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         compile_lib_path: matches.opt_str(\"compile-lib-path\").unwrap(),\n         run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n+        rustdoc_path: opt_path(matches, \"rustdoc-path\"),\n+        python: matches.opt_str(\"python\").unwrap(),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| PathBuf::from(&s)),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n@@ -168,6 +172,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"compile_lib_path: {:?}\", config.compile_lib_path));\n     logv(c, format!(\"run_lib_path: {:?}\", config.run_lib_path));\n     logv(c, format!(\"rustc_path: {:?}\", config.rustc_path.display()));\n+    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path.display()));\n     logv(c, format!(\"src_base: {:?}\", config.src_base.display()));\n     logv(c, format!(\"build_base: {:?}\", config.build_base.display()));\n     logv(c, format!(\"stage_id: {}\", config.stage_id));"}, {"sha": "daa53e2dbd596a4267ed22021f9e4833ce8d4693", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 85, "deletions": 44, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -12,7 +12,7 @@ use self::TargetLocation::*;\n \n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n-use common::{Codegen, DebugInfoLldb, DebugInfoGdb};\n+use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc};\n use errors;\n use header::TestProps;\n use header;\n@@ -57,15 +57,16 @@ pub fn run_metrics(config: Config, testfile: &Path, mm: &mut MetricMap) {\n     let props = header::load_props(&testfile);\n     debug!(\"loaded props\");\n     match config.mode {\n-      CompileFail => run_cfail_test(&config, &props, &testfile),\n-      ParseFail => run_cfail_test(&config, &props, &testfile),\n-      RunFail => run_rfail_test(&config, &props, &testfile),\n-      RunPass => run_rpass_test(&config, &props, &testfile),\n-      RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n-      Pretty => run_pretty_test(&config, &props, &testfile),\n-      DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n-      DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n-      Codegen => run_codegen_test(&config, &props, &testfile, mm),\n+        CompileFail => run_cfail_test(&config, &props, &testfile),\n+        ParseFail => run_cfail_test(&config, &props, &testfile),\n+        RunFail => run_rfail_test(&config, &props, &testfile),\n+        RunPass => run_rpass_test(&config, &props, &testfile),\n+        RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n+        Pretty => run_pretty_test(&config, &props, &testfile),\n+        DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n+        DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n+        Codegen => run_codegen_test(&config, &props, &testfile, mm),\n+        Rustdoc => run_rustdoc_test(&config, &props, &testfile),\n     }\n }\n \n@@ -725,32 +726,37 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n                 -> ProcRes {\n         // Prepare the lldb_batchmode which executes the debugger script\n         let lldb_script_path = rust_src_root.join(\"src/etc/lldb_batchmode.py\");\n+        cmd2procres(config,\n+                    test_executable,\n+                    Command::new(&config.python)\n+                            .arg(&lldb_script_path)\n+                            .arg(test_executable)\n+                            .arg(debugger_script)\n+                            .env(\"PYTHONPATH\",\n+                                 config.lldb_python_dir.as_ref().unwrap()))\n+    }\n+}\n \n-        let mut cmd = Command::new(\"python\");\n-        cmd.arg(&lldb_script_path)\n-           .arg(test_executable)\n-           .arg(debugger_script)\n-           .env(\"PYTHONPATH\", config.lldb_python_dir.as_ref().unwrap());\n-\n-        let (status, out, err) = match cmd.output() {\n-            Ok(Output { status, stdout, stderr }) => {\n-                (status,\n-                 String::from_utf8(stdout).unwrap(),\n-                 String::from_utf8(stderr).unwrap())\n-            },\n-            Err(e) => {\n-                fatal(&format!(\"Failed to setup Python process for \\\n-                                LLDB script: {}\", e))\n-            }\n-        };\n+fn cmd2procres(config: &Config, test_executable: &Path, cmd: &mut Command)\n+              -> ProcRes {\n+    let (status, out, err) = match cmd.output() {\n+        Ok(Output { status, stdout, stderr }) => {\n+            (status,\n+             String::from_utf8(stdout).unwrap(),\n+             String::from_utf8(stderr).unwrap())\n+        },\n+        Err(e) => {\n+            fatal(&format!(\"Failed to setup Python process for \\\n+                            LLDB script: {}\", e))\n+        }\n+    };\n \n-        dump_output(config, test_executable, &out, &err);\n-        return ProcRes {\n-            status: Status::Normal(status),\n-            stdout: out,\n-            stderr: err,\n-            cmdline: format!(\"{:?}\", cmd)\n-        };\n+    dump_output(config, test_executable, &out, &err);\n+    ProcRes {\n+        status: Status::Normal(status),\n+        stdout: out,\n+        stderr: err,\n+        cmdline: format!(\"{:?}\", cmd)\n     }\n }\n \n@@ -1157,6 +1163,26 @@ fn compile_test_(config: &Config, props: &TestProps,\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n+fn document(config: &Config, props: &TestProps,\n+            testfile: &Path, extra_args: &[String]) -> (ProcRes, PathBuf) {\n+    let aux_dir = aux_output_dir_name(config, testfile);\n+    let out_dir = output_base_name(config, testfile);\n+    let _ = fs::remove_dir_all(&out_dir);\n+    ensure_dir(&out_dir);\n+    let mut args = vec![\"-L\".to_string(),\n+                        aux_dir.to_str().unwrap().to_string(),\n+                        \"-o\".to_string(),\n+                        out_dir.to_str().unwrap().to_string(),\n+                        testfile.to_str().unwrap().to_string()];\n+    args.extend(extra_args.iter().cloned());\n+    args.extend(split_maybe_args(&props.compile_flags).into_iter());\n+    let args = ProcArgs {\n+        prog: config.rustdoc_path.to_str().unwrap().to_string(),\n+        args: args,\n+    };\n+    (compose_and_run_compiler(config, props, testfile, args, None), out_dir)\n+}\n+\n fn exec_compiled_test(config: &Config, props: &TestProps,\n                       testfile: &Path) -> ProcRes {\n \n@@ -1181,20 +1207,17 @@ fn exec_compiled_test(config: &Config, props: &TestProps,\n     }\n }\n \n-fn compose_and_run_compiler(\n-    config: &Config,\n-    props: &TestProps,\n-    testfile: &Path,\n-    args: ProcArgs,\n-    input: Option<String>) -> ProcRes {\n-\n+fn compose_and_run_compiler(config: &Config, props: &TestProps,\n+                            testfile: &Path, args: ProcArgs,\n+                            input: Option<String>) -> ProcRes {\n     if !props.aux_builds.is_empty() {\n         ensure_dir(&aux_output_dir_name(config, testfile));\n     }\n \n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let extra_link_args = vec!(\"-L\".to_string(), aux_dir.to_str().unwrap().to_string());\n+    let extra_link_args = vec![\"-L\".to_string(),\n+                               aux_dir.to_str().unwrap().to_string()];\n \n     for rel_ab in &props.aux_builds {\n         let abs_ab = config.aux_base.join(rel_ab);\n@@ -1330,8 +1353,8 @@ fn make_exe_name(config: &Config, testfile: &Path) -> PathBuf {\n     f\n }\n \n-fn make_run_args(config: &Config, props: &TestProps, testfile: &Path) ->\n-   ProcArgs {\n+fn make_run_args(config: &Config, props: &TestProps, testfile: &Path)\n+                 -> ProcArgs {\n     // If we've got another tool to run under (valgrind),\n     // then split apart its command\n     let mut args = split_maybe_args(&config.runtool);\n@@ -1797,3 +1820,21 @@ fn charset() -> &'static str {\n         \"UTF-8\"\n     }\n }\n+\n+fn run_rustdoc_test(config: &Config, props: &TestProps, testfile: &Path) {\n+    let (proc_res, out_dir) = document(config, props, testfile, &[]);\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+    }\n+    let root = find_rust_src_root(config).unwrap();\n+\n+    let res = cmd2procres(config,\n+                          testfile,\n+                          Command::new(&config.python)\n+                                  .arg(root.join(\"src/etc/htmldocck.py\"))\n+                                  .arg(out_dir)\n+                                  .arg(testfile));\n+    if !res.status.success() {\n+        fatal_proc_rec(\"htmldocck failed!\", &res);\n+    }\n+}"}, {"sha": "b077d3d5ce68f391b9fbcc306f2a8d3bc2683d9a", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -89,7 +89,9 @@ This line does all of the work in our little program. There are a number of\n details that are important here. The first is that it's indented with four\n spaces, not tabs. Please configure your editor of choice to insert four spaces\n with the tab key. We provide some [sample configurations for various\n-editors](https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md).\n+editors][configs].\n+\n+[configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md\n \n The second point is the `println!()` part. This is calling a Rust *macro*,\n which is how metaprogramming is done in Rust. If it were a function instead, it"}, {"sha": "2acee8a97f59f344a57f65f3b7fac89f0bf79d36", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -186,7 +186,8 @@ def concat_multi_lines(f):\n \n         firstlineno = firstlineno or lineno\n         if line.endswith('\\\\'):\n-            lastline = line[:-1]\n+            if lastline is None:\n+                lastline = line[:-1]\n             catenated += line[:-1]\n         else:\n             yield firstlineno, catenated + line"}, {"sha": "ba9748eea7146371ee1b6ac37ed960ba5711d54c", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -139,6 +139,7 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n // NB: the stabilization and documentation for this trait is in\n // unicode/char.rs, not here\n #[allow(missing_docs)] // docs in libunicode/u_char.rs\n+#[doc(hidden)]\n pub trait CharExt {\n     fn is_digit(self, radix: u32) -> bool;\n     fn to_digit(self, radix: u32) -> Option<u32>;"}, {"sha": "ece419af9517239cc3e1cb954d475672aa80c4a4", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -229,7 +229,6 @@ macro_rules! writeln {\n /// Iterators:\n ///\n /// ```\n-/// # #![feature(core)]\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in 0.. {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "9007a5142c3c779d2659a11a783b768c4d52d969", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -2490,6 +2490,7 @@ pub enum FpCategory {\n //               `unused_self`. Removing it requires #8888 to be fixed.\n #[unstable(feature = \"core\",\n            reason = \"distribution of methods between core/std is unclear\")]\n+#[doc(hidden)]\n pub trait Float\n     : Copy + Clone\n     + NumCast"}, {"sha": "a622ef78a21a4d6235a9ee5ec25774b2e50d9528", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -89,6 +89,7 @@\n //! of unsafe pointers in Rust.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![doc(primitive = \"pointer\")]\n \n use mem;\n use clone::Clone;"}, {"sha": "0e6acf0160d8121e466fafb82bbdfbfeab6d66c0", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -63,6 +63,7 @@ use raw::Slice as RawSlice;\n \n /// Extension methods for slices.\n #[allow(missing_docs)] // docs in libcollections\n+#[doc(hidden)]\n pub trait SliceExt {\n     type Item;\n "}, {"sha": "9bc760b56ec43f0e6b76f0e43f24b38dae8b73c5", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -1496,6 +1496,7 @@ impl<'a, S: ?Sized> Str for &'a S where S: Str {\n \n /// Methods for string slices\n #[allow(missing_docs)]\n+#[doc(hidden)]\n pub trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // libcollections, not here."}, {"sha": "f9d3d707bb5ddc2e3ab8977dce5c380e9cb8c960", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -1264,7 +1264,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_paren_sugar(rbml_w, trait_def.paren_sugar);\n         encode_defaulted(rbml_w, ty::trait_has_default_impl(tcx, def_id));\n         encode_associated_type_names(rbml_w, &trait_def.associated_type_names);\n-        encode_generics(rbml_w, ecx, &trait_def.generics, &trait_predicates, tag_item_generics);\n+        encode_generics(rbml_w, ecx, &trait_def.generics, &trait_predicates,\n+                        tag_item_generics);\n         encode_predicates(rbml_w, ecx, &ty::lookup_super_predicates(tcx, def_id),\n                           tag_item_super_predicates);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);"}, {"sha": "f14437b71b47ae627abdb0bf91edc61e5b5799a8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -10,6 +10,8 @@\n \n //! Support for inlining external documentation into the current AST.\n \n+use std::collections::HashSet;\n+\n use syntax::ast;\n use syntax::ast_util;\n use syntax::attr::AttrMetaMethods;\n@@ -150,25 +152,29 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     let def = ty::lookup_trait_def(tcx, did);\n     let trait_items = ty::trait_items(tcx, did).clean(cx);\n     let predicates = ty::lookup_predicates(tcx, did);\n+    let generics = (&def.generics, &predicates, subst::TypeSpace).clean(cx);\n+    let generics = filter_non_trait_generics(did, generics);\n+    let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n     clean::Trait {\n         unsafety: def.unsafety,\n-        generics: (&def.generics, &predicates, subst::TypeSpace).clean(cx),\n+        generics: generics,\n         items: trait_items,\n-        bounds: vec![], // supertraits can be found in the list of predicates\n+        bounds: supertrait_bounds,\n     }\n }\n \n fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::Function {\n     let t = ty::lookup_item_type(tcx, did);\n-    let (decl, style) = match t.ty.sty {\n-        ty::ty_bare_fn(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety),\n+    let (decl, style, abi) = match t.ty.sty {\n+        ty::ty_bare_fn(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n         _ => panic!(\"bad function\"),\n     };\n     let predicates = ty::lookup_predicates(tcx, did);\n     clean::Function {\n         decl: decl,\n         generics: (&t.generics, &predicates, subst::FnSpace).clean(cx),\n         unsafety: style,\n+        abi: abi,\n     }\n }\n \n@@ -331,9 +337,10 @@ fn build_impl(cx: &DocContext,\n                 let did = assoc_ty.def_id;\n                 let type_scheme = ty::lookup_item_type(tcx, did);\n                 let predicates = ty::lookup_predicates(tcx, did);\n-                // Not sure the choice of ParamSpace actually matters here, because an\n-                // associated type won't have generics on the LHS\n-                let typedef = (type_scheme, predicates, subst::ParamSpace::TypeSpace).clean(cx);\n+                // Not sure the choice of ParamSpace actually matters here,\n+                // because an associated type won't have generics on the LHS\n+                let typedef = (type_scheme, predicates,\n+                               subst::ParamSpace::TypeSpace).clean(cx);\n                 Some(clean::Item {\n                     name: Some(assoc_ty.name.clean(cx)),\n                     inner: clean::TypedefItem(typedef),\n@@ -395,16 +402,19 @@ fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n         is_crate: false,\n     };\n \n-    // FIXME: this doesn't handle reexports inside the module itself.\n-    //        Should they be handled?\n     fn fill_in(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId,\n                items: &mut Vec<clean::Item>) {\n+        // If we're reexporting a reexport it may actually reexport something in\n+        // two namespaces, so the target may be listed twice. Make sure we only\n+        // visit each node at most once.\n+        let mut visited = HashSet::new();\n         csearch::each_child_of_item(&tcx.sess.cstore, did, |def, _, vis| {\n             match def {\n                 decoder::DlDef(def::DefForeignMod(did)) => {\n                     fill_in(cx, tcx, did, items);\n                 }\n                 decoder::DlDef(def) if vis == ast::Public => {\n+                    if !visited.insert(def) { return }\n                     match try_inline_def(cx, tcx, def) {\n                         Some(i) => items.extend(i.into_iter()),\n                         None => {}\n@@ -446,3 +456,48 @@ fn build_static(cx: &DocContext, tcx: &ty::ctxt,\n         expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n     }\n }\n+\n+/// A trait's generics clause actually contains all of the predicates for all of\n+/// its associated types as well. We specifically move these clauses to the\n+/// associated types instead when displaying, so when we're genering the\n+/// generics for the trait itself we need to be sure to remove them.\n+///\n+/// The inverse of this filtering logic can be found in the `Clean`\n+/// implementation for `AssociatedType`\n+fn filter_non_trait_generics(trait_did: ast::DefId, mut g: clean::Generics)\n+                             -> clean::Generics {\n+    g.where_predicates.retain(|pred| {\n+        match *pred {\n+            clean::WherePredicate::BoundPredicate {\n+                ty: clean::QPath {\n+                    self_type: box clean::Generic(ref s),\n+                    trait_: box clean::ResolvedPath { did, .. },\n+                    name: ref _name,\n+                }, ..\n+            } => *s != \"Self\" || did != trait_did,\n+            _ => true,\n+        }\n+    });\n+    return g;\n+}\n+\n+/// Supertrait bounds for a trait are also listed in the generics coming from\n+/// the metadata for a crate, so we want to separate those out and create a new\n+/// list of explicit supertrait bounds to render nicely.\n+fn separate_supertrait_bounds(mut g: clean::Generics)\n+                              -> (clean::Generics, Vec<clean::TyParamBound>) {\n+    let mut ty_bounds = Vec::new();\n+    g.where_predicates.retain(|pred| {\n+        match *pred {\n+            clean::WherePredicate::BoundPredicate {\n+                ty: clean::Generic(ref s),\n+                ref bounds\n+            } if *s == \"Self\" => {\n+                ty_bounds.extend(bounds.iter().cloned());\n+                false\n+            }\n+            _ => true,\n+        }\n+    });\n+    (g, ty_bounds)\n+}"}, {"sha": "38df0339e42503410c20b0bad656287f1961ec4e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 194, "deletions": 70, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -44,9 +44,10 @@ use rustc::middle::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::middle::ty;\n use rustc::middle::stability;\n \n+use std::collections::HashMap;\n+use std::path::PathBuf;\n use std::rc::Rc;\n use std::u32;\n-use std::path::PathBuf;\n \n use core::DocContext;\n use doctree;\n@@ -57,6 +58,7 @@ use visit_ast;\n pub static SCHEMA_VERSION: &'static str = \"0.8.3\";\n \n mod inline;\n+mod simplify;\n \n // extract the stability index for a node from tcx, if possible\n fn get_stability(cx: &DocContext, def_id: ast::DefId) -> Option<Stability> {\n@@ -119,6 +121,7 @@ pub struct Crate {\n     pub module: Option<Item>,\n     pub externs: Vec<(ast::CrateNum, ExternalCrate)>,\n     pub primitives: Vec<PrimitiveType>,\n+    pub external_traits: HashMap<ast::DefId, Trait>,\n }\n \n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n@@ -197,6 +200,8 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             module: Some(module),\n             externs: externs,\n             primitives: primitives,\n+            external_traits: cx.external_traits.borrow_mut().take()\n+                               .unwrap_or(HashMap::new()),\n         }\n     }\n }\n@@ -493,6 +498,35 @@ pub enum TyParamBound {\n     TraitBound(PolyTrait, ast::TraitBoundModifier)\n }\n \n+impl TyParamBound {\n+    fn maybe_sized(cx: &DocContext) -> TyParamBound {\n+        use syntax::ast::TraitBoundModifier as TBM;\n+        let mut sized_bound = ty::BuiltinBound::BoundSized.clean(cx);\n+        if let TyParamBound::TraitBound(_, ref mut tbm) = sized_bound {\n+            *tbm = TBM::Maybe\n+        };\n+        sized_bound\n+    }\n+\n+    fn is_sized_bound(&self, cx: &DocContext) -> bool {\n+        use syntax::ast::TraitBoundModifier as TBM;\n+        if let Some(tcx) = cx.tcx_opt() {\n+            let sized_did = match tcx.lang_items.sized_trait() {\n+                Some(did) => did,\n+                None => return false\n+            };\n+            if let TyParamBound::TraitBound(PolyTrait {\n+                trait_: Type::ResolvedPath { did, .. }, ..\n+            }, TBM::None) = *self {\n+                if did == sized_did {\n+                    return true\n+                }\n+            }\n+        }\n+        false\n+    }\n+}\n+\n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n@@ -830,7 +864,9 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         let trait_ = match self.trait_ref.clean(cx) {\n             TyParamBound::TraitBound(t, _) => t.trait_,\n-            TyParamBound::RegionBound(_) => panic!(\"cleaning a trait got a region??\"),\n+            TyParamBound::RegionBound(_) => {\n+                panic!(\"cleaning a trait got a region\")\n+            }\n         };\n         Type::QPath {\n             name: self.item_name.clean(cx),\n@@ -863,32 +899,13 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n                                     subst::ParamSpace) {\n     fn clean(&self, cx: &DocContext) -> Generics {\n         use std::collections::HashSet;\n-        use syntax::ast::TraitBoundModifier as TBM;\n         use self::WherePredicate as WP;\n \n-        fn has_sized_bound(bounds: &[TyParamBound], cx: &DocContext) -> bool {\n-            if let Some(tcx) = cx.tcx_opt() {\n-                let sized_did = match tcx.lang_items.sized_trait() {\n-                    Some(did) => did,\n-                    None => return false\n-                };\n-                for bound in bounds {\n-                    if let TyParamBound::TraitBound(PolyTrait {\n-                        trait_: Type::ResolvedPath { did, .. }, ..\n-                    }, TBM::None) = *bound {\n-                        if did == sized_did {\n-                            return true\n-                        }\n-                    }\n-                }\n-            }\n-            false\n-        }\n-\n         let (gens, preds, space) = *self;\n \n-        // Bounds in the type_params and lifetimes fields are repeated in the predicates\n-        // field (see rustc_typeck::collect::ty_generics), so remove them.\n+        // Bounds in the type_params and lifetimes fields are repeated in the\n+        // predicates field (see rustc_typeck::collect::ty_generics), so remove\n+        // them.\n         let stripped_typarams = gens.types.get_slice(space).iter().map(|tp| {\n             tp.clean(cx)\n         }).collect::<Vec<_>>();\n@@ -898,33 +915,38 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n             srp.clean(cx)\n         }).collect::<Vec<_>>();\n \n-        let where_predicates = preds.predicates.get_slice(space).to_vec().clean(cx);\n+        let mut where_predicates = preds.predicates.get_slice(space)\n+                                                   .to_vec().clean(cx);\n \n-        // Type parameters have a Sized bound by default unless removed with ?Sized.\n-        // Scan through the predicates and mark any type parameter with a Sized\n-        // bound, removing the bounds as we find them.\n+        // Type parameters and have a Sized bound by default unless removed with\n+        // ?Sized.  Scan through the predicates and mark any type parameter with\n+        // a Sized bound, removing the bounds as we find them.\n+        //\n+        // Note that associated types also have a sized bound by default, but we\n+        // don't actually konw the set of associated types right here so that's\n+        // handled in cleaning associated types\n         let mut sized_params = HashSet::new();\n-        let mut where_predicates = where_predicates.into_iter().filter_map(|pred| {\n-            if let WP::BoundPredicate { ty: Type::Generic(ref g), ref bounds } = pred {\n-                if has_sized_bound(&**bounds, cx) {\n-                    sized_params.insert(g.clone());\n-                    return None\n+        where_predicates.retain(|pred| {\n+            match *pred {\n+                WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n+                    if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n+                        sized_params.insert(g.clone());\n+                        false\n+                    } else {\n+                        true\n+                    }\n                 }\n+                _ => true,\n             }\n-            Some(pred)\n-        }).collect::<Vec<_>>();\n+        });\n \n-        // Finally, run through the type parameters again and insert a ?Sized unbound for\n-        // any we didn't find to be Sized.\n+        // Run through the type parameters again and insert a ?Sized\n+        // unbound for any we didn't find to be Sized.\n         for tp in &stripped_typarams {\n             if !sized_params.contains(&tp.name) {\n-                let mut sized_bound = ty::BuiltinBound::BoundSized.clean(cx);\n-                if let TyParamBound::TraitBound(_, ref mut tbm) = sized_bound {\n-                    *tbm = TBM::Maybe\n-                };\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n-                    bounds: vec![sized_bound]\n+                    bounds: vec![TyParamBound::maybe_sized(cx)],\n                 })\n             }\n         }\n@@ -934,9 +956,9 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            type_params: stripped_typarams,\n+            type_params: simplify::ty_params(stripped_typarams),\n             lifetimes: stripped_lifetimes,\n-            where_predicates: where_predicates\n+            where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }\n }\n@@ -1032,6 +1054,7 @@ pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub unsafety: ast::Unsafety,\n+    pub abi: abi::Abi\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -1047,6 +1070,7 @@ impl Clean<Item> for doctree::Function {\n                 decl: self.decl.clean(cx),\n                 generics: self.generics.clean(cx),\n                 unsafety: self.unsafety,\n+                abi: self.abi,\n             }),\n         }\n     }\n@@ -1274,20 +1298,43 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n             }\n         };\n \n+        let generics = (&self.generics, &self.predicates,\n+                        subst::FnSpace).clean(cx);\n+        let decl = (self.def_id, &sig).clean(cx);\n+        let provided = match self.container {\n+            ty::ImplContainer(..) => false,\n+            ty::TraitContainer(did) => {\n+                ty::provided_trait_methods(cx.tcx(), did).iter().any(|m| {\n+                    m.def_id == self.def_id\n+                })\n+            }\n+        };\n+        let inner = if provided {\n+            MethodItem(Method {\n+                unsafety: self.fty.unsafety,\n+                generics: generics,\n+                self_: self_,\n+                decl: decl,\n+                abi: self.fty.abi\n+            })\n+        } else {\n+            TyMethodItem(TyMethod {\n+                unsafety: self.fty.unsafety,\n+                generics: generics,\n+                self_: self_,\n+                decl: decl,\n+                abi: self.fty.abi\n+            })\n+        };\n+\n         Item {\n             name: Some(self.name.clean(cx)),\n             visibility: Some(ast::Inherited),\n             stability: get_stability(cx, self.def_id),\n             def_id: self.def_id,\n             attrs: inline::load_attrs(cx, cx.tcx(), self.def_id),\n             source: Span::empty(),\n-            inner: TyMethodItem(TyMethod {\n-                unsafety: self.fty.unsafety,\n-                generics: (&self.generics, &self.predicates, subst::FnSpace).clean(cx),\n-                self_: self_,\n-                decl: (self.def_id, &sig).clean(cx),\n-                abi: self.fty.abi\n-            })\n+            inner: inner,\n         }\n     }\n }\n@@ -1365,6 +1412,7 @@ pub enum PrimitiveType {\n     Slice,\n     Array,\n     PrimitiveTuple,\n+    PrimitiveRawPointer,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1380,6 +1428,21 @@ pub enum TypeKind {\n     TypeTypedef,\n }\n \n+impl Type {\n+    pub fn primitive_type(&self) -> Option<PrimitiveType> {\n+        match *self {\n+            Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n+            Vector(..) | BorrowedRef{ type_: box Vector(..), ..  } => Some(Slice),\n+            FixedVector(..) | BorrowedRef { type_: box FixedVector(..), .. } => {\n+                Some(Array)\n+            }\n+            Tuple(..) => Some(PrimitiveTuple),\n+            RawPointer(..) => Some(PrimitiveRawPointer),\n+            _ => None,\n+        }\n+    }\n+}\n+\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s {\n@@ -1401,6 +1464,7 @@ impl PrimitiveType {\n             \"array\" => Some(Array),\n             \"slice\" => Some(Slice),\n             \"tuple\" => Some(PrimitiveTuple),\n+            \"pointer\" => Some(PrimitiveRawPointer),\n             _ => None,\n         }\n     }\n@@ -1446,6 +1510,7 @@ impl PrimitiveType {\n             Array => \"array\",\n             Slice => \"slice\",\n             PrimitiveTuple => \"tuple\",\n+            PrimitiveRawPointer => \"pointer\",\n         }\n     }\n \n@@ -1587,17 +1652,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             }\n             ty::ty_tup(ref t) => Tuple(t.clean(cx)),\n \n-            ty::ty_projection(ref data) => {\n-                let trait_ref = match data.trait_ref.clean(cx) {\n-                    TyParamBound::TraitBound(t, _) => t.trait_,\n-                    TyParamBound::RegionBound(_) => panic!(\"cleaning a trait got a region??\"),\n-                };\n-                Type::QPath {\n-                    name: data.item_name.clean(cx),\n-                    self_type: box data.trait_ref.self_ty().clean(cx),\n-                    trait_: box trait_ref,\n-                }\n-            }\n+            ty::ty_projection(ref data) => data.clean(cx),\n \n             ty::ty_param(ref p) => Generic(token::get_name(p.name).to_string()),\n \n@@ -1871,6 +1926,22 @@ pub struct Path {\n     pub segments: Vec<PathSegment>,\n }\n \n+impl Path {\n+    pub fn singleton(name: String) -> Path {\n+        Path {\n+            global: false,\n+            segments: vec![PathSegment {\n+                name: name,\n+                params: PathParameters::AngleBracketed {\n+                    lifetimes: Vec::new(),\n+                    types: Vec::new(),\n+                    bindings: Vec::new()\n+                }\n+            }]\n+        }\n+    }\n+}\n+\n impl Clean<Path> for ast::Path {\n     fn clean(&self, cx: &DocContext) -> Path {\n         Path {\n@@ -2262,7 +2333,14 @@ impl Clean<ViewListIdent> for ast::PathListItem {\n \n impl Clean<Vec<Item>> for ast::ForeignMod {\n     fn clean(&self, cx: &DocContext) -> Vec<Item> {\n-        self.items.clean(cx)\n+        let mut items = self.items.clean(cx);\n+        for item in &mut items {\n+            match item.inner {\n+                ForeignFunctionItem(ref mut f) => f.abi = self.abi,\n+                _ => {}\n+            }\n+        }\n+        items\n     }\n }\n \n@@ -2274,6 +2352,7 @@ impl Clean<Item> for ast::ForeignItem {\n                     decl: decl.clean(cx),\n                     generics: generics.clean(cx),\n                     unsafety: ast::Unsafety::Unsafe,\n+                    abi: abi::Rust,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {\n@@ -2506,21 +2585,66 @@ impl Clean<Stability> for attr::Stability {\n \n impl Clean<Item> for ty::AssociatedType {\n     fn clean(&self, cx: &DocContext) -> Item {\n+        // When loading a cross-crate associated type, the bounds for this type\n+        // are actually located on the trait/impl itself, so we need to load\n+        // all of the generics from there and then look for bounds that are\n+        // applied to this associated type in question.\n+        let predicates = ty::lookup_predicates(cx.tcx(), self.container.id());\n+        let generics = match self.container {\n+            ty::TraitContainer(did) => {\n+                let def = ty::lookup_trait_def(cx.tcx(), did);\n+                (&def.generics, &predicates, subst::TypeSpace).clean(cx)\n+            }\n+            ty::ImplContainer(did) => {\n+                let ty = ty::lookup_item_type(cx.tcx(), did);\n+                (&ty.generics, &predicates, subst::TypeSpace).clean(cx)\n+            }\n+        };\n+        let my_name = self.name.clean(cx);\n+        let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n+            let (name, self_type, trait_, bounds) = match *pred {\n+                WherePredicate::BoundPredicate {\n+                    ty: QPath { ref name, ref self_type, ref trait_ },\n+                    ref bounds\n+                } => (name, self_type, trait_, bounds),\n+                _ => return None,\n+            };\n+            if *name != my_name { return None }\n+            match **trait_ {\n+                ResolvedPath { did, .. } if did == self.container.id() => {}\n+                _ => return None,\n+            }\n+            match **self_type {\n+                Generic(ref s) if *s == \"Self\" => {}\n+                _ => return None,\n+            }\n+            Some(bounds)\n+        }).flat_map(|i| i.iter().cloned()).collect::<Vec<_>>();\n+\n+        // Our Sized/?Sized bound didn't get handled when creating the generics\n+        // because we didn't actually get our whole set of bounds until just now\n+        // (some of them may have come from the trait). If we do have a sized\n+        // bound, we remove it, and if we don't then we add the `?Sized` bound\n+        // at the end.\n+        match bounds.iter().position(|b| b.is_sized_bound(cx)) {\n+            Some(i) => { bounds.remove(i); }\n+            None => bounds.push(TyParamBound::maybe_sized(cx)),\n+        }\n+\n         Item {\n             source: DUMMY_SP.clean(cx),\n             name: Some(self.name.clean(cx)),\n-            attrs: Vec::new(),\n-            // FIXME(#20727): bounds are missing and need to be filled in from the\n-            // predicates on the trait itself\n-            inner: AssociatedTypeItem(vec![], None),\n-            visibility: None,\n+            attrs: inline::load_attrs(cx, cx.tcx(), self.def_id),\n+            inner: AssociatedTypeItem(bounds, None),\n+            visibility: self.vis.clean(cx),\n             def_id: self.def_id,\n-            stability: None,\n+            stability: stability::lookup(cx.tcx(), self.def_id).clean(cx),\n         }\n     }\n }\n \n-impl<'a> Clean<Typedef> for (ty::TypeScheme<'a>, ty::GenericPredicates<'a>, ParamSpace) {\n+impl<'a> Clean<Typedef> for (ty::TypeScheme<'a>, ty::GenericPredicates<'a>,\n+                             ParamSpace) {\n     fn clean(&self, cx: &DocContext) -> Typedef {\n         let (ref ty_scheme, ref predicates, ps) = *self;\n         Typedef {"}, {"sha": "03f056a69232ed5d30a6ea8c77e6a87e95150deb", "filename": "src/librustdoc/clean/simplify.rs", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,180 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Simplification of where clauses and parameter bounds into a prettier and\n+//! more canonical form.\n+//!\n+//! Currently all cross-crate-inlined function use `middle::ty` to reconstruct\n+//! the AST (e.g. see all of `clean::inline`), but this is not always a\n+//! non-lossy transformation. The current format of storage for where clauses\n+//! for functions and such is simply a list of predicates. One example of this\n+//! is that the AST predicate of:\n+//!\n+//!     where T: Trait<Foo=Bar>\n+//!\n+//! is encoded as:\n+//!\n+//!     where T: Trait, <T as Trait>::Foo = Bar\n+//!\n+//! This module attempts to reconstruct the original where and/or parameter\n+//! bounds by special casing scenarios such as these. Fun!\n+\n+use std::mem;\n+use std::collections::HashMap;\n+\n+use rustc::middle::subst;\n+use rustc::middle::ty;\n+use syntax::ast;\n+\n+use clean::PathParameters as PP;\n+use clean::WherePredicate as WP;\n+use clean::{self, Clean};\n+use core::DocContext;\n+\n+pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n+    // First, partition the where clause into its separate components\n+    let mut params = HashMap::new();\n+    let mut lifetimes = Vec::new();\n+    let mut equalities = Vec::new();\n+    let mut tybounds = Vec::new();\n+    for clause in clauses {\n+        match clause {\n+            WP::BoundPredicate { ty, bounds } => {\n+                match ty {\n+                    clean::Generic(s) => params.entry(s).or_insert(Vec::new())\n+                                               .extend(bounds),\n+                    t => tybounds.push((t, ty_bounds(bounds))),\n+                }\n+            }\n+            WP::RegionPredicate { lifetime, bounds } => {\n+                lifetimes.push((lifetime, bounds));\n+            }\n+            WP::EqPredicate { lhs, rhs } => equalities.push((lhs, rhs)),\n+        }\n+    }\n+\n+    // Simplify the type parameter bounds on all the generics\n+    let mut params = params.into_iter().map(|(k, v)| {\n+        (k, ty_bounds(v))\n+    }).collect::<HashMap<_, _>>();\n+\n+    // Look for equality predicates on associated types that can be merged into\n+    // general bound predicates\n+    equalities.retain(|&(ref lhs, ref rhs)| {\n+        let (self_, trait_, name) = match *lhs {\n+            clean::QPath { ref self_type, ref trait_, ref name } => {\n+                (self_type, trait_, name)\n+            }\n+            _ => return true,\n+        };\n+        let generic = match **self_ {\n+            clean::Generic(ref s) => s,\n+            _ => return true,\n+        };\n+        let trait_did = match **trait_ {\n+            clean::ResolvedPath { did, .. } => did,\n+            _ => return true,\n+        };\n+        let bounds = match params.get_mut(generic) {\n+            Some(bound) => bound,\n+            None => return true,\n+        };\n+        !bounds.iter_mut().any(|b| {\n+            let trait_ref = match *b {\n+                clean::TraitBound(ref mut tr, _) => tr,\n+                clean::RegionBound(..) => return false,\n+            };\n+            let (did, path) = match trait_ref.trait_ {\n+                clean::ResolvedPath { did, ref mut path, ..} => (did, path),\n+                _ => return false,\n+            };\n+            // If this QPath's trait `trait_did` is the same as, or a supertrait\n+            // of, the bound's trait `did` then we can keep going, otherwise\n+            // this is just a plain old equality bound.\n+            if !trait_is_same_or_supertrait(cx, did, trait_did) {\n+                return false\n+            }\n+            let last = path.segments.last_mut().unwrap();\n+            match last.params {\n+                PP::AngleBracketed { ref mut bindings, .. } => {\n+                    bindings.push(clean::TypeBinding {\n+                        name: name.clone(),\n+                        ty: rhs.clone(),\n+                    });\n+                }\n+                PP::Parenthesized { ref mut output, .. } => {\n+                    assert!(output.is_none());\n+                    *output = Some(rhs.clone());\n+                }\n+            };\n+            true\n+        })\n+    });\n+\n+    // And finally, let's reassemble everything\n+    let mut clauses = Vec::new();\n+    clauses.extend(lifetimes.into_iter().map(|(lt, bounds)| {\n+        WP::RegionPredicate { lifetime: lt, bounds: bounds }\n+    }));\n+    clauses.extend(params.into_iter().map(|(k, v)| {\n+        WP::BoundPredicate {\n+            ty: clean::Generic(k),\n+            bounds: v,\n+        }\n+    }));\n+    clauses.extend(tybounds.into_iter().map(|(ty, bounds)| {\n+        WP::BoundPredicate { ty: ty, bounds: bounds }\n+    }));\n+    clauses.extend(equalities.into_iter().map(|(lhs, rhs)| {\n+        WP::EqPredicate { lhs: lhs, rhs: rhs }\n+    }));\n+    clauses\n+}\n+\n+pub fn ty_params(mut params: Vec<clean::TyParam>) -> Vec<clean::TyParam> {\n+    for param in params.iter_mut() {\n+        param.bounds = ty_bounds(mem::replace(&mut param.bounds, Vec::new()));\n+    }\n+    return params;\n+}\n+\n+fn ty_bounds(bounds: Vec<clean::TyParamBound>) -> Vec<clean::TyParamBound> {\n+    bounds\n+}\n+\n+fn trait_is_same_or_supertrait(cx: &DocContext, child: ast::DefId,\n+                               trait_: ast::DefId) -> bool {\n+    if child == trait_ {\n+        return true\n+    }\n+    let def = ty::lookup_trait_def(cx.tcx(), child);\n+    let predicates = ty::lookup_predicates(cx.tcx(), child);\n+    let generics = (&def.generics, &predicates, subst::TypeSpace).clean(cx);\n+    generics.where_predicates.iter().filter_map(|pred| {\n+        match *pred {\n+            clean::WherePredicate::BoundPredicate {\n+                ty: clean::Generic(ref s),\n+                ref bounds\n+            } if *s == \"Self\" => Some(bounds),\n+            _ => None,\n+        }\n+    }).flat_map(|bounds| bounds.iter()).any(|bound| {\n+        let poly_trait = match *bound {\n+            clean::TraitBound(ref t, _) => t,\n+            _ => return false,\n+        };\n+        match poly_trait.trait_ {\n+            clean::ResolvedPath { did, .. } => {\n+                trait_is_same_or_supertrait(cx, did, trait_)\n+            }\n+            _ => false,\n+        }\n+    })\n+}"}, {"sha": "a637ba9f297068c8688fe2c73979d1f26f1d6b27", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -75,7 +75,6 @@ pub struct CrateAnalysis {\n     pub exported_items: privacy::ExportedItems,\n     pub public_items: privacy::PublicItems,\n     pub external_paths: ExternalPaths,\n-    pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n     pub inlined: RefCell<Option<HashSet<ast::DefId>>>,\n }\n@@ -155,7 +154,6 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n         exported_items: exported_items,\n         public_items: public_items,\n         external_paths: RefCell::new(None),\n-        external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n         inlined: RefCell::new(None),\n     };\n@@ -168,8 +166,6 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n \n     let external_paths = ctxt.external_paths.borrow_mut().take();\n     *analysis.external_paths.borrow_mut() = external_paths;\n-    let map = ctxt.external_traits.borrow_mut().take();\n-    *analysis.external_traits.borrow_mut() = map;\n     let map = ctxt.external_typarams.borrow_mut().take();\n     *analysis.external_typarams.borrow_mut() = map;\n     let map = ctxt.inlined.borrow_mut().take();"}, {"sha": "862bca1b813386e30934d383b91e49f90a209ec9", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -15,6 +15,7 @@ pub use self::TypeBound::*;\n \n use syntax;\n use syntax::codemap::Span;\n+use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::ast::{Ident, NodeId};\n@@ -134,6 +135,7 @@ pub struct Function {\n     pub unsafety: ast::Unsafety,\n     pub whence: Span,\n     pub generics: ast::Generics,\n+    pub abi: abi::Abi,\n }\n \n pub struct Typedef {"}, {"sha": "0a1860c66f273ff36be921c64251a48cfa238dfa", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use clean::*;\n-use std::iter::Extend;\n+use std::collections::HashMap;\n use std::mem::{replace, swap};\n \n pub trait DocFolder : Sized {\n@@ -80,6 +80,13 @@ pub trait DocFolder : Sized {\n         c.module = match replace(&mut c.module, None) {\n             Some(module) => self.fold_item(module), None => None\n         };\n+        let external_traits = replace(&mut c.external_traits, HashMap::new());\n+        c.external_traits = external_traits.into_iter().map(|(k, mut v)| {\n+            let items = replace(&mut v.items, Vec::new());\n+            v.items = items.into_iter().filter_map(|i| self.fold_item(i))\n+                           .collect();\n+            (k, v)\n+        }).collect();\n         return c;\n     }\n }"}, {"sha": "f6215dcb00c54ba34a6d39df371fce0a66b99d7c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -18,6 +18,7 @@\n use std::fmt;\n use std::iter::repeat;\n \n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::ast_util;\n \n@@ -54,6 +55,7 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n+pub struct AbiSpace(pub Abi);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -281,48 +283,46 @@ impl fmt::Display for clean::Path {\n     }\n }\n \n+pub fn href(did: ast::DefId) -> Option<(String, ItemType, Vec<String>)> {\n+    let cache = cache();\n+    let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n+    let &(ref fqp, shortty) = match cache.paths.get(&did) {\n+        Some(p) => p,\n+        None => return None,\n+    };\n+    let mut url = if ast_util::is_local(did) || cache.inlined.contains(&did) {\n+        repeat(\"../\").take(loc.len()).collect::<String>()\n+    } else {\n+        match cache.extern_locations[&did.krate] {\n+            render::Remote(ref s) => s.to_string(),\n+            render::Local => repeat(\"../\").take(loc.len()).collect::<String>(),\n+            render::Unknown => return None,\n+        }\n+    };\n+    for component in &fqp[..fqp.len() - 1] {\n+        url.push_str(component);\n+        url.push_str(\"/\");\n+    }\n+    match shortty {\n+        ItemType::Module => {\n+            url.push_str(fqp.last().unwrap());\n+            url.push_str(\"/index.html\");\n+        }\n+        _ => {\n+            url.push_str(shortty.to_static_str());\n+            url.push_str(\".\");\n+            url.push_str(fqp.last().unwrap());\n+            url.push_str(\".html\");\n+        }\n+    }\n+    Some((url, shortty, fqp.to_vec()))\n+}\n+\n /// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n /// rendering function with the necessary arguments for linking to a local path.\n-fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, p: &clean::Path,\n+fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, path: &clean::Path,\n                  print_all: bool) -> fmt::Result {\n-    path(w, p, print_all,\n-        |cache, loc| {\n-            if ast_util::is_local(did) || cache.inlined.contains(&did) {\n-                Some(repeat(\"../\").take(loc.len()).collect::<String>())\n-            } else {\n-                match cache.extern_locations[&did.krate] {\n-                    render::Remote(ref s) => Some(s.to_string()),\n-                    render::Local => {\n-                        Some(repeat(\"../\").take(loc.len()).collect::<String>())\n-                    }\n-                    render::Unknown => None,\n-                }\n-            }\n-        },\n-        |cache| {\n-            match cache.paths.get(&did) {\n-                None => None,\n-                Some(&(ref fqp, shortty)) => Some((fqp.clone(), shortty))\n-            }\n-        })\n-}\n-\n-fn path<F, G>(w: &mut fmt::Formatter,\n-              path: &clean::Path,\n-              print_all: bool,\n-              root: F,\n-              info: G)\n-              -> fmt::Result where\n-    F: FnOnce(&render::Cache, &[String]) -> Option<String>,\n-    G: FnOnce(&render::Cache) -> Option<(Vec<String>, ItemType)>,\n-{\n-    // The generics will get written to both the title and link\n     let last = path.segments.last().unwrap();\n-    let generics = format!(\"{}\", last.params);\n-\n-    let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n-    let cache = cache();\n-    let abs_root = root(&*cache, &loc);\n     let rel_root = match &*path.segments[0].name {\n         \"self\" => Some(\"./\".to_string()),\n         _ => None,\n@@ -334,8 +334,7 @@ fn path<F, G>(w: &mut fmt::Formatter,\n             Some(root) => {\n                 let mut root = String::from_str(&root);\n                 for seg in &path.segments[..amt] {\n-                    if \"super\" == seg.name ||\n-                            \"self\" == seg.name {\n+                    if \"super\" == seg.name || \"self\" == seg.name {\n                         try!(write!(w, \"{}::\", seg.name));\n                     } else {\n                         root.push_str(&seg.name);\n@@ -355,37 +354,14 @@ fn path<F, G>(w: &mut fmt::Formatter,\n         }\n     }\n \n-    match info(&*cache) {\n-        // This is a documented path, link to it!\n-        Some((ref fqp, shortty)) if abs_root.is_some() => {\n-            let mut url = String::from_str(&abs_root.unwrap());\n-            let to_link = &fqp[..fqp.len() - 1];\n-            for component in to_link {\n-                url.push_str(component);\n-                url.push_str(\"/\");\n-            }\n-            match shortty {\n-                ItemType::Module => {\n-                    url.push_str(fqp.last().unwrap());\n-                    url.push_str(\"/index.html\");\n-                }\n-                _ => {\n-                    url.push_str(shortty.to_static_str());\n-                    url.push_str(\".\");\n-                    url.push_str(fqp.last().unwrap());\n-                    url.push_str(\".html\");\n-                }\n-            }\n-\n+    match href(did) {\n+        Some((url, shortty, fqp)) => {\n             try!(write!(w, \"<a class='{}' href='{}' title='{}'>{}</a>\",\n                           shortty, url, fqp.connect(\"::\"), last.name));\n         }\n-\n-        _ => {\n-            try!(write!(w, \"{}\", last.name));\n-        }\n+        _ => try!(write!(w, \"{}\", last.name)),\n     }\n-    try!(write!(w, \"{}\", generics));\n+    try!(write!(w, \"{}\", last.params));\n     Ok(())\n }\n \n@@ -491,7 +467,8 @@ impl fmt::Display for clean::Type {\n             }\n             clean::Bottom => f.write_str(\"!\"),\n             clean::RawPointer(m, ref t) => {\n-                write!(f, \"*{}{}\", RawMutableSpace(m), **t)\n+                primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                               &format!(\"*{}{}\", RawMutableSpace(m), **t))\n             }\n             clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n                 let lt = match *l {\n@@ -527,6 +504,29 @@ impl fmt::Display for clean::Type {\n                 }\n                 Ok(())\n             }\n+            // It's pretty unsightly to look at `<A as B>::C` in output, and\n+            // we've got hyperlinking on our side, so try to avoid longer\n+            // notation as much as possible by making `C` a hyperlink to trait\n+            // `B` to disambiguate.\n+            //\n+            // FIXME: this is still a lossy conversion and there should probably\n+            //        be a better way of representing this in general? Most of\n+            //        the ugliness comes from inlining across crates where\n+            //        everything comes in as a fully resolved QPath (hard to\n+            //        look at).\n+            clean::QPath {\n+                ref name,\n+                ref self_type,\n+                trait_: box clean::ResolvedPath { did, ref typarams, .. },\n+            } => {\n+                try!(write!(f, \"{}::\", self_type));\n+                let path = clean::Path::singleton(name.clone());\n+                try!(resolved_path(f, did, &path, false));\n+\n+                // FIXME: `typarams` are not rendered, and this seems bad?\n+                drop(typarams);\n+                Ok(())\n+            }\n             clean::QPath { ref name, ref self_type, ref trait_ } => {\n                 write!(f, \"&lt;{} as {}&gt;::{}\", self_type, trait_, name)\n             }\n@@ -661,17 +661,7 @@ impl fmt::Display for clean::ViewListIdent {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.source {\n             Some(did) => {\n-                let path = clean::Path {\n-                    global: false,\n-                    segments: vec!(clean::PathSegment {\n-                        name: self.name.clone(),\n-                        params: clean::PathParameters::AngleBracketed {\n-                            lifetimes: Vec::new(),\n-                            types: Vec::new(),\n-                            bindings: Vec::new()\n-                        }\n-                    })\n-                };\n+                let path = clean::Path::singleton(self.name.clone());\n                 resolved_path(f, did, &path, false)\n             }\n             _ => write!(f, \"{}\", self.name),\n@@ -703,6 +693,16 @@ impl fmt::Display for RawMutableSpace {\n     }\n }\n \n+impl fmt::Display for AbiSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {\n+            Abi::Rust => Ok(()),\n+            Abi::C => write!(f, \"extern \"),\n+            abi => write!(f, \"extern {} \", abi),\n+        }\n+    }\n+}\n+\n impl<'a> fmt::Display for Stability<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Stability(stab) = *self;"}, {"sha": "cb80d071ce47b2cd34c2df4e2a18ac0bb573aa24", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -29,9 +29,10 @@\n \n use libc;\n use std::ascii::AsciiExt;\n-use std::ffi::CString;\n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::default::Default;\n+use std::ffi::CString;\n use std::fmt;\n use std::slice;\n use std::str;\n@@ -182,7 +183,9 @@ impl hoedown_buffer {\n /// left as-is.)\n fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n     let trimmed = s.trim();\n-    if trimmed.starts_with(\"# \") {\n+    if trimmed == \"#\" {\n+        Some(\"\")\n+    } else if trimmed.starts_with(\"# \") {\n         Some(&trimmed[2..])\n     } else {\n         None\n@@ -244,7 +247,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                         stripped_filtered_line(l).unwrap_or(l)\n                     }).collect::<Vec<&str>>().connect(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false, false, true);\n+                    let test = test::maketest(&test, krate, false,\n+                                              &Default::default());\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n                 s.push_str(&highlight::highlight(&text,"}, {"sha": "8e33a9bd80ba76848b0d49a0194959db79bc8933", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 122, "deletions": 110, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -44,6 +44,7 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n use std::iter::repeat;\n+use std::mem;\n use std::path::{PathBuf, Path};\n use std::str;\n use std::sync::Arc;\n@@ -61,7 +62,7 @@ use clean;\n use doctree;\n use fold::DocFolder;\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace, Stability};\n-use html::format::{ConciseStability, TyParamBounds, WhereClause};\n+use html::format::{ConciseStability, TyParamBounds, WhereClause, href, AbiSpace};\n use html::highlight;\n use html::item_type::ItemType;\n use html::layout;\n@@ -136,6 +137,14 @@ pub struct Impl {\n     pub stability: Option<clean::Stability>,\n }\n \n+impl Impl {\n+    fn trait_did(&self) -> Option<ast::DefId> {\n+        self.impl_.trait_.as_ref().and_then(|tr| {\n+            if let clean::ResolvedPath { did, .. } = *tr {Some(did)} else {None}\n+        })\n+    }\n+}\n+\n /// This cache is used to store information about the `clean::Crate` being\n /// rendered in order to provide more useful documentation. This contains\n /// information like all implementors of a trait, all traits a type implements,\n@@ -276,7 +285,9 @@ impl fmt::Display for IndexItemFunctionType {\n             return write!(f, \"null\")\n         }\n \n-        let inputs: Vec<String> = self.inputs.iter().map(|ref t| format!(\"{}\", t)).collect();\n+        let inputs: Vec<String> = self.inputs.iter().map(|ref t| {\n+            format!(\"{}\", t)\n+        }).collect();\n         try!(write!(f, \"{{\\\"inputs\\\":[{}],\\\"output\\\":\", inputs.connect(\",\")));\n \n         match self.output {\n@@ -383,9 +394,7 @@ pub fn run(mut krate: clean::Crate,\n         privmod: false,\n         public_items: public_items,\n         orphan_methods: Vec::new(),\n-        traits: analysis.as_ref().map(|a| {\n-            a.external_traits.borrow_mut().take().unwrap()\n-        }).unwrap_or(HashMap::new()),\n+        traits: mem::replace(&mut krate.external_traits, HashMap::new()),\n         typarams: analysis.as_ref().map(|a| {\n             a.external_typarams.borrow_mut().take().unwrap()\n         }).unwrap_or(HashMap::new()),\n@@ -911,9 +920,10 @@ impl DocFolder for Cache {\n                         let path = match self.paths.get(&did) {\n                             Some(&(_, ItemType::Trait)) =>\n                                 Some(&self.stack[..self.stack.len() - 1]),\n-                            // The current stack not necessarily has correlation for\n-                            // where the type was defined. On the other hand,\n-                            // `paths` always has the right information if present.\n+                            // The current stack not necessarily has correlation\n+                            // for where the type was defined. On the other\n+                            // hand, `paths` always has the right\n+                            // information if present.\n                             Some(&(ref fqp, ItemType::Struct)) |\n                             Some(&(ref fqp, ItemType::Enum)) =>\n                                 Some(&fqp[..fqp.len() - 1]),\n@@ -1015,7 +1025,16 @@ impl DocFolder for Cache {\n                         self.parent_stack.push(did);\n                         true\n                     }\n-                    _ => false\n+                    ref t => {\n+                        match t.primitive_type() {\n+                            Some(prim) => {\n+                                let did = ast_util::local_def(prim.to_node_id());\n+                                self.parent_stack.push(did);\n+                                true\n+                            }\n+                            _ => false,\n+                        }\n+                    }\n                 }\n             }\n             _ => false\n@@ -1027,10 +1046,6 @@ impl DocFolder for Cache {\n             Some(item) => {\n                 match item {\n                     clean::Item{ attrs, inner: clean::ImplItem(i), .. } => {\n-                        use clean::{Primitive, Vector, ResolvedPath, BorrowedRef};\n-                        use clean::PrimitiveType::{Array, Slice, PrimitiveTuple};\n-                        use clean::{FixedVector, Tuple};\n-\n                         // extract relevant documentation for this impl\n                         let dox = match attrs.into_iter().find(|a| {\n                             match *a {\n@@ -1048,37 +1063,18 @@ impl DocFolder for Cache {\n                         // Figure out the id of this impl. This may map to a\n                         // primitive rather than always to a struct/enum.\n                         let did = match i.for_ {\n-                            ResolvedPath { did, .. } => Some(did),\n-\n-                            // References to primitives are picked up as well to\n-                            // recognize implementations for &str, this may not\n-                            // be necessary in a DST world.\n-                            Primitive(p) |\n-                                BorrowedRef { type_: box Primitive(p), ..} =>\n-                            {\n-                                Some(ast_util::local_def(p.to_node_id()))\n+                            clean::ResolvedPath { did, .. } |\n+                            clean::BorrowedRef {\n+                                type_: box clean::ResolvedPath { did, .. }, ..\n+                            } => {\n+                                Some(did)\n                             }\n \n-                            FixedVector(..) |\n-                                BorrowedRef { type_: box FixedVector(..), .. } =>\n-                            {\n-                                Some(ast_util::local_def(Array.to_node_id()))\n+                            ref t => {\n+                                t.primitive_type().map(|p| {\n+                                    ast_util::local_def(p.to_node_id())\n+                                })\n                             }\n-\n-                            // In a DST world, we may only need Vector, but for now we\n-                            // also pick up borrowed references\n-                            Vector(..) |\n-                                BorrowedRef{ type_: box Vector(..), ..  } =>\n-                            {\n-                                Some(ast_util::local_def(Slice.to_node_id()))\n-                            }\n-\n-                            Tuple(..) => {\n-                                let id = PrimitiveTuple.to_node_id();\n-                                Some(ast_util::local_def(id))\n-                            }\n-\n-                            _ => None,\n                         };\n \n                         if let Some(did) = did {\n@@ -1347,7 +1343,9 @@ impl Context {\n     fn ignore_private_item(&self, it: &clean::Item) -> bool {\n         match it.inner {\n             clean::ModuleItem(ref m) => {\n-                (m.items.len() == 0 && it.doc_value().is_none()) ||\n+                (m.items.len() == 0 &&\n+                 it.doc_value().is_none() &&\n+                 it.visibility != Some(ast::Public)) ||\n                 (self.passes.contains(\"strip-private\") && it.visibility != Some(ast::Public))\n             }\n             clean::PrimitiveItem(..) => it.visibility != Some(ast::Public),\n@@ -1723,10 +1721,11 @@ fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}fn \\\n+    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}{abi}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n            unsafety = UnsafetySpace(f.unsafety),\n+           abi = AbiSpace(f.abi),\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n@@ -1773,23 +1772,23 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         try!(write!(w, \"{{\\n\"));\n         for t in &types {\n             try!(write!(w, \"    \"));\n-            try!(render_method(w, t));\n+            try!(render_method(w, t, MethodLink::Anchor));\n             try!(write!(w, \";\\n\"));\n         }\n         if types.len() > 0 && required.len() > 0 {\n             try!(w.write_str(\"\\n\"));\n         }\n         for m in &required {\n             try!(write!(w, \"    \"));\n-            try!(render_method(w, m));\n+            try!(render_method(w, m, MethodLink::Anchor));\n             try!(write!(w, \";\\n\"));\n         }\n         if required.len() > 0 && provided.len() > 0 {\n             try!(w.write_str(\"\\n\"));\n         }\n         for m in &provided {\n             try!(write!(w, \"    \"));\n-            try!(render_method(w, m));\n+            try!(render_method(w, m, MethodLink::Anchor));\n             try!(write!(w, \" {{ ... }}\\n\"));\n         }\n         try!(write!(w, \"}}\"));\n@@ -1805,7 +1804,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                     shortty(m),\n                     *m.name.as_ref().unwrap(),\n                     ConciseStability(&m.stability)));\n-        try!(render_method(w, m));\n+        try!(render_method(w, m, MethodLink::Anchor));\n         try!(write!(w, \"</code></h3>\"));\n         try!(document(w, m));\n         Ok(())\n@@ -1844,6 +1843,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         try!(write!(w, \"</div>\"));\n     }\n \n+    // If there are methods directly on this trait object, render them here.\n+    try!(render_methods(w, it));\n+\n     let cache = cache();\n     try!(write!(w, \"\n         <h2 id='implementors'>Implementors</h2>\n@@ -1889,14 +1891,23 @@ fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n     Ok(())\n }\n \n-fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n+fn render_method(w: &mut fmt::Formatter, meth: &clean::Item,\n+                 link: MethodLink) -> fmt::Result {\n     fn method(w: &mut fmt::Formatter, it: &clean::Item,\n               unsafety: ast::Unsafety, abi: abi::Abi,\n               g: &clean::Generics, selfty: &clean::SelfTy,\n-              d: &clean::FnDecl) -> fmt::Result {\n+              d: &clean::FnDecl, link: MethodLink) -> fmt::Result {\n         use syntax::abi::Abi;\n \n-        write!(w, \"{}{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n+        let name = it.name.as_ref().unwrap();\n+        let anchor = format!(\"#{}.{}\", shortty(it), name);\n+        let href = match link {\n+            MethodLink::Anchor => anchor,\n+            MethodLink::GotoSource(did) => {\n+                href(did).map(|p| format!(\"{}{}\", p.0, anchor)).unwrap_or(anchor)\n+            }\n+        };\n+        write!(w, \"{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                match unsafety {\n                    ast::Unsafety::Unsafe => \"unsafe \",\n@@ -1906,18 +1917,20 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n                    Abi::Rust => String::new(),\n                    a => format!(\"extern {} \", a.to_string())\n                },\n-               ty = shortty(it),\n-               name = it.name.as_ref().unwrap(),\n+               href = href,\n+               name = name,\n                generics = *g,\n                decl = Method(selfty, d),\n                where_clause = WhereClause(g))\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl,\n+                   link)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl,\n+                   link)\n         }\n         clean::AssociatedTypeItem(ref bounds, ref default) => {\n             assoc_type(w, meth, bounds, default)\n@@ -2144,69 +2157,73 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n     Ok(())\n }\n \n+#[derive(Copy, Clone)]\n+enum MethodLink {\n+    Anchor,\n+    GotoSource(ast::DefId),\n+}\n+\n fn render_methods(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n-    match cache().impls.get(&it.def_id) {\n-        Some(v) => {\n-            let (non_trait, traits): (Vec<_>, _) = v.iter().cloned()\n-                .partition(|i| i.impl_.trait_.is_none());\n-            if non_trait.len() > 0 {\n-                try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));\n-                for i in &non_trait {\n-                    try!(render_impl(w, i));\n-                }\n-            }\n-            if traits.len() > 0 {\n-                try!(write!(w, \"<h2 id='implementations'>Trait \\\n-                                  Implementations</h2>\"));\n-                let (derived, manual): (Vec<_>, _) = traits.into_iter()\n-                    .partition(|i| i.impl_.derived);\n-                for i in &manual {\n-                    try!(render_impl(w, i));\n-                }\n-                if derived.len() > 0 {\n-                    try!(write!(w, \"<h3 id='derived_implementations'>Derived Implementations \\\n-                                </h3>\"));\n-                    for i in &derived {\n-                        try!(render_impl(w, i));\n-                    }\n-                }\n+    let v = match cache().impls.get(&it.def_id) {\n+        Some(v) => v.clone(),\n+        None => return Ok(()),\n+    };\n+    let (non_trait, traits): (Vec<_>, _) = v.into_iter()\n+        .partition(|i| i.impl_.trait_.is_none());\n+    if non_trait.len() > 0 {\n+        try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));\n+        for i in &non_trait {\n+            try!(render_impl(w, i, MethodLink::Anchor));\n+        }\n+    }\n+    if traits.len() > 0 {\n+        try!(write!(w, \"<h2 id='implementations'>Trait \\\n+                          Implementations</h2>\"));\n+        let (derived, manual): (Vec<_>, _) = traits.into_iter()\n+            .partition(|i| i.impl_.derived);\n+        for i in &manual {\n+            let did = i.trait_did().unwrap();\n+            try!(render_impl(w, i, MethodLink::GotoSource(did)));\n+        }\n+        if derived.len() > 0 {\n+            try!(write!(w, \"<h3 id='derived_implementations'>\\\n+                Derived Implementations \\\n+            </h3>\"));\n+            for i in &derived {\n+                let did = i.trait_did().unwrap();\n+                try!(render_impl(w, i, MethodLink::GotoSource(did)));\n             }\n         }\n-        None => {}\n     }\n     Ok(())\n }\n \n-fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n+fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: MethodLink)\n+               -> fmt::Result {\n     try!(write!(w, \"<h3 class='impl'>{}<code>impl{} \",\n                 ConciseStability(&i.stability),\n                 i.impl_.generics));\n-    match i.impl_.polarity {\n-        Some(clean::ImplPolarity::Negative) => try!(write!(w, \"!\")),\n-        _ => {}\n+    if let Some(clean::ImplPolarity::Negative) = i.impl_.polarity {\n+        try!(write!(w, \"!\"));\n     }\n-    match i.impl_.trait_ {\n-        Some(ref ty) => try!(write!(w, \"{} for \", *ty)),\n-        None => {}\n+    if let Some(ref ty) = i.impl_.trait_ {\n+        try!(write!(w, \"{} for \", *ty));\n     }\n-    try!(write!(w, \"{}{}</code></h3>\", i.impl_.for_, WhereClause(&i.impl_.generics)));\n-    match i.dox {\n-        Some(ref dox) => {\n-            try!(write!(w, \"<div class='docblock'>{}</div>\",\n-                          Markdown(dox)));\n-        }\n-        None => {}\n+    try!(write!(w, \"{}{}</code></h3>\", i.impl_.for_,\n+                WhereClause(&i.impl_.generics)));\n+    if let Some(ref dox) = i.dox {\n+        try!(write!(w, \"<div class='docblock'>{}</div>\", Markdown(dox)));\n     }\n \n-    fn doctraititem(w: &mut fmt::Formatter, item: &clean::Item, dox: bool)\n-                    -> fmt::Result {\n+    fn doctraititem(w: &mut fmt::Formatter, item: &clean::Item,\n+                    dox: bool, link: MethodLink) -> fmt::Result {\n         match item.inner {\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n                 try!(write!(w, \"<h4 id='method.{}' class='{}'>{}<code>\",\n                             *item.name.as_ref().unwrap(),\n                             shortty(item),\n                             ConciseStability(&item.stability)));\n-                try!(render_method(w, item));\n+                try!(render_method(w, item, link));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::TypedefItem(ref tydef) => {\n@@ -2239,11 +2256,12 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n     }\n \n     try!(write!(w, \"<div class='impl-items'>\"));\n-    for trait_item in &i.impl_.items {\n-        try!(doctraititem(w, trait_item, true));\n+    for trait_item in i.impl_.items.iter() {\n+        try!(doctraititem(w, trait_item, true, link));\n     }\n \n     fn render_default_methods(w: &mut fmt::Formatter,\n+                              did: ast::DefId,\n                               t: &clean::Trait,\n                               i: &clean::Impl) -> fmt::Result {\n         for trait_item in &t.items {\n@@ -2253,7 +2271,8 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n                 None => {}\n             }\n \n-            try!(doctraititem(w, trait_item, false));\n+            try!(doctraititem(w, trait_item, false,\n+                              MethodLink::GotoSource(did)));\n         }\n         Ok(())\n     }\n@@ -2262,17 +2281,10 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n     // default methods which weren't overridden in the implementation block.\n     // FIXME: this also needs to be done for associated types, whenever defaults\n     // for them work.\n-    match i.impl_.trait_ {\n-        Some(clean::ResolvedPath { did, .. }) => {\n-            try!({\n-                match cache().traits.get(&did) {\n-                    Some(t) => try!(render_default_methods(w, t, &i.impl_)),\n-                    None => {}\n-                }\n-                Ok(())\n-            })\n+    if let Some(clean::ResolvedPath { did, .. }) = i.impl_.trait_ {\n+        if let Some(t) = cache().traits.get(&did) {\n+            try!(render_default_methods(w, did, t, &i.impl_));\n         }\n-        Some(..) | None => {}\n     }\n     try!(write!(w, \"</div>\"));\n     Ok(())"}, {"sha": "6541564d8e2b8d013743558e8ea415ab8bd62b8b", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::default::Default;\n use std::fs::File;\n-use std::io;\n use std::io::prelude::*;\n+use std::io;\n use std::path::{PathBuf, Path};\n \n use core;\n@@ -23,7 +24,7 @@ use externalfiles::ExternalHtml;\n use html::escape::Escape;\n use html::markdown;\n use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, reset_headers};\n-use test::Collector;\n+use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `%`.\n fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n@@ -58,7 +59,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n     let input_str = load_or_return!(input, 1, 2);\n     let playground = matches.opt_str(\"markdown-playground-url\");\n     if playground.is_some() {\n-        markdown::PLAYGROUND_KRATE.with(|s| { *s.borrow_mut() = None; });\n+        markdown::PLAYGROUND_KRATE.with(|s| { *s.borrow_mut() = Some(None); });\n     }\n     let playground = playground.unwrap_or(\"\".to_string());\n \n@@ -143,7 +144,10 @@ pub fn test(input: &str, libs: SearchPaths, externs: core::Externs,\n             mut test_args: Vec<String>) -> isize {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_string(), libs, externs, true, false);\n+    let mut opts = TestOptions::default();\n+    opts.no_crate_inject = true;\n+    let mut collector = Collector::new(input.to_string(), libs, externs,\n+                                       true, opts);\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "94b521a89cfbc96f1c30b401097e29be885bf658", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -38,6 +38,12 @@ use html::markdown;\n use passes;\n use visit_ast::RustdocVisitor;\n \n+#[derive(Clone, Default)]\n+pub struct TestOptions {\n+    pub no_crate_inject: bool,\n+    pub attrs: Vec<String>,\n+}\n+\n pub fn run(input: &str,\n            cfgs: Vec<String>,\n            libs: SearchPaths,\n@@ -75,7 +81,7 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n-    let inject_crate = should_inject_crate(&krate);\n+    let opts = scrape_test_config(&krate);\n \n     let ctx = core::DocContext {\n         krate: &krate,\n@@ -102,7 +108,7 @@ pub fn run(input: &str,\n                                        libs,\n                                        externs,\n                                        false,\n-                                       inject_crate);\n+                                       opts);\n     collector.fold_crate(krate);\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -113,41 +119,44 @@ pub fn run(input: &str,\n }\n \n // Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n-fn should_inject_crate(krate: &::syntax::ast::Crate) -> bool {\n+fn scrape_test_config(krate: &::syntax::ast::Crate) -> TestOptions {\n     use syntax::attr::AttrMetaMethods;\n+    use syntax::print::pprust;\n \n-    let mut inject_crate = true;\n-\n-    for attr in &krate.attrs {\n-        if attr.check_name(\"doc\") {\n-            for list in attr.meta_item_list().into_iter() {\n-                for attr in list {\n-                    if attr.check_name(\"test\") {\n-                        for list in attr.meta_item_list().into_iter() {\n-                            for attr in list {\n-                                if attr.check_name(\"no_crate_inject\") {\n-                                    inject_crate = false;\n-                                }\n-                            }\n-                        }\n-                    }\n+    let mut opts = TestOptions {\n+        no_crate_inject: false,\n+        attrs: Vec::new(),\n+    };\n+\n+    let attrs = krate.attrs.iter().filter(|a| a.check_name(\"doc\"))\n+                     .filter_map(|a| a.meta_item_list())\n+                     .flat_map(|l| l.iter())\n+                     .filter(|a| a.check_name(\"test\"))\n+                     .filter_map(|a| a.meta_item_list())\n+                     .flat_map(|l| l.iter());\n+    for attr in attrs {\n+        if attr.check_name(\"no_crate_inject\") {\n+            opts.no_crate_inject = true;\n+        }\n+        if attr.check_name(\"attr\") {\n+            if let Some(l) = attr.meta_item_list() {\n+                for item in l {\n+                    opts.attrs.push(pprust::meta_item_to_string(item));\n                 }\n             }\n         }\n     }\n \n-    return inject_crate;\n+    return opts;\n }\n \n-#[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n-           inject_crate: bool) {\n+           opts: &TestOptions) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), true, as_test_harness,\n-                        inject_crate);\n+    let test = maketest(test, Some(cratename), as_test_harness, opts);\n     let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n@@ -250,8 +259,8 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n-                dont_insert_main: bool, inject_crate: bool) -> String {\n+pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n+                opts: &TestOptions) -> String {\n     let (crate_attrs, everything_else) = partition_source(s);\n \n     let mut prog = String::new();\n@@ -260,20 +269,18 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n     // are intended to be crate attributes.\n     prog.push_str(&crate_attrs);\n \n-    if lints {\n-        prog.push_str(r\"\n-#![allow(unused_variables, unused_assignments, unused_mut, unused_attributes, dead_code)]\n-\");\n+    // Next, any attributes for other aspects such as lints.\n+    for attr in &opts.attrs {\n+        prog.push_str(&format!(\"#![{}]\\n\", attr));\n     }\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !s.contains(\"extern crate\") && inject_crate {\n+    if !s.contains(\"extern crate\") && !opts.no_crate_inject {\n         match cratename {\n             Some(cratename) => {\n                 if s.contains(cratename) {\n-                    prog.push_str(&format!(\"extern crate {};\\n\",\n-                                           cratename));\n+                    prog.push_str(&format!(\"extern crate {};\\n\", cratename));\n                 }\n             }\n             None => {}\n@@ -325,12 +332,12 @@ pub struct Collector {\n     use_headers: bool,\n     current_header: Option<String>,\n     cratename: String,\n-    inject_crate: bool\n+    opts: TestOptions,\n }\n \n impl Collector {\n     pub fn new(cratename: String, libs: SearchPaths, externs: core::Externs,\n-               use_headers: bool, inject_crate: bool) -> Collector {\n+               use_headers: bool, opts: TestOptions) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -340,7 +347,7 @@ impl Collector {\n             use_headers: use_headers,\n             current_header: None,\n             cratename: cratename,\n-            inject_crate: inject_crate\n+            opts: opts,\n         }\n     }\n \n@@ -357,13 +364,14 @@ impl Collector {\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n-        let inject_crate = self.inject_crate;\n+        let opts = self.opts.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),\n                 ignore: should_ignore,\n-                should_panic: testing::ShouldPanic::No, // compiler failures are test failures\n+                // compiler failures are test failures\n+                should_panic: testing::ShouldPanic::No,\n             },\n             testfn: testing::DynTestFn(Box::new(move|| {\n                 runtest(&test,\n@@ -373,7 +381,7 @@ impl Collector {\n                         should_panic,\n                         no_run,\n                         as_test_harness,\n-                        inject_crate);\n+                        &opts);\n             }))\n         });\n     }"}, {"sha": "a1fa96322a4e3634aa4ad177edff412cfaac3955", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -12,6 +12,7 @@\n //! usable for clean\n \n use std::collections::HashSet;\n+use std::mem;\n \n use syntax::abi;\n use syntax::ast;\n@@ -40,6 +41,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n     pub cx: &'a core::DocContext<'tcx>,\n     pub analysis: Option<&'a core::CrateAnalysis>,\n     view_item_stack: HashSet<ast::NodeId>,\n+    inlining_from_glob: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -54,6 +56,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             cx: cx,\n             analysis: analysis,\n             view_item_stack: stack,\n+            inlining_from_glob: false,\n         }\n     }\n \n@@ -120,7 +123,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_fn(&mut self, item: &ast::Item,\n                     name: ast::Ident, fd: &ast::FnDecl,\n-                    unsafety: &ast::Unsafety, _abi: &abi::Abi,\n+                    unsafety: &ast::Unsafety, abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -133,6 +136,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             whence: item.span,\n             generics: gen.clone(),\n             unsafety: *unsafety,\n+            abi: *abi,\n         }\n     }\n \n@@ -209,6 +213,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let ret = match tcx.map.get(def.node) {\n             ast_map::NodeItem(it) => {\n                 if glob {\n+                    let prev = mem::replace(&mut self.inlining_from_glob, true);\n                     match it.node {\n                         ast::ItemMod(ref m) => {\n                             for i in &m.items {\n@@ -218,6 +223,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         ast::ItemEnum(..) => {}\n                         _ => { panic!(\"glob not mapped to a module or enum\"); }\n                     }\n+                    self.inlining_from_glob = prev;\n                 } else {\n                     self.visit_item(it, renamed, om);\n                 }\n@@ -356,7 +362,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n                 };\n-                om.impls.push(i);\n+                // Don't duplicate impls when inlining glob imports, we'll pick\n+                // them up regardless of where they're located.\n+                if !self.inlining_from_glob {\n+                    om.impls.push(i);\n+                }\n             },\n             ast::ItemDefaultImpl(unsafety, ref trait_ref) => {\n                 let i = DefaultImpl {\n@@ -366,7 +376,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                 };\n-                om.def_traits.push(i);\n+                // see comment above about ItemImpl\n+                if !self.inlining_from_glob {\n+                    om.def_traits.push(i);\n+                }\n             }\n             ast::ItemForeignMod(ref fm) => {\n                 om.foreigns.push(fm.clone());"}, {"sha": "f897d565321dabe638452b90b644a1b1ece30e6b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -304,7 +304,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -335,7 +334,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -362,7 +360,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -388,7 +385,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -471,7 +467,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -491,7 +486,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -513,7 +507,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -535,7 +528,6 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sub: HashSet<_> = [1, 2].iter().cloned().collect();"}, {"sha": "48b95ce6439c9c4ceba4683cb8759225a01f113e", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 180, "deletions": 155, "changes": 335, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -10,16 +10,18 @@\n \n //! Collection types.\n //!\n-//! Rust's standard collection library provides efficient implementations of the most common\n-//! general purpose programming data structures. By using the standard implementations,\n-//! it should be possible for two libraries to communicate without significant data conversion.\n-//!\n-//! To get this out of the way: you should probably just use `Vec` or `HashMap`. These two\n-//! collections cover most use cases for generic data storage and processing. They are\n-//! exceptionally good at doing what they do. All the other collections in the standard\n-//! library have specific use cases where they are the optimal choice, but these cases are\n-//! borderline *niche* in comparison. Even when `Vec` and `HashMap` are technically suboptimal,\n-//! they're probably a good enough choice to get started.\n+//! Rust's standard collection library provides efficient implementations of the\n+//! most common general purpose programming data structures. By using the\n+//! standard implementations, it should be possible for two libraries to\n+//! communicate without significant data conversion.\n+//!\n+//! To get this out of the way: you should probably just use `Vec` or `HashMap`.\n+//! These two collections cover most use cases for generic data storage and\n+//! processing. They are exceptionally good at doing what they do. All the other\n+//! collections in the standard library have specific use cases where they are\n+//! the optimal choice, but these cases are borderline *niche* in comparison.\n+//! Even when `Vec` and `HashMap` are technically suboptimal, they're probably a\n+//! good enough choice to get started.\n //!\n //! Rust's collections can be grouped into four major categories:\n //!\n@@ -30,28 +32,31 @@\n //!\n //! # When Should You Use Which Collection?\n //!\n-//! These are fairly high-level and quick break-downs of when each collection should be\n-//! considered. Detailed discussions of strengths and weaknesses of individual collections\n-//! can be found on their own documentation pages.\n+//! These are fairly high-level and quick break-downs of when each collection\n+//! should be considered. Detailed discussions of strengths and weaknesses of\n+//! individual collections can be found on their own documentation pages.\n //!\n //! ### Use a `Vec` when:\n-//! * You want to collect items up to be processed or sent elsewhere later, and don't care about\n-//! any properties of the actual values being stored.\n-//! * You want a sequence of elements in a particular order, and will only be appending to\n-//! (or near) the end.\n+//! * You want to collect items up to be processed or sent elsewhere later, and\n+//!   don't care about any properties of the actual values being stored.\n+//! * You want a sequence of elements in a particular order, and will only be\n+//!   appending to (or near) the end.\n //! * You want a stack.\n //! * You want a resizable array.\n //! * You want a heap-allocated array.\n //!\n //! ### Use a `VecDeque` when:\n-//! * You want a `Vec` that supports efficient insertion at both ends of the sequence.\n+//! * You want a `Vec` that supports efficient insertion at both ends of the\n+//!   sequence.\n //! * You want a queue.\n //! * You want a double-ended queue (deque).\n //!\n //! ### Use a `LinkedList` when:\n-//! * You want a `Vec` or `VecDeque` of unknown size, and can't tolerate amortization.\n+//! * You want a `Vec` or `VecDeque` of unknown size, and can't tolerate\n+//!   amortization.\n //! * You want to efficiently split and append lists.\n-//! * You are *absolutely* certain you *really*, *truly*, want a doubly linked list.\n+//! * You are *absolutely* certain you *really*, *truly*, want a doubly linked\n+//!   list.\n //!\n //! ### Use a `HashMap` when:\n //! * You want to associate arbitrary keys with an arbitrary value.\n@@ -60,7 +65,8 @@\n //!\n //! ### Use a `BTreeMap` when:\n //! * You're interested in what the smallest or largest key-value pair is.\n-//! * You want to find the largest or smallest key that is smaller or larger than something\n+//! * You want to find the largest or smallest key that is smaller or larger\n+//!   than something\n //! * You want to be able to get all of the entries in order on-demand.\n //! * You want a sorted map.\n //!\n@@ -81,29 +87,34 @@\n //! * You want a `BitVec`, but want `Set` properties\n //!\n //! ### Use a `BinaryHeap` when:\n-//! * You want to store a bunch of elements, but only ever want to process the \"biggest\"\n-//! or \"most important\" one at any given time.\n+//!\n+//! * You want to store a bunch of elements, but only ever want to process the\n+//!   \"biggest\" or \"most important\" one at any given time.\n //! * You want a priority queue.\n //!\n //! # Performance\n //!\n-//! Choosing the right collection for the job requires an understanding of what each collection\n-//! is good at. Here we briefly summarize the performance of different collections for certain\n-//! important operations. For further details, see each type's documentation, and note that the\n-//! names of actual methods may differ from the tables below on certain collections.\n+//! Choosing the right collection for the job requires an understanding of what\n+//! each collection is good at. Here we briefly summarize the performance of\n+//! different collections for certain important operations. For further details,\n+//! see each type's documentation, and note that the names of actual methods may\n+//! differ from the tables below on certain collections.\n //!\n-//! Throughout the documentation, we will follow a few conventions. For all operations,\n-//! the collection's size is denoted by n. If another collection is involved in the operation, it\n-//! contains m elements. Operations which have an *amortized* cost are suffixed with a `*`.\n-//! Operations with an *expected* cost are suffixed with a `~`.\n+//! Throughout the documentation, we will follow a few conventions. For all\n+//! operations, the collection's size is denoted by n. If another collection is\n+//! involved in the operation, it contains m elements. Operations which have an\n+//! *amortized* cost are suffixed with a `*`.  Operations with an *expected*\n+//! cost are suffixed with a `~`.\n //!\n-//! All amortized costs are for the potential need to resize when capacity is exhausted.\n-//! If a resize occurs it will take O(n) time. Our collections never automatically shrink,\n-//! so removal operations aren't amortized. Over a sufficiently large series of\n-//! operations, the average cost per operation will deterministically equal the given cost.\n+//! All amortized costs are for the potential need to resize when capacity is\n+//! exhausted.  If a resize occurs it will take O(n) time. Our collections never\n+//! automatically shrink, so removal operations aren't amortized. Over a\n+//! sufficiently large series of operations, the average cost per operation will\n+//! deterministically equal the given cost.\n //!\n-//! Only HashMap has expected costs, due to the probabilistic nature of hashing. It is\n-//! theoretically possible, though very unlikely, for HashMap to experience worse performance.\n+//! Only HashMap has expected costs, due to the probabilistic nature of hashing.\n+//! It is theoretically possible, though very unlikely, for HashMap to\n+//! experience worse performance.\n //!\n //! ## Sequences\n //!\n@@ -120,7 +131,8 @@\n //!\n //! ## Maps\n //!\n-//! For Sets, all operations have the cost of the equivalent Map operation. For BitSet,\n+//! For Sets, all operations have the cost of the equivalent Map operation. For\n+//! BitSet,\n //! refer to VecMap.\n //!\n //! |          | get       | insert   | remove   | predecessor |\n@@ -129,85 +141,95 @@\n //! | BTreeMap | O(log n)  | O(log n) | O(log n) | O(log n)    |\n //! | VecMap   | O(1)      | O(1)?    | O(1)     | O(n)        |\n //!\n-//! Note that VecMap is *incredibly* inefficient in terms of space. The O(1) insertion time\n-//! assumes space for the element is already allocated. Otherwise, a large key may require a\n-//! massive reallocation, with no direct relation to the number of elements in the collection.\n-//! VecMap should only be seriously considered for small keys.\n+//! Note that VecMap is *incredibly* inefficient in terms of space. The O(1)\n+//! insertion time assumes space for the element is already allocated.\n+//! Otherwise, a large key may require a massive reallocation, with no direct\n+//! relation to the number of elements in the collection.  VecMap should only be\n+//! seriously considered for small keys.\n //!\n //! Note also that BTreeMap's precise preformance depends on the value of B.\n //!\n //! # Correct and Efficient Usage of Collections\n //!\n-//! Of course, knowing which collection is the right one for the job doesn't instantly\n-//! permit you to use it correctly. Here are some quick tips for efficient and correct\n-//! usage of the standard collections in general. If you're interested in how to use a\n-//! specific collection in particular, consult its documentation for detailed discussion\n-//! and code examples.\n+//! Of course, knowing which collection is the right one for the job doesn't\n+//! instantly permit you to use it correctly. Here are some quick tips for\n+//! efficient and correct usage of the standard collections in general. If\n+//! you're interested in how to use a specific collection in particular, consult\n+//! its documentation for detailed discussion and code examples.\n //!\n //! ## Capacity Management\n //!\n-//! Many collections provide several constructors and methods that refer to \"capacity\".\n-//! These collections are generally built on top of an array. Optimally, this array would be\n-//! exactly the right size to fit only the elements stored in the collection, but for the\n-//! collection to do this would be very inefficient. If the backing array was exactly the\n-//! right size at all times, then every time an element is inserted, the collection would\n-//! have to grow the array to fit it. Due to the way memory is allocated and managed on most\n-//! computers, this would almost surely require allocating an entirely new array and\n-//! copying every single element from the old one into the new one. Hopefully you can\n-//! see that this wouldn't be very efficient to do on every operation.\n-//!\n-//! Most collections therefore use an *amortized* allocation strategy. They generally let\n-//! themselves have a fair amount of unoccupied space so that they only have to grow\n-//! on occasion. When they do grow, they allocate a substantially larger array to move\n-//! the elements into so that it will take a while for another grow to be required. While\n-//! this strategy is great in general, it would be even better if the collection *never*\n-//! had to resize its backing array. Unfortunately, the collection itself doesn't have\n-//! enough information to do this itself. Therefore, it is up to us programmers to give it\n-//! hints.\n-//!\n-//! Any `with_capacity` constructor will instruct the collection to allocate enough space\n-//! for the specified number of elements. Ideally this will be for exactly that many\n-//! elements, but some implementation details may prevent this. `Vec` and `VecDeque` can\n-//! be relied on to allocate exactly the requested amount, though. Use `with_capacity`\n-//! when you know exactly how many elements will be inserted, or at least have a\n-//! reasonable upper-bound on that number.\n-//!\n-//! When anticipating a large influx of elements, the `reserve` family of methods can\n-//! be used to hint to the collection how much room it should make for the coming items.\n-//! As with `with_capacity`, the precise behavior of these methods will be specific to\n-//! the collection of interest.\n-//!\n-//! For optimal performance, collections will generally avoid shrinking themselves.\n-//! If you believe that a collection will not soon contain any more elements, or\n-//! just really need the memory, the `shrink_to_fit` method prompts the collection\n-//! to shrink the backing array to the minimum size capable of holding its elements.\n-//!\n-//! Finally, if ever you're interested in what the actual capacity of the collection is,\n-//! most collections provide a `capacity` method to query this information on demand.\n-//! This can be useful for debugging purposes, or for use with the `reserve` methods.\n+//! Many collections provide several constructors and methods that refer to\n+//! \"capacity\".  These collections are generally built on top of an array.\n+//! Optimally, this array would be exactly the right size to fit only the\n+//! elements stored in the collection, but for the collection to do this would\n+//! be very inefficient. If the backing array was exactly the right size at all\n+//! times, then every time an element is inserted, the collection would have to\n+//! grow the array to fit it. Due to the way memory is allocated and managed on\n+//! most computers, this would almost surely require allocating an entirely new\n+//! array and copying every single element from the old one into the new one.\n+//! Hopefully you can see that this wouldn't be very efficient to do on every\n+//! operation.\n+//!\n+//! Most collections therefore use an *amortized* allocation strategy. They\n+//! generally let themselves have a fair amount of unoccupied space so that they\n+//! only have to grow on occasion. When they do grow, they allocate a\n+//! substantially larger array to move the elements into so that it will take a\n+//! while for another grow to be required. While this strategy is great in\n+//! general, it would be even better if the collection *never* had to resize its\n+//! backing array. Unfortunately, the collection itself doesn't have enough\n+//! information to do this itself. Therefore, it is up to us programmers to give\n+//! it hints.\n+//!\n+//! Any `with_capacity` constructor will instruct the collection to allocate\n+//! enough space for the specified number of elements. Ideally this will be for\n+//! exactly that many elements, but some implementation details may prevent\n+//! this. `Vec` and `VecDeque` can be relied on to allocate exactly the\n+//! requested amount, though. Use `with_capacity` when you know exactly how many\n+//! elements will be inserted, or at least have a reasonable upper-bound on that\n+//! number.\n+//!\n+//! When anticipating a large influx of elements, the `reserve` family of\n+//! methods can be used to hint to the collection how much room it should make\n+//! for the coming items.  As with `with_capacity`, the precise behavior of\n+//! these methods will be specific to the collection of interest.\n+//!\n+//! For optimal performance, collections will generally avoid shrinking\n+//! themselves.  If you believe that a collection will not soon contain any more\n+//! elements, or just really need the memory, the `shrink_to_fit` method prompts\n+//! the collection to shrink the backing array to the minimum size capable of\n+//! holding its elements.\n+//!\n+//! Finally, if ever you're interested in what the actual capacity of the\n+//! collection is, most collections provide a `capacity` method to query this\n+//! information on demand.  This can be useful for debugging purposes, or for\n+//! use with the `reserve` methods.\n //!\n //! ## Iterators\n //!\n-//! Iterators are a powerful and robust mechanism used throughout Rust's standard\n-//! libraries. Iterators provide a sequence of values in a generic, safe, efficient\n-//! and convenient way. The contents of an iterator are usually *lazily* evaluated,\n-//! so that only the values that are actually needed are ever actually produced, and\n-//! no allocation need be done to temporarily store them. Iterators are primarily\n-//! consumed using a `for` loop, although many functions also take iterators where\n-//! a collection or sequence of values is desired.\n-//!\n-//! All of the standard collections provide several iterators for performing bulk\n-//! manipulation of their contents. The three primary iterators almost every collection\n-//! should provide are `iter`, `iter_mut`, and `into_iter`. Some of these are not\n-//! provided on collections where it would be unsound or unreasonable to provide them.\n+//! Iterators are a powerful and robust mechanism used throughout Rust's\n+//! standard libraries. Iterators provide a sequence of values in a generic,\n+//! safe, efficient and convenient way. The contents of an iterator are usually\n+//! *lazily* evaluated, so that only the values that are actually needed are\n+//! ever actually produced, and no allocation need be done to temporarily store\n+//! them. Iterators are primarily consumed using a `for` loop, although many\n+//! functions also take iterators where a collection or sequence of values is\n+//! desired.\n+//!\n+//! All of the standard collections provide several iterators for performing\n+//! bulk manipulation of their contents. The three primary iterators almost\n+//! every collection should provide are `iter`, `iter_mut`, and `into_iter`.\n+//! Some of these are not provided on collections where it would be unsound or\n+//! unreasonable to provide them.\n //!\n //! `iter` provides an iterator of immutable references to all the contents of a\n-//! collection in the most \"natural\" order. For sequence collections like `Vec`, this\n-//! means the items will be yielded in increasing order of index starting at 0. For ordered\n-//! collections like `BTreeMap`, this means that the items will be yielded in sorted order.\n-//! For unordered collections like `HashMap`, the items will be yielded in whatever order\n-//! the internal representation made most convenient. This is great for reading through\n-//! all the contents of the collection.\n+//! collection in the most \"natural\" order. For sequence collections like `Vec`,\n+//! this means the items will be yielded in increasing order of index starting\n+//! at 0. For ordered collections like `BTreeMap`, this means that the items\n+//! will be yielded in sorted order.  For unordered collections like `HashMap`,\n+//! the items will be yielded in whatever order the internal representation made\n+//! most convenient. This is great for reading through all the contents of the\n+//! collection.\n //!\n //! ```\n //! let vec = vec![1, 2, 3, 4];\n@@ -216,8 +238,8 @@\n //! }\n //! ```\n //!\n-//! `iter_mut` provides an iterator of *mutable* references in the same order as `iter`.\n-//! This is great for mutating all the contents of the collection.\n+//! `iter_mut` provides an iterator of *mutable* references in the same order as\n+//! `iter`.  This is great for mutating all the contents of the collection.\n //!\n //! ```\n //! let mut vec = vec![1, 2, 3, 4];\n@@ -226,13 +248,14 @@\n //! }\n //! ```\n //!\n-//! `into_iter` transforms the actual collection into an iterator over its contents\n-//! by-value. This is great when the collection itself is no longer needed, and the\n-//! values are needed elsewhere. Using `extend` with `into_iter` is the main way that\n-//! contents of one collection are moved into another. Calling `collect` on an iterator\n-//! itself is also a great way to convert one collection into another. Both of these\n-//! methods should internally use the capacity management tools discussed in the\n-//! previous section to do this as efficiently as possible.\n+//! `into_iter` transforms the actual collection into an iterator over its\n+//! contents by-value. This is great when the collection itself is no longer\n+//! needed, and the values are needed elsewhere. Using `extend` with `into_iter`\n+//! is the main way that contents of one collection are moved into another.\n+//! Calling `collect` on an iterator itself is also a great way to convert one\n+//! collection into another. Both of these methods should internally use the\n+//! capacity management tools discussed in the previous section to do this as\n+//! efficiently as possible.\n //!\n //! ```\n //! let mut vec1 = vec![1, 2, 3, 4];\n@@ -247,11 +270,12 @@\n //! let buf: VecDeque<_> = vec.into_iter().collect();\n //! ```\n //!\n-//! Iterators also provide a series of *adapter* methods for performing common tasks to\n-//! sequences. Among the adapters are functional favorites like `map`, `fold`, `skip`,\n-//! and `take`. Of particular interest to collections is the `rev` adapter, that\n-//! reverses any iterator that supports this operation. Most collections provide reversible\n-//! iterators as the way to iterate over them in reverse order.\n+//! Iterators also provide a series of *adapter* methods for performing common\n+//! tasks to sequences. Among the adapters are functional favorites like `map`,\n+//! `fold`, `skip`, and `take`. Of particular interest to collections is the\n+//! `rev` adapter, that reverses any iterator that supports this operation. Most\n+//! collections provide reversible iterators as the way to iterate over them in\n+//! reverse order.\n //!\n //! ```\n //! let vec = vec![1, 2, 3, 4];\n@@ -260,48 +284,50 @@\n //! }\n //! ```\n //!\n-//! Several other collection methods also return iterators to yield a sequence of results\n-//! but avoid allocating an entire collection to store the result in. This provides maximum\n-//! flexibility as `collect` or `extend` can be called to \"pipe\" the sequence into any\n-//! collection if desired. Otherwise, the sequence can be looped over with a `for` loop. The\n-//! iterator can also be discarded after partial use, preventing the computation of the unused\n-//! items.\n+//! Several other collection methods also return iterators to yield a sequence\n+//! of results but avoid allocating an entire collection to store the result in.\n+//! This provides maximum flexibility as `collect` or `extend` can be called to\n+//! \"pipe\" the sequence into any collection if desired. Otherwise, the sequence\n+//! can be looped over with a `for` loop. The iterator can also be discarded\n+//! after partial use, preventing the computation of the unused items.\n //!\n //! ## Entries\n //!\n-//! The `entry` API is intended to provide an efficient mechanism for manipulating\n-//! the contents of a map conditionally on the presence of a key or not. The primary\n-//! motivating use case for this is to provide efficient accumulator maps. For instance,\n-//! if one wishes to maintain a count of the number of times each key has been seen,\n-//! they will have to perform some conditional logic on whether this is the first time\n-//! the key has been seen or not. Normally, this would require a `find` followed by an\n-//! `insert`, effectively duplicating the search effort on each insertion.\n-//!\n-//! When a user calls `map.entry(&key)`, the map will search for the key and then yield\n-//! a variant of the `Entry` enum.\n-//!\n-//! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case the\n-//! only valid operation is to `insert` a value into the entry. When this is done,\n-//! the vacant entry is consumed and converted into a mutable reference to the\n-//! the value that was inserted. This allows for further manipulation of the value\n-//! beyond the lifetime of the search itself. This is useful if complex logic needs to\n-//! be performed on the value regardless of whether the value was just inserted.\n-//!\n-//! If an `Occupied(entry)` is yielded, then the key *was* found. In this case, the user\n-//! has several options: they can `get`, `insert`, or `remove` the value of the occupied\n-//! entry. Additionally, they can convert the occupied entry into a mutable reference\n-//! to its value, providing symmetry to the vacant `insert` case.\n+//! The `entry` API is intended to provide an efficient mechanism for\n+//! manipulating the contents of a map conditionally on the presence of a key or\n+//! not. The primary motivating use case for this is to provide efficient\n+//! accumulator maps. For instance, if one wishes to maintain a count of the\n+//! number of times each key has been seen, they will have to perform some\n+//! conditional logic on whether this is the first time the key has been seen or\n+//! not. Normally, this would require a `find` followed by an `insert`,\n+//! effectively duplicating the search effort on each insertion.\n+//!\n+//! When a user calls `map.entry(&key)`, the map will search for the key and\n+//! then yield a variant of the `Entry` enum.\n+//!\n+//! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case\n+//! the only valid operation is to `insert` a value into the entry. When this is\n+//! done, the vacant entry is consumed and converted into a mutable reference to\n+//! the the value that was inserted. This allows for further manipulation of the\n+//! value beyond the lifetime of the search itself. This is useful if complex\n+//! logic needs to be performed on the value regardless of whether the value was\n+//! just inserted.\n+//!\n+//! If an `Occupied(entry)` is yielded, then the key *was* found. In this case,\n+//! the user has several options: they can `get`, `insert`, or `remove` the\n+//! value of the occupied entry. Additionally, they can convert the occupied\n+//! entry into a mutable reference to its value, providing symmetry to the\n+//! vacant `insert` case.\n //!\n //! ### Examples\n //!\n-//! Here are the two primary ways in which `entry` is used. First, a simple example\n-//! where the logic performed on the values is trivial.\n+//! Here are the two primary ways in which `entry` is used. First, a simple\n+//! example where the logic performed on the values is trivial.\n //!\n //! #### Counting the number of times each character in a string occurs\n //!\n //! ```\n-//! # #![feature(collections)]\n-//! use std::collections::btree_map::{BTreeMap, Entry};\n+//! use std::collections::btree_map::BTreeMap;\n //!\n //! let mut count = BTreeMap::new();\n //! let message = \"she sells sea shells by the sea shore\";\n@@ -318,15 +344,14 @@\n //! }\n //! ```\n //!\n-//! When the logic to be performed on the value is more complex, we may simply use\n-//! the `entry` API to ensure that the value is initialized, and perform the logic\n-//! afterwards.\n+//! When the logic to be performed on the value is more complex, we may simply\n+//! use the `entry` API to ensure that the value is initialized, and perform the\n+//! logic afterwards.\n //!\n //! #### Tracking the inebriation of customers at a bar\n //!\n //! ```\n-//! # #![feature(collections)]\n-//! use std::collections::btree_map::{BTreeMap, Entry};\n+//! use std::collections::btree_map::BTreeMap;\n //!\n //! // A client of the bar. They have an id and a blood alcohol level.\n //! struct Person { id: u32, blood_alcohol: f32 }"}, {"sha": "914830d9dcfea20a84c4681e9409b90e419c62bd", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -96,14 +96,16 @@ pub struct WalkDir {\n \n /// Options and flags which can be used to configure how a file is opened.\n ///\n-/// This builder exposes the ability to configure how a `File` is opened and what operations are\n-/// permitted on the open file. The `File::open` and `File::create` methods are aliases for\n-/// commonly used options using this builder.\n+/// This builder exposes the ability to configure how a `File` is opened and\n+/// what operations are permitted on the open file. The `File::open` and\n+/// `File::create` methods are aliases for commonly used options using this\n+/// builder.\n ///\n-/// Generally speaking, when using `OpenOptions`, you'll first call `new()`, then chain calls to\n-/// methods to set each option, then call `open()`, passing the path of the file you're trying to\n-/// open. This will give you a [`io::Result`][result] with a [`File`][file] inside that you can\n-/// further operate on.\n+/// Generally speaking, when using `OpenOptions`, you'll first call `new()`,\n+/// then chain calls to methods to set each option, then call `open()`, passing\n+/// the path of the file you're trying to open. This will give you a\n+/// [`io::Result`][result] with a [`File`][file] inside that you can further\n+/// operate on.\n ///\n /// [result]: ../io/type.Result.html\n /// [file]: struct.File.html\n@@ -113,16 +115,15 @@ pub struct WalkDir {\n /// Opening a file to read:\n ///\n /// ```no_run\n-/// use std::fs;\n /// use std::fs::OpenOptions;\n ///\n /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n /// ```\n ///\n-/// Opening a file for both reading and writing, as well as creating it if it doesn't exist:\n+/// Opening a file for both reading and writing, as well as creating it if it\n+/// doesn't exist:\n ///\n /// ```\n-/// use std::fs;\n /// use std::fs::OpenOptions;\n ///\n /// let file = OpenOptions::new()\n@@ -771,7 +772,9 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// ```no_run\n /// use std::fs;\n ///\n-/// fs::copy(\"foo.txt\", \"bar.txt\");\n+/// # fn foo() -> std::io::Result<()> {\n+/// try!(fs::copy(\"foo.txt\", \"bar.txt\"));\n+/// # Ok(()) }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {"}, {"sha": "880770eb41485b15f05427f5ebf4a5aa84e2eec5", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -14,6 +14,7 @@\n //! by adding a glob import to the top of I/O heavy modules:\n //!\n //! ```\n+//! # #![allow(unused_imports)]\n //! use std::io::prelude::*;\n //! ```\n //!"}, {"sha": "b329494a0526bccfa827c18259e1295c927a6cbd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -103,7 +103,8 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![doc(test(no_crate_inject))]\n+#![doc(test(no_crate_inject, attr(deny(warnings))))]\n+#![doc(test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]"}, {"sha": "702b76e7d1c46dfd56a7c4f249336f14b0cfca1e", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -281,7 +281,6 @@ impl hash::Hash for SocketAddrV6 {\n /// Some examples:\n ///\n /// ```no_run\n-/// # #![feature(net)]\n /// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n ///\n /// fn main() {\n@@ -302,7 +301,7 @@ impl hash::Hash for SocketAddrV6 {\n ///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n ///\n ///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", port)).unwrap();\n-///     udp_s.send_to(&[7], (ip, 23451));\n+///     udp_s.send_to(&[7], (ip, 23451)).unwrap();\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2da6f7420ac9d31b7e7f26dbb94b992f8ebdd268", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -27,7 +27,6 @@ use sys_common::{AsInner, FromInner};\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(net)]\n /// use std::io::prelude::*;\n /// use std::net::TcpStream;\n ///\n@@ -47,7 +46,6 @@ pub struct TcpStream(net_imp::TcpStream);\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(net)]\n /// use std::net::{TcpListener, TcpStream};\n /// use std::thread;\n ///"}, {"sha": "bec9c09bc314676ec35fb91f8d373d3d033f3fbe", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -27,7 +27,6 @@ use sys_common::{AsInner, FromInner};\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(net)]\n /// use std::net::UdpSocket;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "6128469c60e50cb2b4f39d45445637b7500c7686", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -422,7 +422,6 @@ impl f32 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::f32;\n     ///\n     /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n@@ -856,7 +855,7 @@ impl f32 {\n     /// Convert radians to degrees.\n     ///\n     /// ```\n-    /// # #![feature(std_misc, core)]\n+    /// # #![feature(std_misc)]\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = consts::PI;\n@@ -987,7 +986,6 @@ impl f32 {\n     /// * Else: `self - other`\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::f32;\n     ///\n     /// let x = 3.0f32;\n@@ -1008,7 +1006,6 @@ impl f32 {\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::f32;\n     ///\n     /// let x = 8.0f32;\n@@ -1210,8 +1207,6 @@ impl f32 {\n     /// number is close to zero.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let x = 7.0f64;\n     ///\n     /// // e^(ln(7)) - 1"}, {"sha": "ea516e5b20b7a35199395f6a6dab0dfd8d6f50eb", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -280,7 +280,6 @@ pub trait Float\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -307,7 +306,6 @@ pub trait Float\n     /// predicate instead.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -417,7 +415,6 @@ pub trait Float\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -441,7 +438,6 @@ pub trait Float\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -686,7 +682,6 @@ pub trait Float\n     /// Convert radians to degrees.\n     ///\n     /// ```\n-    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -701,7 +696,7 @@ pub trait Float\n     /// Convert degrees to radians.\n     ///\n     /// ```\n-    /// # #![feature(std_misc, core)]\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -849,7 +844,6 @@ pub trait Float\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -864,7 +858,6 @@ pub trait Float\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -879,7 +872,6 @@ pub trait Float\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -895,7 +887,6 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -913,7 +904,6 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -949,7 +939,6 @@ pub trait Float\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -975,7 +964,6 @@ pub trait Float\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1011,7 +999,6 @@ pub trait Float\n     /// the operations were performed separately.\n     ///\n     /// ```\n-    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1028,7 +1015,6 @@ pub trait Float\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1047,7 +1033,6 @@ pub trait Float\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1066,7 +1051,6 @@ pub trait Float\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1113,7 +1097,6 @@ pub trait Float\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "f62b1a836fd10201a4452780afe93d0427245efc", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -48,7 +48,7 @@\n //! * Read lines from stdin\n //!\n //!     ```rust\n-//!     # #![feature(old_io, old_path)]\n+//!     # #![feature(old_io)]\n //!     use std::old_io as io;\n //!     use std::old_io::*;\n //!"}, {"sha": "f5310292b911b8c4f15a204263c849a3179e3341", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -414,7 +414,7 @@ pub struct ParseError;\n /// Some examples:\n ///\n /// ```rust,no_run\n-/// # #![feature(old_io, core, convert)]\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::{TcpStream, TcpListener};"}, {"sha": "7b23c3e1d03f21f8f60be42924fc1608f3d84f5d", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -191,7 +191,7 @@ impl UnixListener {\n     /// let server = Path::new(\"/path/to/my/socket\");\n     /// let stream = UnixListener::bind(&server);\n     /// for mut client in stream.listen().incoming() {\n-    ///     client.write(&[1, 2, 3, 4]);\n+    ///     let _ = client.write(&[1, 2, 3, 4]);\n     /// }\n     /// # }\n     /// ```"}, {"sha": "b55d1f4db07f78e6e5c57480c557d4192828dca1", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -367,7 +367,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(old_io, core, convert)]\n+    /// # #![feature(old_io)]\n     /// use std::old_io::Command;\n     ///\n     /// let output = match Command::new(\"cat\").arg(\"foot.txt\").output() {"}, {"sha": "2dee90e9a6660daad699813cf8bac4ab0923bae6", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -48,7 +48,7 @@\n //!\n //! ## Examples\n //!\n-//! ```rust\n+//! ```rust,ignore\n //! # #![feature(old_path, old_io)]\n //! use std::old_io::fs::PathExtensions;\n //! use std::old_path::{Path, GenericPath};\n@@ -144,12 +144,10 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// # #![feature(old_path)]\n-    /// use std::old_path::{Path, GenericPath};\n-    /// # foo();\n-    /// # #[cfg(windows)] fn foo() {}\n-    /// # #[cfg(unix)] fn foo() {\n+    /// # fn main() {\n+    /// use std::old_path::Path;\n     /// let path = Path::new(\"foo/bar\");\n     /// # }\n     /// ```\n@@ -170,12 +168,10 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// # #![feature(old_path)]\n-    /// use std::old_path::{Path, GenericPath};\n-    /// # foo();\n-    /// # #[cfg(windows)] fn foo() {}\n-    /// # #[cfg(unix)] fn foo() {\n+    /// # fn main() {\n+    /// use std::old_path::Path;\n     /// let x: &[u8] = b\"foo\\0\";\n     /// assert!(Path::new_opt(x).is_none());\n     /// # }\n@@ -194,7 +190,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -213,7 +209,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -229,7 +225,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -246,7 +242,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -266,7 +262,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -285,7 +281,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -302,7 +298,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -323,7 +319,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -340,7 +336,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -361,7 +357,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -390,7 +386,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -412,7 +408,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -441,7 +437,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -461,7 +457,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -489,7 +485,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -541,7 +537,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -568,7 +564,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -594,7 +590,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -615,7 +611,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -632,7 +628,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -658,7 +654,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -689,7 +685,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -708,7 +704,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -735,7 +731,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -759,7 +755,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -778,7 +774,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -798,7 +794,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -819,7 +815,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n@@ -837,7 +833,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```ignore\n     /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();"}, {"sha": "cac1540d0ec4c4fee8f7253d20b4ee8dd643e7db", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -38,8 +38,6 @@ use thread;\n /// # Examples\n ///\n /// ```should_panic\n-/// # #![feature(process)]\n-///\n /// use std::process::Command;\n ///\n /// let output = Command::new(\"/bin/cat\").arg(\"file.txt\").output().unwrap_or_else(|e| {\n@@ -267,10 +265,8 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(process)]\n     /// use std::process::Command;\n-    ///\n-    /// let output = Command::new(\"cat\").arg(\"foot.txt\").output().unwrap_or_else(|e| {\n+    /// let output = Command::new(\"cat\").arg(\"foo.txt\").output().unwrap_or_else(|e| {\n     ///     panic!(\"failed to execute process: {}\", e)\n     /// });\n     ///\n@@ -291,7 +287,6 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(process)]\n     /// use std::process::Command;\n     ///\n     /// let status = Command::new(\"ls\").status().unwrap_or_else(|e| {"}, {"sha": "f5a1093be2b1e9ee83f8cfcb3e960c99e310396c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -95,7 +95,7 @@ macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n         static $name: ::std::thread::LocalKey<$t> = {\n             use std::cell::UnsafeCell as __UnsafeCell;\n-            use std::thread::__local::__impl::KeyInner as __KeyInner;\n+            use std::thread::__local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n             use std::option::Option::None as __None;\n \n@@ -112,7 +112,7 @@ macro_rules! thread_local {\n     (pub static $name:ident: $t:ty = $init:expr) => (\n         pub static $name: ::std::thread::LocalKey<$t> = {\n             use std::cell::UnsafeCell as __UnsafeCell;\n-            use std::thread::__local::__impl::KeyInner as __KeyInner;\n+            use std::thread::__local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n             use std::option::Option::None as __None;\n \n@@ -156,20 +156,20 @@ macro_rules! __thread_local_inner {\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                        not(target_arch = \"aarch64\")),\n                    thread_local)]\n-        static $name: ::std::thread::__local::__impl::KeyInner<$t> =\n+        static $name: ::std::thread::__local::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                        not(target_arch = \"aarch64\")),\n                    thread_local)]\n-        pub static $name: ::std::thread::__local::__impl::KeyInner<$t> =\n+        pub static $name: ::std::thread::__local::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     ($init:expr, $t:ty) => ({\n         #[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n-        const _INIT: ::std::thread::__local::__impl::KeyInner<$t> = {\n-            ::std::thread::__local::__impl::KeyInner {\n+        const _INIT: ::std::thread::__local::KeyInner<$t> = {\n+            ::std::thread::__local::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n                 dtor_registered: ::std::cell::UnsafeCell { value: false },\n                 dtor_running: ::std::cell::UnsafeCell { value: false },\n@@ -178,13 +178,13 @@ macro_rules! __thread_local_inner {\n \n         #[allow(trivial_casts)]\n         #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n-        const _INIT: ::std::thread::__local::__impl::KeyInner<$t> = {\n-            ::std::thread::__local::__impl::KeyInner {\n+        const _INIT: ::std::thread::__local::KeyInner<$t> = {\n+            ::std::thread::__local::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n-                os: ::std::thread::__local::__impl::OsStaticKey {\n-                    inner: ::std::thread::__local::__impl::OS_INIT_INNER,\n+                os: ::std::thread::__local::OsStaticKey {\n+                    inner: ::std::thread::__local::OS_INIT_INNER,\n                     dtor: ::std::option::Option::Some(\n-                        ::std::thread::__local::__impl::destroy_value::<$t>\n+                        ::std::thread::__local::destroy_value::<$t>\n                     ),\n                 },\n             }"}, {"sha": "10c79671c0c9433dfa39632604fe494c50086007", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -99,6 +99,7 @@\n //! `println!` and `panic!` for the child thread:\n //!\n //! ```rust\n+//! # #![allow(unused_must_use)]\n //! use std::thread;\n //!\n //! thread::Builder::new().name(\"child1\".to_string()).spawn(move || {\n@@ -167,14 +168,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::__local::{LocalKey, LocalKeyState};\n-\n-#[unstable(feature = \"scoped_tls\",\n-            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                      stabilizing its interface\")]\n-pub use self::__scoped::ScopedKey;\n-\n use prelude::v1::*;\n \n use any::Any;\n@@ -193,13 +186,19 @@ use time::Duration;\n // Thread-local storage\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[macro_use]\n-#[doc(hidden)]\n-#[path = \"local.rs\"] pub mod __local;\n+#[macro_use] mod local;\n+#[macro_use] mod scoped;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::local::{LocalKey, LocalKeyState};\n+\n+#[unstable(feature = \"scoped_tls\",\n+            reason = \"scoped TLS has yet to have wide enough use to fully \\\n+                      consider stabilizing its interface\")]\n+pub use self::scoped::ScopedKey;\n \n-#[macro_use]\n-#[doc(hidden)]\n-#[path = \"scoped.rs\"] pub mod __scoped;\n+#[doc(hidden)] pub use self::local::__impl as __local;\n+#[doc(hidden)] pub use self::scoped::__impl as __scoped;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Builder"}, {"sha": "fa980954c2f8c1ee19a63efdbbfc5dffdd322c91", "filename": "src/libstd/thread/scoped.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Flibstd%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -110,7 +110,7 @@ macro_rules! __scoped_thread_local_inner {\n                       target_os = \"openbsd\",\n                       target_arch = \"aarch64\")))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread::__scoped::__impl::KeyInner {\n+            inner: ::std::thread::__scoped::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: 0 as *mut _ },\n             }\n         };\n@@ -121,8 +121,8 @@ macro_rules! __scoped_thread_local_inner {\n                   target_os = \"openbsd\",\n                   target_arch = \"aarch64\"))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread::__scoped::__impl::KeyInner {\n-                inner: ::std::thread::__scoped::__impl::OS_INIT,\n+            inner: ::std::thread::__scoped::KeyInner {\n+                inner: ::std::thread::__scoped::OS_INIT,\n                 marker: ::std::marker::PhantomData::<::std::cell::Cell<$t>>,\n             }\n         };"}, {"sha": "f96704ee128325fee864cd4109adfd1b42057619", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -89,7 +89,8 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n         } else {\n             src = PathBuf::from(&env::args().nth(2).unwrap());\n         }\n-        // preprocess the markdown, rerouting markdown references to html references\n+        // preprocess the markdown, rerouting markdown references to html\n+        // references\n         let mut markdown_data = String::new();\n         try!(File::open(&src.join(&item.path)).and_then(|mut f| {\n             f.read_to_string(&mut markdown_data)\n@@ -135,6 +136,7 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n             format!(\"-o{}\", out_path.display()),\n             format!(\"--html-before-content={}\", prelude.display()),\n             format!(\"--html-after-content={}\", postlude.display()),\n+            format!(\"--markdown-playground-url=http://play.rust-lang.org\"),\n             format!(\"--markdown-css={}\", item.path_to_root.join(\"rust-book.css\").display()),\n             \"--markdown-no-toc\".to_string(),\n         ];\n@@ -148,6 +150,14 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n \n     // create index.html from the root README\n     try!(fs::copy(&tgt.join(\"README.html\"), &tgt.join(\"index.html\")));\n+\n+    // Copy some js for playpen\n+    let mut jquery = try!(File::create(tgt.join(\"jquery.js\")));\n+    let js = include_bytes!(\"../librustdoc/html/static/jquery-2.1.0.min.js\");\n+    try!(jquery.write_all(js));\n+    let mut playpen = try!(File::create(tgt.join(\"playpen.js\")));\n+    let js = include_bytes!(\"../librustdoc/html/static/playpen.js\");\n+    try!(playpen.write_all(js));\n     Ok(())\n }\n "}, {"sha": "d5483593aa8888f3e487d145f7cd0e01b7b510de", "filename": "src/rustbook/javascript.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Frustbook%2Fjavascript.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Frustbook%2Fjavascript.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fjavascript.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -71,4 +71,6 @@ document.addEventListener(\"DOMContentLoaded\", function(event) {\n \n });\n </script>\n+<script type=\"text/javascript\" src=\"jquery.js\"></script>\n+<script type=\"text/javascript\" src=\"playpen.js\"></script>\n \"#;"}, {"sha": "5f1bd7ab52235bc3bc9c2110c12d5a6afffd2a7d", "filename": "src/test/auxiliary/inline-default-methods.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    fn bar(&self);\n+    fn foo(&mut self) {}\n+}"}, {"sha": "0bb2133c833c70aa78e7d7119ff7b0c43f75b2ec", "filename": "src/test/auxiliary/issue-13698.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-13698.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate ext;\n+pub trait Foo {\n+    #[doc(hidden)]\n+    fn foo(&self) {}\n+}\n \n-// @count lib/struct.Struct.html '//*[@id=\"method.provided\"]' 1\n-pub use ext::Struct;\n+impl Foo for i32 {}", "previous_filename": "src/test/run-make/rustdoc-extern-default-method/lib.rs"}, {"sha": "9e42dbfbc6be41f5d5b50035a792ea249197a9b7", "filename": "src/test/auxiliary/issue-15318.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-15318.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![doc(html_root_url = \"http://example.com/\")]\n+\n+/// dox\n+#[doc(primitive = \"pointer\")]\n+pub mod ptr {}"}, {"sha": "d3a860357422c2ad3046342b2b374461ab0d2e03", "filename": "src/test/auxiliary/issue-17476.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-17476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-17476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17476.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type=\"lib\"]\n \n-extern crate lib;\n+#![doc(html_root_url = \"http://example.com\")]\n \n-// @has user/fn.foreigner.html //pre 'pub unsafe fn foreigner(cold_as_ice: u32)'\n-pub use lib::foreigner;\n+pub trait Foo {\n+    fn foo(&self) {}\n+}", "previous_filename": "src/test/run-make/rustdoc-ffi/user.rs"}, {"sha": "150d8018f088831ef4d4a24c0862983b50e3ec32", "filename": "src/test/auxiliary/issue-20646.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-20646.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Trait {\n+    type Output;\n+}\n+\n+pub fn fun<T>(_: T) where T: Trait<Output=i32> {}"}, {"sha": "aea8b429d9f753b936bc263f71d0a391cb3346bd", "filename": "src/test/auxiliary/issue-20727.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-20727.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Deref {\n+    type Target: ?Sized;\n+\n+    fn deref<'a>(&'a self) -> &'a Self::Target;\n+}\n+\n+pub trait Add<RHS = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: RHS) -> Self::Output;\n+}\n+\n+\n+pub trait Bar {}\n+pub trait Deref2 {\n+    type Target: Bar;\n+\n+    fn deref(&self) -> Self::Target;\n+}\n+\n+pub trait Index<Idx: ?Sized> {\n+    type Output: ?Sized;\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n+}"}, {"sha": "6d6046cc7bfc2ca1f4028a0f11cb3c7673e3c842", "filename": "src/test/auxiliary/issue-21092.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-21092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-21092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21092.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    type Bar;\n+    fn foo(&self) {}\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {\n+    type Bar = i32;\n+}"}, {"sha": "ada6c6925025de6c81e1f403ea1a28bab0b577c4", "filename": "src/test/auxiliary/issue-21801.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21801.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn new<F>(f: F) -> Foo where F: FnMut() -> i32 {\n+        loop {}\n+    }\n+}"}, {"sha": "554b580ae2b1fc71f477eaddc0b4b8864e717f4c", "filename": "src/test/auxiliary/issue-22025.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-22025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-22025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-22025.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod foo {\n+\n+    pub trait Foo {}\n+    pub struct Bar;\n+\n+    impl Foo for Bar {}\n+\n+}"}, {"sha": "ec9f2004ebf8917c425c4c2cdba0735551d31410", "filename": "src/test/auxiliary/issue-23207-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-23207-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-23207-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-23207-1.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod fmt {\n+    pub struct Error;\n+}"}, {"sha": "5e9c540ab69d5b8e32757087de9bd8e0dc7fbf60", "filename": "src/test/auxiliary/issue-23207-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-23207-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Fissue-23207-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-23207-2.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate issue_23207_1;\n+\n+pub mod fmt {\n+    pub use issue_23207_1::fmt::Error;\n+}\n+"}, {"sha": "8f11629be6cc83c054a577b22e3618b00e05112b", "filename": "src/test/auxiliary/rustdoc-default-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-default-impl/foo.rs"}, {"sha": "861562753f991f62f488010c6c74e43fc40a03ff", "filename": "src/test/auxiliary/rustdoc-extern-default-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-extern-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-extern-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-extern-default-method.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-extern-default-method/ext.rs"}, {"sha": "96a7a8378b792e04d01a0e5837043f455417af05", "filename": "src/test/auxiliary/rustdoc-extern-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-extern-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-extern-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-extern-method.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-extern-method/foo.rs"}, {"sha": "e06dbe76dbbe74e1be2032bb9f8c6b94ae6a8be5", "filename": "src/test/auxiliary/rustdoc-ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Fauxiliary%2Frustdoc-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-ffi.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-ffi/lib.rs"}, {"sha": "50c63abc0d4e54432de2c5ee92b45e0ff1b45ef2", "filename": "src/test/run-make/issue-22131/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frun-make%2Fissue-22131%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frun-make%2Fissue-22131%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2Ffoo.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name=\"foo\"]\n-\n /// ```rust\n /// assert_eq!(foo::foo(), 1);\n /// ```"}, {"sha": "74fca83f5f9157adb269616c7a19c4cfed6107e7", "filename": "src/test/run-make/rustdoc-assoc-types/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: lib.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc lib.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs"}, {"sha": "338cf9d20531891e9928277c553b05bec7259249", "filename": "src/test/run-make/rustdoc-default-impl/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: foo.rs bar.rs\n-\t$(RUSTC) foo.rs --crate-type lib\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc bar.rs -L $(TMPDIR)"}, {"sha": "ffc4a08f8018bcad6127e192fbec8555f0230e8c", "filename": "src/test/run-make/rustdoc-extern-default-method/Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-extern-default-method%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-extern-default-method%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-default-method%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,6 +0,0 @@\n--include ../tools.mk\n-\n-all: lib.rs ext.rs\n-\t$(HOST_RPATH_ENV) $(RUSTC) ext.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc lib.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs"}, {"sha": "55cbd2da6ae2ebdf0b9b2be12cbc54da9121ffee", "filename": "src/test/run-make/rustdoc-extern-method/Makefile", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,7 +0,0 @@\n--include ../tools.mk\n-\n-all: foo.rs bar.rs\n-\t$(HOST_RPATH_ENV) $(RUSTC) foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc bar.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc bar.rs"}, {"sha": "c312efe12f5f7c055abc9dce6f07af57462a9006", "filename": "src/test/run-make/rustdoc-ffi/Makefile", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,8 +0,0 @@\n--include ../tools.mk\n-\n-all: lib.rs\n-\t$(HOST_RPATH_ENV) $(RUSTC) lib.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc lib.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc user.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc user.rs"}, {"sha": "3ac7b6d2fae0ef96dbdc611886da4b90eb57d50e", "filename": "src/test/run-make/rustdoc-hidden-line/Makefile", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,15 +0,0 @@\n--include ../tools.mk\n-\n-# FIXME ignore windows\n-ifndef IS_WINDOWS\n-\n-all:\n-\t@echo $(RUSTDOC)\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) --test foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs\n-\n-else\n-all:\n-\n-endif"}, {"sha": "74fca83f5f9157adb269616c7a19c4cfed6107e7", "filename": "src/test/run-make/rustdoc-must-use/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-must-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-must-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-must-use%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: lib.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc lib.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs"}, {"sha": "c1b1683efdb7fad32880ae69c03656b5510e2be7", "filename": "src/test/run-make/rustdoc-negative-impl/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs"}, {"sha": "ba971836e5a9d64c2ca7df1580e39c9addb7c251", "filename": "src/test/run-make/rustdoc-recursion/Makefile", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-recursion%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-recursion%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-recursion%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,11 +0,0 @@\n--include ../tools.mk\n-\n-# FIXME ignore windows\n-ifndef IS_WINDOWS\n-all:\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo2.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo3.rs\n-else\n-all:\n-endif"}, {"sha": "e7e8f0c35a7e5662d68e38872469289095e51695", "filename": "src/test/run-make/rustdoc-search-index/Makefile", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,15 +0,0 @@\n--include ../tools.mk\n-\n-# FIXME ignore windows\n-ifndef IS_WINDOWS\n-\n-source=index.rs\n-\n-all:\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc $(source)\n-\t$(HTMLDOCCK) $(TMPDIR)/doc $(source)\n-\n-else\n-all:\n-\n-endif"}, {"sha": "7a1ad761b3d6aa9922d6ffc20ce19ef0ec4a3496", "filename": "src/test/run-make/rustdoc-smoke/Makefile", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,4 +0,0 @@\n--include ../tools.mk\n-all:\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs"}, {"sha": "419603e82f715dbe4f24a9f2e54abda97d9461e1", "filename": "src/test/run-make/rustdoc-src-links/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-all:\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc qux/mod.rs"}, {"sha": "9a964f11252520a9486c3232d46c9f98a36665fa", "filename": "src/test/run-make/rustdoc-src-links/foo.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name = \"foo\"]\n-\n-//! Dox\n-// @has src/foo/foo.rs.html\n-// @has foo/index.html '//a/@href' '../src/foo/foo.rs.html'\n-\n-pub mod qux;\n-\n-// @has foo/bar/index.html '//a/@href' '../../src/foo/foo.rs.html'\n-pub mod bar {\n-\n-    /// Dox\n-    // @has foo/bar/baz/index.html '//a/@href' '../../../src/foo/foo.rs.html'\n-    pub mod baz {\n-        /// Dox\n-        // @has foo/bar/baz/fn.baz.html '//a/@href' '../../../src/foo/foo.rs.html'\n-        pub fn baz() { }\n-    }\n-\n-    /// Dox\n-    // @has foo/bar/trait.Foobar.html '//a/@href' '../../src/foo/foo.rs.html'\n-    pub trait Foobar { fn dummy(&self) { } }\n-\n-    // @has foo/bar/struct.Foo.html '//a/@href' '../../src/foo/foo.rs.html'\n-    pub struct Foo { x: i32, y: u32 }\n-\n-    // @has foo/bar/fn.prawns.html '//a/@href' '../../src/foo/foo.rs.html'\n-    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n-}\n-\n-/// Dox\n-// @has foo/fn.modfn.html '//a/@href' '../src/foo/foo.rs.html'\n-pub fn modfn() { }"}, {"sha": "9b1563d32ac716b25ea7213b6122907aca847675", "filename": "src/test/run-make/rustdoc-src-links/qux/mod.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Dox\n-// @has src/foo/qux/mod.rs.html\n-// @has foo/qux/index.html '//a/@href' '../../src/foo/qux/mod.rs.html'\n-\n-// @has foo/qux/bar/index.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n-pub mod bar {\n-\n-    /// Dox\n-    // @has foo/qux/bar/baz/index.html '//a/@href' '../../../../src/foo/qux/mod.rs.html'\n-    pub mod baz {\n-        /// Dox\n-        // @has foo/qux/bar/baz/fn.baz.html '//a/@href' '../../../../src/foo/qux/mod.rs.html'\n-        pub fn baz() { }\n-    }\n-\n-    /// Dox\n-    // @has foo/qux/bar/trait.Foobar.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n-    pub trait Foobar { fn dummy(&self) { } }\n-\n-    // @has foo/qux/bar/struct.Foo.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n-    pub struct Foo { x: i32, y: u32 }\n-\n-    // @has foo/qux/bar/fn.prawns.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n-    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n-}\n-\n-/// Dox\n-// @has foo/qux/fn.modfn.html '//a/@href' '../../src/foo/qux/mod.rs.html'\n-pub fn modfn() { }"}, {"sha": "c1b1683efdb7fad32880ae69c03656b5510e2be7", "filename": "src/test/run-make/rustdoc-viewpath-self/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs"}, {"sha": "c1b1683efdb7fad32880ae69c03656b5510e2be7", "filename": "src/test/run-make/rustdoc-where/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9539627ac76ca37d617a329dbd79c50c59cf59ee/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2FMakefile?ref=9539627ac76ca37d617a329dbd79c50c59cf59ee", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all: foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n-\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs"}, {"sha": "20076a764943c2896ed94e856a9b3e7eda91dfaf", "filename": "src/test/rustdoc/assoc-types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type=\"lib\"]\n \n-// @has lib/trait.Index.html\n+// @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n     type Output: ?Sized;", "previous_filename": "src/test/run-make/rustdoc-assoc-types/lib.rs"}, {"sha": "92b243140021d26004cf22eda29972f79ec99cbd", "filename": "src/test/rustdoc/default-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fdefault-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fdefault-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault-impl.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-default-impl.rs\n+// ignore-android\n+\n+extern crate rustdoc_default_impl as foo;\n+\n+pub use foo::bar;\n+\n+pub fn wut<T: bar::Bar>() {\n+}"}, {"sha": "9178c1bcb9d76d56b65755ec191b8909669d5c41", "filename": "src/test/rustdoc/extern-default-method.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-default-method.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-extern-default-method.rs\n+// ignore-android\n+\n+extern crate rustdoc_extern_default_method as ext;\n+\n+// @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]' 1\n+pub use ext::Struct;"}, {"sha": "5e30e6c0c1c58a008651bd2414062f012ed5df17", "filename": "src/test/rustdoc/extern-method.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fextern-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fextern-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-method.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,16 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:rustdoc-extern-method.rs\n+// ignore-android\n+\n #![feature(unboxed_closures)]\n \n-extern crate foo;\n+extern crate rustdoc_extern_method as foo;\n \n-// @has bar/trait.Foo.html //pre \"pub trait Foo\"\n+// @has extern_method/trait.Foo.html //pre \"pub trait Foo\"\n // @has - '//*[@id=\"tymethod.foo\"]//code' 'extern \"rust-call\" fn foo'\n-// @has - '//*[@id=\"tymethod.foo_\"]//code' 'extern \"rust-call\" fn foo_'\n+// @has - '//*[@id=\"method.foo_\"]//code' 'extern \"rust-call\" fn foo_'\n pub use foo::Foo;\n \n-// @has bar/trait.Bar.html //pre \"pub trait Bar\"\n+// @has extern_method/trait.Bar.html //pre \"pub trait Bar\"\n pub trait Bar {\n     // @has - '//*[@id=\"tymethod.bar\"]//code' 'extern \"rust-call\" fn bar'\n     extern \"rust-call\" fn bar(&self, _: ());", "previous_filename": "src/test/run-make/rustdoc-extern-method/bar.rs"}, {"sha": "717c64b3aa54667cf841c79af8c25310c24700cb", "filename": "src/test/rustdoc/ffi.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fffi.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-ffi.rs\n+// ignore-android\n+\n+extern crate rustdoc_ffi as lib;\n+\n+// @has ffi/fn.foreigner.html //pre 'pub unsafe extern fn foreigner(cold_as_ice: u32)'\n+pub use lib::foreigner;\n+\n+extern \"C\" {\n+    // @has ffi/fn.another.html //pre 'pub unsafe extern fn another(cold_as_ice: u32)'\n+    pub fn another(cold_as_ice: u32);\n+}"}, {"sha": "bb9eec793df9cd7daf8ec23d7c144f123114ca20", "filename": "src/test/rustdoc/hidden-line.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-line.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name=\"foo\"]\n-\n /// The '# ' lines should be removed from the output, but the #[derive] should be\n /// retained.\n ///\n@@ -31,5 +29,5 @@\n /// ```\n pub fn foo() {}\n \n-// @!has foo/fn.foo.html invisible\n+// @!has hidden_line/fn.foo.html invisible\n // @matches - //pre \"#\\[derive\\(PartialEq\\)\\] // Bar\"", "previous_filename": "src/test/run-make/rustdoc-hidden-line/foo.rs"}, {"sha": "a613736ab4c500bed8e419a9253836fba51ca8d4", "filename": "src/test/rustdoc/inline-default-methods.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline-default-methods.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:inline-default-methods.rs\n+// ignore-android\n+\n+extern crate inline_default_methods;\n+\n+// @has inline_default_methods/trait.Foo.html\n+// @has - '//*[@class=\"rust trait\"]' 'fn bar(&self);'\n+// @has - '//*[@class=\"rust trait\"]' 'fn foo(&mut self) { ... }'\n+pub use inline_default_methods::Foo;"}, {"sha": "5c31c297724649f8cbb95b547e8635a62868c9e5", "filename": "src/test/rustdoc/issue-13698.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-13698.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-13698.rs\n+// ignore-android\n+\n+extern crate issue_13698;\n+\n+pub struct Foo;\n+// @!has issue_13698/struct.Foo.html '//*[@id=\"method.foo\"]' 'fn foo'\n+impl issue_13698::Foo for Foo {}\n+\n+pub trait Bar {\n+    #[doc(hidden)]\n+    fn bar(&self) {}\n+}\n+\n+// @!has issue_13698/struct.Foo.html '//*[@id=\"method.foo\"]' 'fn bar'\n+impl Bar for Foo {}"}, {"sha": "6ab848b92dbbd97e6c5e1bf97cae1f284a51ff23", "filename": "src/test/rustdoc/issue-15169.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15169.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_15169/struct.Foo.html '//*[@id=\"method.eq\"]' 'fn eq'\n+#[derive(PartialEq)]\n+pub struct Foo;"}, {"sha": "32898d652f8217fb112d6dce6b5acb4ae7b0e791", "filename": "src/test/rustdoc/issue-15318-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-15318.rs\n+// ignore-android\n+\n+extern crate issue_15318;\n+\n+pub use issue_15318::ptr;\n+\n+// @has issue_15318_2/fn.bar.html \\\n+//          '//*[@href=\"primitive.pointer.html\"]' \\\n+//          '*mut T'\n+pub fn bar<T>(ptr: *mut T) {}\n+"}, {"sha": "a54824970c751da11aa9978367d9fad1cf35637f", "filename": "src/test/rustdoc/issue-15318-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15318-3.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_15318_3/primitive.pointer.html\n+\n+/// dox\n+#[doc(primitive = \"pointer\")]\n+pub mod ptr {}"}, {"sha": "3bcc8f45b0e88338009deb0e5e709a5e1628dd80", "filename": "src/test/rustdoc/issue-15318.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15318.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-15318.rs\n+// ignore-android\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate issue_15318;\n+\n+// @has issue_15318/fn.bar.html \\\n+//      '//*[@href=\"http://example.com/issue_15318/primitive.pointer.html\"]' \\\n+//      '*mut T'\n+pub fn bar<T>(ptr: *mut T) {}"}, {"sha": "97c37bbc1eda0619f5925aca0ab3a1a106cb69d8", "filename": "src/test/rustdoc/issue-15347.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-15347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15347.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2105 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--no-defaults --passes \"collapse-docs\" --passes \"unindent-comments\"\n+\n+// @has issue_15347/fn.foo.html\n+#[doc(hidden)]\n+pub fn foo() {}"}, {"sha": "7aae6a0595024c905a443f46b0623687af2dd1cf", "filename": "src/test/rustdoc/issue-16019.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16019.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! define_struct {\n+    ($rounds:expr) => (\n+        struct Struct {\n+            sk: [u32; $rounds + 1]\n+        }\n+        )\n+}\n+\n+define_struct!(2);"}, {"sha": "c0b99a627ea3073fd1e46eab186af983bac2e17c", "filename": "src/test/rustdoc/issue-16265-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+// @has issue_16265_1/traits/index.html '[src]'\n+pub mod traits {\n+    impl PartialEq for super::Foo {\n+        fn eq(&self, _: &super::Foo) -> bool { true }\n+    }\n+}"}, {"sha": "22a8df407e095e357a2a7dde58d687033674041c", "filename": "src/test/rustdoc/issue-16265-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// @has issue_16265_2/index.html '[src]'\n+\n+trait Y {}\n+impl Y for Option<u32>{}"}, {"sha": "8d31a1c288eb8d097d53eb9916ffefe4b2b5e816", "filename": "src/test/rustdoc/issue-17476.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-17476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-17476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-17476.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-17476.rs\n+// ignore-android\n+\n+extern crate issue_17476;\n+\n+pub struct Foo;\n+\n+// @has issue_17476/struct.Foo.html \\\n+//      '//*[@href=\"http://example.com/issue_17476/trait.Foo.html#method.foo\"]' \\\n+//      'foo'\n+impl issue_17476::Foo for Foo {}"}, {"sha": "46aac8701fd988a02b05577a23a94f46080f0393", "filename": "src/test/rustdoc/issue-18199.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-18199.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+#![doc(test(attr(feature(staged_api))))]\n+\n+/// ```\n+/// #![staged_api]\n+/// fn main() {}\n+/// ```\n+pub fn foo() {}"}, {"sha": "609ae22be104b4eceacdaa3de816f35d730895af", "filename": "src/test/rustdoc/issue-19055.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19055.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_19055/trait.Any.html\n+pub trait Any {}\n+\n+impl<'any> Any + 'any {\n+    // @has - '//*[@id=\"method.is\"]' 'fn is'\n+    pub fn is<T: 'static>(&self) -> bool { loop {} }\n+\n+    // @has - '//*[@id=\"method.downcast_ref\"]' 'fn downcast_ref'\n+    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> { loop {} }\n+\n+    // @has - '//*[@id=\"method.downcast_mut\"]' 'fn downcast_mut'\n+    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> { loop {} }\n+}\n+\n+pub trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+// @has - '//*[@id=\"method.foo\"]' 'fn foo'\n+impl Foo for Any {}"}, {"sha": "33ec4b75c413de0a2752fbfe032b425cc0134883", "filename": "src/test/rustdoc/issue-20175.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20175.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20175.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20175.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+pub struct Bar;\n+\n+// @has issue_20175/struct.Bar.html \\\n+//      '//*[@id=\"method.foo\"]' \\\n+//      'fn foo'\n+impl<'a> Foo for &'a Bar {}"}, {"sha": "77abe35948c3de259726a6f80e855f957b9ad984", "filename": "src/test/rustdoc/issue-20646.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20646.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20646.rs\n+// ignore-android\n+\n+#![feature(associated_types)]\n+\n+extern crate issue_20646;\n+\n+// @has issue_20646/trait.Trait.html \\\n+//      '//*[@id=\"associatedtype.Output\"]' \\\n+//      'type Output'\n+pub trait Trait {\n+    type Output;\n+}\n+\n+// @has issue_20646/fn.fun.html \\\n+//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n+\n+pub mod reexport {\n+    // @has issue_20646/reexport/trait.Trait.html \\\n+    //      '//*[@id=\"associatedtype.Output\"]' \\\n+    //      'type Output'\n+    // @has issue_20646/reexport/fn.fun.html \\\n+    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+    pub use issue_20646::{Trait, fun};\n+}"}, {"sha": "03181bebdb05a187c08d43ee9290ae5deb59b2d6", "filename": "src/test/rustdoc/issue-20727-2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727-2.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20727.rs\n+// ignore-android\n+\n+extern crate issue_20727;\n+\n+// @has issue_20727_2/trait.Add.html\n+pub trait Add<RHS = Self> {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n+    type Output;\n+\n+    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    fn add(self, rhs: RHS) -> Self::Output;\n+}\n+\n+// @has issue_20727_2/reexport/trait.Add.html\n+pub mod reexport {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n+    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    pub use issue_20727::Add;\n+}\n+"}, {"sha": "9d05ce99c4d3034908cc52f71e576ff9a54b66d2", "filename": "src/test/rustdoc/issue-20727-3.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727-3.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20727.rs\n+// ignore-android\n+\n+extern crate issue_20727;\n+\n+pub trait Bar {}\n+\n+// @has issue_20727_3/trait.Deref2.html\n+pub trait Deref2 {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n+    type Target: Bar;\n+\n+    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    fn deref(&self) -> Self::Target;\n+}\n+\n+// @has issue_20727_3/reexport/trait.Deref2.html\n+pub mod reexport {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n+    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    pub use issue_20727::Deref2;\n+}"}, {"sha": "39db387f090003ebe6696b173b3d8a0d5d646264", "filename": "src/test/rustdoc/issue-20727-4.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20727.rs\n+// ignore-android\n+\n+extern crate issue_20727;\n+\n+// @has issue_20727_4/trait.Index.html\n+pub trait Index<Idx: ?Sized> {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx: ?Sized> {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n+    type Output: ?Sized;\n+\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'fn index(&self, index: Idx) -> &Self::Output'\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+// @has issue_20727_4/trait.IndexMut.html\n+pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'trait IndexMut<Idx: ?Sized>: Index<Idx> {'\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n+    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n+}\n+\n+pub mod reexport {\n+    // @has issue_20727_4/reexport/trait.Index.html\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx> where Idx: ?Sized {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'fn index(&self, index: Idx) -> &Self::Output'\n+    pub use issue_20727::Index;\n+\n+    // @has issue_20727_4/reexport/trait.IndexMut.html\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'trait IndexMut<Idx>: Index<Idx> where Idx: ?Sized {'\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n+    pub use issue_20727::IndexMut;\n+}"}, {"sha": "3205f5bfa33715ff2d6bb5d6dbd8e67146c7d6cb", "filename": "src/test/rustdoc/issue-20727.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20727.rs\n+// ignore-android\n+\n+extern crate issue_20727;\n+\n+// @has issue_20727/trait.Deref.html\n+pub trait Deref {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n+    type Target: ?Sized;\n+\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //        \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n+    fn deref<'a>(&'a self) -> &'a Self::Target;\n+}\n+\n+// @has issue_20727/reexport/trait.Deref.html\n+pub mod reexport {\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n+    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n+    // @has - '//*[@class=\"rust trait\"]' \\\n+    //      \"fn deref(&'a self) -> &'a Self::Target;\"\n+    pub use issue_20727::Deref;\n+}"}, {"sha": "38983aee93397de586152071a1ebba5c4799a768", "filename": "src/test/rustdoc/issue-21092.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21092.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-21092.rs\n+// ignore-android\n+\n+extern crate issue_21092;\n+\n+// @has issue_21092/struct.Bar.html\n+// @has - '//*[@id=\"assoc_type.Bar\"]' 'type Bar = i32'\n+pub use issue_21092::{Foo, Bar};"}, {"sha": "36f160acf1cf86fa53e33631241361465682580f", "filename": "src/test/rustdoc/issue-21474.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21474.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use inner::*;\n+\n+mod inner {\n+    impl super::Blah for super::What { }\n+}\n+\n+pub trait Blah { }\n+\n+// @count issue_21474/struct.What.html \\\n+//        '//*[@class=\"impl\"]' 1\n+pub struct What;"}, {"sha": "a4392b84e5b12ab89e2a30b48a5f727000f2b729", "filename": "src/test/rustdoc/issue-21801.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21801.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-21801.rs\n+// ignore-android\n+\n+extern crate issue_21801;\n+\n+// @has issue_21801/struct.Foo.html\n+// @has - '//*[@id=\"method.new\"]' \\\n+//        'fn new<F>(f: F) -> Foo where F: FnMut() -> i32'\n+pub use issue_21801::Foo;"}, {"sha": "d2eb4fb6ad845559e3f4b74c8ce497b4960d487d", "filename": "src/test/rustdoc/issue-22025.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-22025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-22025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-22025.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-22025.rs\n+// ignore-android\n+\n+extern crate issue_22025;\n+\n+pub use issue_22025::foo::{Foo, Bar};"}, {"sha": "6f84428b0798ff36965118296d20a204c61fa4b3", "filename": "src/test/rustdoc/issue-22038.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-22038.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    // @has issue_22038/fn.foo1.html \\\n+    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern fn foo1()'\n+    pub fn foo1();\n+}\n+\n+extern \"system\" {\n+    // @has issue_22038/fn.foo2.html \\\n+    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"system\" fn foo2()'\n+    pub fn foo2();\n+}\n+\n+// @has issue_22038/fn.bar.html \\\n+//      '//*[@class=\"rust fn\"]' 'pub extern fn bar()'\n+pub extern fn bar() {}\n+\n+// @has issue_22038/fn.baz.html \\\n+//      '//*[@class=\"rust fn\"]' 'pub extern \"system\" fn baz()'\n+pub extern \"system\" fn baz() {}"}, {"sha": "bfafc6be67c861ebfd18e7675e37fade680c205e", "filename": "src/test/rustdoc/issue-23106.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23106.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate foo;\n+// compile-flags:--test\n \n-pub use foo::bar;\n-\n-pub fn wut<T: bar::Bar>() {\n+/// ```\n+/// #\n+/// ```\n+pub fn main() {\n }", "previous_filename": "src/test/run-make/rustdoc-default-impl/bar.rs"}, {"sha": "722046723be7c4e96d1461755cc5ffd31e402f39", "filename": "src/test/rustdoc/issue-23207.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23207.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-23207-1.rs\n+// aux-build:issue-23207-2.rs\n+// ignore-android\n+\n+extern crate issue_23207_2;\n+\n+// @has issue_23207/fmt/index.html\n+// @count - '//*[@class=\"struct\"]' 1\n+pub use issue_23207_2::fmt;\n+"}, {"sha": "6582ca0eba9e7181ed77cf0b8cf2214a64674103", "filename": "src/test/rustdoc/issue-23511.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std, lang_items, core)]\n+#![no_std]\n+\n+extern crate core;\n+\n+pub mod str {\n+    #![doc(primitive = \"str\")]\n+\n+    #[lang = \"str\"]\n+    impl str {\n+        // @has search-index.js foo\n+        pub fn foo(&self) {}\n+    }\n+}"}, {"sha": "25374ac0c746b429f9496c9112ed800e3bed7c82", "filename": "src/test/rustdoc/issue-23744.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fissue-23744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23744.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+/// Example of rustdoc incorrectly parsing <code>```rust,should_panic</code>.\n+///\n+/// ```should_panic\n+/// fn main() { panic!(\"fee\"); }\n+/// ```\n+///\n+/// ```rust,should_panic\n+/// fn main() { panic!(\"fum\"); }\n+/// ```\n+pub fn foo() {}"}, {"sha": "e293675f5b05d0d94dedfd9c5bbdb3c30519c98f", "filename": "src/test/rustdoc/must-use.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fmust-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fmust-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmust-use.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type=\"lib\"]\n-\n-// @has lib/struct.Struct.html //pre '#[must_use]'\n+// @has must_use/struct.Struct.html //pre '#[must_use]'\n #[must_use]\n pub struct Struct {\n     field: i32,\n }\n \n-// @has lib/enum.Enum.html //pre '#[must_use = \"message\"]'\n+// @has must_use/enum.Enum.html //pre '#[must_use = \"message\"]'\n #[must_use = \"message\"]\n pub enum Enum {\n     Variant(i32),", "previous_filename": "src/test/run-make/rustdoc-must-use/lib.rs"}, {"sha": "aadabb15d1d2db9856cd586b9f10391363f1ce71", "filename": "src/test/rustdoc/negative-impl.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -10,13 +10,13 @@\n \n #![feature(optin_builtin_traits)]\n \n-// @matches foo/struct.Alpha.html '//pre' \"pub struct Alpha\"\n+// @matches negative_impl/struct.Alpha.html '//pre' \"pub struct Alpha\"\n pub struct Alpha;\n-// @matches foo/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n+// @matches negative_impl/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>(B);\n \n-// @matches foo/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !Send for Alpha\"\n+// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches foo/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !Send for Bravo<B>\"\n+// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}", "previous_filename": "src/test/run-make/rustdoc-negative-impl/foo.rs"}, {"sha": "7505d20566dbb45ef209d92c1d86b050393a6d80", "filename": "src/test/rustdoc/recursion1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursion1.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-recursion/foo.rs"}, {"sha": "7505d20566dbb45ef209d92c1d86b050393a6d80", "filename": "src/test/rustdoc/recursion2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursion2.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-recursion/foo2.rs"}, {"sha": "62a13f76ca4f08cb0d9433be25b979621714b19a", "filename": "src/test/rustdoc/recursion3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Frecursion3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursion3.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-recursion/foo3.rs"}, {"sha": "42469a21f22d0abbf25f3bfc31e5c76e396efde7", "filename": "src/test/rustdoc/search-index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "previous_filename": "src/test/run-make/rustdoc-search-index/index.rs"}, {"sha": "6ba7018bf226f7b0cd1ce550c14c63db5aa06058", "filename": "src/test/rustdoc/smoke.rs", "status": "renamed", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmoke.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,29 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// @has foo/index.html\n-#![crate_name = \"foo\"]\n+// @has smoke/index.html\n \n //! Very docs\n \n-// @has foo/bar/index.html\n+// @has smoke/bar/index.html\n pub mod bar {\n \n     /// So correct\n-    // @has foo/bar/baz/index.html\n+    // @has smoke/bar/baz/index.html\n     pub mod baz {\n         /// Much detail\n-        // @has foo/bar/baz/fn.baz.html\n+        // @has smoke/bar/baz/fn.baz.html\n         pub fn baz() { }\n     }\n \n     /// *wow*\n-    // @has foo/bar/trait.Doge.html\n+    // @has smoke/bar/trait.Doge.html\n     pub trait Doge { fn dummy(&self) { } }\n \n-    // @has foo/bar/struct.Foo.html\n+    // @has smoke/bar/struct.Foo.html\n     pub struct Foo { x: isize, y: usize }\n \n-    // @has foo/bar/fn.prawns.html\n+    // @has smoke/bar/fn.prawns.html\n     pub fn prawns((a, b): (isize, usize), Foo { x, y }: Foo) { }\n }", "previous_filename": "src/test/run-make/rustdoc-smoke/foo.rs"}, {"sha": "4d7dad64b47aef379fac833f8f7bea40b8995efb", "filename": "src/test/rustdoc/src-links.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+//! Dox\n+// @has src/foo/src-links.rs.html\n+// @has foo/index.html '//a/@href' '../src/foo/src-links.rs.html'\n+\n+#[path = \"src-links/mod.rs\"]\n+pub mod qux;\n+\n+// @has foo/bar/index.html '//a/@href' '../../src/foo/src-links.rs.html'\n+pub mod bar {\n+\n+    /// Dox\n+    // @has foo/bar/baz/index.html '//a/@href' '../../../src/foo/src-links.rs.html'\n+    pub mod baz {\n+        /// Dox\n+        // @has foo/bar/baz/fn.baz.html '//a/@href' '../../../src/foo/src-links.rs.html'\n+        pub fn baz() { }\n+    }\n+\n+    /// Dox\n+    // @has foo/bar/trait.Foobar.html '//a/@href' '../../src/foo/src-links.rs.html'\n+    pub trait Foobar { fn dummy(&self) { } }\n+\n+    // @has foo/bar/struct.Foo.html '//a/@href' '../../src/foo/src-links.rs.html'\n+    pub struct Foo { x: i32, y: u32 }\n+\n+    // @has foo/bar/fn.prawns.html '//a/@href' '../../src/foo/src-links.rs.html'\n+    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n+}\n+\n+/// Dox\n+// @has foo/fn.modfn.html '//a/@href' '../src/foo/src-links.rs.html'\n+pub fn modfn() { }\n+\n+// same hierarchy as above, but just for the submodule\n+\n+// @has src/foo/src-links/mod.rs.html\n+// @has foo/qux/index.html '//a/@href' '../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/index.html '//a/@href' '../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/baz/index.html '//a/@href' '../../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/baz/fn.baz.html '//a/@href' '../../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/trait.Foobar.html '//a/@href' '../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/struct.Foo.html '//a/@href' '../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/bar/fn.prawns.html '//a/@href' '../../../src/foo/src-links/mod.rs.html'\n+// @has foo/qux/fn.modfn.html '//a/@href' '../../src/foo/src-links/mod.rs.html'"}, {"sha": "eb5e737b369f907c64ecefd8cb374348f9925f96", "filename": "src/test/rustdoc/src-links/mod.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsrc-links%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fsrc-links%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links%2Fmod.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Dox\n+pub mod bar {\n+\n+    /// Dox\n+    pub mod baz {\n+        /// Dox\n+        pub fn baz() { }\n+    }\n+\n+    /// Dox\n+    pub trait Foobar { fn dummy(&self) { } }\n+\n+    pub struct Foo { x: i32, y: u32 }\n+\n+    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n+}\n+\n+/// Dox\n+pub fn modfn() { }"}, {"sha": "65a981353f0df6f0e3d2cf8d16b2785fa2159b2e", "filename": "src/test/rustdoc/viewpath-self.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fviewpath-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fviewpath-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fviewpath-self.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![crate_name = \"foo\"]\n+\n pub mod io {\n     pub trait Reader { fn dummy(&self) { } }\n }", "previous_filename": "src/test/run-make/rustdoc-viewpath-self/foo.rs"}, {"sha": "3ce91d63300074e66943dfbbc92f4abfad9df1bb", "filename": "src/test/rustdoc/where.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![crate_name = \"foo\"]\n+\n pub trait MyTrait { fn dummy(&self) { } }\n \n // @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A> where A: MyTrait\"", "previous_filename": "src/test/run-make/rustdoc-where/foo.rs"}]}