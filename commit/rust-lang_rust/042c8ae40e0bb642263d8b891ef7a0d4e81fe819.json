{"sha": "042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MmM4YWU0MGUwYmI2NDIyNjNkOGI4OTFlZjdhMGQ0ZTgxZmU4MTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-11T03:16:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "syntax: Fix printing INT64_MIN\n\nIntegers are always parsed as a u64 in libsyntax, but they're stored as i64. The\nparser and pretty printer both printed an i64 instead of u64, sometimes\nintroducing an extra negative sign.", "tree": {"sha": "295aff8b5b6d876551a956fdf5e565a448b9dda9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295aff8b5b6d876551a956fdf5e565a448b9dda9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "html_url": "https://github.com/rust-lang/rust/commit/042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12375304524ffe732752f5a29551c2caf0b14b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/12375304524ffe732752f5a29551c2caf0b14b4f", "html_url": "https://github.com/rust-lang/rust/commit/12375304524ffe732752f5a29551c2caf0b14b4f"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "f18f39ac925f51a5c378ff652af84f7fa7cdc232", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -355,26 +355,22 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> StrBuf {\n       ty_bot => \"!\".to_strbuf(),\n       ty_bool => \"bool\".to_strbuf(),\n       ty_char => \"char\".to_strbuf(),\n-      ty_int(t) => ast_util::int_ty_to_str(t, None),\n-      ty_uint(t) => ast_util::uint_ty_to_str(t, None),\n-      ty_float(t) => ast_util::float_ty_to_str(t),\n-      ty_box(typ) => {\n-          (\"@\".to_owned() + ty_to_str(cx, typ).as_slice()).to_strbuf()\n-      }\n-      ty_uniq(typ) => {\n-          (\"~\".to_owned() + ty_to_str(cx, typ).as_slice()).to_strbuf()\n-      }\n-      ty_ptr(ref tm) => {\n-          (\"*\".to_owned() + mt_to_str(cx, tm).as_slice()).to_strbuf()\n-      }\n+      ty_int(t) => ast_util::int_ty_to_str(t, None,\n+                                           ast_util::AutoSuffix).to_strbuf(),\n+      ty_uint(t) => ast_util::uint_ty_to_str(t, None,\n+                                             ast_util::AutoSuffix).to_strbuf(),\n+      ty_float(t) => ast_util::float_ty_to_str(t).to_strbuf(),\n+      ty_box(typ) => \"@\".to_strbuf() + ty_to_str(cx, typ),\n+      ty_uniq(typ) => \"~\".to_strbuf() + ty_to_str(cx, typ),\n+      ty_ptr(ref tm) => \"*\".to_strbuf() + mt_to_str(cx, tm),\n       ty_rptr(r, ref tm) => {\n           let mut buf = region_ptr_to_str(cx, r);\n           buf.push_str(mt_to_str(cx, tm).as_slice());\n           buf\n       }\n       ty_tup(ref elems) => {\n         let strs: Vec<StrBuf> = elems.iter().map(|elem| ty_to_str(cx, *elem)).collect();\n-        (\"(\".to_owned() + strs.connect(\",\") + \")\").to_strbuf()\n+        (\"(\".to_strbuf() + strs.connect(\",\") + \")\").to_strbuf()\n       }\n       ty_closure(ref f) => {\n           closure_to_str(cx, *f)"}, {"sha": "e5ef31a95a38b5bc3c79cecdbbf9e314cc77c35d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -711,7 +711,8 @@ pub enum IntTy {\n \n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f.buf, \"{}\", ast_util::int_ty_to_str(*self, None))\n+        write!(f.buf, \"{}\",\n+               ast_util::int_ty_to_str(*self, None, ast_util::AutoSuffix))\n     }\n }\n \n@@ -726,7 +727,8 @@ pub enum UintTy {\n \n impl fmt::Show for UintTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f.buf, \"{}\", ast_util::uint_ty_to_str(*self, None))\n+        write!(f.buf, \"{}\",\n+               ast_util::uint_ty_to_str(*self, None, ast_util::AutoSuffix))\n     }\n }\n "}, {"sha": "74fc43e521b65e5a8728520e91f1bda4ff0efa2f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -132,11 +132,19 @@ pub fn is_path(e: @Expr) -> bool {\n     return match e.node { ExprPath(_) => true, _ => false };\n }\n \n+pub enum SuffixMode {\n+    ForceSuffix,\n+    AutoSuffix,\n+}\n+\n // Get a string representation of a signed int type, with its value.\n // We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n-pub fn int_ty_to_str(t: IntTy, val: Option<i64>) -> StrBuf {\n+pub fn int_ty_to_str(t: IntTy, val: Option<i64>, mode: SuffixMode) -> StrBuf {\n     let s = match t {\n-        TyI if val.is_some() => \"\",\n+        TyI if val.is_some() => match mode {\n+            AutoSuffix => \"\",\n+            ForceSuffix => \"i\",\n+        },\n         TyI => \"int\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n@@ -145,7 +153,7 @@ pub fn int_ty_to_str(t: IntTy, val: Option<i64>) -> StrBuf {\n     };\n \n     match val {\n-        Some(n) => format!(\"{}{}\", n, s).to_strbuf(),\n+        Some(n) => format!(\"{}{}\", n as u64, s).to_strbuf(),\n         None => s.to_strbuf()\n     }\n }\n@@ -161,9 +169,12 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n \n // Get a string representation of an unsigned int type, with its value.\n // We want to avoid \"42uint\" in favor of \"42u\"\n-pub fn uint_ty_to_str(t: UintTy, val: Option<u64>) -> StrBuf {\n+pub fn uint_ty_to_str(t: UintTy, val: Option<u64>, mode: SuffixMode) -> StrBuf {\n     let s = match t {\n-        TyU if val.is_some() => \"u\",\n+        TyU if val.is_some() => match mode {\n+            AutoSuffix => \"\",\n+            ForceSuffix => \"u\",\n+        },\n         TyU => \"uint\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\","}, {"sha": "68ce8cb2bc123104c9435fa7c103e170d7460c9b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -203,9 +203,11 @@ pub fn to_str(t: &Token) -> StrBuf {\n           res.push_char('\\'');\n           res\n       }\n-      LIT_INT(i, t) => ast_util::int_ty_to_str(t, Some(i)),\n-      LIT_UINT(u, t) => ast_util::uint_ty_to_str(t, Some(u)),\n-      LIT_INT_UNSUFFIXED(i) => { i.to_str().to_strbuf() }\n+      LIT_INT(i, t) => ast_util::int_ty_to_str(t, Some(i),\n+                                               ast_util::ForceSuffix),\n+      LIT_UINT(u, t) => ast_util::uint_ty_to_str(t, Some(u),\n+                                                 ast_util::ForceSuffix),\n+      LIT_INT_UNSUFFIXED(i) => { (i as u64).to_str().to_strbuf() }\n       LIT_FLOAT(s, t) => {\n         let mut body = StrBuf::from_str(get_ident(s).get());\n         if body.as_slice().ends_with(\".\") {"}, {"sha": "0b6efcd4f40bb40bbe436264b5de7061a58956f3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -2232,11 +2232,13 @@ impl<'a> State<'a> {\n             }\n             ast::LitInt(i, t) => {\n                 word(&mut self.s,\n-                     ast_util::int_ty_to_str(t, Some(i)).as_slice())\n+                     ast_util::int_ty_to_str(t, Some(i),\n+                                             ast_util::AutoSuffix).as_slice())\n             }\n             ast::LitUint(u, t) => {\n                 word(&mut self.s,\n-                     ast_util::uint_ty_to_str(t, Some(u)).as_slice())\n+                     ast_util::uint_ty_to_str(t, Some(u),\n+                                              ast_util::AutoSuffix).as_slice())\n             }\n             ast::LitIntUnsuffixed(i) => {\n                 word(&mut self.s, format!(\"{}\", i))"}, {"sha": "3b2618c060d009cc40e93a9d69a5284835ed8d94", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042c8ae40e0bb642263d8b891ef7a0d4e81fe819/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "patch": "@@ -16,4 +16,5 @@ pub fn main() {\n \n     assert_eq!(-2147483648i32 - 1i32, 2147483647i32);\n     assert_eq!(-9223372036854775808i64 - 1i64, 9223372036854775807i64);\n+    assert_eq!(-9223372036854775808 - 1, 9223372036854775807);\n }"}]}