{"sha": "e444346b12bb7ed5176878522849e9947d518762", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDQzNDZiMTJiYjdlZDUxNzY4Nzg1MjI4NDllOTk0N2Q1MTg3NjI=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T16:15:25Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:24Z"}, "message": "List missing constructors in an almost empty match\n\nActually empty matches are still handled by a different code path", "tree": {"sha": "32e5f08da8bf3cda41dc8e92518cc4d063fd3139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32e5f08da8bf3cda41dc8e92518cc4d063fd3139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e444346b12bb7ed5176878522849e9947d518762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e444346b12bb7ed5176878522849e9947d518762", "html_url": "https://github.com/rust-lang/rust/commit/e444346b12bb7ed5176878522849e9947d518762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e444346b12bb7ed5176878522849e9947d518762/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3b7d205589f49280e26e2f8e1b37719dee158a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3b7d205589f49280e26e2f8e1b37719dee158a", "html_url": "https://github.com/rust-lang/rust/commit/5a3b7d205589f49280e26e2f8e1b37719dee158a"}], "stats": {"total": 192, "additions": 115, "deletions": 77}, "files": [{"sha": "0e8313a50bccf2758c0d8f1d32291bc75a87c81b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -770,6 +770,10 @@ impl<'tcx> Constructor<'tcx> {\n     // Returns the set of constructors covered by `self` but not by\n     // anything in `other_ctors`.\n     fn subtract_ctors(&self, other_ctors: &Vec<Constructor<'tcx>>) -> Vec<Constructor<'tcx>> {\n+        if other_ctors.is_empty() {\n+            return vec![self.clone()];\n+        }\n+\n         match self {\n             // Those constructors can only match themselves.\n             Single | Variant(_) | ConstantValue(..) | FloatRange(..) => {\n@@ -1614,6 +1618,7 @@ pub fn is_useful<'p, 'tcx>(\n     v: &PatStack<'p, 'tcx>,\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n+    is_top_level: bool,\n ) -> Usefulness<'tcx, 'p> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:#?}, {:#?})\", matrix, v);\n@@ -1641,7 +1646,7 @@ pub fn is_useful<'p, 'tcx>(\n         let mut unreachable_pats = Vec::new();\n         let mut any_is_useful = false;\n         for v in vs {\n-            let res = is_useful(cx, &matrix, &v, witness_preference, hir_id);\n+            let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, false);\n             match res {\n                 Useful(pats) => {\n                     any_is_useful = true;\n@@ -1741,7 +1746,7 @@ pub fn is_useful<'p, 'tcx>(\n         } else {\n             let matrix = matrix.specialize_wildcard();\n             let v = v.to_tail();\n-            let usefulness = is_useful(cx, &matrix, &v, witness_preference, hir_id);\n+            let usefulness = is_useful(cx, &matrix, &v, witness_preference, hir_id, false);\n \n             // In this case, there's at least one \"free\"\n             // constructor that is only matched against by\n@@ -1770,7 +1775,9 @@ pub fn is_useful<'p, 'tcx>(\n             // `(<direction-1>, <direction-2>, true)` - we are\n             // satisfied with `(_, _, true)`. In this case,\n             // `used_ctors` is empty.\n-            if missing_ctors.all_ctors_are_missing() {\n+            // The exception is: if we are at the top-level, for example in an empty match, we\n+            // prefer reporting the list of constructors instead of just `_`.\n+            if missing_ctors.all_ctors_are_missing() && !is_top_level {\n                 // All constructors are unused. Add a wild pattern\n                 // rather than each individual constructor.\n                 usefulness.apply_wildcard(pcx.ty)\n@@ -1802,7 +1809,7 @@ fn is_useful_specialized<'p, 'tcx>(\n         cx.pattern_arena.alloc_from_iter(ctor.wildcard_subpatterns(cx, lty));\n     let matrix = matrix.specialize_constructor(cx, &ctor, ctor_wild_subpatterns);\n     v.specialize_constructor(cx, &ctor, ctor_wild_subpatterns)\n-        .map(|v| is_useful(cx, &matrix, &v, witness_preference, hir_id))\n+        .map(|v| is_useful(cx, &matrix, &v, witness_preference, hir_id, false))\n         .map(|u| u.apply_constructor(cx, &ctor, lty))\n         .unwrap_or(NotUseful)\n }"}, {"sha": "4424ddf1100ff600ad9900e9f58ab6561b78aba6", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -388,7 +388,7 @@ fn check_arms<'p, 'tcx>(\n     for (arm_index, (pat, hir_pat, has_guard)) in arms.iter().enumerate() {\n         let v = PatStack::from_pattern(pat);\n \n-        match is_useful(cx, &seen, &v, LeaveOutWitness, hir_pat.hir_id) {\n+        match is_useful(cx, &seen, &v, LeaveOutWitness, hir_pat.hir_id, true) {\n             NotUseful => {\n                 match source {\n                     hir::MatchSource::IfDesugar { .. } | hir::MatchSource::WhileDesugar => bug!(),\n@@ -476,7 +476,8 @@ fn check_not_useful<'p, 'tcx>(\n     hir_id: HirId,\n ) -> Result<(), Vec<super::Pat<'tcx>>> {\n     let wild_pattern = cx.pattern_arena.alloc(super::Pat::wildcard_from_ty(ty));\n-    match is_useful(cx, matrix, &PatStack::from_pattern(wild_pattern), ConstructWitness, hir_id) {\n+    let v = PatStack::from_pattern(wild_pattern);\n+    match is_useful(cx, matrix, &v, ConstructWitness, hir_id, true) {\n         NotUseful => Ok(()), // This is good, wildcard pattern isn't reachable.\n         UsefulWithWitness(pats) => Err(if pats.is_empty() {\n             bug!(\"Exhaustiveness check returned no witnesses\")"}, {"sha": "e479877e61f292ac2ea99a21aa4e560f10efdb38", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -3,20 +3,26 @@\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n-struct NonEmptyStruct(bool);\n-union NonEmptyUnion1 {\n+struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+union NonEmptyUnion1 { //~ `NonEmptyUnion1` defined here\n     foo: (),\n }\n-union NonEmptyUnion2 {\n+union NonEmptyUnion2 { //~ `NonEmptyUnion2` defined here\n     foo: (),\n     bar: (),\n }\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n-    Foo(bool), //~ variant not covered\n+    Foo(bool),\n+    //~^ variant not covered\n+    //~| not covered\n }\n enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n-    Foo(bool), //~ variant not covered\n-    Bar, //~ variant not covered\n+    Foo(bool),\n+    //~^ variant not covered\n+    //~| not covered\n+    Bar,\n+    //~^ variant not covered\n+    //~| not covered\n }\n enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n@@ -71,17 +77,17 @@ fn main() {\n     //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n \n     match_false!(0u8);\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `0u8..=std::u8::MAX` not covered\n     match_false!(NonEmptyStruct(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyStruct(_)` not covered\n     match_false!((NonEmptyUnion1 { foo: () }));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyUnion1 { .. }` not covered\n     match_false!((NonEmptyUnion2 { foo: () }));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyUnion2 { .. }` not covered\n     match_false!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `Foo(_)` not covered\n     match_false!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `Foo(_)` and `Bar` not covered\n     match_false!(NonEmptyEnum5::V1);\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n }"}, {"sha": "403cbf181e57085f04501d5a2911bee5d8f66602", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -103,26 +103,26 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `0u8..=std::u8::MAX` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:73:18\n    |\n LL |     match_false!(0u8);\n-   |                  ^^^ pattern `_` not covered\n+   |                  ^^^ pattern `0u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:75:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n ...\n LL |     match_false!(NonEmptyStruct(true));\n-   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:77:18\n    |\n LL | / union NonEmptyUnion1 {\n@@ -131,11 +131,11 @@ LL | | }\n    | |_- `NonEmptyUnion1` defined here\n ...\n LL |       match_false!((NonEmptyUnion1 { foo: () }));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n    |\n LL | / union NonEmptyUnion2 {\n@@ -145,38 +145,41 @@ LL | | }\n    | |_- `NonEmptyUnion2` defined here\n ...\n LL |       match_false!((NonEmptyUnion2 { foo: () }));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n+   | |     --- not covered\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n LL |       match_false!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n+   | |     --- not covered\n LL | |     Bar,\n+   | |     --- not covered\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n LL |       match_false!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n    |\n LL | / enum NonEmptyEnum5 {\n@@ -185,7 +188,7 @@ LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n LL |       match_false!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "8db88faa17df6edf9f7aebdf6e44aa2b786bad10", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -2,20 +2,26 @@\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n-struct NonEmptyStruct(bool);\n-union NonEmptyUnion1 {\n+struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+union NonEmptyUnion1 { //~ `NonEmptyUnion1` defined here\n     foo: (),\n }\n-union NonEmptyUnion2 {\n+union NonEmptyUnion2 { //~ `NonEmptyUnion2` defined here\n     foo: (),\n     bar: (),\n }\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n-    Foo(bool), //~ variant not covered\n+    Foo(bool),\n+    //~^ variant not covered\n+    //~| not covered\n }\n enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n-    Foo(bool), //~ variant not covered\n-    Bar, //~ variant not covered\n+    Foo(bool),\n+    //~^ variant not covered\n+    //~| not covered\n+    Bar,\n+    //~^ variant not covered\n+    //~| not covered\n }\n enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n@@ -70,17 +76,17 @@ fn main() {\n     //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n \n     match_false!(0u8);\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `0u8..=std::u8::MAX` not covered\n     match_false!(NonEmptyStruct(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyStruct(_)` not covered\n     match_false!((NonEmptyUnion1 { foo: () }));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyUnion1 { .. }` not covered\n     match_false!((NonEmptyUnion2 { foo: () }));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `NonEmptyUnion2 { .. }` not covered\n     match_false!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `Foo(_)` not covered\n     match_false!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `Foo(_)` and `Bar` not covered\n     match_false!(NonEmptyEnum5::V1);\n-    //~^ ERROR `_` not covered\n+    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n }"}, {"sha": "2a77b6113f65a1d5888dbec7eaf14db05f9ba017", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:39:18\n+  --> $DIR/match-empty.rs:45:18\n    |\n LL | enum Foo {}\n    | ----------- `Foo` defined here\n@@ -10,43 +10,45 @@ LL |     match_false!(x); // Not detected as unreachable nor exhaustive.\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:57:18\n+  --> $DIR/match-empty.rs:63:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty.rs:59:18\n+  --> $DIR/match-empty.rs:65:18\n    |\n LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty.rs:61:18\n+  --> $DIR/match-empty.rs:67:18\n    |\n LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty.rs:63:18\n+  --> $DIR/match-empty.rs:69:18\n    |\n LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty.rs:65:18\n+  --> $DIR/match-empty.rs:71:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n    | |     --- variant not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n@@ -56,13 +58,17 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty.rs:67:18\n+  --> $DIR/match-empty.rs:73:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n    | |     --- variant not covered\n+LL | |\n+LL | |\n LL | |     Bar,\n    | |     --- variant not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n@@ -72,7 +78,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty.rs:69:18\n+  --> $DIR/match-empty.rs:75:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -84,40 +90,40 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:72:18\n+error[E0004]: non-exhaustive patterns: `0u8..=std::u8::MAX` not covered\n+  --> $DIR/match-empty.rs:78:18\n    |\n LL |     match_false!(0u8);\n-   |                  ^^^ pattern `_` not covered\n+   |                  ^^^ pattern `0u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:74:18\n+error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n+  --> $DIR/match-empty.rs:80:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n ...\n LL |     match_false!(NonEmptyStruct(true));\n-   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:76:18\n+error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n+  --> $DIR/match-empty.rs:82:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n LL | | }\n    | |_- `NonEmptyUnion1` defined here\n ...\n LL |       match_false!((NonEmptyUnion1 { foo: () }));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:78:18\n+error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n+  --> $DIR/match-empty.rs:84:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -126,47 +132,56 @@ LL | | }\n    | |_- `NonEmptyUnion2` defined here\n ...\n LL |       match_false!((NonEmptyUnion2 { foo: () }));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:80:18\n+error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+  --> $DIR/match-empty.rs:86:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n LL |       match_false!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:82:18\n+error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+  --> $DIR/match-empty.rs:88:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | |     Bar,\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n LL |       match_false!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:84:18\n+error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+  --> $DIR/match-empty.rs:90:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n LL |       match_false!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "06ec0ba7619f242c839eb3e9884b13990497a7b0", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e444346b12bb7ed5176878522849e9947d518762/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=e444346b12bb7ed5176878522849e9947d518762", "patch": "@@ -6,11 +6,11 @@ LL |     match 0 { 1 => () }\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `std::i32::MIN..=std::i32::MAX` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n    |\n LL |     match 0 { 0 if false => () }\n-   |           ^ pattern `_` not covered\n+   |           ^ pattern `std::i32::MIN..=std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}