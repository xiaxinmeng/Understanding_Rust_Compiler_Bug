{"sha": "2fc22901730f35405d2bdfe33f88d7b3c6b14304", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzIyOTAxNzMwZjM1NDA1ZDJiZGZlMzNmODhkN2IzYzZiMTQzMDQ=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-05T14:03:03Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-05T14:03:03Z"}, "message": "replace AST visitors with macro", "tree": {"sha": "c3565f17b7db1625d3c8311432d0bed258b58ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3565f17b7db1625d3c8311432d0bed258b58ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc22901730f35405d2bdfe33f88d7b3c6b14304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc22901730f35405d2bdfe33f88d7b3c6b14304", "html_url": "https://github.com/rust-lang/rust/commit/2fc22901730f35405d2bdfe33f88d7b3c6b14304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc22901730f35405d2bdfe33f88d7b3c6b14304/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf869b4d2dac09df17609edf6e67c1611b71dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf869b4d2dac09df17609edf6e67c1611b71dc5", "html_url": "https://github.com/rust-lang/rust/commit/dbf869b4d2dac09df17609edf6e67c1611b71dc5"}], "stats": {"total": 631, "additions": 334, "deletions": 297}, "files": [{"sha": "3e936e3ecbde65ed9894a3452c5f2552f701d00b", "filename": "crates/ra_ide_api/src/completion/complete_fn_param.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -1,9 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::{\n-    algo::visit::{visitor_ctx, VisitorCtx},\n-    ast, AstNode,\n-};\n+use ra_syntax::{ast, match_ast, AstNode};\n use rustc_hash::FxHashMap;\n \n use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n@@ -19,10 +16,13 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n     let mut params = FxHashMap::default();\n     for node in ctx.token.parent().ancestors() {\n-        let _ = visitor_ctx(&mut params)\n-            .visit::<ast::SourceFile, _>(process)\n-            .visit::<ast::ItemList, _>(process)\n-            .accept(&node);\n+        match_ast! {\n+            match node {\n+                ast::SourceFile(it) => { process(it, &mut params) },\n+                ast::ItemList(it) => { process(it, &mut params) },\n+                _ => (),\n+            }\n+        }\n     }\n     params\n         .into_iter()"}, {"sha": "48c688a08a4cd25e53400275cfa33f860743a17e", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -1,9 +1,8 @@\n //! FIXME: write short doc here\n \n use ra_syntax::{\n-    algo::visit::{visitor, Visitor},\n     ast::{self, LoopBodyOwner},\n-    AstNode,\n+    match_ast, AstNode,\n     SyntaxKind::*,\n     SyntaxToken,\n };\n@@ -84,12 +83,15 @@ fn is_in_loop_body(leaf: &SyntaxToken) -> bool {\n         if node.kind() == FN_DEF || node.kind() == LAMBDA_EXPR {\n             break;\n         }\n-        let loop_body = visitor()\n-            .visit::<ast::ForExpr, _>(|it| it.loop_body())\n-            .visit::<ast::WhileExpr, _>(|it| it.loop_body())\n-            .visit::<ast::LoopExpr, _>(|it| it.loop_body())\n-            .accept(&node);\n-        if let Some(Some(body)) = loop_body {\n+        let loop_body = match_ast! {\n+            match node {\n+                ast::ForExpr(it) => { it.loop_body() },\n+                ast::WhileExpr(it) => { it.loop_body() },\n+                ast::LoopExpr(it) => { it.loop_body() },\n+                _ => None,\n+            }\n+        };\n+        if let Some(body) = loop_body {\n             if leaf.text_range().is_subrange(&body.syntax().text_range()) {\n                 return true;\n             }"}, {"sha": "d0b1a8a2a7fd38d1cf69ff415bbb65f1db23a90c", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -3,9 +3,8 @@\n use hir::{AssocItem, FieldSource, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    algo::visit::{visitor, Visitor},\n     ast::{self, DocCommentsOwner},\n-    AstNode, AstPtr, SmolStr,\n+    match_ast, AstNode, AstPtr, SmolStr,\n     SyntaxKind::{self, NAME},\n     SyntaxNode, TextRange,\n };\n@@ -308,19 +307,22 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n     let parse = db.parse(symbol.file_id);\n     let node = symbol.ptr.to_node(parse.tree().syntax());\n \n-    visitor()\n-        .visit(|it: ast::FnDef| it.doc_comment_text())\n-        .visit(|it: ast::StructDef| it.doc_comment_text())\n-        .visit(|it: ast::EnumDef| it.doc_comment_text())\n-        .visit(|it: ast::TraitDef| it.doc_comment_text())\n-        .visit(|it: ast::Module| it.doc_comment_text())\n-        .visit(|it: ast::TypeAliasDef| it.doc_comment_text())\n-        .visit(|it: ast::ConstDef| it.doc_comment_text())\n-        .visit(|it: ast::StaticDef| it.doc_comment_text())\n-        .visit(|it: ast::RecordFieldDef| it.doc_comment_text())\n-        .visit(|it: ast::EnumVariant| it.doc_comment_text())\n-        .visit(|it: ast::MacroCall| it.doc_comment_text())\n-        .accept(&node)?\n+    match_ast! {\n+        match node {\n+            ast::FnDef(it) => { it.doc_comment_text() },\n+            ast::StructDef(it) => { it.doc_comment_text() },\n+            ast::EnumDef(it) => { it.doc_comment_text() },\n+            ast::TraitDef(it) => { it.doc_comment_text() },\n+            ast::Module(it) => { it.doc_comment_text() },\n+            ast::TypeAliasDef(it) => { it.doc_comment_text() },\n+            ast::ConstDef(it) => { it.doc_comment_text() },\n+            ast::StaticDef(it) => { it.doc_comment_text() },\n+            ast::RecordFieldDef(it) => { it.doc_comment_text() },\n+            ast::EnumVariant(it) => { it.doc_comment_text() },\n+            ast::MacroCall(it) => { it.doc_comment_text() },\n+            _ => None,\n+        }\n+    }\n }\n \n /// Get a description of a symbol.\n@@ -330,16 +332,19 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n     let parse = db.parse(symbol.file_id);\n     let node = symbol.ptr.to_node(parse.tree().syntax());\n \n-    visitor()\n-        .visit(|node: ast::FnDef| node.short_label())\n-        .visit(|node: ast::StructDef| node.short_label())\n-        .visit(|node: ast::EnumDef| node.short_label())\n-        .visit(|node: ast::TraitDef| node.short_label())\n-        .visit(|node: ast::Module| node.short_label())\n-        .visit(|node: ast::TypeAliasDef| node.short_label())\n-        .visit(|node: ast::ConstDef| node.short_label())\n-        .visit(|node: ast::StaticDef| node.short_label())\n-        .visit(|node: ast::RecordFieldDef| node.short_label())\n-        .visit(|node: ast::EnumVariant| node.short_label())\n-        .accept(&node)?\n+    match_ast! {\n+        match node {\n+            ast::FnDef(it) => { it.short_label() },\n+            ast::StructDef(it) => { it.short_label() },\n+            ast::EnumDef(it) => { it.short_label() },\n+            ast::TraitDef(it) => { it.short_label() },\n+            ast::Module(it) => { it.short_label() },\n+            ast::TypeAliasDef(it) => { it.short_label() },\n+            ast::ConstDef(it) => { it.short_label() },\n+            ast::StaticDef(it) => { it.short_label() },\n+            ast::RecordFieldDef(it) => { it.short_label() },\n+            ast::EnumVariant(it) => { it.short_label() },\n+            _ => None,\n+        }\n+    }\n }"}, {"sha": "ddd8b7b203d43bf8fcf31a19321896cda7f821cc", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 59, "deletions": 57, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -3,9 +3,8 @@\n use crate::TextRange;\n \n use ra_syntax::{\n-    algo::visit::{visitor, Visitor},\n     ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n-    AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n+    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n };\n \n #[derive(Debug, Clone)]\n@@ -101,63 +100,66 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n         })\n     }\n \n-    visitor()\n-        .visit(|fn_def: ast::FnDef| {\n-            let mut detail = String::from(\"fn\");\n-            if let Some(type_param_list) = fn_def.type_param_list() {\n-                collapse_ws(type_param_list.syntax(), &mut detail);\n-            }\n-            if let Some(param_list) = fn_def.param_list() {\n-                collapse_ws(param_list.syntax(), &mut detail);\n-            }\n-            if let Some(ret_type) = fn_def.ret_type() {\n-                detail.push_str(\" \");\n-                collapse_ws(ret_type.syntax(), &mut detail);\n-            }\n-\n-            decl_with_detail(fn_def, Some(detail))\n-        })\n-        .visit(decl::<ast::StructDef>)\n-        .visit(decl::<ast::EnumDef>)\n-        .visit(decl::<ast::EnumVariant>)\n-        .visit(decl::<ast::TraitDef>)\n-        .visit(decl::<ast::Module>)\n-        .visit(|td: ast::TypeAliasDef| {\n-            let ty = td.type_ref();\n-            decl_with_type_ref(td, ty)\n-        })\n-        .visit(decl_with_ascription::<ast::RecordFieldDef>)\n-        .visit(decl_with_ascription::<ast::ConstDef>)\n-        .visit(decl_with_ascription::<ast::StaticDef>)\n-        .visit(|im: ast::ImplBlock| {\n-            let target_type = im.target_type()?;\n-            let target_trait = im.target_trait();\n-            let label = match target_trait {\n-                None => format!(\"impl {}\", target_type.syntax().text()),\n-                Some(t) => {\n-                    format!(\"impl {} for {}\", t.syntax().text(), target_type.syntax().text(),)\n+    match_ast! {\n+        match node {\n+            ast::FnDef(it) => {\n+                let mut detail = String::from(\"fn\");\n+                if let Some(type_param_list) = it.type_param_list() {\n+                    collapse_ws(type_param_list.syntax(), &mut detail);\n+                }\n+                if let Some(param_list) = it.param_list() {\n+                    collapse_ws(param_list.syntax(), &mut detail);\n+                }\n+                if let Some(ret_type) = it.ret_type() {\n+                    detail.push_str(\" \");\n+                    collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n-            };\n \n-            let node = StructureNode {\n-                parent: None,\n-                label,\n-                navigation_range: target_type.syntax().text_range(),\n-                node_range: im.syntax().text_range(),\n-                kind: im.syntax().kind(),\n-                detail: None,\n-                deprecated: false,\n-            };\n-            Some(node)\n-        })\n-        .visit(|mc: ast::MacroCall| {\n-            let first_token = mc.syntax().first_token().unwrap();\n-            if first_token.text().as_str() != \"macro_rules\" {\n-                return None;\n-            }\n-            decl(mc)\n-        })\n-        .accept(&node)?\n+                decl_with_detail(it, Some(detail))\n+            },\n+            ast::StructDef(it) => { decl(it) },\n+            ast::EnumDef(it) => { decl(it) },\n+            ast::EnumVariant(it) => { decl(it) },\n+            ast::TraitDef(it) => { decl(it) },\n+            ast::Module(it) => { decl(it) },\n+            ast::TypeAliasDef(it) => {\n+                let ty = it.type_ref();\n+                decl_with_type_ref(it, ty)\n+            },\n+            ast::RecordFieldDef(it) => { decl_with_ascription(it) },\n+            ast::ConstDef(it) => { decl_with_ascription(it) },\n+            ast::StaticDef(it) => { decl_with_ascription(it) },\n+            ast::ImplBlock(it) => {\n+                let target_type = it.target_type()?;\n+                let target_trait = it.target_trait();\n+                let label = match target_trait {\n+                    None => format!(\"impl {}\", target_type.syntax().text()),\n+                    Some(t) => {\n+                        format!(\"impl {} for {}\", t.syntax().text(), target_type.syntax().text(),)\n+                    }\n+                };\n+\n+                let node = StructureNode {\n+                    parent: None,\n+                    label,\n+                    navigation_range: target_type.syntax().text_range(),\n+                    node_range: it.syntax().text_range(),\n+                    kind: it.syntax().kind(),\n+                    detail: None,\n+                    deprecated: false,\n+                };\n+                Some(node)\n+            },\n+            ast::MacroCall(it) => {\n+                let first_token = it.syntax().first_token().unwrap();\n+                if first_token.text().as_str() != \"macro_rules\" {\n+                    return None;\n+                }\n+                decl(it)\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "41a88314fb287e38ae560c325a26c0d2948d82d7", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 95, "deletions": 90, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -2,12 +2,9 @@\n \n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    algo::{\n-        find_node_at_offset,\n-        visit::{visitor, Visitor},\n-    },\n+    algo::find_node_at_offset,\n     ast::{self, DocCommentsOwner},\n-    AstNode, SyntaxNode,\n+    match_ast, AstNode, SyntaxNode,\n };\n \n use crate::{\n@@ -114,91 +111,99 @@ pub(crate) fn name_definition(\n }\n \n fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n-    visitor()\n-        .visit(|node: ast::StructDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::EnumDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::EnumVariant| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::FnDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::TypeAliasDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::ConstDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::StaticDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::TraitDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::RecordFieldDef| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::Module| {\n-            NavigationTarget::from_named(\n-                file_id,\n-                &node,\n-                node.doc_comment_text(),\n-                node.short_label(),\n-            )\n-        })\n-        .visit(|node: ast::MacroCall| {\n-            NavigationTarget::from_named(file_id, &node, node.doc_comment_text(), None)\n-        })\n-        .accept(node)\n+    match_ast! {\n+        match node {\n+            ast::StructDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::EnumDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::EnumVariant(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::FnDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::TypeAliasDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::ConstDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::StaticDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::TraitDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::RecordFieldDef(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::Module(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    it.short_label(),\n+                ))\n+            },\n+            ast::MacroCall(it) => {\n+                Some(NavigationTarget::from_named(\n+                    file_id,\n+                    &it,\n+                    it.doc_comment_text(),\n+                    None,\n+                ))\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "24b161c5c114b04bcbae07ce7349ee3cd7e32019", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -3,12 +3,9 @@\n use hir::{Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::{\n-        ancestors_at_offset, find_covering_element, find_node_at_offset,\n-        visit::{visitor, Visitor},\n-    },\n+    algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n     ast::{self, DocCommentsOwner},\n-    AstNode,\n+    match_ast, AstNode,\n };\n \n use crate::{\n@@ -178,37 +175,45 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n         if let Some(parent) = name.syntax().parent() {\n-            let text = visitor()\n-                .visit(|node: ast::StructDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::EnumDef| hover_text(node.doc_comment_text(), node.short_label()))\n-                .visit(|node: ast::EnumVariant| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::FnDef| hover_text(node.doc_comment_text(), node.short_label()))\n-                .visit(|node: ast::TypeAliasDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::ConstDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::StaticDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::TraitDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::RecordFieldDef| {\n-                    hover_text(node.doc_comment_text(), node.short_label())\n-                })\n-                .visit(|node: ast::Module| hover_text(node.doc_comment_text(), node.short_label()))\n-                .visit(|node: ast::MacroCall| hover_text(node.doc_comment_text(), None))\n-                .accept(&parent);\n-\n-            if let Some(text) = text {\n-                res.extend(text);\n-            }\n+            let text = match_ast! {\n+                match parent {\n+                    ast::StructDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::EnumDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::EnumVariant(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::FnDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::TypeAliasDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::ConstDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::StaticDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::TraitDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::RecordFieldDef(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::Module(it) => {\n+                        hover_text(it.doc_comment_text(), it.short_label())\n+                    },\n+                    ast::MacroCall(it) => {\n+                        hover_text(it.doc_comment_text(), None)\n+                    },\n+                    _ => None,\n+                }\n+            };\n+            res.extend(text);\n         }\n \n         if !res.is_empty() && range.is_none() {"}, {"sha": "f1c0dc16423cb85a8caf124895c20904da482daf", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -3,9 +3,8 @@\n use crate::{db::RootDatabase, FileId};\n use hir::{HirDisplay, SourceAnalyzer, Ty};\n use ra_syntax::{\n-    algo::visit::{visitor, Visitor},\n     ast::{self, AstNode, TypeAscriptionOwner},\n-    SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n+    match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -33,55 +32,58 @@ fn get_inlay_hints(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<Vec<InlayHint>> {\n-    visitor()\n-        .visit(|let_statement: ast::LetStmt| {\n-            if let_statement.ascribed_type().is_some() {\n-                return None;\n-            }\n-            let pat = let_statement.pat()?;\n-            let analyzer = SourceAnalyzer::new(db, file_id, let_statement.syntax(), None);\n-            Some(get_pat_type_hints(db, &analyzer, pat, false))\n-        })\n-        .visit(|closure_parameter: ast::LambdaExpr| {\n-            let analyzer = SourceAnalyzer::new(db, file_id, closure_parameter.syntax(), None);\n-            closure_parameter.param_list().map(|param_list| {\n-                param_list\n-                    .params()\n-                    .filter(|closure_param| closure_param.ascribed_type().is_none())\n-                    .filter_map(|closure_param| closure_param.pat())\n-                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false))\n-                    .flatten()\n-                    .collect()\n-            })\n-        })\n-        .visit(|for_expression: ast::ForExpr| {\n-            let pat = for_expression.pat()?;\n-            let analyzer = SourceAnalyzer::new(db, file_id, for_expression.syntax(), None);\n-            Some(get_pat_type_hints(db, &analyzer, pat, false))\n-        })\n-        .visit(|if_expr: ast::IfExpr| {\n-            let pat = if_expr.condition()?.pat()?;\n-            let analyzer = SourceAnalyzer::new(db, file_id, if_expr.syntax(), None);\n-            Some(get_pat_type_hints(db, &analyzer, pat, true))\n-        })\n-        .visit(|while_expr: ast::WhileExpr| {\n-            let pat = while_expr.condition()?.pat()?;\n-            let analyzer = SourceAnalyzer::new(db, file_id, while_expr.syntax(), None);\n-            Some(get_pat_type_hints(db, &analyzer, pat, true))\n-        })\n-        .visit(|match_arm_list: ast::MatchArmList| {\n-            let analyzer = SourceAnalyzer::new(db, file_id, match_arm_list.syntax(), None);\n-            Some(\n-                match_arm_list\n-                    .arms()\n-                    .map(|match_arm| match_arm.pats())\n-                    .flatten()\n-                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true))\n-                    .flatten()\n-                    .collect(),\n-            )\n-        })\n-        .accept(&node)?\n+    match_ast! {\n+        match node {\n+            ast::LetStmt(it) => {\n+                if it.ascribed_type().is_some() {\n+                    return None;\n+                }\n+                let pat = it.pat()?;\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                Some(get_pat_type_hints(db, &analyzer, pat, false))\n+            },\n+            ast::LambdaExpr(it) => {\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                it.param_list().map(|param_list| {\n+                    param_list\n+                        .params()\n+                        .filter(|closure_param| closure_param.ascribed_type().is_none())\n+                        .filter_map(|closure_param| closure_param.pat())\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false))\n+                        .flatten()\n+                        .collect()\n+                })\n+            },\n+            ast::ForExpr(it) => {\n+                let pat = it.pat()?;\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                Some(get_pat_type_hints(db, &analyzer, pat, false))\n+            },\n+            ast::IfExpr(it) => {\n+                let pat = it.condition()?.pat()?;\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                Some(get_pat_type_hints(db, &analyzer, pat, true))\n+            },\n+            ast::WhileExpr(it) => {\n+                let pat = it.condition()?.pat()?;\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                Some(get_pat_type_hints(db, &analyzer, pat, true))\n+            },\n+            ast::MatchArmList(it) => {\n+                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n+                Some(\n+                    it\n+                        .arms()\n+                        .map(|match_arm| match_arm.pats())\n+                        .flatten()\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true))\n+                        .flatten()\n+                        .collect(),\n+                )\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n fn get_pat_type_hints("}, {"sha": "797e9926f0f0df0de9a0a7144e97c0c8bae2ba20", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -32,9 +32,8 @@ use ra_db::{\n     SourceDatabase, SourceRootId,\n };\n use ra_syntax::{\n-    algo::visit::{visitor, Visitor},\n     ast::{self, NameOwner},\n-    AstNode, Parse, SmolStr, SourceFile,\n+    match_ast, AstNode, Parse, SmolStr, SourceFile,\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n };\n@@ -306,16 +305,19 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n \n         Some((name, ptr, name_range))\n     }\n-    visitor()\n-        .visit(decl::<ast::FnDef>)\n-        .visit(decl::<ast::StructDef>)\n-        .visit(decl::<ast::EnumDef>)\n-        .visit(decl::<ast::TraitDef>)\n-        .visit(decl::<ast::Module>)\n-        .visit(decl::<ast::TypeAliasDef>)\n-        .visit(decl::<ast::ConstDef>)\n-        .visit(decl::<ast::StaticDef>)\n-        .accept(node)?\n+    match_ast! {\n+        match node {\n+            ast::FnDef(it) => { decl(it) },\n+            ast::StructDef(it) => { decl(it) },\n+            ast::EnumDef(it) => { decl(it) },\n+            ast::TraitDef(it) => { decl(it) },\n+            ast::Module(it) => { decl(it) },\n+            ast::TypeAliasDef(it) => { decl(it) },\n+            ast::ConstDef(it) => { decl(it) },\n+            ast::StaticDef(it) => { decl(it) },\n+            _ => None,\n+        }\n+    }\n }\n \n fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {"}, {"sha": "09230ccb2cecf498001e68ae132bf846f0481ba1", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -295,6 +295,7 @@ fn api_walkthrough() {\n     // 1. explicitly call getter methods on AST nodes.\n     // 2. use descendants and `AstNode::cast`.\n     // 3. use descendants and the visitor.\n+    // 4. use descendants and `match_ast!`.\n     //\n     // Here's how the first one looks like:\n     let exprs_cast: Vec<String> = file\n@@ -319,3 +320,14 @@ fn api_walkthrough() {\n     }\n     assert_eq!(exprs_cast, exprs_visit);\n }\n+\n+#[macro_export]\n+macro_rules! match_ast {\n+    (match $node:ident {\n+        $( ast::$ast:ident($it:ident) => $res:block, )*\n+        _ => $catch_all:expr,\n+    }) => {{\n+        $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n+        { $catch_all }\n+    }};\n+}"}, {"sha": "ab4f15908c32635c9e2537d0fd763fd430d6d867", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -5,8 +5,7 @@ mod block;\n use rustc_lexer::unescape;\n \n use crate::{\n-    algo::visit::{visitor_ctx, VisitorCtx},\n-    ast, AstNode, SyntaxError, SyntaxErrorKind,\n+    ast, match_ast, AstNode, SyntaxError, SyntaxErrorKind,\n     SyntaxKind::{BYTE, BYTE_STRING, CHAR, INT_NUMBER, STRING},\n     SyntaxNode, SyntaxToken, TextUnit, T,\n };\n@@ -97,12 +96,15 @@ impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n     let mut errors = Vec::new();\n     for node in root.descendants() {\n-        let _ = visitor_ctx(&mut errors)\n-            .visit::<ast::Literal, _>(validate_literal)\n-            .visit::<ast::BlockExpr, _>(block::validate_block_expr)\n-            .visit::<ast::FieldExpr, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n-            .visit::<ast::RecordField, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n-            .accept(&node);\n+        match_ast! {\n+            match node {\n+                ast::Literal(it) => { validate_literal(it, &mut errors) },\n+                ast::BlockExpr(it) => { block::validate_block_expr(it, &mut errors) },\n+                ast::FieldExpr(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n+                ast::RecordField(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n+                _ => (),\n+            }\n+        }\n     }\n     errors\n }"}]}