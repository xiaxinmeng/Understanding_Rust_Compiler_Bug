{"sha": "3382771dfd84c56c29d0cabc38b6e2db9554c02c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODI3NzFkZmQ4NGM1NmMyOWQwY2FiYzM4YjZlMmRiOTU1NGMwMmM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-23T19:15:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-23T19:15:59Z"}, "message": "Rollup merge of #81072 - RalfJung:place-ref-ty, r=oli-obk\n\nPlaceRef::ty: use method call syntax", "tree": {"sha": "1160f226900339145cdb29903a1c4a032fb85662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1160f226900339145cdb29903a1c4a032fb85662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3382771dfd84c56c29d0cabc38b6e2db9554c02c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDHXvCRBK7hj4Ov3rIwAAdHIIACMBIpGrc2T/FBU4PQ/nt5IZ\nUZ54yHcsyZ6EeUe1zfBRGVeqEo+SCcj4uLIY8m8VDaTxdC0um6DsFC8K0fSFxkhX\nJwK9z9pm2+n4FSa7zXrCektlx9TmCn0auG7M/JSEUDU0cZYkCUxkPf3RHK7AbaXj\nywtcxN2LGeVsNReBvqo5zoLNAa5cP4IbCtXF8iz8gEUEdrfijwdkqIQqkIoYxwSv\nLnMxD7RGkBwn3f3zrb+b8D6vb21qsYWwTFEJTXzRXgK3iCFz/ctYyl/qL9belbIy\nlsmEgoXeU+JRR2qSAp25dFkj9CRE3Z+JMTkGCKxr2drgM2N1saw9vImlzT3yLvQ=\n=SEaa\n-----END PGP SIGNATURE-----\n", "payload": "tree 1160f226900339145cdb29903a1c4a032fb85662\nparent 7635462fe8f5ad46cbf24344805f75f8209747dd\nparent 1b09dc2596c88dcf3fb840046f05db5e8595e9ca\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611429359 +0100\ncommitter GitHub <noreply@github.com> 1611429359 +0100\n\nRollup merge of #81072 - RalfJung:place-ref-ty, r=oli-obk\n\nPlaceRef::ty: use method call syntax\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3382771dfd84c56c29d0cabc38b6e2db9554c02c", "html_url": "https://github.com/rust-lang/rust/commit/3382771dfd84c56c29d0cabc38b6e2db9554c02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3382771dfd84c56c29d0cabc38b6e2db9554c02c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7635462fe8f5ad46cbf24344805f75f8209747dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7635462fe8f5ad46cbf24344805f75f8209747dd", "html_url": "https://github.com/rust-lang/rust/commit/7635462fe8f5ad46cbf24344805f75f8209747dd"}, {"sha": "1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "html_url": "https://github.com/rust-lang/rust/commit/1b09dc2596c88dcf3fb840046f05db5e8595e9ca"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "fd0ff5b66e6070d3aea2d1f9743c6a7ea131a0cc", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=3382771dfd84c56c29d0cabc38b6e2db9554c02c", "patch": "@@ -119,7 +119,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 )\n             );\n             if is_consume {\n-                let base_ty = mir::PlaceRef::ty(&place_base, self.fx.mir, cx.tcx());\n+                let base_ty = place_base.ty(self.fx.mir, cx.tcx());\n                 let base_ty = self.fx.monomorphize(base_ty);\n \n                 // ZSTs don't require any actual memory access."}, {"sha": "66d9d1a1e0c490ef2237a25e1602c92f8ceda921", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=3382771dfd84c56c29d0cabc38b6e2db9554c02c", "patch": "@@ -506,7 +506,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n     pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n-        let place_ty = mir::PlaceRef::ty(&place_ref, self.mir, tcx);\n+        let place_ty = place_ref.ty(self.mir, tcx);\n         self.monomorphize(place_ty.ty)\n     }\n }"}, {"sha": "cd16a88e5fc3c7d16dc79949b60f564489f553f7", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=3382771dfd84c56c29d0cabc38b6e2db9554c02c", "patch": "@@ -289,7 +289,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n-            let ty = PlaceRef::ty(&used_place, self.body, self.infcx.tcx).ty;\n+            let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n             let needs_note = match ty.kind() {\n                 ty::Closure(id, _) => {\n                     let tables = self.infcx.tcx.typeck(id.expect_local());\n@@ -728,6 +728,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n         let union_ty = |place_base| {\n+            // Need to use fn call syntax `PlaceRef::ty` to determine the type of `place_base`;\n+            // using a type annotation in the closure argument instead leads to a lifetime error.\n             let ty = PlaceRef::ty(&place_base, self.body, self.infcx.tcx).ty;\n             ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };"}, {"sha": "7c7edfdb5fbaf5cb4cfe6cce3a57ff9f2e267ee4", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=3382771dfd84c56c29d0cabc38b6e2db9554c02c", "patch": "@@ -1743,7 +1743,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =\n             place_span.0.last_projection()\n         {\n-            let place_ty = PlaceRef::ty(&place_base, self.body(), self.infcx.tcx);\n+            let place_ty = place_base.ty(self.body(), self.infcx.tcx);\n             if let ty::Array(..) = place_ty.ty.kind() {\n                 self.check_if_subslice_element_is_moved(\n                     location,\n@@ -1854,7 +1854,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // assigning to `P.f` requires `P` itself\n                     // be already initialized\n                     let tcx = self.infcx.tcx;\n-                    let base_ty = PlaceRef::ty(&place_base, self.body(), tcx).ty;\n+                    let base_ty = place_base.ty(self.body(), tcx).ty;\n                     match base_ty.kind() {\n                         ty::Adt(def, _) if def.has_dtor(tcx) => {\n                             self.check_if_path_or_subpath_is_moved(\n@@ -1951,7 +1951,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::Adt(def, _) = PlaceRef::ty(&base, this.body(), tcx).ty.kind() {\n+                if let ty::Adt(def, _) = base.ty(this.body(), tcx).ty.kind() {\n                     if def.is_union() {\n                         if this.move_data.path_map[mpi].iter().any(|moi| {\n                             this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n@@ -2173,7 +2173,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((place_base, elem)) => {\n                 match elem {\n                     ProjectionElem::Deref => {\n-                        let base_ty = PlaceRef::ty(&place_base, self.body(), self.infcx.tcx).ty;\n+                        let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;\n \n                         // Check the kind of deref to decide\n                         match base_ty.kind() {"}, {"sha": "bdf2becb711264eff522a8cbe962ea5db3888cc1", "filename": "compiler/rustc_mir/src/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3382771dfd84c56c29d0cabc38b6e2db9554c02c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs?ref=3382771dfd84c56c29d0cabc38b6e2db9554c02c", "patch": "@@ -117,7 +117,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                     // derefs, except we stop at the deref of a shared\n                     // reference.\n \n-                    let ty = PlaceRef::ty(&cursor_base, self.body, self.tcx).ty;\n+                    let ty = cursor_base.ty(self.body, self.tcx).ty;\n                     match ty.kind() {\n                         ty::RawPtr(_) | ty::Ref(_ /*rgn*/, _ /*ty*/, hir::Mutability::Not) => {\n                             // don't continue traversing over derefs of raw pointers or shared"}]}