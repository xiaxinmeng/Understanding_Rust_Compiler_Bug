{"sha": "8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODZiY2E3ZTI5NzhlNmMxZDZlZWQ3ZTYxNjgwYjBmMjVkYjFmMTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T02:05:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:03Z"}, "message": "std: convert str::repeat to a method.", "tree": {"sha": "275bea77da23c3e7a6872a5786f619d00370397e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275bea77da23c3e7a6872a5786f619d00370397e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "html_url": "https://github.com/rust-lang/rust/commit/8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "html_url": "https://github.com/rust-lang/rust/commit/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "9fe81804bd2f4a2e912b77fd395630ce48d4234d", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "patch": "@@ -593,7 +593,7 @@ pub mod groups {\n      */\n     pub fn usage(brief: &str, opts: &[OptGroup]) -> ~str {\n \n-        let desc_sep = ~\"\\n\" + str::repeat(\" \", 24);\n+        let desc_sep = ~\"\\n\" + \" \".repeat(24);\n \n         let rows = vec::map(opts, |optref| {\n             let OptGroup{short_name: short_name,\n@@ -603,7 +603,7 @@ pub mod groups {\n                          hasarg: hasarg,\n                          _} = copy *optref;\n \n-            let mut row = str::repeat(\" \", 4);\n+            let mut row = \" \".repeat(4);\n \n             // short option\n             row += match short_name.len() {\n@@ -629,7 +629,7 @@ pub mod groups {\n             // here we just need to indent the start of the description\n             let rowlen = row.len();\n             row += if rowlen < 24 {\n-                str::repeat(\" \", 24 - rowlen)\n+                \" \".repeat(24 - rowlen)\n             } else {\n                 copy desc_sep\n             };"}, {"sha": "21f944d2af18d0b8cbc45937a75f3b88aff4d22a", "filename": "src/librust/rust.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "patch": "@@ -225,7 +225,7 @@ fn usage() {\n     );\n \n     for commands.each |command| {\n-        let padding = str::repeat(\" \", indent - command.cmd.len());\n+        let padding = \" \".repeat(indent - command.cmd.len());\n         io::println(fmt!(\"    %s%s%s\",\n                          command.cmd, padding, command.usage_line));\n     }"}, {"sha": "3929356723d2fbffab7b08b7b0d6bbfa0ac7f0c7", "filename": "src/libstd/str.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8786bca7e2978e6c1d6eed7e61680b0f25db1f18/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=8786bca7e2978e6c1d6eed7e61680b0f25db1f18", "patch": "@@ -304,29 +304,6 @@ impl<'self> StrVector for &'self [&'self str] {\n     }\n }\n \n-/// Given a string, make a new string with repeated copies of it\n-pub fn repeat(ss: &str, nn: uint) -> ~str {\n-    do as_buf(ss) |buf, len| {\n-        let mut ret = ~\"\";\n-        // ignore the NULL terminator\n-        let len = len - 1;\n-        ret.reserve(nn * len);\n-\n-        unsafe {\n-            do as_buf(ret) |rbuf, _len| {\n-                let mut rbuf = ::cast::transmute_mut_unsafe(rbuf);\n-\n-                for nn.times {\n-                    ptr::copy_memory(rbuf, buf, len);\n-                    rbuf = rbuf.offset(len);\n-                }\n-            }\n-            raw::set_len(&mut ret, nn * len);\n-        }\n-        ret\n-    }\n-}\n-\n /*\n Section: Adding to and removing from a string\n */\n@@ -1567,6 +1544,8 @@ pub trait StrSlice<'self> {\n     fn find<C: CharEq>(&self, search: C) -> Option<uint>;\n     fn rfind<C: CharEq>(&self, search: C) -> Option<uint>;\n     fn find_str(&self, &str) -> Option<uint>;\n+\n+    fn repeat(&self, nn: uint) -> ~str;\n }\n \n /// Extension methods for strings\n@@ -2083,6 +2062,29 @@ impl<'self> StrSlice<'self> for &'self str {\n                 .map_consume(|(start, _end)| start)\n         }\n     }\n+\n+    /// Given a string, make a new string with repeated copies of it.\n+    fn repeat(&self, nn: uint) -> ~str {\n+        do as_buf(*self) |buf, len| {\n+            let mut ret = ~\"\";\n+            // ignore the NULL terminator\n+            let len = len - 1;\n+            ret.reserve(nn * len);\n+\n+            unsafe {\n+                do as_buf(ret) |rbuf, _len| {\n+                    let mut rbuf = ::cast::transmute_mut_unsafe(rbuf);\n+\n+                    for nn.times {\n+                        ptr::copy_memory(rbuf, buf, len);\n+                        rbuf = rbuf.offset(len);\n+                    }\n+                }\n+                raw::set_len(&mut ret, nn * len);\n+            }\n+            ret\n+        }\n+    }\n }\n \n #[allow(missing_doc)]\n@@ -2541,11 +2543,11 @@ mod tests {\n \n     #[test]\n     fn test_repeat() {\n-        assert_eq!(repeat(\"x\", 4), ~\"xxxx\");\n-        assert_eq!(repeat(\"hi\", 4), ~\"hihihihi\");\n-        assert_eq!(repeat(\"\u0e44\u0e17\u534e\", 3), ~\"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\");\n-        assert_eq!(repeat(\"\", 4), ~\"\");\n-        assert_eq!(repeat(\"hi\", 0), ~\"\");\n+        assert_eq!(\"x\".repeat(4), ~\"xxxx\");\n+        assert_eq!(\"hi\".repeat(4), ~\"hihihihi\");\n+        assert_eq!(\"\u0e44\u0e17\u534e\".repeat(3), ~\"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\");\n+        assert_eq!(\"\".repeat(4), ~\"\");\n+        assert_eq!(\"hi\".repeat(0), ~\"\");\n     }\n \n     #[test]"}]}