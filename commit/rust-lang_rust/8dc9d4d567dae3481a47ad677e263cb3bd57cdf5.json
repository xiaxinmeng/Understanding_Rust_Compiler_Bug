{"sha": "8dc9d4d567dae3481a47ad677e263cb3bd57cdf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzlkNGQ1NjdkYWUzNDgxYTQ3YWQ2NzdlMjYzY2IzYmQ1N2NkZjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-11T21:39:43Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-27T01:36:04Z"}, "message": "[experiment] ty/layout: compute both niche-filling and tagged layouts for enums.", "tree": {"sha": "6467a3c2e4a47ff547616b4d676daae5111730e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6467a3c2e4a47ff547616b4d676daae5111730e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5", "html_url": "https://github.com/rust-lang/rust/commit/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62392966a3937362146d7228444c8d843d972857", "url": "https://api.github.com/repos/rust-lang/rust/commits/62392966a3937362146d7228444c8d843d972857", "html_url": "https://github.com/rust-lang/rust/commit/62392966a3937362146d7228444c8d843d972857"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "010b29a060b6f28e94d0b5282a54e30068512957", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc9d4d567dae3481a47ad677e263cb3bd57cdf5/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=8dc9d4d567dae3481a47ad677e263cb3bd57cdf5", "patch": "@@ -876,6 +876,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .iter_enumerated()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));\n \n+                let mut niche_filling_layout = None;\n+\n                 // Niche-filling enum optimization.\n                 if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {\n                     let mut dataful_variant = None;\n@@ -972,7 +974,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            return Ok(tcx.intern_layout(Layout {\n+                            niche_filling_layout = Some(Layout {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n@@ -991,7 +993,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 largest_niche,\n                                 size,\n                                 align,\n-                            }));\n+                            });\n                         }\n                     }\n                 }\n@@ -1214,7 +1216,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                tcx.intern_layout(Layout {\n+                let tagged_layout = Layout {\n                     variants: Variants::Multiple {\n                         tag,\n                         tag_encoding: TagEncoding::Direct,\n@@ -1229,7 +1231,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     abi,\n                     align,\n                     size,\n-                })\n+                };\n+\n+                tcx.intern_layout(niche_filling_layout.unwrap_or(tagged_layout))\n             }\n \n             // Types with no meaningful known layout."}]}