{"sha": "a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjRiYzBkMTgxZjZhYWVlN2I0M2ZjMzdlN2YxNmJkNDAwZDZiMmM=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:14:31Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved SpecFromElem to spec_from_elem.rs", "tree": {"sha": "ac68a08a7c1d13b6a22e65de7dc424f4c2d2d7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac68a08a7c1d13b6a22e65de7dc424f4c2d2d7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "html_url": "https://github.com/rust-lang/rust/commit/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "html_url": "https://github.com/rust-lang/rust/commit/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d"}], "stats": {"total": 119, "additions": 64, "deletions": 55}, "files": [{"sha": "ae1736d8d3c4d0c5460a29f284c723f0f56d7da5", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "patch": "@@ -105,6 +105,10 @@ mod source_iter_marker;\n \n mod partial_eq;\n \n+use self::spec_from_elem::SpecFromElem;\n+\n+mod spec_from_elem;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -1995,61 +1999,6 @@ pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<\n     <T as SpecFromElem>::from_elem(elem, n, alloc)\n }\n \n-// Specialization trait used for Vec::from_elem\n-trait SpecFromElem: Sized {\n-    fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A>;\n-}\n-\n-impl<T: Clone> SpecFromElem for T {\n-    default fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A> {\n-        let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n-        v\n-    }\n-}\n-\n-impl SpecFromElem for i8 {\n-    #[inline]\n-    fn from_elem<A: Allocator>(elem: i8, n: usize, alloc: A) -> Vec<i8, A> {\n-        if elem == 0 {\n-            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n-        }\n-        unsafe {\n-            let mut v = Vec::with_capacity_in(n, alloc);\n-            ptr::write_bytes(v.as_mut_ptr(), elem as u8, n);\n-            v.set_len(n);\n-            v\n-        }\n-    }\n-}\n-\n-impl SpecFromElem for u8 {\n-    #[inline]\n-    fn from_elem<A: Allocator>(elem: u8, n: usize, alloc: A) -> Vec<u8, A> {\n-        if elem == 0 {\n-            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n-        }\n-        unsafe {\n-            let mut v = Vec::with_capacity_in(n, alloc);\n-            ptr::write_bytes(v.as_mut_ptr(), elem, n);\n-            v.set_len(n);\n-            v\n-        }\n-    }\n-}\n-\n-impl<T: Clone + IsZero> SpecFromElem for T {\n-    #[inline]\n-    fn from_elem<A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {\n-        if elem.is_zero() {\n-            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n-        }\n-        let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n-        v\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "ef89054ea1320119e3cf7e5e598a88735e26ac31", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "patch": "@@ -0,0 +1,60 @@\n+use crate::alloc::{Allocator};\n+use crate::raw_vec::RawVec;\n+use core::ptr::{self};\n+\n+use super::{Vec, IsZero, ExtendElement};\n+\n+// Specialization trait used for Vec::from_elem\n+pub(super) trait SpecFromElem: Sized {\n+    fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A>;\n+}\n+\n+impl<T: Clone> SpecFromElem for T {\n+    default fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A> {\n+        let mut v = Vec::with_capacity_in(n, alloc);\n+        v.extend_with(n, ExtendElement(elem));\n+        v\n+    }\n+}\n+\n+impl SpecFromElem for i8 {\n+    #[inline]\n+    fn from_elem<A: Allocator>(elem: i8, n: usize, alloc: A) -> Vec<i8, A> {\n+        if elem == 0 {\n+            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n+        }\n+        unsafe {\n+            let mut v = Vec::with_capacity_in(n, alloc);\n+            ptr::write_bytes(v.as_mut_ptr(), elem as u8, n);\n+            v.set_len(n);\n+            v\n+        }\n+    }\n+}\n+\n+impl SpecFromElem for u8 {\n+    #[inline]\n+    fn from_elem<A: Allocator>(elem: u8, n: usize, alloc: A) -> Vec<u8, A> {\n+        if elem == 0 {\n+            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n+        }\n+        unsafe {\n+            let mut v = Vec::with_capacity_in(n, alloc);\n+            ptr::write_bytes(v.as_mut_ptr(), elem, n);\n+            v.set_len(n);\n+            v\n+        }\n+    }\n+}\n+\n+impl<T: Clone + IsZero> SpecFromElem for T {\n+    #[inline]\n+    fn from_elem<A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {\n+        if elem.is_zero() {\n+            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n+        }\n+        let mut v = Vec::with_capacity_in(n, alloc);\n+        v.extend_with(n, ExtendElement(elem));\n+        v\n+    }\n+}\n\\ No newline at end of file"}]}