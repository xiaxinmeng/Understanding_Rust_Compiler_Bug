{"sha": "251293ef5e563b11fc7d46b6e1a31ef740f26455", "node_id": "C_kwDOAAsO6NoAKDI1MTI5M2VmNWU1NjNiMTFmYzdkNDZiNmUxYTMxZWY3NDBmMjY0NTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-24T06:32:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-24T06:32:42Z"}, "message": "Rollup merge of #108287 - compiler-errors:new-solver-bad-cast, r=spastorino\n\nAdd test for bad cast with deferred projection equality\n\n1. Unification during coercion (`Coerce::unify`) needs to consider deferred projection obligations (at least pass over them with `predicate_may_hold` or something, to disqualify any totally wrong unifications) -- otherwise, we'll shallowly consider `<u8 as Add>::Output` and `char` as coercible during `FnCtxt::try_coerce`, which will fail later when the nested obligations are registered and processed.\n\n2. Cast checking needs to be able to structurally normalize types so it sees `u8` instead of `<u8 as Add>::Output`. Otherwise it'll always consider the latter as part of a non-primitive cast. Currently `FnCtxt::normalize` doesn't do anything useful here, interestingly.\n\nI tried looking into both of these and it's not immediately clear where to refactor existing typeck code to fix this (at least the latter), but I'm gonna commit a test for it at least so we don't forget. This is one of the issues that's keeping us from building larger projects.", "tree": {"sha": "d6e5944a73ecf5a78c5d3d9f0d64564af46a70dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e5944a73ecf5a78c5d3d9f0d64564af46a70dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/251293ef5e563b11fc7d46b6e1a31ef740f26455", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+FoKCRBK7hj4Ov3rIwAAftIIAG3rjKvOw4lyruBU4Sd7N1z+\nQpyER048Zxc1rsUuZ+kqKbFa6HYdFMdKOYqtQKNSV040jfYmkTwQjif55eRRNAOH\nfS4kpfpwjnTrr2s51r4mvQBwNhDGYsgcWdGiBZI8JhLrSqHjfmw6Oh+0UO/OCSpZ\nf+r+tn22PShoATrQZrRnSIFHZJuk5MQR1H8eOypORubLrtEah+7WKH7Eo66YekRj\nRFLofECVu0GZIrtczbhoBCNXGXTNGGrlKH4E5rmae1djT8VoCT6vez0rnkkNrDXj\n63bfOd5agAgAAE9/w/xGJz+cXYdvOtoME1x1LjcG6qp/3xzMm3LLVIBEHdV88JM=\n=URLt\n-----END PGP SIGNATURE-----\n", "payload": "tree d6e5944a73ecf5a78c5d3d9f0d64564af46a70dc\nparent 440113ddf68522a3cecac66dc3cd0bdf88718013\nparent eb1f9babecbe51b7580e71ed8e558ff40eeee96c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677220362 +0530\ncommitter GitHub <noreply@github.com> 1677220362 +0530\n\nRollup merge of #108287 - compiler-errors:new-solver-bad-cast, r=spastorino\n\nAdd test for bad cast with deferred projection equality\n\n1. Unification during coercion (`Coerce::unify`) needs to consider deferred projection obligations (at least pass over them with `predicate_may_hold` or something, to disqualify any totally wrong unifications) -- otherwise, we'll shallowly consider `<u8 as Add>::Output` and `char` as coercible during `FnCtxt::try_coerce`, which will fail later when the nested obligations are registered and processed.\n\n2. Cast checking needs to be able to structurally normalize types so it sees `u8` instead of `<u8 as Add>::Output`. Otherwise it'll always consider the latter as part of a non-primitive cast. Currently `FnCtxt::normalize` doesn't do anything useful here, interestingly.\n\nI tried looking into both of these and it's not immediately clear where to refactor existing typeck code to fix this (at least the latter), but I'm gonna commit a test for it at least so we don't forget. This is one of the issues that's keeping us from building larger projects.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/251293ef5e563b11fc7d46b6e1a31ef740f26455", "html_url": "https://github.com/rust-lang/rust/commit/251293ef5e563b11fc7d46b6e1a31ef740f26455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/251293ef5e563b11fc7d46b6e1a31ef740f26455/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440113ddf68522a3cecac66dc3cd0bdf88718013", "url": "https://api.github.com/repos/rust-lang/rust/commits/440113ddf68522a3cecac66dc3cd0bdf88718013", "html_url": "https://github.com/rust-lang/rust/commit/440113ddf68522a3cecac66dc3cd0bdf88718013"}, {"sha": "eb1f9babecbe51b7580e71ed8e558ff40eeee96c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1f9babecbe51b7580e71ed8e558ff40eeee96c", "html_url": "https://github.com/rust-lang/rust/commit/eb1f9babecbe51b7580e71ed8e558ff40eeee96c"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "5ff567cd07c508fb952c79ed4711a655a2032ee9", "filename": "tests/ui/typeck/lazy-norm/cast-checks-handling-projections.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/251293ef5e563b11fc7d46b6e1a31ef740f26455/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251293ef5e563b11fc7d46b6e1a31ef740f26455/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs?ref=251293ef5e563b11fc7d46b6e1a31ef740f26455", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Ztrait-solver=next\n+// known-bug: unknown\n+\n+fn main() {\n+    (0u8 + 0u8) as char;\n+}"}, {"sha": "6b09ccd52140def0329639a2f6ad5889d8193cbf", "filename": "tests/ui/typeck/lazy-norm/cast-checks-handling-projections.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/251293ef5e563b11fc7d46b6e1a31ef740f26455/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/251293ef5e563b11fc7d46b6e1a31ef740f26455/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr?ref=251293ef5e563b11fc7d46b6e1a31ef740f26455", "patch": "@@ -0,0 +1,9 @@\n+error[E0271]: type mismatch resolving `char == <u8 as Add>::Output`\n+  --> $DIR/cast-checks-handling-projections.rs:5:5\n+   |\n+LL |     (0u8 + 0u8) as char;\n+   |     ^^^^^^^^^^^ types differ\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}