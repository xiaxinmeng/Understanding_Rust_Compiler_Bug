{"sha": "ab0c7af376c612374226c83d82e6387eb7cc9666", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMGM3YWYzNzZjNjEyMzc0MjI2YzgzZDgyZTYzODdlYjdjYzk2NjY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T13:25:55Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:17Z"}, "message": "ignore boxed closure doctests in the guide/reference", "tree": {"sha": "8cf3da610cc87a616802530d0f787082b2d70191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf3da610cc87a616802530d0f787082b2d70191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0c7af376c612374226c83d82e6387eb7cc9666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0c7af376c612374226c83d82e6387eb7cc9666", "html_url": "https://github.com/rust-lang/rust/commit/ab0c7af376c612374226c83d82e6387eb7cc9666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0c7af376c612374226c83d82e6387eb7cc9666/comments", "author": null, "committer": null, "parents": [{"sha": "a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "html_url": "https://github.com/rust-lang/rust/commit/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "dea861ad94604b048ade1680cbaeff241c43ae66", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=ab0c7af376c612374226c83d82e6387eb7cc9666", "patch": "@@ -536,7 +536,7 @@ optimizer to consider the result used and ensures it cannot remove the\n computation entirely. This could be done for the example above by adjusting the\n `b.iter` call to\n \n-```rust\n+```{rust,ignore}\n # struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;\n b.iter(|| {\n     // note lack of `;` (could also use an explicit `return`).\n@@ -548,7 +548,7 @@ Or, the other option is to call the generic `test::black_box` function, which\n is an opaque \"black box\" to the optimizer and so forces it to consider any\n argument as used.\n \n-```rust\n+```{rust,ignore}\n extern crate test;\n \n # fn main() {"}, {"sha": "9bd17ec33325822af5211cd13d1cb658aa2ebe72", "filename": "src/doc/guide.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=ab0c7af376c612374226c83d82e6387eb7cc9666", "patch": "@@ -4231,7 +4231,7 @@ arguments, really powerful things are possible.\n \n Let's make a closure:\n \n-```{rust}\n+```{rust,ignore}\n let add_one = |x| { 1 + x };\n \n println!(\"The sum of 5 plus 1 is {}.\", add_one(5));\n@@ -4243,7 +4243,7 @@ binding name and two parentheses, just like we would for a named function.\n \n Let's compare syntax. The two are pretty close:\n \n-```{rust}\n+```{rust,ignore}\n let add_one = |x: i32| -> i32 { 1 + x };\n fn  add_one   (x: i32) -> i32 { 1 + x }\n ```\n@@ -4256,7 +4256,7 @@ There's one big difference between a closure and named functions, and it's in\n the name: a closure \"closes over its environment.\" What does that mean? It means\n this:\n \n-```{rust}\n+```{rust,ignore}\n fn main() {\n     let x = 5;\n \n@@ -4297,7 +4297,7 @@ now. We'll talk about them more in the \"Threads\" section of the guide.\n \n Closures are most useful as an argument to another function. Here's an example:\n \n-```{rust}\n+```{rust,ignore}\n fn twice(x: i32, f: |i32| -> i32) -> i32 {\n     f(x) + f(x)\n }\n@@ -4311,14 +4311,14 @@ fn main() {\n \n Let's break the example down, starting with `main`:\n \n-```{rust}\n+```{rust,ignore}\n let square = |x: i32| { x * x };\n ```\n \n We've seen this before. We make a closure that takes an integer, and returns\n its square.\n \n-```{rust}\n+```{rust,ignore}\n # fn twice(x: i32, f: |i32| -> i32) -> i32 { f(x) + f(x) }\n # let square = |x: i32| { x * x };\n twice(5, square); // evaluates to 50\n@@ -4342,7 +4342,7 @@ though, and that function takes an `i32` and returns an `i32`. Notice\n how the `|i32| -> i32` syntax looks a lot like our definition of `square`\n above, if we added the return type in:\n \n-```{rust}\n+```{rust,ignore}\n let square = |x: i32| -> i32 { x * x };\n //           |i32|    -> i32\n ```\n@@ -4357,7 +4357,7 @@ Finally, `twice` returns an `i32` as well.\n \n Okay, let's look at the body of `twice`:\n \n-```{rust}\n+```{rust,ignore}\n fn twice(x: i32, f: |i32| -> i32) -> i32 {\n   f(x) + f(x)\n }\n@@ -4375,7 +4375,7 @@ this technique a lot.\n If we didn't want to give `square` a name, we could just define it inline.\n This example is the same as the previous one:\n \n-```{rust}\n+```{rust,ignore}\n fn twice(x: i32, f: |i32| -> i32) -> i32 {\n     f(x) + f(x)\n }\n@@ -4388,7 +4388,7 @@ fn main() {\n A named function's name can be used wherever you'd use a closure. Another\n way of writing the previous example:\n \n-```{rust}\n+```{rust,ignore}\n fn twice(x: i32, f: |i32| -> i32) -> i32 {\n     f(x) + f(x)\n }"}, {"sha": "512081ac48f4da75d2b10a82d0a50566b6d1ea12", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c7af376c612374226c83d82e6387eb7cc9666/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ab0c7af376c612374226c83d82e6387eb7cc9666", "patch": "@@ -1559,7 +1559,7 @@ Type parameters can be specified for a trait to make it generic. These appear\n after the trait name, using the same syntax used in [generic\n functions](#generic-functions).\n \n-```\n+``` ignore\n trait Seq<T> {\n    fn len(&self) -> uint;\n    fn elt_at(&self, n: uint) -> T;\n@@ -3217,7 +3217,7 @@ expression's captured environment.\n In this example, we define a function `ten_times` that takes a higher-order\n function argument, and call it with a lambda expression as an argument.\n \n-```\n+``` ignore\n fn ten_times(f: |int|) {\n     let mut i = 0;\n     while i < 10 {\n@@ -3821,7 +3821,7 @@ or `extern`), a sequence of input types and an output type.\n \n An example of a `fn` type:\n \n-```\n+``` ignore\n fn add(x: int, y: int) -> int {\n   return x + y;\n }\n@@ -3849,7 +3849,7 @@ The type of a closure mapping an input of type `A` to an output of type `B` is\n \n An example of creating and calling a closure:\n \n-```rust\n+``` ignore\n let captured_var = 10i;\n \n let closure_no_args = || println!(\"captured_var={}\", captured_var);"}]}