{"sha": "ab98f16373cda61c37be6b69b32511c86eab153c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOThmMTYzNzNjZGE2MWMzN2JlNmI2OWIzMjUxMWM4NmVhYjE1M2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-23T01:09:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-23T01:09:53Z"}, "message": "rustc: Downcase metadata::Encode", "tree": {"sha": "34a53f91fb1dac3be9a7e6166385b6e9fcf89b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a53f91fb1dac3be9a7e6166385b6e9fcf89b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab98f16373cda61c37be6b69b32511c86eab153c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab98f16373cda61c37be6b69b32511c86eab153c", "html_url": "https://github.com/rust-lang/rust/commit/ab98f16373cda61c37be6b69b32511c86eab153c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab98f16373cda61c37be6b69b32511c86eab153c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8746b84eecb784266c49237ef5159787af4b863d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8746b84eecb784266c49237ef5159787af4b863d", "html_url": "https://github.com/rust-lang/rust/commit/8746b84eecb784266c49237ef5159787af4b863d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "a7c2ab8f31e07715323954fccc05718e8f0faa6f", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=ab98f16373cda61c37be6b69b32511c86eab153c", "patch": "@@ -406,7 +406,7 @@ fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t, str crate_meta_name,\n     sha.input_str(\"-\");\n     sha.input_str(crate_meta_name);\n     sha.input_str(\"-\");\n-    sha.input_str(metadata::Encode::ty_str(cx, t));\n+    sha.input_str(metadata::encode::ty_str(cx, t));\n     auto hash = truncated_sha1_result(sha);\n     // Prefix with _ so that it never blends into adjacent digits\n "}, {"sha": "d8e67aa2881fdfa4682b6b3775820dc29b795a78", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=ab98f16373cda61c37be6b69b32511c86eab153c", "patch": "@@ -80,7 +80,7 @@ type ty_abbrev = rec(uint pos, uint len, str s);\n \n tag abbrev_ctxt { ac_no_abbrevs; ac_use_abbrevs(hashmap[ty::t, ty_abbrev]); }\n \n-mod Encode {\n+mod encode {\n     type ctxt =\n         rec(fn(&def_id) -> str  ds, // Def -> str Callback:\n \n@@ -454,7 +454,7 @@ fn encode_type(&@trans::crate_ctxt cx, &ebml::writer ebml_w, &ty::t typ) {\n     auto f = def_to_str;\n     auto ty_str_ctxt =\n         @rec(ds=f, tcx=cx.tcx, abbrevs=ac_use_abbrevs(cx.type_abbrevs));\n-    Encode::enc_ty(io::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n+    encode::enc_ty(io::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n     ebml::end_tag(ebml_w);\n }\n "}, {"sha": "de782e2fe6c5a2b11333e000115ca0e52e66fc0a", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab98f16373cda61c37be6b69b32511c86eab153c/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=ab98f16373cda61c37be6b69b32511c86eab153c", "patch": "@@ -133,7 +133,7 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n fn ty_to_short_str(&ctxt cx, t typ) -> str {\n     auto f = def_to_str;\n     auto ecx = @rec(ds=f, tcx=cx, abbrevs=middle::metadata::ac_no_abbrevs);\n-    auto s = middle::metadata::Encode::ty_str(ecx, typ);\n+    auto s = middle::metadata::encode::ty_str(ecx, typ);\n     if (str::byte_len(s) >= 32u) { s = str::substr(s, 0u, 32u); }\n     ret s;\n }"}]}