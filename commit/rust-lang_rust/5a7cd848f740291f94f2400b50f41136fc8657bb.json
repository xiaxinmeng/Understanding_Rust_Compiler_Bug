{"sha": "5a7cd848f740291f94f2400b50f41136fc8657bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2NkODQ4Zjc0MDI5MWY5NGYyNDAwYjUwZjQxMTM2ZmM4NjU3YmI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2019-01-21T18:36:27Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2019-01-21T18:36:27Z"}, "message": "Speed up the fast path for assert_eq! and assert_ne!\n\nCurrently, the panic!() calls directly borrow the value bindings. This\ncauses those bindings to always be initialized, i.e. they're initialized\neven before the values are even compared. This causes noticeable\noverhead in what should be a really cheap operation.\n\nBy performing a reborrow of the value in the call to panic!(), we allow\nLLVM to optimize that code, so that the extra borrow only happens in the\nerror case.\n\nWe could achieve the same result by dereferencing the values passed to\npanic!(), as the format machinery borrows them anyway, but this causes\nassertions to fail to compile if one of the values is unsized, i.e. it\nwould be a breaking change.", "tree": {"sha": "06b38e2a5c0aba5bde5ee02ab3e71c297fa3539d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b38e2a5c0aba5bde5ee02ab3e71c297fa3539d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7cd848f740291f94f2400b50f41136fc8657bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7cd848f740291f94f2400b50f41136fc8657bb", "html_url": "https://github.com/rust-lang/rust/commit/5a7cd848f740291f94f2400b50f41136fc8657bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7cd848f740291f94f2400b50f41136fc8657bb/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db2394156b408e7af5c595bf3c9cbff8ba21157", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db2394156b408e7af5c595bf3c9cbff8ba21157", "html_url": "https://github.com/rust-lang/rust/commit/4db2394156b408e7af5c595bf3c9cbff8ba21157"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "5eaefb7d1cc51c6f7d9b7552172e8c10e99c3714", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a7cd848f740291f94f2400b50f41136fc8657bb/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7cd848f740291f94f2400b50f41136fc8657bb/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=5a7cd848f740291f94f2400b50f41136fc8657bb", "patch": "@@ -45,9 +45,12 @@ macro_rules! assert_eq {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -59,9 +62,12 @@ macro_rules! assert_eq {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }\n@@ -96,9 +102,12 @@ macro_rules! assert_ne {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -110,9 +119,12 @@ macro_rules! assert_ne {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }"}]}