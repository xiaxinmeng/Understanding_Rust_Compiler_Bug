{"sha": "987eb28ecad144928bfc21e27777d443f56547de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4N2ViMjhlY2FkMTQ0OTI4YmZjMjFlMjc3NzdkNDQzZjU2NTQ3ZGU=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-04T01:01:25Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-04T01:01:25Z"}, "message": "Add tests for 3 Debug implementations", "tree": {"sha": "86d400a039b98ee5054c6da694ae6592cd834294", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d400a039b98ee5054c6da694ae6592cd834294"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/987eb28ecad144928bfc21e27777d443f56547de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/987eb28ecad144928bfc21e27777d443f56547de", "html_url": "https://github.com/rust-lang/rust/commit/987eb28ecad144928bfc21e27777d443f56547de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/987eb28ecad144928bfc21e27777d443f56547de/comments", "author": null, "committer": null, "parents": [{"sha": "91f9dd468fe3248d215620db00ecc739e67ae964", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f9dd468fe3248d215620db00ecc739e67ae964", "html_url": "https://github.com/rust-lang/rust/commit/91f9dd468fe3248d215620db00ecc739e67ae964"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "c0d880877b5119e876fe0a8035e88b5f4fe9b488", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/987eb28ecad144928bfc21e27777d443f56547de/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987eb28ecad144928bfc21e27777d443f56547de/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=987eb28ecad144928bfc21e27777d443f56547de", "patch": "@@ -261,6 +261,7 @@ mod tests {\n     use net::*;\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n+    use sys_common::AsInner;\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr)) {\n@@ -831,4 +832,27 @@ mod tests {\n             rx.recv().unwrap();\n         })\n     }\n+\n+    #[test]\n+    fn debug() {\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        let socket_addr = next_test_ip4();\n+\n+        let listener = t!(TcpListener::bind(&socket_addr));\n+        let listener_inner = listener.0.socket().as_inner();\n+        let compare = format!(\"TcpListener {{ addr: {:?}, {}: {:?} }}\",\n+                              socket_addr, name, listener_inner);\n+        assert_eq!(format!(\"{:?}\", listener), compare);\n+\n+        let mut stream = t!(TcpStream::connect(&(\"localhost\",\n+                                                 socket_addr.port())));\n+        let stream_inner = stream.0.socket().as_inner();\n+        let compare = format!(\"TcpStream {{ addr: {:?}, \\\n+                              peer: {:?}, {}: {:?} }}\",\n+                              stream.local_addr().unwrap(),\n+                              stream.peer_addr().unwrap(),\n+                              name,\n+                              stream_inner);\n+        assert_eq!(format!(\"{:?}\", stream), compare);\n+    }\n }"}, {"sha": "4360f62c1bf0f33bedabf0606e26b2e9415a333e", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/987eb28ecad144928bfc21e27777d443f56547de/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987eb28ecad144928bfc21e27777d443f56547de/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=987eb28ecad144928bfc21e27777d443f56547de", "patch": "@@ -151,6 +151,7 @@ mod tests {\n     use net::*;\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n+    use sys_common::AsInner;\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr, SocketAddr)) {\n@@ -308,4 +309,16 @@ mod tests {\n             serv_rx.recv().unwrap();\n         })\n     }\n+\n+    #[test]\n+    fn debug() {\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        let socket_addr = next_test_ip4();\n+\n+        let udpsock = t!(UdpSocket::bind(&socket_addr));\n+        let udpsock_inner = udpsock.0.socket().as_inner();\n+        let compare = format!(\"UdpSocket {{ addr: {:?}, {}: {:?} }}\",\n+                              socket_addr, name, udpsock_inner);\n+        assert_eq!(format!(\"{:?}\", udpsock), compare);\n+    }\n }"}]}