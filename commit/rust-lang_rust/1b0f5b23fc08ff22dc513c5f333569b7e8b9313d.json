{"sha": "1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGY1YjIzZmMwOGZmMjJkYzUxM2M1ZjMzMzU2OWI3ZThiOTMxM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-09T14:26:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-09T14:26:27Z"}, "message": "auto merge of #11412 : bjz/rust/num-cleanups, r=alexcrichton\n\nThe methods contained in `std::num::{Algebraic, Trigonometric, Exponential, Hyperbolic}` have now been moved into `std::num::Real`. This is part of an ongoing effort to simplify `std::num` (see issue #10387).\r\n\r\n`std::num::RealExt` has also been removed from the prelude because it is not a commonly used trait.\r\n\r\nr? @alexcrichton", "tree": {"sha": "f54117c4c6566f7e5078745cfcb63d3538afd84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54117c4c6566f7e5078745cfcb63d3538afd84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "html_url": "https://github.com/rust-lang/rust/commit/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9ec6d59a0e5e79e553e0e4570a28ded1ead1aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9ec6d59a0e5e79e553e0e4570a28ded1ead1aa", "html_url": "https://github.com/rust-lang/rust/commit/ab9ec6d59a0e5e79e553e0e4570a28ded1ead1aa"}, {"sha": "0232fed174b9f7d227fd70c356ccd226dd47cab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0232fed174b9f7d227fd70c356ccd226dd47cab1", "html_url": "https://github.com/rust-lang/rust/commit/0232fed174b9f7d227fd70c356ccd226dd47cab1"}], "stats": {"total": 534, "additions": 245, "deletions": 289}, "files": [{"sha": "47a2e35f0288a9ddafaad1ce475010f43a13a029", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -11,7 +11,6 @@\n \n //! Complex numbers.\n \n-\n use std::num::{Zero,One,ToStrRadix};\n \n // FIXME #1284: handle complex NaN & infinity etc. This\n@@ -78,15 +77,15 @@ impl<T: Clone + Num> Cmplx<T> {\n     }\n }\n \n-impl<T: Clone + Algebraic + Num> Cmplx<T> {\n+impl<T: Clone + Real> Cmplx<T> {\n     /// Calculate |self|\n     #[inline]\n     pub fn norm(&self) -> T {\n         self.re.hypot(&self.im)\n     }\n }\n \n-impl<T: Clone + Trigonometric + Algebraic + Num> Cmplx<T> {\n+impl<T: Clone + Real> Cmplx<T> {\n     /// Calculate the principal Arg of self.\n     #[inline]\n     pub fn arg(&self) -> T {"}, {"sha": "4edccf685e2834f91af76843b621c6c57ac639a3", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -105,6 +105,12 @@ impl<T: Clone + Integer + Ord>\n         ret.reduce();\n         ret\n     }\n+\n+    /// Return the reciprocal\n+    #[inline]\n+    pub fn recip(&self) -> Ratio<T> {\n+        Ratio::new_raw(self.denom.clone(), self.numer.clone())\n+    }\n }\n \n impl Ratio<BigInt> {\n@@ -288,13 +294,6 @@ impl<T: Clone + Integer + Ord>\n     }\n }\n \n-impl<T: Clone + Integer + Ord> Fractional for Ratio<T> {\n-    #[inline]\n-    fn recip(&self) -> Ratio<T> {\n-        Ratio::new_raw(self.denom.clone(), self.numer.clone())\n-    }\n-}\n-\n /* String conversions */\n impl<T: ToStr> ToStr for Ratio<T> {\n     /// Renders as `numer/denom`."}, {"sha": "c4e89ea63fe660097e05dc70c3e7c730b088040b", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 69, "deletions": 79, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -331,13 +331,79 @@ impl Round for f32 {\n     fn fract(&self) -> f32 { *self - self.trunc() }\n }\n \n-impl Fractional for f32 {\n+impl Real for f32 {\n+    /// Archimedes' constant\n+    #[inline]\n+    fn pi() -> f32 { 3.14159265358979323846264338327950288 }\n+\n+    /// 2.0 * pi\n+    #[inline]\n+    fn two_pi() -> f32 { 6.28318530717958647692528676655900576 }\n+\n+    /// pi / 2.0\n+    #[inline]\n+    fn frac_pi_2() -> f32 { 1.57079632679489661923132169163975144 }\n+\n+    /// pi / 3.0\n+    #[inline]\n+    fn frac_pi_3() -> f32 { 1.04719755119659774615421446109316763 }\n+\n+    /// pi / 4.0\n+    #[inline]\n+    fn frac_pi_4() -> f32 { 0.785398163397448309615660845819875721 }\n+\n+    /// pi / 6.0\n+    #[inline]\n+    fn frac_pi_6() -> f32 { 0.52359877559829887307710723054658381 }\n+\n+    /// pi / 8.0\n+    #[inline]\n+    fn frac_pi_8() -> f32 { 0.39269908169872415480783042290993786 }\n+\n+    /// 1 .0/ pi\n+    #[inline]\n+    fn frac_1_pi() -> f32 { 0.318309886183790671537767526745028724 }\n+\n+    /// 2.0 / pi\n+    #[inline]\n+    fn frac_2_pi() -> f32 { 0.636619772367581343075535053490057448 }\n+\n+    /// 2.0 / sqrt(pi)\n+    #[inline]\n+    fn frac_2_sqrtpi() -> f32 { 1.12837916709551257389615890312154517 }\n+\n+    /// sqrt(2.0)\n+    #[inline]\n+    fn sqrt2() -> f32 { 1.41421356237309504880168872420969808 }\n+\n+    /// 1.0 / sqrt(2.0)\n+    #[inline]\n+    fn frac_1_sqrt2() -> f32 { 0.707106781186547524400844362104849039 }\n+\n+    /// Euler's number\n+    #[inline]\n+    fn e() -> f32 { 2.71828182845904523536028747135266250 }\n+\n+    /// log2(e)\n+    #[inline]\n+    fn log2_e() -> f32 { 1.44269504088896340735992468100189214 }\n+\n+    /// log10(e)\n+    #[inline]\n+    fn log10_e() -> f32 { 0.434294481903251827651128918916605082 }\n+\n+    /// ln(2.0)\n+    #[inline]\n+    fn ln_2() -> f32 { 0.693147180559945309417232121458176568 }\n+\n+    /// ln(10.0)\n+    #[inline]\n+    fn ln_10() -> f32 { 2.30258509299404568401799145468436421 }\n+\n     /// The reciprocal (multiplicative inverse) of the number\n     #[inline]\n     fn recip(&self) -> f32 { 1.0 / *self }\n-}\n \n-impl Algebraic for f32 {\n     #[inline]\n     fn pow(&self, n: &f32) -> f32 { pow(*self, *n) }\n \n@@ -352,9 +418,7 @@ impl Algebraic for f32 {\n \n     #[inline]\n     fn hypot(&self, other: &f32) -> f32 { hypot(*self, *other) }\n-}\n \n-impl Trigonometric for f32 {\n     #[inline]\n     fn sin(&self) -> f32 { sin(*self) }\n \n@@ -381,9 +445,7 @@ impl Trigonometric for f32 {\n     fn sin_cos(&self) -> (f32, f32) {\n         (self.sin(), self.cos())\n     }\n-}\n \n-impl Exponential for f32 {\n     /// Returns the exponential of the number\n     #[inline]\n     fn exp(&self) -> f32 { exp(*self) }\n@@ -407,9 +469,7 @@ impl Exponential for f32 {\n     /// Returns the base 10 logarithm of the number\n     #[inline]\n     fn log10(&self) -> f32 { log10(*self) }\n-}\n \n-impl Hyperbolic for f32 {\n     #[inline]\n     fn sinh(&self) -> f32 { sinh(*self) }\n \n@@ -469,76 +529,6 @@ impl Hyperbolic for f32 {\n     fn atanh(&self) -> f32 {\n         0.5 * ((2.0 * *self) / (1.0 - *self)).ln_1p()\n     }\n-}\n-\n-impl Real for f32 {\n-    /// Archimedes' constant\n-    #[inline]\n-    fn pi() -> f32 { 3.14159265358979323846264338327950288 }\n-\n-    /// 2.0 * pi\n-    #[inline]\n-    fn two_pi() -> f32 { 6.28318530717958647692528676655900576 }\n-\n-    /// pi / 2.0\n-    #[inline]\n-    fn frac_pi_2() -> f32 { 1.57079632679489661923132169163975144 }\n-\n-    /// pi / 3.0\n-    #[inline]\n-    fn frac_pi_3() -> f32 { 1.04719755119659774615421446109316763 }\n-\n-    /// pi / 4.0\n-    #[inline]\n-    fn frac_pi_4() -> f32 { 0.785398163397448309615660845819875721 }\n-\n-    /// pi / 6.0\n-    #[inline]\n-    fn frac_pi_6() -> f32 { 0.52359877559829887307710723054658381 }\n-\n-    /// pi / 8.0\n-    #[inline]\n-    fn frac_pi_8() -> f32 { 0.39269908169872415480783042290993786 }\n-\n-    /// 1 .0/ pi\n-    #[inline]\n-    fn frac_1_pi() -> f32 { 0.318309886183790671537767526745028724 }\n-\n-    /// 2.0 / pi\n-    #[inline]\n-    fn frac_2_pi() -> f32 { 0.636619772367581343075535053490057448 }\n-\n-    /// 2.0 / sqrt(pi)\n-    #[inline]\n-    fn frac_2_sqrtpi() -> f32 { 1.12837916709551257389615890312154517 }\n-\n-    /// sqrt(2.0)\n-    #[inline]\n-    fn sqrt2() -> f32 { 1.41421356237309504880168872420969808 }\n-\n-    /// 1.0 / sqrt(2.0)\n-    #[inline]\n-    fn frac_1_sqrt2() -> f32 { 0.707106781186547524400844362104849039 }\n-\n-    /// Euler's number\n-    #[inline]\n-    fn e() -> f32 { 2.71828182845904523536028747135266250 }\n-\n-    /// log2(e)\n-    #[inline]\n-    fn log2_e() -> f32 { 1.44269504088896340735992468100189214 }\n-\n-    /// log10(e)\n-    #[inline]\n-    fn log10_e() -> f32 { 0.434294481903251827651128918916605082 }\n-\n-    /// ln(2.0)\n-    #[inline]\n-    fn ln_2() -> f32 { 0.693147180559945309417232121458176568 }\n-\n-    /// ln(10.0)\n-    #[inline]\n-    fn ln_10() -> f32 { 2.30258509299404568401799145468436421 }\n \n     /// Converts to degrees, assuming the number is in radians\n     #[inline]"}, {"sha": "6c80998e8d7346f52eda2cbc7052bbf0d8e7dfff", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 70, "deletions": 80, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -18,7 +18,7 @@ use cmath::c_double_utils;\n use default::Default;\n use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n-use num::{Zero, One, strconv};\n+use num::{Zero, One, RealExt, strconv};\n use num;\n use to_str;\n use unstable::intrinsics;\n@@ -349,13 +349,79 @@ impl Round for f64 {\n     fn fract(&self) -> f64 { *self - self.trunc() }\n }\n \n-impl Fractional for f64 {\n+impl Real for f64 {\n+    /// Archimedes' constant\n+    #[inline]\n+    fn pi() -> f64 { 3.14159265358979323846264338327950288 }\n+\n+    /// 2.0 * pi\n+    #[inline]\n+    fn two_pi() -> f64 { 6.28318530717958647692528676655900576 }\n+\n+    /// pi / 2.0\n+    #[inline]\n+    fn frac_pi_2() -> f64 { 1.57079632679489661923132169163975144 }\n+\n+    /// pi / 3.0\n+    #[inline]\n+    fn frac_pi_3() -> f64 { 1.04719755119659774615421446109316763 }\n+\n+    /// pi / 4.0\n+    #[inline]\n+    fn frac_pi_4() -> f64 { 0.785398163397448309615660845819875721 }\n+\n+    /// pi / 6.0\n+    #[inline]\n+    fn frac_pi_6() -> f64 { 0.52359877559829887307710723054658381 }\n+\n+    /// pi / 8.0\n+    #[inline]\n+    fn frac_pi_8() -> f64 { 0.39269908169872415480783042290993786 }\n+\n+    /// 1.0 / pi\n+    #[inline]\n+    fn frac_1_pi() -> f64 { 0.318309886183790671537767526745028724 }\n+\n+    /// 2.0 / pi\n+    #[inline]\n+    fn frac_2_pi() -> f64 { 0.636619772367581343075535053490057448 }\n+\n+    /// 2.0 / sqrt(pi)\n+    #[inline]\n+    fn frac_2_sqrtpi() -> f64 { 1.12837916709551257389615890312154517 }\n+\n+    /// sqrt(2.0)\n+    #[inline]\n+    fn sqrt2() -> f64 { 1.41421356237309504880168872420969808 }\n+\n+    /// 1.0 / sqrt(2.0)\n+    #[inline]\n+    fn frac_1_sqrt2() -> f64 { 0.707106781186547524400844362104849039 }\n+\n+    /// Euler's number\n+    #[inline]\n+    fn e() -> f64 { 2.71828182845904523536028747135266250 }\n+\n+    /// log2(e)\n+    #[inline]\n+    fn log2_e() -> f64 { 1.44269504088896340735992468100189214 }\n+\n+    /// log10(e)\n+    #[inline]\n+    fn log10_e() -> f64 { 0.434294481903251827651128918916605082 }\n+\n+    /// ln(2.0)\n+    #[inline]\n+    fn ln_2() -> f64 { 0.693147180559945309417232121458176568 }\n+\n+    /// ln(10.0)\n+    #[inline]\n+    fn ln_10() -> f64 { 2.30258509299404568401799145468436421 }\n+\n     /// The reciprocal (multiplicative inverse) of the number\n     #[inline]\n     fn recip(&self) -> f64 { 1.0 / *self }\n-}\n \n-impl Algebraic for f64 {\n     #[inline]\n     fn pow(&self, n: &f64) -> f64 { pow(*self, *n) }\n \n@@ -370,9 +436,7 @@ impl Algebraic for f64 {\n \n     #[inline]\n     fn hypot(&self, other: &f64) -> f64 { hypot(*self, *other) }\n-}\n \n-impl Trigonometric for f64 {\n     #[inline]\n     fn sin(&self) -> f64 { sin(*self) }\n \n@@ -399,9 +463,7 @@ impl Trigonometric for f64 {\n     fn sin_cos(&self) -> (f64, f64) {\n         (self.sin(), self.cos())\n     }\n-}\n \n-impl Exponential for f64 {\n     /// Returns the exponential of the number\n     #[inline]\n     fn exp(&self) -> f64 { exp(*self) }\n@@ -425,9 +487,7 @@ impl Exponential for f64 {\n     /// Returns the base 10 logarithm of the number\n     #[inline]\n     fn log10(&self) -> f64 { log10(*self) }\n-}\n \n-impl Hyperbolic for f64 {\n     #[inline]\n     fn sinh(&self) -> f64 { sinh(*self) }\n \n@@ -487,76 +547,6 @@ impl Hyperbolic for f64 {\n     fn atanh(&self) -> f64 {\n         0.5 * ((2.0 * *self) / (1.0 - *self)).ln_1p()\n     }\n-}\n-\n-impl Real for f64 {\n-    /// Archimedes' constant\n-    #[inline]\n-    fn pi() -> f64 { 3.14159265358979323846264338327950288 }\n-\n-    /// 2.0 * pi\n-    #[inline]\n-    fn two_pi() -> f64 { 6.28318530717958647692528676655900576 }\n-\n-    /// pi / 2.0\n-    #[inline]\n-    fn frac_pi_2() -> f64 { 1.57079632679489661923132169163975144 }\n-\n-    /// pi / 3.0\n-    #[inline]\n-    fn frac_pi_3() -> f64 { 1.04719755119659774615421446109316763 }\n-\n-    /// pi / 4.0\n-    #[inline]\n-    fn frac_pi_4() -> f64 { 0.785398163397448309615660845819875721 }\n-\n-    /// pi / 6.0\n-    #[inline]\n-    fn frac_pi_6() -> f64 { 0.52359877559829887307710723054658381 }\n-\n-    /// pi / 8.0\n-    #[inline]\n-    fn frac_pi_8() -> f64 { 0.39269908169872415480783042290993786 }\n-\n-    /// 1.0 / pi\n-    #[inline]\n-    fn frac_1_pi() -> f64 { 0.318309886183790671537767526745028724 }\n-\n-    /// 2.0 / pi\n-    #[inline]\n-    fn frac_2_pi() -> f64 { 0.636619772367581343075535053490057448 }\n-\n-    /// 2.0 / sqrt(pi)\n-    #[inline]\n-    fn frac_2_sqrtpi() -> f64 { 1.12837916709551257389615890312154517 }\n-\n-    /// sqrt(2.0)\n-    #[inline]\n-    fn sqrt2() -> f64 { 1.41421356237309504880168872420969808 }\n-\n-    /// 1.0 / sqrt(2.0)\n-    #[inline]\n-    fn frac_1_sqrt2() -> f64 { 0.707106781186547524400844362104849039 }\n-\n-    /// Euler's number\n-    #[inline]\n-    fn e() -> f64 { 2.71828182845904523536028747135266250 }\n-\n-    /// log2(e)\n-    #[inline]\n-    fn log2_e() -> f64 { 1.44269504088896340735992468100189214 }\n-\n-    /// log10(e)\n-    #[inline]\n-    fn log10_e() -> f64 { 0.434294481903251827651128918916605082 }\n-\n-    /// ln(2.0)\n-    #[inline]\n-    fn ln_2() -> f64 { 0.693147180559945309417232121458176568 }\n-\n-    /// ln(10.0)\n-    #[inline]\n-    fn ln_10() -> f64 { 2.30258509299404568401799145468436421 }\n \n     /// Converts to degrees, assuming the number is in radians\n     #[inline]"}, {"sha": "1369df27565cde5721e91a8ac69692c48dd63a56", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 93, "deletions": 113, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -154,17 +154,38 @@ pub trait Round {\n     fn fract(&self) -> Self;\n }\n \n-/// Trait for common fractional operations.\n-pub trait Fractional: Num\n-                    + Orderable\n-                    + Round\n-                    + Div<Self,Self> {\n+/// Defines constants and methods common to real numbers\n+pub trait Real: Signed\n+              + Orderable\n+              + Round\n+              + Div<Self,Self> {\n+    // Common Constants\n+    // FIXME (#5527): These should be associated constants\n+    fn pi() -> Self;\n+    fn two_pi() -> Self;\n+    fn frac_pi_2() -> Self;\n+    fn frac_pi_3() -> Self;\n+    fn frac_pi_4() -> Self;\n+    fn frac_pi_6() -> Self;\n+    fn frac_pi_8() -> Self;\n+    fn frac_1_pi() -> Self;\n+    fn frac_2_pi() -> Self;\n+    fn frac_2_sqrtpi() -> Self;\n+    fn sqrt2() -> Self;\n+    fn frac_1_sqrt2() -> Self;\n+    fn e() -> Self;\n+    fn log2_e() -> Self;\n+    fn log10_e() -> Self;\n+    fn ln_2() -> Self;\n+    fn ln_10() -> Self;\n+\n+    // Fractional functions\n+\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     fn recip(&self) -> Self;\n-}\n \n-/// A collection of algebraic operations.\n-pub trait Algebraic {\n+    // Algebraic functions\n+\n     /// Raise a number to a power.\n     fn pow(&self, n: &Self) -> Self;\n     /// Take the square root of a number.\n@@ -176,31 +197,9 @@ pub trait Algebraic {\n     /// Calculate the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     fn hypot(&self, other: &Self) -> Self;\n-}\n \n-/// Raise a number to a power.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::num;\n-///\n-/// let sixteen: f64 = num::pow(2.0, 4.0);\n-/// assert_eq!(sixteen, 16.0);\n-/// ```\n-#[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n-/// Take the square root of a number.\n-#[inline(always)] pub fn sqrt<T: Algebraic>(value: T) -> T { value.sqrt() }\n-/// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n-#[inline(always)] pub fn rsqrt<T: Algebraic>(value: T) -> T { value.rsqrt() }\n-/// Take the cubic root of a number.\n-#[inline(always)] pub fn cbrt<T: Algebraic>(value: T) -> T { value.cbrt() }\n-/// Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and\n-/// `y`.\n-#[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n+    // Trigonometric functions\n \n-/// A trait for trigonometric functions.\n-pub trait Trigonometric {\n     /// Computes the sine of a number (in radians).\n     fn sin(&self) -> Self;\n     /// Computes the cosine of a number (in radians).\n@@ -219,42 +218,19 @@ pub trait Trigonometric {\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n     fn atan(&self) -> Self;\n-\n     /// Computes the four quadrant arctangent of a number, `y`, and another\n     /// number `x`. Return value is in radians in the range [-pi, pi].\n     fn atan2(&self, other: &Self) -> Self;\n-\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n     fn sin_cos(&self) -> (Self, Self);\n-}\n \n-/// Sine function.\n-#[inline(always)] pub fn sin<T: Trigonometric>(value: T) -> T { value.sin() }\n-/// Cosine function.\n-#[inline(always)] pub fn cos<T: Trigonometric>(value: T) -> T { value.cos() }\n-/// Tangent function.\n-#[inline(always)] pub fn tan<T: Trigonometric>(value: T) -> T { value.tan() }\n+    // Exponential functions\n \n-/// Compute the arcsine of the number.\n-#[inline(always)] pub fn asin<T: Trigonometric>(value: T) -> T { value.asin() }\n-/// Compute the arccosine of the number.\n-#[inline(always)] pub fn acos<T: Trigonometric>(value: T) -> T { value.acos() }\n-/// Compute the arctangent of the number.\n-#[inline(always)] pub fn atan<T: Trigonometric>(value: T) -> T { value.atan() }\n-\n-/// Compute the arctangent with 2 arguments.\n-#[inline(always)] pub fn atan2<T: Trigonometric>(x: T, y: T) -> T { x.atan2(&y) }\n-/// Simultaneously computes the sine and cosine of the number.\n-#[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n-\n-/// A trait exponential functions.\n-pub trait Exponential {\n     /// Returns `e^(self)`, (the exponential function).\n     fn exp(&self) -> Self;\n     /// Returns 2 raised to the power of the number, `2^(self)`.\n     fn exp2(&self) -> Self;\n-\n     /// Returns the natural logarithm of the number.\n     fn ln(&self) -> Self;\n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -263,78 +239,21 @@ pub trait Exponential {\n     fn log2(&self) -> Self;\n     /// Returns the base 10 logarithm of the number.\n     fn log10(&self) -> Self;\n-}\n-\n-/// Returns `e^(value)`, (the exponential function).\n-#[inline(always)] pub fn exp<T: Exponential>(value: T) -> T { value.exp() }\n-/// Returns 2 raised to the power of the number, `2^(value)`.\n-#[inline(always)] pub fn exp2<T: Exponential>(value: T) -> T { value.exp2() }\n \n-/// Returns the natural logarithm of the number.\n-#[inline(always)] pub fn ln<T: Exponential>(value: T) -> T { value.ln() }\n-/// Returns the logarithm of the number with respect to an arbitrary base.\n-#[inline(always)] pub fn log<T: Exponential>(value: T, base: T) -> T { value.log(&base) }\n-/// Returns the base 2 logarithm of the number.\n-#[inline(always)] pub fn log2<T: Exponential>(value: T) -> T { value.log2() }\n-/// Returns the base 10 logarithm of the number.\n-#[inline(always)] pub fn log10<T: Exponential>(value: T) -> T { value.log10() }\n+    // Hyperbolic functions\n \n-/// A trait hyperbolic functions.\n-pub trait Hyperbolic: Exponential {\n     /// Hyperbolic sine function.\n     fn sinh(&self) -> Self;\n     /// Hyperbolic cosine function.\n     fn cosh(&self) -> Self;\n     /// Hyperbolic tangent function.\n     fn tanh(&self) -> Self;\n-\n     /// Inverse hyperbolic sine function.\n     fn asinh(&self) -> Self;\n     /// Inverse hyperbolic cosine function.\n     fn acosh(&self) -> Self;\n     /// Inverse hyperbolic tangent function.\n     fn atanh(&self) -> Self;\n-}\n-\n-/// Hyperbolic sine function.\n-#[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n-/// Hyperbolic cosine function.\n-#[inline(always)] pub fn cosh<T: Hyperbolic>(value: T) -> T { value.cosh() }\n-/// Hyperbolic tangent function.\n-#[inline(always)] pub fn tanh<T: Hyperbolic>(value: T) -> T { value.tanh() }\n-\n-/// Inverse hyperbolic sine function.\n-#[inline(always)] pub fn asinh<T: Hyperbolic>(value: T) -> T { value.asinh() }\n-/// Inverse hyperbolic cosine function.\n-#[inline(always)] pub fn acosh<T: Hyperbolic>(value: T) -> T { value.acosh() }\n-/// Inverse hyperbolic tangent function.\n-#[inline(always)] pub fn atanh<T: Hyperbolic>(value: T) -> T { value.atanh() }\n-\n-/// Defines constants and methods common to real numbers\n-pub trait Real: Signed\n-              + Fractional\n-              + Algebraic\n-              + Trigonometric\n-              + Hyperbolic {\n-    // Common Constants\n-    // FIXME (#5527): These should be associated constants\n-    fn pi() -> Self;\n-    fn two_pi() -> Self;\n-    fn frac_pi_2() -> Self;\n-    fn frac_pi_3() -> Self;\n-    fn frac_pi_4() -> Self;\n-    fn frac_pi_6() -> Self;\n-    fn frac_pi_8() -> Self;\n-    fn frac_1_pi() -> Self;\n-    fn frac_2_pi() -> Self;\n-    fn frac_2_sqrtpi() -> Self;\n-    fn sqrt2() -> Self;\n-    fn frac_1_sqrt2() -> Self;\n-    fn e() -> Self;\n-    fn log2_e() -> Self;\n-    fn log10_e() -> Self;\n-    fn ln_2() -> Self;\n-    fn ln_10() -> Self;\n \n     // Angular conversions\n \n@@ -344,6 +263,67 @@ pub trait Real: Signed\n     fn to_radians(&self) -> Self;\n }\n \n+/// Raise a number to a power.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::num;\n+///\n+/// let sixteen: f64 = num::pow(2.0, 4.0);\n+/// assert_eq!(sixteen, 16.0);\n+/// ```\n+#[inline(always)] pub fn pow<T: Real>(value: T, n: T) -> T { value.pow(&n) }\n+/// Take the square root of a number.\n+#[inline(always)] pub fn sqrt<T: Real>(value: T) -> T { value.sqrt() }\n+/// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+#[inline(always)] pub fn rsqrt<T: Real>(value: T) -> T { value.rsqrt() }\n+/// Take the cubic root of a number.\n+#[inline(always)] pub fn cbrt<T: Real>(value: T) -> T { value.cbrt() }\n+/// Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and\n+/// `y`.\n+#[inline(always)] pub fn hypot<T: Real>(x: T, y: T) -> T { x.hypot(&y) }\n+/// Sine function.\n+#[inline(always)] pub fn sin<T: Real>(value: T) -> T { value.sin() }\n+/// Cosine function.\n+#[inline(always)] pub fn cos<T: Real>(value: T) -> T { value.cos() }\n+/// Tangent function.\n+#[inline(always)] pub fn tan<T: Real>(value: T) -> T { value.tan() }\n+/// Compute the arcsine of the number.\n+#[inline(always)] pub fn asin<T: Real>(value: T) -> T { value.asin() }\n+/// Compute the arccosine of the number.\n+#[inline(always)] pub fn acos<T: Real>(value: T) -> T { value.acos() }\n+/// Compute the arctangent of the number.\n+#[inline(always)] pub fn atan<T: Real>(value: T) -> T { value.atan() }\n+/// Compute the arctangent with 2 arguments.\n+#[inline(always)] pub fn atan2<T: Real>(x: T, y: T) -> T { x.atan2(&y) }\n+/// Simultaneously computes the sine and cosine of the number.\n+#[inline(always)] pub fn sin_cos<T: Real>(value: T) -> (T, T) { value.sin_cos() }\n+/// Returns `e^(value)`, (the exponential function).\n+#[inline(always)] pub fn exp<T: Real>(value: T) -> T { value.exp() }\n+/// Returns 2 raised to the power of the number, `2^(value)`.\n+#[inline(always)] pub fn exp2<T: Real>(value: T) -> T { value.exp2() }\n+/// Returns the natural logarithm of the number.\n+#[inline(always)] pub fn ln<T: Real>(value: T) -> T { value.ln() }\n+/// Returns the logarithm of the number with respect to an arbitrary base.\n+#[inline(always)] pub fn log<T: Real>(value: T, base: T) -> T { value.log(&base) }\n+/// Returns the base 2 logarithm of the number.\n+#[inline(always)] pub fn log2<T: Real>(value: T) -> T { value.log2() }\n+/// Returns the base 10 logarithm of the number.\n+#[inline(always)] pub fn log10<T: Real>(value: T) -> T { value.log10() }\n+/// Hyperbolic sine function.\n+#[inline(always)] pub fn sinh<T: Real>(value: T) -> T { value.sinh() }\n+/// Hyperbolic cosine function.\n+#[inline(always)] pub fn cosh<T: Real>(value: T) -> T { value.cosh() }\n+/// Hyperbolic tangent function.\n+#[inline(always)] pub fn tanh<T: Real>(value: T) -> T { value.tanh() }\n+/// Inverse hyperbolic sine function.\n+#[inline(always)] pub fn asinh<T: Real>(value: T) -> T { value.asinh() }\n+/// Inverse hyperbolic cosine function.\n+#[inline(always)] pub fn acosh<T: Real>(value: T) -> T { value.acosh() }\n+/// Inverse hyperbolic tangent function.\n+#[inline(always)] pub fn atanh<T: Real>(value: T) -> T { value.atanh() }\n+\n /// Methods that are harder to implement and not commonly used.\n pub trait RealExt: Real {\n     // FIXME (#5527): usages of `int` should be replaced with an associated"}, {"sha": "afacc4e8c1761d8073c3ee913d33eebd75915182", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -59,9 +59,7 @@ pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::Times;\n-pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};\n-pub use num::{Bitwise, BitCount, Bounded};\n-pub use num::{Integer, Fractional, Real, RealExt};\n+pub use num::{Bitwise, BitCount, Bounded, Integer, Real};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Primitive, Int, Float, ToStrRadix, ToPrimitive, FromPrimitive};"}, {"sha": "287a4a36293841c6c6d2ff7fc57778a2f20b5f4d", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -10,7 +10,7 @@\n \n //! The exponential distribution.\n \n-use num::Exponential;\n+use num::Real;\n use rand::{Rng, Rand};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n "}, {"sha": "38644f8470779512a70a994a04de41bab04a9e66", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -10,7 +10,7 @@\n \n //! The Gamma and derived distributions.\n \n-use num::Algebraic;\n+use num::Real;\n use num;\n use rand::{Rng, Open01};\n use super::normal::StandardNormal;"}, {"sha": "074a181ca3c7ef646c46e4b06adbea4568f8cc7a", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -10,7 +10,7 @@\n \n //! The normal and derived distributions.\n \n-use num::Exponential;\n+use num::Real;\n use rand::{Rng, Rand, Open01};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n "}, {"sha": "18d17eed885db5e432da08c4e50070c4d2c610ff", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f5b23fc08ff22dc513c5f333569b7e8b9313d/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=1b0f5b23fc08ff22dc513c5f333569b7e8b9313d", "patch": "@@ -31,7 +31,7 @@\n \n use clone::Clone;\n use kinds::Send;\n-use num::{Exponential,Algebraic,Round};\n+use num::{Real, Round};\n use option::{Option, Some, None};\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicUint,Relaxed,Release,Acquire};"}]}