{"sha": "7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOGZmODRiNTEwZTNmZjA0ODY1Y2ZkZDVlZjk1ZTY3NzIyN2UwYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-05T06:55:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-05T06:55:42Z"}, "message": "Auto merge of #75155 - davidtwco:polymorphization-incr-comp-optimisations, r=lcnr\n\npolymorphization: various improvements\n\nThis PR includes a handful of polymorphisation-related changes:\n\n- @Mark-Simulacrum's suggestions [from this comment](https://github.com/rust-lang/rust/pull/74633#issuecomment-668684433):\n    - Use a `FiniteBitSet<u32>` over a `FiniteBitSet<u64>` as most functions won't have 64 generic parameters.\n    - Don't encode polymorphisation results in metadata when every parameter is used (in this case, just invoking polymorphisation will probably be quicker).\n- @lcnr's suggestion [from this comment](https://github.com/rust-lang/rust/pull/74717#discussion_r463690015).\n    - Add an debug assertion in `ensure_monomorphic_enough` to make sure that polymorphisation did what we expect.\n\nr? @lcnr", "tree": {"sha": "4222d73f17679d9387b818ac94f7399103bdf062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4222d73f17679d9387b818ac94f7399103bdf062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "html_url": "https://github.com/rust-lang/rust/commit/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab2ae0404014b4fbc5a32a8c954fe6068b25f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab2ae0404014b4fbc5a32a8c954fe6068b25f71", "html_url": "https://github.com/rust-lang/rust/commit/dab2ae0404014b4fbc5a32a8c954fe6068b25f71"}, {"sha": "63fadee21f4d3d7a07381dafc6cd2dfd644b5b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/63fadee21f4d3d7a07381dafc6cd2dfd644b5b02", "html_url": "https://github.com/rust-lang/rust/commit/63fadee21f4d3d7a07381dafc6cd2dfd644b5b02"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "e4b7c24a24989b3e9adffb533740013db24f773d", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -1034,6 +1034,30 @@ pub trait FiniteBitSetTy:\n     fn checked_shr(self, rhs: u32) -> Option<Self>;\n }\n \n+impl FiniteBitSetTy for u32 {\n+    const DOMAIN_SIZE: u32 = 32;\n+\n+    const FILLED: Self = Self::MAX;\n+    const EMPTY: Self = Self::MIN;\n+\n+    const ONE: Self = 1u32;\n+    const ZERO: Self = 0u32;\n+\n+    fn checked_shl(self, rhs: u32) -> Option<Self> {\n+        self.checked_shl(rhs)\n+    }\n+\n+    fn checked_shr(self, rhs: u32) -> Option<Self> {\n+        self.checked_shr(rhs)\n+    }\n+}\n+\n+impl std::fmt::Debug for FiniteBitSet<u32> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:032b}\", self.0)\n+    }\n+}\n+\n impl FiniteBitSetTy for u64 {\n     const DOMAIN_SIZE: u32 = 64;\n "}, {"sha": "10dc407c060fe0f890582927497e9bed3b54643a", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -1150,7 +1150,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, tcx))\n     }\n \n-    fn get_unused_generic_params(&self, id: DefIndex) -> FiniteBitSet<u64> {\n+    fn get_unused_generic_params(&self, id: DefIndex) -> FiniteBitSet<u32> {\n         self.root\n             .tables\n             .unused_generic_params"}, {"sha": "aec9e8daa0f82d9779a193cbcadc8741ebada114", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -1134,8 +1134,11 @@ impl EncodeContext<'a, 'tcx> {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n             record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n-            record!(self.tables.unused_generic_params[def_id.to_def_id()] <-\n-                    self.tcx.unused_generic_params(def_id));\n+\n+            let unused = self.tcx.unused_generic_params(def_id);\n+            if !unused.is_empty() {\n+                record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n+            }\n         }\n     }\n "}, {"sha": "465461ebf97691c487543773d935daab21b11ea2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -285,7 +285,7 @@ define_tables! {\n     super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n     mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n-    unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u64>>>,\n+    unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "7e9226f83c32d3b013107929fc67ae29e2632dab", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -1319,7 +1319,7 @@ rustc_queries! {\n         query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n             desc { \"codegen_unit\" }\n         }\n-        query unused_generic_params(key: DefId) -> FiniteBitSet<u64> {\n+        query unused_generic_params(key: DefId) -> FiniteBitSet<u32> {\n             cache_on_disk_if { key.is_local() }\n             desc {\n                 |tcx| \"determining which generic parameters are unused by `{}`\","}, {"sha": "57c5fc59cc0b84aeecf88703d5e751ec6e062e59", "filename": "src/librustc_mir/interpret/util.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_mir%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_mir%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Futil.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -47,14 +47,26 @@ where\n                             unused_params.contains(index).map(|unused| !unused).unwrap_or(true);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n-                        if is_used && subst.needs_subst() {\n+                        match (is_used, subst.needs_subst()) {\n                             // Just in case there are closures or generators within this subst,\n                             // recurse.\n-                            if subst.super_visit_with(self) {\n+                            (true, true) if subst.super_visit_with(self) => {\n                                 // Only return when we find a parameter so the remaining substs\n                                 // are not skipped.\n                                 return true;\n                             }\n+                            // Confirm that polymorphization replaced the parameter with\n+                            // `ty::Param`/`ty::ConstKind::Param`.\n+                            (false, true) if cfg!(debug_assertions) => match subst.unpack() {\n+                                ty::subst::GenericArgKind::Type(ty) => {\n+                                    assert!(matches!(ty.kind, ty::Param(_)))\n+                                }\n+                                ty::subst::GenericArgKind::Const(ct) => {\n+                                    assert!(matches!(ct.val, ty::ConstKind::Param(_)))\n+                                }\n+                                ty::subst::GenericArgKind::Lifetime(..) => (),\n+                            },\n+                            _ => {}\n                         }\n                     }\n                     false"}, {"sha": "8fc1458f592054ee47064dbc4bc3fb63e8b74163", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "patch": "@@ -28,14 +28,21 @@ pub fn provide(providers: &mut Providers) {\n /// Determine which generic parameters are used by the function/method/closure represented by\n /// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n /// indicates all parameters are used).\n-fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u64> {\n+fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     debug!(\"unused_generic_params({:?})\", def_id);\n \n     if !tcx.sess.opts.debugging_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return FiniteBitSet::new_empty();\n     }\n \n+    // Polymorphization results are stored in cross-crate metadata only when there are unused\n+    // parameters, so assume that non-local items must have only used parameters (else this query\n+    // would not be invoked, and the cross-crate metadata used instead).\n+    if !def_id.is_local() {\n+        return FiniteBitSet::new_empty();\n+    }\n+\n     let generics = tcx.generics_of(def_id);\n     debug!(\"unused_generic_params: generics={:?}\", generics);\n \n@@ -53,7 +60,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u64> {\n     // Create a bitset with N rightmost ones for each parameter.\n     let generics_count: u32 =\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n-    let mut unused_parameters = FiniteBitSet::<u64>::new_empty();\n+    let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n     unused_parameters.set_range(0..generics_count);\n     debug!(\"unused_generic_params: (start) unused_parameters={:?}\", unused_parameters);\n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n@@ -84,7 +91,7 @@ fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &mut FiniteBitSet<u64>,\n+    unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     if !tcx.is_trait(def_id) && (tcx.is_closure(def_id) || tcx.type_of(def_id).is_generator()) {\n         for param in &generics.params {\n@@ -110,11 +117,11 @@ fn mark_used_by_default_parameters<'tcx>(\n fn mark_used_by_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &mut FiniteBitSet<u64>,\n+    unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     let def_id = tcx.closure_base_def_id(def_id);\n \n-    let is_self_ty_used = |unused_parameters: &mut FiniteBitSet<u64>, self_ty: Ty<'tcx>| {\n+    let is_self_ty_used = |unused_parameters: &mut FiniteBitSet<u32>, self_ty: Ty<'tcx>| {\n         debug!(\"unused_generic_params: self_ty={:?}\", self_ty);\n         if let ty::Param(param) = self_ty.kind {\n             !unused_parameters.contains(param.index).unwrap_or(false)\n@@ -123,7 +130,7 @@ fn mark_used_by_predicates<'tcx>(\n         }\n     };\n \n-    let mark_ty = |unused_parameters: &mut FiniteBitSet<u64>, ty: Ty<'tcx>| {\n+    let mark_ty = |unused_parameters: &mut FiniteBitSet<u32>, ty: Ty<'tcx>| {\n         let mut vis = UsedGenericParametersVisitor { tcx, def_id, unused_parameters };\n         ty.visit_with(&mut vis);\n     };\n@@ -159,7 +166,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &FiniteBitSet<u64>,\n+    unused_parameters: &FiniteBitSet<u32>,\n ) {\n     debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n     let base_def_id = tcx.closure_base_def_id(def_id);\n@@ -195,7 +202,7 @@ fn emit_unused_generic_params_error<'tcx>(\n struct UsedGenericParametersVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &'a mut FiniteBitSet<u64>,\n+    unused_parameters: &'a mut FiniteBitSet<u32>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {"}]}