{"sha": "56bc4c249093f8b63fbc2dc35b4343871808d282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YmM0YzI0OTA5M2Y4YjYzZmJjMmRjMzViNDM0Mzg3MTgwOGQyODI=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-12T19:43:42Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-12T19:43:42Z"}, "message": "Fix self referential impl Trait substitutions\n\nA high impact bug because a lot of common traits use a `Self`\nsubstitution by default. Should be backported to beta.\n\nThere was a check for this which wasn't catching all cases, it was made\nmore robust.\n\nFixes #49376\nFixes #50626\n\nr? @petrochenkov", "tree": {"sha": "bdbd489a4490db947de065844b508c051ed22ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbd489a4490db947de065844b508c051ed22ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56bc4c249093f8b63fbc2dc35b4343871808d282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56bc4c249093f8b63fbc2dc35b4343871808d282", "html_url": "https://github.com/rust-lang/rust/commit/56bc4c249093f8b63fbc2dc35b4343871808d282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56bc4c249093f8b63fbc2dc35b4343871808d282/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6db79f2ca07e4e533f4e940462a42f1093e52f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6db79f2ca07e4e533f4e940462a42f1093e52f3", "html_url": "https://github.com/rust-lang/rust/commit/e6db79f2ca07e4e533f4e940462a42f1093e52f3"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "42031d9cc56308d73ee38d0d851a8050e1e96884", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56bc4c249093f8b63fbc2dc35b4343871808d282/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56bc4c249093f8b63fbc2dc35b4343871808d282/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=56bc4c249093f8b63fbc2dc35b4343871808d282", "patch": "@@ -30,13 +30,15 @@ use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::maps::Providers;\n+use rustc::ty::subst::UnpackedKind;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::{self, CRATE_NODE_ID, Ident};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n use std::cmp;\n use std::mem::replace;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n \n mod diagnostics;\n@@ -624,6 +626,7 @@ struct TypePrivacyVisitor<'a, 'tcx: 'a> {\n     in_body: bool,\n     span: Span,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n+    visited_anon_tys: FxHashSet<DefId>\n }\n \n impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n@@ -943,8 +946,15 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                             self.tcx.sess.span_err(self.span, &msg);\n                             return true;\n                         }\n-                        // `Self` here is the same `TyAnon`, so skip it to avoid infinite recursion\n-                        for subst in trait_ref.substs.iter().skip(1) {\n+                        for subst in trait_ref.substs.iter() {\n+                            // Skip repeated `TyAnon`s to avoid infinite recursion.\n+                            if let UnpackedKind::Type(ty) = subst.unpack() {\n+                                if let ty::TyAnon(def_id, ..) = ty.sty {\n+                                    if !self.visited_anon_tys.insert(def_id) {\n+                                        continue;\n+                                    }\n+                                }\n+                            }\n                             if subst.visit_with(self) {\n                                 return true;\n                             }\n@@ -1677,6 +1687,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         in_body: false,\n         span: krate.span,\n         empty_tables: &empty_tables,\n+        visited_anon_tys: FxHashSet()\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "b687b485fce21edd27bd0fd560317a9dc0256f78", "filename": "src/test/run-pass/impl-trait/issue-49376.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/56bc4c249093f8b63fbc2dc35b4343871808d282/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-49376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56bc4c249093f8b63fbc2dc35b4343871808d282/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-49376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-49376.rs?ref=56bc4c249093f8b63fbc2dc35b4343871808d282", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for nested self-reference which caused a stack overflow.\n+\n+use std::fmt::Debug;\n+use std::ops::*;\n+\n+fn gen() -> impl PartialOrd + PartialEq + Debug { }\n+\n+struct Bar {}\n+trait Foo<T = Self> {}\n+impl Foo for Bar {}\n+\n+fn foo() -> impl Foo {\n+    Bar {}\n+}\n+\n+fn test_impl_ops() -> impl Add + Sub + Mul + Div { 1 }\n+fn test_impl_assign_ops() -> impl AddAssign + SubAssign + MulAssign + DivAssign { 1 }\n+\n+fn main() {}"}]}