{"sha": "b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "node_id": "C_kwDOAAsO6NoAKGIwNWM3OTBmZDZhYzBhZDA1MGVhZDNlN2FlOTU2NzI5ZmNmN2UwZGI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-22T12:06:17Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T16:48:24Z"}, "message": "Reuse the ctfe error emitting logic for the future incompat lint", "tree": {"sha": "d269991cb18a0ab33d77b61dcb4015d1a7bafb46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d269991cb18a0ab33d77b61dcb4015d1a7bafb46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "html_url": "https://github.com/rust-lang/rust/commit/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec05e9c73fb5590a4f302bdf5426fc0cabe6f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec05e9c73fb5590a4f302bdf5426fc0cabe6f17", "html_url": "https://github.com/rust-lang/rust/commit/dec05e9c73fb5590a4f302bdf5426fc0cabe6f17"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "abe06737def0ba50507868b8af93a9112d00d173", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::def::DefKind;\n use rustc_hir::{LangItem, CRATE_HIR_ID};\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{PointerArithmetic, UndefinedBehaviorInfo};\n+use rustc_middle::mir::interpret::{InterpError, PointerArithmetic, UndefinedBehaviorInfo};\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n@@ -353,22 +353,27 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 ecx.cur_span(),\n                 \"`alignment_check_failed` called when no alignment check requested\"\n             ),\n-            CheckAlignment::FutureIncompat => ecx.tcx.struct_span_lint_hir(\n-                INVALID_ALIGNMENT,\n-                ecx.stack().iter().find_map(|frame| frame.lint_root()).unwrap_or(CRATE_HIR_ID),\n-                ecx.cur_span(),\n-                UndefinedBehaviorInfo::AlignmentCheckFailed { has, required }.to_string(),\n-                |db| {\n-                    let mut stacktrace = ecx.generate_stacktrace();\n-                    // Filter out `requires_caller_location` frames.\n-                    stacktrace\n-                        .retain(|frame| !frame.instance.def.requires_caller_location(*ecx.tcx));\n-                    for frame in stacktrace {\n-                        db.span_label(frame.span, format!(\"inside `{}`\", frame.instance));\n-                    }\n-                    db\n-                },\n-            ),\n+            CheckAlignment::FutureIncompat => {\n+                let err = ConstEvalErr::new(\n+                    ecx,\n+                    InterpError::UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed {\n+                        has,\n+                        required,\n+                    })\n+                    .into(),\n+                    None,\n+                );\n+                ecx.tcx.struct_span_lint_hir(\n+                    INVALID_ALIGNMENT,\n+                    ecx.stack().iter().find_map(|frame| frame.lint_root()).unwrap_or(CRATE_HIR_ID),\n+                    err.span,\n+                    err.error.to_string(),\n+                    |db| {\n+                        err.decorate(db, |_| {});\n+                        db\n+                    },\n+                );\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "a0a8d76d10d2d9b86e6fbd6733ddd3662f0b6026", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "patch": "@@ -151,18 +151,17 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: accessing memory with alignment 1, but alignment 4 is required\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-   = note: inside `std::ptr::read::<u32>`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-   = note: inside `ptr::const_ptr::<impl *const u32>::read`\n-   |\n-  ::: $DIR/ub-ref-ptr.rs:65:5\n+note: inside `UNALIGNED_READ`\n+  --> $DIR/ub-ref-ptr.rs:65:5\n    |\n LL |     ptr.read();\n-   |     ---------- inside `UNALIGNED_READ`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+   |     ^^^^^^^^^^\n    = note: `#[deny(invalid_alignment)]` on by default\n \n error: aborting due to 15 previous errors\n@@ -172,17 +171,16 @@ Future incompatibility report: Future breakage diagnostic:\n error: accessing memory with alignment 1, but alignment 4 is required\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-   = note: inside `std::ptr::read::<u32>`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-   = note: inside `ptr::const_ptr::<impl *const u32>::read`\n-   |\n-  ::: $DIR/ub-ref-ptr.rs:65:5\n+note: inside `UNALIGNED_READ`\n+  --> $DIR/ub-ref-ptr.rs:65:5\n    |\n LL |     ptr.read();\n-   |     ---------- inside `UNALIGNED_READ`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+   |     ^^^^^^^^^^\n    = note: `#[deny(invalid_alignment)]` on by default\n "}, {"sha": "d53b44671e3f48eb53a2c6f1c3a085cb95b92d7b", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b05c790fd6ac0ad050ead3e7ae956729fcf7e0db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=b05c790fd6ac0ad050ead3e7ae956729fcf7e0db", "patch": "@@ -151,18 +151,17 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: accessing memory with alignment 1, but alignment 4 is required\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-   = note: inside `std::ptr::read::<u32>`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-   = note: inside `ptr::const_ptr::<impl *const u32>::read`\n-   |\n-  ::: $DIR/ub-ref-ptr.rs:65:5\n+note: inside `UNALIGNED_READ`\n+  --> $DIR/ub-ref-ptr.rs:65:5\n    |\n LL |     ptr.read();\n-   |     ---------- inside `UNALIGNED_READ`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+   |     ^^^^^^^^^^\n    = note: `#[deny(invalid_alignment)]` on by default\n \n error: aborting due to 15 previous errors\n@@ -172,17 +171,16 @@ Future incompatibility report: Future breakage diagnostic:\n error: accessing memory with alignment 1, but alignment 4 is required\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-   = note: inside `std::ptr::read::<u32>`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |\n-   = note: inside `ptr::const_ptr::<impl *const u32>::read`\n-   |\n-  ::: $DIR/ub-ref-ptr.rs:65:5\n+note: inside `UNALIGNED_READ`\n+  --> $DIR/ub-ref-ptr.rs:65:5\n    |\n LL |     ptr.read();\n-   |     ---------- inside `UNALIGNED_READ`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/104616>\n+   |     ^^^^^^^^^^\n    = note: `#[deny(invalid_alignment)]` on by default\n "}]}