{"sha": "12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOTEwNDE4ZmJmZDFkYTc2Y2ZjNDNmZmE3YTE1ZDBiMGM0YWNiNWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-24T22:58:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-01T23:44:36Z"}, "message": "std: Don't use a wrapper for the float error type\n\nEnsures that the same error type is propagated throughout. Unnecessary leakage\nof the internals is prevented through the usage of stability attributes.\n\nCloses #24748", "tree": {"sha": "c4939c074d8444c344b1d42f621d424f6ef2bcbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4939c074d8444c344b1d42f621d424f6ef2bcbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "html_url": "https://github.com/rust-lang/rust/commit/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3345cb0a70cdac95e126b611b355ab4d36ca3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3345cb0a70cdac95e126b611b355ab4d36ca3df", "html_url": "https://github.com/rust-lang/rust/commit/f3345cb0a70cdac95e126b611b355ab4d36ca3df"}], "stats": {"total": 69, "additions": 22, "deletions": 47}, "files": [{"sha": "e3fa7047ec88c71be6253723e6509d2e48c9376a", "filename": "src/libcore/num/float_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat_macros.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -35,8 +35,8 @@ macro_rules! from_str_radix_float_impl {\n             }\n \n             let (is_positive, src) =  match src.slice_shift_char() {\n-                None             => return Err(PFE { kind: Empty }),\n-                Some(('-', \"\"))  => return Err(PFE { kind: Empty }),\n+                None             => return Err(PFE { __kind: Empty }),\n+                Some(('-', \"\"))  => return Err(PFE { __kind: Empty }),\n                 Some(('-', src)) => (false, src),\n                 Some((_, _))     => (true,  src),\n             };\n@@ -88,7 +88,7 @@ macro_rules! from_str_radix_float_impl {\n                             break;  // start of fractional part\n                         },\n                         _ => {\n-                            return Err(PFE { kind: Invalid });\n+                            return Err(PFE { __kind: Invalid });\n                         },\n                     },\n                 }\n@@ -122,7 +122,7 @@ macro_rules! from_str_radix_float_impl {\n                                 break; // start of exponent\n                             },\n                             _ => {\n-                                return Err(PFE { kind: Invalid });\n+                                return Err(PFE { __kind: Invalid });\n                             },\n                         },\n                     }\n@@ -135,7 +135,7 @@ macro_rules! from_str_radix_float_impl {\n                     let base = match c {\n                         'E' | 'e' if radix == 10 => 10.0,\n                         'P' | 'p' if radix == 16 => 2.0,\n-                        _ => return Err(PFE { kind: Invalid }),\n+                        _ => return Err(PFE { __kind: Invalid }),\n                     };\n \n                     // Parse the exponent as decimal integer\n@@ -144,13 +144,13 @@ macro_rules! from_str_radix_float_impl {\n                         Some(('-', src)) => (false, src.parse::<usize>()),\n                         Some(('+', src)) => (true,  src.parse::<usize>()),\n                         Some((_, _))     => (true,  src.parse::<usize>()),\n-                        None             => return Err(PFE { kind: Invalid }),\n+                        None             => return Err(PFE { __kind: Invalid }),\n                     };\n \n                     match (is_positive, exp) {\n                         (true,  Ok(exp)) => base.powi(exp as i32),\n                         (false, Ok(exp)) => 1.0 / base.powi(exp as i32),\n-                        (_, Err(_))      => return Err(PFE { kind: Invalid }),\n+                        (_, Err(_))      => return Err(PFE { __kind: Invalid }),\n                     }\n                 },\n                 None => 1.0, // no exponent"}, {"sha": "71c2b38287e0e8088fbd9b88fb154260dbf990d7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -1524,7 +1524,11 @@ impl fmt::Display for ParseIntError {\n \n /// An error which can be returned when parsing a float.\n #[derive(Debug, Clone, PartialEq)]\n-pub struct ParseFloatError { pub kind: FloatErrorKind }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct ParseFloatError {\n+    #[doc(hidden)]\n+    pub __kind: FloatErrorKind\n+}\n \n #[derive(Debug, Clone, PartialEq)]\n pub enum FloatErrorKind {\n@@ -1533,9 +1537,9 @@ pub enum FloatErrorKind {\n }\n \n impl ParseFloatError {\n-    #[unstable(feature = \"core\", reason = \"available through Error trait\")]\n-    pub fn description(&self) -> &str {\n-        match self.kind {\n+    #[doc(hidden)]\n+    pub fn __description(&self) -> &str {\n+        match self.__kind {\n             FloatErrorKind::Empty => \"cannot parse float from empty string\",\n             FloatErrorKind::Invalid => \"invalid float literal\",\n         }\n@@ -1545,6 +1549,6 @@ impl ParseFloatError {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseFloatError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n+        self.__description().fmt(f)\n     }\n }"}, {"sha": "6d23df970000cab16ce5dbfa8473788abcb16875", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -147,7 +147,7 @@ impl Error for num::ParseIntError {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseFloatError {\n     fn description(&self) -> &str {\n-        self.description()\n+        self.__description()\n     }\n }\n "}, {"sha": "1ee3aab2727a864f8540e9ef95f87e1a09d7031c", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -21,7 +21,6 @@ use core::num;\n use intrinsics;\n use libc::c_int;\n use num::{FpCategory, ParseFloatError};\n-use sys_common::FromInner;\n \n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n pub use core::f32::{MIN_EXP, MAX_EXP, MIN_10_EXP};\n@@ -77,7 +76,7 @@ impl f32 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n-        num::Float::from_str_radix(s, radix).map_err(FromInner::from_inner)\n+        num::Float::from_str_radix(s, radix)\n     }\n \n     /// Returns `true` if this value is `NaN` and false otherwise."}, {"sha": "398afcb553c1ce5006593e1afcf35cbfc1e14ce0", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -20,7 +20,6 @@ use core::num;\n use intrinsics;\n use libc::c_int;\n use num::{FpCategory, ParseFloatError};\n-use sys_common::FromInner;\n \n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n pub use core::f64::{MIN_EXP, MAX_EXP, MIN_10_EXP};\n@@ -85,7 +84,7 @@ impl f64 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n-        num::Float::from_str_radix(s, radix).map_err(FromInner::from_inner)\n+        num::Float::from_str_radix(s, radix)\n     }\n \n     /// Returns `true` if this value is `NaN` and false otherwise."}, {"sha": "9a52a0214e9ccea8dee7bf9886ad4547f684be5a", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=12910418fbfd1da76cfc43ffa7a15d0b0c4acb5b", "patch": "@@ -16,16 +16,14 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-use fmt;\n-use core::num;\n-\n pub use core::num::{Zero, One};\n-pub use core::num::{FpCategory, ParseIntError};\n+pub use core::num::{FpCategory, ParseIntError, ParseFloatError};\n pub use core::num::{wrapping, Wrapping};\n \n-#[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n #[cfg(test)] use cmp::PartialEq;\n+#[cfg(test)] use fmt;\n #[cfg(test)] use marker::Copy;\n+#[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n \n /// Helper function for testing numeric operations\n #[cfg(test)]\n@@ -43,31 +41,6 @@ pub fn test_num<T>(ten: T, two: T) where\n     assert_eq!(ten.rem(two),  ten % two);\n }\n \n-/// An error which can be returned when parsing a float.\n-#[derive(Debug, Clone, PartialEq)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ParseFloatError { inner: num::ParseFloatError }\n-\n-impl ::sys_common::FromInner<num::ParseFloatError> for ParseFloatError {\n-    fn from_inner(inner: num::ParseFloatError) -> ParseFloatError {\n-        ParseFloatError { inner: inner }\n-    }\n-}\n-\n-impl ParseFloatError {\n-    #[unstable(feature = \"core\", reason = \"available through Error trait\")]\n-    pub fn description(&self) -> &str {\n-        self.inner.description()\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Display for ParseFloatError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use core::prelude::*;"}]}