{"sha": "0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTY4ZWU0MzA0N2FmOWQ3YmNmMjk1M2YxYjM2N2MzOGNiOGJmMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:12:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:12:28Z"}, "message": "minor", "tree": {"sha": "36a15fba4e1577a1d1cf4424e19eecda30c89422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a15fba4e1577a1d1cf4424e19eecda30c89422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "html_url": "https://github.com/rust-lang/rust/commit/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd4571bfe5220354f00e030f0a2d0a45e185712", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd4571bfe5220354f00e030f0a2d0a45e185712", "html_url": "https://github.com/rust-lang/rust/commit/4dd4571bfe5220354f00e030f0a2d0a45e185712"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "8882268e6fcb285505bc06ee6d3f1cf5da9880d9", "filename": "crates/libanalysis/src/api.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fapi.rs?ref=0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "patch": "@@ -55,11 +55,9 @@ pub struct Analysis {\n impl Analysis {\n     pub fn file_syntax(&self, file_id: FileId) -> File {\n         self.imp.file_syntax(file_id)\n-            .unwrap()\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> LineIndex {\n         self.imp.file_line_index(file_id)\n-            .unwrap()\n     }\n     pub fn extend_selection(&self, file: &File, range: TextRange) -> TextRange {\n         libeditor::extend_selection(file, range).unwrap_or(range)\n@@ -88,7 +86,6 @@ impl Analysis {\n     }\n     pub fn approximately_resolve_symbol(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, FileSymbol)> {\n         self.imp.approximately_resolve_symbol(file_id, offset)\n-            .unwrap()\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)"}, {"sha": "5168814e4ec8c9fc75c67bc2bab603bc336f0841", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f968ee43047af9d7bcf2953f1b367c38cb8bf1b/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=0f968ee43047af9d7bcf2953f1b367c38cb8bf1b", "patch": "@@ -141,16 +141,16 @@ impl WorldState {\n }\n \n impl World {\n-    pub fn file_syntax(&self, file_id: FileId) -> Result<File> {\n-        let data = self.file_data(file_id)?;\n-        Ok(data.syntax().clone())\n+    pub fn file_syntax(&self, file_id: FileId) -> File {\n+        self.file_data(file_id).syntax().clone()\n     }\n \n-    pub fn file_line_index(&self, id: FileId) -> Result<LineIndex> {\n-        let data = self.file_data(id)?;\n-        let index = data.lines\n-            .get_or_init(|| LineIndex::new(&data.text));\n-        Ok(index.clone())\n+    pub fn file_line_index(&self, id: FileId) -> LineIndex {\n+        let data = self.file_data(id);\n+        data\n+            .lines\n+            .get_or_init(|| LineIndex::new(&data.text))\n+            .clone()\n     }\n \n     pub fn world_symbols(&self, mut query: Query) -> Vec<(FileId, FileSymbol)> {\n@@ -170,7 +170,7 @@ impl World {\n             .parent_modules(\n                 id,\n                 &*self.file_resolver,\n-                &|file_id| self.file_syntax(file_id).unwrap(),\n+                &|file_id| self.file_syntax(file_id),\n             )\n             .into_iter()\n             .map(|(id, name, node)| {\n@@ -189,11 +189,11 @@ impl World {\n         &self,\n         id: FileId,\n         offset: TextUnit,\n-    ) -> Result<Vec<(FileId, FileSymbol)>> {\n-        let file = self.file_syntax(id)?;\n+    ) -> Vec<(FileId, FileSymbol)> {\n+        let file = self.file_syntax(id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n-            return Ok(self.index_resolve(name_ref));\n+            return self.index_resolve(name_ref);\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n@@ -212,15 +212,15 @@ impl World {\n                         (id, symbol)\n                     }).collect();\n \n-                    return Ok(res);\n+                    return res;\n                 }\n             }\n         }\n-        Ok(vec![])\n+        vec![]\n     }\n \n     pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n-        let syntax = self.file_syntax(file_id).unwrap();\n+        let syntax = self.file_syntax(file_id);\n         let mut res = libeditor::diagnostics(&syntax)\n             .into_iter()\n             .map(|d| Diagnostic { range: d.range, message: d.msg, fix: None })\n@@ -229,7 +229,7 @@ impl World {\n         self.data.module_map.problems(\n             file_id,\n             &*self.file_resolver,\n-            &|file_id| self.file_syntax(file_id).unwrap(),\n+            &|file_id| self.file_syntax(file_id),\n             |name_node, problem| {\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n@@ -272,7 +272,7 @@ impl World {\n     }\n \n     pub fn assists(&self, file_id: FileId, offset: TextUnit) -> Vec<SourceChange> {\n-        let file = self.file_syntax(file_id).unwrap();\n+        let file = self.file_syntax(file_id);\n         let actions = vec![\n             (\"flip comma\", libeditor::flip_comma(&file, offset).map(|f| f())),\n             (\"add `#[derive]`\", libeditor::add_derive(&file, offset).map(|f| f())),\n@@ -308,7 +308,7 @@ impl World {\n             .child_module_by_name(\n                 id, name.as_str(),\n                 &*self.file_resolver,\n-                &|file_id| self.file_syntax(file_id).unwrap(),\n+                &|file_id| self.file_syntax(file_id),\n             )\n             .into_iter()\n             .map(|id| module_map.module2file(id))\n@@ -326,10 +326,10 @@ impl World {\n         }\n     }\n \n-    fn file_data(&self, file_id: FileId) -> Result<Arc<FileData>> {\n+    fn file_data(&self, file_id: FileId) -> Arc<FileData> {\n         match self.data.file_map.get(&file_id) {\n-            Some(data) => Ok(data.clone()),\n-            None => bail!(\"unknown file: {:?}\", file_id),\n+            Some(data) => data.clone(),\n+            None => panic!(\"unknown file: {:?}\", file_id),\n         }\n     }\n }"}]}