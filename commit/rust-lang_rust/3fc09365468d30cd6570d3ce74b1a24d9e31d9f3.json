{"sha": "3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzA5MzY1NDY4ZDMwY2Q2NTcwZDNjZTc0YjFhMjRkOWUzMWQ5ZjM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-23T23:08:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-23T23:55:11Z"}, "message": "Don't generate unnecessary rmeta files.", "tree": {"sha": "d88867d0b5ec15d3a19e7ec49dc9d9a16cfe4e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d88867d0b5ec15d3a19e7ec49dc9d9a16cfe4e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "html_url": "https://github.com/rust-lang/rust/commit/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff8526a789e0dfa8b97f7dec91b7b5c18e8544", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff8526a789e0dfa8b97f7dec91b7b5c18e8544", "html_url": "https://github.com/rust-lang/rust/commit/4eff8526a789e0dfa8b97f7dec91b7b5c18e8544"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "fe703ff4d25dd0894723c7dc6707904b4298a110", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "patch": "@@ -83,14 +83,16 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n         for obj in codegen_results.modules.iter().filter_map(|m| m.bytecode_compressed.as_ref()) {\n             remove(sess, obj);\n         }\n-        if let Some(ref obj) = codegen_results.metadata_module.object {\n-            remove(sess, obj);\n-        }\n-        if let Some(ref allocator) = codegen_results.allocator_module {\n-            if let Some(ref obj) = allocator.object {\n+        if let Some(ref metadata_module) = codegen_results.metadata_module {\n+            if let Some(ref obj) = metadata_module.object {\n+                remove(sess, obj);\n+            }\n+         }\n+        if let Some(ref allocator_module) = codegen_results.allocator_module {\n+            if let Some(ref obj) = allocator_module.object {\n                 remove(sess, obj);\n             }\n-            if let Some(ref bc) = allocator.bytecode_compressed {\n+            if let Some(ref bc) = allocator_module.bytecode_compressed {\n                 remove(sess, bc);\n             }\n         }\n@@ -1067,7 +1069,10 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n     // object file, so we link that in here.\n     if crate_type == config::CrateType::Dylib ||\n        crate_type == config::CrateType::ProcMacro {\n-        if let Some(obj) = codegen_results.metadata_module.object.as_ref() {\n+        let obj = codegen_results.metadata_module\n+            .as_ref()\n+            .and_then(|m| m.object.as_ref());\n+        if let Some(obj) = obj {\n             cmd.add_object(obj);\n         }\n     }"}, {"sha": "88a5e5a1aec3b4ccf6a256506fe9cfdc7e51177e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "patch": "@@ -350,7 +350,7 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n \n pub struct CompiledModules {\n     pub modules: Vec<CompiledModule>,\n-    pub metadata_module: CompiledModule,\n+    pub metadata_module: Option<CompiledModule>,\n     pub allocator_module: Option<CompiledModule>,\n }\n \n@@ -682,8 +682,10 @@ fn produce_final_output_artifacts(sess: &Session,\n         }\n \n         if !user_wants_bitcode {\n-            if let Some(ref path) = compiled_modules.metadata_module.bytecode {\n-                remove(sess, &path);\n+            if let Some(ref metadata_module) = compiled_modules.metadata_module {\n+                if let Some(ref path) = metadata_module.bytecode {\n+                    remove(sess, &path);\n+                }\n             }\n \n             if let Some(ref allocator_module) = compiled_modules.allocator_module {\n@@ -1564,9 +1566,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         // out deterministic results.\n         compiled_modules.sort_by(|a, b| a.name.cmp(&b.name));\n \n-        let compiled_metadata_module = compiled_metadata_module\n-            .expect(\"Metadata module not compiled?\");\n-\n         Ok(CompiledModules {\n             modules: compiled_modules,\n             metadata_module: compiled_metadata_module,"}, {"sha": "3046c069981cb31ae677c3b4ac0ea734343b7cd2", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "patch": "@@ -25,7 +25,7 @@ use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::util::common::{time, print_time_passes_entry};\n-use rustc::session::config::{self, EntryFnType, Lto};\n+use rustc::session::config::{self, CrateType, EntryFnType, Lto};\n use rustc::session::Session;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use rustc_mir::monomorphize::Instance;\n@@ -550,12 +550,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n     tcx.sess.profiler(|p| p.end_activity(\"codegen crate metadata\"));\n \n-    let metadata_module = ModuleCodegen {\n-        name: metadata_cgu_name,\n-        module_llvm: metadata_llvm_module,\n-        kind: ModuleKind::Metadata,\n-    };\n-\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen ||\n        !tcx.sess.opts.output_types.should_codegen() {\n@@ -566,7 +560,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             rx,\n             1);\n \n-        ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, metadata_module);\n         ongoing_codegen.codegen_finished(tcx);\n \n         assert_and_save_dep_graph(tcx);\n@@ -639,7 +632,24 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, allocator_module);\n     }\n \n-    ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, metadata_module);\n+    let needs_metadata_module = tcx.sess.crate_types.borrow().iter().any(|ct| {\n+        match *ct {\n+            CrateType::Dylib |\n+            CrateType::ProcMacro => true,\n+            CrateType::Executable |\n+            CrateType::Rlib |\n+            CrateType::Staticlib |\n+            CrateType::Cdylib => false,\n+        }\n+    });\n+    if needs_metadata_module {\n+        let metadata_module = ModuleCodegen {\n+            name: metadata_cgu_name,\n+            module_llvm: metadata_llvm_module,\n+            kind: ModuleKind::Metadata,\n+        };\n+        ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, metadata_module);\n+    }\n \n     // We sort the codegen units by size. This way we can schedule work for LLVM\n     // a bit more efficiently."}, {"sha": "4d7af7a643b66003ed37b917660a826e807d97c6", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc09365468d30cd6570d3ce74b1a24d9e31d9f3/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=3fc09365468d30cd6570d3ce74b1a24d9e31d9f3", "patch": "@@ -154,7 +154,7 @@ pub struct CodegenResults {\n     pub crate_name: Symbol,\n     pub modules: Vec<CompiledModule>,\n     pub allocator_module: Option<CompiledModule>,\n-    pub metadata_module: CompiledModule,\n+    pub metadata_module: Option<CompiledModule>,\n     pub crate_hash: Svh,\n     pub metadata: rustc::middle::cstore::EncodedMetadata,\n     pub windows_subsystem: Option<String>,"}]}