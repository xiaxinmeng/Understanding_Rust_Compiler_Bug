{"sha": "904e2b6b3520d39dfc41e1f9c96244239a7e871a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNGUyYjZiMzUyMGQzOWRmYzQxZTFmOWM5NjI0NDIzOWE3ZTg3MWE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:21:21Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:25Z"}, "message": "Make Session::features_untracked thread-safe", "tree": {"sha": "a11e491b2869b278b4f36fcb6eeb95e730f7a758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a11e491b2869b278b4f36fcb6eeb95e730f7a758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904e2b6b3520d39dfc41e1f9c96244239a7e871a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904e2b6b3520d39dfc41e1f9c96244239a7e871a", "html_url": "https://github.com/rust-lang/rust/commit/904e2b6b3520d39dfc41e1f9c96244239a7e871a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904e2b6b3520d39dfc41e1f9c96244239a7e871a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a46f05978a4b48db9965cb4271112a7e19fe51b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a46f05978a4b48db9965cb4271112a7e19fe51b5", "html_url": "https://github.com/rust-lang/rust/commit/a46f05978a4b48db9965cb4271112a7e19fe51b5"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "6784f909ff358e4626f063a6e3bb3cd1483e50f9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/904e2b6b3520d39dfc41e1f9c96244239a7e871a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904e2b6b3520d39dfc41e1f9c96244239a7e871a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=904e2b6b3520d39dfc41e1f9c96244239a7e871a", "patch": "@@ -101,7 +101,7 @@ pub struct Session {\n     /// trans::back::symbol_names module for more information.\n     pub crate_disambiguator: RefCell<Option<CrateDisambiguator>>,\n \n-    features: RefCell<Option<feature_gate::Features>>,\n+    features: Once<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n@@ -532,18 +532,12 @@ impl Session {\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents\n     /// dependency tracking. Use tcx.features() instead.\n     #[inline]\n-    pub fn features_untracked(&self) -> cell::Ref<feature_gate::Features> {\n-        let features = self.features.borrow();\n-\n-        if features.is_none() {\n-            bug!(\"Access to Session::features before it is initialized\");\n-        }\n-\n-        cell::Ref::map(features, |r| r.as_ref().unwrap())\n+    pub fn features_untracked(&self) -> &feature_gate::Features {\n+        self.features.get()\n     }\n \n     pub fn init_features(&self, features: feature_gate::Features) {\n-        *(self.features.borrow_mut()) = Some(features);\n+        self.features.set(features);\n     }\n \n     /// Calculates the flavor of LTO to use for this compilation.\n@@ -1108,7 +1102,7 @@ pub fn build_session_(\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FxHashMap()),\n         crate_disambiguator: RefCell::new(None),\n-        features: RefCell::new(None),\n+        features: Once::new(),\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,"}]}