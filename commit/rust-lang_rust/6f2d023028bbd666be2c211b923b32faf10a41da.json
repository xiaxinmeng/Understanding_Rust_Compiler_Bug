{"sha": "6f2d023028bbd666be2c211b923b32faf10a41da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMmQwMjMwMjhiYmQ2NjZiZTJjMjExYjkyM2IzMmZhZjEwYTQxZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-03T18:26:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-04T22:01:28Z"}, "message": "Fold rustfix tests back into the UI test suite", "tree": {"sha": "c53c956b4e906922c9de96ec644394b5c1114815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53c956b4e906922c9de96ec644394b5c1114815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2d023028bbd666be2c211b923b32faf10a41da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d023028bbd666be2c211b923b32faf10a41da", "html_url": "https://github.com/rust-lang/rust/commit/6f2d023028bbd666be2c211b923b32faf10a41da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d023028bbd666be2c211b923b32faf10a41da/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a563027cb8f2cb1c46d2a1e59f3686d3f3a3213a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a563027cb8f2cb1c46d2a1e59f3686d3f3a3213a", "html_url": "https://github.com/rust-lang/rust/commit/a563027cb8f2cb1c46d2a1e59f3686d3f3a3213a"}], "stats": {"total": 303, "additions": 223, "deletions": 80}, "files": [{"sha": "08bb8ab481513bbf803f3a657442cef390c0907f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -326,7 +326,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook, test::UnstableBook, test::RustcBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n-                test::RunMake, test::RustdocUi, test::Rustfix),\n+                test::RunMake, test::RustdocUi),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,"}, {"sha": "e8c40dfdb0ad2bcfdc877b9a269f26f6aca760e6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -716,12 +716,6 @@ default_test!(RunFail {\n     suite: \"run-fail\"\n });\n \n-default_test!(Rustfix {\n-    path: \"src/test/rustfix\",\n-    mode: \"rustfix\",\n-    suite: \"rustfix\"\n-});\n-\n default_test!(RunPassValgrind {\n     path: \"src/test/run-pass-valgrind\",\n     mode: \"run-pass-valgrind\","}, {"sha": "b3a0d592f760156bb21c36f4bb86415356a72926", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Point at the captured immutable outer variable\n+\n+fn foo(mut f: Box<FnMut()>) {\n+    f();\n+}\n+\n+fn main() {\n+    let mut y = true;\n+    foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+}"}, {"sha": "e162678460c6c0a2e84bf2f83d65e86256b1d5fd", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Point at the captured immutable outer variable\n+\n+fn foo(mut f: Box<FnMut()>) {\n+    f();\n+}\n+\n+fn main() {\n+    let y = true;\n+    foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+}"}, {"sha": "bc655114c2b471a764e8ce670620cacf369ffed3", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to immutable item `y`\n-  --> $DIR/closure-immutable-outer-variable.rs:19:26\n+  --> $DIR/closure-immutable-outer-variable.rs:21:26\n    |\n LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n    |                          ^^^^^^^^^ cannot mutate"}, {"sha": "e162678460c6c0a2e84bf2f83d65e86256b1d5fd", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n // Point at the captured immutable outer variable\n \n fn foo(mut f: Box<FnMut()>) {"}, {"sha": "0ee11d8cf15dead51f9e482ea4627b6a2e816bdf", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n-  --> $DIR/closure-immutable-outer-variable.rs:19:26\n+  --> $DIR/closure-immutable-outer-variable.rs:21:26\n    |\n LL |     let y = true;\n    |         - help: consider making `y` mutable: `mut y`"}, {"sha": "7c01f0d1ee5322e8bebaac318da0c9cd05cb2b86", "filename": "src/test/ui/suggestions/issue-45562.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#[no_mangle] pub static RAH: usize = 5;\n+//~^ ERROR const items should never be #[no_mangle]\n+\n+fn main() {}"}, {"sha": "c27d52fcdd392ab78c81e6bdfe6edaffbdfc3f0c", "filename": "src/test/ui/suggestions/issue-45562.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #[no_mangle] pub const RAH: usize = 5;\n //~^ ERROR const items should never be #[no_mangle]\n "}, {"sha": "d9e624cadc70543811e30db2eb001a8df1ab86ec", "filename": "src/test/ui/suggestions/issue-45562.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45562.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error: const items should never be #[no_mangle]\n-  --> $DIR/issue-45562.rs:11:14\n+  --> $DIR/issue-45562.rs:13:14\n    |\n LL | #[no_mangle] pub const RAH: usize = 5;\n    |              ---------^^^^^^^^^^^^^^^^"}, {"sha": "e3287030408d114f3402a89dbc8f435a7d8aaf9a", "filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+extern crate std as other_std;\n+fn main() {}\n+//~^^ ERROR the name `std` is defined multiple times [E0259]"}, {"sha": "f47ea474d510b2fe3e8c3d3ab9bc828117428e1b", "filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n extern crate std;\n fn main() {}\n //~^^ ERROR the name `std` is defined multiple times [E0259]"}, {"sha": "ecdfec2b3bfd6aaef1aed023e5f5ebdfd0662d2e", "filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error[E0259]: the name `std` is defined multiple times\n-  --> $DIR/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs:11:1\n+  --> $DIR/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs:13:1\n    |\n LL | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ `std` reimported here"}, {"sha": "77171cad6e71491a997d9c1c92bf295c1924e34a", "filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n+    and_yet + 1\n+}\n+\n+fn main() {\n+    let behold: isize = 2;\n+    let with_tears: usize = 3;\n+    light_flows_our_war_of_mocking_words(&(behold as usize));\n+    //~^ ERROR mismatched types [E0308]\n+    light_flows_our_war_of_mocking_words(&(with_tears + 4));\n+    //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "e5ea9b5ed099dfa949479d3f7a94be6cf67ece2e", "filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #![allow(unused)]\n \n fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {"}, {"sha": "9c492751ca1a026be52083622c2970f14a135d4b", "filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:20:42\n+  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:22:42\n    |\n LL |     light_flows_our_war_of_mocking_words(behold as usize);\n    |                                          ^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     light_flows_our_war_of_mocking_words(behold as usize);\n               found type `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:22:42\n+  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:24:42\n    |\n LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n    |                                          ^^^^^^^^^^^^^^"}, {"sha": "4832f35f42d2ae82485f8032bacd976a91c82cd5", "filename": "src/test/ui/suggestions/missing-comma-in-match.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+fn main() {\n+    match &Some(3) {\n+        &None => 1,\n+        &Some(2) => { 3 }\n+        //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n+        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n+        _ => 2\n+    };\n+}"}, {"sha": "e39b20e77ea800a7e9d89626bac9c2c3c7ff340a", "filename": "src/test/ui/suggestions/missing-comma-in-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n fn main() {\n     match &Some(3) {\n         &None => 1"}, {"sha": "779359341073ea7f54141f9521a7e81a917179e0", "filename": "src/test/ui/suggestions/missing-comma-in-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n-  --> $DIR/missing-comma-in-match.rs:14:18\n+  --> $DIR/missing-comma-in-match.rs:16:18\n    |\n LL |         &None => 1\n    |                   - help: missing a comma here to end this `match` arm"}, {"sha": "c0dad38e436874a56279781d0c43942602cf9f87", "filename": "src/test/ui/suggestions/str-as-char.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"\u25cf\u25cf\");\n+    //~^ ERROR character literal may only contain one codepoint\n+}"}, {"sha": "b5a5df0af7f94009ce071fa770eed6c2256bb093", "filename": "src/test/ui/suggestions/str-as-char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n fn main() {\n     println!('\u25cf\u25cf');\n     //~^ ERROR character literal may only contain one codepoint"}, {"sha": "60eb182adf14546959ef6832ab03b92d300e6cf6", "filename": "src/test/ui/suggestions/str-as-char.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error: character literal may only contain one codepoint\n-  --> $DIR/str-as-char.rs:12:14\n+  --> $DIR/str-as-char.rs:14:14\n    |\n LL |     println!('\u25cf\u25cf');\n    |              ^^^^"}, {"sha": "55bc2f77dada95089ca88f127324eec3d1798810", "filename": "src/test/ui/suggestions/tuple-float-index.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.fixed?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-flags: -Z parse-only\n+\n+fn main () {\n+    ((1, (2, 3)).1).1; //~ ERROR unexpected token: `1.1`\n+}"}, {"sha": "d569ca4cb861e01a20fce5fd83aa6ed69ead7dd2", "filename": "src/test/ui/suggestions/tuple-float-index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n // compile-flags: -Z parse-only\n \n fn main () {"}, {"sha": "15af0834f03729a12b2f1fd27f42ea6d09e3abf4", "filename": "src/test/ui/suggestions/tuple-float-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `1.1`\n-  --> $DIR/tuple-float-index.rs:14:17\n+  --> $DIR/tuple-float-index.rs:15:17\n    |\n LL |     (1, (2, 3)).1.1; //~ ERROR unexpected token: `1.1`\n    |     ------------^^^"}, {"sha": "47a85352b0044c0d39c78dd9c0bb35f6c95f2e65", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -26,15 +26,15 @@ if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n     echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n fi\n \n-MYDIR=$(dirname $0)\n \n BUILD_DIR=\"$1\"\n shift\n \n shopt -s nullglob\n \n while [[ \"$1\" != \"\" ]]; do\n-    for EXT in \"stderr\" \"stdout\"; do\n+    MYDIR=$(dirname $1)\n+    for EXT in \"stderr\" \"stdout\" \"fixed\"; do\n         for OUT_NAME in $BUILD_DIR/${1%.rs}.*$EXT; do\n             OUT_BASE=`basename \"$OUT_NAME\"`\n             if ! (diff $OUT_NAME $MYDIR/$OUT_BASE >& /dev/null); then"}, {"sha": "2df5281659934c88717fafa379f458415165a1e7", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -32,7 +32,6 @@ pub enum Mode {\n     RunMake,\n     Ui,\n     MirOpt,\n-    Rustfix,\n }\n \n impl Mode {\n@@ -68,7 +67,6 @@ impl FromStr for Mode {\n             \"run-make\" => Ok(RunMake),\n             \"ui\" => Ok(Ui),\n             \"mir-opt\" => Ok(MirOpt),\n-            \"rustfix\" => Ok(Rustfix),\n             _ => Err(()),\n         }\n     }\n@@ -92,7 +90,6 @@ impl fmt::Display for Mode {\n             RunMake => \"run-make\",\n             Ui => \"ui\",\n             MirOpt => \"mir-opt\",\n-            Rustfix => \"rustfix\",\n         };\n         fmt::Display::fmt(s, f)\n     }"}, {"sha": "7ac3f5b5b25e8e5115f7943c0b0f3594a7906a0d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -236,6 +236,7 @@ pub struct TestProps {\n     pub normalize_stdout: Vec<(String, String)>,\n     pub normalize_stderr: Vec<(String, String)>,\n     pub failure_status: i32,\n+    pub run_rustfix: bool,\n }\n \n impl TestProps {\n@@ -267,6 +268,7 @@ impl TestProps {\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n             failure_status: 101,\n+            run_rustfix: false,\n         }\n     }\n \n@@ -403,6 +405,10 @@ impl TestProps {\n             if let Some(code) = config.parse_failure_status(ln) {\n                 self.failure_status = code;\n             }\n+\n+            if !self.run_rustfix {\n+                self.run_rustfix = config.parse_run_rustfix(ln);\n+            }\n         });\n \n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -642,6 +648,10 @@ impl Config {\n \n         None\n     }\n+\n+    fn parse_run_rustfix(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"run-rustfix\")\n+    }\n }\n \n pub fn lldb_version_to_int(version_string: &str) -> isize {"}, {"sha": "fae75c352da1f7d21bd3a3060696d67bd18200fc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 34, "deletions": 59, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d023028bbd666be2c211b923b32faf10a41da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6f2d023028bbd666be2c211b923b32faf10a41da", "patch": "@@ -11,7 +11,7 @@\n use common::{Config, TestPaths};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n-use common::{Incremental, MirOpt, RunMake, Ui, Rustfix};\n+use common::{Incremental, MirOpt, RunMake, Ui};\n use common::{expected_output_path, UI_STDERR, UI_STDOUT, UI_FIXED};\n use common::CompareMode;\n use diff;\n@@ -242,7 +242,6 @@ impl<'test> TestCx<'test> {\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n-            Rustfix => self.run_rustfix_test(),\n             Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n         }\n@@ -1689,7 +1688,6 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            Rustfix |\n             RunPass |\n             RunFail |\n             RunPassValgrind |\n@@ -2555,6 +2553,7 @@ impl<'test> TestCx<'test> {\n \n         let expected_stderr = self.load_expected_output(UI_STDERR);\n         let expected_stdout = self.load_expected_output(UI_STDOUT);\n+        let expected_fixed = self.load_expected_output(UI_FIXED);\n \n         let normalized_stdout =\n             self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n@@ -2571,6 +2570,21 @@ impl<'test> TestCx<'test> {\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n         errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n \n+        if self.config.compare_mode.is_some() {\n+            // don't test rustfix with nll right now\n+        } else if self.props.run_rustfix {\n+            // Apply suggestions from rustc to the code itself\n+            let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file)\n+                .unwrap();\n+            let suggestions = get_suggestions_from_json(&proc_res.stderr, &HashSet::new()).unwrap();\n+            let fixed_code = apply_suggestions(&unfixed_code, &suggestions);\n+\n+            errors += self.compare_output(\"fixed\", &fixed_code, &expected_fixed);\n+        } else if !expected_fixed.is_empty() {\n+            panic!(\"the `// run-rustfix` directive wasn't found but a `*.fixed` \\\n+                    file was found\");\n+        }\n+\n         if errors > 0 {\n             println!(\"To update references, run this command from build directory:\");\n             let relative_path_to_file = self.testpaths\n@@ -2606,6 +2620,23 @@ impl<'test> TestCx<'test> {\n                 self.check_error_patterns(&proc_res.stderr, &proc_res);\n             }\n         }\n+\n+        if self.props.run_rustfix && self.config.compare_mode.is_none() {\n+            // And finally, compile the fixed code and make sure it both\n+            // succeeds and has no diagnostics.\n+            let mut rustc = self.make_compile_args(\n+                &self.testpaths.file.with_extension(UI_FIXED),\n+                TargetLocation::ThisFile(self.make_exe_name()),\n+            );\n+            rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n+            let res = self.compose_and_run_compiler(rustc, None);\n+            if !res.status.success() {\n+                self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n+            }\n+            if !res.stderr.is_empty() {\n+                self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n+            }\n+        }\n     }\n \n     fn run_mir_opt_test(&self) {\n@@ -2930,62 +2961,6 @@ impl<'test> TestCx<'test> {\n         println!(\"Actual {} saved to {}\", kind, output_file.display());\n         1\n     }\n-\n-    fn run_rustfix_test(&self) {\n-        // First up, compile the test with --error-format=json\n-        let mut rustc = self.make_compile_args(\n-            &self.testpaths.file,\n-            TargetLocation::ThisFile(self.make_exe_name()),\n-        );\n-        rustc.arg(\"--error-format\").arg(\"json\")\n-            .arg(\"-L\").arg(&self.aux_output_dir_name());\n-        let proc_res = self.compose_and_run_compiler(rustc, None);\n-\n-        // Now apply suggestions from rustc to the code itself\n-        let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file)\n-            .unwrap();\n-        let suggestions = get_suggestions_from_json(&proc_res.stderr, &HashSet::new()).unwrap();\n-        let fixed_code = apply_suggestions(&unfixed_code, &suggestions);\n-\n-        // Load up what the expected result of fixing should be\n-        let fixture_path = expected_output_path(&self.testpaths, None, &None, UI_FIXED);\n-        let expected_fixed = self.load_expected_output_from_path(&fixture_path)\n-            .unwrap_or(String::new());\n-\n-        // Make sure our fixed code is the same as what we're expecting\n-        let errors = self.compare_output(UI_FIXED, &fixed_code, &expected_fixed);\n-        if errors > 0 {\n-            println!(\"To update references, run this command from build directory:\");\n-            let relative_path_to_file = self.testpaths\n-                .relative_dir\n-                .join(self.testpaths.file.file_name().unwrap());\n-            println!(\n-                \"{}/update-references.sh '{}' '{}'\",\n-                self.config.src_base.display(),\n-                self.config.build_base.display(),\n-                relative_path_to_file.display()\n-            );\n-            self.fatal_proc_rec(\n-                &format!(\"{} errors occurred comparing output.\", errors),\n-                &proc_res,\n-            );\n-        }\n-\n-        // And finally, compile the fixed code and make sure it both succeeds\n-        // and has no diagnostics.\n-        let mut rustc = self.make_compile_args(\n-            &self.testpaths.file.with_extension(UI_FIXED),\n-            TargetLocation::ThisFile(self.make_exe_name()),\n-        );\n-        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n-        let res = self.compose_and_run_compiler(rustc, None);\n-        if !res.status.success() {\n-            self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n-        }\n-        if !res.stderr.is_empty() {\n-            self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n-        }\n-    }\n }\n \n struct ProcArgs {"}]}