{"sha": "ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNmNmNjM4ZmJmM2QwYTAyNWU4MDRmMmQzNTRkOTFhYmM4YWZkMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-21T14:14:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-21T14:14:53Z"}, "message": "Merge #4553\n\n4553: Cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a1d66d2b8e06d2e32f9a4d0ce9857948dd981459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d66d2b8e06d2e32f9a4d0ce9857948dd981459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexozdCRBK7hj4Ov3rIwAAdHIIABkA+hJiehS8LGzPT7YgCUPk\nC6+z71/KCqzqKcccS5ejNbQXMcuEgsln7KR4oPGLwLF0Z7uM3AK+DoQL88cycPmS\n5QAMwVGieYIdTQGZ1TKcl1GDj81kgwDwi//Fff+1wRfvSlQ5N17x2h3xHPRMOPIH\n08J6ouVipo/hVGzWmjdRLqJKjItsrSuls1O1Fpe8haAp280Ssv0Cgj+U8IYxMhUk\nbCvWk4q6v8LKg45T2k4CSzYTaeppdPEfZ/Zi5Nu9lk/M3559+FYfyj6GUWZ5YdGl\nymlovc1DcyX+cAejLBPv9hq2AeVEGZnP1bbQKth4N/LVBOkPWlpOVleWegBhCIE=\n=jdnn\n-----END PGP SIGNATURE-----\n", "payload": "tree a1d66d2b8e06d2e32f9a4d0ce9857948dd981459\nparent 3cba0dc26b707bebc1865671fd2c5139c1e1c537\nparent ef0da3bbeccdaab3813a1f6a17c566ca9087615f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590070493 +0000\ncommitter GitHub <noreply@github.com> 1590070493 +0000\n\nMerge #4553\n\n4553: Cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "html_url": "https://github.com/rust-lang/rust/commit/ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cba0dc26b707bebc1865671fd2c5139c1e1c537", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cba0dc26b707bebc1865671fd2c5139c1e1c537", "html_url": "https://github.com/rust-lang/rust/commit/3cba0dc26b707bebc1865671fd2c5139c1e1c537"}, {"sha": "ef0da3bbeccdaab3813a1f6a17c566ca9087615f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0da3bbeccdaab3813a1f6a17c566ca9087615f", "html_url": "https://github.com/rust-lang/rust/commit/ef0da3bbeccdaab3813a1f6a17c566ca9087615f"}], "stats": {"total": 87, "additions": 37, "deletions": 50}, "files": [{"sha": "cfb7c1e380b6b51e7b66b46bfe4d6438efae3cfc", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -63,8 +63,8 @@ impl fmt::Debug for CompletionItem {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut s = f.debug_struct(\"CompletionItem\");\n         s.field(\"label\", &self.label()).field(\"source_range\", &self.source_range());\n-        if self.text_edit().as_indels().len() == 1 {\n-            let atom = &self.text_edit().as_indels()[0];\n+        if self.text_edit().len() == 1 {\n+            let atom = &self.text_edit().iter().next().unwrap();\n             s.field(\"delete\", &atom.delete);\n             s.field(\"insert\", &atom.insert);\n         } else {"}, {"sha": "af1ade8a1e12d09caf06608c53348a22b5676fef", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -166,16 +166,28 @@ fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use crate::test_utils::{assert_eq_text, check_action, extract_range};\n+    use ra_syntax::SourceFile;\n+    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n     use super::*;\n \n     fn check_join_lines(before: &str, after: &str) {\n-        check_action(before, after, |file, offset| {\n-            let range = TextRange::empty(offset);\n-            let res = join_lines(file, range);\n-            Some(res)\n-        })\n+        let (before_cursor_pos, before) = extract_offset(before);\n+        let file = SourceFile::parse(&before).ok().unwrap();\n+\n+        let range = TextRange::empty(before_cursor_pos);\n+        let result = join_lines(&file, range);\n+\n+        let actual = {\n+            let mut actual = before.to_string();\n+            result.apply(&mut actual);\n+            actual\n+        };\n+        let actual_cursor_pos = result\n+            .apply_to_offset(before_cursor_pos)\n+            .expect(\"cursor position is affected by the edit\");\n+        let actual = add_cursor(&actual, actual_cursor_pos);\n+        assert_eq_text!(after, &actual);\n     }\n \n     #[test]"}, {"sha": "d0aeb3ba72d555c62277169b0692cb95b6adf835", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -42,9 +42,6 @@ mod inlay_hints;\n mod expand_macro;\n mod ssr;\n \n-#[cfg(test)]\n-mod test_utils;\n-\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;"}, {"sha": "fd2163dad66300e637b2b5a8afd3022d7ddff784", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -983,8 +983,8 @@ mod tests {\n         if let Some(change) = source_change {\n             for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n-                for indel in edit.edit.as_indels() {\n-                    text_edit_builder.replace(indel.delete, indel.insert.clone());\n+                for indel in edit.edit.into_iter() {\n+                    text_edit_builder.replace(indel.delete, indel.insert);\n                 }\n             }\n         }"}, {"sha": "48c8fd1f4662d38e8d4ebd6fc7e68cf99fcfe219", "filename": "crates/ra_ide/src/test_utils.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -1,25 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use ra_syntax::{SourceFile, TextSize};\n-use ra_text_edit::TextEdit;\n-\n-pub use test_utils::*;\n-\n-pub fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n-    before: &str,\n-    after: &str,\n-    f: F,\n-) {\n-    let (before_cursor_pos, before) = extract_offset(before);\n-    let file = SourceFile::parse(&before).ok().unwrap();\n-    let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n-    let actual = {\n-        let mut actual = before.to_string();\n-        result.apply(&mut actual);\n-        actual\n-    };\n-    let actual_cursor_pos =\n-        result.apply_to_offset(before_cursor_pos).expect(\"cursor position is affected by the edit\");\n-    let actual = add_cursor(&actual, actual_cursor_pos);\n-    assert_eq_text!(after, &actual);\n-}"}, {"sha": "199fd109687153bc1442a3d65493b5a7bfc10af2", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -3,6 +3,7 @@\n //! `rust-analyzer` never mutates text itself and only sends diffs to clients,\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n+use std::{slice, vec};\n \n pub use text_size::{TextRange, TextSize};\n \n@@ -71,17 +72,24 @@ impl TextEdit {\n         TextEdit { indels }\n     }\n \n+    pub fn len(&self) -> usize {\n+        self.indels.len()\n+    }\n+\n     pub fn is_empty(&self) -> bool {\n         self.indels.is_empty()\n     }\n \n-    // FXME: impl IntoIter instead\n-    pub fn as_indels(&self) -> &[Indel] {\n-        &self.indels\n+    pub fn iter(&self) -> slice::Iter<'_, Indel> {\n+        self.indels.iter()\n+    }\n+\n+    pub fn into_iter(self) -> vec::IntoIter<Indel> {\n+        self.indels.into_iter()\n     }\n \n     pub fn apply(&self, text: &mut String) {\n-        match self.indels.len() {\n+        match self.len() {\n             0 => return,\n             1 => {\n                 self.indels[0].apply(text);"}, {"sha": "6171979634b0573e4bba17054fdcaf647134945f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6cf638fbf3d0a025e804f2d354d91abc8afd28/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "patch": "@@ -133,11 +133,7 @@ pub(crate) fn text_edit_vec(\n     line_endings: LineEndings,\n     text_edit: TextEdit,\n ) -> Vec<lsp_types::TextEdit> {\n-    text_edit\n-        .as_indels()\n-        .iter()\n-        .map(|it| self::text_edit(line_index, line_endings, it.clone()))\n-        .collect()\n+    text_edit.into_iter().map(|indel| self::text_edit(line_index, line_endings, indel)).collect()\n }\n \n pub(crate) fn completion_item(\n@@ -150,7 +146,7 @@ pub(crate) fn completion_item(\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n     // non-trivial mapping here.\n     let source_range = completion_item.source_range();\n-    for indel in completion_item.text_edit().as_indels() {\n+    for indel in completion_item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n                 self::text_edit(line_index, line_endings, indel.clone())\n@@ -459,8 +455,7 @@ pub(crate) fn snippet_text_document_edit(\n     let line_endings = world.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit\n         .edit\n-        .as_indels()\n-        .iter()\n+        .into_iter()\n         .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it.clone()))\n         .collect();\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })"}]}