{"sha": "82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYzhjYjJhYmY0NmU5NWVlYjJmY2IzMTU1ZjEwYzRkMmJjNDYxMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T10:01:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T10:01:56Z"}, "message": "auto merge of #13133 : alexcrichton/rust/issue-13130, r=brson\n\nThe libuv fs wrappers are very thin wrappers around the syscalls they correspond\r\nto, and a notable worrisome case is the write syscall. This syscall is not\r\nguaranteed to write the entire buffer provided, so we may have to continue\r\ncalling uv_fs_write if a short write occurs.\r\n\r\nCloses #13130", "tree": {"sha": "7e64fe7f80bd6232591f1b4fa609f324ae20b3a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e64fe7f80bd6232591f1b4fa609f324ae20b3a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "html_url": "https://github.com/rust-lang/rust/commit/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de85948ac0a6bc0fde0484790296cb4e041e993f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de85948ac0a6bc0fde0484790296cb4e041e993f", "html_url": "https://github.com/rust-lang/rust/commit/de85948ac0a6bc0fde0484790296cb4e041e993f"}, {"sha": "5fddb4280e950c28916ac21838f7433cd199aaed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fddb4280e950c28916ac21838f7433cd199aaed", "html_url": "https://github.com/rust-lang/rust/commit/5fddb4280e950c28916ac21838f7433cd199aaed"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "d5235a9fe56b3aed66fb4d993d2913b805197542", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "patch": "@@ -12,7 +12,7 @@ use std::c_str::CString;\n use std::c_str;\n use std::cast::transmute;\n use std::cast;\n-use std::libc::{c_int, c_char, c_void, size_t};\n+use std::libc::{c_int, c_char, c_void, size_t, ssize_t};\n use std::libc;\n use std::rt::task::BlockedTask;\n use std::io::{FileStat, IoError};\n@@ -74,11 +74,32 @@ impl FsRequest {\n     pub fn write(loop_: &Loop, fd: c_int, buf: &[u8], offset: i64)\n         -> Result<(), UvError>\n     {\n-        execute_nop(|req, cb| unsafe {\n-            uvll::uv_fs_write(loop_.handle, req,\n-                              fd, buf.as_ptr() as *c_void,\n-                              buf.len() as size_t, offset, cb)\n-        })\n+        // In libuv, uv_fs_write is basically just shelling out to a write()\n+        // syscall at some point, with very little fluff around it. This means\n+        // that write() could actually be a short write, so we need to be sure\n+        // to call it continuously if we get a short write back. This method is\n+        // expected to write the full data if it returns success.\n+        let mut written = 0;\n+        while written < buf.len() {\n+            let offset = if offset == -1 {\n+                offset\n+            } else {\n+                offset + written as i64\n+            };\n+            match execute(|req, cb| unsafe {\n+                uvll::uv_fs_write(loop_.handle,\n+                                  req,\n+                                  fd,\n+                                  buf.as_ptr().offset(written as int) as *c_void,\n+                                  (buf.len() - written) as size_t,\n+                                  offset,\n+                                  cb)\n+            }).map(|req| req.get_result()) {\n+                Err(e) => return Err(e),\n+                Ok(n) => { written += n as uint; }\n+            }\n+        }\n+        Ok(())\n     }\n \n     pub fn read(loop_: &Loop, fd: c_int, buf: &mut [u8], offset: i64)\n@@ -227,7 +248,7 @@ impl FsRequest {\n         })\n     }\n \n-    pub fn get_result(&self) -> c_int {\n+    pub fn get_result(&self) -> ssize_t {\n         unsafe { uvll::get_result_from_fs_req(self.req) }\n     }\n \n@@ -309,7 +330,7 @@ fn execute(f: |*uvll::uv_fs_t, uvll::uv_fs_cb| -> c_int)\n                 unsafe { uvll::set_data_for_req(req.req, &slot) }\n             });\n             match req.get_result() {\n-                n if n < 0 => Err(UvError(n)),\n+                n if n < 0 => Err(UvError(n as i32)),\n                 _ => Ok(req),\n             }\n         }"}, {"sha": "25f4fb0edf8f40a32a57e2846711bc7d4259a8fc", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "patch": "@@ -426,7 +426,7 @@ pub unsafe fn set_stdio_container_stream(c: *uv_stdio_container_t,\n }\n \n // data access helpers\n-pub unsafe fn get_result_from_fs_req(req: *uv_fs_t) -> c_int {\n+pub unsafe fn get_result_from_fs_req(req: *uv_fs_t) -> ssize_t {\n     rust_uv_get_result_from_fs_req(req)\n }\n pub unsafe fn get_ptr_from_fs_req(req: *uv_fs_t) -> *libc::c_void {\n@@ -501,7 +501,7 @@ extern {\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n \n     fn rust_uv_populate_uv_stat(req_in: *uv_fs_t, stat_out: *uv_stat_t);\n-    fn rust_uv_get_result_from_fs_req(req: *uv_fs_t) -> c_int;\n+    fn rust_uv_get_result_from_fs_req(req: *uv_fs_t) -> ssize_t;\n     fn rust_uv_get_ptr_from_fs_req(req: *uv_fs_t) -> *libc::c_void;\n     fn rust_uv_get_path_from_fs_req(req: *uv_fs_t) -> *c_char;\n     fn rust_uv_get_loop_from_fs_req(req: *uv_fs_t) -> *uv_loop_t;"}, {"sha": "0739e8b5e112d9a7a32475eb9e4af9dd96b8ffe7", "filename": "src/rt/rust_uv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Frt%2Frust_uv.c", "raw_url": "https://github.com/rust-lang/rust/raw/82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f/src%2Frt%2Frust_uv.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.c?ref=82c8cb2abf46e95eeb2fcb3155f10c4d2bc4611f", "patch": "@@ -97,7 +97,7 @@ rust_uv_req_type_max() {\n   return UV_REQ_TYPE_MAX;\n }\n \n-int\n+ssize_t\n rust_uv_get_result_from_fs_req(uv_fs_t* req) {\n   return req->result;\n }"}]}