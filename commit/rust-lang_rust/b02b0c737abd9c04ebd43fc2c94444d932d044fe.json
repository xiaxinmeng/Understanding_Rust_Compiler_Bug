{"sha": "b02b0c737abd9c04ebd43fc2c94444d932d044fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmIwYzczN2FiZDljMDRlYmQ0M2ZjMmM5NDQ0NGQ5MzJkMDQ0ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T22:22:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T22:22:49Z"}, "message": "Auto merge of #6367 - justjosias:6348-print-stderr, r=ebroto\n\nAdd lint print_stderr\n\nResolves #6348\nAlmost identical to print_stdout, this lint applies to the `eprintln!` and `eprint!` macros rather than `println!` and `print!`.\n\nchangelog: Add new lint [`print_stderr`]. [`println_empty_string`] and [`print_with_newline`] now apply to `eprint!()` and `eprintln!()` respectively.", "tree": {"sha": "938fa9d21f2e19c15cd417fc0899e3e22d03215e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938fa9d21f2e19c15cd417fc0899e3e22d03215e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02b0c737abd9c04ebd43fc2c94444d932d044fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02b0c737abd9c04ebd43fc2c94444d932d044fe", "html_url": "https://github.com/rust-lang/rust/commit/b02b0c737abd9c04ebd43fc2c94444d932d044fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02b0c737abd9c04ebd43fc2c94444d932d044fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9fccbedbff3eee143949abd45df6f3284d8a028", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fccbedbff3eee143949abd45df6f3284d8a028", "html_url": "https://github.com/rust-lang/rust/commit/f9fccbedbff3eee143949abd45df6f3284d8a028"}, {"sha": "3187cad8ec0e9c32272341028526d6f1e208a704", "url": "https://api.github.com/repos/rust-lang/rust/commits/3187cad8ec0e9c32272341028526d6f1e208a704", "html_url": "https://github.com/rust-lang/rust/commit/3187cad8ec0e9c32272341028526d6f1e208a704"}], "stats": {"total": 332, "additions": 294, "deletions": 38}, "files": [{"sha": "82f2ad7ec4e898932314b65f5f82f7a673081809", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -2006,6 +2006,7 @@ Released 2018-09-13\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n [`print_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_literal\n+[`print_stderr`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr\n [`print_stdout`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout\n [`print_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline\n [`println_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string"}, {"sha": "a92ae9ed8d93545259366a3dc9c82566711b91ec", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -936,6 +936,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &wildcard_imports::WILDCARD_IMPORTS,\n         &write::PRINTLN_EMPTY_STRING,\n         &write::PRINT_LITERAL,\n+        &write::PRINT_STDERR,\n         &write::PRINT_STDOUT,\n         &write::PRINT_WITH_NEWLINE,\n         &write::USE_DEBUG,\n@@ -1250,6 +1251,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::RC_BUFFER),\n         LintId::of(&unwrap_in_result::UNWRAP_IN_RESULT),\n         LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n+        LintId::of(&write::PRINT_STDERR),\n         LintId::of(&write::PRINT_STDOUT),\n         LintId::of(&write::USE_DEBUG),\n     ]);"}, {"sha": "337f7a229b906c6244cbd265802812289b22b31f", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 70, "deletions": 37, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -75,6 +75,24 @@ declare_clippy_lint! {\n     \"printing on stdout\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for printing on *stderr*. The purpose of this lint\n+    /// is to catch debugging remnants.\n+    ///\n+    /// **Why is this bad?** People often print on *stderr* while debugging an\n+    /// application and might forget to remove those prints afterward.\n+    ///\n+    /// **Known problems:** Only catches `eprint!` and `eprintln!` calls.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// eprintln!(\"Hello world!\");\n+    /// ```\n+    pub PRINT_STDERR,\n+    restriction,\n+    \"printing on stderr\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Debug` formatting. The purpose of this\n     /// lint is to catch debugging remnants.\n@@ -201,6 +219,7 @@ impl_lint_pass!(Write => [\n     PRINT_WITH_NEWLINE,\n     PRINTLN_EMPTY_STRING,\n     PRINT_STDOUT,\n+    PRINT_STDERR,\n     USE_DEBUG,\n     PRINT_LITERAL,\n     WRITE_WITH_NEWLINE,\n@@ -243,47 +262,22 @@ impl EarlyLintPass for Write {\n                 .map_or(false, |crate_name| crate_name == \"build_script_build\")\n         }\n \n-        if mac.path == sym!(println) {\n-            if !is_build_script(cx) {\n-                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n-            }\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-                if fmt_str.symbol == Symbol::intern(\"\") {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        PRINTLN_EMPTY_STRING,\n-                        mac.span(),\n-                        \"using `println!(\\\"\\\")`\",\n-                        \"replace it with\",\n-                        \"println!()\".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-        } else if mac.path == sym!(print) {\n+        if mac.path == sym!(print) {\n             if !is_build_script(cx) {\n                 span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n             }\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-                if check_newlines(&fmt_str) {\n-                    span_lint_and_then(\n-                        cx,\n-                        PRINT_WITH_NEWLINE,\n-                        mac.span(),\n-                        \"using `print!()` with a format string that ends in a single newline\",\n-                        |err| {\n-                            err.multipart_suggestion(\n-                                \"use `println!` instead\",\n-                                vec![\n-                                    (mac.path.span, String::from(\"println\")),\n-                                    (newline_span(&fmt_str), String::new()),\n-                                ],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n+            self.lint_print_with_newline(cx, mac);\n+        } else if mac.path == sym!(println) {\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n             }\n+            self.lint_println_empty_string(cx, mac);\n+        } else if mac.path == sym!(eprint) {\n+            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprint!`\");\n+            self.lint_print_with_newline(cx, mac);\n+        } else if mac.path == sym!(eprintln) {\n+            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n+            self.lint_println_empty_string(cx, mac);\n         } else if mac.path == sym!(write) {\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n@@ -487,6 +481,45 @@ impl Write {\n             }\n         }\n     }\n+\n+    fn lint_println_empty_string(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n+            if fmt_str.symbol == Symbol::intern(\"\") {\n+                let name = mac.path.segments[0].ident.name;\n+                span_lint_and_sugg(\n+                    cx,\n+                    PRINTLN_EMPTY_STRING,\n+                    mac.span(),\n+                    &format!(\"using `{}!(\\\"\\\")`\", name),\n+                    \"replace it with\",\n+                    format!(\"{}!()\", name),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+\n+    fn lint_print_with_newline(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n+            if check_newlines(&fmt_str) {\n+                let name = mac.path.segments[0].ident.name;\n+                let suggested = format!(\"{}ln\", name);\n+                span_lint_and_then(\n+                    cx,\n+                    PRINT_WITH_NEWLINE,\n+                    mac.span(),\n+                    &format!(\"using `{}!()` with a format string that ends in a single newline\", name),\n+                    |err| {\n+                        err.multipart_suggestion(\n+                            &format!(\"use `{}!` instead\", suggested),\n+                            vec![(mac.path.span, suggested), (newline_span(&fmt_str), String::new())],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n+            }\n+        }\n+    }\n }\n \n /// Checks if the format string contains a single newline that terminates it."}, {"sha": "8df32649ad948b3d85aa3fae9a2bc468def694eb", "filename": "tests/ui/eprint_with_newline.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Feprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Feprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feprint_with_newline.rs?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -0,0 +1,49 @@\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::print_with_newline)]\n+\n+fn main() {\n+    eprint!(\"Hello\\n\");\n+    eprint!(\"Hello {}\\n\", \"world\");\n+    eprint!(\"Hello {} {}\\n\", \"world\", \"#2\");\n+    eprint!(\"{}\\n\", 1265);\n+    eprint!(\"\\n\");\n+\n+    // these are all fine\n+    eprint!(\"\");\n+    eprint!(\"Hello\");\n+    eprintln!(\"Hello\");\n+    eprintln!(\"Hello\\n\");\n+    eprintln!(\"Hello {}\\n\", \"world\");\n+    eprint!(\"Issue\\n{}\", 1265);\n+    eprint!(\"{}\", 1265);\n+    eprint!(\"\\n{}\", 1275);\n+    eprint!(\"\\n\\n\");\n+    eprint!(\"like eof\\n\\n\");\n+    eprint!(\"Hello {} {}\\n\\n\", \"world\", \"#2\");\n+    eprintln!(\"\\ndon't\\nwarn\\nfor\\nmultiple\\nnewlines\\n\"); // #3126\n+    eprintln!(\"\\nbla\\n\\n\"); // #3126\n+\n+    // Escaping\n+    eprint!(\"\\\\n\"); // #3514\n+    eprint!(\"\\\\\\n\"); // should fail\n+    eprint!(\"\\\\\\\\n\");\n+\n+    // Raw strings\n+    eprint!(r\"\\n\"); // #3778\n+\n+    // Literal newlines should also fail\n+    eprint!(\n+        \"\n+\"\n+    );\n+    eprint!(\n+        r\"\n+\"\n+    );\n+\n+    // Don't warn on CRLF (#4208)\n+    eprint!(\"\\r\\n\");\n+    eprint!(\"foo\\r\\n\");\n+    eprint!(\"\\\\r\\n\"); //~ ERROR\n+    eprint!(\"foo\\rbar\\n\") // ~ ERROR\n+}"}, {"sha": "31811d1d92a04285321bf4d5c0c6e3dead552d0a", "filename": "tests/ui/eprint_with_newline.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Feprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Feprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feprint_with_newline.stderr?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -0,0 +1,121 @@\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:5:5\n+   |\n+LL |     eprint!(\"Hello/n\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::print-with-newline` implied by `-D warnings`\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello\");\n+   |     ^^^^^^^^       --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:6:5\n+   |\n+LL |     eprint!(\"Hello {}/n\", \"world\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello {}\", \"world\");\n+   |     ^^^^^^^^          --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:7:5\n+   |\n+LL |     eprint!(\"Hello {} {}/n\", \"world\", \"#2\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello {} {}\", \"world\", \"#2\");\n+   |     ^^^^^^^^             --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:8:5\n+   |\n+LL |     eprint!(\"{}/n\", 1265);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"{}\", 1265);\n+   |     ^^^^^^^^    --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:9:5\n+   |\n+LL |     eprint!(\"/n\");\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!();\n+   |     ^^^^^^^^ --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:28:5\n+   |\n+LL |     eprint!(\"//n\"); // should fail\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"/\"); // should fail\n+   |     ^^^^^^^^    --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:35:5\n+   |\n+LL | /     eprint!(\n+LL | |         \"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\n+LL |         \"\"\n+   |\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:39:5\n+   |\n+LL | /     eprint!(\n+LL | |         r\"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\n+LL |         r\"\"\n+   |\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:47:5\n+   |\n+LL |     eprint!(\"/r/n\"); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"/r\"); //~ ERROR\n+   |     ^^^^^^^^     --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:48:5\n+   |\n+LL |     eprint!(\"foo/rbar/n\") // ~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"foo/rbar\") // ~ ERROR\n+   |     ^^^^^^^^          --\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "fa07e74a7be47ef865870592b5e5e72d5dca284a", "filename": "tests/ui/print_stderr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprint_stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprint_stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_stderr.rs?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -0,0 +1,8 @@\n+#![warn(clippy::print_stderr)]\n+\n+fn main() {\n+    eprintln!(\"Hello\");\n+    println!(\"This should not do anything\");\n+    eprint!(\"World\");\n+    print!(\"Nor should this\");\n+}"}, {"sha": "5af735af65769b9512f336d38dec186afbeffcb2", "filename": "tests/ui/print_stderr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprint_stderr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprint_stderr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_stderr.stderr?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -0,0 +1,16 @@\n+error: use of `eprintln!`\n+  --> $DIR/print_stderr.rs:4:5\n+   |\n+LL |     eprintln!(\"Hello\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::print-stderr` implied by `-D warnings`\n+\n+error: use of `eprint!`\n+  --> $DIR/print_stderr.rs:6:5\n+   |\n+LL |     eprint!(\"World\");\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9760680927a63d9b9772c929fd3bf700e66ba175", "filename": "tests/ui/println_empty_string.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.fixed?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -8,4 +8,11 @@ fn main() {\n     match \"a\" {\n         _ => println!(),\n     }\n+\n+    eprintln!();\n+    eprintln!();\n+\n+    match \"a\" {\n+        _ => eprintln!(),\n+    }\n }"}, {"sha": "80fdb3e6e2105412918e757fa7790a8697d193e9", "filename": "tests/ui/println_empty_string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -8,4 +8,11 @@ fn main() {\n     match \"a\" {\n         _ => println!(\"\"),\n     }\n+\n+    eprintln!();\n+    eprintln!(\"\");\n+\n+    match \"a\" {\n+        _ => eprintln!(\"\"),\n+    }\n }"}, {"sha": "17fe4ea74790c4de796cb0bbdf6342f7924fe65b", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02b0c737abd9c04ebd43fc2c94444d932d044fe/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=b02b0c737abd9c04ebd43fc2c94444d932d044fe", "patch": "@@ -12,5 +12,17 @@ error: using `println!(\"\")`\n LL |         _ => println!(\"\"),\n    |              ^^^^^^^^^^^^ help: replace it with: `println!()`\n \n-error: aborting due to 2 previous errors\n+error: using `eprintln!(\"\")`\n+  --> $DIR/println_empty_string.rs:13:5\n+   |\n+LL |     eprintln!(\"\");\n+   |     ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+\n+error: using `eprintln!(\"\")`\n+  --> $DIR/println_empty_string.rs:16:14\n+   |\n+LL |         _ => eprintln!(\"\"),\n+   |              ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+\n+error: aborting due to 4 previous errors\n "}]}