{"sha": "754dcc401d6262309d53c16ca640b1922ffea9ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NGRjYzQwMWQ2MjYyMzA5ZDUzYzE2Y2E2NDBiMTkyMmZmZWE5Y2E=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T05:59:01Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T05:59:01Z"}, "message": "Do not force_allocate SwitchInt discrs.", "tree": {"sha": "f3913bc3ecb3b071708197b999fd867423598b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3913bc3ecb3b071708197b999fd867423598b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754dcc401d6262309d53c16ca640b1922ffea9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754dcc401d6262309d53c16ca640b1922ffea9ca", "html_url": "https://github.com/rust-lang/rust/commit/754dcc401d6262309d53c16ca640b1922ffea9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754dcc401d6262309d53c16ca640b1922ffea9ca/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e6c57ef9085bc5d741db120b2a79dbc1296e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e6c57ef9085bc5d741db120b2a79dbc1296e31", "html_url": "https://github.com/rust-lang/rust/commit/49e6c57ef9085bc5d741db120b2a79dbc1296e31"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "bbba52de52728624bd05091ec4c01c477bae7901", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/754dcc401d6262309d53c16ca640b1922ffea9ca/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754dcc401d6262309d53c16ca640b1922ffea9ca/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=754dcc401d6262309d53c16ca640b1922ffea9ca", "patch": "@@ -791,17 +791,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<'tcx, Value> {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n-            Consume(ref lvalue) => {\n-                match self.eval_lvalue(lvalue)? {\n-                    Lvalue::Ptr { ptr, extra } => {\n-                        assert_eq!(extra, LvalueExtra::None);\n-                        Ok(Value::ByRef(ptr))\n-                    }\n-                    Lvalue::Local { frame, local } => {\n-                        self.stack[frame].get_local(local).ok_or(EvalError::ReadUndefBytes)\n-                    }\n-                }\n-            }\n+            Consume(ref lvalue) => self.eval_and_read_lvalue(lvalue),\n \n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal;\n@@ -841,6 +831,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n+    fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n+        match self.eval_lvalue(lvalue)? {\n+            Lvalue::Ptr { ptr, extra } => {\n+                assert_eq!(extra, LvalueExtra::None);\n+                Ok(Value::ByRef(ptr))\n+            }\n+            Lvalue::Local { frame, local } => {\n+                self.stack[frame].get_local(local).ok_or(EvalError::ReadUndefBytes)\n+            }\n+        }\n+    }\n+\n     fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue> {\n         use rustc::mir::repr::Lvalue::*;\n         let lvalue = match *mir_lvalue {"}, {"sha": "132aa101f87ef6f59b40522729747c9028484841", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/754dcc401d6262309d53c16ca640b1922ffea9ca/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754dcc401d6262309d53c16ca640b1922ffea9ca/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=754dcc401d6262309d53c16ca640b1922ffea9ca", "patch": "@@ -41,13 +41,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                // FIXME(solson)\n-                let lvalue = self.eval_lvalue(discr)?;\n-                let lvalue = self.force_allocation(lvalue)?;\n-\n-                let discr_ptr = lvalue.to_ptr();\n+                let discr_val = self.eval_and_read_lvalue(discr)?;\n                 let discr_ty = self.lvalue_ty(discr);\n-                let discr_val = self.read_value(discr_ptr, discr_ty)?;\n                 let discr_prim = self.value_to_primval(discr_val, discr_ty)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found."}]}