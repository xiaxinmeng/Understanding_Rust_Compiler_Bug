{"sha": "876f92d547af5f39170350f3995647ec934f590b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmY5MmQ1NDdhZjVmMzkxNzAzNTBmMzk5NTY0N2VjOTM0ZjU5MGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-15T10:24:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-15T10:24:51Z"}, "message": "Merge #2843\n\n2843: Add inlay parameter name hints for call expr r=matklad a=imtsuki\n\nThis patch adds Intellij-like parameter name hints for literal values in function calls.\r\n\r\n<img width=\"624\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/8423594/72366533-68d7f800-3735-11ea-9279-cf193ca8ca2f.png\">\r\n\r\nSigned-off-by: imtsuki <me@qjx.app>\n\nCo-authored-by: imtsuki <me@qjx.app>", "tree": {"sha": "b2dfc9053f910d1f64f3d899628cdaf482953aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dfc9053f910d1f64f3d899628cdaf482953aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876f92d547af5f39170350f3995647ec934f590b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHuhzCRBK7hj4Ov3rIwAAdHIIAEl+Cdm63j2YkDLYujLaNOv1\nn4SNBel1A6YweDY/Ub1S8DURBVzXkl8BMbkQkc2tJfck7zy6nuL0FYmAlGk2zztw\ngqHYvKQs+dF6IxAae1cf384CkIcBdGS7aEnduG/XG0mXzmjPu1FnRcJkjRzi42aJ\nEG4a59AnfUgt7+5+GUUXNIOR+e9PKE0dhOFUZFrpxgbq3Xp4l09tEXujJp+P1XgJ\nisr0IxDVpEuWgRWtr39qcb1h517Ky3aLb8CwvwP3JVBl0arcZAC//zuUq5bD9tVH\nbBC4rLEL75/Xbwrz9j3u1pQEGYi/KZ0ZxDDS5kyV5XT6yf/wsL+WkYgB3txaeWE=\n=slTP\n-----END PGP SIGNATURE-----\n", "payload": "tree b2dfc9053f910d1f64f3d899628cdaf482953aee\nparent bc8be6bcdb7ea9b23cc6723769e6071a705cb88b\nparent d854ad8f279e5a3a4b3908bf5b0afdaba3d37bc9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579083891 +0000\ncommitter GitHub <noreply@github.com> 1579083891 +0000\n\nMerge #2843\n\n2843: Add inlay parameter name hints for call expr r=matklad a=imtsuki\n\nThis patch adds Intellij-like parameter name hints for literal values in function calls.\r\n\r\n<img width=\"624\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/8423594/72366533-68d7f800-3735-11ea-9279-cf193ca8ca2f.png\">\r\n\r\nSigned-off-by: imtsuki <me@qjx.app>\n\nCo-authored-by: imtsuki <me@qjx.app>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876f92d547af5f39170350f3995647ec934f590b", "html_url": "https://github.com/rust-lang/rust/commit/876f92d547af5f39170350f3995647ec934f590b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876f92d547af5f39170350f3995647ec934f590b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8be6bcdb7ea9b23cc6723769e6071a705cb88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8be6bcdb7ea9b23cc6723769e6071a705cb88b", "html_url": "https://github.com/rust-lang/rust/commit/bc8be6bcdb7ea9b23cc6723769e6071a705cb88b"}, {"sha": "d854ad8f279e5a3a4b3908bf5b0afdaba3d37bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d854ad8f279e5a3a4b3908bf5b0afdaba3d37bc9", "html_url": "https://github.com/rust-lang/rust/commit/d854ad8f279e5a3a4b3908bf5b0afdaba3d37bc9"}], "stats": {"total": 216, "additions": 203, "deletions": 13}, "files": [{"sha": "ddc53a52b501a4d5188fd9667a44426524f15af5", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -34,6 +34,8 @@ pub struct FunctionSignature {\n     pub generic_parameters: Vec<String>,\n     /// Parameters of the function\n     pub parameters: Vec<String>,\n+    /// Parameter names of the function\n+    pub parameter_names: Vec<String>,\n     /// Optional return type\n     pub ret_type: Option<String>,\n     /// Where predicates\n@@ -75,6 +77,7 @@ impl FunctionSignature {\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: node.name().map(|n| n.text().to_string()),\n                 parameters: params,\n+                parameter_names: vec![],\n                 generic_parameters: generic_parameters(&node),\n                 where_predicates: where_predicates(&node),\n                 doc: None,\n@@ -114,6 +117,7 @@ impl FunctionSignature {\n                 name: Some(name),\n                 ret_type: None,\n                 parameters: params,\n+                parameter_names: vec![],\n                 generic_parameters: vec![],\n                 where_predicates: vec![],\n                 doc: None,\n@@ -134,6 +138,7 @@ impl FunctionSignature {\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: None,\n                 parameters: params,\n+                parameter_names: vec![],\n                 generic_parameters: vec![],\n                 where_predicates: vec![],\n                 doc: None,\n@@ -157,6 +162,20 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n             res\n         }\n \n+        fn param_name_list(node: &ast::FnDef) -> Vec<String> {\n+            let mut res = vec![];\n+            if let Some(param_list) = node.param_list() {\n+                if let Some(self_param) = param_list.self_param() {\n+                    res.push(self_param.syntax().text().to_string())\n+                }\n+\n+                res.extend(param_list.params().map(|param| {\n+                    param.pat().map(|pat| pat.syntax().text().to_string()).unwrap_or_default()\n+                }));\n+            }\n+            res\n+        }\n+\n         FunctionSignature {\n             kind: CallableKind::Function,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n@@ -166,6 +185,7 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                 .and_then(|r| r.type_ref())\n                 .map(|n| n.syntax().text().to_string()),\n             parameters: param_list(node),\n+            parameter_names: param_name_list(node),\n             generic_parameters: generic_parameters(node),\n             where_predicates: where_predicates(node),\n             // docs are processed separately"}, {"sha": "8cb0c70ddd68b7fda08ff5b2525d204718dfaf45", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 139, "deletions": 2, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -4,15 +4,16 @@ use hir::{HirDisplay, SourceAnalyzer};\n use once_cell::unsync::Lazy;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, TypeAscriptionOwner},\n+    ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-use crate::{db::RootDatabase, FileId};\n+use crate::{db::RootDatabase, FileId, FunctionSignature};\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n+    ParameterHint,\n }\n \n #[derive(Debug)]\n@@ -87,10 +88,79 @@ fn get_inlay_hints(\n                         .collect(),\n                 )\n             },\n+            ast::CallExpr(it) => {\n+                get_param_name_hints(db, &analyzer, ast::Expr::from(it))\n+            },\n+            ast::MethodCallExpr(it) => {\n+                get_param_name_hints(db, &analyzer, ast::Expr::from(it))\n+            },\n             _ => None,\n         }\n     }\n }\n+fn get_param_name_hints(\n+    db: &RootDatabase,\n+    analyzer: &SourceAnalyzer,\n+    expr: ast::Expr,\n+) -> Option<Vec<InlayHint>> {\n+    let args = match &expr {\n+        ast::Expr::CallExpr(expr) => Some(expr.arg_list()?.args()),\n+        ast::Expr::MethodCallExpr(expr) => Some(expr.arg_list()?.args()),\n+        _ => None,\n+    }?;\n+\n+    let mut parameters = get_fn_signature(db, analyzer, &expr)?.parameter_names.into_iter();\n+\n+    if let ast::Expr::MethodCallExpr(_) = &expr {\n+        parameters.next();\n+    };\n+\n+    let hints = parameters\n+        .zip(args)\n+        .filter_map(|(param, arg)| {\n+            if arg.syntax().kind() == SyntaxKind::LITERAL {\n+                Some((arg.syntax().text_range(), param))\n+            } else {\n+                None\n+            }\n+        })\n+        .map(|(range, param_name)| InlayHint {\n+            range,\n+            kind: InlayKind::ParameterHint,\n+            label: param_name.into(),\n+        })\n+        .collect();\n+\n+    Some(hints)\n+}\n+\n+fn get_fn_signature(\n+    db: &RootDatabase,\n+    analyzer: &SourceAnalyzer,\n+    expr: &ast::Expr,\n+) -> Option<FunctionSignature> {\n+    match expr {\n+        ast::Expr::CallExpr(expr) => {\n+            // FIXME: Type::as_callable is broken for closures\n+            let callable_def = analyzer.type_of(db, &expr.expr()?)?.as_callable()?;\n+            match callable_def {\n+                hir::CallableDef::FunctionId(it) => {\n+                    let fn_def = it.into();\n+                    Some(FunctionSignature::from_hir(db, fn_def))\n+                }\n+                hir::CallableDef::StructId(it) => FunctionSignature::from_struct(db, it.into()),\n+                hir::CallableDef::EnumVariantId(it) => {\n+                    FunctionSignature::from_enum_variant(db, it.into())\n+                }\n+            }\n+        }\n+        ast::Expr::MethodCallExpr(expr) => {\n+            let fn_def = analyzer.resolve_method_call(&expr)?;\n+            Some(FunctionSignature::from_hir(db, fn_def))\n+        }\n+        _ => None,\n+    }\n+}\n \n fn get_pat_type_hints(\n     db: &RootDatabase,\n@@ -605,4 +675,71 @@ fn main() {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn function_call_parameter_hint() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+struct Test {}\n+\n+impl Test {\n+    fn method(&self, param: i32) -> i32 {\n+        param * 2\n+    }\n+}\n+\n+fn test_func(foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n+    foo + bar\n+}\n+\n+fn main() {\n+    let not_literal = 1;\n+    let _: i32 = test_func(1, 2, \"hello\", 3, not_literal);\n+    let t: Test = Test {};\n+    t.method(123);\n+    Test::method(&t, 3456);\n+}\"#,\n+        );\n+\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [207; 218),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [251; 252),\n+                kind: ParameterHint,\n+                label: \"foo\",\n+            },\n+            InlayHint {\n+                range: [254; 255),\n+                kind: ParameterHint,\n+                label: \"bar\",\n+            },\n+            InlayHint {\n+                range: [257; 264),\n+                kind: ParameterHint,\n+                label: \"msg\",\n+            },\n+            InlayHint {\n+                range: [266; 267),\n+                kind: ParameterHint,\n+                label: \"_\",\n+            },\n+            InlayHint {\n+                range: [323; 326),\n+                kind: ParameterHint,\n+                label: \"param\",\n+            },\n+            InlayHint {\n+                range: [350; 354),\n+                kind: ParameterHint,\n+                label: \"param\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "f2db575eabc317ca8a843985b372f4b5f78ae0c2", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -953,6 +953,7 @@ pub fn handle_inlay_hints(\n             range: api_type.range.conv_with(&line_index),\n             kind: match api_type.kind {\n                 ra_ide::InlayKind::TypeHint => InlayKind::TypeHint,\n+                ra_ide::InlayKind::ParameterHint => InlayKind::ParameterHint,\n             },\n         })\n         .collect())"}, {"sha": "dc327f53d2e4fdb8fe04f9a648af31d10ecfbca8", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -197,6 +197,7 @@ pub struct InlayHintsParams {\n #[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n pub enum InlayKind {\n     TypeHint,\n+    ParameterHint,\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}, {"sha": "d4c310734a25e38b4287f470e73b20a870134b40", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -228,7 +228,7 @@\n                 \"rust-analyzer.displayInlayHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Display additional type information in the editor\"\n+                    \"description\": \"Display additional type and parameter information in the editor\"\n                 },\n                 \"rust-analyzer.maxInlayHintLength\": {\n                     \"type\": \"number\","}, {"sha": "c4206cf5b27a674d5114b924e45d4e75417fc896", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/876f92d547af5f39170350f3995647ec934f590b/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/876f92d547af5f39170350f3995647ec934f590b/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=876f92d547af5f39170350f3995647ec934f590b", "patch": "@@ -38,6 +38,12 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     },\n });\n \n+const parameterHintDecorationType = vscode.window.createTextEditorDecorationType({\n+    before: {\n+        color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n+    }\n+})\n+\n class HintsUpdater {\n     private pending: Map<string, vscode.CancellationTokenSource> = new Map();\n     private ctx: Ctx;\n@@ -55,7 +61,10 @@ class HintsUpdater {\n         if (this.enabled) {\n             await this.refresh();\n         } else {\n-            this.allEditors.forEach(it => this.setDecorations(it, []));\n+            this.allEditors.forEach(it => {\n+                this.setTypeDecorations(it, []);\n+                this.setParameterDecorations(it, []);\n+            });\n         }\n     }\n \n@@ -68,15 +77,27 @@ class HintsUpdater {\n     private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints == null) return;\n-        const newDecorations = newHints.map(hint => ({\n-            range: hint.range,\n-            renderOptions: {\n-                after: {\n-                    contentText: `: ${hint.label}`,\n+        const newTypeDecorations = newHints.filter(hint => hint.kind === 'TypeHint')\n+            .map(hint => ({\n+                range: hint.range,\n+                renderOptions: {\n+                    after: {\n+                        contentText: `: ${hint.label}`,\n+                    },\n                 },\n-            },\n-        }));\n-        this.setDecorations(editor, newDecorations);\n+            }));\n+        this.setTypeDecorations(editor, newTypeDecorations);\n+\n+        const newParameterDecorations = newHints.filter(hint => hint.kind === 'ParameterHint')\n+            .map(hint => ({\n+                range: hint.range,\n+                renderOptions: {\n+                    before: {\n+                        contentText: `${hint.label}: `,\n+                    },\n+                },\n+            }));\n+        this.setParameterDecorations(editor, newParameterDecorations);\n     }\n \n     private get allEditors(): vscode.TextEditor[] {\n@@ -85,7 +106,7 @@ class HintsUpdater {\n         );\n     }\n \n-    private setDecorations(\n+    private setTypeDecorations(\n         editor: vscode.TextEditor,\n         decorations: vscode.DecorationOptions[],\n     ) {\n@@ -95,6 +116,16 @@ class HintsUpdater {\n         );\n     }\n \n+    private setParameterDecorations(\n+        editor: vscode.TextEditor,\n+        decorations: vscode.DecorationOptions[],\n+    ) {\n+        editor.setDecorations(\n+            parameterHintDecorationType,\n+            this.enabled ? decorations : [],\n+        );\n+    }\n+\n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         let client = this.ctx.client;\n         if (!client) return null;"}]}