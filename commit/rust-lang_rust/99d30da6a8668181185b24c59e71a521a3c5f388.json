{"sha": "99d30da6a8668181185b24c59e71a521a3c5f388", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDMwZGE2YTg2NjgxODExODViMjRjNTllNzFhNTIxYTNjNWYzODg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-14T18:20:06Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-14T21:46:15Z"}, "message": "Improve `Instance` docs", "tree": {"sha": "b58665c81385b5c544370b5ce249741fb1af6604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58665c81385b5c544370b5ce249741fb1af6604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d30da6a8668181185b24c59e71a521a3c5f388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d30da6a8668181185b24c59e71a521a3c5f388", "html_url": "https://github.com/rust-lang/rust/commit/99d30da6a8668181185b24c59e71a521a3c5f388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d30da6a8668181185b24c59e71a521a3c5f388/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb54ed484e2239a3e9eff3be17df00d2a162be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb54ed484e2239a3e9eff3be17df00d2a162be3", "html_url": "https://github.com/rust-lang/rust/commit/4fb54ed484e2239a3e9eff3be17df00d2a162be3"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "d628d6783d5b0d71f12ed4c9aaf900660dec040f", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/99d30da6a8668181185b24c59e71a521a3c5f388/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d30da6a8668181185b24c59e71a521a3c5f388/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=99d30da6a8668181185b24c59e71a521a3c5f388", "patch": "@@ -9,6 +9,11 @@ use rustc_macros::HashStable;\n \n use std::fmt;\n \n+/// A monomorphized `InstanceDef`.\n+///\n+/// Monomorphization happens on-the-fly and no monomorphized MIR is ever created. Instead, this type\n+/// simply couples a potentially generic `InstanceDef` with some substs, and codegen and const eval\n+/// will do all required substitution as they run.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n #[derive(HashStable, Lift)]\n pub struct Instance<'tcx> {\n@@ -18,10 +23,26 @@ pub struct Instance<'tcx> {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InstanceDef<'tcx> {\n+    /// A user-defined callable item.\n+    ///\n+    /// This includes:\n+    /// - `fn` items\n+    /// - closures\n+    /// - generators\n     Item(DefId),\n+\n+    /// An intrinsic `fn` item (with `\"rust-intrinsic\"` or `\"platform-intrinsic\"` ABI).\n+    ///\n+    /// Alongside `Virtual`, this is the only `InstanceDef` that does not have its own callable MIR.\n+    /// Instead, codegen and const eval \"magically\" evaluate calls to intrinsics purely in the\n+    /// caller.\n     Intrinsic(DefId),\n \n-    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n+    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self` (part of the\n+    /// `unsized_locals` feature).\n+    ///\n+    /// The generated shim will take `Self` via `*mut Self` - conceptually this is `&owned Self` -\n+    /// and dereference the argument to call the original function.\n     VtableShim(DefId),\n \n     /// `fn()` pointer where the function itself cannot be turned into a pointer.\n@@ -37,27 +58,31 @@ pub enum InstanceDef<'tcx> {\n     /// (the definition of the function itself).\n     ReifyShim(DefId),\n \n-    /// `<fn() as FnTrait>::call_*`\n+    /// `<fn() as FnTrait>::call_*` (generated `FnTrait` implementation for `fn()` pointers).\n+    ///\n     /// `DefId` is `FnTrait::call_*`.\n     ///\n     /// NB: the (`fn` pointer) type must currently be monomorphic to avoid double substitution\n     /// problems with the MIR shim bodies. `Instance::resolve` enforces this.\n     // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     FnPtrShim(DefId, Ty<'tcx>),\n \n-    /// `<dyn Trait as Trait>::fn`, \"direct calls\" of which are implicitly\n-    /// codegen'd as virtual calls.\n+    /// Dynamic dispatch to `<dyn Trait as Trait>::fn`.\n     ///\n-    /// NB: if this is reified to a `fn` pointer, a `ReifyShim` is used\n-    /// (see `ReifyShim` above for more details on that).\n+    /// This `InstanceDef` does not have callable MIR. Calls to `Virtual` instances must be\n+    /// codegen'd as virtual calls through the vtable.\n+    ///\n+    /// If this is reified to a `fn` pointer, a `ReifyShim` is used (see `ReifyShim` above for more\n+    /// details on that).\n     Virtual(DefId, usize),\n \n-    /// `<[mut closure] as FnOnce>::call_once`\n-    ClosureOnceShim {\n-        call_once: DefId,\n-    },\n+    /// `<[FnMut closure] as FnOnce>::call_once`.\n+    ///\n+    /// The `DefId` is the ID of the `call_once` method in `FnOnce`.\n+    ClosureOnceShim { call_once: DefId },\n \n     /// `core::ptr::drop_in_place::<T>`.\n+    ///\n     /// The `DefId` is for `core::ptr::drop_in_place`.\n     /// The `Option<Ty<'tcx>>` is either `Some(T)`, or `None` for empty drop\n     /// glue.\n@@ -67,7 +92,12 @@ pub enum InstanceDef<'tcx> {\n     // FIXME(#69925) support polymorphic MIR shim bodies properly instead.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n-    ///`<T as Clone>::clone` shim.\n+    /// Compiler-generated `<T as Clone>::clone` implementation.\n+    ///\n+    /// For all types that automatically implement `Copy`, a trivial `Clone` impl is provided too.\n+    /// Additionally, arrays, tuples, and closures get a `Clone` shim even if they aren't `Copy`.\n+    ///\n+    /// The `DefId` is for `Clone::clone`, the `Ty` is the type `T` with the builtin `Clone` impl.\n     ///\n     /// NB: the type must currently be monomorphic to avoid double substitution\n     /// problems with the MIR shim bodies. `Instance::resolve` enforces this."}, {"sha": "d3484b8af89fd54f9eb67e2f51350cc8e8dd0592", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d30da6a8668181185b24c59e71a521a3c5f388/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d30da6a8668181185b24c59e71a521a3c5f388/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=99d30da6a8668181185b24c59e71a521a3c5f388", "patch": "@@ -302,7 +302,7 @@ pub fn get_vtable_index_of_object_method<N>(\n ) -> usize {\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    // Skip over associated types and constants.\n+    // Skip over associated types and constants, as those aren't stored in the vtable.\n     let mut entries = object.vtable_base;\n     for trait_item in tcx.associated_items(object.upcast_trait_ref.def_id()).in_definition_order() {\n         if trait_item.def_id == method_def_id {"}]}