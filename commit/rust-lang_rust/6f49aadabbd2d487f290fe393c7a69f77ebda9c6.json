{"sha": "6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNDlhYWRhYmJkMmQ0ODdmMjkwZmUzOTNjN2E2OWY3N2ViZGE5YzY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-03-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-03-06T00:00:00Z"}, "message": "Disable destination propagation on all mir-opt-levels", "tree": {"sha": "38e03f147d02c151f8b5d3c060e22c98ea61910f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e03f147d02c151f8b5d3c060e22c98ea61910f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "html_url": "https://github.com/rust-lang/rust/commit/6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51748a8fc77283914d4135f31b5966a407208187", "url": "https://api.github.com/repos/rust-lang/rust/commits/51748a8fc77283914d4135f31b5966a407208187", "html_url": "https://github.com/rust-lang/rust/commit/51748a8fc77283914d4135f31b5966a407208187"}], "stats": {"total": 407, "additions": 260, "deletions": 147}, "files": [{"sha": "f7568e1d929ddd2b9807bd5687f6c3838efac9dd", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -127,6 +127,11 @@ pub struct DestinationPropagation;\n \n impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        //  FIXME(#79191, #82678)\n+        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+            return;\n+        }\n+\n         // Only run at mir-opt-level=3 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n         if tcx.sess.mir_opt_level() < 3 {"}, {"sha": "b0c97f423781876ac0ffe0d6264494400fecd6f4", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -5,22 +5,26 @@\n       debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:2:36: 2:37\n       let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:2:48: 2:52\n       let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-      let mut _3: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-      let mut _4: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+      let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+      let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n       scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          debug self => _7;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          let mut _7: &str;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          debug self => _3;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          let mut _8: &str;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           scope 2 {\n           }\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          _7 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n--         _2 = transmute::<&str, &[u8]>(move _7) -> bb14; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-+         _2 = transmute::<&str, &[u8]>(move _7) -> bb12; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+          StorageLive(_8);                 // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          _8 = _3;                         // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+-         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n++         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n                                            // mir::Constant\n                                            // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {std::intrinsics::transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n@@ -44,9 +48,9 @@\n       }\n   \n       bb5: {\n-          _3 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-          _4 = Ge(move _3, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-          switchInt(move _4) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          _5 = Ge(move _4, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          switchInt(move _5) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n       }\n   \n       bb6: {\n@@ -93,9 +97,11 @@\n   \n -     bb14: {\n +     bb12: {\n-          _5 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-          _6 = Ge(move _5, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-          switchInt(move _6) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          StorageDead(_8);                 // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:22: 3:23\n+          _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          switchInt(move _7) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n       }\n   }\n   "}, {"sha": "fffcf82b3f1d8f32d087bdc7b75ee2f60dc3efd3", "filename": "src/test/mir-opt/dest-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -1,5 +1,5 @@\n //! Tests that assignment in both branches of an `if` are eliminated.\n-\n+// compile-flags: -Zunsound-mir-opts\n fn val() -> i32 {\n     1\n }"}, {"sha": "41796247789aa33e2e2b4692dbc58a045ff9098b", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -1,6 +1,6 @@\n // Check that DestinationPropagation does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n-\n+// compile-flags: -Zunsound-mir-opts\n fn dummy(x: u8) -> u8 {\n     x\n }"}, {"sha": "c9187d408675cb2bcdcfeb6b18fe5a57c5c0d061", "filename": "src/test/mir-opt/dest-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -1,5 +1,5 @@\n //! Tests that cyclic assignments don't hang DestinationPropagation, and result in reasonable code.\n-\n+// compile-flags: -Zunsound-mir-opts\n fn val() -> i32 {\n     1\n }"}, {"sha": "3627d479a9aa30708f223fda4bfe4ff5acb7e5f9", "filename": "src/test/mir-opt/dest-prop/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -1,5 +1,5 @@\n //! Copy of `nrvo-simple.rs`, to ensure that full dest-prop handles it too.\n-\n+// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR simple.nrvo.DestinationPropagation.diff\n fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {\n     let mut buf = [0; 1024];"}, {"sha": "0ac9661a66a31d291c49b58fad860654b936d5be", "filename": "src/test/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -1,5 +1,5 @@\n //! Tests that projections through unions cancel `DestinationPropagation`.\n-\n+// compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {\n     1\n }"}, {"sha": "a7c2c93aad23ac9f82da502317fcf09a78766f37", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -17,7 +17,8 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n             debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n             debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            let mut _10: T;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         }\n     }\n \n@@ -39,10 +40,13 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_0.0: i32) = (*((*_6).0: &i32)); // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _10 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _10 = (*((*_6).0: &i32));        // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _11 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9"}, {"sha": "e2fad5b60ebfaf49ff0cda071d872b44783ae58f", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -5,18 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _7: ();                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _8: ();                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n +         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _6: !;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         scope 2 {\n +             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:22:5: 22:22\n++             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:22:5: 22:22\n +             scope 3 {\n-+                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:22:5: 22:22\n++                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:22:5: 22:22\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:22:5: 22:22\n +                 scope 7 (inlined sleep) { // at $DIR/inline-diverging.rs:22:5: 22:22\n@@ -40,12 +42,11 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         StorageLive(_7);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _7 = const ();                   // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         goto -> bb1;                     // scope 4 at $DIR/inline-diverging.rs:22:5: 22:22\n       }\n   "}, {"sha": "fba88c83eb4f39bb27b9878eb8ff85116b167a1d", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -24,9 +24,12 @@\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n-+         debug a => _8;                   // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _8: bool;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _9: u32;                 // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n   \n       bb0: {\n@@ -65,16 +68,18 @@\n -                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         _9 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         _12 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageDead(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n           StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n           StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47\n@@ -89,28 +94,36 @@\n +     }\n + \n +     bb3: {\n-+         _8 = move _7;                    // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         switchInt(move _8) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + \n +     bb4: {\n-+         ((_1 as Yielded).0: i32) = const 7_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + \n +     bb5: {\n-+         ((_1 as Yielded).0: i32) = const 13_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + \n +     bb6: {\n++         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 3; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         ((_1 as Complete).0: bool) = move _7; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 1; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41"}, {"sha": "e2ec0e82ebf0990d5361f66eee12c84011549a59", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 65, "deletions": 33, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -6,25 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -43,36 +50,57 @@\n           _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = const main::promoted[0];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = (_5.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (_5.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (*_11);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -85,8 +113,12 @@\n       }\n   \n       bb2: {\n-          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }"}, {"sha": "e2ec0e82ebf0990d5361f66eee12c84011549a59", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 65, "deletions": 33, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -6,25 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -43,36 +50,57 @@\n           _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = const main::promoted[0];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = (_5.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (_5.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (*_11);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -85,8 +113,12 @@\n       }\n   \n       bb2: {\n-          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }"}, {"sha": "19d161ac2b1039c3f7f1bce445ba602de1d53e10", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -3,73 +3,86 @@\n fn num_to_digit(_1: char) -> u32 {\n     debug num => _1;                     // in scope 0 at $DIR/issue-59352.rs:12:21: 12:24\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue-59352.rs:12:35: 12:38\n-    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n-    let mut _3: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-    let mut _4: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-    let mut _9: isize;                   // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _2: char;                    // in scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n+    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+    let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+    let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _11: isize;                  // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n-        debug self => _7;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        debug radix => _4;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let mut _5: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let _6: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let mut _7: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        debug self => _2;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        debug radix => _5;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _6: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let _7: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _8: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n         scope 2 (inlined Option::<u32>::is_some) { // at $DIR/issue-59352.rs:14:8: 14:23\n-            debug self => _5;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+            debug self => _6;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+            let mut _9: isize;           // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n         }\n     }\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n-        debug self => _2;                // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n-        let mut _8: isize;               // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        debug self => _3;                // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        let mut _10: isize;              // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n         scope 4 {\n             debug val => _0;             // in scope 4 at $DIR/issue-59352.rs:14:26: 14:50\n         }\n     }\n \n     bb0: {\n-        _7 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        _4 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n+        _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n+        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageLive(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        _6 = char::methods::<impl char>::to_digit(move _7, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _8 = _2;                         // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:8: 14:23\n                                          // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-        _3 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-        _2 = char::methods::<impl char>::to_digit(move _3, const 8_u32) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:30: 14:38\n                                          // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n+        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n         _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n \n     bb3: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n-        StorageLive(_8);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n-        _8 = discriminant(_2);           // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n-        switchInt(move _8) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n+        StorageLive(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        _10 = discriminant(_3);          // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n     }\n \n     bb4: {\n         return;                          // scope 0 at $DIR/issue-59352.rs:15:2: 15:2\n     }\n \n     bb5: {\n-        _5 = &_6;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        _9 = discriminant((*_5));        // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _6 = &_7;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _9 = discriminant((*_6));        // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_11);                // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        _11 = move _9;                   // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageDead(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        switchInt(move _9) -> [1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+        StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23\n+        switchInt(move _11) -> [1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n \n     bb6: {\n@@ -90,9 +103,9 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb8: {\n-        _0 = move ((_2 as Some).0: u32); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n-        StorageDead(_8);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n+        _0 = move ((_3 as Some).0: u32); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n }"}, {"sha": "a87d5e1f0ff8b5a112eb5f9357b4852f6ae8df2b", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -2,16 +2,17 @@\n \n fn f_u64() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:16\n+    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n     scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n         debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        let mut _1: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n         }\n     }\n \n     bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n@@ -25,6 +26,7 @@ fn f_u64() -> () {\n     bb1: {\n         StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:34:16: 36:2\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:36:2: 36:2\n     }"}, {"sha": "f1718c5752c1cabb8a6b0b7c7566dfd48feb9fe5", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f49aadabbd2d487f290fe393c7a69f77ebda9c6/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=6f49aadabbd2d487f290fe393c7a69f77ebda9c6", "patch": "@@ -17,8 +17,13 @@\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:14:9: 14:14\n           _1 = [const 0_u8; 10];           // scope 0 at $DIR/simplify-locals.rs:14:17: 14:26\n -         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n--         _3 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _4 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _3 = _4;                         // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:25: 16:26\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n -         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n           _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:13:8: 17:2\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:17:1: 17:2"}]}