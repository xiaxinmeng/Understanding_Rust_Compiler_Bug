{"sha": "b51b71bf258c6520ee60f865a3658b30ce44ef18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MWI3MWJmMjU4YzY1MjBlZTYwZjg2NWEzNjU4YjMwY2U0NGVmMTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T13:04:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T13:04:03Z"}, "message": "rearrange methods", "tree": {"sha": "10fb5e68eb39666b5e6ff941e02b79baff69e2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10fb5e68eb39666b5e6ff941e02b79baff69e2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51b71bf258c6520ee60f865a3658b30ce44ef18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51b71bf258c6520ee60f865a3658b30ce44ef18", "html_url": "https://github.com/rust-lang/rust/commit/b51b71bf258c6520ee60f865a3658b30ce44ef18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51b71bf258c6520ee60f865a3658b30ce44ef18/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f99af0a60ff80097377c1a041bcdeaf33c38de", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f99af0a60ff80097377c1a041bcdeaf33c38de", "html_url": "https://github.com/rust-lang/rust/commit/f7f99af0a60ff80097377c1a041bcdeaf33c38de"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "bcfacde7260438b5d07509dd05ec6824c58e2cbc", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/b51b71bf258c6520ee60f865a3658b30ce44ef18/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51b71bf258c6520ee60f865a3658b30ce44ef18/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=b51b71bf258c6520ee60f865a3658b30ce44ef18", "patch": "@@ -96,45 +96,109 @@ unsafe impl TransparentNewType for SyntaxNode {\n     type Repr = rowan::SyntaxNode<RaTypes>;\n }\n \n-impl SyntaxNode {\n-    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SyntaxNode> {\n-        let ptr = TreeArc(rowan::SyntaxNode::new(green, errors));\n+impl ToOwned for SyntaxNode {\n+    type Owned = TreeArc<SyntaxNode>;\n+    fn to_owned(&self) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(self.0.to_owned());\n         TreeArc::cast(ptr)\n     }\n }\n \n+impl fmt::Debug for SyntaxNode {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())?;\n+        if has_short_text(self.kind()) {\n+            write!(fmt, \" \\\"{}\\\"\", self.text())?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum Direction {\n     Next,\n     Prev,\n }\n \n impl SyntaxNode {\n+    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(rowan::SyntaxNode::new(green, errors));\n+        TreeArc::cast(ptr)\n+    }\n+\n+    pub fn kind(&self) -> SyntaxKind {\n+        self.0.kind()\n+    }\n+\n+    pub fn range(&self) -> TextRange {\n+        self.0.range()\n+    }\n+\n+    pub fn text(&self) -> SyntaxText {\n+        SyntaxText::new(self)\n+    }\n+\n+    pub fn is_leaf(&self) -> bool {\n+        self.0.is_leaf()\n+    }\n+\n     pub fn leaf_text(&self) -> Option<&SmolStr> {\n         self.0.leaf_text()\n     }\n+\n+    pub fn parent(&self) -> Option<&SyntaxNode> {\n+        self.0.parent().map(SyntaxNode::from_repr)\n+    }\n+\n+    pub fn first_child(&self) -> Option<&SyntaxNode> {\n+        self.0.first_child().map(SyntaxNode::from_repr)\n+    }\n+\n+    pub fn last_child(&self) -> Option<&SyntaxNode> {\n+        self.0.last_child().map(SyntaxNode::from_repr)\n+    }\n+\n+    pub fn next_sibling(&self) -> Option<&SyntaxNode> {\n+        self.0.next_sibling().map(SyntaxNode::from_repr)\n+    }\n+\n+    pub fn prev_sibling(&self) -> Option<&SyntaxNode> {\n+        self.0.prev_sibling().map(SyntaxNode::from_repr)\n+    }\n+\n+    pub fn children(&self) -> SyntaxNodeChildren {\n+        SyntaxNodeChildren(self.0.children())\n+    }\n+\n     pub fn ancestors(&self) -> impl Iterator<Item = &SyntaxNode> {\n         crate::algo::generate(Some(self), |&node| node.parent())\n     }\n+\n     pub fn descendants(&self) -> impl Iterator<Item = &SyntaxNode> {\n         self.preorder().filter_map(|event| match event {\n             WalkEvent::Enter(node) => Some(node),\n             WalkEvent::Leave(_) => None,\n         })\n     }\n+\n     pub fn siblings(&self, direction: Direction) -> impl Iterator<Item = &SyntaxNode> {\n         crate::algo::generate(Some(self), move |&node| match direction {\n             Direction::Next => node.next_sibling(),\n             Direction::Prev => node.prev_sibling(),\n         })\n     }\n+\n     pub fn preorder(&self) -> impl Iterator<Item = WalkEvent<&SyntaxNode>> {\n         self.0.preorder().map(|event| match event {\n             WalkEvent::Enter(n) => WalkEvent::Enter(SyntaxNode::from_repr(n)),\n             WalkEvent::Leave(n) => WalkEvent::Leave(SyntaxNode::from_repr(n)),\n         })\n     }\n \n+    pub fn memory_size_of_subtree(&self) -> usize {\n+        self.0.memory_size_of_subtree()\n+    }\n+\n     pub fn debug_dump(&self) -> String {\n         let mut errors: Vec<_> = match self.ancestors().find_map(SourceFile::cast) {\n             Some(file) => file.errors(),\n@@ -178,78 +242,14 @@ impl SyntaxNode {\n \n         buf\n     }\n-}\n \n-impl ToOwned for SyntaxNode {\n-    type Owned = TreeArc<SyntaxNode>;\n-    fn to_owned(&self) -> TreeArc<SyntaxNode> {\n-        let ptr = TreeArc(self.0.to_owned());\n-        TreeArc::cast(ptr)\n-    }\n-}\n-\n-impl SyntaxNode {\n     pub(crate) fn root_data(&self) -> &Vec<SyntaxError> {\n         self.0.root_data()\n     }\n \n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n         self.0.replace_self(replacement)\n     }\n-\n-    pub fn kind(&self) -> SyntaxKind {\n-        self.0.kind()\n-    }\n-\n-    pub fn range(&self) -> TextRange {\n-        self.0.range()\n-    }\n-\n-    pub fn text(&self) -> SyntaxText {\n-        SyntaxText::new(self)\n-    }\n-\n-    pub fn is_leaf(&self) -> bool {\n-        self.0.is_leaf()\n-    }\n-\n-    pub fn parent(&self) -> Option<&SyntaxNode> {\n-        self.0.parent().map(SyntaxNode::from_repr)\n-    }\n-\n-    pub fn first_child(&self) -> Option<&SyntaxNode> {\n-        self.0.first_child().map(SyntaxNode::from_repr)\n-    }\n-\n-    pub fn last_child(&self) -> Option<&SyntaxNode> {\n-        self.0.last_child().map(SyntaxNode::from_repr)\n-    }\n-\n-    pub fn next_sibling(&self) -> Option<&SyntaxNode> {\n-        self.0.next_sibling().map(SyntaxNode::from_repr)\n-    }\n-\n-    pub fn prev_sibling(&self) -> Option<&SyntaxNode> {\n-        self.0.prev_sibling().map(SyntaxNode::from_repr)\n-    }\n-\n-    pub fn children(&self) -> SyntaxNodeChildren {\n-        SyntaxNodeChildren(self.0.children())\n-    }\n-\n-    pub fn memory_size_of_subtree(&self) -> usize {\n-        self.0.memory_size_of_subtree()\n-    }\n-}\n-\n-impl fmt::Debug for SyntaxNode {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())?;\n-        if has_short_text(self.kind()) {\n-            write!(fmt, \" \\\"{}\\\"\", self.text())?;\n-        }\n-        Ok(())\n-    }\n }\n \n #[derive(Debug)]"}]}