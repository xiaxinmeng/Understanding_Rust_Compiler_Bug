{"sha": "725ddb4a4b06d4a69a6f80da133b1475e5251340", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNWRkYjRhNGIwNmQ0YTY5YTZmODBkYTEzM2IxNDc1ZTUyNTEzNDA=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2017-11-01T23:34:44Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2017-11-02T16:10:09Z"}, "message": "rustc: add item name to deprecated lint warning", "tree": {"sha": "f0d1709ff865478bade24388777c1dc1276ac520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0d1709ff865478bade24388777c1dc1276ac520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725ddb4a4b06d4a69a6f80da133b1475e5251340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725ddb4a4b06d4a69a6f80da133b1475e5251340", "html_url": "https://github.com/rust-lang/rust/commit/725ddb4a4b06d4a69a6f80da133b1475e5251340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725ddb4a4b06d4a69a6f80da133b1475e5251340/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e", "html_url": "https://github.com/rust-lang/rust/commit/8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e"}], "stats": {"total": 545, "additions": 315, "deletions": 230}, "files": [{"sha": "2f527413432bc16c7496aed3f957f45ed39240bd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -516,11 +516,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n-        let lint_deprecated = |note: Option<Symbol>| {\n+        let lint_deprecated = |def_id: DefId, note: Option<Symbol>| {\n+            let path = self.item_path_str(def_id);\n+\n             let msg = if let Some(note) = note {\n-                format!(\"use of deprecated item: {}\", note)\n+                format!(\"use of deprecated item '{}': {}\", path, note)\n             } else {\n-                format!(\"use of deprecated item\")\n+                format!(\"use of deprecated item '{}'\", path)\n             };\n \n             self.lint_node(lint::builtin::DEPRECATED, id, span, &msg);\n@@ -538,7 +540,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if !skip {\n-                lint_deprecated(depr_entry.attr.note);\n+                lint_deprecated(def_id, depr_entry.attr.note);\n             }\n         }\n \n@@ -557,7 +559,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(&Stability{rustc_depr: Some(attr::RustcDeprecation { reason, .. }), ..})\n                 = stability {\n             if id != ast::DUMMY_NODE_ID {\n-                lint_deprecated(Some(reason));\n+                lint_deprecated(def_id, Some(reason));\n             }\n         }\n "}, {"sha": "c11f563229450bcfc757902e31ddcff76a1de3a1", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -151,9 +151,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            cur_path.push(self.def_key(cur_def)\n-                              .disambiguated_data.data.get_opt_name().unwrap_or_else(||\n-                Symbol::intern(\"<unnamed>\").as_str()));\n+            let mut cur_def_key = self.def_key(cur_def);\n+\n+            // For a UnitStruct or TupleStruct we want the name of its parent rather than <unnamed>.\n+            if let DefPathData::StructCtor = cur_def_key.disambiguated_data.data {\n+                let parent = DefId {\n+                    krate: cur_def.krate,\n+                    index: cur_def_key.parent.expect(\"DefPathData::StructCtor missing a parent\"),\n+                };\n+\n+                cur_def_key = self.def_key(parent);\n+            }\n+\n+            let data = cur_def_key.disambiguated_data.data;\n+            let symbol =\n+                data.get_opt_name().unwrap_or_else(|| Symbol::intern(\"<unnamed>\").as_str());\n+            cur_path.push(symbol);\n+\n             match visible_parent_map.get(&cur_def) {\n                 Some(&def) => cur_def = def,\n                 None => return false,"}, {"sha": "175102898759b1070569eb05d5e4768eb4f2bb49", "filename": "src/test/compile-fail/auxiliary/deprecation-lint.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdeprecation-lint.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -52,6 +52,24 @@ pub enum Enum {\n #[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedTupleStruct(pub isize);\n \n+pub mod nested {\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n+    pub struct DeprecatedStruct {\n+        pub i: isize\n+    }\n+\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n+    pub struct DeprecatedUnitStruct;\n+\n+    pub enum Enum {\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n+        DeprecatedVariant,\n+    }\n+\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n+    pub struct DeprecatedTupleStruct(pub isize);\n+}\n+\n pub struct Stable {\n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub override2: u8,"}, {"sha": "a058234a64921c33c5c143514f6554bf6f3a514f", "filename": "src/test/compile-fail/deprecation-lint.rs", "status": "modified", "additions": 162, "deletions": 112, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:deprecation-lint.rs\n+// ignore-tidy-linelength\n \n #![deny(deprecated)]\n #![allow(warnings)]\n@@ -23,133 +24,143 @@ mod cross_crate {\n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ ERROR use of deprecated item\n-        foo.method_deprecated(); //~ ERROR use of deprecated item\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-\n-        deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-\n-        let _ = DeprecatedStruct { //~ ERROR use of deprecated item\n-            i: 0 //~ ERROR use of deprecated item\n+        deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::deprecated'\n+        foo.method_deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated'\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated'\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated'\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+\n+        deprecated_text(); //~ ERROR use of deprecated item 'deprecation_lint::deprecated_text': text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated_text': text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated_text': text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::MethodTester::method_deprecated_text': text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+\n+        let _ = DeprecatedStruct { //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedStruct': text\n+            i: 0 //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedStruct::i': text\n         };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedUnitStruct': text\n \n-        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item 'deprecation_lint::Enum::DeprecatedVariant': text\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedTupleStruct': text\n+\n+        let _ = nested::DeprecatedStruct { //~ ERROR use of deprecated item 'deprecation_lint::nested::DeprecatedStruct': text\n+            i: 0 //~ ERROR use of deprecated item 'deprecation_lint::nested::DeprecatedStruct::i': text\n+        };\n+\n+        let _ = nested::DeprecatedUnitStruct; //~ ERROR use of deprecated item 'deprecation_lint::nested::DeprecatedUnitStruct': text\n+\n+        let _ = nested::Enum::DeprecatedVariant; //~ ERROR use of deprecated item 'deprecation_lint::nested::Enum::DeprecatedVariant': text\n+\n+        let _ = nested::DeprecatedTupleStruct (1); //~ ERROR use of deprecated item 'deprecation_lint::nested::DeprecatedTupleStruct': text\n \n         // At the moment, the lint checker only checks stability in\n         // in the arguments of macros.\n         // Eventually, we will want to lint the contents of the\n         // macro in the module *defining* it. Also, stability levels\n         // on macros themselves are not yet linted.\n-        macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n-        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item 'deprecation_lint::deprecated_text': text\n+        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item 'deprecation_lint::deprecated_text': text\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'deprecation_lint::Trait::trait_deprecated_text': text\n     }\n \n     struct S;\n \n-    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item: text\n-    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item: text\n+    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedTrait': text\n+    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item 'deprecation_lint::DeprecatedTrait': text\n \n     pub fn foo() {\n         let x = Stable {\n             override2: 3,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Stable::override2': text\n         };\n \n         let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Stable::override2': text\n \n         let Stable {\n             override2: _\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Stable::override2': text\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n \n         let x = Stable2(1, 2, 3);\n \n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Stable2::2': text\n \n         let Stable2(_,\n                    _,\n                    _)\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Stable2::2': text\n             = x;\n         // all fine\n         let Stable2(..) = x;\n \n         let x = Deprecated {\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated': text\n             inherit: 1,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated::inherit': text\n         };\n \n         let _ = x.inherit;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated::inherit': text\n \n         let Deprecated {\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated': text\n             inherit: _,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated::inherit': text\n         } = x;\n \n         let Deprecated\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated': text\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2': text\n \n         let _ = x.0;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::0': text\n         let _ = x.1;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::1': text\n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::2': text\n \n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2': text\n             (_,\n-             //~^ ERROR use of deprecated item\n+             //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::0': text\n              _,\n-             //~^ ERROR use of deprecated item\n+             //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::1': text\n              _)\n-             //~^ ERROR use of deprecated item\n+             //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2::2': text\n             = x;\n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'deprecation_lint::Deprecated2': text\n             // the patterns are all fine:\n             (..) = x;\n     }\n@@ -159,7 +170,7 @@ mod inheritance {\n     use deprecation_lint::*;\n \n     fn test_inheritance() {\n-        deprecated_mod::deprecated(); //~ ERROR use of deprecated item\n+        deprecated_mod::deprecated(); //~ ERROR use of deprecated item 'deprecation_lint::deprecated_mod::deprecated': text\n     }\n }\n \n@@ -209,58 +220,89 @@ mod this_crate {\n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n \n+    mod nested {\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n+        pub struct DeprecatedStruct {\n+            i: isize\n+        }\n+\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n+        pub struct DeprecatedUnitStruct;\n+\n+        pub enum Enum {\n+            #[deprecated(since = \"1.0.0\", note = \"text\")]\n+            DeprecatedVariant,\n+        }\n+\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n+        pub struct DeprecatedTupleStruct(pub isize);\n+    }\n+\n     fn test() {\n+        use self::nested;\n+\n         // Only the deprecated cases of the following should generate\n         // errors, because other stability attributes now have meaning\n         // only *across* crates, not within a single crate.\n \n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ ERROR use of deprecated item\n-        foo.method_deprecated(); //~ ERROR use of deprecated item\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-\n-        deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        deprecated(); //~ ERROR use of deprecated item 'this_crate::deprecated'\n+        foo.method_deprecated(); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+\n+        deprecated_text(); //~ ERROR use of deprecated item 'this_crate::deprecated_text': text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n \n         let _ = DeprecatedStruct {\n-            //~^ ERROR use of deprecated item\n-            i: 0 //~ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate::DeprecatedStruct': text\n+            i: 0 //~ ERROR use of deprecated item 'this_crate::DeprecatedStruct::i': text\n+        };\n+\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item 'this_crate::DeprecatedUnitStruct': text\n+\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item 'this_crate::Enum::DeprecatedVariant': text\n+\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item 'this_crate::DeprecatedTupleStruct': text\n+\n+        let _ = nested::DeprecatedStruct {\n+            //~^ ERROR use of deprecated item 'this_crate::nested::DeprecatedStruct': text\n+            i: 0 //~ ERROR use of deprecated item 'this_crate::nested::DeprecatedStruct::i': text\n         };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = nested::DeprecatedUnitStruct; //~ ERROR use of deprecated item 'this_crate::nested::DeprecatedUnitStruct': text\n \n-        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = nested::Enum::DeprecatedVariant; //~ ERROR use of deprecated item 'this_crate::nested::Enum::DeprecatedVariant': text\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = nested::DeprecatedTupleStruct (1); //~ ERROR use of deprecated item 'this_crate::nested::DeprecatedTupleStruct': text\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n     }\n \n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n@@ -269,6 +311,14 @@ mod this_crate {\n         fn_in_body();\n     }\n \n+    fn test_fn_closure_body() {\n+        let _ = || {\n+            #[deprecated]\n+            fn bar() { }\n+            bar(); //~ ERROR use of deprecated item 'this_crate::test_fn_closure_body::{{closure}}::bar'\n+        };\n+    }\n+\n     impl MethodTester {\n         #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n@@ -284,9 +334,9 @@ mod this_crate {\n \n     struct S;\n \n-    impl DeprecatedTrait for S { } //~ ERROR use of deprecated item\n+    impl DeprecatedTrait for S { } //~ ERROR use of deprecated item 'this_crate::DeprecatedTrait': text\n \n-    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item\n+    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item 'this_crate::DeprecatedTrait': text\n }\n \n mod this_crate2 {\n@@ -312,73 +362,73 @@ mod this_crate2 {\n     pub fn foo() {\n         let x = Stable {\n             override2: 3,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Stable::override2': text\n         };\n \n         let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Stable::override2': text\n \n         let Stable {\n             override2: _\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Stable::override2': text\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n \n         let x = Stable2(1, 2, 3);\n \n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Stable2::2': text\n \n         let Stable2(_,\n                    _,\n                    _)\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Stable2::2': text\n             = x;\n         // all fine\n         let Stable2(..) = x;\n \n         let x = Deprecated {\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated': text\n             inherit: 1,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated::inherit': text\n         };\n \n         let _ = x.inherit;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated::inherit': text\n \n         let Deprecated {\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated': text\n             inherit: _,\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated::inherit': text\n         } = x;\n \n         let Deprecated\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated': text\n             // the patterns are all fine:\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2': text\n \n         let _ = x.0;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::0': text\n         let _ = x.1;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::1': text\n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::2': text\n \n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2': text\n             (_,\n-             //~^ ERROR use of deprecated item\n+             //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::0': text\n              _,\n-             //~^ ERROR use of deprecated item\n+             //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::1': text\n              _)\n-            //~^ ERROR use of deprecated item\n+            //~^ ERROR use of deprecated item 'this_crate2::Deprecated2::2': text\n             = x;\n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n+        //~^ ERROR use of deprecated item 'this_crate2::Deprecated2': text\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "8dc46558cb0d5ee6f427f9d895ab72309a204628", "filename": "src/test/compile-fail/lint-output-format-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -18,13 +18,13 @@\n \n extern crate lint_output_format;\n use lint_output_format::{foo, bar};\n-//~^ WARNING use of deprecated item: text\n+//~^ WARNING use of deprecated item 'lint_output_format::foo': text\n //~| NOTE #[warn(deprecated)] on by default\n \n #[rustc_error]\n fn main() { //~ ERROR: compilation successful\n     let _x = foo();\n-    //~^ WARNING use of deprecated item: text\n+    //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n     //~| NOTE #[warn(deprecated)] on by default\n     let _y = bar();\n }"}, {"sha": "df5c3dddcde321a6e0d3163fe38179031a047f29", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 109, "deletions": 108, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ddb4a4b06d4a69a6f80da133b1475e5251340/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=725ddb4a4b06d4a69a6f80da133b1475e5251340", "patch": "@@ -12,6 +12,7 @@\n // aux-build:inherited_stability.rs\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n+// ignore-tidy-linelength\n \n #![warn(deprecated)]\n #![allow(dead_code, unused_extern_crates)]\n@@ -32,41 +33,41 @@ mod cross_crate {\n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ WARN use of deprecated item\n-        foo.method_deprecated(); //~ WARN use of deprecated item\n-        Foo::method_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-\n-        deprecated_text(); //~ WARN use of deprecated item: text\n-        foo.method_deprecated_text(); //~ WARN use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-\n-        deprecated_unstable(); //~ WARN use of deprecated item\n-        foo.method_deprecated_unstable(); //~ WARN use of deprecated item\n-        Foo::method_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        <Foo>::method_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-\n-        deprecated_unstable_text(); //~ WARN use of deprecated item: text\n-        foo.method_deprecated_unstable_text(); //~ WARN use of deprecated item: text\n-        Foo::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n+        deprecated(); //~ WARN use of deprecated item 'lint_stability::deprecated'\n+        foo.method_deprecated(); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated'\n+        Foo::method_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated'\n+        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated'\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+\n+        deprecated_text(); //~ WARN use of deprecated item 'lint_stability::deprecated_text': text\n+        foo.method_deprecated_text(); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_text': text\n+        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_text': text\n+        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_text': text\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+\n+        deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::deprecated_unstable'\n+        foo.method_deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable'\n+        Foo::method_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable'\n+        <Foo>::method_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable'\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+\n+        deprecated_unstable_text(); //~ WARN use of deprecated item 'lint_stability::deprecated_unstable_text': text\n+        foo.method_deprecated_unstable_text(); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n+        Foo::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n+        <Foo>::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n \n         unstable();\n         foo.method_unstable();\n@@ -106,30 +107,30 @@ mod cross_crate {\n \n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n-        //~^ WARN use of deprecated item\n+        //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n \n-        let _ = DeprecatedStruct { //~ WARN use of deprecated item\n-            i: 0 //~ WARN use of deprecated item\n+        let _ = DeprecatedStruct { //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct'\n+            i: 0 //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct::i'\n         };\n         let _ = DeprecatedUnstableStruct {\n-            //~^ WARN use of deprecated item\n-            i: 0 //~ WARN use of deprecated item\n+            //~^ WARN use of deprecated item 'lint_stability::DeprecatedUnstableStruct'\n+            i: 0 //~ WARN use of deprecated item 'lint_stability::DeprecatedUnstableStruct::i'\n         };\n         let _ = UnstableStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated item\n-        let _ = DeprecatedUnstableUnitStruct; //~ WARN use of deprecated item\n+        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated item 'lint_stability::DeprecatedUnitStruct'\n+        let _ = DeprecatedUnstableUnitStruct; //~ WARN use of deprecated item 'lint_stability::DeprecatedUnstableUnitStruct'\n         let _ = UnstableUnitStruct;\n         let _ = StableUnitStruct;\n \n-        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated item\n-        let _ = Enum::DeprecatedUnstableVariant; //~ WARN use of deprecated item\n+        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated item 'lint_stability::Enum::DeprecatedVariant'\n+        let _ = Enum::DeprecatedUnstableVariant; //~ WARN use of deprecated item 'lint_stability::Enum::DeprecatedUnstableVariant'\n         let _ = Enum::UnstableVariant;\n         let _ = Enum::StableVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated item\n-        let _ = DeprecatedUnstableTupleStruct (1); //~ WARN use of deprecated item\n+        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated item 'lint_stability::DeprecatedTupleStruct'\n+        let _ = DeprecatedUnstableTupleStruct (1); //~ WARN use of deprecated item 'lint_stability::DeprecatedUnstableTupleStruct'\n         let _ = UnstableTupleStruct (1);\n         let _ = StableTupleStruct (1);\n \n@@ -138,28 +139,28 @@ mod cross_crate {\n         // Eventually, we will want to lint the contents of the\n         // macro in the module *defining* it. Also, stability levels\n         // on macros themselves are not yet linted.\n-        macro_test_arg!(deprecated_text()); //~ WARN use of deprecated item: text\n-        macro_test_arg!(deprecated_unstable_text()); //~ WARN use of deprecated item: text\n-        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ WARN use of deprecated item: text\n+        macro_test_arg!(deprecated_text()); //~ WARN use of deprecated item 'lint_stability::deprecated_text': text\n+        macro_test_arg!(deprecated_unstable_text()); //~ WARN use of deprecated item 'lint_stability::deprecated_unstable_text': text\n+        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ WARN use of deprecated item 'lint_stability::deprecated_text': text\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n         foo.trait_unstable();\n         Trait::trait_unstable(&foo);\n         <Foo>::trait_unstable(&foo);\n@@ -175,10 +176,10 @@ mod cross_crate {\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n         foo.trait_stable();\n@@ -187,9 +188,9 @@ mod cross_crate {\n     struct S;\n \n     impl UnstableTrait for S { }\n-    impl DeprecatedTrait for S {} //~ WARN use of deprecated item: text\n+    impl DeprecatedTrait for S {} //~ WARN use of deprecated item 'lint_stability::DeprecatedTrait': text\n     trait LocalTrait : UnstableTrait { }\n-    trait LocalTrait2 : DeprecatedTrait { } //~ WARN use of deprecated item: text\n+    trait LocalTrait2 : DeprecatedTrait { } //~ WARN use of deprecated item 'lint_stability::DeprecatedTrait': text\n \n     impl Trait for S {\n         fn trait_stable(&self) {}\n@@ -208,7 +209,7 @@ mod inheritance {\n         stable_mod::unstable();\n         stable_mod::stable();\n \n-        unstable_mod::deprecated(); //~ WARN use of deprecated item\n+        unstable_mod::deprecated(); //~ WARN use of deprecated item 'inheritance::inherited_stability::unstable_mod::deprecated': text\n         unstable_mod::unstable();\n \n         let _ = Unstable::UnstableVariant;\n@@ -330,23 +331,23 @@ mod this_crate {\n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ WARN use of deprecated item\n-        foo.method_deprecated(); //~ WARN use of deprecated item\n-        Foo::method_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-\n-        deprecated_text(); //~ WARN use of deprecated item: text\n-        foo.method_deprecated_text(); //~ WARN use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n+        deprecated(); //~ WARN use of deprecated item 'this_crate::deprecated'\n+        foo.method_deprecated(); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        Foo::method_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated'\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+\n+        deprecated_text(); //~ WARN use of deprecated item 'this_crate::deprecated_text': text\n+        foo.method_deprecated_text(); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n \n         unstable();\n         foo.method_unstable();\n@@ -385,34 +386,34 @@ mod this_crate {\n         <Foo as Trait>::trait_stable_text(&foo);\n \n         let _ = DeprecatedStruct {\n-            //~^ WARN use of deprecated item\n-            i: 0 //~ WARN use of deprecated item\n+            //~^ WARN use of deprecated item 'this_crate::DeprecatedStruct'\n+            i: 0 //~ WARN use of deprecated item 'this_crate::DeprecatedStruct::i'\n         };\n         let _ = UnstableStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated item\n+        let _ = DeprecatedUnitStruct; //~ WARN use of deprecated item 'this_crate::DeprecatedUnitStruct'\n         let _ = UnstableUnitStruct;\n         let _ = StableUnitStruct;\n \n-        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated item\n+        let _ = Enum::DeprecatedVariant; //~ WARN use of deprecated item 'this_crate::Enum::DeprecatedVariant'\n         let _ = Enum::UnstableVariant;\n         let _ = Enum::StableVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated item\n+        let _ = DeprecatedTupleStruct (1); //~ WARN use of deprecated item 'this_crate::DeprecatedTupleStruct'\n         let _ = UnstableTupleStruct (1);\n         let _ = StableTupleStruct (1);\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n         foo.trait_unstable();\n         Trait::trait_unstable(&foo);\n         <Foo>::trait_unstable(&foo);\n@@ -428,8 +429,8 @@ mod this_crate {\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated item\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated item: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n         foo.trait_stable();\n@@ -439,15 +440,15 @@ mod this_crate {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n-        fn_in_body(); //~ WARN use of deprecated item: text\n+        fn_in_body(); //~ WARN use of deprecated item 'this_crate::test_fn_body::fn_in_body': text\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n-            fn_in_body(); //~ WARN use of deprecated item: text\n+            fn_in_body(); //~ WARN use of deprecated item 'this_crate::MethodTester::test_method_body::fn_in_body': text\n         }\n     }\n \n@@ -459,9 +460,9 @@ mod this_crate {\n \n     struct S;\n \n-    impl DeprecatedTrait for S { } //~ WARN use of deprecated item\n+    impl DeprecatedTrait for S { } //~ WARN use of deprecated item 'this_crate::DeprecatedTrait'\n \n-    trait LocalTrait : DeprecatedTrait { } //~ WARN use of deprecated item\n+    trait LocalTrait : DeprecatedTrait { } //~ WARN use of deprecated item 'this_crate::DeprecatedTrait'\n }\n \n #[rustc_error] fn main() {} //~ ERROR: compilation successful"}]}