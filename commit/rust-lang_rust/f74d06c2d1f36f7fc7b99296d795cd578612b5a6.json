{"sha": "f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "node_id": "C_kwDOAAsO6NoAKGY3NGQwNmMyZDFmMzZmN2ZjN2I5OTI5NmQ3OTVjZDU3ODYxMmI1YTY", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-07-03T00:22:04Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-08-02T12:20:57Z"}, "message": "NLL: relate closure to parent fn", "tree": {"sha": "549e3fa72a9041b9e53430eae1328ee7699cfa96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549e3fa72a9041b9e53430eae1328ee7699cfa96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "html_url": "https://github.com/rust-lang/rust/commit/f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3342816a282949f014caa05ea2e669ff9d3d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3342816a282949f014caa05ea2e669ff9d3d3c", "html_url": "https://github.com/rust-lang/rust/commit/fe3342816a282949f014caa05ea2e669ff9d3d3c"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "48cf7666f2c8dfcc724f5ba8c29f8076c70aab1a", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "patch": "@@ -2619,6 +2619,28 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             );\n         }\n \n+        // Now equate closure substs to regions inherited from `typeck_root_def_id`. Fixes #98589.\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.body.source.def_id());\n+        let typeck_root_substs = ty::InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n+\n+        let parent_substs = match tcx.def_kind(def_id) {\n+            DefKind::Closure => substs.as_closure().parent_substs(),\n+            DefKind::Generator => substs.as_generator().parent_substs(),\n+            DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n+            other => bug!(\"unexpected item {:?}\", other),\n+        };\n+        let parent_substs = tcx.mk_substs(parent_substs.iter());\n+\n+        assert_eq!(typeck_root_substs.len(), parent_substs.len());\n+        if let Err(_) = self.eq_substs(\n+            typeck_root_substs,\n+            parent_substs,\n+            Locations::Single(location),\n+            ConstraintCategory::BoringNoLocation,\n+        ) {\n+            bug!(\"we shouldn't error, this should only impose region constraints\");\n+        }\n+\n         tcx.predicates_of(def_id).instantiate(tcx, substs)\n     }\n "}, {"sha": "7ccd5da6b91954f659c7f3c0aeb5c17c2bb824d9", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "patch": "@@ -38,6 +38,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .relate(a, b)?;\n         Ok(())\n     }\n+\n+    /// Add sufficient constraints to ensure `a == b`. See also [Self::relate_types].\n+    pub(super) fn eq_substs(\n+        &mut self,\n+        a: ty::SubstsRef<'tcx>,\n+        b: ty::SubstsRef<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory<'tcx>,\n+    ) -> Fallible<()> {\n+        let mut relation = TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::other()),\n+            ty::Variance::Invariant,\n+        );\n+        ty::relate::relate_substs(&mut relation, a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {"}, {"sha": "6cc4340bbd7335a747167b051036cd618136dde7", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs?ref=f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for #98589.\n+// Previously, named lifetime `'a` that appears in the closure was unrelated to `'a`\n+// that appears in the parent function iff `'a` is early-bound.\n+// This made the following tests pass borrowck.\n+\n+// check-fail\n+\n+// The bound `'a: 'a` ensures that `'a` is early-bound.\n+fn test_early_early<'a: 'a, 'b: 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_late<'a: 'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_late<'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_type<'a: 'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_type<'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "6def5602e70b3a4499bed252c82d7318794f11c4", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f74d06c2d1f36f7fc7b99296d795cd578612b5a6/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr?ref=f74d06c2d1f36f7fc7b99296d795cd578612b5a6", "patch": "@@ -0,0 +1,61 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:10:5\n+   |\n+LL | fn test_early_early<'a: 'a, 'b: 'b>() {\n+   |                     --      -- lifetime `'b` defined here\n+   |                     |\n+   |                     lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:15:10\n+   |\n+LL | fn test_early_late<'a: 'a, 'b>() {\n+   |                    --      -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:21:10\n+   |\n+LL | fn test_late_late<'a, 'b>() {\n+   |                   --  -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:26:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_early_type<'a: 'a, T: 'a>() {\n+   |                             ++++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:32:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_late_type<'a, T: 'a>() {\n+   |                        ++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}]}