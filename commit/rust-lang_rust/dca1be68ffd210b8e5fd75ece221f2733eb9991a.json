{"sha": "dca1be68ffd210b8e5fd75ece221f2733eb9991a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTFiZTY4ZmZkMjEwYjhlNWZkNzVlY2UyMjFmMjczM2ViOTk5MWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-11T07:39:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-11T07:39:36Z"}, "message": "Merge pull request #300 from oli-obk/rustc_tests\n\nGet the test suite working inside the rustc test suite", "tree": {"sha": "4e14a91f61200f701452df8820c3d1d6dd9fc216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e14a91f61200f701452df8820c3d1d6dd9fc216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca1be68ffd210b8e5fd75ece221f2733eb9991a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca1be68ffd210b8e5fd75ece221f2733eb9991a", "html_url": "https://github.com/rust-lang/rust/commit/dca1be68ffd210b8e5fd75ece221f2733eb9991a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca1be68ffd210b8e5fd75ece221f2733eb9991a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c48435030c3f3057aa9da8ffb4be8389896050", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c48435030c3f3057aa9da8ffb4be8389896050", "html_url": "https://github.com/rust-lang/rust/commit/63c48435030c3f3057aa9da8ffb4be8389896050"}, {"sha": "8019deb0a9bd3a7d10e728e730126c3875ec37bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8019deb0a9bd3a7d10e728e730126c3875ec37bd", "html_url": "https://github.com/rust-lang/rust/commit/8019deb0a9bd3a7d10e728e730126c3875ec37bd"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "5ceb60de638a66605c33674742d2953b7c1d72ab", "filename": "tests/compiletest.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dca1be68ffd210b8e5fd75ece221f2733eb9991a/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1be68ffd210b8e5fd75ece221f2733eb9991a/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=dca1be68ffd210b8e5fd75ece221f2733eb9991a", "patch": "@@ -13,7 +13,21 @@ macro_rules! eprintln {\n     }\n }\n \n-const MIRI_PATH: &'static str = concat!(\"target/\", env!(\"PROFILE\"), \"/miri\");\n+fn miri_path() -> PathBuf {\n+    if rustc_test_suite().is_some() {\n+        PathBuf::from(option_env!(\"MIRI_PATH\").unwrap())\n+    } else {\n+        PathBuf::from(concat!(\"target/\", env!(\"PROFILE\"), \"/miri\"))\n+    }\n+}\n+\n+fn rustc_test_suite() -> Option<PathBuf> {\n+    option_env!(\"RUSTC_TEST_SUITE\").map(PathBuf::from)\n+}\n+\n+fn rustc_lib_path() -> PathBuf {\n+    option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n+}\n \n fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n     eprintln!(\n@@ -23,9 +37,14 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n     );\n     let mut config = compiletest::default_config();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n-    config.rustc_path = MIRI_PATH.into();\n+    config.rustc_path = miri_path();\n     let mut flags = Vec::new();\n-    if fullmir {\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n+    // if we are building as part of the rustc test suite, we already have fullmir for everything\n+    if fullmir && rustc_test_suite().is_none() {\n         if host != target {\n             // skip fullmir on nonhost\n             return;\n@@ -50,7 +69,14 @@ fn run_pass(path: &str) {\n     let mut config = compiletest::default_config();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n-    config.target_rustcflags = Some(\"-Dwarnings\".to_string());\n+    if let Some(rustc_path) = rustc_test_suite() {\n+        config.rustc_path = rustc_path;\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", get_sysroot().display()));\n+    } else {\n+        config.target_rustcflags = Some(\"-Dwarnings\".to_owned());\n+    }\n     config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n     compiletest::run_tests(&config);\n }\n@@ -68,9 +94,14 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n-    config.rustc_path = MIRI_PATH.into();\n+    config.rustc_path = miri_path();\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n     let mut flags = Vec::new();\n-    if fullmir {\n+    // if we are building as part of the rustc test suite, we already have fullmir for everything\n+    if fullmir && rustc_test_suite().is_none() {\n         if host != target {\n             // skip fullmir on nonhost\n             return;"}]}