{"sha": "b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTA5NDI2MmY5NzM3YjNmZDAzNzlmZGQyY2IwZmM2ZTIzMDA4YWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-29T20:53:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-29T20:53:22Z"}, "message": "Merge pull request #1604 from topecongiro/comment-group\n\nFormat comments with different opening in different manner", "tree": {"sha": "c321962e0d80741cf881f317765d3b48c4a7df1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c321962e0d80741cf881f317765d3b48c4a7df1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "html_url": "https://github.com/rust-lang/rust/commit/b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b79cb5c22f54d15dd68ab95117b3f634de5a285", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b79cb5c22f54d15dd68ab95117b3f634de5a285", "html_url": "https://github.com/rust-lang/rust/commit/9b79cb5c22f54d15dd68ab95117b3f634de5a285"}, {"sha": "bcebe9e7def08e987516fb59a46234acd7ef5d2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcebe9e7def08e987516fb59a46234acd7ef5d2c", "html_url": "https://github.com/rust-lang/rust/commit/bcebe9e7def08e987516fb59a46234acd7ef5d2c"}], "stats": {"total": 264, "additions": 237, "deletions": 27}, "files": [{"sha": "5b3ee179e2ed87a43bfa2775a58485d35c0d259e", "filename": "src/comment.rs", "status": "modified", "additions": 156, "deletions": 27, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -32,6 +32,122 @@ fn is_custom_comment(comment: &str) -> bool {\n     }\n }\n \n+#[derive(PartialEq, Eq)]\n+pub enum CommentStyle {\n+    DoubleSlash,\n+    TripleSlash,\n+    Doc,\n+    SingleBullet,\n+    DoubleBullet,\n+    Exclamation,\n+    Custom,\n+}\n+\n+impl CommentStyle {\n+    pub fn opener<'a>(&self, orig: &'a str) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash => \"// \",\n+            CommentStyle::TripleSlash => \"/// \",\n+            CommentStyle::Doc => \"//! \",\n+            CommentStyle::SingleBullet => \"/* \",\n+            CommentStyle::DoubleBullet => \"/** \",\n+            CommentStyle::Exclamation => \"/*! \",\n+            CommentStyle::Custom => {\n+                if orig.chars().nth(3) == Some(' ') {\n+                    &orig[0..4]\n+                } else {\n+                    &orig[0..3]\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn closer<'a>(&self) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash |\n+            CommentStyle::TripleSlash |\n+            CommentStyle::Custom |\n+            CommentStyle::Doc => \"\",\n+            CommentStyle::DoubleBullet => \" **/\",\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => \" */\",\n+        }\n+    }\n+\n+    pub fn line_start<'a>(&self, orig: &'a str) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash => \"// \",\n+            CommentStyle::TripleSlash => \"/// \",\n+            CommentStyle::Doc => \"//! \",\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => \" * \",\n+            CommentStyle::DoubleBullet => \" ** \",\n+            CommentStyle::Custom => {\n+                if orig.chars().nth(3) == Some(' ') {\n+                    &orig[0..4]\n+                } else {\n+                    &orig[0..3]\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn to_str_tuplet<'a>(&self, orig: &'a str) -> (&'a str, &'a str, &'a str) {\n+        (self.opener(orig), self.closer(), self.line_start(orig))\n+    }\n+\n+    pub fn line_with_same_comment_style<'a>(&self,\n+                                            line: &str,\n+                                            orig: &'a str,\n+                                            normalize_comments: bool)\n+                                            -> bool {\n+        match *self {\n+            CommentStyle::DoubleSlash |\n+            CommentStyle::TripleSlash |\n+            CommentStyle::Custom |\n+            CommentStyle::Doc => {\n+                line.trim_left()\n+                    .starts_with(self.line_start(orig).trim_left()) ||\n+                comment_style(line, normalize_comments) == *self\n+            }\n+            CommentStyle::DoubleBullet |\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => {\n+                line.trim_left().starts_with(self.closer().trim_left()) ||\n+                line.trim_left()\n+                    .starts_with(self.line_start(orig).trim_left()) ||\n+                comment_style(line, normalize_comments) == *self\n+            }\n+        }\n+    }\n+}\n+\n+fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n+    if !normalize_comments {\n+        if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n+            CommentStyle::DoubleBullet\n+        } else if orig.starts_with(\"/*!\") {\n+            CommentStyle::Exclamation\n+        } else if orig.starts_with(\"/*\") {\n+            CommentStyle::SingleBullet\n+        } else if orig.starts_with(\"///\") {\n+            CommentStyle::TripleSlash\n+        } else if orig.starts_with(\"//!\") {\n+            CommentStyle::Doc\n+        } else {\n+            CommentStyle::DoubleSlash\n+        }\n+    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n+        CommentStyle::TripleSlash\n+    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n+        CommentStyle::Doc\n+    } else if is_custom_comment(orig) {\n+        CommentStyle::Custom\n+    } else {\n+        CommentStyle::DoubleSlash\n+    }\n+}\n+\n pub fn rewrite_comment(orig: &str,\n                        block_style: bool,\n                        shape: Shape,\n@@ -47,39 +163,52 @@ pub fn rewrite_comment(orig: &str,\n     if num_bare_lines > 0 && !config.normalize_comments() {\n         return Some(orig.to_owned());\n     }\n-\n     if !config.normalize_comments() && !config.wrap_comments() {\n         return light_rewrite_comment(orig, shape.indent, config);\n     }\n \n+    identify_comment(orig, block_style, shape, config)\n+}\n+\n+fn identify_comment(orig: &str,\n+                    block_style: bool,\n+                    shape: Shape,\n+                    config: &Config)\n+                    -> Option<String> {\n+    let style = comment_style(orig, false);\n+    let first_group = orig.lines()\n+        .take_while(|l| style.line_with_same_comment_style(l, orig, false))\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+    let rest = orig.lines()\n+        .skip(first_group.lines().count())\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+\n+    let first_group_str = try_opt!(rewrite_comment_inner(&first_group, block_style, shape, config));\n+    if rest.is_empty() {\n+        Some(first_group_str)\n+    } else {\n+        identify_comment(&rest, block_style, shape, config).map(|rest_str| {\n+                                                                    format!(\"{}\\n{}{}\",\n+                                                                            first_group_str,\n+                                                                            shape\n+                                                                                .indent\n+                                                                                .to_string(config),\n+                                                                            rest_str)\n+                                                                })\n+    }\n+}\n+\n+fn rewrite_comment_inner(orig: &str,\n+                         block_style: bool,\n+                         shape: Shape,\n+                         config: &Config)\n+                         -> Option<String> {\n     let (opener, closer, line_start) = if block_style {\n-        (\"/* \", \" */\", \" * \")\n-    } else if !config.normalize_comments() {\n-        if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n-            (\"/** \", \" **/\", \" ** \")\n-        } else if orig.starts_with(\"/*!\") {\n-            (\"/*! \", \" */\", \" * \")\n-        } else if orig.starts_with(\"/*\") {\n-            (\"/* \", \" */\", \" * \")\n-        } else if orig.starts_with(\"///\") {\n-            (\"/// \", \"\", \"/// \")\n-        } else if orig.starts_with(\"//!\") {\n-            (\"//! \", \"\", \"//! \")\n-        } else {\n-            (\"// \", \"\", \"// \")\n-        }\n-    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n-        (\"/// \", \"\", \"/// \")\n-    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n-        (\"//! \", \"\", \"//! \")\n-    } else if is_custom_comment(orig) {\n-        if orig.chars().nth(3) == Some(' ') {\n-            (&orig[0..4], \"\", &orig[0..4])\n-        } else {\n-            (&orig[0..3], \"\", &orig[0..3])\n-        }\n+        CommentStyle::SingleBullet.to_str_tuplet(\"\")\n     } else {\n-        (\"// \", \"\", \"// \")\n+        comment_style(orig, config.normalize_comments()).to_str_tuplet(orig)\n     };\n \n     let max_chars = shape"}, {"sha": "fd3876720a8a716480d6a8de61403bad7e1767d0", "filename": "tests/source/closure.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -131,3 +131,15 @@ impl Foo {\n         })\n     }\n }\n+\n+fn issue1329() {\n+    aaaaaaaaaaaaaaaa.map(|x| {\n+        x += 1;\n+        x\n+    })\n+        .filter\n+}\n+\n+fn issue325() {\n+    let f = || unsafe { xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx };\n+}"}, {"sha": "1a458060bdd7044eff975f02c56a86c24df8b328", "filename": "tests/source/issue-1278.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fissue-1278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fissue-1278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1278.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-fn_args_layout = \"block\"\n+\n+#![feature(pub_restricted)]\n+\n+mod inner_mode {\n+    pub(super) fn func_name(abc: i32) -> i32 {\n+        abc\n+    }\n+}"}, {"sha": "a890053359fcc5f20989438b1ebdde87aaa61d16", "filename": "tests/source/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -83,6 +83,9 @@ fn main() {\n     let json = json!({\n         \"foo\": \"bar\",\n     });\n+\n+    // #1092\n+    chain!(input, a:take!(max_size), || []);\n }\n \n impl X {"}, {"sha": "d51c76b9e4813e94749e9886550911019f835f27", "filename": "tests/target/closure.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -150,3 +150,17 @@ impl Foo {\n              })\n     }\n }\n+\n+fn issue1329() {\n+    aaaaaaaaaaaaaaaa\n+        .map(|x| {\n+                 x += 1;\n+                 x\n+             })\n+        .filter\n+}\n+\n+fn issue325() {\n+    let f =\n+        || unsafe { xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx };\n+}"}, {"sha": "482c5c0e82a29143123e42b86970028d4a5675b6", "filename": "tests/target/configs-fn_call_style-block-tab_spaces-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fconfigs-fn_call_style-block-tab_spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fconfigs-fn_call_style-block-tab_spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block-tab_spaces-2.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-fn_call_style: Block\n+// rustfmt-max_width: 80\n+// rustfmt-tab_spaces: 2\n+\n+// #1427\n+fn main() {\n+  exceptaions::config(move || {\n+    (\n+      NmiConfig {},\n+      HardFaultConfig {},\n+      SysTickConfig { gpio_sbsrr },\n+    )\n+  });\n+}"}, {"sha": "c622abb3a85b4d0eec34adf392ddf7667658d584", "filename": "tests/target/issue-1214.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-1214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-1214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1214.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -0,0 +1,8 @@\n+/*!\n+# Example\n+\n+```\n+        // Here goes some example\n+```\n+ */\n+struct Item;"}, {"sha": "1a458060bdd7044eff975f02c56a86c24df8b328", "filename": "tests/target/issue-1278.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-1278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-1278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1278.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-fn_args_layout = \"block\"\n+\n+#![feature(pub_restricted)]\n+\n+mod inner_mode {\n+    pub(super) fn func_name(abc: i32) -> i32 {\n+        abc\n+    }\n+}"}, {"sha": "7473d070eff219c953ec5b9b0b864114a4e41288", "filename": "tests/target/issue-691.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fissue-691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-691.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-normalize_comments: true\n+\n+//! `std` or `core` and simply link to this library. In case the target\n+//! platform has no hardware\n+//! support for some operation, software implementations provided by this\n+//! library will be used automagically.\n+// TODO: provide instructions to override default libm link and how to link to\n+// this library.\n+fn foo() {}"}, {"sha": "45b475a18f9100bd6dc0def63d97edf7f153f334", "filename": "tests/target/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79094262f9737b3fd0379fdd2cb0fc6e23008ad/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "patch": "@@ -88,6 +88,9 @@ fn main() {\n     let json = json!({\n         \"foo\": \"bar\",\n     });\n+\n+    // #1092\n+    chain!(input, a:take!(max_size), || []);\n }\n \n impl X {"}]}