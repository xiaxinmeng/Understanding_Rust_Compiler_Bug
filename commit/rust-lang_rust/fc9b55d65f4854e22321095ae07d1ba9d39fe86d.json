{"sha": "fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWI1NWQ2NWY0ODU0ZTIyMzIxMDk1YWUwN2QxYmE5ZDM5ZmU4NmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T22:07:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T22:48:47Z"}, "message": "rustdoc: Write a new file for each page", "tree": {"sha": "ebc7a2f3f7e099aea91c49758de02de9cbfab829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc7a2f3f7e099aea91c49758de02de9cbfab829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "html_url": "https://github.com/rust-lang/rust/commit/fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9b55d65f4854e22321095ae07d1ba9d39fe86d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "html_url": "https://github.com/rust-lang/rust/commit/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "f2b849944ce53d31e09e68fa1a9ca67027359ba9", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc9b55d65f4854e22321095ae07d1ba9d39fe86d/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9b55d65f4854e22321095ae07d1ba9d39fe86d/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "patch": "@@ -82,14 +82,41 @@ fn write_markdown(\n     doc: doc::doc,\n     writer_factory: writer_factory\n ) {\n-    let ctxt = {\n-        w: writer_factory(doc::cratepage(doc.cratedoc()))\n-    };\n+    for page in doc.pages {\n+        let ctxt = {\n+            w: writer_factory(page)\n+        };\n+        write_page(ctxt, page);\n+    }\n+}\n \n-    write_crate(ctxt, doc.cratedoc());\n+fn write_page(ctxt: ctxt, page: doc::page) {\n+    alt page {\n+      doc::cratepage(doc) {\n+        write_crate(ctxt, doc);\n+      }\n+      doc::itempage(doc) {\n+        write_item(ctxt, doc);\n+      }\n+    }\n     ctxt.w.write_done();\n }\n \n+#[test]\n+fn should_request_new_writer_for_each_page() {\n+    // This port will send us a (page, str) pair for every writer\n+    // that was created\n+    let (writer_factory, po) = markdown_writer::future_writer_factory();\n+    let (srv, doc) = test::create_doc_srv(\"mod a { }\");\n+    // Split the document up into pages\n+    let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n+    write_markdown(doc, writer_factory);\n+    // We expect two pages to have been written\n+    iter::repeat(2u) {||\n+        comm::recv(po);\n+    }\n+}\n+\n enum hlvl {\n     h1 = 1,\n     h2 = 2,\n@@ -218,17 +245,21 @@ fn write_mod_contents(\n     }\n \n     for itemtag in doc.items {\n-        alt itemtag {\n-          doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n-          doc::nmodtag(nmoddoc) { write_nmod(ctxt, nmoddoc) }\n-          doc::fntag(fndoc) { write_fn(ctxt, fndoc) }\n-          doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n-          doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n-          doc::restag(resdoc) { write_res(ctxt, resdoc) }\n-          doc::ifacetag(ifacedoc) { write_iface(ctxt, ifacedoc) }\n-          doc::impltag(impldoc) { write_impl(ctxt, impldoc) }\n-          doc::tytag(tydoc) { write_type(ctxt, tydoc) }\n-        }\n+        write_item(ctxt, itemtag);\n+    }\n+}\n+\n+fn write_item(ctxt: ctxt, doc: doc::itemtag) {\n+    alt doc {\n+      doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n+      doc::nmodtag(nmoddoc) { write_nmod(ctxt, nmoddoc) }\n+      doc::fntag(fndoc) { write_fn(ctxt, fndoc) }\n+      doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n+      doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n+      doc::restag(resdoc) { write_res(ctxt, resdoc) }\n+      doc::ifacetag(ifacedoc) { write_iface(ctxt, ifacedoc) }\n+      doc::impltag(impldoc) { write_impl(ctxt, impldoc) }\n+      doc::tytag(tydoc) { write_type(ctxt, tydoc) }\n     }\n }\n "}, {"sha": "5c55d4be2bbf5573b32e506b82aa209d2d08ac63", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc9b55d65f4854e22321095ae07d1ba9d39fe86d/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9b55d65f4854e22321095ae07d1ba9d39fe86d/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=fc9b55d65f4854e22321095ae07d1ba9d39fe86d", "patch": "@@ -152,6 +152,7 @@ fn run(config: config::config) {\n             sort_item_name_pass::mk_pass(),\n             sort_item_type_pass::mk_pass(),\n             markdown_index_pass::mk_pass(),\n+            page_pass::mk_pass(config.output_style),\n             markdown_pass::mk_pass(\n                 markdown_writer::make_writer_factory(config)\n             )"}]}