{"sha": "610a94c4219c54a5b369c7e022b2045560501607", "node_id": "C_kwDOAAsO6NoAKDYxMGE5NGM0MjE5YzU0YTViMzY5YzdlMDIyYjIwNDU1NjA1MDE2MDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T19:16:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T19:16:41Z"}, "message": "Add fundamental attributes to data", "tree": {"sha": "99d102a15fe44512561b704cd5e279fffdacc7c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d102a15fe44512561b704cd5e279fffdacc7c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610a94c4219c54a5b369c7e022b2045560501607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610a94c4219c54a5b369c7e022b2045560501607", "html_url": "https://github.com/rust-lang/rust/commit/610a94c4219c54a5b369c7e022b2045560501607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610a94c4219c54a5b369c7e022b2045560501607/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c364f6e5ae9927a606641ee94e47f4e77cf114a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c364f6e5ae9927a606641ee94e47f4e77cf114a", "html_url": "https://github.com/rust-lang/rust/commit/2c364f6e5ae9927a606641ee94e47f4e77cf114a"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "b336f59ffee312f08c1128e71fcbd6f5e8ce1dde", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/610a94c4219c54a5b369c7e022b2045560501607/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610a94c4219c54a5b369c7e022b2045560501607/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=610a94c4219c54a5b369c7e022b2045560501607", "patch": "@@ -40,6 +40,7 @@ pub struct StructData {\n     pub repr: Option<ReprOptions>,\n     pub visibility: RawVisibility,\n     pub rustc_has_incoherent_inherent_impls: bool,\n+    pub fundamental: bool,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -173,10 +174,10 @@ impl StructData {\n         let item_tree = loc.id.item_tree(db);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n-        let rustc_has_incoherent_inherent_impls = item_tree\n-            .attrs(db, loc.container.krate, ModItem::from(loc.id.value).into())\n-            .by_key(\"rustc_has_incoherent_inherent_impls\")\n-            .exists();\n+        let attrs = item_tree.attrs(db, loc.container.krate, ModItem::from(loc.id.value).into());\n+        let rustc_has_incoherent_inherent_impls =\n+            attrs.by_key(\"rustc_has_incoherent_inherent_impls\").exists();\n+        let fundamental = attrs.by_key(\"fundamental\").exists();\n \n         let strukt = &item_tree[loc.id.value];\n         let (variant_data, diagnostics) = lower_fields(\n@@ -196,6 +197,7 @@ impl StructData {\n                 repr,\n                 visibility: item_tree[strukt.visibility].clone(),\n                 rustc_has_incoherent_inherent_impls,\n+                fundamental,\n             }),\n             diagnostics.into(),\n         )\n@@ -215,10 +217,10 @@ impl StructData {\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n-        let rustc_has_incoherent_inherent_impls = item_tree\n-            .attrs(db, loc.container.krate, ModItem::from(loc.id.value).into())\n-            .by_key(\"rustc_has_incoherent_inherent_impls\")\n-            .exists();\n+        let attrs = item_tree.attrs(db, loc.container.krate, ModItem::from(loc.id.value).into());\n+        let rustc_has_incoherent_inherent_impls =\n+            attrs.by_key(\"rustc_has_incoherent_inherent_impls\").exists();\n+        let fundamental = attrs.by_key(\"fundamental\").exists();\n \n         let union = &item_tree[loc.id.value];\n         let (variant_data, diagnostics) = lower_fields(\n@@ -238,6 +240,7 @@ impl StructData {\n                 repr,\n                 visibility: item_tree[union.visibility].clone(),\n                 rustc_has_incoherent_inherent_impls,\n+                fundamental,\n             }),\n             diagnostics.into(),\n         )"}, {"sha": "1633a33bedde87d1d7a0cf6c63df9e17dec1b5b3", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/610a94c4219c54a5b369c7e022b2045560501607/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610a94c4219c54a5b369c7e022b2045560501607/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=610a94c4219c54a5b369c7e022b2045560501607", "patch": "@@ -221,11 +221,12 @@ pub struct TraitData {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n     pub rustc_has_incoherent_inherent_impls: bool,\n+    pub skip_array_during_method_dispatch: bool,\n+    pub fundamental: bool,\n     pub visibility: RawVisibility,\n     /// Whether the trait has `#[rust_skip_array_during_method_dispatch]`. `hir_ty` will ignore\n     /// method calls to this trait's methods when the receiver is an array and the crate edition is\n     /// 2015 or 2018.\n-    pub skip_array_during_method_dispatch: bool,\n     // box it as the vec is usually empty anyways\n     pub attribute_calls: Option<Box<Vec<(AstId<ast::Item>, MacroCallId)>>>,\n }\n@@ -254,6 +255,7 @@ impl TraitData {\n             attrs.by_key(\"rustc_skip_array_during_method_dispatch\").exists();\n         let rustc_has_incoherent_inherent_impls =\n             attrs.by_key(\"rustc_has_incoherent_inherent_impls\").exists();\n+        let fundamental = attrs.by_key(\"fundamental\").exists();\n         let mut collector =\n             AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::TraitId(tr));\n         collector.collect(&item_tree, tree_id.tree_id(), &tr_def.items);\n@@ -269,6 +271,7 @@ impl TraitData {\n                 visibility,\n                 skip_array_during_method_dispatch,\n                 rustc_has_incoherent_inherent_impls,\n+                fundamental,\n             }),\n             diagnostics.into(),\n         )"}]}