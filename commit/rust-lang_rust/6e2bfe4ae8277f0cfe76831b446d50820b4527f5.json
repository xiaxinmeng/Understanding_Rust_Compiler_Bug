{"sha": "6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMmJmZTRhZTgyNzdmMGNmZTc2ODMxYjQ0NmQ1MDgyMGI0NTI3ZjU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-07T21:29:48Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-07T22:15:06Z"}, "message": "register new snapshots", "tree": {"sha": "bb740f238c4a8beae26dfd1f31303ed24f3ffca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb740f238c4a8beae26dfd1f31303ed24f3ffca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "html_url": "https://github.com/rust-lang/rust/commit/6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/comments", "author": null, "committer": null, "parents": [{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972"}], "stats": {"total": 396, "additions": 12, "deletions": 384}, "files": [{"sha": "e7f48c291c95e3ad2cc823c698690cea7202d93d", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -101,8 +101,6 @@ mod std {\n     pub use core::option;   // necessary for panic!()\n     pub use core::clone;    // deriving(Clone)\n     pub use core::cmp;      // deriving(Eq, Ord, etc.)\n-    #[cfg(stage0)]\n-    pub use core::marker as kinds;\n     pub use core::marker;  // deriving(Copy)\n     pub use core::hash;     // deriving(Hash)\n }"}, {"sha": "507703c3a90713da4550d3857f059a9385a25647", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -921,18 +921,6 @@ pub trait ToString {\n     fn to_string(&self) -> String;\n }\n \n-#[cfg(stage0)]\n-impl<T: fmt::Show> ToString for T {\n-    fn to_string(&self) -> String {\n-        use core::fmt::Writer;\n-        let mut buf = String::new();\n-        let _ = buf.write_fmt(format_args!(\"{}\", self));\n-        buf.shrink_to_fit();\n-        buf\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n impl<T: fmt::String> ToString for T {\n     fn to_string(&self) -> String {\n         use core::fmt::Writer;"}, {"sha": "312d739e3a45c3110ea6fa85e852d06cd1eb1473", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -1454,15 +1454,6 @@ impl<T: fmt::Show> fmt::Show for Vec<T> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[experimental = \"waiting on Show stability\"]\n-impl<T: fmt::Show> fmt::String for Vec<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self.as_slice(), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n #[experimental = \"waiting on Show stability\"]\n impl<T: fmt::String> fmt::String for Vec<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "54b0f0d8d353846b9de959fa1d198e2e9e18cb2c", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -633,15 +633,6 @@ impl String for bool {\n     }\n }\n \n-#[cfg(stage0)]\n-//NOTE(stage0): remove impl after snapshot\n-impl Show for str {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(self, f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n //NOTE(stage0): remove cfg after snapshot\n impl Show for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n@@ -659,15 +650,6 @@ impl String for str {\n     }\n }\n \n-#[cfg(stage0)]\n-//NOTE(stage0): remove impl after snapshot\n-impl Show for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(self, f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n //NOTE(stage0): remove cfg after snapshot\n impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n@@ -863,28 +845,6 @@ impl<T: Show> Show for [T] {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<T: Show> String for [T] {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n-            try!(write!(f, \"[\"));\n-        }\n-        let mut is_first = true;\n-        for x in self.iter() {\n-            if is_first {\n-                is_first = false;\n-            } else {\n-                try!(write!(f, \", \"));\n-            }\n-            try!(write!(f, \"{}\", *x))\n-        }\n-        if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n-            try!(write!(f, \"]\"));\n-        }\n-        Ok(())\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<T: String> String for [T] {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {"}, {"sha": "905001cd5671d19dfec5f2b92aa26ef628e43fdc", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -155,14 +155,6 @@ pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n \n macro_rules! radix_fmt {\n     ($T:ty as $U:ty, $fmt:ident, $S:expr) => {\n-        #[cfg(stage0)]\n-        impl fmt::Show for RadixFmt<$T, Radix> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                fmt::String::fmt(self, f)\n-            }\n-        }\n-\n-        #[cfg(not(stage0))]\n         impl fmt::Show for RadixFmt<$T, Radix> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 try!(fmt::String::fmt(self, f));\n@@ -188,14 +180,6 @@ macro_rules! int_base {\n \n macro_rules! show {\n     ($T:ident with $S:expr) => {\n-        #[cfg(stage0)]\n-        impl fmt::Show for $T {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                fmt::String::fmt(self, f)\n-            }\n-        }\n-\n-        #[cfg(not(stage0))]\n         impl fmt::Show for $T {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 try!(fmt::String::fmt(self, f));"}, {"sha": "ea5d37810ccdd68da24889205a80bff80f9b21c7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -146,8 +146,6 @@ mod core {\n mod std {\n     pub use clone;\n     pub use cmp;\n-    #[cfg(stage0)]\n-    pub use marker as kinds;\n     pub use marker;\n     pub use option;\n     pub use fmt;"}, {"sha": "dff27f800c7eb5e892854261eed8957b1992c0d8", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -5065,7 +5065,5 @@ pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen corre\n #[doc(hidden)]\n #[cfg(not(test))]\n mod std {\n-    #[cfg(stage0)]\n-    pub use core::marker as kinds;\n     pub use core::marker;\n }"}, {"sha": "9d33f65cd59d20bc73eab3fd158bd81771a06958", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -495,8 +495,6 @@ pub struct Closed01<F>(pub F);\n mod std {\n     pub use core::{option, fmt}; // panic!()\n     pub use core::clone; // derive Clone\n-    #[cfg(stage0)]\n-    pub use core::marker as kinds;\n     pub use core::marker;\n }\n "}, {"sha": "acaf2e9b4cb643d1434ad12c479fe68ed11c24ab", "filename": "src/libregex/re.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -90,15 +90,6 @@ impl Clone for ExNative {\n     }\n }\n \n-#[cfg(stage0)]\n-//FIXME: remove after stage0 snapshot\n-impl fmt::Show for Regex {\n-    /// Shows the original regular expression.\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self.as_str(), f)\n-    }\n-}\n-\n impl fmt::String for Regex {\n     /// Shows the original regular expression.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "cacf9bb19d20faeabcedd73894b7b4ebe8bd7256", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -195,14 +195,6 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ast::PatRegion(ref inner, mutbl) => {\n             let inner_ty = fcx.infcx().next_ty_var();\n \n-            // SNAP 340ac04 remove this `if`-`else` entirely after next snapshot\n-            let mutbl = if mutbl == ast::MutImmutable {\n-                ty::deref(fcx.infcx().shallow_resolve(expected), true)\n-                   .map(|mt| mt.mutbl).unwrap_or(ast::MutImmutable)\n-            } else {\n-                mutbl\n-            };\n-\n             let mt = ty::mt { ty: inner_ty, mutbl: mutbl };\n             let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n             let rptr_ty = ty::mk_rptr(tcx, tcx.mk_region(region), mt);"}, {"sha": "6fb78d9a8334b285ad09cbc74445bd0912d1c8ab", "filename": "src/librustdoc/html/escape.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -19,14 +19,6 @@ use std::fmt;\n /// string when passed to a format string.\n pub struct Escape<'a>(pub &'a str);\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Escape<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Escape<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         // Because the internet is always right, turns out there's not that many"}, {"sha": "c7ec687bc1a56a4ec22682d9b7dac4b3e5e053a9", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -64,14 +64,6 @@ impl UnsafetySpace {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for TyParamBounds<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for TyParamBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &TyParamBounds(bounds) = self;\n@@ -85,14 +77,6 @@ impl<'a> fmt::String for TyParamBounds<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::Generic {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::Generics {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.lifetimes.len() == 0 && self.type_params.len() == 0 { return Ok(()) }\n@@ -130,14 +114,6 @@ impl fmt::String for clean::Generics {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for WhereClause<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for WhereClause<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &WhereClause(gens) = self;\n@@ -175,29 +151,13 @@ impl<'a> fmt::String for WhereClause<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::Lifetime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(f.write_str(self.get_ref()));\n         Ok(())\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::PolyTrait {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::PolyTrait {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.lifetimes.len() > 0 {\n@@ -214,14 +174,6 @@ impl fmt::String for clean::PolyTrait {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::TyParamBound {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::TyParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -239,14 +191,6 @@ impl fmt::String for clean::TyParamBound {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::PathParameters {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::PathParameters {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -292,29 +236,13 @@ impl fmt::String for clean::PathParameters {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::PathSegment {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::PathSegment {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(f.write_str(self.name.as_slice()));\n         write!(f, \"{}\", self.params)\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::Path {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.global {\n@@ -501,14 +429,6 @@ fn tybounds(w: &mut fmt::Formatter,\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::Type {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -650,15 +570,6 @@ impl fmt::String for clean::Type {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::Arguments {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n-\n impl fmt::String for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {\n@@ -672,14 +583,6 @@ impl fmt::String for clean::Arguments {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::FunctionRetTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::FunctionRetTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -690,28 +593,12 @@ impl fmt::String for clean::FunctionRetTy {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::FnDecl {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::FnDecl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"({args}){arrow}\", args = self.inputs, arrow = self.output)\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Method<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Method<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Method(selfty, d) = *self;\n@@ -742,14 +629,6 @@ impl<'a> fmt::String for Method<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for VisSpace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for VisSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n@@ -759,14 +638,6 @@ impl fmt::String for VisSpace {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for UnsafetySpace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for UnsafetySpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n@@ -776,14 +647,6 @@ impl fmt::String for UnsafetySpace {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::ViewPath {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::ViewPath {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -811,14 +674,6 @@ impl fmt::String for clean::ViewPath {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::ImportSource {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::ImportSource {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.did {\n@@ -836,14 +691,6 @@ impl fmt::String for clean::ImportSource {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for clean::ViewListIdent {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for clean::ViewListIdent {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.source {\n@@ -865,14 +712,6 @@ impl fmt::String for clean::ViewListIdent {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for MutableSpace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for MutableSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -882,14 +721,6 @@ impl fmt::String for MutableSpace {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for RawMutableSpace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for RawMutableSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -899,14 +730,6 @@ impl fmt::String for RawMutableSpace {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Stability<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Stability<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Stability(stab) = *self;\n@@ -921,14 +744,6 @@ impl<'a> fmt::String for Stability<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for ConciseStability<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for ConciseStability<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let ConciseStability(stab) = *self;\n@@ -946,14 +761,6 @@ impl<'a> fmt::String for ConciseStability<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for ModuleSummary {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for ModuleSummary {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fn fmt_inner<'a>(f: &mut fmt::Formatter,"}, {"sha": "db3319eb7659c912541d693b5ccaeaf2f5e3a7c9", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -103,14 +103,6 @@ impl ItemType {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl fmt::Show for ItemType {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for ItemType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.to_static_str().fmt(f)"}, {"sha": "a063191a12fd6c505715954910808de554da3220", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -435,14 +435,6 @@ pub fn reset_headers() {\n     TEST_IDX.with(|s| s.set(0));\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Markdown<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Markdown(md) = *self;\n@@ -452,14 +444,6 @@ impl<'a> fmt::String for Markdown<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for MarkdownWithToc<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let MarkdownWithToc(md) = *self;"}, {"sha": "839dfa339b328763237add6af32db3fb238a98db", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -1351,14 +1351,6 @@ impl<'a> Item<'a> {\n }\n \n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Item<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Item<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         // Write the breadcrumb trail header for the top\n@@ -1634,14 +1626,6 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n struct Initializer<'a>(&'a str);\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Initializer<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Initializer<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Initializer(s) = *self;\n@@ -2204,14 +2188,6 @@ fn item_typedef(w: &mut fmt::Formatter, it: &clean::Item,\n     document(w, it)\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Sidebar<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n@@ -2267,14 +2243,6 @@ impl<'a> fmt::String for Sidebar<'a> {\n     }\n }\n \n-//NOTE(stage0): remove impl after snapshot\n-#[cfg(stage0)]\n-impl<'a> fmt::Show for Source<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a> fmt::String for Source<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Source(s) = *self;"}, {"sha": "fd0b5c5590360cc90389f141f35205e6f9633887", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -2458,14 +2458,6 @@ impl<'a> fmt::String for PrettyJson<'a> {\n     }\n }\n \n-#[cfg(stage0)]\n-//NOTE(stage0): remove impl after snapshot\n-impl<'a, T: Encodable> fmt::Show for AsJson<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl<'a, T: Encodable> fmt::String for AsJson<'a, T> {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "2595a3c44a8cafce0b45a34ed9d7effe9fefc68f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -1783,9 +1783,8 @@ pub struct UnstableFileStat {\n }\n \n \n-// NOTE(stage0): change this one last #[doc=..] to /// after the next snapshot\n bitflags! {\n-    #[doc = \"A set of permissions for a file or directory is represented by a set of\"]\n+    /// A set of permissions for a file or directory is represented by a set of\n     /// flags which are or'd together.\n     flags FilePermission: u32 {\n         const USER_READ     = 0o400,"}, {"sha": "879f1192a4aac898989ea2eeb2e42cb4a0be8938", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -395,13 +395,6 @@ impl Command {\n     }\n }\n \n-#[cfg(stage0)]\n-impl fmt::Show for Command {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n impl fmt::String for Command {\n     /// Format the program and arguments of a Command for display. Any\n     /// non-utf8 data is lossily converted using the utf8 replacement"}, {"sha": "60612f4dbaa0072123db2e88096438c8bae1cb20", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -108,7 +108,6 @@\n #![feature(lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(old_impl_check)]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n \n // Don't link to std. We are std.\n #![no_std]\n@@ -152,7 +151,6 @@ pub use core::default;\n pub use core::finally;\n pub use core::intrinsics;\n pub use core::iter;\n-#[cfg(stage0)] #[cfg(not(test))] pub use core::marker as kinds;\n #[cfg(not(test))] pub use core::marker;\n pub use core::mem;\n #[cfg(not(test))] pub use core::ops;\n@@ -284,8 +282,6 @@ mod std {\n     pub use vec; // used for vec![]\n     pub use cell; // used for tls!\n     pub use thread_local; // used for thread_local!\n-    #[cfg(stage0)]\n-    pub use marker as kinds;\n     pub use marker;  // used for tls!\n     pub use ops; // used for bitflags!\n "}, {"sha": "aa31974c67abdbb6c5f77894ba3e4b70670cf2d8", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-07 9e4e524\n+  freebsd-x86_64 2563d33151bce1bbe08a85d712564bddc7503fc6\n+  linux-i386 d8b73fc9aa3ad72ce1408a41e35d78dba10eb4d4\n+  linux-x86_64 697880d3640e981bbbf23284363e8e9a158b588d\n+  macos-i386 a73b1fc03e8cac747aab0aa186292bb4332a7a98\n+  macos-x86_64 e4ae2670ea4ba5c2e5b4245409c9cab45c9eeb5b\n+  winnt-i386 ddffa59d9605aa05e83e8f664db802da512611e9\n+  winnt-x86_64 a56261ebbc580c6c14b1c1d0be25010f5201dc3f\n+\n S 2015-01-06 340ac04\n   freebsd-x86_64 5413b8931d7076e90c873e0cc7a43e0793c2b17a\n   linux-i386 cacb8e3ad15937916e455d8f63e740c30a807b10"}, {"sha": "714fbd082811959b11672610719e7c37208f123c", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2bfe4ae8277f0cfe76831b446d50820b4527f5/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=6e2bfe4ae8277f0cfe76831b446d50820b4527f5", "patch": "@@ -13,10 +13,8 @@ fn main() {\n \n     // (separate lines to ensure the spans are accurate)\n \n-    // SNAP 340ac04 uncomment this after the next snapshot\n-    // NOTE(stage0) just in case tidy doesn't check snap's in tests\n-    // let &_ // ~ ERROR expected `&mut isize`, found `&_`\n-    //    = foo;\n+     let &_ // ~ ERROR expected `&mut isize`, found `&_`\n+        = foo;\n     let &mut _ = foo;\n \n     let bar = &1is;"}]}