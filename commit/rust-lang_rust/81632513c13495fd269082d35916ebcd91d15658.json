{"sha": "81632513c13495fd269082d35916ebcd91d15658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjMyNTEzYzEzNDk1ZmQyNjkwODJkMzU5MTZlYmNkOTFkMTU2NTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-19T02:23:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-19T03:00:44Z"}, "message": "std::vec: replace .insert with a small amount of unsafe code.\n\nThis makes the included benchmark more than 3 times faster. Also,\n`.unshift(x)` is now faster as `.insert(0, x)` which can reuse the\nallocation if necessary.", "tree": {"sha": "3115d8965dcb8baca15748a7839c07868677da07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3115d8965dcb8baca15748a7839c07868677da07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81632513c13495fd269082d35916ebcd91d15658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81632513c13495fd269082d35916ebcd91d15658", "html_url": "https://github.com/rust-lang/rust/commit/81632513c13495fd269082d35916ebcd91d15658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81632513c13495fd269082d35916ebcd91d15658/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6933f8d8b86f78ac7b5f70f0781d794144763a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6933f8d8b86f78ac7b5f70f0781d794144763a0", "html_url": "https://github.com/rust-lang/rust/commit/b6933f8d8b86f78ac7b5f70f0781d794144763a0"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "e58be99e5640afb661b249317108d84b1b1098a2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81632513c13495fd269082d35916ebcd91d15658/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81632513c13495fd269082d35916ebcd91d15658/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=81632513c13495fd269082d35916ebcd91d15658", "patch": "@@ -1661,20 +1661,28 @@ impl<T> OwnedVector<T> for ~[T] {\n     }\n \n     fn unshift(&mut self, x: T) {\n-        let v = util::replace(self, ~[x]);\n-        self.push_all_move(v);\n+        self.insert(0, x)\n     }\n-    fn insert(&mut self, i: uint, x:T) {\n+\n+    fn insert(&mut self, i: uint, x: T) {\n         let len = self.len();\n         assert!(i <= len);\n-\n-        self.push(x);\n-        let mut j = len;\n-        while j > i {\n-            self.swap(j, j - 1);\n-            j -= 1;\n+        // space for the new element\n+        self.reserve_additional(1);\n+\n+        unsafe { // infallible\n+            // The spot to put the new value\n+            let p = self.as_mut_ptr().offset(i as int);\n+            // Shift everything over to make space. (Duplicating the\n+            // `i`th element into two consecutive places.)\n+            ptr::copy_memory(p.offset(1), p, len - i);\n+            // Write it in, overwriting the first copy of the `i`th\n+            // element.\n+            intrinsics::move_val_init(&mut *p, x);\n+            self.set_len(len + 1);\n         }\n     }\n+\n     fn remove(&mut self, i: uint) -> T {\n         let len = self.len();\n         assert!(i < len);\n@@ -4144,6 +4152,7 @@ mod bench {\n     use vec::VectorVector;\n     use option::*;\n     use ptr;\n+    use rand::{weak_rng, Rng};\n \n     #[bench]\n     fn iterator(bh: &mut BenchHarness) {\n@@ -4320,4 +4329,17 @@ mod bench {\n             }\n         });\n     }\n+\n+    #[bench]\n+    fn random_inserts(bh: &mut BenchHarness) {\n+        let mut rng = weak_rng();\n+        bh.iter(|| {\n+                let mut v = vec::from_elem(30, (0u, 0u));\n+                for _ in range(0, 100) {\n+                    let l = v.len();\n+                    v.insert(rng.gen::<uint>() % (l + 1),\n+                             (1, 1));\n+                }\n+            })\n+    }\n }"}]}