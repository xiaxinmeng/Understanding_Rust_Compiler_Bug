{"sha": "0c2c8116a307e88f8327e0ea846d2c9c135193b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMmM4MTE2YTMwN2U4OGY4MzI3ZTBlYTg0NmQyYzljMTM1MTkzYjc=", "commit": {"author": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-03T02:45:46Z"}, "committer": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-11T00:30:31Z"}, "message": "Teach libsyntax about `while let`", "tree": {"sha": "b9f17f6dc86f3e98b77b0eaf18a7d5ecb05bd7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f17f6dc86f3e98b77b0eaf18a7d5ecb05bd7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2c8116a307e88f8327e0ea846d2c9c135193b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2c8116a307e88f8327e0ea846d2c9c135193b7", "html_url": "https://github.com/rust-lang/rust/commit/0c2c8116a307e88f8327e0ea846d2c9c135193b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2c8116a307e88f8327e0ea846d2c9c135193b7/comments", "author": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a7676898d9f80ab540c6df5d4c9ce35bb50463", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a7676898d9f80ab540c6df5d4c9ce35bb50463", "html_url": "https://github.com/rust-lang/rust/commit/78a7676898d9f80ab540c6df5d4c9ce35bb50463"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "675249b259148c17088bb400bec1560e5a6d672c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -524,6 +524,8 @@ pub enum Expr_ {\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprWhile(P<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n+    ExprWhileLet(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n+    // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprForLoop(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n     // Conditionless loop (can be exited with break, cont, or ret)\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic."}, {"sha": "575dcf32dd6cbb048b1f591bd106e8fd6f417e38", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -67,6 +67,42 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fld.cx.expr(span, ast::ExprWhile(cond, body, opt_ident))\n         }\n \n+        // Desugar ExprWhileLet\n+        // From: `[opt_ident]: while let <pat> = <expr> <body>`\n+        ast::ExprWhileLet(pat, expr, body, opt_ident) => {\n+            // to:\n+            //\n+            //   [opt_ident]: loop {\n+            //     match <expr> {\n+            //       <pat> => <body>,\n+            //       _ => break\n+            //     }\n+            //   }\n+\n+            // `<pat> => <body>`\n+            let pat_arm = {\n+                let body_expr = fld.cx.expr_block(body);\n+                fld.cx.arm(pat.span, vec![pat], body_expr)\n+            };\n+\n+            // `_ => break`\n+            let break_arm = {\n+                let pat_under = fld.cx.pat_wild(span);\n+                let break_expr = fld.cx.expr_break(span);\n+                fld.cx.arm(span, vec![pat_under], break_expr)\n+            };\n+\n+            // `match <expr> { ... }`\n+            let arms = vec![pat_arm, break_arm];\n+            let match_expr = fld.cx.expr(span,\n+                                         ast::ExprMatch(expr, arms, ast::MatchWhileLetDesugar));\n+\n+            // `[opt_ident]: loop { ... }`\n+            let loop_block = fld.cx.block_expr(match_expr);\n+            let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n+            fld.cx.expr(span, ast::ExprLoop(loop_block, opt_ident))\n+        }\n+\n         // Desugar ExprIfLet\n         // From: `if let <pat> = <expr> <body> [<elseopt>]`\n         ast::ExprIfLet(pat, expr, body, mut elseopt) => {"}, {"sha": "6ecb4d3208d14394785f075e6e598d5c807126b0", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -1218,6 +1218,12 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                           folder.fold_block(body),\n                           opt_ident.map(|i| folder.fold_ident(i)))\n             }\n+            ExprWhileLet(pat, expr, body, opt_ident) => {\n+                ExprWhileLet(folder.fold_pat(pat),\n+                             folder.fold_expr(expr),\n+                             folder.fold_block(body),\n+                             opt_ident.map(|i| folder.fold_ident(i)))\n+            }\n             ExprForLoop(pat, iter, body, opt_ident) => {\n                 ExprForLoop(folder.fold_pat(pat),\n                             folder.fold_expr(iter),"}, {"sha": "d46d078c776be0b2ea59b01cc3e7565d1fe109a5", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -28,6 +28,7 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n         | ast::ExprMatch(..)\n         | ast::ExprBlock(_)\n         | ast::ExprWhile(..)\n+        | ast::ExprWhileLet(..)\n         | ast::ExprLoop(..)\n         | ast::ExprForLoop(..) => false,\n         _ => true"}, {"sha": "5f304fb0aeb82f87d07e4043d38d8833ac3aa867", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -26,7 +26,7 @@ use ast::{ExprField, ExprTupField, ExprFnBlock, ExprIf, ExprIfLet, ExprIndex, Ex\n use ast::{ExprLit, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary, ExprUnboxedFn};\n-use ast::{ExprVec, ExprWhile, ExprForLoop, Field, FnDecl};\n+use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{Once, Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n@@ -2935,14 +2935,30 @@ impl<'a> Parser<'a> {\n         self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block, opt_ident))\n     }\n \n+    /// Parse a 'while' or 'while let' expression ('while' token already eaten)\n     pub fn parse_while_expr(&mut self, opt_ident: Option<ast::Ident>) -> P<Expr> {\n+        if self.is_keyword(keywords::Let) {\n+            return self.parse_while_let_expr(opt_ident);\n+        }\n         let lo = self.last_span.lo;\n         let cond = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL);\n         let body = self.parse_block();\n         let hi = body.span.hi;\n         return self.mk_expr(lo, hi, ExprWhile(cond, body, opt_ident));\n     }\n \n+    /// Parse a 'while let' expression ('while' token already eaten)\n+    pub fn parse_while_let_expr(&mut self, opt_ident: Option<ast::Ident>) -> P<Expr> {\n+        let lo = self.last_span.lo;\n+        self.expect_keyword(keywords::Let);\n+        let pat = self.parse_pat();\n+        self.expect(&token::EQ);\n+        let expr = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL);\n+        let body = self.parse_block();\n+        let hi = body.span.hi;\n+        return self.mk_expr(lo, hi, ExprWhileLet(pat, expr, body, opt_ident));\n+    }\n+\n     pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::Ident>) -> P<Expr> {\n         let lo = self.last_span.lo;\n         let body = self.parse_block();"}, {"sha": "fd3dd1c5a2cee7ba9185d43275aee309d544c2a8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -1525,6 +1525,19 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n                 try!(self.print_block(&**blk));\n             }\n+            ast::ExprWhileLet(ref pat, ref expr, ref blk, opt_ident) => {\n+                for ident in opt_ident.iter() {\n+                    try!(self.print_ident(*ident));\n+                    try!(self.word_space(\":\"));\n+                }\n+                try!(self.head(\"while let\"));\n+                try!(self.print_pat(&**pat));\n+                try!(space(&mut self.s));\n+                try!(self.word_space(\"=\"));\n+                try!(self.print_expr(&**expr));\n+                try!(space(&mut self.s));\n+                try!(self.print_block(&**blk));\n+            }\n             ast::ExprForLoop(ref pat, ref iter, ref blk, opt_ident) => {\n                 for ident in opt_ident.iter() {\n                     try!(self.print_ident(*ident));"}, {"sha": "ce316ef57668a63793edf6d2c41229fda8dab1a2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2c8116a307e88f8327e0ea846d2c9c135193b7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0c2c8116a307e88f8327e0ea846d2c9c135193b7", "patch": "@@ -737,6 +737,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_block(&**if_block);\n             walk_expr_opt(visitor, optional_else);\n         }\n+        ExprWhileLet(ref pattern, ref subexpression, ref block, _) => {\n+            visitor.visit_pat(&**pattern);\n+            visitor.visit_expr(&**subexpression);\n+            visitor.visit_block(&**block);\n+        }\n         ExprForLoop(ref pattern, ref subexpression, ref block, _) => {\n             visitor.visit_pat(&**pattern);\n             visitor.visit_expr(&**subexpression);"}]}