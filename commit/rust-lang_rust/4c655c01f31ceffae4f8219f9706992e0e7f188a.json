{"sha": "4c655c01f31ceffae4f8219f9706992e0e7f188a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjU1YzAxZjMxY2VmZmFlNGY4MjE5Zjk3MDY5OTJlMGU3ZjE4OGE=", "commit": {"author": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-05-30T18:21:06Z"}, "committer": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T10:46:07Z"}, "message": "Enable hover and autocomplete docs on macro generated items", "tree": {"sha": "6d295976e70602a08268fa97fefd1c1f82dba59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d295976e70602a08268fa97fefd1c1f82dba59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c655c01f31ceffae4f8219f9706992e0e7f188a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c655c01f31ceffae4f8219f9706992e0e7f188a", "html_url": "https://github.com/rust-lang/rust/commit/4c655c01f31ceffae4f8219f9706992e0e7f188a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c655c01f31ceffae4f8219f9706992e0e7f188a/comments", "author": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3d4be42120796c9845376a9ad315736fc85eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3d4be42120796c9845376a9ad315736fc85eca", "html_url": "https://github.com/rust-lang/rust/commit/9b3d4be42120796c9845376a9ad315736fc85eca"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "2eeba057299185a1b1ad308052308740de4645e9", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=4c655c01f31ceffae4f8219f9706992e0e7f188a", "patch": "@@ -87,12 +87,18 @@ impl Attrs {\n     }\n \n     pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n+        let docs = ast::CommentIter::from_syntax_node(owner.syntax()).doc_comment_text().map(\n+            |docs_text| Attr {\n+                input: Some(AttrInput::Literal(SmolStr::new(docs_text))),\n+                path: ModPath::from(hir_expand::name!(doc)),\n+            },\n+        );\n         let mut attrs = owner.attrs().peekable();\n         let entries = if attrs.peek().is_none() {\n             // Avoid heap allocation\n             None\n         } else {\n-            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n+            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).chain(docs).collect())\n         };\n         Attrs { entries }\n     }"}, {"sha": "74b9f8199c1081dd8328ee9d6e846e4805249526", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=4c655c01f31ceffae4f8219f9706992e0e7f188a", "patch": "@@ -70,6 +70,45 @@ impl Documentation {\n     }\n }\n \n-pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n-    node.doc_comment_text().map(|it| Documentation::new(&it))\n+pub(crate) fn docs_from_ast<N>(node: &N) -> Option<Documentation>\n+where\n+    N: ast::DocCommentsOwner + ast::AttrsOwner,\n+{\n+    let doc_comment_text = node.doc_comment_text();\n+    let doc_attr_text = expand_doc_attrs(node);\n+    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+    docs.map(|it| Documentation::new(&it))\n+}\n+\n+fn merge_doc_comments_and_attrs(\n+    doc_comment_text: Option<String>,\n+    doc_attr_text: Option<String>,\n+) -> Option<String> {\n+    match (doc_comment_text, doc_attr_text) {\n+        (Some(mut comment_text), Some(attr_text)) => {\n+            comment_text.push_str(\"\\n\\n\");\n+            comment_text.push_str(&attr_text);\n+            Some(comment_text)\n+        }\n+        (Some(comment_text), None) => Some(comment_text),\n+        (None, Some(attr_text)) => Some(attr_text),\n+        (None, None) => None,\n+    }\n+}\n+\n+fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n+    let mut docs = String::new();\n+    for attr in owner.attrs() {\n+        if let Some((\"doc\", value)) =\n+            attr.as_simple_key_value().as_ref().map(|(k, v)| (k.as_str(), v.as_str()))\n+        {\n+            docs.push_str(value);\n+            docs.push_str(\"\\n\\n\");\n+        }\n+    }\n+    if docs.is_empty() {\n+        None\n+    } else {\n+        Some(docs)\n+    }\n }"}, {"sha": "660bdfe3365b2f20182ede8f1c4abd356e049669", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=4c655c01f31ceffae4f8219f9706992e0e7f188a", "patch": "@@ -153,6 +153,7 @@ pub mod known {\n         str,\n         // Special names\n         macro_rules,\n+        doc,\n         // Components of known path (value or mod name)\n         std,\n         core,"}, {"sha": "e25a7dacf01bda13f7262181309bb9c70f5e14cd", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=4c655c01f31ceffae4f8219f9706992e0e7f188a", "patch": "@@ -169,21 +169,30 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n-            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)), mod_path)\n+            let doc_comment_text = src.value.doc_comment_text();\n+            let doc_attr_text = expand_doc_attrs(&src.value);\n+            let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+            hover_text(docs, Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::Field(it) => {\n             let src = it.source(db);\n             match src.value {\n                 FieldSource::Named(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                    let doc_comment_text = it.doc_comment_text();\n+                    let doc_attr_text = expand_doc_attrs(&it);\n+                    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+                    hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             }\n         }\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => match it.definition_source(db).value {\n                 ModuleSource::Module(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                    let doc_comment_text = it.doc_comment_text();\n+                    let doc_attr_text = expand_doc_attrs(&it);\n+                    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+                    hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             },\n@@ -208,10 +217,46 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<String>\n     where\n         D: HasSource<Ast = A>,\n-        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel + ast::AttrsOwner,\n     {\n         let src = def.source(db);\n-        hover_text(src.value.doc_comment_text(), src.value.short_label(), mod_path)\n+        let doc_comment_text = src.value.doc_comment_text();\n+        let doc_attr_text = expand_doc_attrs(&src.value);\n+        let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+        hover_text(docs, src.value.short_label(), mod_path)\n+    }\n+}\n+\n+fn merge_doc_comments_and_attrs(\n+    doc_comment_text: Option<String>,\n+    doc_attr_text: Option<String>,\n+) -> Option<String> {\n+    match (doc_comment_text, doc_attr_text) {\n+        (Some(mut comment_text), Some(attr_text)) => {\n+            comment_text.push_str(\"\\n\\n\");\n+            comment_text.push_str(&attr_text);\n+            Some(comment_text)\n+        }\n+        (Some(comment_text), None) => Some(comment_text),\n+        (None, Some(attr_text)) => Some(attr_text),\n+        (None, None) => None,\n+    }\n+}\n+\n+fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n+    let mut docs = String::new();\n+    for attr in owner.attrs() {\n+        if let Some((\"doc\", value)) =\n+            attr.as_simple_key_value().as_ref().map(|(k, v)| (k.as_str(), v.as_str()))\n+        {\n+            docs.push_str(value);\n+            docs.push_str(\"\\n\\n\");\n+        }\n+    }\n+    if docs.is_empty() {\n+        None\n+    } else {\n+        Some(docs)\n     }\n }\n "}, {"sha": "a8f2454fd96e861209a9345911cef983ce41ace4", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c655c01f31ceffae4f8219f9706992e0e7f188a/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=4c655c01f31ceffae4f8219f9706992e0e7f188a", "patch": "@@ -83,13 +83,22 @@ pub trait DocCommentsOwner: AstNode {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }\n \n+    fn doc_comment_text(&self) -> Option<String> {\n+        self.doc_comments().doc_comment_text()\n+    }\n+}\n+\n+impl CommentIter {\n+    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> CommentIter {\n+        CommentIter { iter: syntax_node.children_with_tokens() }\n+    }\n+\n     /// Returns the textual content of a doc comment block as a single string.\n     /// That is, strips leading `///` (+ optional 1 character of whitespace),\n     /// trailing `*/`, trailing whitespace and then joins the lines.\n-    fn doc_comment_text(&self) -> Option<String> {\n+    pub fn doc_comment_text(self) -> Option<String> {\n         let mut has_comments = false;\n         let docs = self\n-            .doc_comments()\n             .filter(|comment| comment.kind().doc.is_some())\n             .map(|comment| {\n                 has_comments = true;"}]}