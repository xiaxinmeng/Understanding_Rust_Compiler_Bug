{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "node_id": "C_kwDOAAsO6NoAKDgwMTgyMWQxNTYwZjg0ZTQ3MTZmY2JkOTI0NGVjOTU5MzIwYTEzZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T14:37:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T14:37:17Z"}, "message": "Auto merge of #100429 - GuillaumeGomez:merge-html-elements-together, r=notriddle\n\nrustdoc: Merge source code pages HTML elements together\n\nWe realized that the HTML generated for the source code pages could be improved quite a lot. This PR is a first pass toward this goal. Some explanations: it merges similar classes elements (even when there are white characters in between).\n\nThere is an exception to this: if this is an ident, I also merged it with \"unclassified\" elements. This part is up to debate and can be very easily removed as the check is performed in one place (in the `can_merge` function).\n\nEDIT: The `ident` is now only kept in the code for the `span` it contains but it is not rendered into the HTML.\n\nSo now some numbers:\n\nFor these ones, on each page, I run this JS: `document.getElementsByTagName('*').length`. The goal is to count the number of DOM elements. I took some pages that seemed big, but don't hesitate to check some others.\n\n| file name | before this PR | with this PR | diff | without ident | diff |\n|-|-|-|-|-|-|\n| std/lib.rs.html (source link on std crate page) | 3455 | 2776 | 20.7% | 2387 | 31% |\n| alloc/vec/mod.rs.html (source on Vec type page) | 11012 | 8084 | 26.6% | 6682 | 39.4% |\n| alloc/string.rs.html (source on String type page) | 10800 | 8214 | 24% | 6712 | 37.9% |\n| std/sync/mutex.rs.html (source on Mutex type page) | 2953 | 2403 | 18.7% | 2139 | 27.6% |\n\nYou can test it [here](https://rustdoc.crud.net/imperio/merge-html-elements-together/src/std/lib.rs.html).\n\ncc `@jsha`\nr? `@notriddle`", "tree": {"sha": "18e83946f4f278cdc83845f0f79676b464644b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e83946f4f278cdc83845f0f79676b464644b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5665583815a0f0f3e22516441efb43ea6dede2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5665583815a0f0f3e22516441efb43ea6dede2", "html_url": "https://github.com/rust-lang/rust/commit/4c5665583815a0f0f3e22516441efb43ea6dede2"}, {"sha": "6e574e100c47d1800e05d14cbaae959c11f320ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e574e100c47d1800e05d14cbaae959c11f320ed", "html_url": "https://github.com/rust-lang/rust/commit/6e574e100c47d1800e05d14cbaae959c11f320ed"}], "stats": {"total": 275, "additions": 216, "deletions": 59}, "files": [{"sha": "9d8ee52a3faf861d3609f615427a6475eb7b996f", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 172, "deletions": 12, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -111,6 +111,70 @@ fn write_header(out: &mut Buffer, class: &str, extra_content: Option<Buffer>) {\n     write!(out, \"<code>\");\n }\n \n+/// Write all the pending elements sharing a same (or at mergeable) `Class`.\n+///\n+/// If there is a \"parent\" (if a `EnterSpan` event was encountered) and the parent can be merged\n+/// with the elements' class, then we simply write the elements since the `ExitSpan` event will\n+/// close the tag.\n+///\n+/// Otherwise, if there is only one pending element, we let the `string` function handle both\n+/// opening and closing the tag, otherwise we do it into this function.\n+fn write_pending_elems(\n+    out: &mut Buffer,\n+    href_context: &Option<HrefContext<'_, '_, '_>>,\n+    pending_elems: &mut Vec<(&str, Option<Class>)>,\n+    current_class: &mut Option<Class>,\n+    closing_tags: &[(&str, Class)],\n+) {\n+    if pending_elems.is_empty() {\n+        return;\n+    }\n+    let mut done = false;\n+    if let Some((_, parent_class)) = closing_tags.last() {\n+        if can_merge(*current_class, Some(*parent_class), \"\") {\n+            for (text, class) in pending_elems.iter() {\n+                string(out, Escape(text), *class, &href_context, false);\n+            }\n+            done = true;\n+        }\n+    }\n+    if !done {\n+        // We only want to \"open\" the tag ourselves if we have more than one pending and if the current\n+        // parent tag is not the same as our pending content.\n+        let open_tag_ourselves = pending_elems.len() > 1;\n+        let close_tag = if open_tag_ourselves {\n+            enter_span(out, current_class.unwrap(), &href_context)\n+        } else {\n+            \"\"\n+        };\n+        for (text, class) in pending_elems.iter() {\n+            string(out, Escape(text), *class, &href_context, !open_tag_ourselves);\n+        }\n+        if open_tag_ourselves {\n+            exit_span(out, close_tag);\n+        }\n+    }\n+    pending_elems.clear();\n+    *current_class = None;\n+}\n+\n+/// Check if two `Class` can be merged together. In the following rules, \"unclassified\" means `None`\n+/// basically (since it's `Option<Class>`). The following rules apply:\n+///\n+/// * If two `Class` have the same variant, then they can be merged.\n+/// * If the other `Class` is unclassified and only contains white characters (backline,\n+///   whitespace, etc), it can be merged.\n+/// * `Class::Ident` is considered the same as unclassified (because it doesn't have an associated\n+///    CSS class).\n+fn can_merge(class1: Option<Class>, class2: Option<Class>, text: &str) -> bool {\n+    match (class1, class2) {\n+        (Some(c1), Some(c2)) => c1.is_equal_to(c2),\n+        (Some(Class::Ident(_)), None) | (None, Some(Class::Ident(_))) => true,\n+        (Some(_), None) | (None, Some(_)) => text.trim().is_empty(),\n+        _ => false,\n+    }\n+}\n+\n /// Convert the given `src` source code into HTML by adding classes for highlighting.\n ///\n /// This code is used to render code blocks (in the documentation) as well as the source code pages.\n@@ -130,23 +194,64 @@ fn write_code(\n ) {\n     // This replace allows to fix how the code source with DOS backline characters is displayed.\n     let src = src.replace(\"\\r\\n\", \"\\n\");\n-    let mut closing_tags: Vec<&'static str> = Vec::new();\n+    // It contains the closing tag and the associated `Class`.\n+    let mut closing_tags: Vec<(&'static str, Class)> = Vec::new();\n+    // The following two variables are used to group HTML elements with same `class` attributes\n+    // to reduce the DOM size.\n+    let mut current_class: Option<Class> = None;\n+    // We need to keep the `Class` for each element because it could contain a `Span` which is\n+    // used to generate links.\n+    let mut pending_elems: Vec<(&str, Option<Class>)> = Vec::new();\n+\n     Classifier::new(\n         &src,\n         href_context.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n         decoration_info,\n     )\n     .highlight(&mut |highlight| {\n         match highlight {\n-            Highlight::Token { text, class } => string(out, Escape(text), class, &href_context),\n+            Highlight::Token { text, class } => {\n+                // If the two `Class` are different, time to flush the current content and start\n+                // a new one.\n+                if !can_merge(current_class, class, text) {\n+                    write_pending_elems(\n+                        out,\n+                        &href_context,\n+                        &mut pending_elems,\n+                        &mut current_class,\n+                        &closing_tags,\n+                    );\n+                    current_class = class.map(Class::dummy);\n+                } else if current_class.is_none() {\n+                    current_class = class.map(Class::dummy);\n+                }\n+                pending_elems.push((text, class));\n+            }\n             Highlight::EnterSpan { class } => {\n-                closing_tags.push(enter_span(out, class, &href_context))\n+                // We flush everything just in case...\n+                write_pending_elems(\n+                    out,\n+                    &href_context,\n+                    &mut pending_elems,\n+                    &mut current_class,\n+                    &closing_tags,\n+                );\n+                closing_tags.push((enter_span(out, class, &href_context), class))\n             }\n             Highlight::ExitSpan => {\n-                exit_span(out, closing_tags.pop().expect(\"ExitSpan without EnterSpan\"))\n+                // We flush everything just in case...\n+                write_pending_elems(\n+                    out,\n+                    &href_context,\n+                    &mut pending_elems,\n+                    &mut current_class,\n+                    &closing_tags,\n+                );\n+                exit_span(out, closing_tags.pop().expect(\"ExitSpan without EnterSpan\").0)\n             }\n         };\n     });\n+    write_pending_elems(out, &href_context, &mut pending_elems, &mut current_class, &closing_tags);\n }\n \n fn write_footer(out: &mut Buffer, playground_button: Option<&str>) {\n@@ -160,14 +265,15 @@ enum Class {\n     DocComment,\n     Attribute,\n     KeyWord,\n-    // Keywords that do pointer/reference stuff.\n+    /// Keywords that do pointer/reference stuff.\n     RefKeyWord,\n     Self_(Span),\n     Macro(Span),\n     MacroNonTerminal,\n     String,\n     Number,\n     Bool,\n+    /// `Ident` isn't rendered in the HTML but we still need it for the `Span` it contains.\n     Ident(Span),\n     Lifetime,\n     PreludeTy,\n@@ -177,6 +283,31 @@ enum Class {\n }\n \n impl Class {\n+    /// It is only looking at the variant, not the variant content.\n+    ///\n+    /// It is used mostly to group multiple similar HTML elements into one `<span>` instead of\n+    /// multiple ones.\n+    fn is_equal_to(self, other: Self) -> bool {\n+        match (self, other) {\n+            (Self::Self_(_), Self::Self_(_))\n+            | (Self::Macro(_), Self::Macro(_))\n+            | (Self::Ident(_), Self::Ident(_))\n+            | (Self::Decoration(_), Self::Decoration(_)) => true,\n+            (x, y) => x == y,\n+        }\n+    }\n+\n+    /// If `self` contains a `Span`, it'll be replaced with `DUMMY_SP` to prevent creating links\n+    /// on \"empty content\" (because of the attributes merge).\n+    fn dummy(self) -> Self {\n+        match self {\n+            Self::Self_(_) => Self::Self_(DUMMY_SP),\n+            Self::Macro(_) => Self::Macro(DUMMY_SP),\n+            Self::Ident(_) => Self::Ident(DUMMY_SP),\n+            s => s,\n+        }\n+    }\n+\n     /// Returns the css class expected by rustdoc for each `Class`.\n     fn as_html(self) -> &'static str {\n         match self {\n@@ -191,7 +322,7 @@ impl Class {\n             Class::String => \"string\",\n             Class::Number => \"number\",\n             Class::Bool => \"bool-val\",\n-            Class::Ident(_) => \"ident\",\n+            Class::Ident(_) => \"\",\n             Class::Lifetime => \"lifetime\",\n             Class::PreludeTy => \"prelude-ty\",\n             Class::PreludeVal => \"prelude-val\",\n@@ -630,7 +761,7 @@ impl<'a> Classifier<'a> {\n             TokenKind::CloseBracket => {\n                 if self.in_attribute {\n                     self.in_attribute = false;\n-                    sink(Highlight::Token { text: \"]\", class: None });\n+                    sink(Highlight::Token { text: \"]\", class: Some(Class::Attribute) });\n                     sink(Highlight::ExitSpan);\n                     return;\n                 }\n@@ -701,7 +832,7 @@ fn enter_span(\n     klass: Class,\n     href_context: &Option<HrefContext<'_, '_, '_>>,\n ) -> &'static str {\n-    string_without_closing_tag(out, \"\", Some(klass), href_context).expect(\n+    string_without_closing_tag(out, \"\", Some(klass), href_context, true).expect(\n         \"internal error: enter_span was called with Some(klass) but did not return a \\\n             closing HTML tag\",\n     )\n@@ -733,8 +864,10 @@ fn string<T: Display>(\n     text: T,\n     klass: Option<Class>,\n     href_context: &Option<HrefContext<'_, '_, '_>>,\n+    open_tag: bool,\n ) {\n-    if let Some(closing_tag) = string_without_closing_tag(out, text, klass, href_context) {\n+    if let Some(closing_tag) = string_without_closing_tag(out, text, klass, href_context, open_tag)\n+    {\n         out.write_str(closing_tag);\n     }\n }\n@@ -753,6 +886,7 @@ fn string_without_closing_tag<T: Display>(\n     text: T,\n     klass: Option<Class>,\n     href_context: &Option<HrefContext<'_, '_, '_>>,\n+    open_tag: bool,\n ) -> Option<&'static str> {\n     let Some(klass) = klass\n     else {\n@@ -761,6 +895,10 @@ fn string_without_closing_tag<T: Display>(\n     };\n     let Some(def_span) = klass.get_span()\n     else {\n+        if !open_tag {\n+            write!(out, \"{}\", text);\n+            return None;\n+        }\n         write!(out, \"<span class=\\\"{}\\\">{}\", klass.as_html(), text);\n         return Some(\"</span>\");\n     };\n@@ -784,6 +922,7 @@ fn string_without_closing_tag<T: Display>(\n             path\n         });\n     }\n+\n     if let Some(href_context) = href_context {\n         if let Some(href) =\n             href_context.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n@@ -812,12 +951,33 @@ fn string_without_closing_tag<T: Display>(\n                 }\n             })\n         {\n-            write!(out, \"<a class=\\\"{}\\\" href=\\\"{}\\\">{}\", klass.as_html(), href, text_s);\n+            if !open_tag {\n+                // We're already inside an element which has the same klass, no need to give it\n+                // again.\n+                write!(out, \"<a href=\\\"{}\\\">{}\", href, text_s);\n+            } else {\n+                let klass_s = klass.as_html();\n+                if klass_s.is_empty() {\n+                    write!(out, \"<a href=\\\"{}\\\">{}\", href, text_s);\n+                } else {\n+                    write!(out, \"<a class=\\\"{}\\\" href=\\\"{}\\\">{}\", klass_s, href, text_s);\n+                }\n+            }\n             return Some(\"</a>\");\n         }\n     }\n-    write!(out, \"<span class=\\\"{}\\\">{}\", klass.as_html(), text_s);\n-    Some(\"</span>\")\n+    if !open_tag {\n+        write!(out, \"{}\", text_s);\n+        return None;\n+    }\n+    let klass_s = klass.as_html();\n+    if klass_s.is_empty() {\n+        write!(out, \"{}\", text_s);\n+        Some(\"\")\n+    } else {\n+        write!(out, \"<span class=\\\"{}\\\">{}\", klass_s, text_s);\n+        Some(\"</span>\")\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "2184897872153b6fb7573a0292ffb3c6973738d8", "filename": "src/librustdoc/html/highlight/fixtures/decorations.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -1,2 +1,2 @@\n-<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"number\">1</span>;</span>\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"number\">2</span>;\n\\ No newline at end of file\n+<span class=\"example\"><span class=\"kw\">let </span>x = <span class=\"number\">1</span>;</span>\n+<span class=\"kw\">let </span>y = <span class=\"number\">2</span>;\n\\ No newline at end of file"}, {"sha": "30b50ca7c662c23a5e6b2ba69d2fcc9e41b0c45b", "filename": "src/librustdoc/html/highlight/fixtures/dos_line.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -1,3 +1,3 @@\n-<span class=\"kw\">pub</span> <span class=\"kw\">fn</span> <span class=\"ident\">foo</span>() {\n+<span class=\"kw\">pub fn </span>foo() {\n <span class=\"macro\">println!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n }"}, {"sha": "9f73e03f95e41440025db3435d6df38b159d849c", "filename": "src/librustdoc/html/highlight/fixtures/highlight.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -1,4 +1,4 @@\n-<span class=\"kw\">use</span> <span class=\"ident\"><span class=\"kw\">crate</span>::a::foo</span>;\n-<span class=\"kw\">use</span> <span class=\"ident\"><span class=\"self\">self</span>::whatever</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file\n+<span class=\"kw\">use </span><span class=\"kw\">crate</span>::a::foo;\n+<span class=\"kw\">use </span><span class=\"self\">self</span>::whatever;\n+<span class=\"kw\">let </span>x = <span class=\"kw\">super</span>::b::foo;\n+<span class=\"kw\">let </span>y = <span class=\"self\">Self</span>::whatever;\n\\ No newline at end of file"}, {"sha": "ae2650528eb723c742f598f3e5cd77ff0128fb23", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -8,30 +8,30 @@\n .lifetime { color: #B76514; }\n .question-mark { color: #ff9011; }\n </style>\n-<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> = <span class=\"string\">&quot;lib&quot;</span>]</span>\n+<pre><code><span class=\"attribute\">#![crate_type = <span class=\"string\">&quot;lib&quot;</span>]</span>\n \n-<span class=\"kw\">use</span> <span class=\"ident\">std::path</span>::{<span class=\"ident\">Path</span>, <span class=\"ident\">PathBuf</span>};\n+<span class=\"kw\">use </span>std::path::{Path, PathBuf};\n \n-<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> = <span class=\"string\">&quot;linux&quot;</span>)]</span>\n-<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n-    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> = <span class=\"bool-val\">true</span> &amp;&amp; <span class=\"bool-val\">false</span> || <span class=\"bool-val\">true</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () = <span class=\"number\">0</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = &amp;&amp;<span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n-    <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;mut</span> <span class=\"ident\">bar</span>);\n-    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> &lt; <span class=\"ident\">N</span> &amp;&amp; <span class=\"ident\">index</span> &lt;= <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n-    <span class=\"ident\">::std::env::var</span>(<span class=\"string\">&quot;gateau&quot;</span>).<span class=\"ident\">is_ok</span>();\n-    <span class=\"attribute\">#[<span class=\"ident\">rustfmt::skip</span>]</span>\n-    <span class=\"kw\">let</span> <span class=\"ident\">s</span>:<span class=\"ident\">std::path::PathBuf</span> = <span class=\"ident\">std::path::PathBuf::new</span>();\n-    <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> = <span class=\"ident\">String::new</span>();\n+<span class=\"attribute\">#[cfg(target_os = <span class=\"string\">&quot;linux&quot;</span>)]</span>\n+<span class=\"kw\">fn </span>main() -&gt; () {\n+    <span class=\"kw\">let </span>foo = <span class=\"bool-val\">true </span>&amp;&amp; <span class=\"bool-val\">false </span>|| <span class=\"bool-val\">true</span>;\n+    <span class=\"kw\">let _</span>: <span class=\"kw-2\">*const </span>() = <span class=\"number\">0</span>;\n+    <span class=\"kw\">let _ </span>= <span class=\"kw-2\">&amp;</span>foo;\n+    <span class=\"kw\">let _ </span>= &amp;&amp;foo;\n+    <span class=\"kw\">let _ </span>= <span class=\"kw-2\">*</span>foo;\n+    <span class=\"macro\">mac!</span>(foo, <span class=\"kw-2\">&amp;mut </span>bar);\n+    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.length &lt; N &amp;&amp; index &lt;= <span class=\"self\">self</span>.length);\n+    ::std::env::var(<span class=\"string\">&quot;gateau&quot;</span>).is_ok();\n+    <span class=\"attribute\">#[rustfmt::skip]</span>\n+    <span class=\"kw\">let </span>s:std::path::PathBuf = std::path::PathBuf::new();\n+    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n \n-    <span class=\"kw\">match</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">s</span> {\n-        <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> =&gt; {}\n+    <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span>s {\n+        <span class=\"kw-2\">ref mut </span>x =&gt; {}\n     }\n }\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"ident\">bar</span> {\n-    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) =&gt; {};\n+<span class=\"macro\">macro_rules!</span> bar {\n+    (<span class=\"macro-nonterminal\">$foo</span>:tt) =&gt; {};\n }\n </code></pre>"}, {"sha": "9f8915282642dd8bf78d41f9a67b99c09a5dd151", "filename": "src/librustdoc/html/highlight/fixtures/union.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -1,8 +1,8 @@\n-<span class=\"kw\">union</span> <span class=\"ident\">Foo</span> {\n-    <span class=\"ident\">i</span>: <span class=\"ident\">i8</span>,\n-    <span class=\"ident\">u</span>: <span class=\"ident\">i8</span>,\n+<span class=\"kw\">union </span>Foo {\n+    i: i8,\n+    u: i8,\n }\n \n-<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n-    <span class=\"kw\">let</span> <span class=\"ident\">union</span> = <span class=\"number\">0</span>;\n+<span class=\"kw\">fn </span>main() {\n+    <span class=\"kw\">let </span>union = <span class=\"number\">0</span>;\n }"}, {"sha": "4dfb64abbebe8d8edf090e23cb0003e86a4ceb95", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -250,9 +250,6 @@ pre.rust .self {\n pre.rust .attribute {\n \tcolor: #e6e1cf;\n }\n-pre.rust .attribute .ident {\n-\tcolor: #e6e1cf;\n-}\n \n .example-wrap > pre.line-number {\n \tcolor: #5c67736e;\n@@ -398,8 +395,7 @@ pre.rust .comment {}\n .block a.current.method,.content span.tymethod,.content a.tymethod,.block a.current.tymethod,\n .content .fnname {}\n pre.rust .kw {}\n-pre.rust .self,pre.rust .bool-val,pre.rust .prelude-val,pre.rust .attribute,\n-pre.rust .attribute .ident {}\n+pre.rust .self,pre.rust .bool-val,pre.rust .prelude-val,pre.rust .attribute {}\n .content span.foreigntype,.content a.foreigntype,.block a.current.foreigntype {}\n pre.rust .doccomment {}\n .stab.deprecated {}"}, {"sha": "39f83c998082700c1a66db52569266fec9c30298", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -202,7 +202,7 @@ pre.rust .kw { color: #ab8ac1; }\n pre.rust .kw-2, pre.rust .prelude-ty { color: #769acb; }\n pre.rust .number, pre.rust .string { color: #83a300; }\n pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .attribute, pre.rust .attribute .ident { color: #ee6868; }\n+pre.rust .attribute { color: #ee6868; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n pre.rust .lifetime { color: #d97f26; }\n pre.rust .question-mark {"}, {"sha": "5698088c790bba5e87a773428668f5fab2d4a79b", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -184,7 +184,7 @@ pre.rust .kw { color: #8959A8; }\n pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n pre.rust .number, pre.rust .string { color: #718C00; }\n pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n+pre.rust .attribute { color: #C82829; }\n pre.rust .comment { color: #8E908C; }\n pre.rust .doccomment { color: #4D4D4C; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }"}, {"sha": "b919935e4b47a3b73ed5fb82b5db4932720a200d", "filename": "src/test/rustdoc/issue-41783.codeblock.html", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fissue-41783.codeblock.html", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fissue-41783.codeblock.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.codeblock.html?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -0,0 +1,5 @@\n+<code># single\n+## double\n+### triple\n+<span class=\"attribute\">#[outer]</span>\n+<span class=\"attribute\">#![inner]</span></code>\n\\ No newline at end of file"}, {"sha": "d67716028799b6e8f5785ebe1b5582d13689830f", "filename": "src/test/rustdoc/issue-41783.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.rs?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -1,11 +1,9 @@\n // @has issue_41783/struct.Foo.html\n // @!hasraw - 'space'\n // @!hasraw - 'comment'\n-// @hasraw - '# <span class=\"ident\">single'\n-// @hasraw - '## <span class=\"ident\">double</span>'\n-// @hasraw - '### <span class=\"ident\">triple</span>'\n-// @hasraw - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n-// @hasraw - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n+// @hasraw - '<span class=\"attribute\">#[outer]</span>'\n+// @hasraw - '<span class=\"attribute\">#![inner]</span>'\n+// @snapshot 'codeblock' - '//*[@class=\"rustdoc-toggle top-doc\"]/*[@class=\"docblock\"]//pre/code'\n \n /// ```no_run\n /// # # space"}, {"sha": "96f4126c7c277f06e3e450eaa99cf2e6b3e20667", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801821d1560f84e4716fcbd9244ec959320a13d5/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=801821d1560f84e4716fcbd9244ec959320a13d5", "patch": "@@ -5,14 +5,12 @@\n \n // @has 'foo/macro.todo.html'\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n-// @has - '//span[@class=\"ident\"]' 'todo'\n+// @hasraw - ' todo {'\n \n // @hasraw - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n-// @hasraw - ':'\n-// @has - '//span[@class=\"ident\"]' 'tt'\n-// @hasraw - ')+'\n+// @hasraw - ':tt)+'\n // @hasraw - ') =&gt; { ... }; }'\n pub use std::todo;\n "}]}