{"sha": "9053fdd411e81910a86b68f0a1c3b3ca084bff62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNTNmZGQ0MTFlODE5MTBhODZiNjhmMGExYzNiM2NhMDg0YmZmNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T15:08:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T15:08:08Z"}, "message": "Auto merge of #46349 - estebank:highlight-ref, r=arielb1\n\nOn type mismatch error highlight `&` when type matches\n\nWhen the only difference between the two types in a type error is that\none is a reference to the other type (`T` vs `&T`) or both are\nreferences differing only in their mutability (`&T` vs `&mut T`), don't\nhighlight the type (`T`).", "tree": {"sha": "6fa8b0cbbcdad9c8c4bd5bf5bdbcdb05153318c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa8b0cbbcdad9c8c4bd5bf5bdbcdb05153318c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9053fdd411e81910a86b68f0a1c3b3ca084bff62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9053fdd411e81910a86b68f0a1c3b3ca084bff62", "html_url": "https://github.com/rust-lang/rust/commit/9053fdd411e81910a86b68f0a1c3b3ca084bff62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9053fdd411e81910a86b68f0a1c3b3ca084bff62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a649872a917068951228192b7e14626bd7bd540", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a649872a917068951228192b7e14626bd7bd540", "html_url": "https://github.com/rust-lang/rust/commit/7a649872a917068951228192b7e14626bd7bd540"}, {"sha": "02808f1e9e5315addbc3c3fa3f12116d366323b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/02808f1e9e5315addbc3c3fa3f12116d366323b9", "html_url": "https://github.com/rust-lang/rust/commit/02808f1e9e5315addbc3c3fa3f12116d366323b9"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "514b29120a96aa438897ec84ebf01a707528d287", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9053fdd411e81910a86b68f0a1c3b3ca084bff62/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053fdd411e81910a86b68f0a1c3b3ca084bff62/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9053fdd411e81910a86b68f0a1c3b3ca084bff62", "patch": "@@ -555,6 +555,39 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>)\n         -> (DiagnosticStyledString, DiagnosticStyledString)\n     {\n+        fn equals<'tcx>(a: &Ty<'tcx>, b: &Ty<'tcx>) -> bool {\n+            match (&a.sty, &b.sty) {\n+                (a, b) if *a == *b => true,\n+                (&ty::TyInt(_), &ty::TyInfer(ty::InferTy::IntVar(_))) |\n+                (&ty::TyInfer(ty::InferTy::IntVar(_)), &ty::TyInt(_)) |\n+                (&ty::TyInfer(ty::InferTy::IntVar(_)), &ty::TyInfer(ty::InferTy::IntVar(_))) |\n+                (&ty::TyFloat(_), &ty::TyInfer(ty::InferTy::FloatVar(_))) |\n+                (&ty::TyInfer(ty::InferTy::FloatVar(_)), &ty::TyFloat(_)) |\n+                (&ty::TyInfer(ty::InferTy::FloatVar(_)),\n+                 &ty::TyInfer(ty::InferTy::FloatVar(_))) => true,\n+                _ => false,\n+            }\n+        }\n+\n+        fn push_ty_ref<'tcx>(r: &ty::Region<'tcx>,\n+                             tnm: &ty::TypeAndMut<'tcx>,\n+                             s: &mut DiagnosticStyledString) {\n+            let r = &format!(\"{}\", r);\n+            s.push_highlighted(format!(\"&{}{}{}\",\n+                                       r,\n+                                       if r == \"\" {\n+                                           \"\"\n+                                       } else {\n+                                           \" \"\n+                                       },\n+                                       if tnm.mutbl == hir::MutMutable {\n+                                          \"mut \"\n+                                       } else {\n+                                           \"\"\n+                                       }));\n+            s.push_normal(format!(\"{}\", tnm.ty));\n+        }\n+\n         match (&t1.sty, &t2.sty) {\n             (&ty::TyAdt(def1, sub1), &ty::TyAdt(def2, sub2)) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n@@ -672,6 +705,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                      DiagnosticStyledString::highlighted(format!(\"{}\", t2)))\n                 }\n             }\n+\n+            // When finding T != &T, hightlight only the borrow\n+            (&ty::TyRef(r1, ref tnm1), _) if equals(&tnm1.ty, &t2) => {\n+                let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n+                push_ty_ref(&r1, tnm1, &mut values.0);\n+                values.1.push_normal(format!(\"{}\", t2));\n+                values\n+            }\n+            (_, &ty::TyRef(r2, ref tnm2)) if equals(&t1, &tnm2.ty) => {\n+                let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n+                values.0.push_normal(format!(\"{}\", t1));\n+                push_ty_ref(&r2, tnm2, &mut values.1);\n+                values\n+            }\n+\n+            // When encountering &T != &mut T, highlight only the borrow\n+            (&ty::TyRef(r1, ref tnm1), &ty::TyRef(r2, ref tnm2)) if equals(&tnm1.ty, &tnm2.ty) => {\n+                let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n+                push_ty_ref(&r1, tnm1, &mut values.0);\n+                push_ty_ref(&r2, tnm2, &mut values.1);\n+                values\n+            }\n+\n             _ => {\n                 if t1 == t2 {\n                     // The two types are the same, elide and don't highlight."}]}