{"sha": "094d61f079e5f06930e002da18f92dde5827154f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NGQ2MWYwNzllNWYwNjkzMGUwMDJkYTE4ZjkyZGRlNTgyNzE1NGY=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-21T10:05:19Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-21T10:05:19Z"}, "message": "Stop returning k from [T]::rotate", "tree": {"sha": "dd18701ea227cd26a0e0e1812103519bebf7809a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd18701ea227cd26a0e0e1812103519bebf7809a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094d61f079e5f06930e002da18f92dde5827154f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094d61f079e5f06930e002da18f92dde5827154f", "html_url": "https://github.com/rust-lang/rust/commit/094d61f079e5f06930e002da18f92dde5827154f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094d61f079e5f06930e002da18f92dde5827154f/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95db271db2be6b937ce81bdba08c79b724a0d878", "url": "https://api.github.com/repos/rust-lang/rust/commits/95db271db2be6b937ce81bdba08c79b724a0d878", "html_url": "https://github.com/rust-lang/rust/commit/95db271db2be6b937ce81bdba08c79b724a0d878"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "702f19976cd5e670d56297fc60db84c213bc8ff8", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=094d61f079e5f06930e002da18f92dde5827154f", "patch": "@@ -1342,14 +1342,12 @@ impl<T> [T] {\n     /// slice.  Equivalently, rotates the slice `mid` places to the left\n     /// or `k = self.len() - mid` places to the right.\n     ///\n-    /// Rotation by `mid` and rotation by `k` are inverse operations.\n-    /// The method returns `k`, which is also the new location of\n-    /// the formerly-first element.\n-    ///\n     /// This is a \"k-rotation\", a permutation in which item `i` moves to\n     /// position `i + k`, modulo the length of the slice.  See _Elements\n     /// of Programming_ [\u00a710.4][eop].\n     ///\n+    /// Rotation by `mid` and rotation by `k` are inverse operations.\n+    ///\n     /// [eop]: https://books.google.com/books?id=CO9ULZGINlsC&pg=PA178&q=k-rotation\n     ///\n     /// # Panics\n@@ -1368,8 +1366,10 @@ impl<T> [T] {\n     /// #![feature(slice_rotate)]\n     ///\n     /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n-    /// let k = a.rotate(2);\n+    /// let mid = 2;\n+    /// a.rotate(mid);\n     /// assert_eq!(&a, &[3, 4, 5, 6, 7, 1, 2]);\n+    /// let k = a.len() - mid;\n     /// a.rotate(k);\n     /// assert_eq!(&a, &[1, 2, 3, 4, 5, 6, 7]);\n     ///\n@@ -1388,8 +1388,8 @@ impl<T> [T] {\n     /// assert_eq!(&v, &[0, 3, 7, 4, 5, 6, 1, 2, 8, 9]);\n     /// ```\n     #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n-    pub fn rotate(&mut self, mid: usize) -> usize {\n-        core_slice::SliceExt::rotate(self, mid)\n+    pub fn rotate(&mut self, mid: usize) {\n+        core_slice::SliceExt::rotate(self, mid);\n     }\n \n     /// Copies the elements from `src` into `self`."}, {"sha": "7fa65a2144e9b47d1f3f093c04fa980bc6bf5596", "filename": "src/libcollections/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcollections%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcollections%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fslice.rs?ref=094d61f079e5f06930e002da18f92dde5827154f", "patch": "@@ -482,9 +482,8 @@ fn test_rotate() {\n \n     // happy path\n     v = (5..13).chain(0..5).collect();\n-    let k = v.rotate(8);\n+    v.rotate(8);\n     assert_eq!(v, expected);\n-    assert_eq!(k, 5);\n \n     let expected: Vec<_> = (0..1000).collect();\n "}, {"sha": "0c28f1f69dda00efb9596fb13e98a9ec5acdf59c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=094d61f079e5f06930e002da18f92dde5827154f", "patch": "@@ -204,7 +204,7 @@ pub trait SliceExt {\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     #[unstable(feature = \"slice_rotate\", issue = \"41891\")]\n-    fn rotate(&mut self, mid: usize) -> usize;\n+    fn rotate(&mut self, mid: usize);\n \n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     fn clone_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Clone;\n@@ -639,16 +639,14 @@ impl<T> SliceExt for [T] {\n         self.binary_search_by(|p| p.borrow().cmp(x))\n     }\n \n-    fn rotate(&mut self, mid: usize) -> usize {\n+    fn rotate(&mut self, mid: usize) {\n         assert!(mid <= self.len());\n         let k = self.len() - mid;\n \n         unsafe {\n             let p = self.as_mut_ptr();\n             rotate::ptr_rotate(mid, p.offset(mid as isize), k);\n         }\n-\n-        k\n     }\n \n     #[inline]"}, {"sha": "e5d6b53b570628b688e8e623a0b6052f5dab1f0d", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d61f079e5f06930e002da18f92dde5827154f/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=094d61f079e5f06930e002da18f92dde5827154f", "patch": "@@ -246,9 +246,9 @@ fn test_rotate() {\n         a[i] = i;\n     }\n \n-    let k = a.rotate(42);\n+    a.rotate(42);\n+    let k = N - 42;\n \n-    assert_eq!(k, N - 42);\n     for i in 0..N {\n         assert_eq!(a[(i+k)%N], i);\n     }"}]}