{"sha": "3bfcfd079d41ba73228d382677688cd3ce088545", "node_id": "C_kwDOAAsO6NoAKDNiZmNmZDA3OWQ0MWJhNzMyMjhkMzgyNjc3Njg4Y2QzY2UwODg1NDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T17:25:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T17:25:45Z"}, "message": "fix var equality issue with old canonicalizer", "tree": {"sha": "d707eaa498d124abcfe26f839a0cbe11cb360567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d707eaa498d124abcfe26f839a0cbe11cb360567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bfcfd079d41ba73228d382677688cd3ce088545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfcfd079d41ba73228d382677688cd3ce088545", "html_url": "https://github.com/rust-lang/rust/commit/3bfcfd079d41ba73228d382677688cd3ce088545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bfcfd079d41ba73228d382677688cd3ce088545/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d13454498cf422c95352e96c1459f6904acde7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d13454498cf422c95352e96c1459f6904acde7b", "html_url": "https://github.com/rust-lang/rust/commit/8d13454498cf422c95352e96c1459f6904acde7b"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "a29403cce2f95b100dc26d67d4582bda490c2484", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bfcfd079d41ba73228d382677688cd3ce088545/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfcfd079d41ba73228d382677688cd3ce088545/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=3bfcfd079d41ba73228d382677688cd3ce088545", "patch": "@@ -376,9 +376,18 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, mut t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            ty::Infer(ty::TyVar(vid)) => {\n+            ty::Infer(ty::TyVar(mut vid)) => {\n+                // We need to canonicalize the *root* of our ty var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_var(vid);\n+                if root_vid != vid {\n+                    t = self.infcx.tcx.mk_ty_var(root_vid);\n+                    vid = root_vid;\n+                }\n+\n                 debug!(\"canonical: type var found with vid {:?}\", vid);\n                 match self.infcx.probe_ty_var(vid) {\n                     // `t` could be a float / int variable; canonicalize that instead.\n@@ -469,9 +478,18 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+    fn fold_const(&mut self, mut ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         match ct.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+            ty::ConstKind::Infer(InferConst::Var(mut vid)) => {\n+                // We need to canonicalize the *root* of our const var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_const_var(vid);\n+                if root_vid != vid {\n+                    ct = self.infcx.tcx.mk_const(ty::InferConst::Var(root_vid), ct.ty());\n+                    vid = root_vid;\n+                }\n+\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n                 match self.infcx.probe_const_var(vid) {\n                     Ok(c) => {"}, {"sha": "981a8f45e4542f8f7b78cfdb704a7dcdf8151dba", "filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bfcfd079d41ba73228d382677688cd3ce088545/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfcfd079d41ba73228d382677688cd3ce088545/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs?ref=3bfcfd079d41ba73228d382677688cd3ce088545", "patch": "@@ -267,7 +267,6 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 // We need to canonicalize the *root* of our ty var.\n                 // This is so that our canonical response correctly reflects\n                 // any equated inference vars correctly!\n-\n                 let root_vid = self.infcx.root_var(vid);\n                 if root_vid != vid {\n                     t = self.infcx.tcx.mk_ty_var(root_vid);"}]}