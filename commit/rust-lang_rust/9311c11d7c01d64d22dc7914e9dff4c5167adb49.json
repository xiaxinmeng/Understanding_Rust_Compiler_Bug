{"sha": "9311c11d7c01d64d22dc7914e9dff4c5167adb49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTFjMTFkN2MwMWQ2NGQyMmRjNzkxNGU5ZGZmNGM1MTY3YWRiNDk=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-08-11T11:57:32Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-08-11T12:21:27Z"}, "message": "Fix sync fallout", "tree": {"sha": "94ced074f943c38ea5344833d311d6c3f468893b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ced074f943c38ea5344833d311d6c3f468893b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9311c11d7c01d64d22dc7914e9dff4c5167adb49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl8yjUcACgkQLO/Nsn7Q\nvnlfDA/7BCCzu1LeZ5Pkw7QE8uSwsD4EgjUzAzSYd6ZJc0dTWAvvMIkR7HUAintL\nIkUj3m/PeBLrSiBuoNTYHCeQnXz0OKqRiavurZeWrBOXjWPdy/h5jWU5hX0he4ry\nNboTIOfp4qRHsljXixg56PNjDC2A74dk9FKJRvIePB/aShGyzP1x0IiY0sjx1Ttk\nKdlcfX8MNGQxYKA41FgQ/6W9+EwH4TLBtmUq3aGtzNeQYRzA3bCTQ5ZS7SmVWNBo\nKSTGKtU/B+7lfFCiZqSDHRJzziK8RKjnVUqOYjxZ3MSELaElYEYEH7+ughAIL/o/\nYjqSyvO6AFUXwIXybPuSByCcsPYXhZEo4vdDobS0Kv7yEnK6ls6M5tBse2CGQpwW\nj8U9/nn4IzktqRYSnvm7xRheKQJtT92JtkSC/sa2axYf98s01/Lwr4tjpb4fU1il\ns5RGkiNDzAUrdDEdHFpDFLXNv5pA7naZtXuI9O/cFeyfVjzZ6spPy2gm6JZp/NjU\nSsXDKk0+ZL01oQFM2LBibrkIOWwdBHvl1cHcGC7kcvqMieFQk/XFapGRSRdTBCF6\nyrWJsSH3jilJWI+8oMJsfK6rYG7ZIvnbLtwW8qCj5CjJhle6oAV9c95db70xY6iX\nzQ5+UWH8nm1cM7j+SBaAVKrVWY9UljRUnwKDJ2rPg6dgWzaVp28=\n=pHN1\n-----END PGP SIGNATURE-----", "payload": "tree 94ced074f943c38ea5344833d311d6c3f468893b\nparent 9e73d3368041a74fac40328d91605364e0cedcd7\nauthor flip1995 <hello@philkrones.com> 1597147052 +0200\ncommitter flip1995 <hello@philkrones.com> 1597148487 +0200\n\nFix sync fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9311c11d7c01d64d22dc7914e9dff4c5167adb49", "html_url": "https://github.com/rust-lang/rust/commit/9311c11d7c01d64d22dc7914e9dff4c5167adb49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9311c11d7c01d64d22dc7914e9dff4c5167adb49/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e73d3368041a74fac40328d91605364e0cedcd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e73d3368041a74fac40328d91605364e0cedcd7", "html_url": "https://github.com/rust-lang/rust/commit/9e73d3368041a74fac40328d91605364e0cedcd7"}], "stats": {"total": 139, "additions": 59, "deletions": 80}, "files": [{"sha": "7b5e92eb5ee1b896882bdf6b6195e0dbc1636113", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9311c11d7c01d64d22dc7914e9dff4c5167adb49/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9311c11d7c01d64d22dc7914e9dff4c5167adb49/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=9311c11d7c01d64d22dc7914e9dff4c5167adb49", "patch": "@@ -61,12 +61,14 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     ///\n-    /// ```rust,ignore\n-    /// core::intrinsics::transmute::<*const [i32], *const [u16]>(p)\n+    /// ```rust\n+    /// # let p: *const [i32] = &[];\n+    /// unsafe { std::mem::transmute::<*const [i32], *const [u16]>(p) };\n     /// ```\n     /// Use instead:\n     /// ```rust\n-    /// p as *const [u16]\n+    /// # let p: *const [i32] = &[];\n+    /// p as *const [u16];\n     /// ```\n     pub TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     complexity,\n@@ -704,14 +706,14 @@ fn can_be_expressed_as_pointer_cast<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n ) -> bool {\n-    use CastKind::*;\n+    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n     matches!(\n         check_cast(cx, e, from_ty, to_ty),\n         Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n     )\n }\n \n-/// If a cast from from_ty to to_ty is valid, returns an Ok containing the kind of\n+/// If a cast from `from_ty` to `to_ty` is valid, returns an Ok containing the kind of\n /// the cast. In certain cases, including some invalid casts from array references\n /// to pointers, this may cause additional errors to be emitted and/or ICE error\n /// messages. This function will panic if that occurs."}, {"sha": "e662d608edf9d60b3be1058899ba8286a4b6d61a", "filename": "tests/compile-test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=9311c11d7c01d64d22dc7914e9dff4c5167adb49", "patch": "@@ -147,9 +147,6 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n }\n \n fn run_ui_cargo(config: &mut compiletest::Config) {\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n     fn run_tests(\n         config: &compiletest::Config,\n         filter: &Option<String>,\n@@ -217,6 +214,10 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n         Ok(result)\n     }\n \n+    if cargo::is_rustc_test_suite() {\n+        return;\n+    }\n+\n     config.mode = TestMode::Ui;\n     config.src_base = Path::new(\"tests\").join(\"ui-cargo\").canonicalize().unwrap();\n "}, {"sha": "b6f1e83181ccb4cb2bce5d89d5ec24df478fcdc5", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=9311c11d7c01d64d22dc7914e9dff4c5167adb49", "patch": "@@ -9,60 +9,48 @@\n \n use std::mem::{size_of, transmute};\n \n-// rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n+// rustc_typeck::check::cast contains documentation about when a cast `e as U` is\n // valid, which we quote from below.\n fn main() {\n     // We should see an error message for each transmute, and no error messages for\n     // the casts, since the casts are the recommended fixes.\n \n     // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n-    let _ptr_i32_transmute = unsafe {\n-        usize::MAX as *const i32\n-    };\n+    let _ptr_i32_transmute = unsafe { usize::MAX as *const i32 };\n     let ptr_i32 = usize::MAX as *const i32;\n \n     // e has type *T, U is *U_0, and either U_0: Sized ...\n-    let _ptr_i8_transmute = unsafe {\n-        ptr_i32 as *const i8\n-    };\n+    let _ptr_i8_transmute = unsafe { ptr_i32 as *const i8 };\n     let _ptr_i8 = ptr_i32 as *const i8;\n \n-    let slice_ptr = &[0,1,2,3] as *const [i32];\n+    let slice_ptr = &[0, 1, 2, 3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let _ptr_to_unsized_transmute = unsafe {\n-        slice_ptr as *const [u16]\n-    };\n+    let _ptr_to_unsized_transmute = unsafe { slice_ptr as *const [u16] };\n     let _ptr_to_unsized = slice_ptr as *const [u16];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n \n     // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n-    let _usize_from_int_ptr_transmute = unsafe {\n-        ptr_i32 as usize\n-    };\n+    let _usize_from_int_ptr_transmute = unsafe { ptr_i32 as usize };\n     let _usize_from_int_ptr = ptr_i32 as usize;\n \n-    let array_ref: &[i32; 4] = &[1,2,3,4];\n+    let array_ref: &[i32; 4] = &[1, 2, 3, 4];\n \n     // e has type &[T; n] and U is *const T; array-ptr-cast\n-    let _array_ptr_transmute = unsafe {\n-        array_ref as *const [i32; 4]\n-    };\n+    let _array_ptr_transmute = unsafe { array_ref as *const [i32; 4] };\n     let _array_ptr = array_ref as *const [i32; 4];\n \n-    fn foo(_: usize) -> u8 { 42 }\n+    fn foo(_: usize) -> u8 {\n+        42\n+    }\n \n     // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n-    let _usize_ptr_transmute = unsafe {\n-        foo as *const usize\n-    };\n+    let _usize_ptr_transmute = unsafe { foo as *const usize };\n     let _usize_ptr_transmute = foo as *const usize;\n \n     // e is a function pointer type and U is an integer; fptr-addr-cast\n-    let _usize_from_fn_ptr_transmute = unsafe {\n-        foo as usize\n-    };\n+    let _usize_from_fn_ptr_transmute = unsafe { foo as usize };\n     let _usize_from_fn_ptr = foo as *const usize;\n }\n "}, {"sha": "0205d1ece60d58c3e3fab1c55de5638b8f8011e6", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=9311c11d7c01d64d22dc7914e9dff4c5167adb49", "patch": "@@ -9,60 +9,48 @@\n \n use std::mem::{size_of, transmute};\n \n-// rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n+// rustc_typeck::check::cast contains documentation about when a cast `e as U` is\n // valid, which we quote from below.\n fn main() {\n     // We should see an error message for each transmute, and no error messages for\n     // the casts, since the casts are the recommended fixes.\n \n     // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n-    let _ptr_i32_transmute = unsafe {\n-        transmute::<usize, *const i32>(usize::MAX)\n-    };\n+    let _ptr_i32_transmute = unsafe { transmute::<usize, *const i32>(usize::MAX) };\n     let ptr_i32 = usize::MAX as *const i32;\n \n     // e has type *T, U is *U_0, and either U_0: Sized ...\n-    let _ptr_i8_transmute = unsafe {\n-        transmute::<*const i32, *const i8>(ptr_i32)\n-    };\n+    let _ptr_i8_transmute = unsafe { transmute::<*const i32, *const i8>(ptr_i32) };\n     let _ptr_i8 = ptr_i32 as *const i8;\n \n-    let slice_ptr = &[0,1,2,3] as *const [i32];\n+    let slice_ptr = &[0, 1, 2, 3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let _ptr_to_unsized_transmute = unsafe {\n-        transmute::<*const [i32], *const [u16]>(slice_ptr)\n-    };\n+    let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u16]>(slice_ptr) };\n     let _ptr_to_unsized = slice_ptr as *const [u16];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n \n     // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n-    let _usize_from_int_ptr_transmute = unsafe {\n-        transmute::<*const i32, usize>(ptr_i32)\n-    };\n+    let _usize_from_int_ptr_transmute = unsafe { transmute::<*const i32, usize>(ptr_i32) };\n     let _usize_from_int_ptr = ptr_i32 as usize;\n \n-    let array_ref: &[i32; 4] = &[1,2,3,4];\n+    let array_ref: &[i32; 4] = &[1, 2, 3, 4];\n \n     // e has type &[T; n] and U is *const T; array-ptr-cast\n-    let _array_ptr_transmute = unsafe {\n-        transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n-    };\n+    let _array_ptr_transmute = unsafe { transmute::<&[i32; 4], *const [i32; 4]>(array_ref) };\n     let _array_ptr = array_ref as *const [i32; 4];\n \n-    fn foo(_: usize) -> u8 { 42 }\n+    fn foo(_: usize) -> u8 {\n+        42\n+    }\n \n     // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n-    let _usize_ptr_transmute = unsafe {\n-        transmute::<fn(usize) -> u8, *const usize>(foo)\n-    };\n+    let _usize_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, *const usize>(foo) };\n     let _usize_ptr_transmute = foo as *const usize;\n \n     // e is a function pointer type and U is an integer; fptr-addr-cast\n-    let _usize_from_fn_ptr_transmute = unsafe {\n-        transmute::<fn(usize) -> u8, usize>(foo)\n-    };\n+    let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n     let _usize_from_fn_ptr = foo as *const usize;\n }\n "}, {"sha": "1157b179317e20e9725fe4ef403cd7e9bd320c9e", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9311c11d7c01d64d22dc7914e9dff4c5167adb49/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=9311c11d7c01d64d22dc7914e9dff4c5167adb49", "patch": "@@ -1,53 +1,53 @@\n error: transmute from an integer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:20:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:19:39\n    |\n-LL |         transmute::<usize, *const i32>(usize::MAX)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `usize::MAX as *const i32`\n+LL |     let _ptr_i32_transmute = unsafe { transmute::<usize, *const i32>(usize::MAX) };\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `usize::MAX as *const i32`\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:26:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:23:38\n    |\n-LL |         transmute::<*const i32, *const i8>(ptr_i32)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as *const i8`\n+LL |     let _ptr_i8_transmute = unsafe { transmute::<*const i32, *const i8>(ptr_i32) };\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as *const i8`\n    |\n    = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:34:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:29:46\n    |\n-LL |         transmute::<*const [i32], *const [u16]>(slice_ptr)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n+LL |     let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u16]>(slice_ptr) };\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n \n error: transmute from `*const i32` to `usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:42:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:35:50\n    |\n-LL |         transmute::<*const i32, usize>(ptr_i32)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as usize`\n+LL |     let _usize_from_int_ptr_transmute = unsafe { transmute::<*const i32, usize>(ptr_i32) };\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as usize`\n    |\n    = note: `-D clippy::transmutes-expressible-as-ptr-casts` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:50:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:41:41\n    |\n-LL |         transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n+LL |     let _array_ptr_transmute = unsafe { transmute::<&[i32; 4], *const [i32; 4]>(array_ref) };\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n \n error: transmute from `fn(usize) -> u8 {main::foo}` to `*const usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:58:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:49:41\n    |\n-LL |         transmute::<fn(usize) -> u8, *const usize>(foo)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n+LL |     let _usize_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, *const usize>(foo) };\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n \n error: transmute from `fn(usize) -> u8 {main::foo}` to `usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:64:9\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:53:49\n    |\n-LL |         transmute::<fn(usize) -> u8, usize>(foo)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n+LL |     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:77:14\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:65:14\n    |\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`"}]}