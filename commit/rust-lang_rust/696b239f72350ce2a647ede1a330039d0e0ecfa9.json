{"sha": "696b239f72350ce2a647ede1a330039d0e0ecfa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NmIyMzlmNzIzNTBjZTJhNjQ3ZWRlMWEzMzAwMzlkMGUwZWNmYTk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-10-19T13:38:11Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:12Z"}, "message": "Add `ptr::Pointee` trait (for all types) and `ptr::metadata` function\n\nRFC: https://github.com/rust-lang/rfcs/pull/2580", "tree": {"sha": "8092d539513e303265fcd90065a8291244c93863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8092d539513e303265fcd90065a8291244c93863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696b239f72350ce2a647ede1a330039d0e0ecfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696b239f72350ce2a647ede1a330039d0e0ecfa9", "html_url": "https://github.com/rust-lang/rust/commit/696b239f72350ce2a647ede1a330039d0e0ecfa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696b239f72350ce2a647ede1a330039d0e0ecfa9/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9503ea19edbf01b9435e80e17d60ce1b88390116", "url": "https://api.github.com/repos/rust-lang/rust/commits/9503ea19edbf01b9435e80e17d60ce1b88390116", "html_url": "https://github.com/rust-lang/rust/commit/9503ea19edbf01b9435e80e17d60ce1b88390116"}], "stats": {"total": 359, "additions": 349, "deletions": 10}, "files": [{"sha": "27a3210c5ce9dd8b900b1f71ad944fa96ae59b71", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -201,6 +201,10 @@ language_item_table! {\n     // The associated item of `trait DiscriminantKind`.\n     Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy;\n \n+    PointeeTrait,            sym::pointee_trait,       pointee_trait,              Target::Trait;\n+    Metadata,                sym::metadata_type,       metadata_type,              Target::AssocTy;\n+    DynMetadata,             sym::dyn_metadata,        dyn_metadata,               Target::Struct;\n+\n     Freeze,                  sym::freeze,              freeze_trait,               Target::Trait;\n \n     Drop,                    sym::drop,                drop_trait,                 Target::Trait;"}, {"sha": "2084baa9c200bde2a3704f95ae702df7d7dd7cdf", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -476,6 +476,9 @@ pub enum ImplSource<'tcx, N> {\n     /// ImplSource for a builtin `DeterminantKind` trait implementation.\n     DiscriminantKind(ImplSourceDiscriminantKindData),\n \n+    /// ImplSource for a builtin `Pointee` trait implementation.\n+    Pointee(ImplSourcePointeeData),\n+\n     /// ImplSource automatically generated for a generator.\n     Generator(ImplSourceGeneratorData<'tcx, N>),\n \n@@ -494,7 +497,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Generator(c) => c.nested,\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n-            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => Vec::new(),\n+            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n+            | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n         }\n     }\n@@ -509,7 +513,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Generator(c) => &c.nested[..],\n             ImplSource::Object(d) => &d.nested[..],\n             ImplSource::FnPointer(d) => &d.nested[..],\n-            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => &[],\n+            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n+            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested[..],\n         }\n     }\n@@ -554,6 +559,9 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => {\n                 ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             }\n+            ImplSource::Pointee(ImplSourcePointeeData) => {\n+                ImplSource::Pointee(ImplSourcePointeeData)\n+            }\n             ImplSource::TraitAlias(d) => ImplSource::TraitAlias(ImplSourceTraitAliasData {\n                 alias_def_id: d.alias_def_id,\n                 substs: d.substs,\n@@ -632,6 +640,9 @@ pub struct ImplSourceFnPointerData<'tcx, N> {\n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub struct ImplSourceDiscriminantKindData;\n \n+#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+pub struct ImplSourcePointeeData;\n+\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,"}, {"sha": "ab085175762ab2409a2d4e05b630a5f2ea515ec7", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -125,6 +125,9 @@ pub enum SelectionCandidate<'tcx> {\n     /// Builtin implementation of `DiscriminantKind`.\n     DiscriminantKindCandidate,\n \n+    /// Builtin implementation of `Pointee`.\n+    PointeeCandidate,\n+\n     TraitAliasCandidate(DefId),\n \n     /// Matching `dyn Trait` with a supertrait of `Trait`. The index is the"}, {"sha": "4f978e63630440561e43fb5c0d4473f0c3d2a69a", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -19,6 +19,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n \n             super::ImplSource::DiscriminantKind(ref d) => write!(f, \"{:?}\", d),\n \n+            super::ImplSource::Pointee(ref d) => write!(f, \"{:?}\", d),\n+\n             super::ImplSource::Object(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::Param(ref n, ct) => {\n@@ -110,4 +112,5 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitAliasData<'tcx,\n TrivialTypeFoldableAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n+    super::ImplSourcePointeeData,\n }"}, {"sha": "3992e570cdc5890152b9bdf46c0dbc8725131900", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -2133,6 +2133,51 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// Returns the type of metadata for (potentially fat) pointers to this type.\n+    pub fn ptr_metadata_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+        // FIXME:\u00a0should this normalize?\n+        let tail = tcx.struct_tail_without_normalization(self);\n+        match tail.kind() {\n+            // Sized types\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+            | ty::Uint(_)\n+            | ty::Int(_)\n+            | ty::Bool\n+            | ty::Float(_)\n+            | ty::FnDef(..)\n+            | ty::FnPtr(_)\n+            | ty::RawPtr(..)\n+            | ty::Char\n+            | ty::Ref(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::Array(..)\n+            | ty::Closure(..)\n+            | ty::Never\n+            | ty::Error(_)\n+            | ty::Foreign(..)\n+            // If returned by `struct_tail_without_normalization` this is a unit struct\n+            // without any fields, or not a struct, and therefore is Sized.\n+            | ty::Adt(..)\n+            // If returned by `struct_tail_without_normalization` this is the empty tuple,\n+            // a.k.a. unit type, which is Sized\n+            | ty::Tuple(..) => tcx.types.unit,\n+\n+            ty::Str | ty::Slice(_) => tcx.types.usize,\n+            ty::Dynamic(..) => tcx.type_of(tcx.lang_items().dyn_metadata().unwrap()),\n+\n+            ty::Projection(_)\n+            | ty::Param(_)\n+            | ty::Opaque(..)\n+            | ty::Infer(ty::TyVar(_))\n+            | ty::Bound(..)\n+            | ty::Placeholder(..)\n+            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", tail)\n+            }\n+        }\n+    }\n+\n     /// When we create a closure, we record its kind (i.e., what trait\n     /// it implements) into its `ClosureSubsts` using a type\n     /// parameter. This is kind of a phantom type, except that the"}, {"sha": "d35d179a8dd138f9bc141227d2494dee1283502a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -476,6 +476,7 @@ symbols! {\n         dropck_eyepatch,\n         dropck_parametricity,\n         dylib,\n+        dyn_metadata,\n         dyn_trait,\n         edition_macro_pats,\n         eh_catch_typeinfo,\n@@ -710,6 +711,7 @@ symbols! {\n         memory,\n         message,\n         meta,\n+        metadata_type,\n         min_align_of,\n         min_align_of_val,\n         min_const_fn,\n@@ -832,6 +834,7 @@ symbols! {\n         plugin,\n         plugin_registrar,\n         plugins,\n+        pointee_trait,\n         pointer,\n         pointer_trait,\n         pointer_trait_fmt,"}, {"sha": "2819b60c144c6c152c3d843671d4361ba105a705", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -12,7 +12,7 @@ use super::SelectionContext;\n use super::SelectionError;\n use super::{\n     ImplSourceClosureData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n-    ImplSourceGeneratorData, ImplSourceUserDefinedData,\n+    ImplSourceGeneratorData, ImplSourcePointeeData, ImplSourceUserDefinedData,\n };\n use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n \n@@ -1069,6 +1069,51 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Error(_) => false,\n                 }\n             }\n+            super::ImplSource::Pointee(..) => {\n+                // While `Pointee` is automatically implemented for every type,\n+                // the concrete metadata type may not be known yet.\n+                //\n+                // Any type with multiple potential metadata types is therefore not eligible.\n+                let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n+\n+                // FIXME:\u00a0should this normalize?\n+                let tail = selcx.tcx().struct_tail_without_normalization(self_ty);\n+                match tail.kind() {\n+                    ty::Bool\n+                    | ty::Char\n+                    | ty::Int(_)\n+                    | ty::Uint(_)\n+                    | ty::Float(_)\n+                    | ty::Foreign(_)\n+                    | ty::Str\n+                    | ty::Array(..)\n+                    | ty::Slice(_)\n+                    | ty::RawPtr(..)\n+                    | ty::Ref(..)\n+                    | ty::FnDef(..)\n+                    | ty::FnPtr(..)\n+                    | ty::Dynamic(..)\n+                    | ty::Closure(..)\n+                    | ty::Generator(..)\n+                    | ty::GeneratorWitness(..)\n+                    | ty::Never\n+                    // If returned by `struct_tail_without_normalization` this is a unit struct\n+                    // without any fields, or not a struct, and therefore is Sized.\n+                    | ty::Adt(..)\n+                    // If returned by `struct_tail_without_normalization` this is the empty tuple.\n+                    | ty::Tuple(..)\n+                    // Integers and floats are always Sized, and so have unit type metadata.\n+                    | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n+\n+                    ty::Projection(..)\n+                    | ty::Opaque(..)\n+                    | ty::Param(..)\n+                    | ty::Bound(..)\n+                    | ty::Placeholder(..)\n+                    | ty::Infer(..)\n+                    | ty::Error(_) => false,\n+                }\n+            }\n             super::ImplSource::Param(..) => {\n                 // This case tell us nothing about the value of an\n                 // associated type. Consider:\n@@ -1169,6 +1214,7 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         super::ImplSource::DiscriminantKind(data) => {\n             confirm_discriminant_kind_candidate(selcx, obligation, data)\n         }\n+        super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),\n         super::ImplSource::Object(_)\n         | super::ImplSource::AutoImpl(..)\n         | super::ImplSource::Param(..)\n@@ -1256,6 +1302,26 @@ fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n }\n \n+fn confirm_pointee_candidate<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    obligation: &ProjectionTyObligation<'tcx>,\n+    _: ImplSourcePointeeData,\n+) -> Progress<'tcx> {\n+    let tcx = selcx.tcx();\n+\n+    let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n+    let substs = tcx.mk_substs([self_ty.into()].iter());\n+\n+    let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);\n+\n+    let predicate = ty::ProjectionPredicate {\n+        projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },\n+        ty: self_ty.ptr_metadata_ty(tcx),\n+    };\n+\n+    confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate), false)\n+}\n+\n fn confirm_fn_pointer_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "752f6a8debc9ef5c064f0d937cfff2ecbf26811f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -267,6 +267,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n             // `DiscriminantKind` is automatically implemented for every type.\n             candidates.vec.push(DiscriminantKindCandidate);\n+        } else if lang_items.pointee_trait() == Some(def_id) {\n+            // `Pointee` is automatically implemented for every type.\n+            candidates.vec.push(PointeeCandidate);\n         } else if lang_items.sized_trait() == Some(def_id) {\n             // Sized is never implementable by end-users, it is\n             // always automatically computed."}, {"sha": "272930f6bb9cabfddca72019b2da224ee2f44222", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -30,7 +30,8 @@ use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n-    ImplSourceObjectData, ImplSourceTraitAliasData, ImplSourceUserDefinedData,\n+    ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n+    ImplSourceUserDefinedData,\n };\n use crate::traits::{ObjectCastObligation, PredicateObligation, TraitObligation};\n use crate::traits::{Obligation, ObligationCause};\n@@ -99,6 +100,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData))\n             }\n \n+            PointeeCandidate => Ok(ImplSource::Pointee(ImplSourcePointeeData)),\n+\n             TraitAliasCandidate(alias_def_id) => {\n                 let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n                 Ok(ImplSource::TraitAlias(data))"}, {"sha": "49591df97758e64256f0d2092ed1ddd2562c2fcc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -1318,8 +1318,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let is_global =\n             |cand: &ty::PolyTraitRef<'_>| cand.is_global() && !cand.has_late_bound_regions();\n \n-        // (*) Prefer `BuiltinCandidate { has_nested: false }` and `DiscriminantKindCandidate`\n-        // to anything else.\n+        // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n+        // and `DiscriminantKindCandidate` to anything else.\n         //\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n@@ -1332,8 +1332,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // (*)\n-            (BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate, _) => true,\n-            (_, BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate) => false,\n+            (\n+                BuiltinCandidate { has_nested: false }\n+                | DiscriminantKindCandidate\n+                | PointeeCandidate,\n+                _,\n+            ) => true,\n+            (\n+                _,\n+                BuiltinCandidate { has_nested: false }\n+                | DiscriminantKindCandidate\n+                | PointeeCandidate,\n+            ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {\n                 if other.value == victim.value && victim.constness == Constness::NotConst {"}, {"sha": "be43c3a920ed2206c294f7aa965bfc09e62dadb6", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -274,7 +274,8 @@ fn resolve_associated_item<'tcx>(\n         traits::ImplSource::AutoImpl(..)\n         | traits::ImplSource::Param(..)\n         | traits::ImplSource::TraitAlias(..)\n-        | traits::ImplSource::DiscriminantKind(..) => None,\n+        | traits::ImplSource::DiscriminantKind(..)\n+        | traits::ImplSource::Pointee(..) => None,\n     })\n }\n "}, {"sha": "f6b77fb442f21ff76594f33541ff84b61daa8dd9", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -48,7 +48,20 @@ fn enforce_trait_manually_implementable(\n     let did = Some(trait_def_id);\n     let li = tcx.lang_items();\n \n-    // Disallow *all* explicit impls of `DiscriminantKind`, `Sized` and `Unsize` for now.\n+    // Disallow *all* explicit impls of `Pointee`, `DiscriminantKind`, `Sized` and `Unsize` for now.\n+    if did == li.pointee_trait() {\n+        let span = impl_header_span(tcx, impl_def_id);\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0322,\n+            \"explicit impls for the `Pointee` trait are not permitted\"\n+        )\n+        .span_label(span, \"impl of 'Pointee' not allowed\")\n+        .emit();\n+        return;\n+    }\n+\n     if did == li.discriminant_kind_trait() {\n         let span = impl_header_span(tcx, impl_def_id);\n         struct_span_err!("}, {"sha": "b835f78ca833980e050fbd944604c39ef589b5da", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -133,6 +133,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(str_split_as_str)]\n #![feature(str_split_inclusive_as_str)]\n+#![feature(trait_alias)]\n #![feature(transparent_unions)]\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]"}, {"sha": "416b1b860ce88bcae76e78af29c1a2ce16b7dae3", "filename": "library/core/src/ptr/metadata.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -0,0 +1,77 @@\n+#![unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+\n+use crate::fmt;\n+use crate::hash::Hash;\n+use crate::ptr::NonNull;\n+\n+/// FIXME docs\n+#[lang = \"pointee_trait\"]\n+pub trait Pointee {\n+    /// The type for metadata in pointers and references to `Self`.\n+    #[lang = \"metadata_type\"]\n+    // NOTE: Keep trait bounds in `static_assert_expected_bounds_for_metadata`\n+    // in `library/core/src/ptr/metadata.rs`\n+    // in sync with those here:\n+    type Metadata: Copy + Send + Sync + Ord + Hash + Unpin;\n+}\n+\n+/// Pointers to types implementing this trait alias are \u201cthin\u201d\n+///\n+/// ```rust\n+/// #![feature(ptr_metadata)]\n+///\n+/// fn this_never_panics<T: std::ptr::Thin>() {\n+///     assert_eq!(std::mem::size_of::<&T>(), std::mem::size_of::<usize>())\n+/// }\n+/// ```\n+#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+// NOTE: don\u2019t stabilize this before trait aliases are stable in the language?\n+pub trait Thin = Pointee<Metadata = ()>;\n+\n+/// Extract the metadata component of a pointer.\n+#[inline]\n+pub fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n+    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n+    // and PtrComponents<T> have the same memory layouts. Only std can make this\n+    // guarantee.\n+    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }\n+}\n+\n+#[repr(C)]\n+union PtrRepr<T: ?Sized> {\n+    const_ptr: *const T,\n+    components: PtrComponents<T>,\n+}\n+\n+#[repr(C)]\n+struct PtrComponents<T: ?Sized> {\n+    data_address: usize,\n+    metadata: <T as Pointee>::Metadata,\n+}\n+\n+// Manual impl needed to avoid `T: Copy` bound.\n+impl<T: ?Sized> Copy for PtrComponents<T> {}\n+\n+// Manual impl needed to avoid `T: Clone` bound.\n+impl<T: ?Sized> Clone for PtrComponents<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+/// The metadata for a `dyn SomeTrait` trait object type.\n+#[lang = \"dyn_metadata\"]\n+#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]\n+pub struct DynMetadata {\n+    #[allow(unused)]\n+    vtable_ptr: NonNull<()>,\n+}\n+\n+unsafe impl Send for DynMetadata {}\n+unsafe impl Sync for DynMetadata {}\n+\n+impl fmt::Debug for DynMetadata {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(\"DynMetadata { \u2026 }\")\n+    }\n+}"}, {"sha": "e0c1cd7aa394e0e34de00f96a833a7dc842f80a5", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -82,6 +82,12 @@ pub use crate::intrinsics::copy;\n #[doc(inline)]\n pub use crate::intrinsics::write_bytes;\n \n+#[cfg(not(bootstrap))]\n+mod metadata;\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+pub use metadata::{metadata, DynMetadata, Pointee, Thin};\n+\n mod non_null;\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub use non_null::NonNull;"}, {"sha": "f5035c9f16f9597dd12a1b33c030ea2556acf28d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -27,6 +27,7 @@\n #![feature(duration_saturating_ops)]\n #![feature(duration_zero)]\n #![feature(exact_size_is_empty)]\n+#![feature(extern_types)]\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n@@ -67,8 +68,10 @@\n #![feature(option_result_unwrap_unchecked)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n+#![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(unsized_tuple_coercion)]\n #![feature(int_bits_const)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]"}, {"sha": "03d2be725ef51272d363d44bb9a07c1c32ec3149", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696b239f72350ce2a647ede1a330039d0e0ecfa9/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=696b239f72350ce2a647ede1a330039d0e0ecfa9", "patch": "@@ -1,5 +1,6 @@\n use core::cell::RefCell;\n use core::ptr::*;\n+use std::fmt::Display;\n \n #[test]\n fn test_const_from_raw_parts() {\n@@ -413,3 +414,89 @@ fn offset_from() {\n         assert_eq!(ptr2.offset(-2), ptr1);\n     }\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn ptr_metadata() {\n+    struct Unit;\n+    struct Pair<A, B: ?Sized>(A, B);\n+    extern \"C\" {\n+        type Extern;\n+    }\n+    let () = metadata(&());\n+    let () = metadata(&Unit);\n+    let () = metadata(&4_u32);\n+    let () = metadata(&String::new());\n+    let () = metadata(&Some(4_u32));\n+    let () = metadata(&ptr_metadata);\n+    let () = metadata(&|| {});\n+    let () = metadata(&[4, 7]);\n+    let () = metadata(&(4, String::new()));\n+    let () = metadata(&Pair(4, String::new()));\n+    let () = metadata(0 as *const Extern);\n+    let () = metadata(0 as *const <&u32 as std::ops::Deref>::Target);\n+\n+    assert_eq!(metadata(\"foo\"), 3_usize);\n+    assert_eq!(metadata(&[4, 7][..]), 2_usize);\n+\n+    let dst_tuple: &(bool, [u8]) = &(true, [0x66, 0x6F, 0x6F]);\n+    let dst_struct: &Pair<bool, [u8]> = &Pair(true, [0x66, 0x6F, 0x6F]);\n+    assert_eq!(metadata(dst_tuple), 3_usize);\n+    assert_eq!(metadata(dst_struct), 3_usize);\n+    unsafe {\n+        let dst_tuple: &(bool, str) = std::mem::transmute(dst_tuple);\n+        let dst_struct: &Pair<bool, str> = std::mem::transmute(dst_struct);\n+        assert_eq!(&dst_tuple.1, \"foo\");\n+        assert_eq!(&dst_struct.1, \"foo\");\n+        assert_eq!(metadata(dst_tuple), 3_usize);\n+        assert_eq!(metadata(dst_struct), 3_usize);\n+    }\n+\n+    let vtable_1: DynMetadata = metadata(&4_u32 as &dyn Display);\n+    let vtable_2: DynMetadata = metadata(&(true, 7_u32) as &(bool, dyn Display));\n+    let vtable_3: DynMetadata = metadata(&Pair(true, 7_u32) as &Pair<bool, dyn Display>);\n+    let vtable_4: DynMetadata = metadata(&4_u16 as &dyn Display);\n+    unsafe {\n+        let address_1: usize = std::mem::transmute(vtable_1);\n+        let address_2: usize = std::mem::transmute(vtable_2);\n+        let address_3: usize = std::mem::transmute(vtable_3);\n+        let address_4: usize = std::mem::transmute(vtable_4);\n+        // Same erased type and same trait: same vtable pointer\n+        assert_eq!(address_1, address_2);\n+        assert_eq!(address_1, address_3);\n+        // Different erased type: different vtable pointer\n+        assert_ne!(address_1, address_4);\n+    }\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn ptr_metadata_bounds() {\n+    fn metadata_eq_method_address<T: ?Sized>() -> usize {\n+        // The `Metadata` associated type has an `Ord` bound, so this is valid:\n+        <<T as Pointee>::Metadata as PartialEq>::eq as usize\n+    }\n+    // \"Synthetic\" trait impls generated by the compiler like those of `Pointee`\n+    // are not checked for bounds of associated type.\n+    // So with a buggy libcore we could have both:\n+    // * `<dyn Display as Pointee>::Metadata == DynMetadata`\n+    // * `DynMetadata: !PartialEq`\n+    // \u2026 and cause an ICE here:\n+    metadata_eq_method_address::<dyn Display>();\n+\n+    // For this reason, let\u2019s check here that bounds are satisfied:\n+\n+    static_assert_expected_bounds_for_metadata::<()>();\n+    static_assert_expected_bounds_for_metadata::<usize>();\n+    static_assert_expected_bounds_for_metadata::<DynMetadata>();\n+    fn static_assert_associated_type<T: ?Sized>() {\n+        static_assert_expected_bounds_for_metadata::<<T as Pointee>::Metadata>()\n+    }\n+\n+    fn static_assert_expected_bounds_for_metadata<Meta>()\n+    where\n+        // Keep this in sync with the associated type in `library/core/src/ptr/metadata.rs`\n+        Meta: Copy + Send + Sync + Ord + std::hash::Hash + Unpin,\n+    {\n+    }\n+}"}]}