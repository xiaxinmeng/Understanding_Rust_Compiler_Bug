{"sha": "347b70901cdabcd78d2b0229c13c31b334b00617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0N2I3MDkwMWNkYWJjZDc4ZDJiMDIyOWMxM2MzMWIzMzRiMDA2MTc=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T12:25:31Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T12:35:12Z"}, "message": "Expanded and added links to std::net::{IpAddr,Ipv4Addr,Ipv6Addr} docs\n\nPart of #29363\nExpanded top-level documentation & linked to relevant IETF RFCs.\nAdded a bunch of links (to true/false/Ipv4Addr/etc.) throughout the docs.", "tree": {"sha": "cf4501ee47c8ac56c3a346e6593d17714ee1f2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf4501ee47c8ac56c3a346e6593d17714ee1f2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347b70901cdabcd78d2b0229c13c31b334b00617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347b70901cdabcd78d2b0229c13c31b334b00617", "html_url": "https://github.com/rust-lang/rust/commit/347b70901cdabcd78d2b0229c13c31b334b00617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347b70901cdabcd78d2b0229c13c31b334b00617/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5baba70d3adbb2a8ea436c6c89f21c1c6927b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5baba70d3adbb2a8ea436c6c89f21c1c6927b8", "html_url": "https://github.com/rust-lang/rust/commit/0d5baba70d3adbb2a8ea436c6c89f21c1c6927b8"}], "stats": {"total": 202, "additions": 160, "deletions": 42}, "files": [{"sha": "3e58a335470aeaad0e1dec7e2e7a008772c002cb", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 160, "deletions": 42, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/347b70901cdabcd78d2b0229c13c31b334b00617/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347b70901cdabcd78d2b0229c13c31b334b00617/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=347b70901cdabcd78d2b0229c13c31b334b00617", "patch": "@@ -21,44 +21,99 @@ use net::{hton, ntoh};\n use sys::net::netc as c;\n use sys_common::{AsInner, FromInner};\n \n-/// An IP address, either an IPv4 or IPv6 address.\n+/// Either an IPv4 address or an IPv6 address.\n ///\n-/// # Examples\n+/// This enum can contain either an [`Ipv4Addr`] or an [`Ipv6Addr`], see their\n+/// respective documentation for more details.\n ///\n-/// Constructing an IPv4 address:\n+/// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n+/// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n ///\n-/// ```\n-/// use std::net::{IpAddr, Ipv4Addr};\n+/// # Examples\n ///\n-/// IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1));\n /// ```\n+/// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n ///\n-/// Constructing an IPv6 address:\n+/// let localhost_v4 = IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1));\n+/// let localhost_v6 = IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n ///\n-/// ```\n-/// use std::net::{IpAddr, Ipv6Addr};\n+/// assert_eq!(\"127.0.0.1\".parse(), Ok(localhost_v4));\n+/// assert_eq!(\"::1\".parse(), Ok(localhost_v6));\n ///\n-/// IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+/// assert_eq!(localhost_v4.is_ipv6(), false);\n+/// assert_eq!(localhost_v4.is_ipv4(), true);\n /// ```\n #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n pub enum IpAddr {\n-    /// Representation of an IPv4 address.\n+    /// An IPv4 address.\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     V4(#[stable(feature = \"ip_addr\", since = \"1.7.0\")] Ipv4Addr),\n-    /// Representation of an IPv6 address.\n+    /// An IPv6 address.\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     V6(#[stable(feature = \"ip_addr\", since = \"1.7.0\")] Ipv6Addr),\n }\n \n-/// Representation of an IPv4 address.\n+/// An IPv4 address.\n+///\n+/// IPv4 addresses are defined as 32-bit integers in [IETF RFC 791].\n+/// They are usually represented as four octets.\n+///\n+/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n+///\n+/// [IETF RFC 791]: https://tools.ietf.org/html/rfc791\n+/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n+///\n+/// # Textual representation\n+///\n+/// `Ipv4Addr` provides a [`FromStr`] implementation. The four octets are in decimal\n+/// notation, divided by `.` (this is called \"dot-decimal notation\").\n+///\n+/// [`FromStr`]: ../../std/str/trait.FromStr.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::net::Ipv4Addr;\n+///\n+/// let localhost = Ipv4Addr::new(127, 0, 0, 1);\n+/// assert_eq!(\"127.0.0.1\".parse(), Ok(localhost));\n+/// assert_eq!(localhost.is_loopback(), true);\n+/// ```\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv4Addr {\n     inner: c::in_addr,\n }\n \n-/// Representation of an IPv6 address.\n+/// An IPv6 address.\n+///\n+/// IPv6 addresses are defined as 128-bit integers in [IETF RFC 4291].\n+/// They are usually represented as eight 16-bit segments.\n+///\n+/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n+///\n+/// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n+///\n+/// # Textual representation\n+///\n+/// `Ipv6Addr` provides a [`FromStr`] implementation. There are many ways to represent\n+/// an IPv6 address in text, but in general, each segments is written in hexadecimal \n+/// notation, and segments are separated by `:`. For more information, see\n+/// [IETF RFC 5952].\n+///\n+/// [`FromStr`]: ../../std/str/trait.FromStr.html\n+/// [IETF RFC 5952]: https://tools.ietf.org/html/rfc5952\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::net::Ipv6Addr;\n+///\n+/// let localhost = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n+/// assert_eq!(\"::1\".parse(), Ok(localhost));\n+/// assert_eq!(localhost.is_loopback(), true);\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv6Addr {\n@@ -78,10 +133,14 @@ pub enum Ipv6MulticastScope {\n }\n \n impl IpAddr {\n-    /// Returns true for the special 'unspecified' address ([IPv4], [IPv6]).\n+    /// Returns [`true`] for the special 'unspecified' address.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_unspecified`][IPv4] and\n+    /// [`Ipv6Addr::is_unspecified`][IPv6] for more details.\n     ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_unspecified\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_unspecified\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -99,10 +158,14 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this is a loopback address ([IPv4], [IPv6]).\n+    /// Returns [`true`] if this is a loopback address.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_loopback`][IPv4] and\n+    /// [`Ipv6Addr::is_loopback`][IPv6] for more details.\n     ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_loopback\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_loopback\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -120,10 +183,14 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if the address appears to be globally routable ([IPv4], [IPv6]).\n+    /// Returns [`true`] if the address appears to be globally routable.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_global`][IPv4] and\n+    /// [`Ipv6Addr::is_global`][IPv6] for more details.\n     ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_global\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_global\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -145,10 +212,14 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this is a multicast address ([IPv4], [IPv6]).\n+    /// Returns [`true`] if this is a multicast address.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_multicast`][IPv4] and\n+    /// [`Ipv6Addr::is_multicast`][IPv6] for more details.\n     ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_multicast\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_multicast\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -166,10 +237,14 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this address is in a range designated for documentation ([IPv4], [IPv6]).\n+    /// Returns [`true`] if this address is in a range designated for documentation.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_documentation`][IPv4] and\n+    /// [`Ipv6Addr::is_documentation`][IPv6] for more details.\n     ///\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_documentation\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_documentation\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -191,7 +266,13 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this address is a valid IPv4 address, false if it's a valid IPv6 address.\n+    /// Returns [`true`] if this address is an [IPv4 address] and [`false`] if it's an\n+    /// [IPv6 address].\n+    ///\n+    /// [`true`]: ../../std/primitive.bool.html\n+    /// [`false`]: ../../std/primitive.bool.html\n+    /// [IPv4 address]: #variant.V4\n+    /// [IPv6 address]: #variant.V6\n     ///\n     /// # Examples\n     ///\n@@ -212,7 +293,13 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this address is a valid IPv6 address, false if it's a valid IPv4 address.\n+    /// Returns [`true`] if this address is an [IPv6 address] and [`false`] if it's an\n+    /// [IPv4 address].\n+    ///\n+    /// [`true`]: ../../std/primitive.bool.html\n+    /// [`false`]: ../../std/primitive.bool.html\n+    /// [IPv4 address]: #variant.V4\n+    /// [IPv6 address]: #variant.V6\n     ///\n     /// # Examples\n     ///\n@@ -274,12 +361,13 @@ impl Ipv4Addr {\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }\n \n-    /// Returns true for the special 'unspecified' address (0.0.0.0).\n+    /// Returns [`true`] for the special 'unspecified' address (0.0.0.0).\n     ///\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n     ///\n     /// [ip7]: http://man7.org/linux/man-pages/man7/ip.7.html\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -294,11 +382,12 @@ impl Ipv4Addr {\n         self.inner.s_addr == 0\n     }\n \n-    /// Returns true if this is a loopback address (127.0.0.0/8).\n+    /// Returns [`true`] if this is a loopback address (127.0.0.0/8).\n     ///\n     /// This property is defined by [IETF RFC 1122].\n     ///\n     /// [IETF RFC 1122]: https://tools.ietf.org/html/rfc1122\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -313,7 +402,7 @@ impl Ipv4Addr {\n         self.octets()[0] == 127\n     }\n \n-    /// Returns true if this is a private address.\n+    /// Returns [`true`] if this is a private address.\n     ///\n     /// The private address ranges are defined in [IETF RFC 1918] and include:\n     ///\n@@ -322,6 +411,7 @@ impl Ipv4Addr {\n     ///  - 192.168.0.0/16\n     ///\n     /// [IETF RFC 1918]: https://tools.ietf.org/html/rfc1918\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -346,11 +436,12 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Returns true if the address is link-local (169.254.0.0/16).\n+    /// Returns [`true`] if the address is link-local (169.254.0.0/16).\n     ///\n     /// This property is defined by [IETF RFC 3927].\n     ///\n     /// [IETF RFC 3927]: https://tools.ietf.org/html/rfc3927\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -366,7 +457,7 @@ impl Ipv4Addr {\n         self.octets()[0] == 169 && self.octets()[1] == 254\n     }\n \n-    /// Returns true if the address appears to be globally routable.\n+    /// Returns [`true`] if the address appears to be globally routable.\n     /// See [iana-ipv4-special-registry][ipv4-sr].\n     ///\n     /// The following return false:\n@@ -379,6 +470,7 @@ impl Ipv4Addr {\n     /// - the unspecified address (0.0.0.0)\n     ///\n     /// [ipv4-sr]: http://goo.gl/RaZ7lg\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -400,12 +492,13 @@ impl Ipv4Addr {\n         !self.is_broadcast() && !self.is_documentation() && !self.is_unspecified()\n     }\n \n-    /// Returns true if this is a multicast address (224.0.0.0/4).\n+    /// Returns [`true`] if this is a multicast address (224.0.0.0/4).\n     ///\n     /// Multicast addresses have a most significant octet between 224 and 239,\n     /// and is defined by [IETF RFC 5771].\n     ///\n     /// [IETF RFC 5771]: https://tools.ietf.org/html/rfc5771\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -421,11 +514,12 @@ impl Ipv4Addr {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n-    /// Returns true if this is a broadcast address (255.255.255.255).\n+    /// Returns [`true`] if this is a broadcast address (255.255.255.255).\n     ///\n     /// A broadcast address has all octets set to 255 as defined in [IETF RFC 919].\n     ///\n     /// [IETF RFC 919]: https://tools.ietf.org/html/rfc919\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -441,7 +535,7 @@ impl Ipv4Addr {\n         self.octets()[2] == 255 && self.octets()[3] == 255\n     }\n \n-    /// Returns true if this address is in a range designated for documentation.\n+    /// Returns [`true`] if this address is in a range designated for documentation.\n     ///\n     /// This is defined in [IETF RFC 5737]:\n     ///\n@@ -450,6 +544,7 @@ impl Ipv4Addr {\n     /// - 203.0.113.0/24 (TEST-NET-3)\n     ///\n     /// [IETF RFC 5737]: https://tools.ietf.org/html/rfc5737\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -471,10 +566,12 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-compatible IPv6 address.\n+    /// Converts this address to an IPv4-compatible [IPv6 address].\n     ///\n     /// a.b.c.d becomes ::a.b.c.d\n     ///\n+    /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -490,10 +587,12 @@ impl Ipv4Addr {\n                       ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n     }\n \n-    /// Converts this address to an IPv4-mapped IPv6 address.\n+    /// Converts this address to an IPv4-mapped [IPv6 address].\n     ///\n     /// a.b.c.d becomes ::ffff:a.b.c.d\n     ///\n+    /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -717,11 +816,12 @@ impl Ipv6Addr {\n         ]\n     }\n \n-    /// Returns true for the special 'unspecified' address (::).\n+    /// Returns [`true`] for the special 'unspecified' address (::).\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -736,11 +836,12 @@ impl Ipv6Addr {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n     }\n \n-    /// Returns true if this is a loopback address (::1).\n+    /// Returns [`true`] if this is a loopback address (::1).\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -755,14 +856,17 @@ impl Ipv6Addr {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n     }\n \n-    /// Returns true if the address appears to be globally routable.\n+    /// Returns [`true`] if the address appears to be globally routable.\n     ///\n-    /// The following return false:\n+    /// The following return [`false`]:\n     ///\n     /// - the loopback address\n     /// - link-local, site-local, and unique local unicast addresses\n     /// - interface-, link-, realm-, admin- and site-local multicast addresses\n     ///\n+    /// [`true`]: ../../std/primitive.bool.html\n+    /// [`false`]: ../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -784,11 +888,12 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns true if this is a unique local address (fc00::/7).\n+    /// Returns [`true`] if this is a unique local address (fc00::/7).\n     ///\n     /// This property is defined in [IETF RFC 4193].\n     ///\n     /// [IETF RFC 4193]: https://tools.ietf.org/html/rfc4193\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -807,11 +912,12 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n-    /// Returns true if the address is unicast and link-local (fe80::/10).\n+    /// Returns [`true`] if the address is unicast and link-local (fe80::/10).\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -830,9 +936,11 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n-    /// Returns true if this is a deprecated unicast site-local address\n+    /// Returns [`true`] if this is a deprecated unicast site-local address\n     /// (fec0::/10).\n     ///\n+    /// [`true`]: ../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -850,12 +958,13 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n-    /// Returns true if this is an address reserved for documentation\n+    /// Returns [`true`] if this is an address reserved for documentation\n     /// (2001:db8::/32).\n     ///\n     /// This property is defined in [IETF RFC 3849].\n     ///\n     /// [IETF RFC 3849]: https://tools.ietf.org/html/rfc3849\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -874,7 +983,7 @@ impl Ipv6Addr {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n-    /// Returns true if the address is a globally routable unicast address.\n+    /// Returns [`true`] if the address is a globally routable unicast address.\n     ///\n     /// The following return false:\n     ///\n@@ -885,6 +994,8 @@ impl Ipv6Addr {\n     /// - the unspecified address\n     /// - the address range reserved for documentation\n     ///\n+    /// [`true`]: ../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -937,11 +1048,13 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns true if this is a multicast address (ff00::/8).\n+    /// Returns [`true`] if this is a multicast address (ff00::/8).\n     ///\n     /// This property is defined by [IETF RFC 4291].\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [`true`]: ../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -955,11 +1068,16 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n-    /// Converts this address to an IPv4 address. Returns None if this address is\n+    /// Converts this address to an [IPv4 address]. Returns [`None`] if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n     /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d\n     ///\n+    /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::net::{Ipv4Addr, Ipv6Addr};\n     ///"}]}