{"sha": "5e2e927e0107916b825b164c82be44877ac6ab54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMmU5MjdlMDEwNzkxNmI4MjViMTY0YzgyYmU0NDg3N2FjNmFiNTQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-22T05:13:42Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-22T05:13:42Z"}, "message": "Fix rebase fallout", "tree": {"sha": "8e6194f59d371ba3d5c30b03c3bc8602d3740165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6194f59d371ba3d5c30b03c3bc8602d3740165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2e927e0107916b825b164c82be44877ac6ab54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8XywYACgkQtAh+UQ6Y\nsWS1Kw/8ChuCGOkeRCvbgT1XE6Z8JV3GXnTKoeOs2MmoqRyn2f7l4SX0rraWDFCs\nOXMyv3Gb7qDxu8Statis2T8G5r/PAyq87IZj7NmZjucEiJQIs9ayBKFsGAPQFygP\nQ+2sUXHEiHCG5lhxiQDaqVCTswRyt9QWm89/VFJEzUJInL/E7D8q6UpdmGVx5AVv\nLo1uaHFxANqhWE3SUje+Vz+V3+MMG8/t8Mljo0kHSefB/whJI1+bp6u8IZYee+wJ\nfg3ygiQCQ5M1QZE08Eii99AANU1W9IeLaYuAptvNiAaJQhuiAXnb5Meb+3Sh+sEs\n2olL3V02UqePEWB8YL4wru7ejsgoo1KbV1tL8SzzvU5wKpthKD4BQOhchATLtFFw\nidElPDtTlIwnp0p12euslmwrgrTblkz883TDOpwj12HjZGta2RnVPxKItgqoEACy\nw/kBDzMcZKqjEmvsEoGxgVB0g7wjVtRPbusvDRYrghZ8axL+e98aUBUcJYor8sHq\n9MI6aEWYHm2GIKjBnpuBNmb7nvBPSipmGooPL+58C93SsmbaTIVTOOrBVPrALMe1\nza4o7P1kWLjFkHdM/ioCrYXBH+EVE7KPRg5xBZskxaQFW6QcrAgdt4fQ53iBQQev\ntdB5eDxkd78xfePXVp9r7OiJoNinARnYT5zAzL+44ku5cevExKQ=\n=+MzZ\n-----END PGP SIGNATURE-----", "payload": "tree 8e6194f59d371ba3d5c30b03c3bc8602d3740165\nparent 90aee14eb95ac0b9ddb7cf5db6d003155e94800c\nauthor Aaron Hill <aa1ronham@gmail.com> 1595394822 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1595394822 -0400\n\nFix rebase fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2e927e0107916b825b164c82be44877ac6ab54", "html_url": "https://github.com/rust-lang/rust/commit/5e2e927e0107916b825b164c82be44877ac6ab54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2e927e0107916b825b164c82be44877ac6ab54/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90aee14eb95ac0b9ddb7cf5db6d003155e94800c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90aee14eb95ac0b9ddb7cf5db6d003155e94800c", "html_url": "https://github.com/rust-lang/rust/commit/90aee14eb95ac0b9ddb7cf5db6d003155e94800c"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "c0b5693dc594e0586498b13fa5e1a1eb4d2700cd", "filename": "src/librustc_middle/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> Const<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> Option<u128> {\n         assert_eq!(self.ty, ty);\n-        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n+        let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n         // if `ty` does not depend on generic parameters, use an empty param_env\n         self.val.eval(tcx, param_env).try_to_bits(size)\n     }"}, {"sha": "e8a1e714a8f43885a9a5c65d39525fe3722930e5", "filename": "src/librustc_middle/ty/consts/kind.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -96,12 +96,16 @@ impl<'tcx> ConstKind<'tcx> {\n         if let ConstKind::Unevaluated(def, substs, promoted) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n-            let param_env_and_substs = param_env.with_reveal_all().and(substs);\n-\n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n             // also does later, but we want to do it before checking for\n             // inference variables.\n-            let param_env_and_substs = tcx.erase_regions(&param_env_and_substs);\n+            // Note that we erase regions *before* calling `with_reveal_all_normalized`,\n+            // so that we don't try to invoke this query with\n+            // any region variables.\n+            let param_env_and_substs = tcx\n+                .erase_regions(&param_env)\n+                .with_reveal_all_normalized(tcx)\n+                .and(tcx.erase_regions(&substs));\n \n             // HACK(eddyb) when the query key would contain inference variables,\n             // attempt using identity substs and `ParamEnv` instead, that will succeed"}, {"sha": "16471364b822e245f440933426be0c81897b189a", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -1822,7 +1822,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// All opaque types in the caller_bounds of the `ParamEnv`\n     /// will be normalized to their underlying types.\n     /// See PR #65989 and issue #65918 for more details\n-    pub fn with_reveal_all_normalized(mut self) -> Self {\n+    pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {\n         if self.packed_data & 1 == 1 {\n             return self;\n         }"}, {"sha": "db78fa535cf42f01131cb691e6fd01afa0e093ef", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -1163,6 +1163,6 @@ pub fn normalize_opaque_types(\n     val.fold_with(&mut visitor)\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { normalize_opaque_types, ..*providers }\n }"}, {"sha": "b8a74f09409ca9822470012995b55b06c2f28e58", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Normalize projections and things like that.\n         // FIXME: We need to reveal_all, as some optimizations change types in ways\n         // that require unfolding opaque types.\n-        let param_env = self.param_env.with_reveal_all();\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n         let src = self.tcx.normalize_erasing_regions(param_env, src);\n         let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n "}, {"sha": "55a6d3f76457e3567aab727b1e32ef2a96f296f5", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2e927e0107916b825b164c82be44877ac6ab54/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=5e2e927e0107916b825b164c82be44877ac6ab54", "patch": "@@ -82,8 +82,10 @@ impl LayoutTest<'tcx> {\n                         }\n \n                         sym::debug => {\n-                            let normalized_ty =\n-                                self.tcx.normalize_erasing_regions(param_env.with_reveal_all(), ty);\n+                            let normalized_ty = self.tcx.normalize_erasing_regions(\n+                                param_env.with_reveal_all_normalized(self.tcx),\n+                                ty,\n+                            );\n                             self.tcx.sess.span_err(\n                                 item.span,\n                                 &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),"}]}