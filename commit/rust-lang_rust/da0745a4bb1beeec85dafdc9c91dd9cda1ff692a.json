{"sha": "da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDc0NWE0YmIxYmVlZWM4NWRhZmRjOWM5MWRkOWNkYTFmZjY5MmE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-14T23:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T23:57:20Z"}, "message": "Rollup merge of #72173 - xliiv:54172-intra-for-trait-impl, r=GuillaumeGomez\n\nMake intra links work inside trait impl block\n\nCloses #54172", "tree": {"sha": "a546d2a8781b91df88a8744eaca46a640038194f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a546d2a8781b91df88a8744eaca46a640038194f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevdrhCRBK7hj4Ov3rIwAAdHIIAGbCrUg9rue7n5UAv+SLQNsY\nguXgJk6A7hmyc18Srll8tU/feK/sEFiFZDkFx9Xo6uIMm5EtX1VCcl0CKFdvTPyc\nUrpSFaOxfZDLZcM0fs3yStcOBPbUZK2i0l49kD686HMdJ5t0XQEoe43LyHtyabOg\nxhsuH01EKWgwsTCLeHUov1AquH6FioGBOcEJyDQDF8O91dnFghthjIDvrfaWlmqg\n4bZBgTrepHzDXKwlL8NW77yuWFechzTirG19cqOpStqHzvOjRO5etim9bTZ4UdRf\n9pQI1QXH9H/91HnqI3iPZe4SIHqohGEEGoMo52++7HtCCcLPYq9m9z62T5Wj/jE=\n=ASzH\n-----END PGP SIGNATURE-----\n", "payload": "tree a546d2a8781b91df88a8744eaca46a640038194f\nparent 77096880df3ac6f32d554e0eacea14967c1aeae0\nparent 617c7cd9fa9751375abbf1a43cfe29ffc19ee92b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589500640 +0200\ncommitter GitHub <noreply@github.com> 1589500640 +0200\n\nRollup merge of #72173 - xliiv:54172-intra-for-trait-impl, r=GuillaumeGomez\n\nMake intra links work inside trait impl block\n\nCloses #54172\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "html_url": "https://github.com/rust-lang/rust/commit/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77096880df3ac6f32d554e0eacea14967c1aeae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/77096880df3ac6f32d554e0eacea14967c1aeae0", "html_url": "https://github.com/rust-lang/rust/commit/77096880df3ac6f32d554e0eacea14967c1aeae0"}, {"sha": "617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "url": "https://api.github.com/repos/rust-lang/rust/commits/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b", "html_url": "https://github.com/rust-lang/rust/commit/617c7cd9fa9751375abbf1a43cfe29ffc19ee92b"}], "stats": {"total": 101, "additions": 90, "deletions": 11}, "files": [{"sha": "a3ef350a0487e7ab4060cb0e1499873390e1ab6a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "patch": "@@ -12,7 +12,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n+use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n \n use std::ops::Range;\n@@ -130,6 +131,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         current_item: &Option<String>,\n         parent_id: Option<hir::HirId>,\n         extra_fragment: &Option<String>,\n+        item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -230,16 +232,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias,\n                     did,\n                 ) => {\n-                    let item = cx\n-                        .tcx\n-                        .inherent_impls(did)\n-                        .iter()\n-                        .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n-                        .find(|item| item.ident.name == item_name);\n+                    // We need item's parent to know if it's\n+                    // trait impl or struct/enum/etc impl\n+                    let item_parent = item_opt\n+                        .and_then(|item| self.cx.as_local_hir_id(item.def_id))\n+                        .and_then(|item_hir| {\n+                            let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);\n+                            self.cx.tcx.hir().find(parent_hir)\n+                        });\n+                    let item = match item_parent {\n+                        Some(hir::Node::Item(hir::Item {\n+                            kind: hir::ItemKind::Impl { of_trait: Some(_), self_ty, .. },\n+                            ..\n+                        })) => {\n+                            // trait impl\n+                            cx.tcx\n+                                .associated_item_def_ids(self_ty.hir_id.owner)\n+                                .iter()\n+                                .map(|child| {\n+                                    let associated_item = cx.tcx.associated_item(*child);\n+                                    associated_item\n+                                })\n+                                .find(|child| child.ident.name == item_name)\n+                        }\n+                        _ => {\n+                            // struct/enum/etc. impl\n+                            cx.tcx\n+                                .inherent_impls(did)\n+                                .iter()\n+                                .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n+                                .find(|item| item.ident.name == item_name)\n+                        }\n+                    };\n+\n                     if let Some(item) = item {\n                         let out = match item.kind {\n                             ty::AssocKind::Fn if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n+                            ty::AssocKind::Type if ns == ValueNS => \"associatedtype\",\n                             _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n@@ -484,8 +514,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n                 match kind {\n                     Some(ns @ ValueNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -501,8 +537,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         }\n                     }\n                     Some(ns @ TypeNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -526,6 +568,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                None,\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);\n@@ -539,6 +582,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                Some(&item),\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);"}, {"sha": "fab8406d525e5f83ca18ccd341b735ae2ad05d08", "filename": "src/test/rustdoc/intra-link-trait-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0745a4bb1beeec85dafdc9c91dd9cda1ff692a/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs?ref=da0745a4bb1beeec85dafdc9c91dd9cda1ff692a", "patch": "@@ -0,0 +1,35 @@\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+pub struct MyStruct;\n+\n+impl MyTrait for MyStruct {\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: MyStruct::AssoType\n+    type AssoType = u32;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: MyStruct::ASSO_CONST\n+    const ASSO_CONST: i32 = 10;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.trait_fn'\n+\n+    /// [`trait_fn`]\n+    ///\n+    /// [`trait_fn`]: MyStruct::trait_fn\n+    fn trait_fn() { }\n+}\n+\n+pub trait MyTrait {\n+    type AssoType;\n+    const ASSO_CONST: i32 = 1;\n+    fn trait_fn();\n+}"}]}