{"sha": "a805606d45443badecb265588e1574148ce22ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MDU2MDZkNDU0NDNiYWRlY2IyNjU1ODhlMTU3NDE0OGNlMjJlZjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-22T06:52:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-22T06:52:53Z"}, "message": "malloc should return null for zst allocs", "tree": {"sha": "5c27135c9bb5f4c4d985804ff4b64ddbdd70f236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c27135c9bb5f4c4d985804ff4b64ddbdd70f236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a805606d45443badecb265588e1574148ce22ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a805606d45443badecb265588e1574148ce22ef9", "html_url": "https://github.com/rust-lang/rust/commit/a805606d45443badecb265588e1574148ce22ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a805606d45443badecb265588e1574148ce22ef9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a630677b01e881bf540a977daba12a7158ac162e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a630677b01e881bf540a977daba12a7158ac162e", "html_url": "https://github.com/rust-lang/rust/commit/a630677b01e881bf540a977daba12a7158ac162e"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "4aae47ba96c0f169690be33263b2d9241ef3f93f", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a805606d45443badecb265588e1574148ce22ef9/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805606d45443badecb265588e1574148ce22ef9/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=a805606d45443badecb265588e1574148ce22ef9", "patch": "@@ -561,14 +561,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match &link_name[..] {\n             \"malloc\" => {\n                 let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n-                let align = self.memory.pointer_size();\n-                let ptr = self.memory.allocate(size, align)?;\n-                self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n+                if size == 0 {\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    let align = self.memory.pointer_size();\n+                    let ptr = self.memory.allocate(size, align)?;\n+                    self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n+                }\n             }\n \n             \"free\" => {\n-                let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n-                self.memory.deallocate(ptr)?;\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                if !ptr.is_null() {\n+                    self.memory.deallocate(ptr.to_ptr()?)?;\n+                }\n             }\n \n             \"syscall\" => {"}]}