{"sha": "c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "node_id": "C_kwDOAAsO6NoAKGM3ZGUxYTE2Zjg5YjlhYTMyMDVmNTBjOWNmMmI5ZjY3OTJhYzZlNGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-11T14:48:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:09Z"}, "message": "Improve documentation and add some explanations in the code", "tree": {"sha": "ff2eec2b1abd1ecff49db3484260e9367d915845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2eec2b1abd1ecff49db3484260e9367d915845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "html_url": "https://github.com/rust-lang/rust/commit/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49297337b46eabef906a41f2c438bdd569b9227d", "url": "https://api.github.com/repos/rust-lang/rust/commits/49297337b46eabef906a41f2c438bdd569b9227d", "html_url": "https://github.com/rust-lang/rust/commit/49297337b46eabef906a41f2c438bdd569b9227d"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "43a59ed85e0dcab9099f8098d7b944ddee574c3e", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "patch": "@@ -309,45 +309,57 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     /**\n+     * This function parses the next query element until it finds `endChar`, calling `getNextElem`\n+     * to collect each element.\n+     *\n+     * If there is no `endChar`, this function will implicitly stop at the end without raising an\n+     * error.\n+     *\n      * @param {ParsedQuery} query\n      * @param {ParserState} parserState\n      * @param {Array<QueryElement>} elems - This is where the new {QueryElement} will be added.\n-     * @param {string} limit              - This function will stop when it'll encounter this\n+     * @param {string} endChar            - This function will stop when it'll encounter this\n      *                                      character.\n      */\n-    function getItemsBefore(query, parserState, elems, limit) {\n+    function getItemsBefore(query, parserState, elems, endChar) {\n         var turns = 0;\n         while (parserState.pos < parserState.length) {\n             var c = parserState.userQuery[parserState.pos];\n-            if (c === limit) {\n+            if (c === endChar) {\n                 break;\n-            } else if (c === \",\" && limit !== \"\" && turns > 0) {\n+            } else if (c === \",\" && endChar !== \"\" && turns > 0) {\n                 parserState.pos += 1;\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n                 throw new Error(\"Unexpected `::`: paths cannot start with `::`\");\n             } else if (c === \":\" || isEndCharacter(c)) {\n                 var extra = \"\";\n-                if (limit === \">\") {\n+                if (endChar === \">\") {\n                     extra = \"`<`\";\n-                } else if (limit === \"\") {\n+                } else if (endChar === \"\") {\n                     extra = \"`->`\";\n                 }\n                 throw new Error(\"Unexpected `\" + c + \"` after \" + extra);\n             }\n             var posBefore = parserState.pos;\n-            getNextElem(query, parserState, elems, limit === \">\");\n+            getNextElem(query, parserState, elems, endChar === \">\");\n             turns += 1;\n+            // This case can be encountered if `getNextElem` encounted a \"stop character\" right from\n+            // the start. For example if you have `,,`. In this case, we simply move up the current\n+            // position to continue the parsing.\n             if (posBefore === parserState.pos) {\n                 parserState.pos += 1;\n             }\n         }\n-        // We are either at the end of the string or on the \"limit\" character, let's move forward\n+        // We are either at the end of the string or on the `endChar`` character, let's move forward\n         // in any case.\n         parserState.pos += 1;\n     }\n \n     /**\n+     * Parses the provided `query` input to fill `parserState`. If it encounters an error while\n+     * parsing `query`, it'll throw an error.\n+     *\n      * @param {ParsedQuery} query\n      * @param {ParserState} parserState\n      */\n@@ -1194,7 +1206,9 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         /**\n-         * This function is called in case the query has more than one element.\n+         * This function is called in case the query has more than one element. In this case, it'll\n+         * try to match the items which validates all the elements. For `aa -> bb` will look for\n+         * functions which have a parameter `aa` and has `bb` in its returned values.\n          *\n          * @param {Row} row\n          * @param {integer} pos      - Position in the `searchIndex`."}, {"sha": "d4cd9facf17791029b12c85cddd756dd78a32578", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "patch": "@@ -4,7 +4,8 @@ const QUERY = [\n     'P \"P\"',\n     '\"p\" p',\n     '\"const\": p',\n-    \"<:a>\", \"<::a>\",\n+    \"<:a>\",\n+    \"<::a>\",\n     \"((a))\",\n     \"->,a\",\n     \"(p -> p\","}, {"sha": "5e5ba7cd9ac8f55c35c4525e182390592ae6c335", "filename": "src/test/rustdoc-js/generics.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.js?ref=c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "patch": "@@ -12,7 +12,7 @@ const QUERY = [\n \n const EXPECTED = [\n     {\n-        // \"R\"<P>\n+        // R<P>\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n         ],"}]}