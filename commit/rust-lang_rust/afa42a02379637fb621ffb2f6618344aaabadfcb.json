{"sha": "afa42a02379637fb621ffb2f6618344aaabadfcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTQyYTAyMzc5NjM3ZmI2MjFmZmIyZjY2MTgzNDRhYWFiYWRmY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-11T01:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-11T01:46:23Z"}, "message": "auto merge of #9785 : catamorphism/rust/remove-convenience-tool, r=pcwalton\n\nr? @pcwalton Sadly, there's a lack of resources for maintaining the `rust` tool,\r\nand we decided in the 2013-10-08 Rust team meeting that it's better\r\nto remove it altogether than to leave it in a broken state.\r\n\r\nThis deletion is without prejudice. If a person or people appear who\r\nwould like to maintain the tool, we will probably be happy to\r\nresurrect it!\r\n\r\nCloses #9775", "tree": {"sha": "723abb5839b0b3880ab1b0f7d8931309f4fea46b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723abb5839b0b3880ab1b0f7d8931309f4fea46b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa42a02379637fb621ffb2f6618344aaabadfcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa42a02379637fb621ffb2f6618344aaabadfcb", "html_url": "https://github.com/rust-lang/rust/commit/afa42a02379637fb621ffb2f6618344aaabadfcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa42a02379637fb621ffb2f6618344aaabadfcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1df8e35bb0185dc35f5e7976c0b46608c32404", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1df8e35bb0185dc35f5e7976c0b46608c32404", "html_url": "https://github.com/rust-lang/rust/commit/2e1df8e35bb0185dc35f5e7976c0b46608c32404"}, {"sha": "a9dddbacde8e204ee7485bc11b5c23a06d57430d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dddbacde8e204ee7485bc11b5c23a06d57430d", "html_url": "https://github.com/rust-lang/rust/commit/a9dddbacde8e204ee7485bc11b5c23a06d57430d"}], "stats": {"total": 443, "additions": 1, "deletions": 442}, "files": [{"sha": "3ad038e8358d08e021ab20428132d7497f09918c", "filename": "Makefile.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -222,7 +222,6 @@ CFG_LIBSYNTAX_$(1) :=$(call CFG_LIB_NAME_$(1),syntax)\n CFG_LIBRUSTPKG_$(1) :=$(call CFG_LIB_NAME_$(1),rustpkg)\n CFG_LIBRUSTDOC_$(1) :=$(call CFG_LIB_NAME_$(1),rustdoc)\n CFG_LIBRUSTI_$(1) :=$(call CFG_LIB_NAME_$(1),rusti)\n-CFG_LIBRUST_$(1) :=$(call CFG_LIB_NAME_$(1),rust)\n \n EXTRALIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),extra)\n STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n@@ -231,15 +230,13 @@ LIBSYNTAX_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),syntax)\n LIBRUSTPKG_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustpkg)\n LIBRUSTDOC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustdoc)\n LIBRUSTI_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rusti)\n-LIBRUST_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rust)\n EXTRALIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),extra)\n STDLIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),std)\n LIBRUSTC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustc)\n LIBSYNTAX_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),syntax)\n LIBRUSTPKG_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustpkg)\n LIBRUSTDOC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustdoc)\n LIBRUSTI_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rusti)\n-LIBRUST_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rust)\n \n endef\n \n@@ -447,19 +444,16 @@ CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustpkg$$(X_$(3)) \\\n \t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t$$(HBIN$(1)_H_$(3))/rusti$$(X_$(3)) \\\n-\t$$(HBIN$(1)_H_$(3))/rust$$(X_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTI_$(3)) \\\n-\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUST_$(3)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(2))\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed"}, {"sha": "66bebb7ebe38488e4c9a4deddc932cdfcb7bd573", "filename": "man/rust.1", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/2e1df8e35bb0185dc35f5e7976c0b46608c32404/man%2Frust.1", "raw_url": "https://github.com/rust-lang/rust/raw/2e1df8e35bb0185dc35f5e7976c0b46608c32404/man%2Frust.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frust.1?ref=2e1df8e35bb0185dc35f5e7976c0b46608c32404", "patch": "@@ -1,111 +0,0 @@\n-.TH RUST \"1\" \"July 2013\" \"rust 0.7\" \"User Commands\"\n-.SH NAME\n-rust \\- a front-end to the Rust toolchain\n-.SH SYNOPSIS\n-.B rust\n-[\\fICOMMAND\\fR] [\\fIOPTIONS\\fR] \\fIINPUT\\fR\n-\n-.SH DESCRIPTION\n-This tool is a front-end for the Rust language, available at\n-<\\fBhttps://www.rust-lang.org\\fR>. It provides commands to\n-run, test and package Rust programs.\n-\n-.SH COMMANDS\n-\n-.TP\n-\\fBbuild\\fR\n-compile rust source files\n-.TP\n-\\fBrun\\fR\n-build an executable, and run it\n-.TP\n-\\fBtest\\fR\n-build a test executable, and run it\n-.TP\n-\\fBdoc\\fR\n-generate documentation from doc comments\n-.TP\n-\\fBpkg\\fR\n-download, build, install rust packages\n-.TP\n-\\fBsketch\\fR\n-run a rust interpreter\n-.TP\n-\\fBhelp\\fR\n-show detailed usage of a command\n-\n-The build, run and test commands take the same parameters\n-as the rustc command.\n-\n-.SS \"BUILD COMMAND\"\n-\n-The \\fBbuild\\fR command is a shortcut for the \\fBrustc\\fR command line.\n-All options will be passed to the compiler verbatim. For example, to build\n-an optimised version:\n-\n-    $ rust build -O <filename>\n-\n-.SS \"RUN COMMAND\"\n-\n-The \\fBrun\\fR command is a shortcut for the \\fBrustc\\fR command line.\n-All options will be passed to the compiler verbatim, and if the compilation\n-is successful, the resultant executable will be invoked. For example, to\n-build and run an optimised version:\n-\n-    $ rust run -O <filename>\n-\n-.SS \"TEST COMMAND\"\n-\n-The \\fBtest\\fR command is a shortcut for the command line:\n-\n-    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n-\n-.SS \"DOC COMMAND\"\n-\n-The \\fBdoc\\fR command is an alias for the rustdoc program. It is equivalent to:\n-\n-    $ rustdoc [options] <cratefile>\n-\n-.SS \"PKG COMMAND\"\n-\n-The \\fBpkg\\fR command is an alias for the rustpkg program. It is equivalent to:\n-\n-    $ rustpkg [options] <cratefile>\n-\n-.SS \"SKETCH COMMAND\"\n-\n-The \\fBsketch\\fR command launches the \\fBrusti\\fR interactive shell.\n-\n-.SS \"HELP COMMAND\"\n-\n-The \\fBhelp\\fR command displays a summary of available commands (ie. this text).\n-\n-.SH \"EXAMPLES\"\n-\n-To build an executable (with a main function):\n-    $ rust build hello.rs\n-\n-To build a library from a source file:\n-    $ rust build --lib hello-lib.rs\n-\n-To build and run an executable:\n-    $ rust run hello.rs\n-\n-To build an executable with unit tests and execute the tests:\n-    $ rust test hello.rs\n-\n-To create a package \n-\n-.SH \"SEE ALSO\"\n-rustc, rustdoc, rustpkg, rusti\n-\n-.SH \"BUGS\"\n-See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n-\n-.SH \"AUTHOR\"\n-See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n-<\\fIgraydon@mozilla.com\\fR> is the project leader.\n-\n-.SH \"COPYRIGHT\"\n-This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n-file in the rust source distribution."}, {"sha": "d1e3afe98a0f70b3f894b90ac0c9df912a167304", "filename": "mk/clean.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -77,15 +77,13 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n@@ -112,15 +110,13 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTI_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUST_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a"}, {"sha": "ccb20a164d99659c3142b8486703745bdc8a5eb0", "filename": "mk/dist.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -30,7 +30,6 @@ PKG_FILES := \\\n       driver                                   \\\n       librustpkg                               \\\n       librusti                                 \\\n-      librust                                  \\\n       librustc                                 \\\n       compiletest                              \\\n       etc                                      \\"}, {"sha": "90cdb3939fc7f3aa6dcfabf064e159b1116643a8", "filename": "mk/install.mk", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -105,7 +105,6 @@ install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTPKG_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTDOC_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTI_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUST_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n \n endef\n@@ -140,18 +139,15 @@ install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rust$(X_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(EXTRALIB_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTI_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUST_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rust.1)\n \t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustc.1)\n \t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustdoc.1)\n \t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rusti.1)\n@@ -167,7 +163,6 @@ uninstall:\n \t$(Q)rm -f $(PHB)/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHB)/rusti$(X_$(CFG_BUILD_TRIPLE))\n-\t$(Q)rm -f $(PHB)/rust$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE))\n@@ -179,12 +174,10 @@ uninstall:\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTI_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUST_GLOB_$(CFG_BUILD_TRIPLE))) \\\n         ; \\\n         do rm -f $$i ; \\\n         done\n \t$(Q)rm -Rf $(PHL)/rustc\n-\t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rust.1\n \t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustc.1\n \t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustdoc.1\n \t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rusti.1"}, {"sha": "c4e3dbbf603334b2ea02f8198c2a0393d9260031", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -15,7 +15,7 @@\n \n # The names of crates that must be tested\n TEST_TARGET_CRATES = std extra\n-TEST_HOST_CRATES = rust rusti rustpkg rustc rustdoc syntax\n+TEST_HOST_CRATES = rusti rustpkg rustc rustdoc syntax\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n # Markdown files under doc/ that should have their code extracted and run\n@@ -387,16 +387,6 @@ $(3)/stage$(1)/test/rustitest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/stage$(1)/test/rusttest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n-\t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTPKG_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTDOC_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTI_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n $(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\"}, {"sha": "fa85e9e725a790c93a25a9c6927d1c4ab9e4d60e", "filename": "mk/tools.mk", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/afa42a02379637fb621ffb2f6618344aaabadfcb/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=afa42a02379637fb621ffb2f6618344aaabadfcb", "patch": "@@ -28,10 +28,6 @@ RUSTDOC_INPUTS := $(wildcard $(addprefix $(S)src/librustdoc/,        \\\n RUSTI_LIB := $(S)src/librusti/rusti.rs\n RUSTI_INPUTS := $(wildcard $(S)src/librusti/*.rs)\n \n-# Rust, the convenience tool\n-RUST_LIB := $(S)src/librust/rust.rs\n-RUST_INPUTS := $(wildcard $(S)src/librust/*.rs)\n-\n # FIXME: These are only built for the host arch. Eventually we'll\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N_TARGET\n@@ -97,27 +93,6 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4)):\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rusti -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)):\t\t\\\n-\t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\t\\\n-\t\t$$(SREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4))\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\t\t\\\n-\t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\n-$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4)):\t\t\t\\\n-\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)) \\\n-\t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rust -o $$@ $$<\n-\n endef\n \n define TOOLS_STAGE_N_HOST\n@@ -193,27 +168,6 @@ $$(HBIN$(2)_H_$(4))/rusti$$(X_$(4)):\t\t\t\t\\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(4)):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\\\n-\t\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)_$(4)) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\n-$$(HBIN$(2)_H_$(4))/rust$$(X_$(4)):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(4))\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\\\n-\t\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n endef\n \n $(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\"}, {"sha": "27951a241da35bd96299d3656de2f26e45afd90f", "filename": "src/librust/rust.rs", "status": "removed", "additions": 0, "deletions": 256, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/2e1df8e35bb0185dc35f5e7976c0b46608c32404/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1df8e35bb0185dc35f5e7976c0b46608c32404/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=2e1df8e35bb0185dc35f5e7976c0b46608c32404", "patch": "@@ -1,256 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// rust - central access to other rust tools\n-// FIXME #2238 Make commands run and test emit proper file endings on windows\n-// FIXME #2238 Make run only accept source that emits an executable\n-\n-#[link(name = \"rust\",\n-       vers = \"0.9-pre\",\n-       uuid = \"4a24da33-5cc8-4037-9352-2cbe9bd9d27c\",\n-       url = \"https://github.com/mozilla/rust/tree/master/src/rust\")];\n-\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n-\n-extern mod rustpkg;\n-extern mod rustdoc;\n-extern mod rusti;\n-extern mod rustc;\n-\n-use std::io;\n-use std::os;\n-use std::run;\n-\n-enum ValidUsage {\n-    Valid(int), Invalid\n-}\n-\n-impl ValidUsage {\n-    fn is_valid(&self) -> bool {\n-        match *self {\n-            Valid(_)   => true,\n-            Invalid    => false\n-        }\n-    }\n-}\n-\n-enum Action {\n-    Call(extern \"Rust\" fn(args: &[~str]) -> ValidUsage),\n-    CallMain(&'static str, extern \"Rust\" fn(&[~str]) -> int),\n-}\n-\n-enum UsageSource<'self> {\n-    UsgStr(&'self str),\n-    UsgCall(extern \"Rust\" fn()),\n-}\n-\n-struct Command<'self> {\n-    cmd: &'self str,\n-    action: Action,\n-    usage_line: &'self str,\n-    usage_full: UsageSource<'self>,\n-}\n-\n-static COMMANDS: &'static [Command<'static>] = &'static [\n-    Command {\n-        cmd: \"build\",\n-        action: CallMain(\"rustc\", rustc::main_args),\n-        usage_line: \"compile rust source files\",\n-        usage_full: UsgCall(rustc_help),\n-    },\n-    Command {\n-        cmd: \"run\",\n-        action: Call(cmd_run),\n-        usage_line: \"build an executable, and run it\",\n-        usage_full: UsgStr(\n-            \"The run command is an shortcut for the command line \\n\\\n-             \\\"rustc <filename> -o <filestem>~ && ./<filestem>~ [<arguments>...]\\\".\\\n-            \\n\\nUsage:\\trust run <filename> [<arguments>...]\"\n-        )\n-    },\n-    Command {\n-        cmd: \"test\",\n-        action: Call(cmd_test),\n-        usage_line: \"build a test executable, and run it\",\n-        usage_full: UsgStr(\n-            \"The test command is an shortcut for the command line \\n\\\n-            \\\"rustc --test <filename> -o <filestem>test~ && \\\n-            ./<filestem>test~ [<arguments>...]\\\"\\\n-            \\n\\nUsage:\\trust test <filename> [<arguments>...]\"\n-        )\n-    },\n-    Command {\n-        cmd: \"doc\",\n-        action: CallMain(\"rustdoc\", rustdoc::main_args),\n-        usage_line: \"generate documentation from doc comments\",\n-        usage_full: UsgCall(rustdoc_help),\n-    },\n-    Command {\n-        cmd: \"pkg\",\n-        action: CallMain(\"rustpkg\", rustpkg::main_args),\n-        usage_line: \"download, build, install rust packages\",\n-        usage_full: UsgCall(rustpkg::usage::general),\n-    },\n-    Command {\n-        cmd: \"sketch\",\n-        action: CallMain(\"rusti\", rusti::main_args),\n-        usage_line: \"run a rust interpreter\",\n-        usage_full: UsgStr(\"\\nUsage:\\trusti\"),\n-    },\n-    Command {\n-        cmd: \"help\",\n-        action: Call(cmd_help),\n-        usage_line: \"show detailed usage of a command\",\n-        usage_full: UsgStr(\n-            \"The help command displays the usage text of another command.\\n\\\n-            The text is either build in, or provided by the corresponding \\\n-            program.\\n\\nUsage:\\trust help <command>\"\n-        )\n-    }\n-];\n-\n-fn rustc_help() {\n-    rustc::usage(os::args()[0].clone())\n-}\n-\n-fn rustdoc_help() {\n-    rustdoc::usage(os::args()[0].clone())\n-}\n-\n-fn find_cmd(command_string: &str) -> Option<Command> {\n-    do COMMANDS.iter().find |command| {\n-        command.cmd == command_string\n-    }.map(|x| *x)\n-}\n-\n-fn cmd_help(args: &[~str]) -> ValidUsage {\n-    fn print_usage(command_string: ~str) -> ValidUsage {\n-        match find_cmd(command_string) {\n-            Some(command) => {\n-                match command.action {\n-                    CallMain(prog, _) => println!(\n-                        \"The {} command is an alias for the {} program.\",\n-                        command.cmd, prog),\n-                    _       => ()\n-                }\n-                match command.usage_full {\n-                    UsgStr(msg) => println!(\"{}\\n\", msg),\n-                    UsgCall(f)  => f(),\n-                }\n-                Valid(0)\n-            },\n-            None => Invalid\n-        }\n-    }\n-\n-    match args {\n-        [ref command_string] => print_usage((*command_string).clone()),\n-        _                    => Invalid\n-    }\n-}\n-\n-fn cmd_test(args: &[~str]) -> ValidUsage {\n-    match args {\n-        [ref filename, ..prog_args] => {\n-            let p = Path(*filename);\n-            let test_exec = p.filestem().unwrap() + \"test~\";\n-            invoke(\"rustc\", &[~\"--test\", filename.to_owned(),\n-                              ~\"-o\", test_exec.to_owned()], rustc::main_args);\n-            let exit_code = run::process_status(~\"./\" + test_exec, prog_args);\n-            Valid(exit_code)\n-        }\n-        _ => Invalid\n-    }\n-}\n-\n-fn cmd_run(args: &[~str]) -> ValidUsage {\n-    match args {\n-        [ref filename, ..prog_args] => {\n-            let p = Path(*filename);\n-            let exec = p.filestem().unwrap() + \"~\";\n-            invoke(\"rustc\", &[filename.to_owned(), ~\"-o\", exec.to_owned()],\n-                   rustc::main_args);\n-            let exit_code = run::process_status(~\"./\"+exec, prog_args);\n-            Valid(exit_code)\n-        }\n-        _ => Invalid\n-    }\n-}\n-\n-fn invoke(prog: &str, args: &[~str], f: &fn(&[~str]) -> int) -> int {\n-    let mut osargs = ~[prog.to_owned()];\n-    osargs.push_all_move(args.to_owned());\n-    f(osargs)\n-}\n-\n-fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n-    match command.action {\n-        Call(f) => f(args),\n-        CallMain(prog, f) => {\n-            Valid(invoke(prog, args, f))\n-        }\n-    }\n-}\n-\n-fn usage() {\n-    static INDENT: uint = 8;\n-\n-    io::print(\n-        \"The rust tool is a convenience for managing rust source code.\\n\\\n-        It acts as a shortcut for programs of the rust tool chain.\\n\\\n-        \\n\\\n-        Usage:\\trust <command> [arguments]\\n\\\n-        \\n\\\n-        The commands are:\\n\\\n-        \\n\"\n-    );\n-\n-    for command in COMMANDS.iter() {\n-        let padding = \" \".repeat(INDENT - command.cmd.len());\n-        println!(\"    {}{}{}\", command.cmd, padding, command.usage_line);\n-    }\n-\n-    io::print(\n-        \"\\n\\\n-        Use \\\"rust help <command>\\\" for more information about a command.\\n\\\n-        \\n\"\n-    );\n-\n-}\n-\n-pub fn main() {\n-    #[fixed_stack_segment]; #[inline(never)];\n-\n-    let os_args = os::args();\n-\n-    if (os_args.len() > 1 && (os_args[1] == ~\"-v\" || os_args[1] == ~\"--version\")) {\n-        rustc::version(os_args[0]);\n-        return;\n-    }\n-\n-    let args = os_args.tail();\n-\n-    if !args.is_empty() {\n-        let r = find_cmd(*args.head());\n-        for command in r.iter() {\n-            let result = do_command(command, args.tail());\n-            match result {\n-                Valid(exit_code) => {\n-                    os::set_exit_status(exit_code);\n-                    return;\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-\n-    usage();\n-}"}]}