{"sha": "1594e986ea76c53290f1d85118b65ba03137df8c", "node_id": "C_kwDOAAsO6NoAKDE1OTRlOTg2ZWE3NmM1MzI5MGYxZDg1MTE4YjY1YmEwMzEzN2RmOGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T11:33:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T11:33:47Z"}, "message": "Auto merge of #8763 - arieluy:manual_range_contains, r=xFrednet\n\nSupport negative ints in manual_range_contains\n\nfixes: #8721\nchangelog: Fixes issue where ranges containing ints with different signs would be\nincorrect due to comparing as unsigned.", "tree": {"sha": "e3d48b16a5500b505ec80ef63868b30fa2caf585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d48b16a5500b505ec80ef63868b30fa2caf585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1594e986ea76c53290f1d85118b65ba03137df8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1594e986ea76c53290f1d85118b65ba03137df8c", "html_url": "https://github.com/rust-lang/rust/commit/1594e986ea76c53290f1d85118b65ba03137df8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1594e986ea76c53290f1d85118b65ba03137df8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbe6e944d5082ff2acc0960a95adda9cdf59b6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe6e944d5082ff2acc0960a95adda9cdf59b6ec", "html_url": "https://github.com/rust-lang/rust/commit/bbe6e944d5082ff2acc0960a95adda9cdf59b6ec"}, {"sha": "2aa63c95bd1590d5286bc79358397608e8d91fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa63c95bd1590d5286bc79358397608e8d91fa4", "html_url": "https://github.com/rust-lang/rust/commit/2aa63c95bd1590d5286bc79358397608e8d91fa4"}], "stats": {"total": 111, "additions": 83, "deletions": 28}, "files": [{"sha": "f26f3650cb353c0f21d34baa4622a4fc4f73e669", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1594e986ea76c53290f1d85118b65ba03137df8c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594e986ea76c53290f1d85118b65ba03137df8c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=1594e986ea76c53290f1d85118b65ba03137df8c", "patch": "@@ -207,7 +207,13 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'_>, r: &Expr<'_>, expr: &Expr<'_>) {\n+fn check_possible_range_contains(\n+    cx: &LateContext<'_>,\n+    op: BinOpKind,\n+    left: &Expr<'_>,\n+    right: &Expr<'_>,\n+    expr: &Expr<'_>,\n+) {\n     if in_constant(cx, expr.hir_id) {\n         return;\n     }\n@@ -219,21 +225,19 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n         _ => return,\n     };\n     // value, name, order (higher/lower), inclusiveness\n-    if let (Some((lval, lid, name_span, lval_span, lord, linc)), Some((rval, rid, _, rval_span, rord, rinc))) =\n-        (check_range_bounds(cx, l), check_range_bounds(cx, r))\n-    {\n+    if let (Some(l), Some(r)) = (check_range_bounds(cx, left), check_range_bounds(cx, right)) {\n         // we only lint comparisons on the same name and with different\n         // direction\n-        if lid != rid || lord == rord {\n+        if l.id != r.id || l.ord == r.ord {\n             return;\n         }\n-        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(l), &lval, &rval);\n-        if combine_and && ord == Some(rord) {\n+        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(l.expr), &l.val, &r.val);\n+        if combine_and && ord == Some(r.ord) {\n             // order lower bound and upper bound\n-            let (l_span, u_span, l_inc, u_inc) = if rord == Ordering::Less {\n-                (lval_span, rval_span, linc, rinc)\n+            let (l_span, u_span, l_inc, u_inc) = if r.ord == Ordering::Less {\n+                (l.val_span, r.val_span, l.inc, r.inc)\n             } else {\n-                (rval_span, lval_span, rinc, linc)\n+                (r.val_span, l.val_span, r.inc, l.inc)\n             };\n             // we only lint inclusive lower bounds\n             if !l_inc {\n@@ -245,7 +249,7 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 (\"Range\", \"..\")\n             };\n             let mut applicability = Applicability::MachineApplicable;\n-            let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n+            let name = snippet_with_applicability(cx, l.name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n             let space = if lo.ends_with('.') { \" \" } else { \"\" };\n@@ -258,13 +262,13 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 format!(\"({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n                 applicability,\n             );\n-        } else if !combine_and && ord == Some(lord) {\n+        } else if !combine_and && ord == Some(l.ord) {\n             // `!_.contains(_)`\n             // order lower bound and upper bound\n-            let (l_span, u_span, l_inc, u_inc) = if lord == Ordering::Less {\n-                (lval_span, rval_span, linc, rinc)\n+            let (l_span, u_span, l_inc, u_inc) = if l.ord == Ordering::Less {\n+                (l.val_span, r.val_span, l.inc, r.inc)\n             } else {\n-                (rval_span, lval_span, rinc, linc)\n+                (r.val_span, l.val_span, r.inc, l.inc)\n             };\n             if l_inc {\n                 return;\n@@ -275,7 +279,7 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 (\"RangeInclusive\", \"..=\")\n             };\n             let mut applicability = Applicability::MachineApplicable;\n-            let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n+            let name = snippet_with_applicability(cx, l.name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n             let space = if lo.ends_with('.') { \" \" } else { \"\" };\n@@ -292,7 +296,20 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n     }\n }\n \n-fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant, HirId, Span, Span, Ordering, bool)> {\n+struct RangeBounds<'a> {\n+    val: Constant,\n+    expr: &'a Expr<'a>,\n+    id: HirId,\n+    name_span: Span,\n+    val_span: Span,\n+    ord: Ordering,\n+    inc: bool,\n+}\n+\n+// Takes a binary expression such as x <= 2 as input\n+// Breaks apart into various pieces, such as the value of the number,\n+// hir id of the variable, and direction/inclusiveness of the operator\n+fn check_range_bounds<'a>(cx: &'a LateContext<'_>, ex: &'a Expr<'_>) -> Option<RangeBounds<'a>> {\n     if let ExprKind::Binary(ref op, l, r) = ex.kind {\n         let (inclusive, ordering) = match op.node {\n             BinOpKind::Gt => (false, Ordering::Greater),\n@@ -303,11 +320,27 @@ fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant,\n         };\n         if let Some(id) = path_to_local(l) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), r) {\n-                return Some((c, id, l.span, r.span, ordering, inclusive));\n+                return Some(RangeBounds {\n+                    val: c,\n+                    expr: r,\n+                    id,\n+                    name_span: l.span,\n+                    val_span: r.span,\n+                    ord: ordering,\n+                    inc: inclusive,\n+                });\n             }\n         } else if let Some(id) = path_to_local(r) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), l) {\n-                return Some((c, id, r.span, l.span, ordering.reverse(), inclusive));\n+                return Some(RangeBounds {\n+                    val: c,\n+                    expr: l,\n+                    id,\n+                    name_span: r.span,\n+                    val_span: l.span,\n+                    ord: ordering.reverse(),\n+                    inc: inclusive,\n+                });\n             }\n         }\n     }"}, {"sha": "9785c0a75fb089862cd5b50bb855a2cf01b1b01a", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1594e986ea76c53290f1d85118b65ba03137df8c/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594e986ea76c53290f1d85118b65ba03137df8c/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=1594e986ea76c53290f1d85118b65ba03137df8c", "patch": "@@ -130,12 +130,10 @@ impl Constant {\n         match (left, right) {\n             (&Self::Str(ref ls), &Self::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Self::Char(ref l), &Self::Char(ref r)) => Some(l.cmp(r)),\n-            (&Self::Int(l), &Self::Int(r)) => {\n-                if let ty::Int(int_ty) = *cmp_type.kind() {\n-                    Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n-                } else {\n-                    Some(l.cmp(&r))\n-                }\n+            (&Self::Int(l), &Self::Int(r)) => match *cmp_type.kind() {\n+                ty::Int(int_ty) => Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty))),\n+                ty::Uint(_) => Some(l.cmp(&r)),\n+                _ => bug!(\"Not an int type\"),\n             },\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),"}, {"sha": "f497719971174a14bf03a97cf96734bbe12d168d", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=1594e986ea76c53290f1d85118b65ba03137df8c", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     (8..12).contains(&x);\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     (0. ..1.).contains(&y);\n     !(0. ..=1.).contains(&y);\n+\n+    // handle negatives #8721\n+    (-10..=10).contains(&x);\n+    x >= 10 && x <= -10;\n+    (-3. ..=3.).contains(&y);\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "9e2180b0c9944290a4fd872c8e5d7692f2680d23", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=1594e986ea76c53290f1d85118b65ba03137df8c", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     x >= 8 && x < 12;\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     y >= 0. && y < 1.;\n     y < 0. || y > 1.;\n+\n+    // handle negatives #8721\n+    x >= -10 && x <= 10;\n+    x >= 10 && x <= -10;\n+    y >= -3. && y <= 3.;\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "1817ee1715d1779c463c7c549147ba91bea489f8", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1594e986ea76c53290f1d85118b65ba03137df8c/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=1594e986ea76c53290f1d85118b65ba03137df8c", "patch": "@@ -84,5 +84,17 @@ error: manual `!RangeInclusive::contains` implementation\n LL |     y < 0. || y > 1.;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n \n-error: aborting due to 14 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:48:5\n+   |\n+LL |     x >= -10 && x <= 10;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-10..=10).contains(&x)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:50:5\n+   |\n+LL |     y >= -3. && y <= 3.;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n+\n+error: aborting due to 16 previous errors\n "}]}