{"sha": "d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZGM0NGE1ZTk4NTc4NjQ5MDVlMWNkYmY0MGFiOWFjNjE3ZjY1ZTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T21:26:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T21:59:40Z"}, "message": "Fill in forward searcher impl for char", "tree": {"sha": "6826201df3c364119f5b04199c612aae8ed656dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6826201df3c364119f5b04199c612aae8ed656dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "html_url": "https://github.com/rust-lang/rust/commit/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585ad9ff30e579e929bca2b1221367cc440aa377", "url": "https://api.github.com/repos/rust-lang/rust/commits/585ad9ff30e579e929bca2b1221367cc440aa377", "html_url": "https://github.com/rust-lang/rust/commit/585ad9ff30e579e929bca2b1221367cc440aa377"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "3f24374223cb6378bf1e48b8ae41c46637740372", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "patch": "@@ -19,6 +19,7 @@\n \n use cmp;\n use fmt;\n+use slice::memchr;\n use usize;\n \n // Pattern\n@@ -241,25 +242,66 @@ pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n /// Associated type for `<char as Pattern<'a>>::Searcher`.\n #[derive(Clone, Debug)]\n-pub struct CharSearcher<'a>(&'a str);\n+pub struct CharSearcher<'a> {\n+    haystack: &'a str,\n+    // invariant: `finger` must be a valid utf8 byte index of `haystack`\n+    finger: usize,\n+    needle: char,\n+    // For ascii chars\n+    // invariant: must be an ASCII byte (no high bit)\n+    single_byte: Option<u8>,\n+}\n \n unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn haystack(&self) -> &'a str {\n-        unimplemented!();\n+        self.haystack\n     }\n     #[inline]\n     fn next(&mut self) -> SearchStep {\n-        unimplemented!();\n+        let old_finger = self.finger;\n+        let slice = unsafe { self.haystack.get_unchecked(old_finger..) };\n+        let mut iter = slice.chars();\n+        let old_len = iter.iter.len();\n+        if let Some(ch) = iter.next() {\n+            // add byte offset of current character\n+            // without recalculating\n+            self.finger += iter.iter.len() - old_len;\n+            if ch == self.needle {\n+                SearchStep::Match(old_finger, self.finger)\n+            } else {\n+                SearchStep::Reject(old_finger, self.finger)\n+            }\n+        } else {\n+            SearchStep::Done\n+        }\n     }\n     #[inline]\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next_reject(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n+        if let Some(byte) = self.single_byte {\n+            let old_finger = self.finger;\n+            let slice = unsafe { self.haystack.get_unchecked(old_finger..) };\n+            let bytes = slice.as_bytes();\n+            if let Some(index) = memchr::memchr(byte, bytes) {\n+                // index is the index of a valid ASCII byte,\n+                // so we can add one to it\n+                self.finger += index + 1;\n+                Some((index, self.finger))\n+            } else {\n+                None\n+            }\n+        } else {\n+            loop {\n+                match self.next() {\n+                    SearchStep::Match(a, b) => break Some((a, b)),\n+                    SearchStep::Done => break None,\n+                    _ => continue,\n+                }\n+            }\n+        }\n     }\n+\n+    // let next_reject use the default implementation from the Searcher trait\n }\n \n unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n@@ -271,10 +313,8 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     fn next_match_back(&mut self) -> Option<(usize, usize)> {\n         unimplemented!();\n     }\n-    #[inline]\n-    fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n+\n+    // let next_reject_back use the default implementation from the Searcher trait\n }\n \n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n@@ -285,7 +325,19 @@ impl<'a> Pattern<'a> for char {\n \n     #[inline]\n     fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n-        CharSearcher(haystack)\n+        let single_byte = if self.len_utf8() == 1 {\n+            let mut storage = [0];\n+            self.encode_utf8(&mut storage);\n+            Some(storage[0])\n+        } else {\n+            None\n+        };\n+        CharSearcher {\n+            haystack,\n+            finger: 0,\n+            needle: self,\n+            single_byte,\n+        }\n     }\n \n     #[inline]"}]}