{"sha": "56a2e5dc22bfd0791b5e71dc89dde48fd3034e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTJlNWRjMjJiZmQwNzkxYjVlNzFkYzg5ZGRlNDhmZDMwMzRlMDM=", "commit": {"author": {"name": "Junyoung Cho", "email": "june0.cho@samsung.com", "date": "2013-05-27T01:40:07Z"}, "committer": {"name": "june0cho", "email": "june0.cho@samsung.com", "date": "2013-05-28T01:29:35Z"}, "message": "core::vec is missing methods for mutable slices", "tree": {"sha": "fb6e855ac3b5883055c960dba4887bb67d3c30dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6e855ac3b5883055c960dba4887bb67d3c30dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03", "html_url": "https://github.com/rust-lang/rust/commit/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03/comments", "author": {"login": "june0cho", "id": 3859124, "node_id": "MDQ6VXNlcjM4NTkxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3859124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/june0cho", "html_url": "https://github.com/june0cho", "followers_url": "https://api.github.com/users/june0cho/followers", "following_url": "https://api.github.com/users/june0cho/following{/other_user}", "gists_url": "https://api.github.com/users/june0cho/gists{/gist_id}", "starred_url": "https://api.github.com/users/june0cho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/june0cho/subscriptions", "organizations_url": "https://api.github.com/users/june0cho/orgs", "repos_url": "https://api.github.com/users/june0cho/repos", "events_url": "https://api.github.com/users/june0cho/events{/privacy}", "received_events_url": "https://api.github.com/users/june0cho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "june0cho", "id": 3859124, "node_id": "MDQ6VXNlcjM4NTkxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3859124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/june0cho", "html_url": "https://github.com/june0cho", "followers_url": "https://api.github.com/users/june0cho/followers", "following_url": "https://api.github.com/users/june0cho/following{/other_user}", "gists_url": "https://api.github.com/users/june0cho/gists{/gist_id}", "starred_url": "https://api.github.com/users/june0cho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/june0cho/subscriptions", "organizations_url": "https://api.github.com/users/june0cho/orgs", "repos_url": "https://api.github.com/users/june0cho/repos", "events_url": "https://api.github.com/users/june0cho/events{/privacy}", "received_events_url": "https://api.github.com/users/june0cho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d04ee805b96d34e7c5b316270a730fd9a0c537f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04ee805b96d34e7c5b316270a730fd9a0c537f", "html_url": "https://github.com/rust-lang/rust/commit/5d04ee805b96d34e7c5b316270a730fd9a0c537f"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "60fc9c07f3bfcd3369b1aaf08e9252768988eeb3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a2e5dc22bfd0791b5e71dc89dde48fd3034e03/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=56a2e5dc22bfd0791b5e71dc89dde48fd3034e03", "patch": "@@ -2347,12 +2347,19 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     }\n }\n \n-pub trait MutableVector<T> {\n+pub trait MutableVector<'self, T> {\n+    fn mut_slice(&mut self, start: uint, end: uint) -> &'self mut [T];\n+\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T;\n     unsafe fn unsafe_set(&self, index: uint, val: T);\n }\n \n-impl<'self,T> MutableVector<T> for &'self mut [T] {\n+impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n+    #[inline]\n+    fn mut_slice(&mut self, start: uint, end: uint) -> &'self mut [T] {\n+        mut_slice(*self, start, end)\n+    }\n+\n     #[inline(always)]\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T {\n         let pair_ptr: &(*mut T, uint) = transmute(self);"}]}