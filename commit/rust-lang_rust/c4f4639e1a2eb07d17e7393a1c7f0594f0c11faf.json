{"sha": "c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjQ2MzllMWEyZWIwN2QxN2U3MzkzYTFjN2YwNTk0ZjBjMTFmYWY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-23T14:30:54Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-28T13:21:27Z"}, "message": "Remove into_slices and its unsafe block", "tree": {"sha": "e6514bc6e5bcd97ac69516fdd3dfd83979e41f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6514bc6e5bcd97ac69516fdd3dfd83979e41f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "html_url": "https://github.com/rust-lang/rust/commit/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d69daccd1f04e42886d9aaf513f2691132d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d69daccd1f04e42886d9aaf513f2691132d17", "html_url": "https://github.com/rust-lang/rust/commit/1f5d69daccd1f04e42886d9aaf513f2691132d17"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "9352c5806a48f69cd05f34498524fa7bb858e0dd", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "patch": "@@ -466,12 +466,6 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     fn into_val_slice(self) -> &'a [V] {\n         unsafe { slice::from_raw_parts(MaybeUninit::first_ptr(&self.as_leaf().vals), self.len()) }\n     }\n-\n-    fn into_slices(self) -> (&'a [K], &'a [V]) {\n-        // SAFETY: equivalent to reborrow() except not requiring Type: 'a\n-        let k = unsafe { ptr::read(&self) };\n-        (k.into_key_slice(), self.into_val_slice())\n-    }\n }\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n@@ -980,10 +974,9 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marke\n \n impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {\n     pub fn into_kv(self) -> (&'a K, &'a V) {\n-        unsafe {\n-            let (keys, vals) = self.node.into_slices();\n-            (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx))\n-        }\n+        let keys = self.node.into_key_slice();\n+        let vals = self.node.into_val_slice();\n+        unsafe { (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx)) }\n     }\n }\n "}]}