{"sha": "c877989655d151972cd6a9c60450951a2efa0513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Nzc5ODk2NTVkMTUxOTcyY2Q2YTljNjA0NTA5NTFhMmVmYTA1MTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-06-25T02:00:03Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-06-25T02:38:01Z"}, "message": "Add some #[inline] attributes", "tree": {"sha": "0f29b9955b2a6ef18d589f04b4ad46edd8514010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f29b9955b2a6ef18d589f04b4ad46edd8514010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c877989655d151972cd6a9c60450951a2efa0513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c877989655d151972cd6a9c60450951a2efa0513", "html_url": "https://github.com/rust-lang/rust/commit/c877989655d151972cd6a9c60450951a2efa0513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c877989655d151972cd6a9c60450951a2efa0513/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e08576e4276a97b523c25bfd196d419c39c7b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e08576e4276a97b523c25bfd196d419c39c7b87", "html_url": "https://github.com/rust-lang/rust/commit/7e08576e4276a97b523c25bfd196d419c39c7b87"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "18c379f61f8d2f8aa6b787bcd66d516abd1c5831", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c877989655d151972cd6a9c60450951a2efa0513/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c877989655d151972cd6a9c60450951a2efa0513/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c877989655d151972cd6a9c60450951a2efa0513", "patch": "@@ -1131,6 +1131,7 @@ impl LocalInternedString {\n         }\n     }\n \n+    #[inline]\n     pub fn get(&self) -> &str {\n         // This returns a valid string since we ensure that `self` outlives the interner\n         // by creating the interner on a thread which outlives threads which can access it.\n@@ -1144,6 +1145,7 @@ impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n {\n+    #[inline]\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n@@ -1184,6 +1186,7 @@ impl !Sync for LocalInternedString {}\n \n impl std::ops::Deref for LocalInternedString {\n     type Target = str;\n+    #[inline]\n     fn deref(&self) -> &str { self.string }\n }\n "}]}