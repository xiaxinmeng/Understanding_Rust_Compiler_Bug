{"sha": "18d12844330df90ac4d309dc545902551634a251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDEyODQ0MzMwZGY5MGFjNGQzMDlkYzU0NTkwMjU1MTYzNGEyNTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T15:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T15:10:20Z"}, "message": "Rollup merge of #81629 - 1000teslas:issue-81365-fix, r=Aaron1011\n\nPoint out implicit deref coercions in borrow\n\nFixes #81365\n\n`@Aaron1011` I'm not sure why my code shows the note even in an implicit `Deref` call. See the output for `issue-81365-8.rs`.", "tree": {"sha": "6566d08ce177cea2e2b5c81c2f7305d86d549f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6566d08ce177cea2e2b5c81c2f7305d86d549f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d12844330df90ac4d309dc545902551634a251", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNRrcCRBK7hj4Ov3rIwAAdHIIALLWGmCVrWrZuhs2pZQ6cOfJ\nEBp50sOEtg48dBsCGPwjxtvnQiS2riWL1iKDtko1sOwYEYybHLBGYPBzK6OuDza3\namgSAnRnQ6Ql4cDIIHCLJNrfKtAqYEensDt1i0XtT5YIVO8fSGRgqkmzHgQDuSPy\n+7t+Zx3AkDA+wW0DvyKEUia4bdaSwBZ9kmJZnBleR8qYN9PfE7IZjx3cMO8fYQ5O\nRl2UWuoYr+vMjEWc8keeOo8yPdDFwpbckgp2lphMWV76iz8fgMJ1iIhK6Fk6uQCS\nH5jejTnh3g3VSj8CNr4Q+vM1EcQX8KHrgoW4JIcreb7CQSpFnDnQv3ov7h04LjE=\n=kSpk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6566d08ce177cea2e2b5c81c2f7305d86d549f67\nparent 446d4533e89db04f9568be4199e56b5fce0d176d\nparent 1847a6c0c100f75120d9f41cee22cbab503e081c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614093020 +0100\ncommitter GitHub <noreply@github.com> 1614093020 +0100\n\nRollup merge of #81629 - 1000teslas:issue-81365-fix, r=Aaron1011\n\nPoint out implicit deref coercions in borrow\n\nFixes #81365\n\n`@Aaron1011` I'm not sure why my code shows the note even in an implicit `Deref` call. See the output for `issue-81365-8.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d12844330df90ac4d309dc545902551634a251", "html_url": "https://github.com/rust-lang/rust/commit/18d12844330df90ac4d309dc545902551634a251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d12844330df90ac4d309dc545902551634a251/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}, {"sha": "1847a6c0c100f75120d9f41cee22cbab503e081c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1847a6c0c100f75120d9f41cee22cbab503e081c", "html_url": "https://github.com/rust-lang/rust/commit/1847a6c0c100f75120d9f41cee22cbab503e081c"}], "stats": {"total": 561, "additions": 557, "deletions": 4}, "files": [{"sha": "b0b58a8d003678219cf2c421884db091854a5d92", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -8,11 +8,10 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n-    ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n+    ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n-use rustc_span::source_map::DesugaringKind;\n-use rustc_span::Span;\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Instance, Ty};\n+use rustc_span::{source_map::DesugaringKind, symbol::sym, Span};\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n@@ -1543,9 +1542,43 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             None,\n         );\n \n+        self.explain_deref_coercion(loan, &mut err);\n+\n         err.buffer(&mut self.errors_buffer);\n     }\n \n+    fn explain_deref_coercion(&mut self, loan: &BorrowData<'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+        let tcx = self.infcx.tcx;\n+        if let (\n+            Some(Terminator { kind: TerminatorKind::Call { from_hir_call: false, .. }, .. }),\n+            Some((method_did, method_substs)),\n+        ) = (\n+            &self.body[loan.reserve_location.block].terminator,\n+            crate::util::find_self_call(\n+                tcx,\n+                self.body,\n+                loan.assigned_place.local,\n+                loan.reserve_location.block,\n+            ),\n+        ) {\n+            if tcx.is_diagnostic_item(sym::deref_method, method_did) {\n+                let deref_target =\n+                    tcx.get_diagnostic_item(sym::deref_target).and_then(|deref_target| {\n+                        Instance::resolve(tcx, self.param_env, deref_target, method_substs)\n+                            .transpose()\n+                    });\n+                if let Some(Ok(instance)) = deref_target {\n+                    let deref_target_ty = instance.ty(tcx, self.param_env);\n+                    err.note(&format!(\n+                        \"borrow occurs due to deref coercion to `{}`\",\n+                        deref_target_ty\n+                    ));\n+                    err.span_note(tcx.def_span(instance.def_id()), \"deref defined here\");\n+                }\n+            }\n+        }\n+    }\n+\n     /// Reports an illegal reassignment; for example, an assignment to\n     /// (part of) a non-`mut` local that occurs potentially after that\n     /// local has already been initialized. `place` is the path being"}, {"sha": "8e212a77016470c4c93ed4937d3944014ca4c6e9", "filename": "src/test/ui/borrowck/issue-81365-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef88d7f14a39bdd9f1321cc5eeb692528b4dbe2d", "filename": "src/test/ui/borrowck/issue-81365-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-1.rs:21:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+note: deref defined here\n+  --> $DIR/issue-81365-1.rs:12:5\n+   |\n+LL |     type Target = DerefTarget;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "7602e184a9f9d4f2a76e0fc28e8dc397547480a8", "filename": "src/test/ui/borrowck/issue-81365-10.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.deref().target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "891f70ed7f6b46b8a987f57897a3b3c9d3efd9ea", "filename": "src/test/ui/borrowck/issue-81365-10.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-10.rs:21:9\n+   |\n+LL |         let first = &self.deref().target_field;\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "6b558c65d3d614250c4c86fff089715ad9e2a185", "filename": "src/test/ui/borrowck/issue-81365-11.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,32 @@\n+use std::ops::{Deref, DerefMut};\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl DerefMut for Container {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &mut self.target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0770c136632db1f9603c2d6ef0e68ab8c6331a5e", "filename": "src/test/ui/borrowck/issue-81365-11.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-11.rs:27:9\n+   |\n+LL |         let first = &mut self.target_field;\n+   |                          ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "fbbdd93b97cc86b839c372ec1d84a82d608397d5", "filename": "src/test/ui/borrowck/issue-81365-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,30 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.container.target_field;\n+        self.container.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e71edb509649fde9a0be83ee79ef1ec51e63a28b", "filename": "src/test/ui/borrowck/issue-81365-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container.container_field` because it is borrowed\n+  --> $DIR/issue-81365-2.rs:25:9\n+   |\n+LL |         let first = &self.container.target_field;\n+   |                      -------------- borrow of `self.container.container_field` occurs here\n+LL |         self.container.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+note: deref defined here\n+  --> $DIR/issue-81365-2.rs:12:5\n+   |\n+LL |     type Target = DerefTarget;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "9a9e3a31358223da0329f5f350714a00dbb6fa94", "filename": "src/test/ui/borrowck/issue-81365-3.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,37 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+}\n+\n+impl Deref for Outer {\n+    type Target = Container;\n+    fn deref(&self) -> &Self::Target {\n+        &self.container\n+    }\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.container.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "70bb6bb93a94b17ddb84f933e0eb975646c4e9d0", "filename": "src/test/ui/borrowck/issue-81365-3.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container.container_field` because it is borrowed\n+  --> $DIR/issue-81365-3.rs:32:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.container.container_field` occurs here\n+LL |         self.container.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `Container`\n+note: deref defined here\n+  --> $DIR/issue-81365-3.rs:23:5\n+   |\n+LL |     type Target = Container;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "b2643eb3358ac58bfe3590a55e97d225c012907c", "filename": "src/test/ui/borrowck/issue-81365-4.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,38 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+    outer_field: bool,\n+}\n+\n+impl Deref for Outer {\n+    type Target = Container;\n+    fn deref(&self) -> &Self::Target {\n+        &self.container\n+    }\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.outer_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e714bb86d1cd2d666718c2cd2961f1ab8be22444", "filename": "src/test/ui/borrowck/issue-81365-4.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.outer_field` because it is borrowed\n+  --> $DIR/issue-81365-4.rs:33:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.outer_field` occurs here\n+LL |         self.outer_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.outer_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `Container`\n+note: deref defined here\n+  --> $DIR/issue-81365-4.rs:24:5\n+   |\n+LL |     type Target = Container;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "d36b79615e3ad1b90342d076270bba7e424e4c8c", "filename": "src/test/ui/borrowck/issue-81365-5.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,33 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+\n+impl DerefTarget {\n+    fn get(&self) -> &bool {\n+        &self.target_field\n+    }\n+}\n+\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = self.get();\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7c0e9f43bd0b087eda7e3cc52ac3910a81766ffc", "filename": "src/test/ui/borrowck/issue-81365-5.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-5.rs:28:9\n+   |\n+LL |         let first = self.get();\n+   |                     ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+note: deref defined here\n+  --> $DIR/issue-81365-5.rs:19:5\n+   |\n+LL |     type Target = DerefTarget;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "85ea77756b3bae25871a92fa74b785fc383f389f", "filename": "src/test/ui/borrowck/issue-81365-6.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,23 @@\n+use std::ops::Deref;\n+\n+struct Container {\n+    target: Vec<()>,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = [()];\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self[0];\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "85ed6acca3d41a6f68a543822f0d52680e9a9760", "filename": "src/test/ui/borrowck/issue-81365-6.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-6.rs:18:9\n+   |\n+LL |         let first = &self[0];\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `[()]`\n+note: deref defined here\n+  --> $DIR/issue-81365-6.rs:9:5\n+   |\n+LL |     type Target = [()];\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "cbf70f11a9acfaf0f42edad0d0778d3b62654fd7", "filename": "src/test/ui/borrowck/issue-81365-7.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,24 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+fn bad_borrow(c: &mut Container) {\n+    let first = &c.target_field;\n+    c.container_field = true; //~ ERROR E0506\n+    first;\n+}\n+\n+fn main() {}"}, {"sha": "506732ec0c5b491e53beac1d01442847903b3aee", "filename": "src/test/ui/borrowck/issue-81365-7.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `c.container_field` because it is borrowed\n+  --> $DIR/issue-81365-7.rs:20:5\n+   |\n+LL |     let first = &c.target_field;\n+   |                  - borrow of `c.container_field` occurs here\n+LL |     c.container_field = true;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `c.container_field` occurs here\n+LL |     first;\n+   |     ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+note: deref defined here\n+  --> $DIR/issue-81365-7.rs:12:5\n+   |\n+LL |     type Target = DerefTarget;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "0bb1033fb42f71f000501a954e5bad63c729eba3", "filename": "src/test/ui/borrowck/issue-81365-8.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &(*self).target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "716b6e9b51fd02a12d02feb32646f407f48da34c", "filename": "src/test/ui/borrowck/issue-81365-8.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,20 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-8.rs:21:9\n+   |\n+LL |         let first = &(*self).target_field;\n+   |                      ------- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+note: deref defined here\n+  --> $DIR/issue-81365-8.rs:12:5\n+   |\n+LL |     type Target = DerefTarget;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "cd57afa288df77208986ebeb1195f10d9efe7dc1", "filename": "src/test/ui/borrowck/issue-81365-9.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &Deref::deref(self).target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c7d48214fd4a81bb9abeaf08aa9b8f6b983a8074", "filename": "src/test/ui/borrowck/issue-81365-9.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d12844330df90ac4d309dc545902551634a251/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr?ref=18d12844330df90ac4d309dc545902551634a251", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-9.rs:21:9\n+   |\n+LL |         let first = &Deref::deref(self).target_field;\n+   |                                   ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}