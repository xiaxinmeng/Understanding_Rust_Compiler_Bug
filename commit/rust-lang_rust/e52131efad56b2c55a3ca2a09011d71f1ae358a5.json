{"sha": "e52131efad56b2c55a3ca2a09011d71f1ae358a5", "node_id": "C_kwDOAAsO6NoAKGU1MjEzMWVmYWQ1NmIyYzU1YTNjYTJhMDkwMTFkNzFmMWFlMzU4YTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-01T17:28:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-09T19:11:01Z"}, "message": "Use a slice for object_lifetime_defaults.", "tree": {"sha": "e5724fa66c4fab653bdb3c240bef0085d4170238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5724fa66c4fab653bdb3c240bef0085d4170238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52131efad56b2c55a3ca2a09011d71f1ae358a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52131efad56b2c55a3ca2a09011d71f1ae358a5", "html_url": "https://github.com/rust-lang/rust/commit/e52131efad56b2c55a3ca2a09011d71f1ae358a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52131efad56b2c55a3ca2a09011d71f1ae358a5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72f15ca2861f8635f6240b083952f3bd3b78dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72f15ca2861f8635f6240b083952f3bd3b78dee", "html_url": "https://github.com/rust-lang/rust/commit/f72f15ca2861f8635f6240b083952f3bd3b78dee"}], "stats": {"total": 161, "additions": 74, "deletions": 87}, "files": [{"sha": "f6963cf110b1d156aabe34ecd4457d94cd79c0bd", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e52131efad56b2c55a3ca2a09011d71f1ae358a5", "patch": "@@ -1490,9 +1490,7 @@ rustc_queries! {\n     /// for each parameter if a trait object were to be passed for that parameter.\n     /// For example, for `struct Foo<'a, T, U>`, this would be `['static, 'static]`.\n     /// For `struct Foo<'a, T: 'a, U>`, this would instead be `['a, 'static]`.\n-    query object_lifetime_defaults_map(_: LocalDefId)\n-        -> Option<Vec<ObjectLifetimeDefault>> {\n-        storage(ArenaCacheSelector<'tcx>)\n+    query object_lifetime_defaults(_: LocalDefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n         desc { \"looking up lifetime defaults for a region on an item\" }\n     }\n     query late_bound_vars_map(_: LocalDefId)"}, {"sha": "05165b7773caf2759a871a8cd63e712c7c60acd2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e52131efad56b2c55a3ca2a09011d71f1ae358a5", "patch": "@@ -5,7 +5,7 @@ use crate::dep_graph::{DepGraph, DepKind, DepKindStruct};\n use crate::hir::place::Place as HirPlace;\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n-use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath, ObjectLifetimeDefault};\n+use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n@@ -2713,10 +2713,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))\n     }\n \n-    pub fn object_lifetime_defaults(self, id: HirId) -> &'tcx Option<Vec<ObjectLifetimeDefault>> {\n-        self.object_lifetime_defaults_map(id.owner)\n-    }\n-\n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n         self.mk_bound_variable_kinds(\n             self.late_bound_vars_map(id.owner)"}, {"sha": "56879ef1808f63d89b25359b685099a54a634197", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 71, "deletions": 78, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e52131efad56b2c55a3ca2a09011d71f1ae358a5", "patch": "@@ -377,7 +377,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n         named_region_map: |tcx, id| resolve_lifetimes_for(tcx, id).defs.get(&id),\n         is_late_bound_map,\n-        object_lifetime_defaults_map: |tcx, id| match tcx.hir().find_by_def_id(id) {\n+        object_lifetime_defaults: |tcx, id| match tcx.hir().find_by_def_id(id) {\n             Some(Node::Item(item)) => compute_object_lifetime_defaults(tcx, item),\n             _ => None,\n         },\n@@ -1673,10 +1673,10 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     }\n }\n \n-fn compute_object_lifetime_defaults(\n-    tcx: TyCtxt<'_>,\n+fn compute_object_lifetime_defaults<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     item: &hir::Item<'_>,\n-) -> Option<Vec<ObjectLifetimeDefault>> {\n+) -> Option<&'tcx [ObjectLifetimeDefault]> {\n     match item.kind {\n         hir::ItemKind::Struct(_, ref generics)\n         | hir::ItemKind::Union(_, ref generics)\n@@ -1729,10 +1729,10 @@ fn compute_object_lifetime_defaults(\n /// Scan the bounds and where-clauses on parameters to extract bounds\n /// of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n /// for each type parameter.\n-fn object_lifetime_defaults_for_item(\n-    tcx: TyCtxt<'_>,\n+fn object_lifetime_defaults_for_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     generics: &hir::Generics<'_>,\n-) -> Vec<ObjectLifetimeDefault> {\n+) -> &'tcx [ObjectLifetimeDefault] {\n     fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::GenericBound<'_>]) {\n         for bound in bounds {\n             if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n@@ -1741,81 +1741,75 @@ fn object_lifetime_defaults_for_item(\n         }\n     }\n \n-    generics\n-        .params\n-        .iter()\n-        .filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { .. } => None,\n-            GenericParamKind::Type { .. } => {\n-                let mut set = Set1::Empty;\n-\n-                add_bounds(&mut set, &param.bounds);\n-\n-                let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-                for predicate in generics.where_clause.predicates {\n-                    // Look for `type: ...` where clauses.\n-                    let data = match *predicate {\n-                        hir::WherePredicate::BoundPredicate(ref data) => data,\n-                        _ => continue,\n-                    };\n+    let process_param = |param: &hir::GenericParam<'_>| match param.kind {\n+        GenericParamKind::Lifetime { .. } => None,\n+        GenericParamKind::Type { .. } => {\n+            let mut set = Set1::Empty;\n \n-                    // Ignore `for<'a> type: ...` as they can change what\n-                    // lifetimes mean (although we could \"just\" handle it).\n-                    if !data.bound_generic_params.is_empty() {\n-                        continue;\n-                    }\n+            add_bounds(&mut set, &param.bounds);\n \n-                    let res = match data.bounded_ty.kind {\n-                        hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => path.res,\n-                        _ => continue,\n-                    };\n+            let param_def_id = tcx.hir().local_def_id(param.hir_id);\n+            for predicate in generics.where_clause.predicates {\n+                // Look for `type: ...` where clauses.\n+                let data = match *predicate {\n+                    hir::WherePredicate::BoundPredicate(ref data) => data,\n+                    _ => continue,\n+                };\n \n-                    if res == Res::Def(DefKind::TyParam, param_def_id.to_def_id()) {\n-                        add_bounds(&mut set, &data.bounds);\n-                    }\n+                // Ignore `for<'a> type: ...` as they can change what\n+                // lifetimes mean (although we could \"just\" handle it).\n+                if !data.bound_generic_params.is_empty() {\n+                    continue;\n                 }\n \n-                Some(match set {\n-                    Set1::Empty => Set1::Empty,\n-                    Set1::One(name) => {\n-                        if name == hir::LifetimeName::Static {\n-                            Set1::One(Region::Static)\n-                        } else {\n-                            generics\n-                                .params\n-                                .iter()\n-                                .filter_map(|param| match param.kind {\n-                                    GenericParamKind::Lifetime { .. } => Some((\n-                                        param.hir_id,\n-                                        hir::LifetimeName::Param(param.name),\n-                                        LifetimeDefOrigin::from_param(param),\n-                                    )),\n-                                    _ => None,\n-                                })\n-                                .enumerate()\n-                                .find(|&(_, (_, lt_name, _))| lt_name == name)\n-                                .map_or(Set1::Many, |(i, (id, _, origin))| {\n-                                    let def_id = tcx.hir().local_def_id(id);\n-                                    Set1::One(Region::EarlyBound(\n-                                        i as u32,\n-                                        def_id.to_def_id(),\n-                                        origin,\n-                                    ))\n-                                })\n-                        }\n-                    }\n-                    Set1::Many => Set1::Many,\n-                })\n-            }\n-            GenericParamKind::Const { .. } => {\n-                // Generic consts don't impose any constraints.\n-                //\n-                // We still store a dummy value here to allow generic parameters\n-                // in an arbitrary order.\n-                Some(Set1::Empty)\n+                let res = match data.bounded_ty.kind {\n+                    hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => path.res,\n+                    _ => continue,\n+                };\n+\n+                if res == Res::Def(DefKind::TyParam, param_def_id.to_def_id()) {\n+                    add_bounds(&mut set, &data.bounds);\n+                }\n             }\n-        })\n-        .collect()\n+\n+            Some(match set {\n+                Set1::Empty => Set1::Empty,\n+                Set1::One(name) => {\n+                    if name == hir::LifetimeName::Static {\n+                        Set1::One(Region::Static)\n+                    } else {\n+                        generics\n+                            .params\n+                            .iter()\n+                            .filter_map(|param| match param.kind {\n+                                GenericParamKind::Lifetime { .. } => Some((\n+                                    param.hir_id,\n+                                    hir::LifetimeName::Param(param.name),\n+                                    LifetimeDefOrigin::from_param(param),\n+                                )),\n+                                _ => None,\n+                            })\n+                            .enumerate()\n+                            .find(|&(_, (_, lt_name, _))| lt_name == name)\n+                            .map_or(Set1::Many, |(i, (id, _, origin))| {\n+                                let def_id = tcx.hir().local_def_id(id);\n+                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id(), origin))\n+                            })\n+                    }\n+                }\n+                Set1::Many => Set1::Many,\n+            })\n+        }\n+        GenericParamKind::Const { .. } => {\n+            // Generic consts don't impose any constraints.\n+            //\n+            // We still store a dummy value here to allow generic parameters\n+            // in an arbitrary order.\n+            Some(Set1::Empty)\n+        }\n+    };\n+\n+    tcx.arena.alloc_from_iter(generics.params.iter().filter_map(process_param))\n }\n \n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n@@ -2510,8 +2504,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             if let Some(def_id) = def_id.as_local() {\n                 let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                 self.tcx\n-                    .object_lifetime_defaults(id)\n-                    .as_ref()\n+                    .object_lifetime_defaults(id.owner)\n                     .unwrap()\n                     .iter()\n                     .map(set_to_region)"}, {"sha": "e61b76a9b0c1c610f5b83f818649a0715c4b696b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52131efad56b2c55a3ca2a09011d71f1ae358a5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e52131efad56b2c55a3ca2a09011d71f1ae358a5", "patch": "@@ -1695,7 +1695,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         kind: ty::GenericParamDefKind::Lifetime,\n     }));\n \n-    let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id);\n+    let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id.owner);\n \n     // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;"}]}