{"sha": "29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjdjZGZmYTQ2ODhhYTUzOWJlNGYwZjZkMmVhYjdmNWFmOGEyZDY=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-30T16:58:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-02T19:38:24Z"}, "message": "ty: trans: added support for dropping trivial casts", "tree": {"sha": "47a1d7d795e90841d4f38b3566616d36fe0b8069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a1d7d795e90841d4f38b3566616d36fe0b8069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "html_url": "https://github.com/rust-lang/rust/commit/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "html_url": "https://github.com/rust-lang/rust/commit/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "52eae92111ff24a4a59a757b720110ae3ac07139", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "patch": "@@ -4086,7 +4086,14 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n         if !ty::expr_is_lval(tcx, a) { ret trans_expr(bcx, a, dest); }\n         else { ret lval_to_dps(bcx, a, dest); }\n       }\n-      ast::expr_cast(val, _) { ret trans_cast(bcx, val, e.id, dest); }\n+      ast::expr_cast(val, _) {\n+        alt tcx.cast_map.find(e.id) {\n+          option::none. { ret trans_cast(bcx, val, e.id, dest); }\n+          some { alt option::get(some) {\n+            ty::triv_cast. { ret trans_expr(bcx, val, dest); }\n+          } }\n+        }\n+      }\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(bcx, e.span, anon_obj, e.id, dest);\n       }"}, {"sha": "e775fee14104becd78e34a0c0eb701110fe73d72", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "patch": "@@ -32,6 +32,7 @@ export ast_constr_to_constr;\n export bind_params_in_type;\n export block_ty;\n export constr;\n+export cast_type;\n export constr_general;\n export constr_table;\n export count_ty_params;\n@@ -102,6 +103,7 @@ export substitute_type_params;\n export t;\n export tag_variants;\n export tag_variant_with_id;\n+export triv_cast;\n export triv_eq_ty;\n export ty_param_substs_opt_and_ty;\n export ty_param_kinds_and_ty;\n@@ -201,6 +203,12 @@ type mt = {ty: t, mut: ast::mutability};\n // the types of AST nodes.\n type creader_cache = hashmap<{cnum: int, pos: uint, len: uint}, ty::t>;\n \n+tag cast_type {\n+    /* cast may be ignored after substituting primitive with machine types\n+       since expr already has the right type */\n+    triv_cast;\n+}\n+\n type ctxt =\n     //        constr_table fn_constrs,\n     // We need the ext_map just for printing the types of tags defined in\n@@ -209,6 +217,7 @@ type ctxt =\n       sess: session::session,\n       def_map: resolve::def_map,\n       ext_map: resolve::ext_map,\n+      cast_map: hashmap<ast::node_id, cast_type>,\n       node_types: node_type_table,\n       items: ast_map::map,\n       freevars: freevars::freevar_map,\n@@ -396,6 +405,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map,\n           sess: s,\n           def_map: dm,\n           ext_map: em,\n+          cast_map: ast_util::new_node_hash(),\n           node_types: ntt,\n           items: amap,\n           freevars: freevars,"}, {"sha": "f363ca62b2747cd9739e6afb878ec0d9d6d47cae", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "patch": "@@ -2101,15 +2101,19 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       ast::expr_cast(e, t) {\n         bot = check_expr(fcx, e);\n         let t_1 = ast_ty_to_ty_crate(fcx.ccx, t);\n-        // FIXME: there are more forms of cast to support, eventually.\n+        let t_e = expr_ty(tcx, e);\n \n-        if !(type_is_scalar(fcx, expr.span, expr_ty(tcx, e)) &&\n-                 type_is_scalar(fcx, expr.span, t_1)) {\n+        // FIXME there are more forms of cast to support, eventually.\n+        if !(   type_is_scalar(fcx, expr.span, t_e)\n+             && type_is_scalar(fcx, expr.span, t_1)) {\n             tcx.sess.span_err(expr.span,\n                               \"non-scalar cast: \" +\n                                   ty_to_str(tcx, expr_ty(tcx, e)) + \" as \" +\n                                   ty_to_str(tcx, t_1));\n         }\n+\n+        if ty::triv_eq_ty(tcx, t_1, t_e)\n+            { tcx.cast_map.insert(expr.id, ty::triv_cast); }\n         write::ty_only_fixup(fcx, id, t_1);\n       }\n       ast::expr_vec(args, mut) {"}, {"sha": "3129c28d4fa30f7232e11d8eaa6456f9b3d68e73", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "patch": "@@ -1,11 +1,18 @@\n-import std::{str, option};\n+import std::{str, option, int, map};\n import codemap::span;\n import ast::*;\n \n fn respan<copy T>(sp: span, t: T) -> spanned<T> {\n     ret {node: t, span: sp};\n }\n \n+fn new_node_hash<copy V>() -> map::hashmap<node_id, V> {\n+    fn node_id_hash(&&i: node_id) -> uint { ret int::hash(i as int); }\n+    fn node_id_eq(&&a: node_id, &&b: node_id) -> bool\n+        { ret int::eq(a as int, b as int); }\n+    ret map::mk_hashmap(node_id_hash, node_id_eq);\n+}\n+\n /* assuming that we're not in macro expansion */\n fn mk_sp(lo: uint, hi: uint) -> span {\n     ret {lo: lo, hi: hi, expanded_from: codemap::os_none};"}]}