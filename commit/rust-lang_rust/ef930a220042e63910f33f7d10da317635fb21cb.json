{"sha": "ef930a220042e63910f33f7d10da317635fb21cb", "node_id": "C_kwDOAAsO6NoAKGVmOTMwYTIyMDA0MmU2MzkxMGYzM2Y3ZDEwZGEzMTc2MzVmYjIxY2I", "commit": {"author": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-29T08:06:02Z"}, "committer": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-29T08:06:02Z"}, "message": "Emitting error regardless of new param suggestion", "tree": {"sha": "c4bef9fce18d3ef1beb9029521884a7b1d0ce02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bef9fce18d3ef1beb9029521884a7b1d0ce02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef930a220042e63910f33f7d10da317635fb21cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef930a220042e63910f33f7d10da317635fb21cb", "html_url": "https://github.com/rust-lang/rust/commit/ef930a220042e63910f33f7d10da317635fb21cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef930a220042e63910f33f7d10da317635fb21cb/comments", "author": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7cb6ad8ce382ded99be31c95562c8d91a635b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7cb6ad8ce382ded99be31c95562c8d91a635b24", "html_url": "https://github.com/rust-lang/rust/commit/e7cb6ad8ce382ded99be31c95562c8d91a635b24"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "16a819504953fe377ab4b1f343216c13030f1e44", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ef930a220042e63910f33f7d10da317635fb21cb/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef930a220042e63910f33f7d10da317635fb21cb/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ef930a220042e63910f33f7d10da317635fb21cb", "patch": "@@ -1319,48 +1319,48 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         && !self.tcx.features().anonymous_lifetime_in_impl_trait\n                     {\n \n+\n+                        let mut diag =  rustc_session::parse::feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::anonymous_lifetime_in_impl_trait,\n+                            lifetime_ref.span,\n+                            \"anonymous lifetimes in `impl Trait` are unstable\",\n+                        );\n+\n                         match self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.def_id) {\n                             Some(generics) => {\n-                                for i in 0..generics.params.len()  {\n \n-                                    if !generics.span.contains(generics.params[i].span)  {\n+                                let mut new_param_sugg_tuple = None;\n \n-                                        let mut diag =  rustc_session::parse::feature_err(\n-                                            &self.tcx.sess.parse_sess,\n-                                            sym::anonymous_lifetime_in_impl_trait,\n-                                            lifetime_ref.span,\n-                                            \"anonymous lifetimes in `impl Trait` are unstable\",\n-                                        );\n-\n-                                        diag.span_label(lifetime_ref.span, \"expected named lifetime parameter\");\n-                                        diag.multipart_suggestion(\"consider introducing a named lifetime parameter\",\n-                                                                  vec![\n-                                                                    (lifetime_ref.span.shrink_to_hi(), \"'a \".to_owned()),\n-                                                                    match generics.span_for_param_suggestion() {\n-                                                                        Some(_) => {\n-                                                                            (self.tcx.sess.source_map().span_through_char(generics.span, '<').shrink_to_hi(), \"'a, \".to_owned())\n-                                                                        }\n-                                                                        None => (generics.span, \"<'a>\".to_owned()),\n-\n-                                                                    }\n-                                                                  ], rustc_errors::Applicability::MaybeIncorrect);\n-                                        diag.emit();\n-\n-                                        return;\n+                                for i in 0..generics.params.len()  {\n+                                    if !generics.span.contains(generics.params[i].span)  {\n+                                        new_param_sugg_tuple = match generics.span_for_param_suggestion() {\n+                                            Some(_) => {\n+                                                Some((self.tcx.sess.source_map().span_through_char(generics.span, '<').shrink_to_hi(), \"'a, \".to_owned()))\n+                                            },\n+                                            None => Some((generics.span, \"<'a>\".to_owned()))\n+                                        }\n                                     }\n                                 }\n+\n+                                let mut multi_sugg_vec = vec![(lifetime_ref.span.shrink_to_hi(), \"'a \".to_owned())];\n+\n+                                if let Some(new_tuple) =  new_param_sugg_tuple{\n+                                    multi_sugg_vec.push(new_tuple);\n+                                }\n+\n+                                diag.span_label(lifetime_ref.span, \"expected named lifetime parameter\");\n+                                diag.multipart_suggestion(\"consider introducing a named lifetime parameter\",\n+                                multi_sugg_vec,\n+                                rustc_errors::Applicability::MaybeIncorrect);\n+\n                             },\n-                            None => {\n-                                rustc_session::parse::feature_err(\n-                                    &self.tcx.sess.parse_sess,\n-                                    sym::anonymous_lifetime_in_impl_trait,\n-                                    lifetime_ref.span,\n-                                    \"anonymous lifetimes in `impl Trait` are unstable\",\n-                                ).emit();\n-                                return;\n-                            }\n+                            None => { continue; }\n                         }\n \n+                        diag.emit();\n+                        return;\n+\n                     }\n                     scope = s;\n                 }"}]}