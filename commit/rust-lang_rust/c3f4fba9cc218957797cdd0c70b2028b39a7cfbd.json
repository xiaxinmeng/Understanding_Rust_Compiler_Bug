{"sha": "c3f4fba9cc218957797cdd0c70b2028b39a7cfbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZjRmYmE5Y2MyMTg5NTc3OTdjZGQwYzcwYjIwMjhiMzlhN2NmYmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-14T04:54:29Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-24T21:18:39Z"}, "message": "syntax: add {trait_item,impl_item,where_clause}_to_string", "tree": {"sha": "27fed56e37a64eab89ca507674ff018d7f749192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27fed56e37a64eab89ca507674ff018d7f749192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd", "html_url": "https://github.com/rust-lang/rust/commit/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed810385045ab0db90303574ba3ea47dfa2a36d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed810385045ab0db90303574ba3ea47dfa2a36d5", "html_url": "https://github.com/rust-lang/rust/commit/ed810385045ab0db90303574ba3ea47dfa2a36d5"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "ddcdcf4e1b8fa0952e136c578fc195bbcf827753", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f4fba9cc218957797cdd0c70b2028b39a7cfbd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c3f4fba9cc218957797cdd0c70b2028b39a7cfbd", "patch": "@@ -367,6 +367,10 @@ pub fn generics_to_string(generics: &ast::Generics) -> String {\n     $to_string(|s| s.print_generics(generics))\n }\n \n+pub fn where_clause_to_string(i: &ast::WhereClause) -> String {\n+    $to_string(|s| s.print_where_clause(i))\n+}\n+\n pub fn fn_block_to_string(p: &ast::FnDecl) -> String {\n     $to_string(|s| s.print_fn_block_args(p))\n }\n@@ -912,7 +916,7 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_type(&**ty));\n-                try!(self.print_where_clause(params));\n+                try!(self.print_where_clause(&params.where_clause));\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer ibox\n             }\n@@ -975,7 +979,7 @@ impl<'a> State<'a> {\n                 }\n \n                 try!(self.print_type(&**ty));\n-                try!(self.print_where_clause(generics));\n+                try!(self.print_where_clause(&generics.where_clause));\n \n                 try!(space(&mut self.s));\n                 try!(self.bopen());\n@@ -1003,7 +1007,7 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 try!(self.print_bounds(\":\", &real_bounds[..]));\n-                try!(self.print_where_clause(generics));\n+                try!(self.print_where_clause(&generics.where_clause));\n                 try!(word(&mut self.s, \" \"));\n                 try!(self.bopen());\n                 for trait_item in trait_items {\n@@ -1061,7 +1065,7 @@ impl<'a> State<'a> {\n         try!(self.head(&visibility_qualified(visibility, \"enum\")));\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n-        try!(self.print_where_clause(generics));\n+        try!(self.print_where_clause(&generics.where_clause));\n         try!(space(&mut self.s));\n         self.print_variants(&enum_definition.variants, span)\n     }\n@@ -1115,12 +1119,12 @@ impl<'a> State<'a> {\n                 ));\n                 try!(self.pclose());\n             }\n-            try!(self.print_where_clause(generics));\n+            try!(self.print_where_clause(&generics.where_clause));\n             try!(word(&mut self.s, \";\"));\n             try!(self.end());\n             self.end() // close the outer-box\n         } else {\n-            try!(self.print_where_clause(generics));\n+            try!(self.print_where_clause(&generics.where_clause));\n             try!(self.nbsp());\n             try!(self.bopen());\n             try!(self.hardbreak_if_not_bol());\n@@ -2343,7 +2347,7 @@ impl<'a> State<'a> {\n         }\n         try!(self.print_generics(generics));\n         try!(self.print_fn_args_and_ret(decl, opt_explicit_self));\n-        self.print_where_clause(generics)\n+        self.print_where_clause(&generics.where_clause)\n     }\n \n     pub fn print_fn_args(&mut self, decl: &ast::FnDecl,\n@@ -2526,19 +2530,16 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_where_clause(&mut self, generics: &ast::Generics)\n+    pub fn print_where_clause(&mut self, where_clause: &ast::WhereClause)\n                               -> io::Result<()> {\n-        if generics.where_clause.predicates.len() == 0 {\n+        if where_clause.predicates.len() == 0 {\n             return Ok(())\n         }\n \n         try!(space(&mut self.s));\n         try!(self.word_space(\"where\"));\n \n-        for (i, predicate) in generics.where_clause\n-                                      .predicates\n-                                      .iter()\n-                                      .enumerate() {\n+        for (i, predicate) in where_clause.predicates.iter().enumerate() {\n             if i != 0 {\n                 try!(self.word_space(\",\"));\n             }"}]}