{"sha": "8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOGEyOTFlMWNkOWRlMGZhODg5YzI0MGZjMWFhMjY5NGY1ZjExZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-03T18:46:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-03T18:46:51Z"}, "message": "auto merge of #14625 : japaric/rust/slice-tojson, r=alexcrichton\n\nLet me know if the amount of tests is enough or too much.", "tree": {"sha": "8a65de19aea5ae280585681135127759af0507ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a65de19aea5ae280585681135127759af0507ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "html_url": "https://github.com/rust-lang/rust/commit/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa5baa7cae5ba84cdd50cfebc729ea82c0a2f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa5baa7cae5ba84cdd50cfebc729ea82c0a2f39", "html_url": "https://github.com/rust-lang/rust/commit/7fa5baa7cae5ba84cdd50cfebc729ea82c0a2f39"}, {"sha": "a413d005a77d294f6e7b173b898684d56224b19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a413d005a77d294f6e7b173b898684d56224b19f", "html_url": "https://github.com/rust-lang/rust/commit/a413d005a77d294f6e7b173b898684d56224b19f"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "82f9294fc9a3799a55c63517ca87d33c2c2f656e", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "patch": "@@ -2227,6 +2227,10 @@ impl<A:ToJson,B:ToJson,C:ToJson> ToJson for (A, B, C) {\n     }\n }\n \n+impl<'a, A:ToJson> ToJson for &'a [A] {\n+    fn to_json(&self) -> Json { List(self.iter().map(|elt| elt.to_json()).collect()) }\n+}\n+\n impl<A:ToJson> ToJson for ~[A] {\n     fn to_json(&self) -> Json { List(self.iter().map(|elt| elt.to_json()).collect()) }\n }\n@@ -3334,6 +3338,56 @@ mod tests {\n         assert!(stack.get(1) == Key(\"foo\"));\n     }\n \n+    #[test]\n+    fn test_to_json() {\n+        use collections::{HashMap,TreeMap};\n+        use super::ToJson;\n+\n+        let list2 = List(vec!(Number(1.0_f64), Number(2.0_f64)));\n+        let list3 = List(vec!(Number(1.0f64), Number(2.0f64), Number(3.0f64)));\n+        let object = {\n+            let mut tree_map = TreeMap::new();\n+            tree_map.insert(\"a\".to_string(), Number(1.0_f64));\n+            tree_map.insert(\"b\".to_string(), Number(2.0_f64));\n+            Object(box tree_map)\n+        };\n+\n+        assert_eq!(list2.to_json(), list2);\n+        assert_eq!(object.to_json(), object);\n+        assert_eq!(3_i.to_json(), Number(3.0_f64));\n+        assert_eq!(4_i8.to_json(), Number(4.0_f64));\n+        assert_eq!(5_i16.to_json(), Number(5.0_f64));\n+        assert_eq!(6_i32.to_json(), Number(6.0_f64));\n+        assert_eq!(7_i64.to_json(), Number(7.0_f64));\n+        assert_eq!(8_u.to_json(), Number(8.0_f64));\n+        assert_eq!(9_u8.to_json(), Number(9.0_f64));\n+        assert_eq!(10_u16.to_json(), Number(10.0_f64));\n+        assert_eq!(11_u32.to_json(), Number(11.0_f64));\n+        assert_eq!(12_u64.to_json(), Number(12.0_f64));\n+        assert_eq!(13.0_f32.to_json(), Number(13.0_f64));\n+        assert_eq!(14.0_f64.to_json(), Number(14.0_f64));\n+        assert_eq!(().to_json(), Null);\n+        assert_eq!(true.to_json(), Boolean(true));\n+        assert_eq!(false.to_json(), Boolean(false));\n+        assert_eq!(\"abc\".to_string().to_json(), String(\"abc\".to_string()));\n+        assert_eq!((1, 2).to_json(), list2);\n+        assert_eq!((1, 2, 3).to_json(), list3);\n+        assert_eq!([1, 2].to_json(), list2);\n+        assert_eq!((&[1, 2, 3]).to_json(), list3);\n+        assert_eq!((~[1, 2]).to_json(), list2);\n+        assert_eq!(vec!(1, 2, 3).to_json(), list3);\n+        let mut tree_map = TreeMap::new();\n+        tree_map.insert(\"a\".to_string(), 1);\n+        tree_map.insert(\"b\".to_string(), 2);\n+        assert_eq!(tree_map.to_json(), object);\n+        let mut hash_map = HashMap::new();\n+        hash_map.insert(\"a\".to_string(), 1);\n+        hash_map.insert(\"b\".to_string(), 2);\n+        assert_eq!(hash_map.to_json(), object);\n+        assert_eq!(Some(15).to_json(), Number(15 as f64));\n+        assert_eq!(None::<int>.to_json(), Null);\n+    }\n+\n     #[bench]\n     fn bench_streaming_small(b: &mut Bencher) {\n         b.iter( || {"}]}