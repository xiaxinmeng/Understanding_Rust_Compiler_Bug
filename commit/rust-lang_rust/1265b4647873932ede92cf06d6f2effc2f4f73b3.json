{"sha": "1265b4647873932ede92cf06d6f2effc2f4f73b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNjViNDY0Nzg3MzkzMmVkZTkyY2YwNmQ2ZjJlZmZjMmY0ZjczYjM=", "commit": {"author": {"name": "Benjamin Gill", "email": "git@bgill.eu", "date": "2017-08-18T16:57:33Z"}, "committer": {"name": "Benjamin Gill", "email": "git@bgill.eu", "date": "2017-08-20T04:00:49Z"}, "message": "Basic implementation of `cargo clippy --all`\n\nThis implements workspace support for `cargo clippy` by running clippy\nover all packages in the workspace (in serial).\n\nThis should probably be parallelised in future (as `cargo build --all`).", "tree": {"sha": "d43aa23f993cee448b5ab7bcb211c440c96f2e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d43aa23f993cee448b5ab7bcb211c440c96f2e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1265b4647873932ede92cf06d6f2effc2f4f73b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1265b4647873932ede92cf06d6f2effc2f4f73b3", "html_url": "https://github.com/rust-lang/rust/commit/1265b4647873932ede92cf06d6f2effc2f4f73b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1265b4647873932ede92cf06d6f2effc2f4f73b3/comments", "author": {"login": "bjgill", "id": 15256121, "node_id": "MDQ6VXNlcjE1MjU2MTIx", "avatar_url": "https://avatars.githubusercontent.com/u/15256121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjgill", "html_url": "https://github.com/bjgill", "followers_url": "https://api.github.com/users/bjgill/followers", "following_url": "https://api.github.com/users/bjgill/following{/other_user}", "gists_url": "https://api.github.com/users/bjgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjgill/subscriptions", "organizations_url": "https://api.github.com/users/bjgill/orgs", "repos_url": "https://api.github.com/users/bjgill/repos", "events_url": "https://api.github.com/users/bjgill/events{/privacy}", "received_events_url": "https://api.github.com/users/bjgill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjgill", "id": 15256121, "node_id": "MDQ6VXNlcjE1MjU2MTIx", "avatar_url": "https://avatars.githubusercontent.com/u/15256121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjgill", "html_url": "https://github.com/bjgill", "followers_url": "https://api.github.com/users/bjgill/followers", "following_url": "https://api.github.com/users/bjgill/following{/other_user}", "gists_url": "https://api.github.com/users/bjgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjgill/subscriptions", "organizations_url": "https://api.github.com/users/bjgill/orgs", "repos_url": "https://api.github.com/users/bjgill/repos", "events_url": "https://api.github.com/users/bjgill/events{/privacy}", "received_events_url": "https://api.github.com/users/bjgill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cdaeae1b877ca03b26ccb9b82754b826b03da5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaeae1b877ca03b26ccb9b82754b826b03da5d", "html_url": "https://github.com/rust-lang/rust/commit/7cdaeae1b877ca03b26ccb9b82754b826b03da5d"}], "stats": {"total": 138, "additions": 75, "deletions": 63}, "files": [{"sha": "2f4d782f78eb57bc3dac02cbe2d5552916016cc6", "filename": "src/main.rs", "status": "modified", "additions": 75, "deletions": 63, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1265b4647873932ede92cf06d6f2effc2f4f73b3/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1265b4647873932ede92cf06d6f2effc2f4f73b3/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=1265b4647873932ede92cf06d6f2effc2f4f73b3", "patch": "@@ -152,6 +152,7 @@ Common options:\n     -h, --help               Print this message\n     --features               Features to compile for the package\n     -V, --version            Print version info and exit\n+    --all                    @@@ something sensible here (copy from cargo-edit?)\n \n Other options are the same as `cargo rustc`.\n \n@@ -217,74 +218,85 @@ pub fn main() {\n                 .expect(\"manifest path could not be canonicalized\")\n         });\n \n-        let package_index = {\n-            if let Some(manifest_path) = manifest_path {\n-                metadata.packages.iter().position(|package| {\n-                    let package_manifest_path = Path::new(&package.manifest_path).canonicalize().expect(\n-                        \"package manifest path could not be canonicalized\",\n-                    );\n-                    package_manifest_path == manifest_path\n-                })\n-            } else {\n-                let package_manifest_paths: HashMap<_, _> = metadata\n-                    .packages\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, package)| {\n-                        let package_manifest_path = Path::new(&package.manifest_path)\n-                            .parent()\n-                            .expect(\"could not find parent directory of package manifest\")\n-                            .canonicalize()\n-                            .expect(\"package directory cannot be canonicalized\");\n-                        (package_manifest_path, i)\n+        let packages = if std::env::args().any(|a| a == \"--all\" ) {\n+            metadata.packages\n+        } else {\n+            let package_index = {\n+                if let Some(manifest_path) = manifest_path {\n+                    metadata.packages.iter().position(|package| {\n+                        let package_manifest_path = Path::new(&package.manifest_path).canonicalize().expect(\n+                            \"package manifest path could not be canonicalized\",\n+                        );\n+                        package_manifest_path == manifest_path\n                     })\n-                    .collect();\n-\n-                let current_dir = std::env::current_dir()\n-                    .expect(\"could not read current directory\")\n-                    .canonicalize()\n-                    .expect(\"current directory cannot be canonicalized\");\n-\n-                let mut current_path: &Path = &current_dir;\n-\n-                // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n-                // reach).\n-                loop {\n-                    if let Some(&package_index) = package_manifest_paths.get(current_path) {\n-                        break Some(package_index);\n-                    } else {\n-                        // We'll never reach the filesystem root, because to get to this point in the\n-                        // code\n-                        // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n-                        // unwrap the current path's parent.\n-                        current_path = current_path.parent().unwrap_or_else(|| {\n-                            panic!(\"could not find parent of path {}\", current_path.display())\n-                        });\n+                } else {\n+                    let package_manifest_paths: HashMap<_, _> = metadata\n+                        .packages\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(i, package)| {\n+                            let package_manifest_path = Path::new(&package.manifest_path)\n+                                .parent()\n+                                .expect(\"could not find parent directory of package manifest\")\n+                                .canonicalize()\n+                                .expect(\"package directory cannot be canonicalized\");\n+                            (package_manifest_path, i)\n+                        })\n+                        .collect();\n+\n+                    let current_dir = std::env::current_dir()\n+                        .expect(\"could not read current directory\")\n+                        .canonicalize()\n+                        .expect(\"current directory cannot be canonicalized\");\n+\n+                    let mut current_path: &Path = &current_dir;\n+\n+                    // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n+                    // reach).\n+                    loop {\n+                        if let Some(&package_index) = package_manifest_paths.get(current_path) {\n+                            break Some(package_index);\n+                        } else {\n+                            // We'll never reach the filesystem root, because to get to this point in the\n+                            // code\n+                            // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n+                            // unwrap the current path's parent.\n+                            current_path = current_path.parent().unwrap_or_else(|| {\n+                                panic!(\"could not find parent of path {}\", current_path.display())\n+                            });\n+                        }\n                     }\n                 }\n-            }\n-        }.expect(\"could not find matching package\");\n-\n-        let package = metadata.packages.remove(package_index);\n-        for target in package.targets {\n-            let args = std::env::args().skip(2);\n-            if let Some(first) = target.kind.get(0) {\n-                if target.kind.len() > 1 || first.ends_with(\"lib\") {\n-                    if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n-                        std::process::exit(code);\n-                    }\n-                } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n-                    if let Err(code) = process(\n-                        vec![format!(\"--{}\", first), target.name]\n-                            .into_iter()\n-                            .chain(args),\n-                    )\n-                    {\n-                        std::process::exit(code);\n+            }.expect(\"could not find matching package\");\n+\n+            vec![metadata.packages.remove(package_index)]\n+        };\n+\n+        for package in packages {\n+            let manifest_path = package.manifest_path;\n+\n+            for target in package.targets {\n+                let args = std::env::args().skip(2).filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n+\n+                let args = std::iter::once(format!(\"--manifest-path={}\", manifest_path)).chain(args);\n+                if let Some(first) = target.kind.get(0) {\n+                    if target.kind.len() > 1 || first.ends_with(\"lib\") {\n+                        if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n+                            std::process::exit(code);\n+                        }\n+                    } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n+                        if let Err(code) = process(\n+                            vec![format!(\"--{}\", first), target.name]\n+                                .into_iter()\n+                                .chain(args),\n+                        )\n+                        {\n+                            std::process::exit(code);\n+                        }\n                     }\n+                } else {\n+                    panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n                 }\n-            } else {\n-                panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n             }\n         }\n     } else {"}]}