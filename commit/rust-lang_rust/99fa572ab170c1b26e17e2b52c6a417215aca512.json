{"sha": "99fa572ab170c1b26e17e2b52c6a417215aca512", "node_id": "C_kwDOAAsO6NoAKDk5ZmE1NzJhYjE3MGMxYjI2ZTE3ZTJiNTJjNmE0MTcyMTVhY2E1MTI", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-22T15:00:23Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-25T16:13:03Z"}, "message": "add def_id and substs to ConstraintCategory::CallArgument", "tree": {"sha": "d8a86107583239e21cf25775f6bd2abf57b42bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a86107583239e21cf25775f6bd2abf57b42bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fa572ab170c1b26e17e2b52c6a417215aca512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa572ab170c1b26e17e2b52c6a417215aca512", "html_url": "https://github.com/rust-lang/rust/commit/99fa572ab170c1b26e17e2b52c6a417215aca512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fa572ab170c1b26e17e2b52c6a417215aca512/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbdce423201f1b155c46f3ec690a644cf3b4ba53", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdce423201f1b155c46f3ec690a644cf3b4ba53", "html_url": "https://github.com/rust-lang/rust/commit/cbdce423201f1b155c46f3ec690a644cf3b4ba53"}], "stats": {"total": 122, "additions": 77, "deletions": 45}, "files": [{"sha": "a504d0c91222e39b1a419b3b59db80ac778d94ef", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -95,7 +95,7 @@ pub struct OutlivesConstraint<'tcx> {\n     pub span: Span,\n \n     /// What caused this constraint?\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n \n     /// Variance diagnostic information\n     pub variance_info: VarianceDiagInfo<'tcx>,"}, {"sha": "191574d7a8fb986a764bfa3fee12e1c8bfc07479", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -788,7 +788,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err: &mut Diagnostic,\n         location: Location,\n         issued_borrow: &BorrowData<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) {\n         let used_in_call = matches!(\n             explanation,\n@@ -1088,7 +1088,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 BorrowExplanation::MustBeValidFor {\n                     category:\n                         category @ (ConstraintCategory::Return(_)\n-                        | ConstraintCategory::CallArgument\n+                        | ConstraintCategory::CallArgument(_)\n                         | ConstraintCategory::OpaqueType),\n                     from_closure: false,\n                     ref region_name,\n@@ -1147,7 +1147,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n@@ -1352,7 +1352,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n@@ -1410,7 +1410,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         opt_place_desc: Option<&String>,\n     ) -> Option<DiagnosticBuilder<'cx, ErrorGuaranteed>> {\n         let return_kind = match category {\n@@ -1508,7 +1508,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         use_span: UseSpans<'tcx>,\n         var_span: Span,\n         fr_name: &RegionName,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n@@ -1559,7 +1559,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let msg = format!(\"{} is returned here\", kind);\n                 err.span_note(constraint_span, &msg);\n             }\n-            ConstraintCategory::CallArgument => {\n+            ConstraintCategory::CallArgument(_) => {\n                 fr_name.highlight_region_name(&mut err);\n                 if matches!(use_span.generator_kind(), Some(GeneratorKind::Async(_))) {\n                     err.note("}, {"sha": "5d9e5907dffb0de57fb9e5ae58c5a27bf66f0a49", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -24,7 +24,7 @@ use crate::{\n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(crate) enum BorrowExplanation {\n+pub(crate) enum BorrowExplanation<'tcx> {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -33,7 +33,7 @@ pub(crate) enum BorrowExplanation {\n         should_note_order: bool,\n     },\n     MustBeValidFor {\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         from_closure: bool,\n         span: Span,\n         region_name: RegionName,\n@@ -51,11 +51,11 @@ pub(crate) enum LaterUseKind {\n     Other,\n }\n \n-impl BorrowExplanation {\n+impl<'tcx> BorrowExplanation<'tcx> {\n     pub(crate) fn is_explained(&self) -> bool {\n         !matches!(self, BorrowExplanation::Unexplained)\n     }\n-    pub(crate) fn add_explanation_to_diagnostic<'tcx>(\n+    pub(crate) fn add_explanation_to_diagnostic(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n@@ -276,7 +276,7 @@ impl BorrowExplanation {\n     pub(crate) fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut Diagnostic,\n-        category: &ConstraintCategory,\n+        category: &ConstraintCategory<'tcx>,\n         span: Span,\n         region_name: &RegionName,\n     ) {\n@@ -305,7 +305,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory, bool, Span, Option<RegionName>) {\n+    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>) {\n         let BlameConstraint { category, from_closure, cause, variance_info: _ } =\n             self.regioncx.best_blame_constraint(\n                 &self.body,\n@@ -337,7 +337,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, Place<'tcx>)>,\n-    ) -> BorrowExplanation {\n+    ) -> BorrowExplanation<'tcx> {\n         debug!(\n             \"explain_why_borrow_contains_point(location={:?}, borrow={:?}, kind_place={:?})\",\n             location, borrow, kind_place"}, {"sha": "2c460bcb72d8b619c5babc3b204de5357d33b6cf", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -87,7 +87,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Map closure bounds to a `Span` that should be used for error reporting.\n     closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     /// Map universe indexes to information on why we created it.\n     universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n@@ -259,7 +259,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n-            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>,\n         >,\n         universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n@@ -1772,7 +1772,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1: RegionVid,\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n-    ) -> (ConstraintCategory, ObligationCause<'tcx>) {\n+    ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n         let BlameConstraint { category, cause, .. } =\n             self.best_blame_constraint(body, fr1, fr1_origin, |r| {\n                 self.provides_universal_region(r, fr1, fr2)\n@@ -2270,7 +2270,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n \n #[derive(Clone, Debug)]\n pub struct BlameConstraint<'tcx> {\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n     pub from_closure: bool,\n     pub cause: ObligationCause<'tcx>,\n     pub variance_info: ty::VarianceDiagInfo<'tcx>,"}, {"sha": "55c0bf05b487317753d3725959a81433a943165a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     pub(super) fn fully_perform_op<R, Op>(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         op: Op,\n     ) -> Fallible<R>\n     where\n@@ -83,11 +83,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         instantiated\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn prove_trait_ref(\n         &mut self,\n         trait_ref: ty::TraitRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         self.prove_predicates(\n             Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n@@ -113,6 +114,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             .into_iter()\n             .zip(instantiated_predicates.spans.into_iter())\n         {\n+            debug!(?predicate);\n             let predicate = self.normalize(predicate, locations);\n             self.prove_predicate(predicate, locations, ConstraintCategory::Predicate(span));\n         }\n@@ -122,7 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for predicate in predicates {\n             let predicate = predicate.to_predicate(self.tcx());\n@@ -137,7 +139,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicate: ty::Predicate<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         let param_env = self.param_env;\n         self.fully_perform_op("}, {"sha": "3c9e3870aeac419e68dcbf907be23863c2088770", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -27,7 +27,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n \n@@ -40,7 +40,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     ) -> Self {\n         Self {"}, {"sha": "bf52b1be6782e110b9e86d401c6f67716a205e5e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -162,6 +162,8 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut constraints,\n     );\n \n+    debug!(?normalized_inputs_and_output);\n+\n     for u in ty::UniverseIndex::ROOT..infcx.universe() {\n         let info = UniverseInfo::other();\n         constraints.universe_causes.insert(u, info);\n@@ -185,6 +187,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         implicit_region_bound,\n         &mut borrowck_context,\n         |mut cx| {\n+            debug!(\"inside extra closure of type_check_internal\");\n             cx.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n             liveness::generate(\n                 &mut cx,\n@@ -257,6 +260,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n     extra: impl FnOnce(TypeChecker<'a, 'tcx>) -> R,\n ) -> R {\n+    debug!(\"body: {:#?}\", body);\n     let mut checker = TypeChecker::new(\n         infcx,\n         body,\n@@ -934,8 +938,8 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n \n     pub(crate) member_constraints: MemberConstraintSet<'tcx, RegionVid>,\n \n-    pub(crate) closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+    crate closure_bounds_mapping:\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     pub(crate) universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n@@ -1125,7 +1129,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn push_region_constraints(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         data: &QueryRegionConstraints<'tcx>,\n     ) {\n         debug!(\"constraints generated: {:#?}\", data);\n@@ -1150,7 +1154,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         // Use this order of parameters because the sup type is usually the\n         // \"expected\" type in diagnostics.\n@@ -1163,7 +1167,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         self.relate_types(expected, ty::Variance::Invariant, found, locations, category)\n     }\n@@ -1175,7 +1179,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         user_ty: &UserTypeProjection,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n@@ -1212,6 +1216,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     #[instrument(skip(self, body, location), level = \"debug\")]\n     fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {\n         let tcx = self.tcx();\n+        debug!(\"stmt kind: {:?}\", stmt.kind);\n         match stmt.kind {\n             StatementKind::Assign(box (ref place, ref rv)) => {\n                 // Assignments to temporaries are not \"interesting\";\n@@ -1251,9 +1256,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 );\n \n                 let place_ty = place.ty(body, tcx).ty;\n+                debug!(?place_ty);\n                 let place_ty = self.normalize(place_ty, location);\n+                debug!(\"place_ty normalized: {:?}\", place_ty);\n                 let rv_ty = rv.ty(body, tcx);\n+                debug!(?rv_ty);\n                 let rv_ty = self.normalize(rv_ty, location);\n+                debug!(\"normalized rv_ty: {:?}\", rv_ty);\n                 if let Err(terr) =\n                     self.sub_types(rv_ty, place_ty, location.to_locations(), category)\n                 {\n@@ -1347,6 +1356,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         term_location: Location,\n     ) {\n         let tcx = self.tcx();\n+        debug!(\"terminator kind: {:?}\", term.kind);\n         match term.kind {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n@@ -1404,7 +1414,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // FIXME: check the values\n             }\n             TerminatorKind::Call {\n-                ref func, ref args, destination, target, from_hir_call, ..\n+                ref func,\n+                ref args,\n+                ref destination,\n+                from_hir_call,\n+                fn_span,\n+                ..\n             } => {\n                 self.check_operand(func, term_location);\n                 for arg in args {\n@@ -1413,6 +1428,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 let func_ty = func.ty(body, tcx);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n+                debug!(\"func_ty.kind: {:?}\", func_ty.kind());\n+                debug!(?fn_span);\n                 let sig = match func_ty.kind() {\n                     ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),\n                     _ => {\n@@ -1425,6 +1442,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     LateBoundRegionConversionTime::FnCall,\n                     sig,\n                 );\n+                debug!(?sig);\n                 let sig = self.normalize(sig, term_location);\n                 self.check_call_dest(body, term, &sig, destination, target, term_location);\n \n@@ -1585,11 +1603,25 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n+\n+        let call_arg = if let TerminatorKind::Call { func, .. } = &term.kind {\n+            let func_ty = func.ty(body, self.infcx.tcx);\n+            if let ty::FnDef(fn_did, substs) = func_ty.kind() {\n+                Some((*fn_did, *substs))\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        };\n+        debug!(?call_arg);\n+\n         for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n+\n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument\n+                ConstraintCategory::CallArgument(call_arg)\n             } else {\n                 ConstraintCategory::Boring\n             };\n@@ -1841,6 +1873,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self, body), level = \"debug\")]\n     fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n "}, {"sha": "c45850c6d840f8752998e9bb741f0eacfbd69930", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         b: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -47,7 +47,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     locations: Locations,\n \n     /// What category do we assign the resulting `'a: 'b` relationships?\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n \n     /// Information so that error reporting knows what types we are relating\n     /// when reporting a bound region error.\n@@ -58,7 +58,7 @@ impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n         Self { type_checker, locations, category, universe_info }"}, {"sha": "4f71e3a8234faac8f4a776438e71ad5629db07c4", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -1,7 +1,7 @@\n //! Values computed by queries that use MIR.\n \n use crate::mir::{self, Body, Promoted};\n-use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n+use crate::ty::{self, subst::SubstsRef, OpaqueHiddenType, Ty, TyCtxt};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n@@ -338,20 +338,17 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub blame_span: Span,\n \n     // ... due to this reason.\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n }\n \n-// Make sure this enum doesn't unintentionally grow\n-rustc_data_structures::static_assert_size!(ConstraintCategory, 12);\n-\n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n /// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n-pub enum ConstraintCategory {\n+pub enum ConstraintCategory<'tcx> {\n     Return(ReturnConstraint),\n     Yield,\n     UseAsConst,\n@@ -363,7 +360,7 @@ pub enum ConstraintCategory {\n     ///\n     /// We try to get the category that the closure used when reporting this.\n     ClosureBounds,\n-    CallArgument,\n+    CallArgument(Option<(DefId, SubstsRef<'tcx>)>),\n     CopyBound,\n     SizedBound,\n     Assignment,"}, {"sha": "d6b5e9ddfbd6f25a8babb8d157597e21df51d233", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa572ab170c1b26e17e2b52c6a417215aca512/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=99fa572ab170c1b26e17e2b52c6a417215aca512", "patch": "@@ -135,8 +135,8 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionKind {\n             ty::RePlaceholder(p) => {\n                 p.hash_stable(hcx, hasher);\n             }\n-            ty::ReVar(..) => {\n-                bug!(\"StableHasher: unexpected region {:?}\", *self)\n+            ty::ReVar(reg_vid) => {\n+                reg_vid.hash_stable(hcx, hasher);\n             }\n         }\n     }"}]}