{"sha": "856b081eb2ae3264da07434debd55d734fba7eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmIwODFlYjJhZTMyNjRkYTA3NDM0ZGViZDU1ZDczNGZiYTdlYjQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-11T10:03:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-13T15:33:10Z"}, "message": "middle: replace NodeId with HirId in AccessLevels", "tree": {"sha": "2c3082707469b95eeae97d44d6f6054b8f56bcab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3082707469b95eeae97d44d6f6054b8f56bcab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856b081eb2ae3264da07434debd55d734fba7eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856b081eb2ae3264da07434debd55d734fba7eb4", "html_url": "https://github.com/rust-lang/rust/commit/856b081eb2ae3264da07434debd55d734fba7eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856b081eb2ae3264da07434debd55d734fba7eb4/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6d881ac1f348e8cf16d8b9177d7dff39fd2570", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6d881ac1f348e8cf16d8b9177d7dff39fd2570", "html_url": "https://github.com/rust-lang/rust/commit/cf6d881ac1f348e8cf16d8b9177d7dff39fd2570"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "0de169e652371e98d0121ec88c1c327f1ecb597c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -414,7 +414,7 @@ fn create_and_seed_worklist<'a, 'tcx>(\n ) -> (Vec<hir::HirId>, FxHashMap<hir::HirId, hir::HirId>) {\n     let worklist = access_levels.map.iter().filter_map(|(&id, level)| {\n         if level >= &privacy::AccessLevel::Reachable {\n-            Some(tcx.hir().node_to_hir_id(id))\n+            Some(id)\n         } else {\n             None\n         }"}, {"sha": "787ff8d48c1192822583fac52ca409ed2190ee83", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -2,11 +2,11 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n+use crate::hir::HirId;\n use crate::util::nodemap::{DefIdSet, FxHashMap};\n \n use std::hash::Hash;\n use std::fmt;\n-use syntax::ast::NodeId;\n use rustc_macros::HashStable;\n \n // Accessibility levels, sorted in ascending order\n@@ -27,7 +27,7 @@ pub enum AccessLevel {\n \n // Accessibility levels for reachable HIR nodes\n #[derive(Clone)]\n-pub struct AccessLevels<Id = NodeId> {\n+pub struct AccessLevels<Id = HirId> {\n     pub map: FxHashMap<Id, AccessLevel>\n }\n "}, {"sha": "a7294dbf07c000a1c92ddeb51dce5e31f2a57bac", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -354,8 +354,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n \n         // We need only trait impls here, not inherent impls, and only non-exported ones\n         if let hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n-            let node_id = self.tcx.hir().hir_to_node_id(item.hir_id);\n-            if !self.access_levels.is_reachable(node_id) {\n+            if !self.access_levels.is_reachable(item.hir_id) {\n                 self.worklist.extend(impl_item_refs.iter().map(|ii_ref| ii_ref.id.hir_id));\n \n                 let trait_def_id = match trait_ref.path.def {\n@@ -415,7 +414,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     //         use the lang items, so we need to be sure to mark them as\n     //         exported.\n     reachable_context.worklist.extend(\n-        access_levels.map.iter().map(|(id, _)| tcx.hir().node_to_hir_id(*id)));\n+        access_levels.map.iter().map(|(id, _)| *id));\n     for item in tcx.lang_items().items().iter() {\n         if let Some(did) = *item {\n             if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {"}, {"sha": "b0abe215867b5a3f3eec1a2117342442740ef224", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n         let stab = self.tcx.stability().local_stability(hir_id);\n         let is_error = !self.tcx.sess.opts.test &&\n                         stab.is_none() &&\n-                        self.access_levels.is_reachable(self.tcx.hir().hir_to_node_id(hir_id));\n+                        self.access_levels.is_reachable(hir_id);\n         if is_error {\n             self.tcx.sess.span_err(\n                 span,"}, {"sha": "ad69493bf79c5fbf494d247e5c55b3540016074c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -380,8 +380,7 @@ impl MissingDoc {\n         // It's an option so the crate root can also use this function (it doesn't\n         // have a NodeId).\n         if let Some(id) = id {\n-            let node_id = cx.tcx.hir().hir_to_node_id(id);\n-            if !cx.access_levels.is_exported(node_id) {\n+            if !cx.access_levels.is_exported(id) {\n                 return;\n             }\n         }\n@@ -557,8 +556,7 @@ impl LintPass for MissingCopyImplementations {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n-        let node_id = cx.tcx.hir().hir_to_node_id(item.hir_id);\n-        if !cx.access_levels.is_reachable(node_id) {\n+        if !cx.access_levels.is_reachable(item.hir_id) {\n             return;\n         }\n         let (def, ty) = match item.node {\n@@ -629,8 +627,7 @@ impl LintPass for MissingDebugImplementations {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n-        let node_id = cx.tcx.hir().hir_to_node_id(item.hir_id);\n-        if !cx.access_levels.is_reachable(node_id) {\n+        if !cx.access_levels.is_reachable(item.hir_id) {\n             return;\n         }\n \n@@ -1169,9 +1166,8 @@ impl UnreachablePub {\n     fn perform_lint(&self, cx: &LateContext<'_, '_>, what: &str, id: hir::HirId,\n                     vis: &hir::Visibility, span: Span, exportable: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n-        let node_id = cx.tcx.hir().hir_to_node_id(id);\n         match vis.node {\n-            hir::VisibilityKind::Public if !cx.access_levels.is_reachable(node_id) => {\n+            hir::VisibilityKind::Public if !cx.access_levels.is_reachable(id) => {\n                 if span.ctxt().outer().expn_info().is_some() {\n                     applicability = Applicability::MaybeIncorrect;\n                 }"}, {"sha": "386a121d5acacc64d58f80feee4f23d1cd330a1b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -379,8 +379,8 @@ impl VisibilityLike for Option<AccessLevel> {\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n     fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n-        cmp::min(if let Some(node_id) = find.tcx.hir().as_local_node_id(def_id) {\n-            find.access_levels.map.get(&node_id).cloned()\n+        cmp::min(if let Some(hir_id) = find.tcx.hir().as_local_hir_id(def_id) {\n+            find.access_levels.map.get(&hir_id).cloned()\n         } else {\n             Self::MAX\n         }, find.min)\n@@ -410,17 +410,15 @@ struct ReachEverythingInTheInterfaceVisitor<'b, 'a: 'b, 'tcx: 'a> {\n \n impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn get(&self, id: hir::HirId) -> Option<AccessLevel> {\n-        let node_id = self.tcx.hir().hir_to_node_id(id);\n-        self.access_levels.map.get(&node_id).cloned()\n+        self.access_levels.map.get(&id).cloned()\n     }\n \n     // Updates node level and returns the updated level.\n     fn update(&mut self, id: hir::HirId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n         let old_level = self.get(id);\n         // Accessibility levels can only grow.\n         if level > old_level {\n-            let node_id = self.tcx.hir().hir_to_node_id(id);\n-            self.access_levels.map.insert(node_id, level.unwrap());\n+            self.access_levels.map.insert(id, level.unwrap());\n             self.changed = true;\n             level\n         } else {\n@@ -1197,8 +1195,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn trait_is_public(&self, trait_id: hir::HirId) -> bool {\n         // FIXME: this would preferably be using `exported_items`, but all\n         // traits are exported currently (see `EmbargoVisitor.exported_trait`).\n-        let node_id = self.tcx.hir().hir_to_node_id(trait_id);\n-        self.access_levels.is_public(node_id)\n+        self.access_levels.is_public(trait_id)\n     }\n \n     fn check_generic_bound(&mut self, bound: &hir::GenericBound) {\n@@ -1210,8 +1207,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn item_is_public(&self, id: &hir::HirId, vis: &hir::Visibility) -> bool {\n-        let node_id = self.tcx.hir().hir_to_node_id(*id);\n-        self.access_levels.is_reachable(node_id) || vis.node.is_pub()\n+        self.access_levels.is_reachable(*id) || vis.node.is_pub()\n     }\n }\n \n@@ -1325,8 +1321,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                          hir::ImplItemKind::Const(..) |\n                                          hir::ImplItemKind::Method(..) => {\n                                              self.access_levels.is_reachable(\n-                                                self.tcx.hir().hir_to_node_id(\n-                                                    impl_item_ref.id.hir_id))\n+                                                impl_item_ref.id.hir_id)\n                                          }\n                                          hir::ImplItemKind::Existential(..) |\n                                          hir::ImplItemKind::Type(_) => false,\n@@ -1455,8 +1450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n-        let node_id = self.tcx.hir().hir_to_node_id(item.hir_id);\n-        if self.access_levels.is_reachable(node_id) {\n+        if self.access_levels.is_reachable(item.hir_id) {\n             intravisit::walk_foreign_item(self, item)\n         }\n     }\n@@ -1474,8 +1468,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                      v: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n-        let node_id = self.tcx.hir().hir_to_node_id(v.node.data.hir_id());\n-        if self.access_levels.is_reachable(node_id) {\n+        if self.access_levels.is_reachable(v.node.data.hir_id()) {\n             self.in_variant = true;\n             intravisit::walk_variant(self, v, g, item_id);\n             self.in_variant = false;"}, {"sha": "8eb2702447dbca4561f0d0e329df1e84fa76e46e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -58,17 +58,19 @@ macro_rules! down_cast_data {\n }\n \n macro_rules! access_from {\n-    ($save_ctxt:expr, $vis:expr, $id:expr) => {\n+    ($save_ctxt:expr, $item:expr, $id:expr) => {\n         Access {\n-            public: $vis.node.is_pub(),\n+            public: $item.vis.node.is_pub(),\n             reachable: $save_ctxt.access_levels.is_reachable($id),\n         }\n     };\n+}\n \n-    ($save_ctxt:expr, $item:expr) => {\n+macro_rules! access_from_vis {\n+    ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n-            public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.access_levels.is_reachable($item.id),\n+            public: $vis.node.is_pub(),\n+            reachable: $save_ctxt.access_levels.is_reachable($id),\n         }\n     };\n }\n@@ -303,7 +305,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n             method_data.value = sig_str;\n             method_data.sig = sig::method_signature(id, ident, generics, sig, &self.save_ctxt);\n-            self.dumper.dump_def(&access_from!(self.save_ctxt, vis, id), method_data);\n+            let hir_id = self.tcx.hir().node_to_hir_id(id);\n+            self.dumper.dump_def(&access_from_vis!(self.save_ctxt, vis, hir_id), method_data);\n         }\n \n         // walk arg and return types\n@@ -324,7 +327,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     fn process_struct_field_def(&mut self, field: &ast::StructField, parent_id: NodeId) {\n         let field_data = self.save_ctxt.get_field_data(field, parent_id);\n         if let Some(field_data) = field_data {\n-            self.dumper.dump_def(&access_from!(self.save_ctxt, field), field_data);\n+            let hir_id = self.tcx.hir().node_to_hir_id(field.id);\n+            self.dumper.dump_def(&access_from!(self.save_ctxt, field, hir_id), field_data);\n         }\n     }\n \n@@ -389,7 +393,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 |v| v.process_formals(&decl.inputs, &fn_data.qualname),\n             );\n             self.process_generic_params(ty_params, &fn_data.qualname, item.id);\n-            self.dumper.dump_def(&access_from!(self.save_ctxt, item), fn_data);\n+            let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n+            self.dumper.dump_def(&access_from!(self.save_ctxt, item, hir_id), fn_data);\n         }\n \n         for arg in &decl.inputs {\n@@ -409,10 +414,11 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         typ: &'l ast::Ty,\n         expr: &'l ast::Expr,\n     ) {\n+        let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n         self.nest_tables(item.id, |v| {\n             if let Some(var_data) = v.save_ctxt.get_item_data(item) {\n                 down_cast_data!(var_data, DefData, item.span);\n-                v.dumper.dump_def(&access_from!(v.save_ctxt, item), var_data);\n+                v.dumper.dump_def(&access_from!(v.save_ctxt, item, hir_id), var_data);\n             }\n             v.visit_ty(&typ);\n             v.visit_expr(expr);\n@@ -434,9 +440,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n             let span = self.span_from_span(ident.span);\n+            let hir_id = self.tcx.hir().node_to_hir_id(id);\n \n             self.dumper.dump_def(\n-                &access_from!(self.save_ctxt, vis, id),\n+                &access_from_vis!(self.save_ctxt, vis, hir_id),\n                 Def {\n                     kind: DefKind::Const,\n                     id: id_from_node_id(id, &self.save_ctxt),\n@@ -510,8 +517,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         if !self.span.filter_generated(item.ident.span) {\n             let span = self.span_from_span(item.ident.span);\n+            let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n             self.dumper.dump_def(\n-                &access_from!(self.save_ctxt, item),\n+                &access_from!(self.save_ctxt, item, hir_id),\n                 Def {\n                     kind,\n                     id: id_from_node_id(item.id, &self.save_ctxt),\n@@ -550,7 +558,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         };\n         down_cast_data!(enum_data, DefData, item.span);\n \n-        let access = access_from!(self.save_ctxt, item);\n+        let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n+        let access = access_from!(self.save_ctxt, item, hir_id);\n \n         for variant in &enum_definition.variants {\n             let name = variant.node.ident.name.to_string();\n@@ -698,8 +707,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 .iter()\n                 .map(|i| id_from_node_id(i.id, &self.save_ctxt))\n                 .collect();\n+            let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n             self.dumper.dump_def(\n-                &access_from!(self.save_ctxt, item),\n+                &access_from!(self.save_ctxt, item, hir_id),\n                 Def {\n                     kind: DefKind::Trait,\n                     id,\n@@ -757,7 +767,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     fn process_mod(&mut self, item: &ast::Item) {\n         if let Some(mod_data) = self.save_ctxt.get_item_data(item) {\n             down_cast_data!(mod_data, DefData, item.span);\n-            self.dumper.dump_def(&access_from!(self.save_ctxt, item), mod_data);\n+            let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n+            self.dumper.dump_def(&access_from!(self.save_ctxt, item, hir_id), mod_data);\n         }\n     }\n \n@@ -1197,7 +1208,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // The access is calculated using the current tree ID, but with the root tree's visibility\n         // (since nested trees don't have their own visibility).\n-        let access = access_from!(self.save_ctxt, root_item.vis, id);\n+        let hir_id = self.tcx.hir().node_to_hir_id(id);\n+        let access = access_from!(self.save_ctxt, root_item, hir_id);\n \n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n@@ -1394,9 +1406,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n                     let id = id_from_node_id(item.id, &self.save_ctxt);\n+                    let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n \n                     self.dumper.dump_def(\n-                        &access_from!(self.save_ctxt, item),\n+                        &access_from!(self.save_ctxt, item, hir_id),\n                         Def {\n                             kind: DefKind::Type,\n                             id,\n@@ -1424,9 +1437,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n                     let id = id_from_node_id(item.id, &self.save_ctxt);\n+                    let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n \n                     self.dumper.dump_def(\n-                        &access_from!(self.save_ctxt, item),\n+                        &access_from!(self.save_ctxt, item, hir_id),\n                         Def {\n                             kind: DefKind::Type,\n                             id,\n@@ -1624,7 +1638,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n     }\n \n     fn visit_foreign_item(&mut self, item: &'l ast::ForeignItem) {\n-        let access = access_from!(self.save_ctxt, item);\n+        let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n+        let access = access_from!(self.save_ctxt, item, hir_id);\n \n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {"}, {"sha": "fe6133dc0830ea54f21f0506c738473c27156241", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856b081eb2ae3264da07434debd55d734fba7eb4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=856b081eb2ae3264da07434debd55d734fba7eb4", "patch": "@@ -461,11 +461,11 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             sess.abort_if_errors();\n \n             let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n-            // Convert from a NodeId set to a DefId set since we don't always have easy access\n-            // to the map from defid -> nodeid\n+            // Convert from a HirId set to a DefId set since we don't always have easy access\n+            // to the map from defid -> hirid\n             let access_levels = AccessLevels {\n                 map: access_levels.map.iter()\n-                                    .map(|(&k, &v)| (tcx.hir().local_def_id(k), v))\n+                                    .map(|(&k, &v)| (tcx.hir().local_def_id_from_hir_id(k), v))\n                                     .collect()\n             };\n "}]}