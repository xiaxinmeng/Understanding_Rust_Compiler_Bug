{"sha": "ff14eaf0542b94dce2b4afce1b5443795c11884a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMTRlYWYwNTQyYjk0ZGNlMmI0YWZjZTFiNTQ0Mzc5NWMxMTg4NGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-06-08T10:30:58Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-28T14:15:05Z"}, "message": "Revise intrinsic-move-val test to not require knowledge of whether filling drop is in use.", "tree": {"sha": "8c4b75d3a06c35dd0a3933c13db3acc3d55f5057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c4b75d3a06c35dd0a3933c13db3acc3d55f5057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff14eaf0542b94dce2b4afce1b5443795c11884a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff14eaf0542b94dce2b4afce1b5443795c11884a", "html_url": "https://github.com/rust-lang/rust/commit/ff14eaf0542b94dce2b4afce1b5443795c11884a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff14eaf0542b94dce2b4afce1b5443795c11884a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25427a2b287a7e9e4f7fcc72ca3c341e61c1a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25427a2b287a7e9e4f7fcc72ca3c341e61c1a7d", "html_url": "https://github.com/rust-lang/rust/commit/e25427a2b287a7e9e4f7fcc72ca3c341e61c1a7d"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "eb482b3230a439ec38f580c7dc0f10903cf0c602", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ff14eaf0542b94dce2b4afce1b5443795c11884a/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14eaf0542b94dce2b4afce1b5443795c11884a/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=ff14eaf0542b94dce2b4afce1b5443795c11884a", "patch": "@@ -9,13 +9,8 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(intrinsics)]\n-// needed to check for drop fill word.\n-#![feature(filling_drop)]\n-\n-use std::mem::{self, transmute};\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n@@ -26,12 +21,80 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let x: Box<_> = box 1;\n-        let mut y = rusti::init();\n-        let mut z: *const usize = transmute(&x);\n+        // sanity check\n+        check_drops_state(0, None);\n+\n+        let mut x: Box<D> = box D(1);\n+        assert_eq!(x.0, 1);\n+\n+        // A normal overwrite, to demonstrate `check_drops_state`.\n+        x = box D(2);\n+\n+        // At this point, one destructor has run, because the\n+        // overwrite of `x` drops its initial value.\n+        check_drops_state(1, Some(1));\n+\n+        let mut y: Box<D> = rusti::init();\n+\n+        // An initial binding does not overwrite anything.\n+        check_drops_state(1, Some(1));\n+\n+        // Since `y` has been initialized via the `init` intrinsic, it\n+        // would be unsound to directly overwrite its value via normal\n+        // assignment.\n+        //\n+        // The code currently generated by the compiler is overly\n+        // accepting, however, in that it will check if `y` is itself\n+        // null and thus avoid the unsound action of attempting to\n+        // free null. In other words, if we were to do a normal\n+        // assignment like `y = box D(4);` here, it probably would not\n+        // crash today. But the plan is that it may well crash in the\n+        // future, (I believe).\n+\n+        // `x` is moved here; the manner in which this is tracked by the\n+        // compiler is hidden.\n         rusti::move_val_init(&mut y, x);\n-        assert_eq!(*y, 1);\n-        // `x` is nulled out, not directly visible\n-        assert_eq!(*z, mem::POST_DROP_USIZE);\n+\n+        // In particular, it may be tracked via a drop-flag embedded\n+        // in the value, or via a null pointer, or via\n+        // mem::POST_DROP_USIZE, or (most preferably) via a\n+        // stack-local drop flag.\n+        //\n+        // (This test used to build-in knowledge of how it was\n+        // tracked, and check that the underlying stack slot had been\n+        // set to `mem::POST_DROP_USIZE`.)\n+\n+        // But what we *can* observe is how many times the destructor\n+        // for `D` is invoked, and what the last value we saw was\n+        // during such a destructor call. We do so after the end of\n+        // this scope.\n+\n+        assert_eq!(y.0, 2);\n+        y.0 = 3;\n+        assert_eq!(y.0, 3);\n+\n+        check_drops_state(1, Some(1));\n+    }\n+\n+    check_drops_state(2, Some(3));\n+}\n+\n+static mut NUM_DROPS: i32 = 0;\n+static mut LAST_DROPPED: Option<i32> = None;\n+\n+fn check_drops_state(num_drops: i32, last_dropped: Option<i32>) {\n+    unsafe {\n+        assert_eq!(NUM_DROPS, num_drops);\n+        assert_eq!(LAST_DROPPED, last_dropped);\n+    }\n+}\n+\n+struct D(i32);\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        unsafe {\n+            NUM_DROPS += 1;\n+            LAST_DROPPED = Some(self.0);\n+        }\n     }\n }"}]}