{"sha": "1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "node_id": "C_kwDOAAsO6NoAKDE3NTVjODUzMDI4N2Q5ZjI5ZDhkMTg4ZTVkN2E1N2Y2YWEzNWNmN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T04:35:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T04:35:22Z"}, "message": "Auto merge of #102684 - JhonnyBillM:delete-target-data-layout-errors-wrapper, r=davidtwco\n\nMove `IntoDiagnostic` conformance for `TargetDataLayoutErrors` into `rustc_errors`\n\nAddressed this suggestion https://github.com/rust-lang/rust/pull/101558#issuecomment-1243830009.\n\nThis way we comply with the Coherence rule given that `IntoDiagnostic` trait is defined in `rustc_errors`, and almost all other crates depend on it.", "tree": {"sha": "da76db03664e646b046fb2c1f0eccbc266d144c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da76db03664e646b046fb2c1f0eccbc266d144c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "html_url": "https://github.com/rust-lang/rust/commit/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edabf59ca4646b3fc1a961c26431215001043f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edabf59ca4646b3fc1a961c26431215001043f6a", "html_url": "https://github.com/rust-lang/rust/commit/edabf59ca4646b3fc1a961c26431215001043f6a"}, {"sha": "be221573c853f5cdca8becab5acc600d6c79eac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be221573c853f5cdca8becab5acc600d6c79eac5", "html_url": "https://github.com/rust-lang/rust/commit/be221573c853f5cdca8becab5acc600d6c79eac5"}], "stats": {"total": 452, "additions": 229, "deletions": 223}, "files": [{"sha": "429bdd2777f912db3e7d3d57a17a1ca7074207fc", "filename": "compiler/rustc_error_messages/locales/en-US/errors.ftl", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -0,0 +1,13 @@\n+errors_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n+\n+errors_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n+\n+errors_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n+\n+errors_target_invalid_bits_size = {$err}"}, {"sha": "47127ea8e9ce8a5055fe2e6714c05cdbcf2bb10e", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -39,20 +39,6 @@ session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination`\n \n session_unsupported_dwarf_version = requested DWARF version {$dwarf_version} is greater than 5\n \n-session_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n-\n-session_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n-\n-session_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n-\n-session_target_invalid_bits_size = {$err}\n-\n session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n \n session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform"}, {"sha": "9465051dd103f5ea43b236d880081752d352f13c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -46,6 +46,7 @@ fluent_messages! {\n     compiletest => \"../locales/en-US/compiletest.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\",\n     driver => \"../locales/en-US/driver.ftl\",\n+    errors => \"../locales/en-US/errors.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n     hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n     infer => \"../locales/en-US/infer.ftl\","}, {"sha": "518c59dba536605ca17b785e43f35e8a59aaad42", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 149, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -3,21 +3,15 @@ use crate::{\n     CodeSuggestion, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Level, MultiSpan,\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n-use rustc_ast as ast;\n-use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_messages::FluentValue;\n-use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n-use rustc_span::{edition::Edition, Span, DUMMY_SP};\n-use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use std::num::ParseIntError;\n-use std::path::{Path, PathBuf};\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n /// `.disable_suggestions()` was called on the `Diagnostic`.\n@@ -49,119 +43,6 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n-pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n-\n-impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.0.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n-    fn from(t: &'a dyn fmt::Display) -> Self {\n-        DiagnosticArgFromDisplay(t)\n-    }\n-}\n-\n-impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n-    fn from(t: &'a T) -> Self {\n-        DiagnosticArgFromDisplay(t)\n-    }\n-}\n-\n-macro_rules! into_diagnostic_arg_using_display {\n-    ($( $ty:ty ),+ $(,)?) => {\n-        $(\n-            impl IntoDiagnosticArg for $ty {\n-                fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-                    self.to_string().into_diagnostic_arg()\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-into_diagnostic_arg_using_display!(\n-    i8,\n-    u8,\n-    i16,\n-    u16,\n-    i32,\n-    u32,\n-    i64,\n-    u64,\n-    i128,\n-    u128,\n-    std::io::Error,\n-    std::num::NonZeroU32,\n-    hir::Target,\n-    Edition,\n-    Ident,\n-    MacroRulesNormalizedIdent,\n-    ParseIntError,\n-    StackProtector,\n-    &TargetTriple,\n-    SplitDebuginfo\n-);\n-\n-impl IntoDiagnosticArg for bool {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        if self {\n-            DiagnosticArgValue::Str(Cow::Borrowed(\"true\"))\n-        } else {\n-            DiagnosticArgValue::Str(Cow::Borrowed(\"false\"))\n-        }\n-    }\n-}\n-\n-impl IntoDiagnosticArg for char {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self)))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for Symbol {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.to_ident_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl<'a> IntoDiagnosticArg for &'a str {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl IntoDiagnosticArg for String {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self))\n-    }\n-}\n-\n-impl<'a> IntoDiagnosticArg for &'a Path {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for PathBuf {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for usize {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Number(self)\n-    }\n-}\n-\n-impl IntoDiagnosticArg for PanicStrategy {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.desc().to_string()))\n-    }\n-}\n-\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {\n@@ -171,34 +52,6 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     }\n }\n \n-impl IntoDiagnosticArg for hir::ConstContext {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n-            hir::ConstContext::ConstFn => \"constant function\",\n-            hir::ConstContext::Static(_) => \"static\",\n-            hir::ConstContext::Const => \"constant\",\n-        }))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::Path {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(&self)))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::token::Token {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(pprust::token_to_string(&self))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::token::TokenKind {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(pprust::token_kind_to_string(&self))\n-    }\n-}\n-\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]"}, {"sha": "860f24871bcdc25471176c1d7bac732ae16d7795", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -0,0 +1,207 @@\n+use crate::{\n+    fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n+};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n+\n+use rustc_ast as ast;\n+use rustc_ast_pretty::pprust;\n+use rustc_hir as hir;\n+use rustc_span::edition::Edition;\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n+use std::borrow::Cow;\n+use std::fmt;\n+use std::num::ParseIntError;\n+use std::path::{Path, PathBuf};\n+\n+pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n+\n+impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.0.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a dyn fmt::Display) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a T) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+macro_rules! into_diagnostic_arg_using_display {\n+    ($( $ty:ty ),+ $(,)?) => {\n+        $(\n+            impl IntoDiagnosticArg for $ty {\n+                fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+                    self.to_string().into_diagnostic_arg()\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+into_diagnostic_arg_using_display!(\n+    i8,\n+    u8,\n+    i16,\n+    u16,\n+    i32,\n+    u32,\n+    i64,\n+    u64,\n+    i128,\n+    u128,\n+    std::io::Error,\n+    std::num::NonZeroU32,\n+    hir::Target,\n+    Edition,\n+    Ident,\n+    MacroRulesNormalizedIdent,\n+    ParseIntError,\n+    StackProtector,\n+    &TargetTriple,\n+    SplitDebuginfo\n+);\n+\n+impl IntoDiagnosticArg for bool {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        if self {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"true\"))\n+        } else {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"false\"))\n+        }\n+    }\n+}\n+\n+impl IntoDiagnosticArg for char {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self)))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for Symbol {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_ident_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> IntoDiagnosticArg for &'a str {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl IntoDiagnosticArg for String {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self))\n+    }\n+}\n+\n+impl<'a> IntoDiagnosticArg for &'a Path {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for PathBuf {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for usize {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Number(self)\n+    }\n+}\n+\n+impl IntoDiagnosticArg for PanicStrategy {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.desc().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for hir::ConstContext {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            hir::ConstContext::ConstFn => \"constant function\",\n+            hir::ConstContext::Static(_) => \"static\",\n+            hir::ConstContext::Const => \"constant\",\n+        }))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::Path {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(&self)))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::token::Token {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_to_string(&self))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::token::TokenKind {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_kind_to_string(&self))\n+    }\n+}\n+\n+impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n+        let mut diag;\n+        match self {\n+            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_address_space);\n+                diag.set_arg(\"addr_space\", addr_space);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_bits);\n+                diag.set_arg(\"kind\", kind);\n+                diag.set_arg(\"bit\", bit);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::MissingAlignment { cause } => {\n+                diag = handler.struct_fatal(fluent::errors::target_missing_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n+                diag = handler.struct_fatal(fluent::errors::target_inconsistent_architecture);\n+                diag.set_arg(\"dl\", dl);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n+                diag = handler.struct_fatal(fluent::errors::target_inconsistent_pointer_width);\n+                diag.set_arg(\"pointer_size\", pointer_size);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_bits_size);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+        }\n+    }\n+}"}, {"sha": "9fafbe4bd407eb61d9dc847a5626adf601c55240", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -51,6 +51,7 @@ use termcolor::{Color, ColorSpec};\n pub mod annotate_snippet_emitter_writer;\n mod diagnostic;\n mod diagnostic_builder;\n+mod diagnostic_impls;\n pub mod emitter;\n pub mod json;\n mod lock;\n@@ -371,10 +372,11 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n-    DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n+    AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n+    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n+pub use diagnostic_impls::DiagnosticArgFromDisplay;\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output."}, {"sha": "ad63f6dbb545355f01e58ac29909819e8cbfe918", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -56,7 +56,6 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n-use rustc_session::errors::TargetDataLayoutErrorsWrapper;\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1247,7 +1246,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n+            s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "f2ee52262adeea43b7cb3bdf3935370509efe3d3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -3,7 +3,6 @@\n \n pub use crate::options::*;\n \n-use crate::errors::TargetDataLayoutErrorsWrapper;\n use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n@@ -900,7 +899,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n+        sess.emit_fatal(err);\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "d12796f289e96ad0e328c297cd1ef5822bb2933c", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::{\n };\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n-use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n #[derive(Diagnostic)]\n@@ -47,59 +46,6 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-pub struct TargetDataLayoutErrorsWrapper<'a>(pub TargetDataLayoutErrors<'a>);\n-\n-impl IntoDiagnostic<'_, !> for TargetDataLayoutErrorsWrapper<'_> {\n-    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n-        let mut diag;\n-        match self.0 {\n-            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_address_space);\n-                diag.set_arg(\"addr_space\", addr_space);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_bits);\n-                diag.set_arg(\"kind\", kind);\n-                diag.set_arg(\"bit\", bit);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::MissingAlignment { cause } => {\n-                diag = handler.struct_fatal(fluent::session::target_missing_alignment);\n-                diag.set_arg(\"cause\", cause);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_alignment);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n-                diag = handler.struct_fatal(fluent::session::target_inconsistent_architecture);\n-                diag.set_arg(\"dl\", dl);\n-                diag.set_arg(\"target\", target);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n-                diag = handler.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n-                diag.set_arg(\"pointer_size\", pointer_size);\n-                diag.set_arg(\"target\", target);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_bits_size);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(session::not_circumvent_feature)]\n pub struct NotCircumventFeature;"}]}