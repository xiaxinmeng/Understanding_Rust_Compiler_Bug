{"sha": "1999ed798e5a77087cde68d2fb955d768ecfb5a4", "node_id": "C_kwDOAAsO6NoAKDE5OTllZDc5OGU1YTc3MDg3Y2RlNjhkMmZiOTU1ZDc2OGVjZmI1YTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-29T11:19:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T11:19:38Z"}, "message": "Rollup merge of #98801 - joshtriplett:file-create-new, r=thomcc\n\nAdd a `File::create_new` constructor\n\nWe have `File::create` for creating a file or opening an existing file,\nbut the secure way to guarantee creating a new file requires a longhand\ninvocation via `OpenOptions`.\n\nAdd `File::create_new` to handle this case, to make it easier for people\nto do secure file creation.", "tree": {"sha": "1dd7fe9373264c0c258a8a3947391c23c4ca5b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd7fe9373264c0c258a8a3947391c23c4ca5b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1999ed798e5a77087cde68d2fb955d768ecfb5a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDKDKCRBK7hj4Ov3rIwAAah0IAKj34sGAGyesJhMosuv11v+D\nJF2EBpcrqOkSXX2QWlBW9dNPPq692/R5Buc6cAUpB+k9cRXUk/4Tt+ACobuPI8dD\nUjVv9c+nKYwZHE6dFxKEMr/9APvrUv4bEN0IY8OY174ZUu9YvPX9tVlNLPXa+unq\nKV/P08FFF4Y4zy/mknvCb7UDa2eKJWz036ox+7HrFiDYNUx2IP7qsQUZRgCHxjZF\n+RkvyTESb65/r1jbdpaT00F/OPEE7hxnppxsplP4op2MU3JO+ZWRG+gszbTDGWT5\n2iRE6yCPnW1thnj+jDpJG6FIJPl/fJVQlNmSaAcjxkoaFNAtk1Y7OvGdfA1uaI8=\n=m0P9\n-----END PGP SIGNATURE-----\n", "payload": "tree 1dd7fe9373264c0c258a8a3947391c23c4ca5b5e\nparent 4cac0bf66256947edce7039d8bf6a5832f85c64d\nparent e540425a2425819be4717ff0e4217c40cc52c99f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661771978 +0530\ncommitter GitHub <noreply@github.com> 1661771978 +0530\n\nRollup merge of #98801 - joshtriplett:file-create-new, r=thomcc\n\nAdd a `File::create_new` constructor\n\nWe have `File::create` for creating a file or opening an existing file,\nbut the secure way to guarantee creating a new file requires a longhand\ninvocation via `OpenOptions`.\n\nAdd `File::create_new` to handle this case, to make it easier for people\nto do secure file creation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1999ed798e5a77087cde68d2fb955d768ecfb5a4", "html_url": "https://github.com/rust-lang/rust/commit/1999ed798e5a77087cde68d2fb955d768ecfb5a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1999ed798e5a77087cde68d2fb955d768ecfb5a4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cac0bf66256947edce7039d8bf6a5832f85c64d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cac0bf66256947edce7039d8bf6a5832f85c64d", "html_url": "https://github.com/rust-lang/rust/commit/4cac0bf66256947edce7039d8bf6a5832f85c64d"}, {"sha": "e540425a2425819be4717ff0e4217c40cc52c99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e540425a2425819be4717ff0e4217c40cc52c99f", "html_url": "https://github.com/rust-lang/rust/commit/e540425a2425819be4717ff0e4217c40cc52c99f"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "28a2c99f7e5e3e8d2ef77993fc6eb7e09564e5d8", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1999ed798e5a77087cde68d2fb955d768ecfb5a4/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999ed798e5a77087cde68d2fb955d768ecfb5a4/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=1999ed798e5a77087cde68d2fb955d768ecfb5a4", "patch": "@@ -377,6 +377,35 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n+    /// Creates a new file in read-write mode; error if the file exists.\n+    ///\n+    /// This function will create a file if it does not exist, or return an error if it does. This\n+    /// way, if the call succeeds, the file returned is guaranteed to be new.\n+    ///\n+    /// This option is useful because it is atomic. Otherwise between checking whether a file\n+    /// exists and creating a new one, the file may have been created by another process (a TOCTOU\n+    /// race condition / attack).\n+    ///\n+    /// This can also be written using\n+    /// `File::options().read(true).write(true).create_new(true).open(...)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(file_create_new)]\n+    ///\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create_new(\"foo.txt\")?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"file_create_new\", issue = \"none\")]\n+    pub fn create_new<P: AsRef<Path>>(path: P) -> io::Result<File> {\n+        OpenOptions::new().read(true).write(true).create_new(true).open(path.as_ref())\n+    }\n+\n     /// Returns a new OpenOptions object.\n     ///\n     /// This function returns a new OpenOptions object that you can use to"}]}