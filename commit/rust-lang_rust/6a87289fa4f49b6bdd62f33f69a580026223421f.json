{"sha": "6a87289fa4f49b6bdd62f33f69a580026223421f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODcyODlmYTRmNDliNmJkZDYyZjMzZjY5YTU4MDAyNjIyMzQyMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T10:13:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T10:13:11Z"}, "message": "Auto merge of #50339 - nnethercote:lazy-Printer-buf, r=michaelwoerister\n\nExtend Printer::buf on demand.\n\nSo that 55 entries (at 48 bytes each) don't need to be eagerly\ninitialized on creation.\n\nThis speeds up numerous rust-perf benchmark runs, by up to 3%.\n```\ncrates.io-check\n        avg: -2.4%      min: -3.7%      max: -1.1%\nencoding-check\n        avg: -2.1%      min: -2.9%      max: -1.2%\ncrates.io-opt\n        avg: -1.3%      min: -2.7%      max: -0.1%\ncrates.io\n        avg: -1.4%      min: -2.7%      max: -0.3%\nencoding-opt\n        avg: -1.1%      min: -2.5%      max: 0.1%\nencoding\n        avg: -1.3%      min: -2.4%      max: -0.3%\nhyper-check\n        avg: -1.7%      min: -2.3%      max: -0.9%\nregex-check\n        avg: -1.5%      min: -1.9%      max: -0.7%\npiston-image-check\n        avg: -0.9%      min: -1.8%      max: -0.5%\nhyper\n        avg: -1.0%      min: -1.7%      max: -0.3%\nhyper-opt\n        avg: -0.9%      min: -1.7%      max: -0.1%\nsyn-check\n        avg: -1.0%      min: -1.5%      max: -0.6%\nclap-rs\n        avg: -0.3%      min: -1.5%      max: 0.2%\nregex-opt\n        avg: -0.6%      min: -1.5%      max: -0.0%\nregression-31157-check\n        avg: -1.1%      min: -1.4%      max: -0.7%\nregex\n        avg: -0.7%      min: -1.3%      max: -0.1%\nclap-rs-check\n        avg: -0.5%      min: -1.2%      max: 0.1%\nsyn-opt\n        avg: -0.5%      min: -1.1%      max: -0.1%\nsyn\n        avg: -0.5%      min: -1.1%      max: -0.2%\nserde-opt\n        avg: -0.3%      min: -1.1%      max: 0.1%\npiston-image-opt\n        avg: -0.4%      min: -1.1%      max: -0.0%\npiston-image\n        avg: -0.4%      min: -1.0%      max: -0.0%\n```", "tree": {"sha": "e8e3a61af5cd6573aa5139cf4d63c4457da47db9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e3a61af5cd6573aa5139cf4d63c4457da47db9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a87289fa4f49b6bdd62f33f69a580026223421f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a87289fa4f49b6bdd62f33f69a580026223421f", "html_url": "https://github.com/rust-lang/rust/commit/6a87289fa4f49b6bdd62f33f69a580026223421f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a87289fa4f49b6bdd62f33f69a580026223421f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3994f58f41818bf31efeda6af41e8060978ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3994f58f41818bf31efeda6af41e8060978ca5", "html_url": "https://github.com/rust-lang/rust/commit/5f3994f58f41818bf31efeda6af41e8060978ca5"}, {"sha": "989815d5670826078d9984a3515eeb68235a4687", "url": "https://api.github.com/repos/rust-lang/rust/commits/989815d5670826078d9984a3515eeb68235a4687", "html_url": "https://github.com/rust-lang/rust/commit/989815d5670826078d9984a3515eeb68235a4687"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "e7bd369053cf9c98aed73e40fdfd3e7b2f961686", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a87289fa4f49b6bdd62f33f69a580026223421f/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a87289fa4f49b6bdd62f33f69a580026223421f/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=6a87289fa4f49b6bdd62f33f69a580026223421f", "patch": "@@ -247,12 +247,14 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n     debug!(\"mk_printer {}\", linewidth);\n     Printer {\n         out,\n-        buf_len: n,\n+        buf_max_len: n,\n         margin: linewidth as isize,\n         space: linewidth as isize,\n         left: 0,\n         right: 0,\n-        buf: vec![BufEntry { token: Token::Eof, size: 0 }; n],\n+        // Initialize a single entry; advance_right() will extend it on demand\n+        // up to `buf_max_len` elements.\n+        buf: vec![BufEntry::default()],\n         left_total: 0,\n         right_total: 0,\n         scan_stack: VecDeque::new(),\n@@ -263,7 +265,7 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n \n pub struct Printer<'a> {\n     out: Box<io::Write+'a>,\n-    buf_len: usize,\n+    buf_max_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n     /// Number of spaces left on line\n@@ -297,6 +299,12 @@ struct BufEntry {\n     size: isize,\n }\n \n+impl Default for BufEntry {\n+    fn default() -> Self {\n+        BufEntry { token: Token::Eof, size: 0 }\n+    }\n+}\n+\n impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n@@ -322,7 +330,9 @@ impl<'a> Printer<'a> {\n                 self.right_total = 1;\n                 self.left = 0;\n                 self.right = 0;\n-            } else { self.advance_right(); }\n+            } else {\n+                self.advance_right();\n+            }\n             debug!(\"pp Begin({})/buffer Vec<{},{}>\",\n                    b.offset, self.left, self.right);\n             self.buf[self.right] = BufEntry { token: token, size: -self.right_total };\n@@ -349,7 +359,9 @@ impl<'a> Printer<'a> {\n                 self.right_total = 1;\n                 self.left = 0;\n                 self.right = 0;\n-            } else { self.advance_right(); }\n+            } else {\n+                self.advance_right();\n+            }\n             debug!(\"pp Break({})/buffer Vec<{},{}>\",\n                    b.offset, self.left, self.right);\n             self.check_stack(0);\n@@ -408,7 +420,11 @@ impl<'a> Printer<'a> {\n     }\n     pub fn advance_right(&mut self) {\n         self.right += 1;\n-        self.right %= self.buf_len;\n+        self.right %= self.buf_max_len;\n+        // Extend the buf if necessary.\n+        if self.right == self.buf.len() {\n+            self.buf.push(BufEntry::default());\n+        }\n         assert_ne!(self.right, self.left);\n     }\n     pub fn advance_left(&mut self) -> io::Result<()> {\n@@ -438,7 +454,7 @@ impl<'a> Printer<'a> {\n             }\n \n             self.left += 1;\n-            self.left %= self.buf_len;\n+            self.left %= self.buf_max_len;\n \n             left_size = self.buf[self.left].size;\n         }"}]}