{"sha": "36aa7c143672af30bfcca01e5924b326f93fd922", "node_id": "C_kwDOAAsO6NoAKDM2YWE3YzE0MzY3MmFmMzBiZmNjYTAxZTU5MjRiMzI2ZjkzZmQ5MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T04:15:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T04:15:52Z"}, "message": "Auto merge of #96804 - compiler-errors:rollup-1mc6aw3, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #96660 ([bootstrap] Give a better error when trying to run a path with no registered step)\n - #96701 (update `jemallocator` example to use 2018 edition import syntax)\n - #96746 (Fix an ICE on #96738)\n - #96758 (bootstrap: bsd platform flags for split debuginfo)\n - #96778 (Remove closures on `expect_local` to apply `#[track_caller]`)\n - #96781 (Fix an incorrect link in The Unstable Book)\n - #96783 (Link to correct issue in issue-95034 known-bug)\n - #96801 (Add regression test for #96319)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f0f09cb15aa4b22eba2831f837f6c1764630626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0f09cb15aa4b22eba2831f837f6c1764630626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36aa7c143672af30bfcca01e5924b326f93fd922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36aa7c143672af30bfcca01e5924b326f93fd922", "html_url": "https://github.com/rust-lang/rust/commit/36aa7c143672af30bfcca01e5924b326f93fd922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36aa7c143672af30bfcca01e5924b326f93fd922/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e5570460b2bb925021dc667ead2a9834ea88cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e5570460b2bb925021dc667ead2a9834ea88cb", "html_url": "https://github.com/rust-lang/rust/commit/f6e5570460b2bb925021dc667ead2a9834ea88cb"}, {"sha": "fe526695d1b274921e6df2b13e19035bb9a46742", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe526695d1b274921e6df2b13e19035bb9a46742", "html_url": "https://github.com/rust-lang/rust/commit/fe526695d1b274921e6df2b13e19035bb9a46742"}], "stats": {"total": 117, "additions": 100, "deletions": 17}, "files": [{"sha": "3976c0622218762721f6ae350816929eb5b3dbf4", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -281,7 +281,12 @@ impl DefId {\n     #[inline]\n     #[track_caller]\n     pub fn expect_local(self) -> LocalDefId {\n-        self.as_local().unwrap_or_else(|| panic!(\"DefId::expect_local: `{:?}` isn't local\", self))\n+        // NOTE: `match` below is required to apply `#[track_caller]`,\n+        // i.e. don't use closures.\n+        match self.as_local() {\n+            Some(local_def_id) => local_def_id,\n+            None => panic!(\"DefId::expect_local: `{:?}` isn't local\", self),\n+        }\n     }\n \n     #[inline]"}, {"sha": "294a42a114804c73cc83a1bbba13c15f56db5487", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -368,24 +368,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.is_fn_ty(rcvr_ty, span) {\n                     if let SelfSource::MethodCall(expr) = source {\n                         let suggest = if let ty::FnDef(def_id, _) = rcvr_ty.kind() {\n-                            let local_id = def_id.expect_local();\n-                            let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n-                            let node = tcx.hir().get(hir_id);\n-                            let fields = node.tuple_fields();\n-\n-                            if let Some(fields) = fields\n-                                && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n-                                    Some((fields, of))\n+                            if let Some(local_id) = def_id.as_local() {\n+                                let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n+                                let node = tcx.hir().get(hir_id);\n+                                let fields = node.tuple_fields();\n+                                if let Some(fields) = fields\n+                                    && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n+                                        Some((fields.len(), of))\n+                                } else {\n+                                    None\n+                                }\n                             } else {\n-                                None\n+                                // The logic here isn't smart but `associated_item_def_ids`\n+                                // doesn't work nicely on local.\n+                                if let DefKind::Ctor(of, _) = tcx.def_kind(def_id) {\n+                                    let parent_def_id = tcx.parent(*def_id);\n+                                    Some((tcx.associated_item_def_ids(parent_def_id).len(), of))\n+                                } else {\n+                                    None\n+                                }\n                             }\n                         } else {\n                             None\n                         };\n \n                         // If the function is a tuple constructor, we recommend that they call it\n                         if let Some((fields, kind)) = suggest {\n-                            suggest_call_constructor(expr.span, kind, fields.len(), &mut err);\n+                            suggest_call_constructor(expr.span, kind, fields, &mut err);\n                         } else {\n                             // General case\n                             err.span_label("}, {"sha": "63c527b64da480212fe4427743596ec175780d28", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -42,8 +42,6 @@\n //! [`GlobalAlloc`] trait. This type can be provided by an external library:\n //!\n //! ```rust,ignore (demonstrates crates.io usage)\n-//! extern crate jemallocator;\n-//!\n //! use jemallocator::Jemalloc;\n //!\n //! #[global_allocator]"}, {"sha": "fe60c6da92bfb0f67bf93ae8a735b5c88689b509", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -284,7 +284,19 @@ impl StepDescription {\n             }\n \n             if !attempted_run {\n-                panic!(\"error: no rules matched {}\", path.display());\n+                eprintln!(\n+                    \"error: no `{}` rules matched '{}'\",\n+                    builder.kind.as_str(),\n+                    path.display()\n+                );\n+                eprintln!(\n+                    \"help: run `x.py {} --help --verbose` to show a list of available paths\",\n+                    builder.kind.as_str()\n+                );\n+                eprintln!(\n+                    \"note: if you are adding a new Step to bootstrap itself, make sure you register it with `describe!`\"\n+                );\n+                std::process::exit(1);\n             }\n         }\n     }\n@@ -1405,8 +1417,12 @@ impl<'a> Builder<'a> {\n         // FIXME(davidtwco): #[cfg(not(bootstrap))] - #95612 needs to be in the bootstrap compiler\n         // for this conditional to be removed.\n         if !target.contains(\"windows\") || compiler.stage >= 1 {\n-            if target.contains(\"linux\") || target.contains(\"windows\") || target.contains(\"openbsd\")\n-            {\n+            let needs_unstable_opts = target.contains(\"linux\")\n+                || target.contains(\"windows\")\n+                || target.contains(\"bsd\")\n+                || target.contains(\"dragonfly\");\n+\n+            if needs_unstable_opts {\n                 rustflags.arg(\"-Zunstable-options\");\n             }\n             match self.config.rust_split_debuginfo {"}, {"sha": "56fe9a31bfe3d5f22ed7a9325949b016af929492", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -102,7 +102,7 @@ The components of a lint plugin are:\n \n Lint passes are syntax traversals, but they run at a late stage of compilation\n where type information is available. `rustc`'s [built-in\n-lints](https://github.com/rust-lang/rust/blob/master/src/librustc_session/lint/builtin.rs)\n+lints](https://github.com/rust-lang/rust/blob/master/compiler/rustc_lint_defs/src/builtin.rs)\n mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n "}, {"sha": "b5ff9112a202631135742d4f63f3c95a56bbefe9", "filename": "src/test/incremental/issue-96319-coinductive-cycle.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fincremental%2Fissue-96319-coinductive-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fincremental%2Fissue-96319-coinductive-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-96319-coinductive-cycle.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -0,0 +1,34 @@\n+// edition:2018\n+// revisions: rpass1 rpass2\n+\n+pub struct Stmt {\n+    pub stmt_type: StmtKind,\n+    #[cfg(rpass1)] pub stmt_tag: Option<LintTag>,\n+    #[cfg(rpass2)] pub renamed_tag: Option<LintTag>,\n+}\n+pub struct LintTag;\n+pub enum StmtKind {\n+    If(If),\n+    Block(&'static str),\n+    Return(Return),\n+}\n+pub struct If {\n+    pub condition: Function,\n+}\n+pub struct Return {\n+    pub value: Function,\n+}\n+pub struct Function {\n+    pub parameters: Box<Stmt>,\n+}\n+pub fn start_late_pass(stmt_receiver: Box<Stmt>) {\n+    spawn(async { stmt_receiver });\n+}\n+\n+pub fn spawn<T>(_: T)\n+where\n+    T: Send,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "aee6fe61ba812de09510a2340bb865eaf1ea6a4b", "filename": "src/test/ui/hrtb/issue-95034.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -17,6 +17,8 @@\n \n // This should not ICE.\n \n+// Refer to the issue for more minimized versions.\n+\n use std::{\n     future::Future,\n     marker::PhantomData,", "previous_filename": "src/test/ui/hrtb/issue-94034.rs"}, {"sha": "1d8329142fc5c0a142f078d1106713135539f7ad", "filename": "src/test/ui/hrtb/issue-95034.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.stderr?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "previous_filename": "src/test/ui/hrtb/issue-94034.stderr"}, {"sha": "7f1d1428eb9b4c054e2f4f02ade89c8653884891", "filename": "src/test/ui/typeck/issue-96738.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    Some.nonexistent_method(); //~ ERROR: no method named `nonexistent_method` found\n+}"}, {"sha": "58c83a36a3bdc1c4998583ad5812a1bb8fc52d9c", "filename": "src/test/ui/typeck/issue-96738.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36aa7c143672af30bfcca01e5924b326f93fd922/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr?ref=36aa7c143672af30bfcca01e5924b326f93fd922", "patch": "@@ -0,0 +1,16 @@\n+error[E0599]: no method named `nonexistent_method` found for fn item `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n+  --> $DIR/issue-96738.rs:2:10\n+   |\n+LL |     Some.nonexistent_method();\n+   |     ---- ^^^^^^^^^^^^^^^^^^ method not found in `fn(_) -> Option<_> {Option::<_>::Some}`\n+   |     |\n+   |     this is the constructor of an enum variant\n+   |\n+help: call the constructor\n+   |\n+LL |     (Some)(_).nonexistent_method();\n+   |     +    ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}