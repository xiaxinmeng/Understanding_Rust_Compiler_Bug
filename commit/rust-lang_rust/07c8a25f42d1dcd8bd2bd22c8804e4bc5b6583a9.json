{"sha": "07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzhhMjVmNDJkMWRjZDhiZDJiZDIyYzg4MDRlNGJjNWI2NTgzYTk=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-10-31T14:14:27Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-10-31T14:14:27Z"}, "message": "Remove unused type aliases", "tree": {"sha": "1c25ab282c6959f91a14efe369824add5b07829f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c25ab282c6959f91a14efe369824add5b07829f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "html_url": "https://github.com/rust-lang/rust/commit/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4497196ba56e5839bf4ef674851fd06d942c5544", "url": "https://api.github.com/repos/rust-lang/rust/commits/4497196ba56e5839bf4ef674851fd06d942c5544", "html_url": "https://github.com/rust-lang/rust/commit/4497196ba56e5839bf4ef674851fd06d942c5544"}], "stats": {"total": 25, "additions": 2, "deletions": 23}, "files": [{"sha": "5e61c2ec7a292b588a727f33d05c560b74339dcd", "filename": "src/librustc_borrowck/borrowck/mir/abs_domain.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -21,13 +21,11 @@\n //! `a[x]` would still overlap them both. But that is not this\n //! representation does today.)\n \n-use rustc::mir::{Lvalue, LvalueElem};\n-use rustc::mir::{Operand, Projection, ProjectionElem};\n+use rustc::mir::LvalueElem;\n+use rustc::mir::{Operand, ProjectionElem};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct AbstractOperand;\n-pub type AbstractProjection<'tcx> =\n-    Projection<'tcx, Lvalue<'tcx>, AbstractOperand>;\n pub type AbstractElem<'tcx> =\n     ProjectionElem<'tcx, AbstractOperand>;\n "}, {"sha": "f85309cf518181b3441a070e061db9834f489a9c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -300,8 +300,6 @@ struct BorrowStats {\n     guaranteed_paths: usize\n }\n \n-pub type BckResult<'tcx, T> = Result<T, BckError<'tcx>>;\n-\n ///////////////////////////////////////////////////////////////////////////\n // Loans and loan paths\n "}, {"sha": "7cef246b6cb2c5b6dc18c3abda5f0109a4694a70", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -32,8 +32,6 @@ use super::file_format;\n \n pub type DirtyNodes = FnvHashSet<DepNode<DefPathIndex>>;\n \n-type CleanEdges = Vec<(DepNode<DefId>, DepNode<DefId>)>;\n-\n /// If we are in incremental mode, and a previous dep-graph exists,\n /// then load up those nodes/edges that are still valid into the\n /// dep-graph for this session. (This is assumed to be running very"}, {"sha": "ed46c1d96ad1705261918b3602cff02b859a4f6c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -12,7 +12,6 @@ use {Module, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::util::nodemap::FnvHashMap;\n use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast;\n@@ -80,8 +79,6 @@ pub struct LegacyBinding<'a> {\n     span: Span,\n }\n \n-pub type LegacyImports = FnvHashMap<ast::Name, (Rc<SyntaxExtension>, Span)>;\n-\n impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> ast::NodeId {\n         self.session.next_node_id()"}, {"sha": "4d3361c1873f032b33fd490f76a2e31409098fd1", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -48,7 +48,6 @@ use std;\n use llvm::{ValueRef, True, IntEQ, IntNE};\n use rustc::ty::layout;\n use rustc::ty::{self, Ty, AdtKind};\n-use syntax::attr;\n use build::*;\n use common::*;\n use debuginfo::DebugLoc;\n@@ -66,8 +65,6 @@ pub enum BranchKind {\n     Single\n }\n \n-type Hint = attr::ReprAttr;\n-\n #[derive(Copy, Clone)]\n pub struct MaybeSizedValue {\n     pub value: ValueRef,\n@@ -119,9 +116,6 @@ fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n     }\n }\n \n-/// This represents the (GEP) indices to follow to get to the discriminant field\n-pub type DiscrField = Vec<usize>;\n-\n /// LLVM-level types are a little complicated.\n ///\n /// C-like enums need to be actual ints, not wrapped in a struct,"}, {"sha": "1aa502fc443ec7bcb8d176ffdfada8b46c26be28", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -171,8 +171,6 @@ struct ConvertedBinding<'tcx> {\n     span: Span,\n }\n \n-type TraitAndProjections<'tcx> = (ty::PolyTraitRef<'tcx>, Vec<ty::PolyProjectionPredicate<'tcx>>);\n-\n /// Dummy type used for the `Self` of a `TraitRef` created for converting\n /// a trait object, and which gets removed in `ExistentialTraitRef`.\n /// This type must not appear anywhere in other converted types."}, {"sha": "73e9f1a500437f2d6de3d0e9b4b724b8a5d5881e", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=07c8a25f42d1dcd8bd2bd22c8804e4bc5b6583a9", "patch": "@@ -113,10 +113,6 @@ pub struct FullBucket<K, V, M> {\n     table: M,\n }\n \n-pub type EmptyBucketImm<'table, K, V> = EmptyBucket<K, V, &'table RawTable<K, V>>;\n-pub type FullBucketImm<'table, K, V> = FullBucket<K, V, &'table RawTable<K, V>>;\n-\n-pub type EmptyBucketMut<'table, K, V> = EmptyBucket<K, V, &'table mut RawTable<K, V>>;\n pub type FullBucketMut<'table, K, V> = FullBucket<K, V, &'table mut RawTable<K, V>>;\n \n pub enum BucketState<K, V, M> {"}]}