{"sha": "9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "node_id": "C_kwDOAAsO6NoAKDk5NDJjYzQyNWJhMzFjZjQ3ZWJmOTQ5OGVkM2NkNThmMDY0YjJiODk", "commit": {"author": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-19T21:07:33Z"}, "committer": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-27T17:08:17Z"}, "message": "Fix 14142: Annotate lifetime paramaters in doctest runnables", "tree": {"sha": "94034fcbe184759f728f29a409da6586e7aea42c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94034fcbe184759f728f29a409da6586e7aea42c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "html_url": "https://github.com/rust-lang/rust/commit/9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/comments", "author": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c867cbf9b6aea8d73c433ed85c6619e7714f3f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c867cbf9b6aea8d73c433ed85c6619e7714f3f7f", "html_url": "https://github.com/rust-lang/rust/commit/c867cbf9b6aea8d73c433ed85c6619e7714f3f7f"}], "stats": {"total": 161, "additions": 155, "deletions": 6}, "files": [{"sha": "b2323915c1fd5c43e6a9ccbfeed2c6c93592085f", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "patch": "@@ -459,6 +459,13 @@ impl Resolver {\n         })\n     }\n \n+    pub fn generic_params(&self) -> Option<&Interned<GenericParams>> {\n+        self.scopes().find_map(|scope| match scope {\n+            Scope::GenericParams { params, .. } => Some(params),\n+            _ => None,\n+        })\n+    }\n+\n     pub fn body_owner(&self) -> Option<DefWithBodyId> {\n         self.scopes().find_map(|scope| match scope {\n             Scope::ExprScope(it) => Some(it.owner),"}, {"sha": "28d87e14e15a5e418f482bdc534b496ea244e2ec", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "patch": "@@ -42,7 +42,7 @@ use hir_def::{\n     adt::VariantData,\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, ExprOrPatId, LabelId, Pat, PatId},\n-    generics::{TypeOrConstParamData, TypeParamProvenance},\n+    generics::{TypeOrConstParamData, TypeParamProvenance, LifetimeParamData},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n@@ -1170,6 +1170,22 @@ impl Adt {\n         }\n     }\n \n+    /// Returns the lifetime of the DataType\n+    pub fn lifetime(&self, db: &dyn HirDatabase) -> Option<LifetimeParamData> {\n+        let resolver = match self {\n+            Adt::Struct(s) => s.id.resolver(db.upcast()),\n+            Adt::Union(u) => u.id.resolver(db.upcast()),\n+            Adt::Enum(e) => e.id.resolver(db.upcast()),\n+        };\n+        resolver.generic_params().and_then(|gp| {\n+            (&gp.lifetimes)\n+            .iter()\n+            // there should only be a single lifetime\n+            // but `Arena` requires to use an iterator\n+            .nth(0)\n+        }).map(|arena| arena.1.clone())\n+    }\n+\n     pub fn as_enum(&self) -> Option<Enum> {\n         if let Self::Enum(v) = self {\n             Some(*v)\n@@ -3339,6 +3355,25 @@ impl Type {\n             .map(move |ty| self.derived(ty))\n     }\n \n+    /// Combines lifetime indicators and type arguments into a single `Vec<SmolStr>`\n+    pub fn lifetime_and_type_arguments<'a>(&'a self, db: &'a dyn HirDatabase) -> Vec<SmolStr> {\n+        let mut names = if let Some(lt) = self\n+            .as_adt()\n+            .and_then(|a| {\n+                a.lifetime(db)\n+                .and_then(|lt| Some((&lt.name).to_smol_str().clone()))\n+            }) {\n+                vec![lt]\n+            } else {\n+                vec![]\n+            };\n+\n+        for ty in self.type_arguments() {\n+            names.push(SmolStr::new(ty.display(db).to_string()))\n+        }\n+        names\n+    }\n+\n     pub fn iterate_method_candidates_with_traits<T>(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "2e8f3906afc55ea589a7641dff5b62c61be2a691", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 112, "deletions": 5, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9942cc425ba31cf47ebf9498ed3cd58f064b2b89/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use ast::HasName;\n use cfg::CfgExpr;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n+use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n@@ -370,9 +370,9 @@ pub(crate) fn runnable_impl(\n     let nav = def.try_to_nav(sema.db)?;\n     let ty = def.self_ty(sema.db);\n     let adt_name = ty.as_adt()?.name(sema.db);\n-    let mut ty_args = ty.type_arguments().peekable();\n+    let mut ty_args = ty.lifetime_and_type_arguments(sema.db).into_iter().peekable();\n     let params = if ty_args.peek().is_some() {\n-        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty.display(sema.db))))\n+        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty)))\n     } else {\n         String::new()\n     };\n@@ -436,13 +436,13 @@ fn module_def_doctest(db: &RootDatabase, def: Definition) -> Option<Runnable> {\n                 let ty = imp.self_ty(db);\n                 if let Some(adt) = ty.as_adt() {\n                     let name = adt.name(db);\n-                    let mut ty_args = ty.type_arguments().peekable();\n+                    let mut ty_args = ty.lifetime_and_type_arguments(db).into_iter().peekable();\n                     format_to!(path, \"{}\", name);\n                     if ty_args.peek().is_some() {\n                         format_to!(\n                             path,\n                             \"<{}>\",\n-                            ty_args.format_with(\",\", |ty, cb| cb(&ty.display(db)))\n+                            ty_args.format_with(\",\", |ty, cb| cb(&ty))\n                         );\n                     }\n                     format_to!(path, \"::{}\", def_name);\n@@ -999,6 +999,113 @@ impl Data {\n         );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a>;\n+impl Data<'a> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 52..106,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_and_types() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, T, U>;\n+impl<T, U> Data<'a, T, U> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 70..124,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,T,U>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n     #[test]\n     fn test_runnables_module() {\n         check("}]}