{"sha": "aafe6db079ab22225f89fc573e4e86e89e8d825a", "node_id": "C_kwDOAAsO6NoAKGFhZmU2ZGIwNzlhYjIyMjI1Zjg5ZmM1NzNlNGU4NmU4OWU4ZDgyNWE", "commit": {"author": {"name": "Neutron3529", "email": "qweytr_1@163.com", "date": "2022-11-03T09:08:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-03T09:08:10Z"}, "message": "fix the overflow warning.\n\nbenchmark result:\r\n```\r\n$ cargo bench\r\n   Compiling div-euclid v0.1.0 (/me/div-euclid)\r\n    Finished bench [optimized] target(s) in 1.01s\r\n     Running unittests src/lib.rs (target/release/deps/div_euclid-7a4530ca7817d1ef)\r\n\r\nrunning 7 tests\r\ntest tests::it_works ... ignored\r\ntest tests::bench_aaabs     ... bench:  10,498,793 ns/iter (+/- 104,360)\r\ntest tests::bench_aadefault ... bench:  11,061,862 ns/iter (+/- 94,107)\r\ntest tests::bench_abs       ... bench:  10,477,193 ns/iter (+/- 81,942)\r\ntest tests::bench_default   ... bench:  10,622,983 ns/iter (+/- 25,119)\r\ntest tests::bench_zzabs     ... bench:  10,481,971 ns/iter (+/- 43,787)\r\ntest tests::bench_zzdefault ... bench:  11,074,976 ns/iter (+/- 29,633)\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 6 measured; 0 filtered out; finished in 19.35s\r\n```\r\nbenchmark code:\r\n```rust\r\n#![feature(test)]\r\nextern crate test;\r\n\r\n#[inline(always)]\r\nfn rem_euclid(a:i32,rhs:i32)->i32{\r\n    let r = a % rhs;\r\n    if r < 0 {\r\n        // if rhs is `integer::MIN`, rhs.wrapping_abs() == rhs.wrapping_abs,\r\n        // thus r.wrapping_add(rhs.wrapping_abs()) == r.wrapping_add(rhs) == r - rhs,\r\n        // which suits our need.\r\n        // otherwise, rhs.wrapping_abs() == -rhs, which won't overflow since r is negative.\r\n        r.wrapping_add(rhs.wrapping_abs())\r\n    } else {\r\n        r\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use test::Bencher;\r\n    use rand::prelude::*;\r\n    use rand::rngs::SmallRng;\r\n    const N:i32=1000;\r\n    #[test]\r\n    fn it_works() {\r\n        let a: i32 = 7; // or any other integer type\r\n        let b = 4;\r\n\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n\r\n        for i in &d {\r\n            for j in &n {\r\n                assert_eq!(i.rem_euclid(*j),rem_euclid(*i,*j));\r\n            }\r\n        }\r\n\r\n        assert_eq!(rem_euclid(a,b), 3);\r\n        assert_eq!(rem_euclid(-a,b), 1);\r\n        assert_eq!(rem_euclid(a,-b), 3);\r\n        assert_eq!(rem_euclid(-a,-b), 1);\r\n    }\r\n\r\n\r\n    #[bench]\r\n    fn bench_aaabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_aadefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_abs(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_default(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_zzabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_zzdefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n}\r\n```", "tree": {"sha": "7c4feefe6e194337d6ce4b5287ff69d5e0e03b8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c4feefe6e194337d6ce4b5287ff69d5e0e03b8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafe6db079ab22225f89fc573e4e86e89e8d825a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjY4T6CRBK7hj4Ov3rIwAAka4IALARWlwT+d1sZmUeKsSq7aKU\n/bEoG4rVbQ/FuGOkooOuS9sCtg44E0iv+RLBgaGS1eYMW8RzL2QYsn1QB7UFV56F\nJgmx1J/GU35+/9PHJsT2HiJJ8BpILvXq61Qsl1jZVXScGU/gWkEG+QaNcdjIz5y0\nFd1jvFk8wYn5Sd3hl2qq9di+25syG0YlNVRhKdTHmzA7SxcSAnZmDxttGENORa6M\nZpGkGGfCw6ABkJHKOMC0gcGE820uOdhmCQG6Hpf6enxMTXJMuNaLMMnRQrkLkT++\nckNIQrYmTDCR3BElnh5cX73hlTvv7nCC9hvR9DjOVZ3igjopfHOXgUzbQcZbL4E=\n=p+Sz\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c4feefe6e194337d6ce4b5287ff69d5e0e03b8a\nparent 3ad4d24751d2e11c8b98dcac5e30720e138de788\nauthor Neutron3529 <qweytr_1@163.com> 1667466490 +0800\ncommitter GitHub <noreply@github.com> 1667466490 +0800\n\nfix the overflow warning.\n\nbenchmark result:\r\n```\r\n$ cargo bench\r\n   Compiling div-euclid v0.1.0 (/me/div-euclid)\r\n    Finished bench [optimized] target(s) in 1.01s\r\n     Running unittests src/lib.rs (target/release/deps/div_euclid-7a4530ca7817d1ef)\r\n\r\nrunning 7 tests\r\ntest tests::it_works ... ignored\r\ntest tests::bench_aaabs     ... bench:  10,498,793 ns/iter (+/- 104,360)\r\ntest tests::bench_aadefault ... bench:  11,061,862 ns/iter (+/- 94,107)\r\ntest tests::bench_abs       ... bench:  10,477,193 ns/iter (+/- 81,942)\r\ntest tests::bench_default   ... bench:  10,622,983 ns/iter (+/- 25,119)\r\ntest tests::bench_zzabs     ... bench:  10,481,971 ns/iter (+/- 43,787)\r\ntest tests::bench_zzdefault ... bench:  11,074,976 ns/iter (+/- 29,633)\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 6 measured; 0 filtered out; finished in 19.35s\r\n```\r\nbenchmark code:\r\n```rust\r\n#![feature(test)]\r\nextern crate test;\r\n\r\n#[inline(always)]\r\nfn rem_euclid(a:i32,rhs:i32)->i32{\r\n    let r = a % rhs;\r\n    if r < 0 {\r\n        // if rhs is `integer::MIN`, rhs.wrapping_abs() == rhs.wrapping_abs,\r\n        // thus r.wrapping_add(rhs.wrapping_abs()) == r.wrapping_add(rhs) == r - rhs,\r\n        // which suits our need.\r\n        // otherwise, rhs.wrapping_abs() == -rhs, which won't overflow since r is negative.\r\n        r.wrapping_add(rhs.wrapping_abs())\r\n    } else {\r\n        r\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use test::Bencher;\r\n    use rand::prelude::*;\r\n    use rand::rngs::SmallRng;\r\n    const N:i32=1000;\r\n    #[test]\r\n    fn it_works() {\r\n        let a: i32 = 7; // or any other integer type\r\n        let b = 4;\r\n\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n\r\n        for i in &d {\r\n            for j in &n {\r\n                assert_eq!(i.rem_euclid(*j),rem_euclid(*i,*j));\r\n            }\r\n        }\r\n\r\n        assert_eq!(rem_euclid(a,b), 3);\r\n        assert_eq!(rem_euclid(-a,b), 1);\r\n        assert_eq!(rem_euclid(a,-b), 3);\r\n        assert_eq!(rem_euclid(-a,-b), 1);\r\n    }\r\n\r\n\r\n    #[bench]\r\n    fn bench_aaabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_aadefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_abs(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_default(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_zzabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_zzdefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n}\r\n```"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafe6db079ab22225f89fc573e4e86e89e8d825a", "html_url": "https://github.com/rust-lang/rust/commit/aafe6db079ab22225f89fc573e4e86e89e8d825a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafe6db079ab22225f89fc573e4e86e89e8d825a/comments", "author": {"login": "Neutron3529", "id": 26130174, "node_id": "MDQ6VXNlcjI2MTMwMTc0", "avatar_url": "https://avatars.githubusercontent.com/u/26130174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Neutron3529", "html_url": "https://github.com/Neutron3529", "followers_url": "https://api.github.com/users/Neutron3529/followers", "following_url": "https://api.github.com/users/Neutron3529/following{/other_user}", "gists_url": "https://api.github.com/users/Neutron3529/gists{/gist_id}", "starred_url": "https://api.github.com/users/Neutron3529/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Neutron3529/subscriptions", "organizations_url": "https://api.github.com/users/Neutron3529/orgs", "repos_url": "https://api.github.com/users/Neutron3529/repos", "events_url": "https://api.github.com/users/Neutron3529/events{/privacy}", "received_events_url": "https://api.github.com/users/Neutron3529/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad4d24751d2e11c8b98dcac5e30720e138de788", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad4d24751d2e11c8b98dcac5e30720e138de788", "html_url": "https://github.com/rust-lang/rust/commit/3ad4d24751d2e11c8b98dcac5e30720e138de788"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "36b6d6e774eaf4154461ebd9b1ec9b29155f1c65", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aafe6db079ab22225f89fc573e4e86e89e8d825a/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafe6db079ab22225f89fc573e4e86e89e8d825a/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=aafe6db079ab22225f89fc573e4e86e89e8d825a", "patch": "@@ -2067,7 +2067,15 @@ macro_rules! int_impl {\n         #[rustc_inherit_overflow_checks]\n         pub const fn rem_euclid(self, rhs: Self) -> Self {\n             let r = self % rhs;\n-            if r < 0 { r + rhs.abs() } else { r }\n+            if r < 0 {\n+                // if rhs is `integer::MIN`, rhs.wrapping_abs() == rhs.wrapping_abs,\n+                // thus r.wrapping_add(rhs.wrapping_abs()) == r.wrapping_add(rhs) == r - rhs,\n+                // which suits our need.\n+                // otherwise, rhs.wrapping_abs() == -rhs, which won't overflow since r is negative.\n+                r.wrapping_add(rhs.wrapping_abs())\n+            } else {\n+                r\n+            }\n         }\n \n         /// Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity."}]}