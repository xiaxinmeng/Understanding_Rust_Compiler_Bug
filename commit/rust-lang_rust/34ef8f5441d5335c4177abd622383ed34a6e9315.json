{"sha": "34ef8f5441d5335c4177abd622383ed34a6e9315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZWY4ZjU0NDFkNTMzNWM0MTc3YWJkNjIyMzgzZWQzNGE2ZTkzMTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-02-15T23:47:34Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-02-17T14:18:33Z"}, "message": "Move to using an extern type for opaqueness\n\nThis prevents accidental dereferences and so forth of the Void type, as well as\ncleaning up the error message to reference Opaque rather than the more\ncomplicated PhantomData type.", "tree": {"sha": "1290ad5c4459d3b637a715931500675dc02e6905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1290ad5c4459d3b637a715931500675dc02e6905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ef8f5441d5335c4177abd622383ed34a6e9315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ef8f5441d5335c4177abd622383ed34a6e9315", "html_url": "https://github.com/rust-lang/rust/commit/34ef8f5441d5335c4177abd622383ed34a6e9315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ef8f5441d5335c4177abd622383ed34a6e9315/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c45e4540be20b7027ee6364eefc444b432b82ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c45e4540be20b7027ee6364eefc444b432b82ba", "html_url": "https://github.com/rust-lang/rust/commit/6c45e4540be20b7027ee6364eefc444b432b82ba"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "0c51a802faba38cef6765c5f2fe0d7c3cdcc8ef1", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34ef8f5441d5335c4177abd622383ed34a6e9315/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ef8f5441d5335c4177abd622383ed34a6e9315/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=34ef8f5441d5335c4177abd622383ed34a6e9315", "patch": "@@ -238,16 +238,8 @@ pub struct Formatter<'a> {\n // NB. Argument is essentially an optimized partially applied formatting function,\n // equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\n \n-struct Void {\n-    _priv: (),\n-    /// Erases all oibits, because `Void` erases the type of the object that\n-    /// will be used to produce formatted output. Since we do not know what\n-    /// oibits the real types have (and they can have any or none), we need to\n-    /// take the most conservative approach and forbid all oibits.\n-    ///\n-    /// It was added after #45197 showed that one could share a `!Sync`\n-    /// object across threads by passing it into `format_args!`.\n-    _oibit_remover: PhantomData<*mut dyn Fn()>,\n+extern \"C\" {\n+    type Opaque;\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n@@ -259,8 +251,8 @@ struct Void {\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n-    value: &'a Void,\n-    formatter: fn(&Void, &mut Formatter<'_>) -> Result,\n+    value: &'a Opaque,\n+    formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n }\n \n impl<'a> ArgumentV1<'a> {"}, {"sha": "c8439764effc331dfbd3d2a2a076da8fccdda4fb", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34ef8f5441d5335c4177abd622383ed34a6e9315/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ef8f5441d5335c4177abd622383ed34a6e9315/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=34ef8f5441d5335c4177abd622383ed34a6e9315", "patch": "@@ -1,34 +1,30 @@\n-error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:8:5\n    |\n LL | fn send<T: Send>(_: T) {}\n    |    ----    ---- required by this bound in `send`\n ...\n LL |     send(format_args!(\"{:?}\", c));\n-   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n-   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n-   = note: required because it appears within the type `core::fmt::Void`\n-   = note: required because it appears within the type `&core::fmt::Void`\n+   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `core::fmt::Opaque`\n+   = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n \n-error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:9:5\n    |\n LL | fn sync<T: Sync>(_: T) {}\n    |    ----    ---- required by this bound in `sync`\n ...\n LL |     sync(format_args!(\"{:?}\", c));\n-   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n-   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n-   = note: required because it appears within the type `core::fmt::Void`\n-   = note: required because it appears within the type `&core::fmt::Void`\n+   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `core::fmt::Opaque`\n+   = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`"}]}