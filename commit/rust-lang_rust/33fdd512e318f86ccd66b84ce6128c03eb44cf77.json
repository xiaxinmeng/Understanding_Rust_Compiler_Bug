{"sha": "33fdd512e318f86ccd66b84ce6128c03eb44cf77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmRkNTEyZTMxOGY4NmNjZDY2Yjg0Y2U2MTI4YzAzZWI0NGNmNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-25T13:25:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-25T13:25:15Z"}, "message": "Merge #8987\n\n8987: Fix lowering of FnOnce() without return type r=flodiebold a=flodiebold\n\nThis should result in an implicit `-> ()`, not leaving out the binding.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "146d712f24c290963bb268e443f02b59dd79f26a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146d712f24c290963bb268e443f02b59dd79f26a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fdd512e318f86ccd66b84ce6128c03eb44cf77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrPq7CRBK7hj4Ov3rIwAAUe4IAJnO57yx8dGUEfpWzb+eEMOD\nvffu+wnNc82uH0zwhqbmAZWYLpiL3GTdJD8euLY41CVVqYxO+mD9M+cgNyCsA3CJ\nXyWmkl9BbnmpZ9PQ3erxoilg6XuXwZPqv2tovRJ/+M4LKB+G58q7Vj1bjXNITQ2B\nOFLxjklxzzjSoQJ/FZi0gCrh4Z9Cmb298b/3jbbRPCrEFgNDXtsnhBaX/S1Eh82U\nlJOqAnDJ+TfvWLzKPy50AyglXQnkxLadQ7uy+8W4SnruOiz3UYxicnM8MbWq+wdP\nnK33dyoPbu8sdbItOE/TIE5Gjc7SL7SDuppQp4QJ6M+Rv1bHqheBteJ/uooLhwY=\n=o8c2\n-----END PGP SIGNATURE-----\n", "payload": "tree 146d712f24c290963bb268e443f02b59dd79f26a\nparent f3cfd8afb6db1ee0a8449655703172a0c8cf5411\nparent 7c6f764ad6d7c6fc964be9fd2e96da717e2b2cc1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621949115 +0000\ncommitter GitHub <noreply@github.com> 1621949115 +0000\n\nMerge #8987\n\n8987: Fix lowering of FnOnce() without return type r=flodiebold a=flodiebold\n\nThis should result in an implicit `-> ()`, not leaving out the binding.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fdd512e318f86ccd66b84ce6128c03eb44cf77", "html_url": "https://github.com/rust-lang/rust/commit/33fdd512e318f86ccd66b84ce6128c03eb44cf77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fdd512e318f86ccd66b84ce6128c03eb44cf77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cfd8afb6db1ee0a8449655703172a0c8cf5411", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cfd8afb6db1ee0a8449655703172a0c8cf5411", "html_url": "https://github.com/rust-lang/rust/commit/f3cfd8afb6db1ee0a8449655703172a0c8cf5411"}, {"sha": "7c6f764ad6d7c6fc964be9fd2e96da717e2b2cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6f764ad6d7c6fc964be9fd2e96da717e2b2cc1", "html_url": "https://github.com/rust-lang/rust/commit/7c6f764ad6d7c6fc964be9fd2e96da717e2b2cc1"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "54ede73939498ec9fa9e93a238bc41cbd0915f3c", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=33fdd512e318f86ccd66b84ce6128c03eb44cf77", "patch": "@@ -205,26 +205,29 @@ fn lower_generic_args_from_fn_path(\n ) -> Option<GenericArgs> {\n     let mut args = Vec::new();\n     let mut bindings = Vec::new();\n-    if let Some(params) = params {\n-        let mut param_types = Vec::new();\n-        for param in params.params() {\n-            let type_ref = TypeRef::from_ast_opt(&ctx, param.ty());\n-            param_types.push(type_ref);\n-        }\n-        let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n-        args.push(arg);\n+    let params = params?;\n+    let mut param_types = Vec::new();\n+    for param in params.params() {\n+        let type_ref = TypeRef::from_ast_opt(&ctx, param.ty());\n+        param_types.push(type_ref);\n     }\n+    let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n+    args.push(arg);\n     if let Some(ret_type) = ret_type {\n         let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.ty());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n             type_ref: Some(type_ref),\n             bounds: Vec::new(),\n         });\n-    }\n-    if args.is_empty() && bindings.is_empty() {\n-        None\n     } else {\n-        Some(GenericArgs { args, has_self_type: false, bindings })\n+        // -> ()\n+        let type_ref = TypeRef::Tuple(Vec::new());\n+        bindings.push(AssociatedTypeBinding {\n+            name: name![Output],\n+            type_ref: Some(type_ref),\n+            bounds: Vec::new(),\n+        });\n     }\n+    Some(GenericArgs { args, has_self_type: false, bindings })\n }"}, {"sha": "44f843bf3838d42d5a02e85f0a01bafe562aa498", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=33fdd512e318f86ccd66b84ce6128c03eb44cf77", "patch": "@@ -778,8 +778,10 @@ fn write_bounds_like_dyn_trait(\n             }\n             WhereClause::AliasEq(alias_eq) if is_fn_trait => {\n                 is_fn_trait = false;\n-                write!(f, \" -> \")?;\n-                alias_eq.ty.hir_fmt(f)?;\n+                if !alias_eq.ty.is_unit() {\n+                    write!(f, \" -> \")?;\n+                    alias_eq.ty.hir_fmt(f)?;\n+                }\n             }\n             WhereClause::AliasEq(AliasEq { ty, alias }) => {\n                 // in types in actual Rust, these will always come"}, {"sha": "6cd8786eae1e646246c4d654971e81a26a89cb0c", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fdd512e318f86ccd66b84ce6128c03eb44cf77/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=33fdd512e318f86ccd66b84ce6128c03eb44cf77", "patch": "@@ -3078,7 +3078,7 @@ fn infer_fn_trait_arg() {\n \n #[test]\n fn infer_box_fn_arg() {\n-    // The type mismatch is a bug\n+    // The type mismatch is because we don't define Unsize and CoerceUnsized\n     check_infer_with_mismatches(\n         r#\"\n //- /lib.rs deps:std\n@@ -3138,7 +3138,7 @@ fn foo() {\n             555..557 'ps': {unknown}\n             559..561 '{}': ()\n             568..569 'f': Box<dyn FnOnce(&Option<i32>)>\n-            568..573 'f(&s)': FnOnce::Output<dyn FnOnce(&Option<i32>), (&Option<i32>,)>\n+            568..573 'f(&s)': ()\n             570..572 '&s': &Option<i32>\n             571..572 's': Option<i32>\n             549..562: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|{unknown}| -> ()>\n@@ -3608,3 +3608,25 @@ fn main() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn fn_returning_unit() {\n+    check_infer_with_mismatches(\n+        r#\"\n+#[lang = \"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+}\n+\n+fn test<F: FnOnce()>(f: F) {\n+    let _: () = f();\n+}\"#,\n+        expect![[r#\"\n+            82..83 'f': F\n+            88..112 '{     ...f(); }': ()\n+            98..99 '_': ()\n+            106..107 'f': F\n+            106..109 'f()': ()\n+        \"#]],\n+    );\n+}"}]}