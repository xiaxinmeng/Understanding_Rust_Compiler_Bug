{"sha": "da140814682407ee326d36f5256bc883899a7388", "node_id": "C_kwDOAAsO6NoAKGRhMTQwODE0NjgyNDA3ZWUzMjZkMzZmNTI1NmJjODgzODk5YTczODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T10:31:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T10:31:14Z"}, "message": "Auto merge of #102906 - nbdd0121:mir, r=wesleywiser,tmiasko\n\nRefactor unwind in MIR\n\nThis makes unwinding from current `Option<BasicBlock>` into\n```rust\nenum UnwindAction {\n\tContinue,\n\tCleanup(BasicBlock),\n\tUnreachable,\n\tTerminate,\n}\n```\n\ncc `@JakobDegen` `@RalfJung` `@Amanieu`", "tree": {"sha": "65282e3c91ce435de66de6b5b2cb88f53042e278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65282e3c91ce435de66de6b5b2cb88f53042e278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da140814682407ee326d36f5256bc883899a7388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da140814682407ee326d36f5256bc883899a7388", "html_url": "https://github.com/rust-lang/rust/commit/da140814682407ee326d36f5256bc883899a7388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da140814682407ee326d36f5256bc883899a7388/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f6104a1f62a0eec7d2e2ccdc07709fcc4c83f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f6104a1f62a0eec7d2e2ccdc07709fcc4c83f0", "html_url": "https://github.com/rust-lang/rust/commit/b6f6104a1f62a0eec7d2e2ccdc07709fcc4c83f0"}, {"sha": "ea69dad8fa5db5fcd99fa0e4156efdb7a01b3f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea69dad8fa5db5fcd99fa0e4156efdb7a01b3f3a", "html_url": "https://github.com/rust-lang/rust/commit/ea69dad8fa5db5fcd99fa0e4156efdb7a01b3f3a"}], "stats": {"total": 2144, "additions": 1218, "deletions": 926}, "files": [{"sha": "e2d04324f3b62a7c2bf7d03457b39b022dbe7297", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@ use crate::{\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_middle::mir::visit::{MirVisitable, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, Local, Location};\n+use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n \n pub(crate) fn find<'tcx>(\n@@ -70,7 +70,10 @@ impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n                             block_data\n                                 .terminator()\n                                 .successors()\n-                                .filter(|&bb| Some(&Some(bb)) != block_data.terminator().unwind())\n+                                .filter(|&bb| {\n+                                    Some(&mir::UnwindAction::Cleanup(bb))\n+                                        != block_data.terminator().unwind()\n+                                })\n                                 .map(|bb| Location { statement_index: 0, block: bb }),\n                         );\n                     }"}, {"sha": "498d254da65361bbfbf1b87c3a24089caab15304", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -125,7 +125,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 args,\n                 destination,\n                 target: _,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -135,7 +135,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 }\n                 self.mutate_place(location, *destination, Deep);\n             }\n-            TerminatorKind::Assert { cond, expected: _, msg, target: _, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(location, cond);\n                 use rustc_middle::mir::AssertKind;\n                 if let AssertKind::BoundsCheck { len, index } = msg {\n@@ -173,7 +173,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match op {\n@@ -198,7 +198,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 }\n             }\n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {"}, {"sha": "3d876155fc9521ba82d0d57d2fa53f4008a6d31d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -740,7 +740,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 args,\n                 destination,\n                 target: _,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -750,7 +750,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 }\n                 self.mutate_place(loc, (*destination, span), Deep, flow_state);\n             }\n-            TerminatorKind::Assert { cond, expected: _, msg, target: _, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n                 use rustc_middle::mir::AssertKind;\n                 if let AssertKind::BoundsCheck { len, index } = msg {\n@@ -770,7 +770,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match op {\n@@ -801,7 +801,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             }\n \n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n@@ -845,7 +845,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 }\n             }\n \n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }"}, {"sha": "fb80552304236f4fa2fb37032227c86c69feb42d", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1300,7 +1300,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         match &term.kind {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n@@ -1584,7 +1584,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, block_data, \"resume on non-cleanup block!\")\n                 }\n             }\n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 if !is_cleanup {\n                     span_mirbug!(self, block_data, \"abort on non-cleanup block!\")\n                 }\n@@ -1610,49 +1610,29 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::Drop { target, unwind, .. }\n-            | TerminatorKind::Assert { target, cleanup: unwind, .. } => {\n+            | TerminatorKind::Assert { target, unwind, .. } => {\n                 self.assert_iscleanup(body, block_data, target, is_cleanup);\n-                if let Some(unwind) = unwind {\n-                    if is_cleanup {\n-                        span_mirbug!(self, block_data, \"unwind on cleanup block\")\n-                    }\n-                    self.assert_iscleanup(body, block_data, unwind, true);\n-                }\n+                self.assert_iscleanup_unwind(body, block_data, unwind, is_cleanup);\n             }\n-            TerminatorKind::Call { ref target, cleanup, .. } => {\n+            TerminatorKind::Call { ref target, unwind, .. } => {\n                 if let &Some(target) = target {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n-                if let Some(cleanup) = cleanup {\n-                    if is_cleanup {\n-                        span_mirbug!(self, block_data, \"cleanup on cleanup block\")\n-                    }\n-                    self.assert_iscleanup(body, block_data, cleanup, true);\n-                }\n+                self.assert_iscleanup_unwind(body, block_data, unwind, is_cleanup);\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n                 self.assert_iscleanup(body, block_data, real_target, is_cleanup);\n                 self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n                 self.assert_iscleanup(body, block_data, real_target, is_cleanup);\n-                if let Some(unwind) = unwind {\n-                    if is_cleanup {\n-                        span_mirbug!(self, block_data, \"cleanup in cleanup block via false unwind\");\n-                    }\n-                    self.assert_iscleanup(body, block_data, unwind, true);\n-                }\n+                self.assert_iscleanup_unwind(body, block_data, unwind, is_cleanup);\n             }\n-            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n+            TerminatorKind::InlineAsm { destination, unwind, .. } => {\n                 if let Some(target) = destination {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n-                if let Some(cleanup) = cleanup {\n-                    if is_cleanup {\n-                        span_mirbug!(self, block_data, \"cleanup on cleanup block\")\n-                    }\n-                    self.assert_iscleanup(body, block_data, cleanup, true);\n-                }\n+                self.assert_iscleanup_unwind(body, block_data, unwind, is_cleanup);\n             }\n         }\n     }\n@@ -1669,6 +1649,29 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    fn assert_iscleanup_unwind(\n+        &mut self,\n+        body: &Body<'tcx>,\n+        ctxt: &dyn fmt::Debug,\n+        unwind: UnwindAction,\n+        is_cleanup: bool,\n+    ) {\n+        match unwind {\n+            UnwindAction::Cleanup(unwind) => {\n+                if is_cleanup {\n+                    span_mirbug!(self, ctxt, \"unwind on cleanup block\")\n+                }\n+                self.assert_iscleanup(body, ctxt, unwind, true);\n+            }\n+            UnwindAction::Continue => {\n+                if is_cleanup {\n+                    span_mirbug!(self, ctxt, \"unwind on cleanup block\")\n+                }\n+            }\n+            UnwindAction::Unreachable | UnwindAction::Terminate => (),\n+        }\n+    }\n+\n     fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {\n         match body.local_kind(local) {\n             LocalKind::ReturnPointer | LocalKind::Arg => {"}, {"sha": "f5301f9f7f10b30077d16892c01b8a77d5a35d49", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -345,7 +345,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Return => {\n                 crate::abi::codegen_return(fx);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected, msg, target, unwind: _ } => {\n                 if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n                     let target = fx.get_block(*target);\n                     fx.bcx.ins().jump(target, &[]);\n@@ -450,7 +450,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 destination,\n                 target,\n                 fn_span,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n             } => {\n                 fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n@@ -470,7 +470,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 options,\n                 destination,\n                 line_spans: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {\n                     fx.tcx.sess.span_fatal(\n@@ -488,7 +488,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                     *destination,\n                 );\n             }\n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 codegen_panic_cannot_unwind(fx, source_info);\n             }\n             TerminatorKind::Resume => {"}, {"sha": "e87f4e258911a60f807d22319155e7cc95e2881f", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -549,7 +549,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     TerminatorKind::Goto { .. }\n                     | TerminatorKind::SwitchInt { .. }\n                     | TerminatorKind::Resume\n-                    | TerminatorKind::Abort\n+                    | TerminatorKind::Terminate\n                     | TerminatorKind::Return\n                     | TerminatorKind::Unreachable\n                     | TerminatorKind::Drop { .. }"}, {"sha": "115a41050d2a3f5804896a3c1e39e9c0c3e929e2", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -284,19 +284,19 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n             match data.terminator().kind {\n                 TerminatorKind::Goto { .. }\n                 | TerminatorKind::Resume\n-                | TerminatorKind::Abort\n+                | TerminatorKind::Terminate\n                 | TerminatorKind::Return\n                 | TerminatorKind::GeneratorDrop\n                 | TerminatorKind::Unreachable\n                 | TerminatorKind::SwitchInt { .. }\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::FalseEdge { .. }\n                 | TerminatorKind::FalseUnwind { .. } => { /* nothing to do */ }\n-                TerminatorKind::Call { cleanup: unwind, .. }\n-                | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n-                | TerminatorKind::Assert { cleanup: unwind, .. }\n+                TerminatorKind::Call { unwind, .. }\n+                | TerminatorKind::InlineAsm { unwind, .. }\n+                | TerminatorKind::Assert { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {\n-                    if let Some(unwind) = unwind {\n+                    if let mir::UnwindAction::Cleanup(unwind) = unwind {\n                         debug!(\n                             \"cleanup_kinds: {:?}/{:?} registering {:?} as funclet\",\n                             bb, data, unwind"}, {"sha": "dd86977817fbc1992c57de107f86a5c1164734b6", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 118, "deletions": 109, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     }\n \n     /// Call `fn_ptr` of `fn_abi` with the arguments `llargs`, the optional\n-    /// return destination `destination` and the cleanup function `cleanup`.\n+    /// return destination `destination` and the unwind action `unwind`.\n     fn do_call<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n@@ -156,31 +156,31 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         fn_ptr: Bx::Value,\n         llargs: &[Bx::Value],\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,\n-        cleanup: Option<mir::BasicBlock>,\n+        mut unwind: mir::UnwindAction,\n         copied_constant_arguments: &[PlaceRef<'tcx, <Bx as BackendTypes>::Value>],\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         // If there is a cleanup block and the function we're calling can unwind, then\n         // do an invoke, otherwise do a call.\n         let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n-        let unwind_block = if let Some(cleanup) = cleanup.filter(|_| fn_abi.can_unwind) {\n-            Some(self.llbb_with_cleanup(fx, cleanup))\n-        } else if fx.mir[self.bb].is_cleanup\n-            && fn_abi.can_unwind\n-            && !base::wants_msvc_seh(fx.cx.tcx().sess)\n-        {\n-            // Exception must not propagate out of the execution of a cleanup (doing so\n-            // can cause undefined behaviour). We insert a double unwind guard for\n-            // functions that can potentially unwind to protect against this.\n-            //\n-            // This is not necessary for SEH which does not use successive unwinding\n-            // like Itanium EH. EH frames in SEH are different from normal function\n-            // frames and SEH will abort automatically if an exception tries to\n-            // propagate out from cleanup.\n-            Some(fx.double_unwind_guard())\n-        } else {\n-            None\n+        if !fn_abi.can_unwind {\n+            unwind = mir::UnwindAction::Unreachable;\n+        }\n+\n+        let unwind_block = match unwind {\n+            mir::UnwindAction::Cleanup(cleanup) => Some(self.llbb_with_cleanup(fx, cleanup)),\n+            mir::UnwindAction::Continue => None,\n+            mir::UnwindAction::Unreachable => None,\n+            mir::UnwindAction::Terminate => {\n+                if fx.mir[self.bb].is_cleanup && base::wants_msvc_seh(fx.cx.tcx().sess) {\n+                    // SEH will abort automatically if an exception tries to\n+                    // propagate out from cleanup.\n+                    None\n+                } else {\n+                    Some(fx.terminate_block())\n+                }\n+            }\n         };\n \n         if let Some(unwind_block) = unwind_block {\n@@ -234,7 +234,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         }\n     }\n \n-    /// Generates inline assembly with optional `destination` and `cleanup`.\n+    /// Generates inline assembly with optional `destination` and `unwind`.\n     fn do_inlineasm<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n@@ -244,11 +244,18 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         instance: Instance<'_>,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n-        if let Some(cleanup) = cleanup {\n+        let unwind_target = match unwind {\n+            mir::UnwindAction::Cleanup(cleanup) => Some(self.llbb_with_cleanup(fx, cleanup)),\n+            mir::UnwindAction::Terminate => Some(fx.terminate_block()),\n+            mir::UnwindAction::Continue => None,\n+            mir::UnwindAction::Unreachable => None,\n+        };\n+\n+        if let Some(cleanup) = unwind_target {\n             let ret_llbb = if let Some(target) = destination {\n                 fx.llbb(target)\n             } else {\n@@ -261,7 +268,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n                 options,\n                 line_spans,\n                 instance,\n-                Some((ret_llbb, self.llbb_with_cleanup(fx, cleanup), self.funclet(fx))),\n+                Some((ret_llbb, cleanup, self.funclet(fx))),\n             );\n             MergingSucc::False\n         } else {\n@@ -431,7 +438,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         location: mir::Place<'tcx>,\n         target: mir::BasicBlock,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         let ty = location.ty(self.mir, bx.tcx()).ty;\n@@ -552,7 +559,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         expected: bool,\n         msg: &mir::AssertMessage<'tcx>,\n         target: mir::BasicBlock,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         let span = terminator.source_info.span;\n@@ -618,12 +625,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(bx, Some(span), lang_item);\n \n         // Codegen the actual panic invoke/call.\n-        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &args, None, cleanup, &[], false);\n+        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &args, None, unwind, &[], false);\n         assert_eq!(merging_succ, MergingSucc::False);\n         MergingSucc::False\n     }\n \n-    fn codegen_abort_terminator(\n+    fn codegen_terminate_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n         bx: &mut Bx,\n@@ -636,7 +643,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(bx, Some(span), LangItem::PanicCannotUnwind);\n \n         // Codegen the actual panic invoke/call.\n-        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &[], None, None, &[], false);\n+        let merging_succ = helper.do_call(\n+            self,\n+            bx,\n+            fn_abi,\n+            llfn,\n+            &[],\n+            None,\n+            mir::UnwindAction::Unreachable,\n+            &[],\n+            false,\n+        );\n         assert_eq!(merging_succ, MergingSucc::False);\n     }\n \n@@ -649,7 +666,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         instance: Option<Instance<'tcx>>,\n         source_info: mir::SourceInfo,\n         target: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> Option<MergingSucc> {\n         // Emit a panic or a no-op for `assert_*` intrinsics.\n@@ -696,7 +713,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     llfn,\n                     &[msg.0, msg.1],\n                     target.as_ref().map(|bb| (ReturnDest::Nothing, *bb)),\n-                    cleanup,\n+                    unwind,\n                     &[],\n                     mergeable_succ,\n                 )\n@@ -719,7 +736,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         args: &[mir::Operand<'tcx>],\n         destination: mir::Place<'tcx>,\n         target: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         fn_span: Span,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n@@ -783,7 +800,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             instance,\n             source_info,\n             target,\n-            cleanup,\n+            unwind,\n             mergeable_succ,\n         ) {\n             return merging_succ;\n@@ -1064,7 +1081,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 fn_ptr,\n                 &llargs,\n                 target.as_ref().map(|&target| (ret_dest, target)),\n-                cleanup,\n+                unwind,\n                 &copied_constant_arguments,\n                 false,\n             );\n@@ -1084,7 +1101,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             fn_ptr,\n             &llargs,\n             target.as_ref().map(|&target| (ret_dest, target)),\n-            cleanup,\n+            unwind,\n             &copied_constant_arguments,\n             mergeable_succ,\n         )\n@@ -1100,7 +1117,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         options: ast::InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         instance: Instance<'_>,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n@@ -1164,7 +1181,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             options,\n             line_spans,\n             destination,\n-            cleanup,\n+            unwind,\n             instance,\n             mergeable_succ,\n         )\n@@ -1246,8 +1263,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 MergingSucc::False\n             }\n \n-            mir::TerminatorKind::Abort => {\n-                self.codegen_abort_terminator(helper, bx, terminator);\n+            mir::TerminatorKind::Terminate => {\n+                self.codegen_terminate_terminator(helper, bx, terminator);\n                 MergingSucc::False\n             }\n \n@@ -1274,7 +1291,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_drop_terminator(helper, bx, place, target, unwind, mergeable_succ())\n             }\n \n-            mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, cleanup } => self\n+            mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, unwind } => self\n                 .codegen_assert_terminator(\n                     helper,\n                     bx,\n@@ -1283,7 +1300,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     expected,\n                     msg,\n                     target,\n-                    cleanup,\n+                    unwind,\n                     mergeable_succ(),\n                 ),\n \n@@ -1292,7 +1309,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 ref args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 from_hir_call: _,\n                 fn_span,\n             } => self.codegen_call_terminator(\n@@ -1303,7 +1320,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 fn_span,\n                 mergeable_succ(),\n             ),\n@@ -1320,7 +1337,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n-                cleanup,\n+                unwind,\n             } => self.codegen_asm_terminator(\n                 helper,\n                 bx,\n@@ -1330,7 +1347,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n-                cleanup,\n+                unwind,\n                 self.instance,\n                 mergeable_succ(),\n             ),\n@@ -1536,62 +1553,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn landing_pad_for_uncached(&mut self, bb: mir::BasicBlock) -> Bx::BasicBlock {\n         let llbb = self.llbb(bb);\n         if base::wants_msvc_seh(self.cx.sess()) {\n-            let funclet;\n-            let ret_llbb;\n-            match self.mir[bb].terminator.as_ref().map(|t| &t.kind) {\n-                // This is a basic block that we're aborting the program for,\n-                // notably in an `extern` function. These basic blocks are inserted\n-                // so that we assert that `extern` functions do indeed not panic,\n-                // and if they do we abort the process.\n-                //\n-                // On MSVC these are tricky though (where we're doing funclets). If\n-                // we were to do a cleanuppad (like below) the normal functions like\n-                // `longjmp` would trigger the abort logic, terminating the\n-                // program. Instead we insert the equivalent of `catch(...)` for C++\n-                // which magically doesn't trigger when `longjmp` files over this\n-                // frame.\n-                //\n-                // Lots more discussion can be found on #48251 but this codegen is\n-                // modeled after clang's for:\n-                //\n-                //      try {\n-                //          foo();\n-                //      } catch (...) {\n-                //          bar();\n-                //      }\n-                Some(&mir::TerminatorKind::Abort) => {\n-                    let cs_llbb =\n-                        Bx::append_block(self.cx, self.llfn, &format!(\"cs_funclet{:?}\", bb));\n-                    let cp_llbb =\n-                        Bx::append_block(self.cx, self.llfn, &format!(\"cp_funclet{:?}\", bb));\n-                    ret_llbb = cs_llbb;\n-\n-                    let mut cs_bx = Bx::build(self.cx, cs_llbb);\n-                    let cs = cs_bx.catch_switch(None, None, &[cp_llbb]);\n-\n-                    // The \"null\" here is actually a RTTI type descriptor for the\n-                    // C++ personality function, but `catch (...)` has no type so\n-                    // it's null. The 64 here is actually a bitfield which\n-                    // represents that this is a catch-all block.\n-                    let mut cp_bx = Bx::build(self.cx, cp_llbb);\n-                    let null = cp_bx.const_null(\n-                        cp_bx.type_i8p_ext(cp_bx.cx().data_layout().instruction_address_space),\n-                    );\n-                    let sixty_four = cp_bx.const_i32(64);\n-                    funclet = cp_bx.catch_pad(cs, &[null, sixty_four, null]);\n-                    cp_bx.br(llbb);\n-                }\n-                _ => {\n-                    let cleanup_llbb =\n-                        Bx::append_block(self.cx, self.llfn, &format!(\"funclet_{:?}\", bb));\n-                    ret_llbb = cleanup_llbb;\n-                    let mut cleanup_bx = Bx::build(self.cx, cleanup_llbb);\n-                    funclet = cleanup_bx.cleanup_pad(None, &[]);\n-                    cleanup_bx.br(llbb);\n-                }\n-            }\n+            let cleanup_bb = Bx::append_block(self.cx, self.llfn, &format!(\"funclet_{:?}\", bb));\n+            let mut cleanup_bx = Bx::build(self.cx, cleanup_bb);\n+            let funclet = cleanup_bx.cleanup_pad(None, &[]);\n+            cleanup_bx.br(llbb);\n             self.funclets[bb] = Some(funclet);\n-            ret_llbb\n+            cleanup_bb\n         } else {\n             let cleanup_llbb = Bx::append_block(self.cx, self.llfn, \"cleanup\");\n             let mut cleanup_bx = Bx::build(self.cx, cleanup_llbb);\n@@ -1618,26 +1585,68 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         })\n     }\n \n-    fn double_unwind_guard(&mut self) -> Bx::BasicBlock {\n-        self.double_unwind_guard.unwrap_or_else(|| {\n-            assert!(!base::wants_msvc_seh(self.cx.sess()));\n+    fn terminate_block(&mut self) -> Bx::BasicBlock {\n+        self.terminate_block.unwrap_or_else(|| {\n+            let funclet;\n+            let llbb;\n+            let mut bx;\n+            if base::wants_msvc_seh(self.cx.sess()) {\n+                // This is a basic block that we're aborting the program for,\n+                // notably in an `extern` function. These basic blocks are inserted\n+                // so that we assert that `extern` functions do indeed not panic,\n+                // and if they do we abort the process.\n+                //\n+                // On MSVC these are tricky though (where we're doing funclets). If\n+                // we were to do a cleanuppad (like below) the normal functions like\n+                // `longjmp` would trigger the abort logic, terminating the\n+                // program. Instead we insert the equivalent of `catch(...)` for C++\n+                // which magically doesn't trigger when `longjmp` files over this\n+                // frame.\n+                //\n+                // Lots more discussion can be found on #48251 but this codegen is\n+                // modeled after clang's for:\n+                //\n+                //      try {\n+                //          foo();\n+                //      } catch (...) {\n+                //          bar();\n+                //      }\n+                llbb = Bx::append_block(self.cx, self.llfn, \"cs_terminate\");\n+                let cp_llbb = Bx::append_block(self.cx, self.llfn, \"cp_terminate\");\n+\n+                let mut cs_bx = Bx::build(self.cx, llbb);\n+                let cs = cs_bx.catch_switch(None, None, &[cp_llbb]);\n+\n+                // The \"null\" here is actually a RTTI type descriptor for the\n+                // C++ personality function, but `catch (...)` has no type so\n+                // it's null. The 64 here is actually a bitfield which\n+                // represents that this is a catch-all block.\n+                bx = Bx::build(self.cx, cp_llbb);\n+                let null =\n+                    bx.const_null(bx.type_i8p_ext(bx.cx().data_layout().instruction_address_space));\n+                let sixty_four = bx.const_i32(64);\n+                funclet = Some(bx.catch_pad(cs, &[null, sixty_four, null]));\n+            } else {\n+                llbb = Bx::append_block(self.cx, self.llfn, \"terminate\");\n+                bx = Bx::build(self.cx, llbb);\n+\n+                let llpersonality = self.cx.eh_personality();\n+                bx.cleanup_landing_pad(llpersonality);\n \n-            let llbb = Bx::append_block(self.cx, self.llfn, \"abort\");\n-            let mut bx = Bx::build(self.cx, llbb);\n-            self.set_debug_loc(&mut bx, mir::SourceInfo::outermost(self.mir.span));\n+                funclet = None;\n+            }\n \n-            let llpersonality = self.cx.eh_personality();\n-            bx.cleanup_landing_pad(llpersonality);\n+            self.set_debug_loc(&mut bx, mir::SourceInfo::outermost(self.mir.span));\n \n             let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicCannotUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n-            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &[], None);\n+            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &[], funclet.as_ref());\n             bx.do_not_inline(llret);\n \n             bx.unreachable();\n \n-            self.double_unwind_guard = Some(llbb);\n+            self.terminate_block = Some(llbb);\n             llbb\n         })\n     }"}, {"sha": "3dadb33c96917b3e65f89d0bc531151bce0c0486", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -73,8 +73,8 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// Cached unreachable block\n     unreachable_block: Option<Bx::BasicBlock>,\n \n-    /// Cached double unwind guarding block\n-    double_unwind_guard: Option<Bx::BasicBlock>,\n+    /// Cached terminate upon unwinding block\n+    terminate_block: Option<Bx::BasicBlock>,\n \n     /// The location where each MIR arg/var/tmp/ret is stored. This is\n     /// usually an `PlaceRef` representing an alloca, but not always:\n@@ -166,7 +166,9 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let start_llbb = Bx::append_block(cx, llfn, \"start\");\n     let mut start_bx = Bx::build(cx, start_llbb);\n \n-    if mir.basic_blocks.iter().any(|bb| bb.is_cleanup) {\n+    if mir.basic_blocks.iter().any(|bb| {\n+        bb.is_cleanup || matches!(bb.terminator().unwind(), Some(mir::UnwindAction::Terminate))\n+    }) {\n         start_bx.set_personality_fn(cx.eh_personality());\n     }\n \n@@ -189,7 +191,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         personality_slot: None,\n         cached_llbbs,\n         unreachable_block: None,\n-        double_unwind_guard: None,\n+        terminate_block: None,\n         cleanup_kinds,\n         landing_pads: IndexVec::from_elem(None, &mir.basic_blocks),\n         funclets: IndexVec::from_fn_n(|_| None, mir.basic_blocks.len()),"}, {"sha": "a5dfd1072f0aaf0e0b489d7741d637adceae7633", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -23,7 +23,7 @@ use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, ConstAllocation, FnVal, Frame, ImmTy, InterpCx,\n-    InterpResult, OpTy, PlaceTy, Pointer, Scalar, StackPopUnwind,\n+    InterpResult, OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -271,7 +271,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                         /* with_caller_location = */ false,\n                         dest,\n                         ret,\n-                        StackPopUnwind::NotAllowed,\n+                        mir::UnwindAction::Unreachable,\n                     )?;\n                     Ok(ControlFlow::Break(()))\n                 } else {\n@@ -401,7 +401,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         args: &[OpTy<'tcx>],\n         dest: &PlaceTy<'tcx>,\n         ret: Option<mir::BasicBlock>,\n-        _unwind: StackPopUnwind, // unwinding is not supported in consts\n+        _unwind: mir::UnwindAction, // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n \n@@ -450,7 +450,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         args: &[OpTy<'tcx>],\n         dest: &PlaceTy<'tcx, Self::Provenance>,\n         target: Option<mir::BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         // Shared intrinsics.\n         if ecx.emulate_intrinsic(instance, args, dest, target)? {\n@@ -526,7 +526,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         msg: &AssertMessage<'tcx>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         use rustc_middle::mir::AssertKind::*;\n         // Convert `AssertKind<Operand>` to `AssertKind<Scalar>`."}, {"sha": "3e58a58aef7d08bee8c6cbb55650f6f8afca32a1", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -139,25 +139,14 @@ pub struct FrameInfo<'tcx> {\n     pub lint_root: Option<hir::HirId>,\n }\n \n-/// Unwind information.\n-#[derive(Clone, Copy, Eq, PartialEq, Debug)]\n-pub enum StackPopUnwind {\n-    /// The cleanup block.\n-    Cleanup(mir::BasicBlock),\n-    /// No cleanup needs to be done.\n-    Skip,\n-    /// Unwinding is not allowed (UB).\n-    NotAllowed,\n-}\n-\n #[derive(Clone, Copy, Eq, PartialEq, Debug)] // Miri debug-prints these\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n     /// we can validate it at that layout.\n     /// `ret` stores the block we jump to on a normal return, while `unwind`\n     /// stores the block used for cleanup during unwinding.\n-    Goto { ret: Option<mir::BasicBlock>, unwind: StackPopUnwind },\n+    Goto { ret: Option<mir::BasicBlock>, unwind: mir::UnwindAction },\n     /// The root frame of the stack: nowhere else to jump to.\n     /// `cleanup` says whether locals are deallocated. Static computation\n     /// wants them leaked to intern what they need (and just throw away\n@@ -735,18 +724,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// *Unwind* to the given `target` basic block.\n     /// Do *not* use for returning! Use `return_to_block` instead.\n     ///\n-    /// If `target` is `StackPopUnwind::Skip`, that indicates the function does not need cleanup\n+    /// If `target` is `UnwindAction::Continue`, that indicates the function does not need cleanup\n     /// during unwinding, and we will just keep propagating that upwards.\n     ///\n-    /// If `target` is `StackPopUnwind::NotAllowed`, that indicates the function does not allow\n+    /// If `target` is `UnwindAction::Unreachable`, that indicates the function does not allow\n     /// unwinding, and doing so is UB.\n-    pub fn unwind_to_block(&mut self, target: StackPopUnwind) -> InterpResult<'tcx> {\n+    pub fn unwind_to_block(&mut self, target: mir::UnwindAction) -> InterpResult<'tcx> {\n         self.frame_mut().loc = match target {\n-            StackPopUnwind::Cleanup(block) => Left(mir::Location { block, statement_index: 0 }),\n-            StackPopUnwind::Skip => Right(self.frame_mut().body.span),\n-            StackPopUnwind::NotAllowed => {\n+            mir::UnwindAction::Cleanup(block) => Left(mir::Location { block, statement_index: 0 }),\n+            mir::UnwindAction::Continue => Right(self.frame_mut().body.span),\n+            mir::UnwindAction::Unreachable => {\n                 throw_ub_format!(\"unwinding past a stack frame that does not allow unwinding\")\n             }\n+            mir::UnwindAction::Terminate => {\n+                self.frame_mut().loc = Right(self.frame_mut().body.span);\n+                M::abort(self, \"panic in a function that cannot unwind\".to_owned())?;\n+            }\n         };\n         Ok(())\n     }"}, {"sha": "0291cca7378a4543b3da851a6bbe2550a2f4a6be", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -18,7 +18,7 @@ use crate::const_eval::CheckAlignment;\n \n use super::{\n     AllocBytes, AllocId, AllocRange, Allocation, ConstAllocation, Frame, ImmTy, InterpCx,\n-    InterpResult, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Provenance, Scalar, StackPopUnwind,\n+    InterpResult, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Provenance, Scalar,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -185,7 +185,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         args: &[OpTy<'tcx, Self::Provenance>],\n         destination: &PlaceTy<'tcx, Self::Provenance>,\n         target: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>>;\n \n     /// Execute `fn_val`. It is the hook's responsibility to advance the instruction\n@@ -197,7 +197,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         args: &[OpTy<'tcx, Self::Provenance>],\n         destination: &PlaceTy<'tcx, Self::Provenance>,\n         target: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx>;\n \n     /// Directly process an intrinsic without pushing a stack frame. It is the hook's\n@@ -208,17 +208,17 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         args: &[OpTy<'tcx, Self::Provenance>],\n         destination: &PlaceTy<'tcx, Self::Provenance>,\n         target: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx>;\n \n     /// Called to evaluate `Assert` MIR terminators that trigger a panic.\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx>;\n \n-    /// Called to evaluate `Abort` MIR terminator.\n+    /// Called to abort evaluation.\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>, _msg: String) -> InterpResult<'tcx, !> {\n         throw_unsup_format!(\"aborting execution is not supported\")\n     }\n@@ -487,7 +487,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _args: &[OpTy<$tcx>],\n         _destination: &PlaceTy<$tcx, Self::Provenance>,\n         _target: Option<mir::BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<$tcx> {\n         match fn_val {}\n     }"}, {"sha": "898d62361ab2aae810f18693c90ae85fb7bebd84", "filename": "compiler/rustc_const_eval/src/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -20,9 +20,7 @@ mod visitor;\n \n pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n-pub use self::eval_context::{\n-    Frame, FrameInfo, InterpCx, LocalState, LocalValue, StackPopCleanup, StackPopUnwind,\n-};\n+pub use self::eval_context::{Frame, FrameInfo, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n pub use self::memory::{AllocKind, AllocRef, AllocRefMut, FnVal, Memory, MemoryKind};"}, {"sha": "a07702f7d9bb3957a8ad47a20d0bb015cb25c04d", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@ use rustc_target::spec::abi::Abi;\n \n use super::{\n     FnVal, ImmTy, Immediate, InterpCx, InterpResult, MPlaceTy, Machine, MemoryKind, OpTy, Operand,\n-    PlaceTy, Scalar, StackPopCleanup, StackPopUnwind,\n+    PlaceTy, Scalar, StackPopCleanup,\n };\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -60,7 +60,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ref args,\n                 destination,\n                 target,\n-                ref cleanup,\n+                unwind,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -106,11 +106,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     with_caller_location,\n                     &destination,\n                     target,\n-                    match (cleanup, fn_abi.can_unwind) {\n-                        (Some(cleanup), true) => StackPopUnwind::Cleanup(*cleanup),\n-                        (None, true) => StackPopUnwind::Skip,\n-                        (_, false) => StackPopUnwind::NotAllowed,\n-                    },\n+                    if fn_abi.can_unwind { unwind } else { mir::UnwindAction::Unreachable },\n                 )?;\n                 // Sanity-check that `eval_fn_call` either pushed a new frame or\n                 // did a jump to another block.\n@@ -137,19 +133,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.drop_in_place(&place, instance, target, unwind)?;\n             }\n \n-            Assert { ref cond, expected, ref msg, target, cleanup } => {\n+            Assert { ref cond, expected, ref msg, target, unwind } => {\n                 let ignored =\n                     M::ignore_optional_overflow_checks(self) && msg.is_optional_overflow_check();\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n                 if ignored || expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n-                    M::assert_panic(self, msg, cleanup)?;\n+                    M::assert_panic(self, msg, unwind)?;\n                 }\n             }\n \n-            Abort => {\n-                M::abort(self, \"the program aborted execution\".to_owned())?;\n+            Terminate => {\n+                // FIXME: maybe should call `panic_no_unwind` lang item instead.\n+                M::abort(self, \"panic in a function that cannot unwind\".to_owned())?;\n             }\n \n             // When we encounter Resume, we've finished unwinding\n@@ -351,7 +348,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         with_caller_location: bool,\n         destination: &PlaceTy<'tcx, M::Provenance>,\n         target: Option<mir::BasicBlock>,\n-        mut unwind: StackPopUnwind,\n+        mut unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         trace!(\"eval_fn_call: {:#?}\", fn_val);\n \n@@ -410,9 +407,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                 }\n \n-                if !matches!(unwind, StackPopUnwind::NotAllowed) && !callee_fn_abi.can_unwind {\n-                    // The callee cannot unwind.\n-                    unwind = StackPopUnwind::NotAllowed;\n+                if !callee_fn_abi.can_unwind {\n+                    // The callee cannot unwind, so force the `Unreachable` unwind handling.\n+                    unwind = mir::UnwindAction::Unreachable;\n                 }\n \n                 self.push_stack_frame(\n@@ -676,7 +673,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         place: &PlaceTy<'tcx, M::Provenance>,\n         instance: ty::Instance<'tcx>,\n         target: mir::BasicBlock,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         trace!(\"drop_in_place: {:?},\\n  {:?}, {:?}\", *place, place.layout.ty, instance);\n         // We take the address of the object. This may well be unaligned, which is fine\n@@ -717,10 +714,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             false,\n             &ret.into(),\n             Some(target),\n-            match unwind {\n-                Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n-                None => StackPopUnwind::Skip,\n-            },\n+            unwind,\n         )\n     }\n }"}, {"sha": "9dad947905397e87f561ad07bdb3c45ba2817f63", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1031,9 +1031,9 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 self.check_op(ops::Generator(hir::GeneratorKind::Gen))\n             }\n \n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 // Cleanup blocks are skipped for const checking (see `visit_basic_block_data`).\n-                span_bug!(self.span, \"`Abort` terminator outside of cleanup block\")\n+                span_bug!(self.span, \"`Terminate` terminator outside of cleanup block\")\n             }\n \n             TerminatorKind::Assert { .. }"}, {"sha": "1f1640fd80ae61b1b12ef47302e75482e34c3734", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 }\n             }\n \n-            mir::TerminatorKind::Abort\n+            mir::TerminatorKind::Terminate\n             | mir::TerminatorKind::Call { .. }\n             | mir::TerminatorKind::Assert { .. }\n             | mir::TerminatorKind::FalseEdge { .. }"}, {"sha": "7919aed097a452dc19479bbc734b6704cafee068", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -807,7 +807,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         kind: TerminatorKind::Call {\n                             func,\n                             args,\n-                            cleanup: None,\n+                            unwind: UnwindAction::Continue,\n                             destination: Place::from(new_temp),\n                             target: Some(new_target),\n                             from_hir_call,"}, {"sha": "0f56fda18f56151c1a0afefdec9f1bbb0090c725", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::{\n     traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n     MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n+    TerminatorKind, UnOp, UnwindAction, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -232,6 +232,24 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    fn check_unwind_edge(&mut self, location: Location, unwind: UnwindAction) {\n+        let is_cleanup = self.body.basic_blocks[location.block].is_cleanup;\n+        match unwind {\n+            UnwindAction::Cleanup(unwind) => {\n+                if is_cleanup {\n+                    self.fail(location, \"unwind on cleanup block\");\n+                }\n+                self.check_edge(location, unwind, EdgeKind::Unwind);\n+            }\n+            UnwindAction::Continue => {\n+                if is_cleanup {\n+                    self.fail(location, \"unwind on cleanup block\");\n+                }\n+            }\n+            UnwindAction::Unreachable | UnwindAction::Terminate => (),\n+        }\n+    }\n+\n     /// Check if src can be assigned into dest.\n     /// This is not precise, it will accept some incorrect assignments.\n     fn mir_assign_valid_types(&self, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n@@ -902,11 +920,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n-            TerminatorKind::Call { func, args, destination, target, cleanup, .. } => {\n+            TerminatorKind::Call { func, args, destination, target, unwind, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n@@ -918,9 +934,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 if let Some(target) = target {\n                     self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n-                if let Some(cleanup) = cleanup {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n \n                 // The call destination place and Operand::Move place used as an argument might be\n                 // passed by a reference to the callee. Consequently they must be non-overlapping.\n@@ -946,7 +960,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            TerminatorKind::Assert { cond, target, cleanup, .. } => {\n+            TerminatorKind::Assert { cond, target, unwind, .. } => {\n                 let cond_ty = cond.ty(&self.body.local_decls, self.tcx);\n                 if cond_ty != self.tcx.types.bool {\n                     self.fail(\n@@ -958,9 +972,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(cleanup) = cleanup {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n                 if self.body.generator.is_none() {\n@@ -992,17 +1004,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *real_target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n-            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n+            TerminatorKind::InlineAsm { destination, unwind, .. } => {\n                 if let Some(destination) = destination {\n                     self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n-                if let Some(cleanup) = cleanup {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::GeneratorDrop => {\n                 if self.body.generator.is_none() {\n@@ -1015,10 +1023,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            TerminatorKind::Resume | TerminatorKind::Abort => {\n+            TerminatorKind::Resume | TerminatorKind::Terminate => {\n                 let bb = location.block;\n                 if !self.body.basic_blocks[bb].is_cleanup {\n-                    self.fail(location, \"Cannot `Resume` or `Abort` from non-cleanup basic block\")\n+                    self.fail(\n+                        location,\n+                        \"Cannot `Resume` or `Terminate` from non-cleanup basic block\",\n+                    )\n                 }\n             }\n             TerminatorKind::Return => {"}, {"sha": "b898e85fa71b9b2093efbda1b123477503cad4f3", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -12,6 +12,9 @@ pub struct MirPatch<'tcx> {\n     new_statements: Vec<(Location, StatementKind<'tcx>)>,\n     new_locals: Vec<LocalDecl<'tcx>>,\n     resume_block: Option<BasicBlock>,\n+    // Only for unreachable in cleanup path.\n+    unreachable_cleanup_block: Option<BasicBlock>,\n+    terminate_block: Option<BasicBlock>,\n     body_span: Span,\n     next_local: usize,\n }\n@@ -25,14 +28,31 @@ impl<'tcx> MirPatch<'tcx> {\n             new_locals: vec![],\n             next_local: body.local_decls.len(),\n             resume_block: None,\n+            unreachable_cleanup_block: None,\n+            terminate_block: None,\n             body_span: body.span,\n         };\n \n-        // Check if we already have a resume block\n         for (bb, block) in body.basic_blocks.iter_enumerated() {\n+            // Check if we already have a resume block\n             if let TerminatorKind::Resume = block.terminator().kind && block.statements.is_empty() {\n                 result.resume_block = Some(bb);\n-                break;\n+                continue;\n+            }\n+\n+            // Check if we already have an unreachable block\n+            if let TerminatorKind::Unreachable = block.terminator().kind\n+                && block.statements.is_empty()\n+                && block.is_cleanup\n+            {\n+                result.unreachable_cleanup_block = Some(bb);\n+                continue;\n+            }\n+\n+            // Check if we already have a terminate block\n+            if let TerminatorKind::Terminate = block.terminator().kind && block.statements.is_empty() {\n+                result.terminate_block = Some(bb);\n+                continue;\n             }\n         }\n \n@@ -56,6 +76,40 @@ impl<'tcx> MirPatch<'tcx> {\n         bb\n     }\n \n+    pub fn unreachable_cleanup_block(&mut self) -> BasicBlock {\n+        if let Some(bb) = self.unreachable_cleanup_block {\n+            return bb;\n+        }\n+\n+        let bb = self.new_block(BasicBlockData {\n+            statements: vec![],\n+            terminator: Some(Terminator {\n+                source_info: SourceInfo::outermost(self.body_span),\n+                kind: TerminatorKind::Unreachable,\n+            }),\n+            is_cleanup: true,\n+        });\n+        self.unreachable_cleanup_block = Some(bb);\n+        bb\n+    }\n+\n+    pub fn terminate_block(&mut self) -> BasicBlock {\n+        if let Some(bb) = self.terminate_block {\n+            return bb;\n+        }\n+\n+        let bb = self.new_block(BasicBlockData {\n+            statements: vec![],\n+            terminator: Some(Terminator {\n+                source_info: SourceInfo::outermost(self.body_span),\n+                kind: TerminatorKind::Terminate,\n+            }),\n+            is_cleanup: true,\n+        });\n+        self.terminate_block = Some(bb);\n+        bb\n+    }\n+\n     pub fn is_patched(&self, bb: BasicBlock) -> bool {\n         self.patch_map[bb].is_some()\n     }"}, {"sha": "2165403da2671a2fb3dd15fd218bb0b0b2327417", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -262,7 +262,7 @@ pub fn terminator_kind_name(term: &Terminator<'_>) -> &'static str {\n         Goto { .. } => \"Goto\",\n         SwitchInt { .. } => \"SwitchInt\",\n         Resume => \"Resume\",\n-        Abort => \"Abort\",\n+        Terminate => \"Terminate\",\n         Return => \"Return\",\n         Unreachable => \"Unreachable\",\n         Drop { .. } => \"Drop\","}, {"sha": "135889d0da810831a32e1529800727e7c92b2b96", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -515,15 +515,15 @@ pub struct CopyNonOverlapping<'tcx> {\n ///\n /// A note on unwinding: Panics may occur during the execution of some terminators. Depending on the\n /// `-C panic` flag, this may either cause the program to abort or the call stack to unwind. Such\n-/// terminators have a `cleanup: Option<BasicBlock>` field on them. If stack unwinding occurs, then\n-/// once the current function is reached, execution continues at the given basic block, if any. If\n-/// `cleanup` is `None` then no cleanup is performed, and the stack continues unwinding. This is\n-/// equivalent to the execution of a `Resume` terminator.\n+/// terminators have a `unwind: UnwindAction` field on them. If stack unwinding occurs, then\n+/// once the current function is reached, an action will be taken based on the `unwind` field.\n+/// If the action is `Cleanup`, then the execution continues at the given basic block. If the\n+/// action is `Continue` then no cleanup is performed, and the stack continues unwinding.\n ///\n-/// The basic block pointed to by a `cleanup` field must have its `cleanup` flag set. `cleanup`\n-/// basic blocks have a couple restrictions:\n-///  1. All `cleanup` fields in them must be `None`.\n-///  2. `Return` terminators are not allowed in them. `Abort` and `Unwind` terminators are.\n+/// The basic block pointed to by a `Cleanup` unwind action must have its `cleanup` flag set.\n+/// `cleanup` basic blocks have a couple restrictions:\n+///  1. All `unwind` fields in them must be `UnwindAction::Terminate` or `UnwindAction::Unreachable`.\n+///  2. `Return` terminators are not allowed in them. `Terminate` and `Resume` terminators are.\n ///  3. All other basic blocks (in the current body) that are reachable from `cleanup` basic blocks\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n ///     still an error to have such an edge in the CFG even if it's known that it won't be taken at\n@@ -565,11 +565,11 @@ pub enum TerminatorKind<'tcx> {\n     /// deaggregation runs.\n     Resume,\n \n-    /// Indicates that the landing pad is finished and that the process should abort.\n+    /// Indicates that the landing pad is finished and that the process should terminate.\n     ///\n     /// Used to prevent unwinding for foreign items or with `-C unwind=abort`. Only permitted in\n     /// cleanup blocks.\n-    Abort,\n+    Terminate,\n \n     /// Returns from the function.\n     ///\n@@ -604,7 +604,7 @@ pub enum TerminatorKind<'tcx> {\n     /// > The drop glue is executed if, among all statements executed within this `Body`, an assignment to\n     /// > the place or one of its \"parents\" occurred more recently than a move out of it. This does not\n     /// > consider indirect assignments.\n-    Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n+    Drop { place: Place<'tcx>, target: BasicBlock, unwind: UnwindAction },\n \n     /// Roughly speaking, evaluates the `func` operand and the arguments, and starts execution of\n     /// the referred to function. The operand types must match the argument types of the function.\n@@ -628,8 +628,8 @@ pub enum TerminatorKind<'tcx> {\n         destination: Place<'tcx>,\n         /// Where to go after this call returns. If none, the call necessarily diverges.\n         target: Option<BasicBlock>,\n-        /// Cleanups to be done if the call unwinds.\n-        cleanup: Option<BasicBlock>,\n+        /// Action to be taken if the call unwinds.\n+        unwind: UnwindAction,\n         /// `true` if this is from a call in HIR rather than from an overloaded\n         /// operator. True for overloaded function call.\n         from_hir_call: bool,\n@@ -654,7 +654,7 @@ pub enum TerminatorKind<'tcx> {\n         expected: bool,\n         msg: AssertMessage<'tcx>,\n         target: BasicBlock,\n-        cleanup: Option<BasicBlock>,\n+        unwind: UnwindAction,\n     },\n \n     /// Marks a suspend point.\n@@ -720,9 +720,8 @@ pub enum TerminatorKind<'tcx> {\n         /// in practice, but in order to avoid fragility we want to always\n         /// consider it in borrowck. We don't want to accept programs which\n         /// pass borrowck only when `panic=abort` or some assertions are disabled\n-        /// due to release vs. debug mode builds. This needs to be an `Option` because\n-        /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.\n-        unwind: Option<BasicBlock>,\n+        /// due to release vs. debug mode builds.\n+        unwind: UnwindAction,\n     },\n \n     /// Block ends with an inline assembly block. This is a terminator since\n@@ -745,12 +744,31 @@ pub enum TerminatorKind<'tcx> {\n         /// diverging (InlineAsmOptions::NORETURN).\n         destination: Option<BasicBlock>,\n \n-        /// Cleanup to be done if the inline assembly unwinds. This is present\n+        /// Action to be taken if the inline assembly unwinds. This is present\n         /// if and only if InlineAsmOptions::MAY_UNWIND is set.\n-        cleanup: Option<BasicBlock>,\n+        unwind: UnwindAction,\n     },\n }\n \n+/// Action to be taken when a stack unwind happens.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n+pub enum UnwindAction {\n+    /// No action is to be taken. Continue unwinding.\n+    ///\n+    /// This is similar to `Cleanup(bb)` where `bb` does nothing but `Resume`, but they are not\n+    /// equivalent, as presence of `Cleanup(_)` will make a frame non-POF.\n+    Continue,\n+    /// Triggers undefined behavior if unwind happens.\n+    Unreachable,\n+    /// Terminates the execution if unwind happens.\n+    ///\n+    /// Depending on the platform and situation this may cause a non-unwindable panic or abort.\n+    Terminate,\n+    /// Cleanups to be done.\n+    Cleanup(BasicBlock),\n+}\n+\n /// Information about an assertion failure.\n #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, TypeFoldable, TypeVisitable)]\n pub enum AssertKind<O> {"}, {"sha": "2c6126cdd29cdeded6a14af1ee513b608290b187", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 96, "deletions": 81, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,6 +1,6 @@\n use smallvec::SmallVec;\n \n-use super::{BasicBlock, InlineAsmOperand, Operand, SourceInfo, TerminatorKind};\n+use super::{BasicBlock, InlineAsmOperand, Operand, SourceInfo, TerminatorKind, UnwindAction};\n use rustc_ast::InlineAsmTemplatePiece;\n pub use rustc_ast::Mutability;\n use rustc_macros::HashStable;\n@@ -118,11 +118,11 @@ impl<'tcx> Terminator<'tcx> {\n         self.kind.successors_mut()\n     }\n \n-    pub fn unwind(&self) -> Option<&Option<BasicBlock>> {\n+    pub fn unwind(&self) -> Option<&UnwindAction> {\n         self.kind.unwind()\n     }\n \n-    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+    pub fn unwind_mut(&mut self) -> Option<&mut UnwindAction> {\n         self.kind.unwind_mut()\n     }\n }\n@@ -135,33 +135,33 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors(&self) -> Successors<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Resume\n-            | Abort\n-            | GeneratorDrop\n-            | Return\n-            | Unreachable\n-            | Call { target: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => {\n-                None.into_iter().chain((&[]).into_iter().copied())\n+            Call { target: Some(t), unwind: UnwindAction::Cleanup(ref u), .. }\n+            | Yield { resume: t, drop: Some(ref u), .. }\n+            | Drop { target: t, unwind: UnwindAction::Cleanup(ref u), .. }\n+            | Assert { target: t, unwind: UnwindAction::Cleanup(ref u), .. }\n+            | FalseUnwind { real_target: t, unwind: UnwindAction::Cleanup(ref u) }\n+            | InlineAsm { destination: Some(t), unwind: UnwindAction::Cleanup(ref u), .. } => {\n+                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n             }\n             Goto { target: t }\n-            | Call { target: None, cleanup: Some(t), .. }\n-            | Call { target: Some(t), cleanup: None, .. }\n+            | Call { target: None, unwind: UnwindAction::Cleanup(t), .. }\n+            | Call { target: Some(t), unwind: _, .. }\n             | Yield { resume: t, drop: None, .. }\n-            | Drop { target: t, unwind: None, .. }\n-            | Assert { target: t, cleanup: None, .. }\n-            | FalseUnwind { real_target: t, unwind: None }\n-            | InlineAsm { destination: Some(t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(t), .. } => {\n+            | Drop { target: t, unwind: _, .. }\n+            | Assert { target: t, unwind: _, .. }\n+            | FalseUnwind { real_target: t, unwind: _ }\n+            | InlineAsm { destination: None, unwind: UnwindAction::Cleanup(t), .. }\n+            | InlineAsm { destination: Some(t), unwind: _, .. } => {\n                 Some(t).into_iter().chain((&[]).into_iter().copied())\n             }\n-            Call { target: Some(t), cleanup: Some(ref u), .. }\n-            | Yield { resume: t, drop: Some(ref u), .. }\n-            | Drop { target: t, unwind: Some(ref u), .. }\n-            | Assert { target: t, cleanup: Some(ref u), .. }\n-            | FalseUnwind { real_target: t, unwind: Some(ref u) }\n-            | InlineAsm { destination: Some(t), cleanup: Some(ref u), .. } => {\n-                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n+            Resume\n+            | Terminate\n+            | GeneratorDrop\n+            | Return\n+            | Unreachable\n+            | Call { target: None, unwind: _, .. }\n+            | InlineAsm { destination: None, unwind: _, .. } => {\n+                None.into_iter().chain((&[]).into_iter().copied())\n             }\n             SwitchInt { ref targets, .. } => {\n                 None.into_iter().chain(targets.targets.iter().copied())\n@@ -175,74 +175,76 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Resume\n-            | Abort\n-            | GeneratorDrop\n-            | Return\n-            | Unreachable\n-            | Call { target: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),\n+            Call { target: Some(ref mut t), unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n+            | Drop { target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | Assert { target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | FalseUnwind { real_target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u) }\n+            | InlineAsm {\n+                destination: Some(ref mut t),\n+                unwind: UnwindAction::Cleanup(ref mut u),\n+                ..\n+            } => Some(t).into_iter().chain(slice::from_mut(u)),\n             Goto { target: ref mut t }\n-            | Call { target: None, cleanup: Some(ref mut t), .. }\n-            | Call { target: Some(ref mut t), cleanup: None, .. }\n+            | Call { target: None, unwind: UnwindAction::Cleanup(ref mut t), .. }\n+            | Call { target: Some(ref mut t), unwind: _, .. }\n             | Yield { resume: ref mut t, drop: None, .. }\n-            | Drop { target: ref mut t, unwind: None, .. }\n-            | Assert { target: ref mut t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: None }\n-            | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(ref mut t), .. } => {\n+            | Drop { target: ref mut t, unwind: _, .. }\n+            | Assert { target: ref mut t, unwind: _, .. }\n+            | FalseUnwind { real_target: ref mut t, unwind: _ }\n+            | InlineAsm { destination: None, unwind: UnwindAction::Cleanup(ref mut t), .. }\n+            | InlineAsm { destination: Some(ref mut t), unwind: _, .. } => {\n                 Some(t).into_iter().chain(&mut [])\n             }\n-            Call { target: Some(ref mut t), cleanup: Some(ref mut u), .. }\n-            | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n-            | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n-            | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }\n-            | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {\n-                Some(t).into_iter().chain(slice::from_mut(u))\n-            }\n+            Resume\n+            | Terminate\n+            | GeneratorDrop\n+            | Return\n+            | Unreachable\n+            | Call { target: None, unwind: _, .. }\n+            | InlineAsm { destination: None, unwind: _, .. } => None.into_iter().chain(&mut []),\n             SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),\n             FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))\n             }\n         }\n     }\n \n-    pub fn unwind(&self) -> Option<&Option<BasicBlock>> {\n+    pub fn unwind(&self) -> Option<&UnwindAction> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. } => None,\n-            TerminatorKind::Call { cleanup: ref unwind, .. }\n-            | TerminatorKind::Assert { cleanup: ref unwind, .. }\n+            TerminatorKind::Call { ref unwind, .. }\n+            | TerminatorKind::Assert { ref unwind, .. }\n             | TerminatorKind::Drop { ref unwind, .. }\n             | TerminatorKind::FalseUnwind { ref unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),\n+            | TerminatorKind::InlineAsm { ref unwind, .. } => Some(unwind),\n         }\n     }\n \n-    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+    pub fn unwind_mut(&mut self) -> Option<&mut UnwindAction> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. } => None,\n-            TerminatorKind::Call { cleanup: ref mut unwind, .. }\n-            | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n+            TerminatorKind::Call { ref mut unwind, .. }\n+            | TerminatorKind::Assert { ref mut unwind, .. }\n             | TerminatorKind::Drop { ref mut unwind, .. }\n             | TerminatorKind::FalseUnwind { ref mut unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),\n+            | TerminatorKind::InlineAsm { ref mut unwind, .. } => Some(unwind),\n         }\n     }\n \n@@ -268,11 +270,17 @@ impl<'tcx> Debug for TerminatorKind<'tcx> {\n         let labels = self.fmt_successor_labels();\n         assert_eq!(successor_count, labels.len());\n \n-        match successor_count {\n-            0 => Ok(()),\n-\n-            1 => write!(fmt, \" -> {:?}\", self.successors().next().unwrap()),\n-\n+        let unwind = match self.unwind() {\n+            // Not needed or included in successors\n+            None | Some(UnwindAction::Continue) | Some(UnwindAction::Cleanup(_)) => None,\n+            Some(UnwindAction::Unreachable) => Some(\"unwind unreachable\"),\n+            Some(UnwindAction::Terminate) => Some(\"unwind terminate\"),\n+        };\n+\n+        match (successor_count, unwind) {\n+            (0, None) => Ok(()),\n+            (0, Some(unwind)) => write!(fmt, \" -> {}\", unwind),\n+            (1, None) => write!(fmt, \" -> {:?}\", self.successors().next().unwrap()),\n             _ => {\n                 write!(fmt, \" -> [\")?;\n                 for (i, target) in self.successors().enumerate() {\n@@ -281,6 +289,9 @@ impl<'tcx> Debug for TerminatorKind<'tcx> {\n                     }\n                     write!(fmt, \"{}: {:?}\", labels[i], target)?;\n                 }\n+                if let Some(unwind) = unwind {\n+                    write!(fmt, \", {unwind}\")?;\n+                }\n                 write!(fmt, \"]\")\n             }\n         }\n@@ -299,7 +310,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Return => write!(fmt, \"return\"),\n             GeneratorDrop => write!(fmt, \"generator_drop\"),\n             Resume => write!(fmt, \"resume\"),\n-            Abort => write!(fmt, \"abort\"),\n+            Terminate => write!(fmt, \"abort\"),\n             Yield { value, resume_arg, .. } => write!(fmt, \"{:?} = yield({:?})\", resume_arg, value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { place, .. } => write!(fmt, \"drop({:?})\", place),\n@@ -378,39 +389,43 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Return | Resume | Abort | Unreachable | GeneratorDrop => vec![],\n+            Return | Resume | Terminate | Unreachable | GeneratorDrop => vec![],\n             Goto { .. } => vec![\"\".into()],\n             SwitchInt { ref targets, .. } => targets\n                 .values\n                 .iter()\n                 .map(|&u| Cow::Owned(u.to_string()))\n                 .chain(iter::once(\"otherwise\".into()))\n                 .collect(),\n-            Call { target: Some(_), cleanup: Some(_), .. } => {\n+            Call { target: Some(_), unwind: UnwindAction::Cleanup(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n-            Call { target: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n-            Call { target: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n-            Call { target: None, cleanup: None, .. } => vec![],\n+            Call { target: Some(_), unwind: _, .. } => vec![\"return\".into()],\n+            Call { target: None, unwind: UnwindAction::Cleanup(_), .. } => vec![\"unwind\".into()],\n+            Call { target: None, unwind: _, .. } => vec![],\n             Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n             Yield { drop: None, .. } => vec![\"resume\".into()],\n-            Drop { unwind: None, .. } => {\n-                vec![\"return\".into()]\n-            }\n-            Drop { unwind: Some(_), .. } => {\n-                vec![\"return\".into(), \"unwind\".into()]\n+            Drop { unwind: UnwindAction::Cleanup(_), .. } => vec![\"return\".into(), \"unwind\".into()],\n+            Drop { unwind: _, .. } => vec![\"return\".into()],\n+            Assert { unwind: UnwindAction::Cleanup(_), .. } => {\n+                vec![\"success\".into(), \"unwind\".into()]\n             }\n-            Assert { cleanup: None, .. } => vec![\"\".into()],\n-            Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n+            Assert { unwind: _, .. } => vec![\"success\".into()],\n             FalseEdge { .. } => vec![\"real\".into(), \"imaginary\".into()],\n-            FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n-            FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n-            InlineAsm { destination: Some(_), cleanup: Some(_), .. } => {\n+            FalseUnwind { unwind: UnwindAction::Cleanup(_), .. } => {\n+                vec![\"real\".into(), \"unwind\".into()]\n+            }\n+            FalseUnwind { unwind: _, .. } => vec![\"real\".into()],\n+            InlineAsm { destination: Some(_), unwind: UnwindAction::Cleanup(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n-            InlineAsm { destination: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n-            InlineAsm { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n-            InlineAsm { destination: None, cleanup: None, .. } => vec![],\n+            InlineAsm { destination: Some(_), unwind: _, .. } => {\n+                vec![\"return\".into()]\n+            }\n+            InlineAsm { destination: None, unwind: UnwindAction::Cleanup(_), .. } => {\n+                vec![\"unwind\".into()]\n+            }\n+            InlineAsm { destination: None, unwind: _, .. } => vec![],\n         }\n     }\n }"}, {"sha": "6c4ea065abeb3a522d53f2c6ced9701cf432127e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -462,7 +462,7 @@ macro_rules! make_mir_visitor {\n                 match kind {\n                     TerminatorKind::Goto { .. } |\n                     TerminatorKind::Resume |\n-                    TerminatorKind::Abort |\n+                    TerminatorKind::Terminate |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n                     TerminatorKind::FalseEdge { .. } |\n@@ -509,7 +509,7 @@ macro_rules! make_mir_visitor {\n                         args,\n                         destination,\n                         target: _,\n-                        cleanup: _,\n+                        unwind: _,\n                         from_hir_call: _,\n                         fn_span: _\n                     } => {\n@@ -529,7 +529,7 @@ macro_rules! make_mir_visitor {\n                         expected: _,\n                         msg,\n                         target: _,\n-                        cleanup: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_operand(cond, location);\n                         self.visit_assert_message(msg, location);\n@@ -555,7 +555,7 @@ macro_rules! make_mir_visitor {\n                         options: _,\n                         line_spans: _,\n                         destination: _,\n-                        cleanup: _,\n+                        unwind: _,\n                     } => {\n                         for op in operands {\n                             match op {"}, {"sha": "54028dfe87b73328d25740d306305af41563b687", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -56,7 +56,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 Ok(TerminatorKind::Drop {\n                     place: self.parse_place(args[0])?,\n                     target: self.parse_block(args[1])?,\n-                    unwind: None,\n+                    unwind: UnwindAction::Continue,\n                 })\n             },\n             @call(\"mir_call\", args) => {\n@@ -126,7 +126,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                     args,\n                     destination,\n                     target: Some(target),\n-                    cleanup: None,\n+                    unwind: UnwindAction::Continue,\n                     from_hir_call: *from_hir_call,\n                     fn_span: *fn_span,\n                 })"}, {"sha": "8631749a524be379c24650f9740f763b3d399c25", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n                         destination: storage,\n                         target: Some(success),\n-                        cleanup: None,\n+                        unwind: UnwindAction::Continue,\n                         from_hir_call: false,\n                         fn_span: expr_span,\n                     },\n@@ -702,7 +702,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.terminate(\n                     block,\n                     outer_source_info,\n-                    TerminatorKind::Drop { place: to_drop, target: success, unwind: None },\n+                    TerminatorKind::Drop {\n+                        place: to_drop,\n+                        target: success,\n+                        unwind: UnwindAction::Continue,\n+                    },\n                 );\n                 this.diverge_from(block);\n                 block = success;"}, {"sha": "05a723a6b6750b73095602589cd168aa1406e92c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -228,7 +228,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.cfg.terminate(\n                         loop_block,\n                         source_info,\n-                        TerminatorKind::FalseUnwind { real_target: body_block, unwind: None },\n+                        TerminatorKind::FalseUnwind {\n+                            real_target: body_block,\n+                            unwind: UnwindAction::Continue,\n+                        },\n                     );\n                     this.diverge_from(loop_block);\n \n@@ -264,7 +267,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: fun,\n                         args,\n-                        cleanup: None,\n+                        unwind: UnwindAction::Continue,\n                         destination,\n                         // The presence or absence of a return edge affects control-flow sensitive\n                         // MIR checks and ultimately whether code is accepted or not. We can only\n@@ -466,7 +469,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         } else {\n                             Some(destination_block)\n                         },\n-                        cleanup: None,\n+                        unwind: if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+                            UnwindAction::Continue\n+                        } else {\n+                            UnwindAction::Unreachable\n+                        },\n                     },\n                 );\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {"}, {"sha": "8a03ea7e2cc7fdc78cf1b9727bbe847233eabf9e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             args: vec![Operand::Move(ref_string)],\n                             destination: ref_str,\n                             target: Some(eq_block),\n-                            cleanup: None,\n+                            unwind: UnwindAction::Continue,\n                             from_hir_call: false,\n                             fn_span: source_info.span\n                         }\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 args: vec![val, expect],\n                 destination: eq_result,\n                 target: Some(eq_block),\n-                cleanup: None,\n+                unwind: UnwindAction::Continue,\n                 from_hir_call: false,\n                 fn_span: source_info.span,\n             },"}, {"sha": "f32d2db4e71201758fe4a1f1b5fb40617ceec2e7", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -369,7 +369,7 @@ impl DropTree {\n                     let terminator = TerminatorKind::Drop {\n                         target: blocks[drop_data.1].unwrap(),\n                         // The caller will handle this if needed.\n-                        unwind: None,\n+                        unwind: UnwindAction::Terminate,\n                         place: drop_data.0.local.into(),\n                     };\n                     cfg.terminate(block, drop_data.0.source_info, terminator);\n@@ -1141,7 +1141,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Drop { place, target: assign, unwind: Some(assign_unwind) },\n+            TerminatorKind::Drop {\n+                place,\n+                target: assign,\n+                unwind: UnwindAction::Cleanup(assign_unwind),\n+            },\n         );\n         self.diverge_from(block);\n \n@@ -1165,7 +1169,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Assert { cond, expected, msg, target: success_block, cleanup: None },\n+            TerminatorKind::Assert {\n+                cond,\n+                expected,\n+                msg,\n+                target: success_block,\n+                unwind: UnwindAction::Continue,\n+            },\n         );\n         self.diverge_from(block);\n \n@@ -1244,7 +1254,11 @@ fn build_scope_drops<'tcx>(\n                 cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Drop { place: local.into(), target: next, unwind: None },\n+                    TerminatorKind::Drop {\n+                        place: local.into(),\n+                        target: next,\n+                        unwind: UnwindAction::Continue,\n+                    },\n                 );\n                 block = next;\n             }\n@@ -1424,23 +1438,23 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n         let term = &mut cfg.block_data_mut(from).terminator_mut();\n         match &mut term.kind {\n             TerminatorKind::Drop { unwind, .. } => {\n-                if let Some(unwind) = *unwind {\n+                if let UnwindAction::Cleanup(unwind) = *unwind {\n                     let source_info = term.source_info;\n                     cfg.terminate(unwind, source_info, TerminatorKind::Goto { target: to });\n                 } else {\n-                    *unwind = Some(to);\n+                    *unwind = UnwindAction::Cleanup(to);\n                 }\n             }\n             TerminatorKind::FalseUnwind { unwind, .. }\n-            | TerminatorKind::Call { cleanup: unwind, .. }\n-            | TerminatorKind::Assert { cleanup: unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {\n-                *unwind = Some(to);\n+            | TerminatorKind::Call { unwind, .. }\n+            | TerminatorKind::Assert { unwind, .. }\n+            | TerminatorKind::InlineAsm { unwind, .. } => {\n+                *unwind = UnwindAction::Cleanup(to);\n             }\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }"}, {"sha": "8e41957af0ebabc4c964b4ea1938247c15e11ed0", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::graph::iterate::{\n     NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n use rustc_hir::def::DefKind;\n-use rustc_middle::mir::{BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n@@ -108,7 +108,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n \n         match self.body[bb].terminator().kind {\n             // These terminators return control flow to the caller.\n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n@@ -149,7 +149,9 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {\n         let terminator = self.body[bb].terminator();\n-        if terminator.unwind() == Some(&Some(target)) && terminator.successors().count() > 1 {\n+        if terminator.unwind() == Some(&mir::UnwindAction::Cleanup(target))\n+            && terminator.successors().count() > 1\n+        {\n             return true;\n         }\n         // Don't traverse successors of recursive calls or false CFG edges."}, {"sha": "bd8ec82dffd17eb67514024a9c79b383949e1f22", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -77,10 +77,10 @@ impl Unwind {\n         }\n     }\n \n-    fn into_option(self) -> Option<BasicBlock> {\n+    fn into_action(self) -> UnwindAction {\n         match self {\n-            Unwind::To(bb) => Some(bb),\n-            Unwind::InCleanup => None,\n+            Unwind::To(bb) => UnwindAction::Cleanup(bb),\n+            Unwind::InCleanup => UnwindAction::Terminate,\n         }\n     }\n \n@@ -236,7 +236,7 @@ where\n                     TerminatorKind::Drop {\n                         place: self.place,\n                         target: self.succ,\n-                        unwind: self.unwind.into_option(),\n+                        unwind: self.unwind.into_action(),\n                     },\n                 );\n             }\n@@ -640,7 +640,7 @@ where\n                     args: vec![Operand::Move(Place::from(ref_place))],\n                     destination: unit_temp,\n                     target: Some(succ),\n-                    cleanup: unwind.into_option(),\n+                    unwind: unwind.into_action(),\n                     from_hir_call: true,\n                     fn_span: self.source_info.span,\n                 },\n@@ -717,7 +717,7 @@ where\n             TerminatorKind::Drop {\n                 place: tcx.mk_place_deref(ptr),\n                 target: loop_block,\n-                unwind: unwind.into_option(),\n+                unwind: unwind.into_action(),\n             },\n         );\n \n@@ -946,7 +946,11 @@ where\n             args,\n             destination: unit_temp,\n             target: Some(target),\n-            cleanup: None,\n+            unwind: if unwind.is_cleanup() {\n+                UnwindAction::Terminate\n+            } else {\n+                UnwindAction::Continue\n+            },\n             from_hir_call: false,\n             fn_span: self.source_info.span,\n         }; // FIXME(#43234)\n@@ -959,7 +963,7 @@ where\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block =\n-            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_option() };\n+            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_action() };\n         self.new_block(unwind, block)\n     }\n "}, {"sha": "c8fe1af6674c8b33e19443865dc56718077577f3", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::mir::{self, BasicBlock, Location, SwitchTargets};\n+use rustc_middle::mir::{self, BasicBlock, Location, SwitchTargets, UnwindAction};\n use rustc_middle::ty::TyCtxt;\n use std::ops::RangeInclusive;\n \n@@ -474,14 +474,14 @@ impl Direction for Forward {\n     {\n         use mir::TerminatorKind::*;\n         match bb_data.terminator().kind {\n-            Return | Resume | Abort | GeneratorDrop | Unreachable => {}\n+            Return | Resume | Terminate | GeneratorDrop | Unreachable => {}\n \n             Goto { target } => propagate(target, exit_state),\n \n-            Assert { target, cleanup: unwind, expected: _, msg: _, cond: _ }\n+            Assert { target, unwind, expected: _, msg: _, cond: _ }\n             | Drop { target, unwind, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n \n@@ -503,15 +503,15 @@ impl Direction for Forward {\n             }\n \n             Call {\n-                cleanup,\n+                unwind,\n                 destination,\n                 target,\n                 func: _,\n                 args: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n-                if let Some(unwind) = cleanup {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n \n@@ -533,9 +533,9 @@ impl Direction for Forward {\n                 options: _,\n                 line_spans: _,\n                 destination,\n-                cleanup,\n+                unwind,\n             } => {\n-                if let Some(unwind) = cleanup {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n "}, {"sha": "60679b17d6c496dd9b8dfb95fe3270f7b2f429e5", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -39,7 +39,7 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n             args: vec![],\n             destination: dummy_place.clone(),\n             target: Some(mir::START_BLOCK),\n-            cleanup: None,\n+            unwind: mir::UnwindAction::Continue,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,\n         },\n@@ -53,7 +53,7 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n             args: vec![],\n             destination: dummy_place.clone(),\n             target: Some(mir::START_BLOCK),\n-            cleanup: None,\n+            unwind: mir::UnwindAction::Continue,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,\n         },"}, {"sha": "92d30f254a6af2a62c06b367934f7377c173163c", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -125,7 +125,7 @@ where\n                 }\n             }\n \n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "4a5d9d520108ec58520d760847538f1d26e7ec6e", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -200,7 +200,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::FalseEdge { .. }\n@@ -237,7 +237,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n             TerminatorKind::Yield { .. }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "64ed7a29f6f3d0aa8fe505fc6324c917b8847d0b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -375,7 +375,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             // need recording.\n             | TerminatorKind::Return\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. } => {}\n@@ -398,7 +398,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 ref args,\n                 destination,\n                 target,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -417,7 +417,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "98bebc9b13bc505df2753921013d8284610cdab4", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -238,7 +238,7 @@ pub trait ValueAnalysis<'tcx> {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Assert { .. }"}, {"sha": "5aed89139e2fa0a60916ea4425b6af34d11faf47", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -34,11 +34,6 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n             return;\n         }\n \n-        // This pass only runs on functions which themselves cannot unwind,\n-        // forcibly changing the body of the function to structurally provide\n-        // this guarantee by aborting on an unwind. If this function can unwind,\n-        // then there's nothing to do because it already should work correctly.\n-        //\n         // Here we test for this function itself whether its ABI allows\n         // unwinding or not.\n         let body_ty = tcx.type_of(def_id).skip_binder();\n@@ -107,31 +102,14 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n             }\n         }\n \n-        // For call instructions which need to be terminated, we insert a\n-        // singular basic block which simply terminates, and then configure the\n-        // `cleanup` attribute for all calls we found to this basic block we\n-        // insert which means that any unwinding that happens in the functions\n-        // will force an abort of the process.\n-        if !calls_to_terminate.is_empty() {\n-            let bb = BasicBlockData {\n-                statements: Vec::new(),\n-                is_cleanup: true,\n-                terminator: Some(Terminator {\n-                    source_info: SourceInfo::outermost(body.span),\n-                    kind: TerminatorKind::Abort,\n-                }),\n-            };\n-            let abort_bb = body.basic_blocks_mut().push(bb);\n-\n-            for bb in calls_to_terminate {\n-                let cleanup = body.basic_blocks_mut()[bb].terminator_mut().unwind_mut().unwrap();\n-                *cleanup = Some(abort_bb);\n-            }\n+        for id in calls_to_terminate {\n+            let cleanup = body.basic_blocks_mut()[id].terminator_mut().unwind_mut().unwrap();\n+            *cleanup = UnwindAction::Terminate;\n         }\n \n         for id in cleanups_to_remove {\n             let cleanup = body.basic_blocks_mut()[id].terminator_mut().unwind_mut().unwrap();\n-            *cleanup = None;\n+            *cleanup = UnwindAction::Unreachable;\n         }\n \n         // We may have invalidated some `cleanup` blocks so clean those up now."}, {"sha": "e1e354efa1c4fcfaa0d605123d9665374f1376d8", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -50,10 +50,11 @@ impl AddCallGuards {\n         for block in body.basic_blocks_mut() {\n             match block.terminator {\n                 Some(Terminator {\n-                    kind: TerminatorKind::Call { target: Some(ref mut destination), cleanup, .. },\n+                    kind: TerminatorKind::Call { target: Some(ref mut destination), unwind, .. },\n                     source_info,\n                 }) if pred_count[*destination] > 1\n-                    && (cleanup.is_some() || self == &AllCallEdges) =>\n+                    && (matches!(unwind, UnwindAction::Cleanup(_) | UnwindAction::Terminate)\n+                        || self == &AllCallEdges) =>\n                 {\n                     // It's a critical edge, break it\n                     let call_guard = BasicBlockData {"}, {"sha": "8086a4557b70f555aaa27224cd223030ccc930a5", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -221,7 +221,7 @@ fn insert_alignment_check<'tcx>(\n                 required: Operand::Copy(alignment),\n                 found: Operand::Copy(addr),\n             },\n-            cleanup: None,\n+            unwind: UnwindAction::Terminate,\n         },\n     });\n }"}, {"sha": "d908f6b3a9b544a95239e8efe3ee1d43ed57eba0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "f0266051f3787e5d077d6b11abef4691e74bf582", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -24,7 +24,7 @@ use crate::MirPass;\n use rustc_const_eval::interpret::{\n     self, compile_time_machine, AllocId, ConstAllocation, ConstValue, CtfeValidationMode, Frame,\n     ImmTy, Immediate, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer,\n-    Scalar, StackPopCleanup, StackPopUnwind,\n+    Scalar, StackPopCleanup,\n };\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n@@ -209,7 +209,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _args: &[OpTy<'tcx>],\n         _destination: &PlaceTy<'tcx>,\n         _target: Option<BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: UnwindAction,\n     ) -> InterpResult<'tcx, Option<(&'mir Body<'tcx>, ty::Instance<'tcx>)>> {\n         Ok(None)\n     }\n@@ -220,15 +220,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _args: &[OpTy<'tcx>],\n         _destination: &PlaceTy<'tcx>,\n         _target: Option<BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: UnwindAction,\n     ) -> InterpResult<'tcx> {\n         throw_machine_stop_str!(\"calling intrinsics isn't supported in ConstProp\")\n     }\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc_middle::mir::AssertMessage<'tcx>,\n-        _unwind: Option<rustc_middle::mir::BasicBlock>,\n+        _unwind: rustc_middle::mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         bug!(\"panics terminators are not evaluated in ConstProp\")\n     }\n@@ -959,7 +959,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "1a96fddcd730025c4e6789d8ecebfb40c01bef45", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -686,7 +686,7 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "725883b83fa92d91b4f8fb83d4700b2cd754c0a1", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -818,7 +818,7 @@ pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n         TerminatorKind::Goto { .. } => \"Goto\",\n         TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n         TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Abort => \"Abort\",\n+        TerminatorKind::Terminate => \"Terminate\",\n         TerminatorKind::Return => \"Return\",\n         TerminatorKind::Unreachable => \"Unreachable\",\n         TerminatorKind::Drop { .. } => \"Drop\","}, {"sha": "7391a77b0a66b614fc405caebe2f5ccf861912d0", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -122,7 +122,7 @@ impl CoverageGraph {\n \n             match term.kind {\n                 TerminatorKind::Return { .. }\n-                | TerminatorKind::Abort\n+                | TerminatorKind::Terminate\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::SwitchInt { .. } => {\n                     // The `bb` has more than one _outgoing_ edge, or exits the function. Save the\n@@ -136,7 +136,7 @@ impl CoverageGraph {\n                     debug!(\"  because term.kind = {:?}\", term.kind);\n                     // Note that this condition is based on `TerminatorKind`, even though it\n                     // theoretically boils down to `successors().len() != 1`; that is, either zero\n-                    // (e.g., `Return`, `Abort`) or multiple successors (e.g., `SwitchInt`), but\n+                    // (e.g., `Return`, `Terminate`) or multiple successors (e.g., `SwitchInt`), but\n                     // since the BCB CFG ignores things like unwind branches (which exist in the\n                     // `Terminator`s `successors()` list) checking the number of successors won't\n                     // work."}, {"sha": "287ae2170875f347370931f387dc442a6d3fd59a", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -869,7 +869,7 @@ pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Sp\n \n         // Retain spans from all other terminators\n         TerminatorKind::Resume\n-        | TerminatorKind::Abort\n+        | TerminatorKind::Terminate\n         | TerminatorKind::Return\n         | TerminatorKind::Yield { .. }\n         | TerminatorKind::GeneratorDrop"}, {"sha": "0f6c06e370ba4e6e9b50f15af3487f6439630506", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> MockBlocks<'tcx> {\n                 args: vec![],\n                 destination: self.dummy_place.clone(),\n                 target: Some(TEMP_BLOCK),\n-                cleanup: None,\n+                unwind: UnwindAction::Continue,\n                 from_hir_call: false,\n                 fn_span: DUMMY_SP,\n             },"}, {"sha": "d4db7e2de4039bba697128bef9fa3394e0376af2", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -567,7 +567,7 @@ impl<'mir, 'tcx> rustc_const_eval::interpret::Machine<'mir, 'tcx> for DummyMachi\n         _args: &[rustc_const_eval::interpret::OpTy<'tcx, Self::Provenance>],\n         _destination: &rustc_const_eval::interpret::PlaceTy<'tcx, Self::Provenance>,\n         _target: Option<BasicBlock>,\n-        _unwind: rustc_const_eval::interpret::StackPopUnwind,\n+        _unwind: UnwindAction,\n     ) -> interpret::InterpResult<'tcx, Option<(&'mir Body<'tcx>, ty::Instance<'tcx>)>> {\n         unimplemented!()\n     }\n@@ -578,15 +578,15 @@ impl<'mir, 'tcx> rustc_const_eval::interpret::Machine<'mir, 'tcx> for DummyMachi\n         _args: &[rustc_const_eval::interpret::OpTy<'tcx, Self::Provenance>],\n         _destination: &rustc_const_eval::interpret::PlaceTy<'tcx, Self::Provenance>,\n         _target: Option<BasicBlock>,\n-        _unwind: rustc_const_eval::interpret::StackPopUnwind,\n+        _unwind: UnwindAction,\n     ) -> interpret::InterpResult<'tcx> {\n         unimplemented!()\n     }\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc_middle::mir::AssertMessage<'tcx>,\n-        _unwind: Option<BasicBlock>,\n+        _unwind: UnwindAction,\n     ) -> interpret::InterpResult<'tcx> {\n         unimplemented!()\n     }"}, {"sha": "811935aa9908282627deb2d264a3e16e31680f07", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -645,8 +645,8 @@ impl WriteInfo {\n                 }\n             }\n             TerminatorKind::Goto { .. }\n-            | TerminatorKind::Resume { .. }\n-            | TerminatorKind::Abort { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable { .. } => (),\n             TerminatorKind::Drop { .. } => {"}, {"sha": "a702113bd9998cce8bbcbf2a2ea9e69d58921ad9", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -120,7 +120,7 @@ fn remove_dead_unwinds<'tcx>(\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n-            TerminatorKind::Drop { ref place, unwind: Some(_), .. } => {\n+            TerminatorKind::Drop { ref place, unwind: UnwindAction::Cleanup(_), .. } => {\n                 und.derefer(place.as_ref(), body).unwrap_or(*place)\n             }\n             _ => continue,\n@@ -160,7 +160,7 @@ fn remove_dead_unwinds<'tcx>(\n     let basic_blocks = body.basic_blocks.as_mut();\n     for &bb in dead_unwinds.iter() {\n         if let Some(unwind) = basic_blocks[bb].terminator_mut().unwind_mut() {\n-            *unwind = None;\n+            *unwind = UnwindAction::Unreachable;\n         }\n     }\n }\n@@ -399,7 +399,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             let loc = Location { block: bb, statement_index: data.statements.len() };\n             let terminator = data.terminator();\n \n-            let resume_block = self.patch.resume_block();\n             match terminator.kind {\n                 TerminatorKind::Drop { mut place, target, unwind } => {\n                     if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n@@ -408,19 +407,31 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n                     self.init_data.seek_before(loc);\n                     match self.move_data().rev_lookup.find(place.as_ref()) {\n-                        LookupResult::Exact(path) => elaborate_drop(\n-                            &mut Elaborator { ctxt: self },\n-                            terminator.source_info,\n-                            place,\n-                            path,\n-                            target,\n-                            if data.is_cleanup {\n+                        LookupResult::Exact(path) => {\n+                            let unwind = if data.is_cleanup {\n                                 Unwind::InCleanup\n                             } else {\n-                                Unwind::To(Option::unwrap_or(unwind, resume_block))\n-                            },\n-                            bb,\n-                        ),\n+                                match unwind {\n+                                    UnwindAction::Cleanup(cleanup) => Unwind::To(cleanup),\n+                                    UnwindAction::Continue => Unwind::To(self.patch.resume_block()),\n+                                    UnwindAction::Unreachable => {\n+                                        Unwind::To(self.patch.unreachable_cleanup_block())\n+                                    }\n+                                    UnwindAction::Terminate => {\n+                                        Unwind::To(self.patch.terminate_block())\n+                                    }\n+                                }\n+                            };\n+                            elaborate_drop(\n+                                &mut Elaborator { ctxt: self },\n+                                terminator.source_info,\n+                                place,\n+                                path,\n+                                target,\n+                                unwind,\n+                                bb,\n+                            )\n+                        }\n                         LookupResult::Parent(..) => {\n                             if !matches!(\n                                 terminator.source_info.span.desugaring_kind(),\n@@ -474,7 +485,10 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 continue;\n             }\n             if let TerminatorKind::Call {\n-                destination, target: Some(tgt), cleanup: Some(_), ..\n+                destination,\n+                target: Some(tgt),\n+                unwind: UnwindAction::Cleanup(_),\n+                ..\n             } = data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n@@ -543,8 +557,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             // There may be a critical edge after this call,\n             // so mark the return as initialized *before* the\n             // call.\n-            if let TerminatorKind::Call { destination, target: Some(_), cleanup: None, .. } =\n-                data.terminator().kind\n+            if let TerminatorKind::Call {\n+                destination,\n+                target: Some(_),\n+                unwind: UnwindAction::Continue | UnwindAction::Unreachable | UnwindAction::Terminate,\n+                ..\n+            } = data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n "}, {"sha": "8601c1b2d71a11366b73fa12298673c513635a4e", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n             args,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             from_hir_call: _,\n             fn_span: _,\n         } = &terminator.kind"}, {"sha": "159780319ba5b505e80ab9b748ad80dee59759a8", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1060,7 +1060,12 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let unwind = if block_data.is_cleanup {\n             Unwind::InCleanup\n         } else {\n-            Unwind::To(unwind.unwrap_or_else(|| elaborator.patch.resume_block()))\n+            Unwind::To(match *unwind {\n+                UnwindAction::Cleanup(tgt) => tgt,\n+                UnwindAction::Continue => elaborator.patch.resume_block(),\n+                UnwindAction::Unreachable => elaborator.patch.unreachable_cleanup_block(),\n+                UnwindAction::Terminate => elaborator.patch.terminate_block(),\n+            })\n         };\n         elaborate_drop(\n             &mut elaborator,\n@@ -1147,7 +1152,7 @@ fn insert_panic_block<'tcx>(\n         expected: true,\n         msg: message,\n         target: assert_block,\n-        cleanup: None,\n+        unwind: UnwindAction::Continue,\n     };\n \n     let source_info = SourceInfo::outermost(body.span);\n@@ -1189,7 +1194,7 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n             // These never unwind.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n@@ -1248,8 +1253,8 @@ fn create_generator_resume_function<'tcx>(\n             } else if !block.is_cleanup {\n                 // Any terminators that *can* unwind but don't have an unwind target set are also\n                 // pointed at our poisoning block (unless they're part of the cleanup path).\n-                if let Some(unwind @ None) = block.terminator_mut().unwind_mut() {\n-                    *unwind = Some(poison_block);\n+                if let Some(unwind @ UnwindAction::Continue) = block.terminator_mut().unwind_mut() {\n+                    *unwind = UnwindAction::Cleanup(poison_block);\n                 }\n             }\n         }\n@@ -1294,8 +1299,11 @@ fn create_generator_resume_function<'tcx>(\n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n-    let term =\n-        TerminatorKind::Drop { place: Place::from(SELF_ARG), target: return_block, unwind: None };\n+    let term = TerminatorKind::Drop {\n+        place: Place::from(SELF_ARG),\n+        target: return_block,\n+        unwind: UnwindAction::Continue,\n+    };\n     let source_info = SourceInfo::outermost(body.span);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n@@ -1670,7 +1678,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n                 args,\n                 destination,\n                 target: Some(_),\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -1693,7 +1701,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "f0cb317f449f352666d3930ffd14f26fec19d851", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -453,7 +453,7 @@ impl<'tcx> Inliner<'tcx> {\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n-                if ty.needs_drop(tcx, self.param_env) && let Some(unwind) = unwind {\n+                if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n             } else if callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set\n@@ -500,7 +500,7 @@ impl<'tcx> Inliner<'tcx> {\n     ) {\n         let terminator = caller_body[callsite.block].terminator.take().unwrap();\n         match terminator.kind {\n-            TerminatorKind::Call { args, destination, cleanup, .. } => {\n+            TerminatorKind::Call { args, destination, unwind, .. } => {\n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n                 // Place could result in two different locations if `f`\n@@ -571,7 +571,7 @@ impl<'tcx> Inliner<'tcx> {\n                     destination: destination_local,\n                     callsite_scope: caller_body.source_scopes[callsite.source_info.scope].clone(),\n                     callsite,\n-                    cleanup_block: cleanup,\n+                    cleanup_block: unwind,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n                     expn_data,\n@@ -813,35 +813,35 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n-                    if unwind.is_some() {\n+                    if let UnwindAction::Cleanup(_) = unwind {\n                         self.cost += LANDINGPAD_PENALTY;\n                     }\n                 } else {\n                     self.cost += INSTR_COST;\n                 }\n             }\n-            TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n+            TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n                 let fn_ty = self.instance.subst_mir(tcx, &f.literal.ty());\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST\n                 } else {\n                     CALL_PENALTY\n                 };\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n-            TerminatorKind::Assert { cleanup, .. } => {\n+            TerminatorKind::Assert { unwind, .. } => {\n                 self.cost += CALL_PENALTY;\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n             TerminatorKind::Resume => self.cost += RESUME_PENALTY,\n-            TerminatorKind::InlineAsm { cleanup, .. } => {\n+            TerminatorKind::InlineAsm { unwind, .. } => {\n                 self.cost += INSTR_COST;\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n@@ -979,7 +979,7 @@ struct Integrator<'a, 'tcx> {\n     destination: Local,\n     callsite_scope: SourceScopeData<'tcx>,\n     callsite: &'a CallSite<'tcx>,\n-    cleanup_block: Option<BasicBlock>,\n+    cleanup_block: UnwindAction,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n     expn_data: LocalExpnId,\n@@ -1014,18 +1014,21 @@ impl Integrator<'_, '_> {\n         new\n     }\n \n-    fn map_unwind(&self, unwind: Option<BasicBlock>) -> Option<BasicBlock> {\n+    fn map_unwind(&self, unwind: UnwindAction) -> UnwindAction {\n         if self.in_cleanup_block {\n-            if unwind.is_some() {\n-                bug!(\"cleanup on cleanup block\");\n+            match unwind {\n+                UnwindAction::Cleanup(_) | UnwindAction::Continue => {\n+                    bug!(\"cleanup on cleanup block\");\n+                }\n+                UnwindAction::Unreachable | UnwindAction::Terminate => return unwind,\n             }\n-            return unwind;\n         }\n \n         match unwind {\n-            Some(target) => Some(self.map_block(target)),\n+            UnwindAction::Unreachable | UnwindAction::Terminate => unwind,\n+            UnwindAction::Cleanup(target) => UnwindAction::Cleanup(self.map_block(target)),\n             // Add an unwind edge to the original call's cleanup block\n-            None => self.cleanup_block,\n+            UnwindAction::Continue => self.cleanup_block,\n         }\n     }\n }\n@@ -1116,15 +1119,15 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                 *target = self.map_block(*target);\n                 *unwind = self.map_unwind(*unwind);\n             }\n-            TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n+            TerminatorKind::Call { ref mut target, ref mut unwind, .. } => {\n                 if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n-            TerminatorKind::Assert { ref mut target, ref mut cleanup, .. } => {\n+            TerminatorKind::Assert { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n             TerminatorKind::Return => {\n                 terminator.kind = if let Some(tgt) = self.callsite.target {\n@@ -1134,11 +1137,14 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Resume => {\n-                if let Some(tgt) = self.cleanup_block {\n-                    terminator.kind = TerminatorKind::Goto { target: tgt }\n-                }\n+                terminator.kind = match self.cleanup_block {\n+                    UnwindAction::Cleanup(tgt) => TerminatorKind::Goto { target: tgt },\n+                    UnwindAction::Continue => TerminatorKind::Resume,\n+                    UnwindAction::Unreachable => TerminatorKind::Unreachable,\n+                    UnwindAction::Terminate => TerminatorKind::Terminate,\n+                };\n             }\n-            TerminatorKind::Abort => {}\n+            TerminatorKind::Terminate => {}\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 *real_target = self.map_block(*real_target);\n@@ -1149,11 +1155,11 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             {\n                 bug!(\"False unwinds should have been removed before inlining\")\n             }\n-            TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n+            TerminatorKind::InlineAsm { ref mut destination, ref mut unwind, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n         }\n     }"}, {"sha": "2e418c1dafc48618975d792dc62c1e4fba316eeb", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -159,7 +159,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n                 ref mut args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 fn_span,\n                 ..\n             } if let ty::FnDef(def_id, _) = *literal.ty().kind()\n@@ -196,7 +196,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n                     };\n                     method(place)\n                 }).collect();\n-                terminator.kind = TerminatorKind::Call { func, args: arguments, destination, target, cleanup, from_hir_call: false, fn_span };\n+                terminator.kind = TerminatorKind::Call { func, args: arguments, destination, target, unwind, from_hir_call: false, fn_span };\n             }\n             _ => {}\n         }"}, {"sha": "7dc5878e04701a056509b68c3d30f3eced5a753b", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -54,7 +54,6 @@ fn lower_slice_len_call<'tcx>(\n             args,\n             destination,\n             target: Some(bb),\n-            cleanup: None,\n             from_hir_call: true,\n             ..\n         } => {"}, {"sha": "4941c9edce3058d642b7e3b488558762b4142c8b", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -72,7 +72,7 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::Return\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Assert { .. }\n@@ -103,11 +103,11 @@ impl RemoveNoopLandingPads {\n         for bb in postorder {\n             debug!(\"  processing {:?}\", bb);\n             if let Some(unwind) = body[bb].terminator_mut().unwind_mut() {\n-                if let Some(unwind_bb) = *unwind {\n+                if let UnwindAction::Cleanup(unwind_bb) = *unwind {\n                     if nop_landing_pads.contains(unwind_bb) {\n                         debug!(\"    removing noop landing pad\");\n                         landing_pads_removed += 1;\n-                        *unwind = None;\n+                        *unwind = UnwindAction::Continue;\n                     }\n                 }\n             }"}, {"sha": "ef367faf6a70791cae313bd44f2aad5a7b6fea8c", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -112,7 +112,7 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n                         | TerminatorKind::Assert { .. }\n                         | TerminatorKind::FalseUnwind { .. }\n                         | TerminatorKind::Yield { .. }\n-                        | TerminatorKind::Abort\n+                        | TerminatorKind::Terminate\n                         | TerminatorKind::Return\n                         | TerminatorKind::Unreachable\n                         | TerminatorKind::InlineAsm { .. }\n@@ -164,7 +164,7 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n             }\n \n             TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop"}, {"sha": "2787fe2ce42cd6b18266824b0f8e58b88183121e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                 args: vec![Operand::Move(ref_loc)],\n                 destination: dest,\n                 target: Some(next),\n-                cleanup: Some(cleanup),\n+                unwind: UnwindAction::Cleanup(cleanup),\n                 from_hir_call: true,\n                 fn_span: self.span,\n             },\n@@ -540,7 +540,11 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             self.make_clone_call(dest_field, src_field, ity, next_block, unwind);\n             self.block(\n                 vec![],\n-                TerminatorKind::Drop { place: dest_field, target: unwind, unwind: None },\n+                TerminatorKind::Drop {\n+                    place: dest_field,\n+                    target: unwind,\n+                    unwind: UnwindAction::Terminate,\n+                },\n                 true,\n             );\n             unwind = next_unwind;\n@@ -776,10 +780,10 @@ fn build_call_shim<'tcx>(\n             args,\n             destination: Place::return_place(),\n             target: Some(BasicBlock::new(1)),\n-            cleanup: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n-                Some(BasicBlock::new(3))\n+            unwind: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n+                UnwindAction::Cleanup(BasicBlock::new(3))\n             } else {\n-                None\n+                UnwindAction::Continue\n             },\n             from_hir_call: true,\n             fn_span: span,\n@@ -792,7 +796,11 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(2), unwind: None },\n+            TerminatorKind::Drop {\n+                place: rcvr_place(),\n+                target: BasicBlock::new(2),\n+                unwind: UnwindAction::Continue,\n+            },\n             false,\n         );\n     }\n@@ -803,7 +811,11 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(4), unwind: None },\n+            TerminatorKind::Drop {\n+                place: rcvr_place(),\n+                target: BasicBlock::new(4),\n+                unwind: UnwindAction::Terminate,\n+            },\n             true,\n         );\n "}, {"sha": "7bcff7e07fb34ff703d2d870a5e80a7c69735fc4", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -852,7 +852,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));\n                 }\n             }\n-            mir::TerminatorKind::Abort { .. } => {\n+            mir::TerminatorKind::Terminate { .. } => {\n                 let instance = Instance::mono(\n                     tcx,\n                     tcx.require_lang_item(LangItem::PanicCannotUnwind, Some(source)),\n@@ -872,6 +872,16 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             | mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n+        if let Some(mir::UnwindAction::Terminate) = terminator.unwind() {\n+            let instance = Instance::mono(\n+                tcx,\n+                tcx.require_lang_item(LangItem::PanicCannotUnwind, Some(source)),\n+            );\n+            if should_codegen_locally(tcx, &instance) {\n+                self.output.push(create_fn_mono_item(tcx, instance, source));\n+            }\n+        }\n+\n         self.super_terminator(terminator, location);\n     }\n "}, {"sha": "0befff894ef31e6f28a4c9cd6df15a90116708cf", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -143,7 +143,7 @@ fn rustc_terminator_to_terminator(\n             otherwise: targets.otherwise().as_usize(),\n         },\n         Resume => Terminator::Resume,\n-        Abort => Terminator::Abort,\n+        Terminate => Terminator::Abort,\n         Return => Terminator::Return,\n         Unreachable => Terminator::Unreachable,\n         Drop { .. } => todo!(),"}, {"sha": "354b6d71aa4664088c2a2614a18110cfcae720cd", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -301,13 +301,13 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Goto { .. }\n         | TerminatorKind::Return\n         | TerminatorKind::Resume\n+        | TerminatorKind::Terminate\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n \n-        TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n             Err((span, \"const fn generators are unstable\".into()))\n         },\n@@ -318,7 +318,7 @@ fn check_terminator<'tcx>(\n             from_hir_call: _,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n@@ -361,7 +361,7 @@ fn check_terminator<'tcx>(\n             expected: _,\n             msg: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n         } => check_operand(tcx, cond, span, body),\n \n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),"}, {"sha": "8f6ae72949174de9fb7ec8f9f71635aa2d94e2d0", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -951,7 +951,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         if this.machine.panic_on_unsupported {\n             // message is slightly different here to make automated analysis easier\n             let error_msg = format!(\"unsupported Miri functionality: {}\", error_msg.as_ref());\n-            this.start_panic(error_msg.as_ref(), StackPopUnwind::Skip)?;\n+            this.start_panic(error_msg.as_ref(), mir::UnwindAction::Continue)?;\n             Ok(())\n         } else {\n             throw_unsup_format!(\"{}\", error_msg.as_ref());"}, {"sha": "477d8d33ebba7786a4662ec108be25f5bce853e7", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -834,7 +834,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         ecx.find_mir_or_eval_fn(instance, abi, args, dest, ret, unwind)\n     }\n@@ -847,7 +847,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         ecx.call_dlsym(fn_val, abi, args, dest, ret)\n     }\n@@ -859,7 +859,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         ecx.call_intrinsic(instance, args, dest, ret, unwind)\n     }\n@@ -868,7 +868,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     fn assert_panic(\n         ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         ecx.assert_panic(msg, unwind)\n     }"}, {"sha": "fcee381ff7132a4e405f70652ae693ac7600727b", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -258,7 +258,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         let this = self.eval_context_mut();\n         let link_name = this.item_link_name(def_id);"}, {"sha": "ca2c1652dc1993387eec11033cf975ac8c871178", "filename": "src/tools/miri/src/shims/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -26,7 +26,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        _unwind: StackPopUnwind,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n "}, {"sha": "918efda3777fa0e5aa61faa5b6f7c90fa491deed", "filename": "src/tools/miri/src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -34,7 +34,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         let this = self.eval_context_mut();\n         trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest);\n@@ -70,7 +70,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         align_op: &OpTy<'tcx, Provenance>,\n         dest: &PlaceTy<'tcx, Provenance>,\n         ret: Option<mir::BasicBlock>,\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let ret = ret.unwrap();"}, {"sha": "2cca2f3f3914d7fab6d02e032ae331b5d5805f94", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -53,7 +53,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         abi: Abi,\n         link_name: Symbol,\n         args: &[OpTy<'tcx, Provenance>],\n-        unwind: StackPopUnwind,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n@@ -106,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             &[data.into()],\n             None,\n             // Directly return to caller.\n-            StackPopCleanup::Goto { ret: Some(ret), unwind: StackPopUnwind::Skip },\n+            StackPopCleanup::Goto { ret: Some(ret), unwind: mir::UnwindAction::Continue },\n         )?;\n \n         // We ourselves will return `0`, eventually (will be overwritten if we catch a panic).\n@@ -157,7 +157,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 &[catch_unwind.data.into(), payload.into()],\n                 None,\n                 // Directly return to caller of `try`.\n-                StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: StackPopUnwind::Skip },\n+                StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: mir::UnwindAction::Continue },\n             )?;\n \n             // We pushed a new stack frame, the engine should not do any jumping now!\n@@ -168,7 +168,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     }\n \n     /// Start a panic in the interpreter with the given message as payload.\n-    fn start_panic(&mut self, msg: &str, unwind: StackPopUnwind) -> InterpResult<'tcx> {\n+    fn start_panic(&mut self, msg: &str, unwind: mir::UnwindAction) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // First arg: message.\n@@ -189,7 +189,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn assert_panic(\n         &mut self,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         use rustc_middle::mir::AssertKind::*;\n         let this = self.eval_context_mut();\n@@ -213,10 +213,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     None,\n                     StackPopCleanup::Goto {\n                         ret: None,\n-                        unwind: match unwind {\n-                            Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n-                            None => StackPopUnwind::Skip,\n-                        },\n+                        unwind,\n                     },\n                 )?;\n             }\n@@ -240,10 +237,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     None,\n                     StackPopCleanup::Goto {\n                         ret: None,\n-                        unwind: match unwind {\n-                            Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n-                            None => StackPopUnwind::Skip,\n-                        },\n+                        unwind,\n                     },\n                 )?;\n             }\n@@ -252,10 +246,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // Forward everything else to `panic` lang item.\n                 this.start_panic(\n                     msg.description(),\n-                    match unwind {\n-                        Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n-                        None => StackPopUnwind::Skip,\n-                    },\n+                    unwind,\n                 )?;\n             }\n         }"}, {"sha": "e1631471ae2bef79771e582738650c40d3416f76", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,14 +1,14 @@\n thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n LL | |\n LL | |\n LL | |     panic!();\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: inside `main`"}, {"sha": "e1631471ae2bef79771e582738650c40d3416f76", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,14 +1,14 @@\n thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n LL | |\n LL | |\n LL | |     panic!();\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: inside `main`"}, {"sha": "65ba3433c28c78a6c2f69c04651838e937402e1a", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,8 +4,8 @@\n #[cfg_attr(any(definition, both), rustc_nounwind)]\n #[no_mangle]\n extern \"C-unwind\" fn nounwind() {\n-    //~[definition]^ ERROR: abnormal termination: the program aborted execution\n-    //~[both]^^ ERROR: abnormal termination: the program aborted execution\n+    //~[definition]^ ERROR: abnormal termination: panic in a function that cannot unwind\n+    //~[both]^^ ERROR: abnormal termination: panic in a function that cannot unwind\n     panic!();\n }\n "}, {"sha": "f4931659fc82ad906dfda10553f84b087af1abdf", "filename": "src/tools/miri/tests/fail/terminate-terminator.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -0,0 +1,27 @@\n+//@compile-flags: -Zmir-opt-level=3\n+// Enable MIR inlining to ensure that `TerminatorKind::Terminate` is generated\n+// instead of just `UnwindAction::Terminate`.\n+\n+#![feature(c_unwind)]\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+#[inline(always)]\n+fn has_cleanup() {\n+    //~^ ERROR: panic in a function that cannot unwind\n+    // FIXME(nbdd0121): The error should be reported at the call site.\n+    let _f = Foo;\n+    panic!();\n+}\n+\n+extern \"C\" fn panic_abort() {\n+    has_cleanup();\n+}\n+\n+fn main() {\n+    panic_abort();\n+}"}, {"sha": "3befd83007bfd0e59e56d49ed272ca0db1ce9585", "filename": "src/tools/miri/tests/fail/terminate-terminator.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -0,0 +1,27 @@\n+thread 'main' panicked at 'explicit panic', $DIR/terminate-terminator.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: panic in a function that cannot unwind\n+  --> $DIR/terminate-terminator.rs:LL:CC\n+   |\n+LL | / fn has_cleanup() {\n+LL | |\n+LL | |     // FIXME(nbdd0121): The error should be reported at the call site.\n+LL | |     let _f = Foo;\n+LL | |     panic!();\n+LL | | }\n+   | |_^ panic in a function that cannot unwind\n+...\n+LL |       has_cleanup();\n+   |       ------------- in this inlined function call\n+   |\n+   = note: inside `panic_abort` at $DIR/terminate-terminator.rs:LL:CC\n+note: inside `main`\n+  --> $DIR/terminate-terminator.rs:LL:CC\n+   |\n+LL |     panic_abort();\n+   |     ^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "876b9a9ab0abc154b70a137e49dd9678fe755fa7", "filename": "src/tools/miri/tests/fail/unwind-action-terminate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,7 +1,7 @@\n #![feature(c_unwind)]\n \n extern \"C\" fn panic_abort() {\n-    //~^ ERROR: the program aborted\n+    //~^ ERROR: panic in a function that cannot unwind\n     panic!()\n }\n ", "previous_filename": "src/tools/miri/tests/fail/abort-terminator.rs"}, {"sha": "52a1879cb5fef81d3bdf84fac2e44bb633629b73", "filename": "src/tools/miri/tests/fail/unwind-action-terminate.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funwind-action-terminate.stderr?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,17 +1,17 @@\n-thread 'main' panicked at 'explicit panic', $DIR/abort-terminator.rs:LL:CC\n+thread 'main' panicked at 'explicit panic', $DIR/unwind-action-terminate.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n-  --> $DIR/abort-terminator.rs:LL:CC\n+error: abnormal termination: panic in a function that cannot unwind\n+  --> $DIR/unwind-action-terminate.rs:LL:CC\n    |\n LL | / extern \"C\" fn panic_abort() {\n LL | |\n LL | |     panic!()\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n-   = note: inside `panic_abort` at $DIR/abort-terminator.rs:LL:CC\n+   = note: inside `panic_abort` at $DIR/unwind-action-terminate.rs:LL:CC\n note: inside `main`\n-  --> $DIR/abort-terminator.rs:LL:CC\n+  --> $DIR/unwind-action-terminate.rs:LL:CC\n    |\n LL |     panic_abort();\n    |     ^^^^^^^^^^^^^", "previous_filename": "src/tools/miri/tests/fail/abort-terminator.stderr"}, {"sha": "4be382fac8c32cf671c6fb99cdc4cd5d99773ab1", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n         _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n                                          // mir::Constant\n-                                         // + span: $DIR/array_index_is_temporary.rs:16:21: 16:24\n+                                         // + span: $DIR/array_index_is_temporary.rs:17:21: 17:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n "}, {"sha": "702b9c70e592a9bb760834af8d1bee49e8305062", "filename": "tests/mir-opt/array_index_is_temporary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Retagging (from Stacked Borrows) relies on the array index being a fresh\n // temporary, so that side-effects cannot change it.\n // Test that this is indeed the case."}, {"sha": "f6954ab35263f3b88ad882a3930020fed9fa1e62", "filename": "tests/mir-opt/asm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,16 +9,12 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n         _1 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n-        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb2]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind terminate]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n     }\n \n     bb1: {\n         StorageDead(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:48: +2:49\n         _0 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+1:5: +3:6\n         return;                          // scope 0 at $DIR/asm_unwind_panic_abort.rs:+4:2: +4:2\n     }\n-\n-    bb2 (cleanup): {\n-        abort;                           // scope 0 at $DIR/asm_unwind_panic_abort.rs:+0:1: +4:2\n-    }\n }"}, {"sha": "d663c343515bc278b1a3b47b9f1122ae9619d025", "filename": "tests/mir-opt/basic_assignment.main.ElaborateDrops.diff", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -47,7 +47,7 @@\n   \n       bb2 (cleanup): {\n           _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-          drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+          drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n       }\n   \n       bb3: {\n@@ -70,16 +70,20 @@\n       }\n   \n       bb6 (cleanup): {\n-          drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+          drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n       }\n   \n       bb7 (cleanup): {\n--         drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+-         drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n +         goto -> bb8;                     // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n       }\n   \n       bb8 (cleanup): {\n           resume;                          // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n++     }\n++ \n++     bb9 (cleanup): {\n++         unreachable;                     // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n       }\n   }\n   "}, {"sha": "d63497e3a98d6882975781cbc58cf1174005bf9a", "filename": "tests/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -51,7 +51,7 @@ fn main() -> () {\n \n     bb2 (cleanup): {\n         _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+        drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n     }\n \n     bb3: {\n@@ -73,11 +73,11 @@ fn main() -> () {\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb8 (cleanup): {"}, {"sha": "bac5b21dfad1fb6406474e1634c45c893e574527", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -63,15 +63,15 @@ fn main() -> () {\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        drop(_7) -> [return: bb7, unwind terminate]; // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        drop(_1) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        drop(_5) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n     }\n \n     bb9 (cleanup): {"}, {"sha": "7cce3415fa1b7209fdfc4cba5f1e698eaa73c8b3", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -98,14 +98,14 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n         StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n         StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-        _5 = a() -> bb2;                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n+        _5 = a() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:5: 15:6\n                                          // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> bb3; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n@@ -126,7 +126,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n         _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n         _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> bb5; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n@@ -145,7 +145,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb6: {\n         _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> bb7; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n@@ -206,14 +206,14 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n         StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n         StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-        _22 = a() -> bb14;               // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n+        _22 = a() -> [return: bb14, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:5: 16:6\n                                          // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n     }\n \n     bb14: {\n-        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> bb15; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n@@ -234,7 +234,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n         _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n         _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> bb17; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n@@ -253,7 +253,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb18: {\n         _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> bb19; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }"}, {"sha": "1112177fbbf408480626640458e14f1b50054781", "filename": "tests/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -63,7 +63,7 @@ fn droppy() -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(_2) -> bb5;                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n     }\n \n     bb5 (cleanup): {"}, {"sha": "cc135f41721526e1065e6734b9f0e9d3d4bbd7a3", "filename": "tests/mir-opt/building/issue_49232.main.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -17,7 +17,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n+        falseUnwind -> [real: bb2, unwind: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n     }\n \n     bb2: {"}, {"sha": "54f0ea2d894235a69f022952f729c77fb5708a53", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -95,15 +95,15 @@ fn move_out_by_subslice() -> () {\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {"}, {"sha": "5090a4ba67518843ad5322ae85100eb6c8608966", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -95,15 +95,15 @@ fn move_out_from_end() -> () {\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {"}, {"sha": "08c5f1a1fc553fdceef9b7935903836a2e873fc9", "filename": "tests/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: InstCombine\n // EMIT_MIR combine_array_len.norm2.InstCombine.diff\n "}, {"sha": "b715a544ffea1b7afaa47c78366cfe92e5ab6f64", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -72,7 +72,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> bb5;                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "168e8c610316593726cc36b20fdce1b888ba73c4", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -128,7 +128,7 @@\n           StorageDead(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:47: +11:48\n           StorageLive(_23);                // scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n           StorageLive(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n-          _24 = MaybeUninit::<String>::uninit() -> bb1; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+          _24 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n                                            // mir::Constant\n                                            // + span: $DIR/combine_transmutes.rs:46:46: 46:75\n                                            // + user_ty: UserType(23)"}, {"sha": "ae1185c7f712faf0cfd833f5bf662a39cc6be7a3", "filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -19,7 +19,7 @@\n +         _1 = const 1_i32;                // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n           StorageLive(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n           StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n-          _3 = Vec::<i32>::new() -> bb1;   // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+          _3 = Vec::<i32>::new() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n                                            // mir::Constant\n                                            // + span: $DIR/combine_transmutes.rs:15:46: 15:54\n                                            // + user_ty: UserType(0)\n@@ -31,7 +31,7 @@\n +         _2 = move _3;                    // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n           StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:56: +3:57\n           _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:37: +4:2\n-          drop(_2) -> bb2;                 // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+          drop(_2) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n       }\n   \n       bb2: {"}, {"sha": "0411972661eb745648a5bf42f499beb97909f4d0", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -29,7 +29,7 @@\n +         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n           _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n                                            // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                           // + span: $DIR/aggregate.rs:9:5: 9:8\n                                            // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "05d4bf8b52e79ddf15301f48345f31defb8c854c", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n         _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n                                          // mir::Constant\n-                                         // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                         // + span: $DIR/aggregate.rs:9:5: 9:8\n                                          // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n     }\n "}, {"sha": "ed5a4ab594d5c6e40f66c8daaa79f65924b66bb2", "filename": "tests/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -O\n "}, {"sha": "f36cf221348665decc7b98e3b993295ea1d3a9a3", "filename": "tests/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n "}, {"sha": "38f1a993dc03af7c0746cb7b0cc692df5459f9c6", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // EMIT_MIR bad_op_div_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "a1078472cbf81a2bbe64ca98ea912d88a13142f1", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR bad_op_mod_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]\n fn main() {"}, {"sha": "e711babf03573c994cc4bdc2cc23f78bdd48b5d4", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35"}, {"sha": "e711babf03573c994cc4bdc2cc23f78bdd48b5d4", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35"}, {"sha": "3d252f2d221b7d69ceaa3a0bda8a71097e14caec", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR bad_op_unsafe_oob_for_slices.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "007defd10379cb9558004abf224533444a8f2dc1", "filename": "tests/mir-opt/const_prop/checked_add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "d75fae30b5386395f8a725b6256b3cc19cb094d6", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n           _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:13: 9:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n           _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n@@ -29,7 +29,7 @@\n           _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n           _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n                                            // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:5: 9:9\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:10:5: 10:9\n                                            // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "44d4878424dd81c66bd929048eaf79c021e0398f", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n #[inline(never)]\n fn read(_: usize) { }"}, {"sha": "b2ca045e89f984d1c85f0683e56c6775cdd4168e", "filename": "tests/mir-opt/const_prop/control_flow_simplification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-opt-level=1\n "}, {"sha": "46fd8082d308ca0f8ed6c7f14d9c069a58009582", "filename": "tests/mir-opt/const_prop/indirect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "0ac7fa43d5b45c8c8156790d54d5d8399fd26a5f", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -8,7 +8,7 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:8:13: 8:47\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n           debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "4e905d00d4d92339a53affb0728c2a153d414a2a", "filename": "tests/mir-opt/const_prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "2652694097c4f2847fbf5171bebaf5f61403b09f", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n           _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_66971.rs:17:5: 17:11\n+                                           // + span: $DIR/issue_66971.rs:18:5: 18:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "af95c9ca2838961583b20544400d73fe7fdcdde5", "filename": "tests/mir-opt/const_prop/issue_66971.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "54c9200d6721e194c935e22b5e1a345af0c809dd", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,7 +16,7 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_67019.rs:12:5: 12:9\n+                                           // + span: $DIR/issue_67019.rs:13:5: 13:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "08c7d4805d61522946aaf58ca4a7cb806cd1f20e", "filename": "tests/mir-opt/const_prop/issue_67019.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "073f984956899e0f28e2d040ff4f12b43eec1a0c", "filename": "tests/mir-opt/const_prop/large_array_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR large_array_index.main.ConstProp.diff"}, {"sha": "75f6ebc58c751161f123eac09d82740cc30891fa", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:29: 7:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "70a287cf381eac90ace1136976cd920ea62ff5e0", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -O\n "}, {"sha": "9582504b25e812eb5527ba9bea295df86e34386f", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -26,7 +26,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:7:13: 7:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "fabd04e9bd27cbb81e26b6989b5e14c131317663", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -O\n "}, {"sha": "5ffa153476d9cb3ce12af22c5c9912ebacdc4cbf", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "2f3b7d2c502163bb8f2ea9e83ffe0e84ccd36b87", "filename": "tests/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -O\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "ae119df8518ec881b96a265202f4c32283f0eb37", "filename": "tests/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -C overflow-checks=on\n \n // EMIT_MIR return_place.add.ConstProp.diff"}, {"sha": "a091b4ace20cc1c471e44d8328aed980136067a4", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,7 +15,7 @@\n -         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n+                                           // + span: $DIR/scalar_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "e13e352f8a1d69a88dfbddc1063ef5a87319f181", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR scalar_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = 1;"}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19"}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19"}, {"sha": "4499c54f264b99da85e44676d772a580b14a23fa", "filename": "tests/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+InstCombine\n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "85704c48a2c3745782546db18a9540aca8b3b39c", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "0864db22523ff70dd6b73ffac2e32dc02b72e24e", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2a2322e43a9701bf63db03f8ac3b10af24c8f0a1", "filename": "tests/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn foo(_: i32) { }\n "}, {"sha": "12313b6c58d7cdc61c35f11f0dd04ebc27b1208b", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,7 +15,7 @@\n +         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n           _2 = consume(_1) -> bb1;         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n+                                           // + span: $DIR/tuple_literal_propagation.rs:6:5: 6:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "edd748d00ab3e26182faa1f1cbe8c406ed176d06", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR tuple_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = (1, 2);"}, {"sha": "2a0bff57db9cfdd05bbbad7cdf464efd8f57ccfd", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,15 +15,15 @@\n           _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = cmp_ref(_2, _4) -> bb1;     // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n                                            // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:23:29: 23:36\n+                                           // + span: $DIR/borrowed_local.rs:24:29: 24:36\n                                            // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n -         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n +         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n                                            // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:27:28: 27:34\n+                                           // + span: $DIR/borrowed_local.rs:28:28: 28:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "9186da5af4845282c6a5ed416bba21b3acaa5311", "filename": "tests/mir-opt/copy-prop/borrowed_local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "b78c19d78d045b295f9fd519a0f2fca536b14aa6", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n           _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -27,7 +27,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n@@ -44,7 +44,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "0a2e16946345a7222bfad6c8aeab000e6a88d055", "filename": "tests/mir-opt/copy-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that we bail out when there are multiple assignments to the same local.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "24bca32207fa91031526f943c094aa5fe62aa3ec", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "87708f340054383a3e484c3b94ca3eeeaefaa162", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "1b65dcb01ed369fa04f425291726efc87d0c7918", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that CopyProp does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: CopyProp"}, {"sha": "160f47bdd8f7eb62e71f1f696a8b94c1aeea7c70", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n -         _0 = opaque::<NotCopy>(move _1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n +         _0 = opaque::<NotCopy>(_1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n                                            // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:15:24: 15:30\n+                                           // + span: $DIR/custom_move_arg.rs:16:24: 16:30\n                                            // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n       }\n   \n@@ -20,7 +20,7 @@\n -         _0 = opaque::<NotCopy>(_3) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n +         _0 = opaque::<NotCopy>(_1) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n                                            // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:19:24: 19:30\n+                                           // + span: $DIR/custom_move_arg.rs:20:24: 20:30\n                                            // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "29c368df82d8a0181f0b414f9b3ca7423bb71ab6", "filename": "tests/mir-opt/copy-prop/custom_move_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "23d92ed1ac5b9e5b9eb026d2bd64b1bd510e242c", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -24,7 +24,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n           _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -43,7 +43,7 @@\n           _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n           _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "da70f6bec2ebf9c5573175f32ab67df7ae6e120f", "filename": "tests/mir-opt/copy-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that cyclic assignments don't hang CopyProp, and result in reasonable code.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "c56418d8893f2125ca4004d14a2f35fc2e2b8c33", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -18,7 +18,7 @@ fn f(_1: usize) -> usize {\n         _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n         _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "84453c55e3ef48a738d518a80c3b45dcd612abe4", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n fn id<T>(x: T) -> T {"}, {"sha": "f355421732e45d72852d36657eb99b7201d788b1", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -18,7 +18,7 @@ fn f(_1: usize) -> usize {\n         _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n         _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "87b916fd3ff84a984644b24eaae3571aed5bd918", "filename": "tests/mir-opt/copy-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "e09ccb831199898efd7943175feca3f4c2ccfead", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -51,7 +51,7 @@\n           StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n           _5 = core::slice::<impl [i32]>::len(move _6) -> bb1; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:19: 10:22\n+                                           // + span: $DIR/issue_107511.rs:11:19: 11:22\n                                            // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n       }\n   \n@@ -61,7 +61,7 @@\n           StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n           _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n                                            // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -81,7 +81,7 @@\n           _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n           _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> bb4; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n                                            // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2b00ff15581f1a541c6a1dcb3167834d83e0e32e", "filename": "tests/mir-opt/copy-prop/issue_107511.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n // EMIT_MIR issue_107511.main.CopyProp.diff"}, {"sha": "650bd66a7d73eeea88340abfe8bc942a28dc4f11", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -24,7 +24,7 @@\n -         _3 = g::<T>(move _4, move _5) -> bb1; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n +         _3 = g::<T>(_1, _1) -> bb1;      // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n                                            // mir::Constant\n-                                           // + span: $DIR/move_arg.rs:7:5: 7:6\n+                                           // + span: $DIR/move_arg.rs:8:5: 8:6\n                                            // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f88d9a9e74bbfa28bfe93151ee74470520ff6aa2", "filename": "tests/mir-opt/copy-prop/move_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Test that we do not move multiple times from the same local.\n // unit-test: CopyProp\n "}, {"sha": "beb85d68a660c33c0abc059e2612e0cdd905ee5d", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,14 +13,14 @@\n +         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n +         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n                                            // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:19:28: 19:34\n+                                           // + span: $DIR/move_projection.rs:20:28: 20:34\n                                            // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n                                            // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:22:28: 22:34\n+                                           // + span: $DIR/move_projection.rs:23:28: 23:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c158c69e0cf8bd2b40b347ee2d2fc1289b86fca1", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "b4a2482456636ae4d4dc16844c7d70d4fac4b81d", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -39,7 +39,7 @@\n -         _6 = opaque::<*mut u8>(move _7) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n +         _6 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:38:5: 38:11\n+                                           // + span: $DIR/reborrow.rs:39:5: 39:11\n                                            // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "a6a6c05b24ae9c4163cc0261979eb4c30b92e003", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -35,7 +35,7 @@\n -         _5 = opaque::<*mut u8>(move _6) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:30:5: 30:11\n+                                           // + span: $DIR/reborrow.rs:31:5: 31:11\n                                            // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f3d26cc6e2bfee0ad2b550e7062d16d48b9be018", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -33,7 +33,7 @@\n -         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:14:5: 14:11\n+                                           // + span: $DIR/reborrow.rs:15:5: 15:11\n                                            // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "63e42b4dc7711460accc18d22f621b52d3f8cf4a", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -33,7 +33,7 @@\n -         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:22:5: 22:11\n+                                           // + span: $DIR/reborrow.rs:23:5: 23:11\n                                            // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "91b77966ba84587f8ff27da614196dd46f5fcd47", "filename": "tests/mir-opt/copy-prop/reborrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that CopyProp considers reborrows as not mutating the pointer.\n // unit-test: CopyProp\n "}, {"sha": "0f9f5a97faca2d2addae93b0cbed58ec66daadb3", "filename": "tests/mir-opt/dataflow-const-prop/checked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n // compile-flags: -Coverflow-checks=on\n "}, {"sha": "1edcc28e68c150d84cdaad7eaf105d497971537b", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -8,7 +8,7 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:8:13: 8:47\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n           debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "90349d5270cc8acba43d86f9381286cf5023801a", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "70ef17afd659ce57a1d30f233a15f16160d631ea", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -26,7 +26,7 @@\n           _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n           _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:12:5: 12:11\n+                                           // + span: $DIR/ref_without_sb.rs:13:5: 13:11\n                                            // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n       }\n   \n@@ -38,7 +38,7 @@\n           StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n           _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:14:5: 14:18\n+                                           // + span: $DIR/ref_without_sb.rs:15:5: 15:18\n                                            // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f53de3cf2d4cf6ddf96c1d09705a444fe12b0d41", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n \n #[inline(never)]"}, {"sha": "6ca569f3d8e5b79230caca4cba562d8c5394da54", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -32,7 +32,7 @@\n           _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n           _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n                                            // mir::Constant\n-                                           // + span: $DIR/sibling_ptr.rs:15:12: 15:15\n+                                           // + span: $DIR/sibling_ptr.rs:16:12: 16:15\n                                            // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "81fc3c2f49c7ce323c2cac61c41e69073ba652fb", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This attempts to modify `x.1` via a pointer derived from `addr_of_mut!(x.0)`.\n // According to Miri, that is UB. However, T-opsem has not finalized that\n // decision and as such we cannot rely on it in optimizations. Consequently,"}, {"sha": "9854beaeb217cfb35da56d25182f6d2b90383c64", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -25,7 +25,7 @@\n -         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n +         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/terminator.rs:9:5: 9:8\n+                                           // + span: $DIR/terminator.rs:10:5: 10:8\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "4f001df35f14d475187af0dfa2032d22dc458fb1", "filename": "tests/mir-opt/dataflow-const-prop/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n \n fn foo(n: i32) {}"}, {"sha": "2776ff51d85a12a25fc64f9470e83d50f77962b4", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -32,7 +32,7 @@\n +         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n +         _4 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:12:11: 12:15\n+                                           // + span: $DIR/cycle.rs:13:11: 13:15\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "570bfe84d1064ccdfad1cee22b5f52932da7ccc6", "filename": "tests/mir-opt/dead-store-elimination/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DeadStoreElimination\n \n #[inline(never)]"}, {"sha": "c4ebf1ca834f9574096abb15fbbaf6ff14cdff4b", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -19,7 +19,7 @@\n           _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n           _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n                                            // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:5:13: 5:21\n+                                           // + span: $DIR/deduplicate_blocks.rs:6:13: 6:21\n                                            // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "46012e19aa4bf447595295c6a9f9bb4e8aaeba92", "filename": "tests/mir-opt/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DeduplicateBlocks\n \n // EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff"}, {"sha": "97826ed19a252e1d1c7ae2d32e987219f61609e0", "filename": "tests/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -25,19 +25,19 @@ fn foo(_1: Option<String>) -> i32 {\n         _7 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n         _6 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n         _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n-        drop(_6) -> bb6;                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        drop(_6) -> [return: bb6, unwind unreachable]; // scope 0 at $DIR/string.rs:+3:17: +3:18\n     }\n \n     bb2: {\n         _2 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n-        _3 = <String as Deref>::deref(move _2) -> bb3; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _3 = <String as Deref>::deref(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        _4 = <str as PartialEq>::eq(_3, const \"a\") -> bb4; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _4 = <str as PartialEq>::eq(_3, const \"a\") -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }\n@@ -65,7 +65,7 @@ fn foo(_1: Option<String>) -> i32 {\n     }\n \n     bb8: {\n-        drop(_1) -> bb7;                 // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        drop(_1) -> [return: bb7, unwind unreachable]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n     }\n \n     bb9: {"}, {"sha": "426d4fb213cdb1653a9c218b02e0e201f881941e", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -35,7 +35,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> bb5;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "b7416d389ef7b7c15c2038eaf057f5592977aafd", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@\n +         nop;                             // scope 0 at $DIR/branch.rs:+1:9: +1:10\n +         _0 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -32,7 +32,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n@@ -50,7 +50,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "7e4276e66922f712a8aeffa27b388fc3d3f242c3", "filename": "tests/mir-opt/dest-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that assignment in both branches of an `if` are eliminated.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "a61e741f73dcdebc29644ffdbfc6c6f5deeb0501", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,7 +16,7 @@\n +         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n +         _2 = dummy(move _1) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c7fbecac5c47f2f30b67b3d01e99b5dee30006f5", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,7 +15,7 @@\n -         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n +         _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "57cb328c231b3f239d3f414d4bec0cc4079af897", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that DestinationPropagation does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: DestinationPropagation"}, {"sha": "b06f069a2e4ff492b4576ef8593053f4f3b2d9b3", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -28,7 +28,7 @@\n +         nop;                             // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n +         _6 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -56,7 +56,7 @@\n +         nop;                             // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n           _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "3aea19d80dc7a82f00ebac826eb4a979a29b14d4", "filename": "tests/mir-opt/dest-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that cyclic assignments don't hang DestinationPropagation, and result in reasonable code.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "b9d4b59d2f7a1cfe27a25523850a93f307910f70", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@ fn f(_1: usize) -> usize {\n         nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n         _0 = id::<usize>(move _1) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "9d4814838d4eaa99ff1ed1108911f43a4d84721c", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DestinationPropagation\n \n fn id<T>(x: T) -> T {"}, {"sha": "9eb0e09bf1b212e92c18b356395dacd4ffb36e3f", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -21,7 +21,7 @@ fn f(_1: usize) -> usize {\n         nop;                             // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n         _0 = id::<usize>(move _1) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "72d406bfd40ada90a804e735ccce80acb9ef54e3", "filename": "tests/mir-opt/dest-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "3a4aec34e8cc43fd54158155834c2d7bab95150c", "filename": "tests/mir-opt/dest-prop/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Copy of `nrvo-simple.rs`, to ensure that full dest-prop handles it too.\n // unit-test: DestinationPropagation\n // EMIT_MIR simple.nrvo.DestinationPropagation.diff"}, {"sha": "457fc830874dad2bf2e1bf2caf0066745f41d2d7", "filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -10,7 +10,7 @@\n           debug un => _1;                  // in scope 1 at $DIR/union.rs:+5:9: +5:11\n           scope 2 {\n           }\n-          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n+          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:16:5: 16:27\n               debug _x => _3;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           }\n       }\n@@ -20,7 +20,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/union.rs:+5:23: +5:28\n           _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:+5:23: +5:28\n                                            // mir::Constant\n-                                           // + span: $DIR/union.rs:13:23: 13:26\n+                                           // + span: $DIR/union.rs:14:23: 14:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "062d02d067311f1ea7b0b83d76ebec784c1963ca", "filename": "tests/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that we can propagate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {"}, {"sha": "ae63d724d0a51bfc6f205e4254e6209aa10b58c6", "filename": "tests/mir-opt/dest-prop/unreachable.f.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -36,7 +36,7 @@\n -         _6 = _2;                         // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n -         _4 = g::<T>(move _5, move _6) -> bb2; // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n -                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:11:9: 11:10\n+-                                          // + span: $DIR/unreachable.rs:12:9: 12:10\n -                                          // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n -     }\n - \n@@ -60,7 +60,7 @@\n +         _9 = _1;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n +         _7 = g::<T>(move _1, move _9) -> bb2; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable.rs:13:9: 13:10\n+                                           // + span: $DIR/unreachable.rs:14:9: 14:10\n                                            // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c73d11ae3bafc36bffe8aff7d7924c92b947001a", "filename": "tests/mir-opt/dest-prop/unreachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that unreachable code is removed after the destination propagation.\n // Regression test for issue #105428.\n //"}, {"sha": "fe34a865b93f0bb41f82e19d204d37d290db1396", "filename": "tests/mir-opt/div_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdiv_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdiv_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Copt-level=0 -Coverflow-checks=yes\n \n // Tests that division with a const does not emit a panicking branch for overflow"}, {"sha": "c0fc1fb1df37465c2a7e34917ba7ba82cd8bba21", "filename": "tests/mir-opt/dont_yeet_assert.generic.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -7,7 +7,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n-          _1 = assert_mem_uninitialized_valid::<&T>() -> bb1; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+          _1 = assert_mem_uninitialized_valid::<&T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n                                            // mir::Constant\n                                            // + span: $DIR/dont_yeet_assert.rs:10:5: 10:59\n                                            // + user_ty: UserType(0)"}, {"sha": "8a4a16825195c83a4ac97a72005aa5a5b29ab34b", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -40,7 +40,7 @@\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n           _4 = Formatter::<'_>::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:15:26: 15:35\n+                                           // + span: $DIR/funky_arms.rs:16:26: 16:35\n                                            // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n       }\n   \n@@ -74,7 +74,7 @@\n           _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n           _7 = Formatter::<'_>::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:24:34: 24:43\n+                                           // + span: $DIR/funky_arms.rs:25:34: 25:43\n                                            // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n       }\n   \n@@ -95,7 +95,7 @@\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n           _0 = float_to_exponential_common_exact::<T>(_1, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:26:9: 26:42\n+                                           // + span: $DIR/funky_arms.rs:27:9: 27:42\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n@@ -110,7 +110,7 @@\n           _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n           _0 = float_to_exponential_common_shortest::<T>(_1, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:28:9: 28:45\n+                                           // + span: $DIR/funky_arms.rs:29:9: 29:45\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c4f75b5df6d8a07f6f1e3de6dc1ee7613e0fd97d", "filename": "tests/mir-opt/funky_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Ffunky_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Ffunky_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: --crate-type lib -Cdebug-assertions=no\n \n #![feature(flt2dec)]"}, {"sha": "32b472ebeeb58e43df541a2aa453343e09bff42b", "filename": "tests/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -110,7 +110,7 @@ yields ()\n \n     bb13 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb14 (cleanup): {\n@@ -119,6 +119,6 @@ yields ()\n \n     bb15 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "dc9bb533f132bc9a1a6292ed4410b36e718cd60f", "filename": "tests/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -63,7 +63,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24\n         StorageDead(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:17: +3:18\n         StorageDead(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:18: +3:19\n         StorageLive(_8);                 // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n+        _8 = callee() -> [return: bb4, unwind unreachable]; // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator_tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }"}, {"sha": "ba1bfec05d21831bbfe7ce1077c011d9f5203947", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -35,7 +35,7 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_2) -> bb4;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n++         drop(_2) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n +     }\n + \n +     bb4 (cleanup): {"}, {"sha": "8da597577431be007ec8e0e9aba11feca384a20e", "filename": "tests/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -33,7 +33,7 @@\n       }\n   \n       bb3 (cleanup): {\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n+          drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n       }\n   \n       bb4 (cleanup): {"}, {"sha": "1e6e30f9e9bef7d9ebe0215891d6e2644a8c405b", "filename": "tests/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -42,7 +42,7 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> [return: bb3, unwind terminate]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {"}, {"sha": "315634945e43246a8fa95489280414d69a91d830", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -42,7 +42,7 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> [return: bb3, unwind terminate]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {"}, {"sha": "75d9bd54d5ba927db5c3a219c7f9a718bd06f709", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,11 +9,11 @@\n       let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn_trait.rs:+2:23: +2:24\n       scope 1 {\n           debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:+1:9: +1:10\n-+         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:34:5: 34:25\n-+             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:26:36: 26:37\n-+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n-+                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:20:27: 20:28\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:35:5: 35:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:27:36: 27:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:21:27: 21:28\n +             }\n +         }\n       }\n@@ -24,7 +24,7 @@\n           _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n           _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:13: +1:24\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn_trait.rs:33:13: 33:21\n+                                           // + span: $DIR/dyn_trait.rs:34:13: 34:21\n                                            // + user_ty: UserType(0)\n                                            // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n@@ -34,18 +34,18 @@\n           StorageLive(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n           _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n -         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:22:5: 22:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn_trait.rs:34:5: 34:22\n+-                                          // + span: $DIR/dyn_trait.rs:35:5: 35:22\n -                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-+         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:15: 27:16\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:15: 28:16\n           StorageDead(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:24: +2:25\n           StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/dyn_trait.rs:+3:2: +3:2"}, {"sha": "925c95988b795e0b67540407a61fa24ae1da47b3", "filename": "tests/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n           _2 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n           _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn_trait.rs:21:7: 21:20\n+                                           // + span: $DIR/dyn_trait.rs:22:7: 22:20\n                                            // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2af81f825705390ffefea20ca33218b9b337f51f", "filename": "tests/mir-opt/inline/dyn_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![crate_type = \"lib\"]\n \n use std::fmt::Debug;"}, {"sha": "f4e5272abfc8a16a16707ef2b631dae33efe958e", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -6,8 +6,8 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:43: +0:43\n       let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n       let mut _3: &C;                      // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n-+     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n-+         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:20:27: 20:28\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:21:27: 21:28\n +     }\n   \n       bb0: {\n@@ -17,11 +17,11 @@\n           _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n           StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n -         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:22:5: 22:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn_trait.rs:27:5: 27:13\n+-                                          // + span: $DIR/dyn_trait.rs:28:5: 28:13\n -                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "30af8661dec73bfc513521a676327de417ef1b03", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,14 +4,14 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/exponential_runtime.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n-+     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:86:5: 86:22\n-+         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n-+         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:73:9: 73:25\n-+             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n-+             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n-+             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:87:5: 87:22\n++         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n++         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:74:9: 74:25\n++             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n +         }\n +     }\n   \n@@ -21,14 +21,14 @@\n +         StorageLive(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n +         StorageLive(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n +         StorageLive(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n-+         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n++         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n                                            // mir::Constant\n--                                          // + span: $DIR/exponential_runtime.rs:86:5: 86:20\n+-                                          // + span: $DIR/exponential_runtime.rs:87:5: 87:20\n -                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/exponential_runtime.rs:61:9: 61:23\n++                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   \n@@ -42,33 +42,33 @@\n +     }\n + \n +     bb2: {\n-+         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         _3 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _3 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n++                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n +                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb3: {\n-+         _4 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         _4 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n++                                          // + span: $DIR/exponential_runtime.rs:76:9: 76:23\n +                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb4: {\n-+         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n++                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb5: {\n-+         _7 = <() as E>::call() -> bb2;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++         _7 = <() as E>::call() -> bb2;   // scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + span: $DIR/exponential_runtime.rs:64:9: 64:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   }"}, {"sha": "39985528f462ab439fa552670e81b574a9d1c905", "filename": "tests/mir-opt/inline/exponential_runtime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Checks that code with exponential runtime does not have exponential behavior in inlining.\n \n trait A {"}, {"sha": "f6ba69a1d294072736b4e0bd24fe7d87749e4a09", "filename": "tests/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,20 +4,20 @@\n   fn one() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:14:5: 14:24\n-+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:43:9: 43:23\n-+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:28:9: 28:31\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:15:5: 15:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:44:9: 44:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:29:9: 29:31\n +             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:36:9: 36:28\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:37:9: 37:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle.rs:14:5: 14:22\n-+                                          // + span: $DIR/inline_cycle.rs:36:9: 36:26\n+-                                          // + span: $DIR/inline_cycle.rs:15:5: 15:22\n++                                          // + span: $DIR/inline_cycle.rs:37:9: 37:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2f81696cf03e9b480521bd47ddcaaf9587bd35ab", "filename": "tests/mir-opt/inline/inline_cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "c8f58111da7da1eca3db30dd73e82cdffbd69df9", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n-+     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:54:5: 54:8\n-+     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n-+         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n++     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:55:5: 55:8\n++     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:50:5: 50:12\n++         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:54:22: 54:23\n++         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n +         }\n +     }\n   \n@@ -19,19 +19,19 @@\n +         StorageLive(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle.rs:49:5: 49:9\n+-                                          // + span: $DIR/inline_cycle.rs:50:5: 50:9\n -                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n-                                           // + span: $DIR/inline_cycle.rs:49:10: 49:11\n+                                           // + span: $DIR/inline_cycle.rs:50:10: 50:11\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13"}, {"sha": "9429ca593646eb05d57fd1d35fc3043fdc5fb9fb", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,19 +4,19 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:10:5: 10:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:39:9: 39:31\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:32:9: 32:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n+-                                          // + span: $DIR/inline_cycle_generic.rs:10:5: 10:22\n -                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n++                                          // + span: $DIR/inline_cycle_generic.rs:32:9: 32:26\n +                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "84e6e4005a6e7579f7dcaa11fc7f195c0083fec5", "filename": "tests/mir-opt/inline/inline_cycle_generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "d501b6ca8d2c653c9c61592ec03563bb6ca8ae74", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -58,11 +58,11 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_3) -> bb4;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_3) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb4 (cleanup): {\n-+         drop(_2) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_2) -> [return: bb5, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb5 (cleanup): {"}, {"sha": "a1d2423ae2709679685df1377c45ed352135fdab", "filename": "tests/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,7 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:57:5: 57:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n@@ -25,7 +25,7 @@\n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n-          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+          _2 = instruction_set_t32() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:58:5: 58:24\n                                            // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n@@ -34,7 +34,7 @@\n       bb2: {\n           StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n           StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:59:5: 59:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n@@ -43,11 +43,11 @@\n -     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n           StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n--         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:60:5: 60:39\n -                                          // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }\n-+         asm!(\"/* do nothing */\", options((empty))) -> bb3; // scope 3 at $DIR/inline_instruction_set.rs:43:14: 43:38\n++         asm!(\"/* do nothing */\", options((empty))) -> [return: bb3, unwind unreachable]; // scope 3 at $DIR/inline_instruction_set.rs:43:14: 43:38\n       }\n   \n -     bb4: {"}, {"sha": "36aec4f47b08dab2551ce76452f369604f00aa88", "filename": "tests/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -14,7 +14,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:49:5: 49:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n@@ -23,7 +23,7 @@\n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n--         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+-         _2 = instruction_set_t32() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:50:5: 50:24\n -                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n@@ -32,7 +32,7 @@\n -     bb2: {\n           StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n           StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:51:5: 51:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n@@ -41,8 +41,8 @@\n -     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n           StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n--         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n-+         _4 = inline_always_and_using_inline_asm() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n++         _4 = inline_always_and_using_inline_asm() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:52:5: 52:39\n                                            // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }"}, {"sha": "a5129e0e8c8e11fbf53c11186d47fd35d6498635", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -75,7 +75,7 @@\n   \n       bb4 (cleanup): {\n -         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n-+         drop(_2) -> bb2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         drop(_2) -> [return: bb2, unwind terminate]; // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n       }\n   }\n   "}, {"sha": "a2938ead0dc141b4fd2d70815edf4b0041c97b49", "filename": "tests/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,17 +4,17 @@ fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/inline_options.rs:+0:11: +0:11\n     let _1: ();                          // in scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n     let _2: ();                          // in scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n-    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:10:5: 10:21\n-        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:16:23: 16:26\n-        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:16:28: 16:31\n-        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:11:5: 11:21\n+        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:17:23: 17:26\n+        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:17:28: 17:31\n+        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:17:33: 17:36\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n         _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:9:5: 9:16\n+                                         // + span: $DIR/inline_options.rs:10:5: 10:16\n                                          // + literal: Const { ty: fn() {not_inlined}, val: Value(<ZST>) }\n     }\n \n@@ -24,9 +24,9 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n         StorageLive(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n         StorageLive(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n-        _3 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n+        _3 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:17:23: 17:26\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:23: 16:24\n+                                         // + span: $DIR/inline_options.rs:17:23: 17:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n@@ -40,16 +40,16 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        _4 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n+        _4 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:17:28: 17:31\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:28: 16:29\n+                                         // + span: $DIR/inline_options.rs:17:28: 17:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        _5 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+        _5 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:17:33: 17:36\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:33: 16:34\n+                                         // + span: $DIR/inline_options.rs:17:33: 17:34\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "f0a898832392b73a5326b26c544c43f3005bf3e6", "filename": "tests/mir-opt/inline/inline_options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Checks that inlining threshold can be controlled with\n // inline-mir-threshold and inline-hint-threshold options.\n //"}, {"sha": "9dde9994d1d1ffae9dc23e221579b3df8168552e", "filename": "tests/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -7,19 +7,19 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/inline_specialization.rs:+1:9: +1:10\n       }\n-+     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:5:13: 5:38\n++     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:6:13: 6:38\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n -         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline_specialization.rs:+1:13: +1:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_specialization.rs:5:13: 5:36\n+-                                          // + span: $DIR/inline_specialization.rs:6:13: 6:36\n -                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:14:31: 14:34\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:15:31: 15:34\n           _0 = const ();                   // scope 0 at $DIR/inline_specialization.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/inline_specialization.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/inline_specialization.rs:+2:2: +2:2"}, {"sha": "c24795e05c6dc41048f28d98ffd45c2fdcf64113", "filename": "tests/mir-opt/inline/inline_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![feature(specialization)]\n \n // EMIT_MIR inline_specialization.main.Inline.diff"}, {"sha": "6aa957eb5349f7c3a0b877b0a030afceb369658c", "filename": "tests/mir-opt/inline/inline_trait_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Z span_free_formats\n \n fn main() {"}, {"sha": "a9020a5bbb7c4ab68235313cd9a18199e420bd9e", "filename": "tests/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -10,7 +10,7 @@ fn test(_1: &dyn X) -> u32 {\n         _2 = &(*_1);                     // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n         _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_trait_method.rs:9:7: 9:8\n+                                         // + span: $DIR/inline_trait_method.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n "}, {"sha": "07a60190801888931afbc7c09ff9274c61ff6bca", "filename": "tests/mir-opt/inline/inline_trait_method_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Z span_free_formats -Z mir-opt-level=4\n \n // EMIT_MIR inline_trait_method_2.test2.Inline.after.mir"}, {"sha": "a4bbecf3b876e14980e6552ecb3b1a861b6fe818", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -5,8 +5,8 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline_trait_method_2.rs:+0:24: +0:28\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:9:9: 9:10\n+    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:6:5: 6:12\n+        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:10:9: 10:10\n     }\n \n     bb0: {\n@@ -15,9 +15,9 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:11:5: 11:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_trait_method_2.rs:10:7: 10:8\n+                                         // + span: $DIR/inline_trait_method_2.rs:11:7: 11:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n "}, {"sha": "18df6f9af5faebfaea73770c293887c32983b423", "filename": "tests/mir-opt/inline/issue_106141.outer.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -3,51 +3,51 @@\n   \n   fn outer() -> usize {\n       let mut _0: usize;                   // return place in scope 0 at $DIR/issue_106141.rs:+0:19: +0:24\n-+     scope 1 (inlined inner) {            // at $DIR/issue_106141.rs:2:5: 2:12\n-+         let mut _1: bool;                // in scope 1 at $DIR/issue_106141.rs:13:8: 13:21\n-+         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:13:8: 13:21\n-+         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:11:18: 11:25\n++     scope 1 (inlined inner) {            // at $DIR/issue_106141.rs:3:5: 3:12\n++         let mut _1: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n++         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n++         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n +         scope 2 {\n-+             debug buffer => _3;          // in scope 2 at $DIR/issue_106141.rs:11:9: 11:15\n++             debug buffer => _3;          // in scope 2 at $DIR/issue_106141.rs:12:9: 12:15\n +             scope 3 {\n-+                 debug index => _0;       // in scope 3 at $DIR/issue_106141.rs:12:9: 12:14\n++                 debug index => _0;       // in scope 3 at $DIR/issue_106141.rs:13:9: 13:14\n +             }\n +         }\n +     }\n   \n       bb0: {\n -         _0 = inner() -> bb1;             // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n +         StorageLive(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n-+         _3 = const _;                    // scope 1 at $DIR/issue_106141.rs:11:18: 11:25\n++         _3 = const _;                    // scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n                                            // mir::Constant\n--                                          // + span: $DIR/issue_106141.rs:2:5: 2:10\n+-                                          // + span: $DIR/issue_106141.rs:3:5: 3:10\n -                                          // + literal: Const { ty: fn() -> usize {inner}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/issue_106141.rs:11:18: 11:25\n++                                          // + span: $DIR/issue_106141.rs:12:18: 12:25\n +                                          // + literal: Const { ty: &[bool; 1], val: Unevaluated(inner, [], Some(promoted[0])) }\n-+         _0 = index() -> bb1;             // scope 2 at $DIR/issue_106141.rs:12:17: 12:24\n++         _0 = index() -> bb1;             // scope 2 at $DIR/issue_106141.rs:13:17: 13:24\n +                                          // mir::Constant\n-+                                          // + span: $DIR/issue_106141.rs:12:17: 12:22\n++                                          // + span: $DIR/issue_106141.rs:13:17: 13:22\n +                                          // + literal: Const { ty: fn() -> usize {index}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageLive(_1);                 // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         _2 = Lt(_0, const 1_usize);      // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         assert(move _2, \"index out of bounds: the length is {} but the index is {}\", const 1_usize, _0) -> bb2; // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n++         StorageLive(_1);                 // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         _2 = Lt(_0, const 1_usize);      // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         assert(move _2, \"index out of bounds: the length is {} but the index is {}\", const 1_usize, _0) -> bb2; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb2: {\n-+         _1 = (*_3)[_0];                  // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         switchInt(move _1) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n++         _1 = (*_3)[_0];                  // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         switchInt(move _1) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb3: {\n-+         _0 = const 0_usize;              // scope 3 at $DIR/issue_106141.rs:16:9: 16:10\n-+         goto -> bb4;                     // scope 3 at $DIR/issue_106141.rs:13:5: 17:6\n++         _0 = const 0_usize;              // scope 3 at $DIR/issue_106141.rs:17:9: 17:10\n++         goto -> bb4;                     // scope 3 at $DIR/issue_106141.rs:14:5: 18:6\n +     }\n + \n +     bb4: {\n-+         StorageDead(_1);                 // scope 3 at $DIR/issue_106141.rs:17:5: 17:6\n++         StorageDead(_1);                 // scope 3 at $DIR/issue_106141.rs:18:5: 18:6\n +         StorageDead(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n           return;                          // scope 0 at $DIR/issue_106141.rs:+2:2: +2:2\n       }"}, {"sha": "b6bd806e6fce57e09ea14ff6c324189745275253", "filename": "tests/mir-opt/inline/issue_106141.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_106141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_106141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n pub fn outer() -> usize {\n     inner()\n }"}, {"sha": "dc3fe75559e99b22a07999761cd4950e22208086", "filename": "tests/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -46,11 +46,11 @@\n -     bb3: {\n -         return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2\n +     bb3 (cleanup): {\n-+         drop(_1) -> bb4;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n++         drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb4 (cleanup): {\n--         drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n+-         drop(_1) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n +         resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2\n       }\n   "}, {"sha": "8f56ef2585ce92385e771bd78ba77e350be5142d", "filename": "tests/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -47,7 +47,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n+          drop(_1) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "17724530d657566259e3637e6670fef86596ead7", "filename": "tests/mir-opt/inline/unchecked_shifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![crate_type = \"lib\"]\n #![feature(unchecked_math)]\n "}, {"sha": "bf05ed4171810499c134a46a23e7b54cf006cf33", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -7,7 +7,7 @@\n       let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n       let mut _3: u16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n       let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n-+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n++     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -60,7 +60,7 @@\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         _7 = <u32 as TryInto<u16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:10:7: 10:20\n+-                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n -                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n@@ -106,7 +106,7 @@\n +         _5 = move ((_6 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n +         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "7f6e974f66b1d8adff0cadfc8b06b6e072e36a48", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,7 +4,7 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n     debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n     let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n-    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n+    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -94,7 +94,7 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n         _3 = move ((_4 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "5c4fb5ba8ba24ecc676c754fc1a0bd90356cc7da", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -7,7 +7,7 @@\n       let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n       let mut _3: i16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n       let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n-+     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n++     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n@@ -60,7 +60,7 @@\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         _7 = <u32 as TryInto<i16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:16:7: 16:20\n+-                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n -                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n@@ -106,7 +106,7 @@\n +         _5 = move ((_6 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n +         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}, {"sha": "698a3c6565500c2885f1a19555929e167d4c58aa", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -4,7 +4,7 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n     debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n     let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n-    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n+    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n@@ -94,7 +94,7 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n         _3 = move ((_4 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}, {"sha": "49006e012dde6acb22911655e4fd33988b04a54b", "filename": "tests/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -14,7 +14,7 @@\n   \n       bb1: {\n +         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:12:5 - 13:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n-          falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n+          falseUnwind -> [real: bb2, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb2: {"}, {"sha": "09fc145e734d049832b62e8ccbf74932ef567ab7", "filename": "tests/mir-opt/intrinsic_asserts.generic.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n-          _1 = assert_inhabited::<T>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+          _1 = assert_inhabited::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:25:5: 25:44\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<T>}, val: Value(<ZST>) }\n@@ -18,7 +18,7 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:46: +1:47\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n-          _2 = assert_zero_valid::<T>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+          _2 = assert_zero_valid::<T>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:26:5: 26:45\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<T>}, val: Value(<ZST>) }\n@@ -27,7 +27,7 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:47: +2:48\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n-          _3 = assert_mem_uninitialized_valid::<T>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+          _3 = assert_mem_uninitialized_valid::<T>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:27:5: 27:58\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<T>}, val: Value(<ZST>) }"}, {"sha": "c52174ef5ea28ebd054a0fd0bc1a2dd447bfce5a", "filename": "tests/mir-opt/intrinsic_asserts.panics.InstCombine.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,8 +9,8 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n--         _1 = assert_inhabited::<Never>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n-+         _1 = assert_inhabited::<Never>(); // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+-         _1 = assert_inhabited::<Never>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n++         _1 = assert_inhabited::<Never>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:17:5: 17:48\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<Never>}, val: Value(<ZST>) }\n@@ -19,8 +19,8 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n--         _2 = assert_zero_valid::<&u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n-+         _2 = assert_zero_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+-         _2 = assert_zero_valid::<&u8>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n++         _2 = assert_zero_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:18:5: 18:47\n                                            // + user_ty: UserType(0)\n@@ -30,8 +30,8 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n--         _3 = assert_mem_uninitialized_valid::<&u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n-+         _3 = assert_mem_uninitialized_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+-         _3 = assert_mem_uninitialized_valid::<&u8>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n++         _3 = assert_mem_uninitialized_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:19:5: 19:60\n                                            // + user_ty: UserType(1)"}, {"sha": "d059d47ee58619e29466fad1bdee977996dee425", "filename": "tests/mir-opt/intrinsic_asserts.removable.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n--         _1 = assert_inhabited::<()>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+-         _1 = assert_inhabited::<()>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:7:5: 7:45\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<()>}, val: Value(<ZST>) }\n@@ -19,7 +19,7 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:47: +1:48\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n--         _2 = assert_zero_valid::<u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+-         _2 = assert_zero_valid::<u8>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:8:5: 8:46\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<u8>}, val: Value(<ZST>) }\n@@ -29,7 +29,7 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:48: +2:49\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n--         _3 = assert_mem_uninitialized_valid::<u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+-         _3 = assert_mem_uninitialized_valid::<u8>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:9:5: 9:59\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<u8>}, val: Value(<ZST>) }"}, {"sha": "d048b9e65130f8aec28400f17af7e93179656e3d", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,15 +16,15 @@\n       let mut _11: bool;                   // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       let mut _12: u32;                    // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       let mut _13: bool;                   // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n-      scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:14:5: 14:17\n-          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n-          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:27\n-          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n+      scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:15:5: 15:17\n+          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:6:13: 6:14\n+          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:27\n+          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:20\n           scope 2 {\n-              debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:6:9: 6:16\n+              debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:7:9: 7:16\n           }\n       }\n-      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:18: 14:58\n+      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:15:18: 15:58\n           debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n       }\n@@ -33,13 +33,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n           StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n-          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n-          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _15 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _14 = BitAnd(move _15, const 255_u32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n-          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n-          _4 = BitOr(const 0_u32, move _14); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n-          StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n+          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _15 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _14 = BitAnd(move _15, const 255_u32); // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n+          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n+          _4 = BitOr(const 0_u32, move _14); // scope 2 at $DIR/issue_101973.rs:8:5: 8:27\n+          StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n           StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n@@ -66,7 +66,7 @@\n       bb2: {\n           _6 = Shl(move _7, const 1_i32);  // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageDead(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:56: +1:57\n-          _3 = rotate_right::<u32>(_4, _6) -> bb3; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _3 = rotate_right::<u32>(_4, _6) -> [return: bb3, unwind unreachable]; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn(u32, u32) -> u32 {rotate_right::<u32>}, val: Value(<ZST>) }"}, {"sha": "da388f14918f75781602b7358898caf4e1ece022", "filename": "tests/mir-opt/issue_101973.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_101973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_101973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -O -C debug-assertions=on\n // This needs inlining followed by ConstProp to reproduce, so we cannot use \"unit-test\".\n "}, {"sha": "ccaa508c13b504c0e80b207553b9d828291a25e3", "filename": "tests/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -19,7 +19,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb5]; // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n+        falseUnwind -> [real: bb2, unwind: bb5]; // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n     }\n \n     bb2: {"}, {"sha": "ac2520249285ed7e0387d76976bee39f71b48ef7", "filename": "tests/mir-opt/issue_41110.main.ElaborateDrops.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -46,17 +46,17 @@\n       }\n   \n       bb3 (cleanup): {\n--         drop(_3) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+-         drop(_3) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n       }\n   \n       bb4 (cleanup): {\n--         drop(_4) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n+-         drop(_4) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n +         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n       }\n   \n       bb5 (cleanup): {\n--         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+-         drop(_2) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +         goto -> bb8;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n       }\n   \n@@ -65,7 +65,7 @@\n +     }\n + \n +     bb7 (cleanup): {\n-+         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++         drop(_2) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +     }\n + \n +     bb8 (cleanup): {"}, {"sha": "a4a07ad124340882e0ec6c9831e6894d02758259", "filename": "tests/mir-opt/issue_41110.test.ElaborateDrops.diff", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -50,7 +50,7 @@\n   \n       bb3 (cleanup): {\n           _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-          drop(_5) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+          drop(_5) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n       }\n   \n       bb4: {\n@@ -72,30 +72,34 @@\n       }\n   \n       bb7 (cleanup): {\n--         drop(_4) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n+-         drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n +         goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n       }\n   \n       bb8 (cleanup): {\n--         drop(_2) -> bb9;                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+-         drop(_2) -> [return: bb9, unwind terminate]; // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n +         goto -> bb9;                     // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   \n       bb9 (cleanup): {\n--         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-+         goto -> bb12;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+-         drop(_1) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         goto -> bb13;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   \n       bb10 (cleanup): {\n           resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n +     }\n + \n +     bb11 (cleanup): {\n-+         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         unreachable;                     // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n +     }\n + \n +     bb12 (cleanup): {\n-+         switchInt(_6) -> [0: bb10, otherwise: bb11]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         drop(_1) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++     }\n++ \n++     bb13 (cleanup): {\n++         switchInt(_6) -> [0: bb10, otherwise: bb12]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   }\n   "}, {"sha": "d98f75e7502d42f5e45b0d08ea778cbe6ed07d01", "filename": "tests/mir-opt/issue_41888.main.ElaborateDrops.diff", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -58,7 +58,7 @@\n   \n       bb4 (cleanup): {\n           _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-          drop(_3) -> bb11;                // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+          drop(_3) -> [return: bb11, unwind terminate]; // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n       }\n   \n       bb5: {\n@@ -89,7 +89,7 @@\n       bb9: {\n           StorageDead(_2);                 // scope 1 at $DIR/issue_41888.rs:+8:5: +8:6\n -         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         goto -> bb18;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         goto -> bb19;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   \n       bb10: {\n@@ -101,47 +101,51 @@\n       }\n   \n       bb11 (cleanup): {\n--         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+-         drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   \n       bb12 (cleanup): {\n           resume;                          // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n +     }\n + \n-+     bb13: {\n++     bb13 (cleanup): {\n++         unreachable;                     // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n++     }\n++ \n++     bb14: {\n +         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +         goto -> bb10;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb14 (cleanup): {\n++     bb15 (cleanup): {\n +         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb15: {\n-+         drop(_1) -> [return: bb13, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb16: {\n++         drop(_1) -> [return: bb14, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb16 (cleanup): {\n-+         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb17 (cleanup): {\n++         drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb17: {\n++     bb18: {\n +         _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         switchInt(move _10) -> [0: bb13, otherwise: bb15]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _10) -> [0: bb14, otherwise: bb16]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb18: {\n-+         switchInt(_7) -> [0: bb13, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb19: {\n++         switchInt(_7) -> [0: bb14, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb19 (cleanup): {\n++     bb20 (cleanup): {\n +         _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         switchInt(move _11) -> [0: bb14, otherwise: bb16]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _11) -> [0: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb20 (cleanup): {\n-+         switchInt(_7) -> [0: bb12, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb21 (cleanup): {\n++         switchInt(_7) -> [0: bb12, otherwise: bb20]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   }\n   "}, {"sha": "8ed9101500e4d1db6bfba9b59e1737dfd793104f", "filename": "tests/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -109,11 +109,11 @@ fn test() -> Option<Box<u32>> {\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n+        drop(_1) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n     }\n \n     bb12 (cleanup): {\n-        drop(_5) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n+        drop(_5) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n     }\n \n     bb13 (cleanup): {"}, {"sha": "76bb11aae3d7468a4a72a410df3aa7ffe135d523", "filename": "tests/mir-opt/issue_76432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_76432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_76432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Zmir-enable-passes=-NormalizeArrayLen\n // Check that we do not insert StorageDead at each target if StorageDead was never seen\n "}, {"sha": "88a383015b0914f08b20fc792c005885951ebc72", "filename": "tests/mir-opt/issue_91633.bar.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -31,7 +31,7 @@ fn bar(_1: Box<[T]>) -> () {\n     }\n \n     bb3 (cleanup): {\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n+        drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n     }\n \n     bb4 (cleanup): {"}, {"sha": "569135803ea30babfcfe85f7c3cc83b8c716c18f", "filename": "tests/mir-opt/issue_91633.foo.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -48,7 +48,7 @@ fn foo(_1: Box<[T]>) -> T {\n     }\n \n     bb5 (cleanup): {\n-        drop(_1) -> bb6;                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n+        drop(_1) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n     }\n \n     bb6 (cleanup): {"}, {"sha": "42b605326908eaaf7ff42b27bb1ff85f16977c67", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -5,7 +5,7 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n     let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n     let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n-    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:12: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:15:12: 15:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _3;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -15,7 +15,7 @@ fn num_to_digit(_1: char) -> u32 {\n             let mut _6: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:42: 14:50\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:15:42: 15:50\n         debug self => _2;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _7: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _8: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -38,7 +38,7 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n         _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n                                          // mir::Constant\n-                                         // + span: $DIR/issue_59352.rs:14:30: 14:38\n+                                         // + span: $DIR/issue_59352.rs:15:30: 15:38\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n "}, {"sha": "92011bd65887c377e939e4f4b0f9867fe62c7233", "filename": "tests/mir-opt/issues/issue_59352.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This test is a mirror of codegen/issue-59352.rs.\n // The LLVM inliner doesn't inline `char::method::is_digit()` and so it doesn't recognize this case\n // as effectively `if x.is_some() { x.unwrap() } else { 0 }`."}, {"sha": "43d00b29e74ee922a3fcc0b052ff435b14e4e686", "filename": "tests/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -35,7 +35,7 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        falseUnwind -> [real: bb4, cleanup: bb5]; // scope 0 at $DIR/loop_test.rs:+7:5: +10:6\n+        falseUnwind -> [real: bb4, unwind: bb5]; // scope 0 at $DIR/loop_test.rs:+7:5: +10:6\n     }\n \n     bb4: {"}, {"sha": "e1bb51f2d1d9c7d156e89b23f5e6c405e87aadbd", "filename": "tests/mir-opt/lower_array_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: NormalizeArrayLen\n // compile-flags: -Zmir-enable-passes=+LowerSliceLenCalls\n "}, {"sha": "dd742d87a2955dab039f6e2deb2be79871903c8d", "filename": "tests/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:30\n   \n       bb0: {\n--         _0 = std::intrinsics::min_align_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n+-         _0 = std::intrinsics::min_align_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:21:5: 21:40\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }"}, {"sha": "935eccfc6f4f1b2bec78f4290af91df674db6276", "filename": "tests/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n--         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-         _1 = std::intrinsics::assume(const true) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:105:9: 105:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }"}, {"sha": "1f03b7b0baf4b23b2627f30c9b5f5bfdfede2ae4", "filename": "tests/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -29,7 +29,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n           _4 = &_1;                        // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n--         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n+-         _2 = discriminant_value::<T>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:82:5: 82:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n@@ -50,7 +50,7 @@\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n--         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n+-         _5 = discriminant_value::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:83:5: 83:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n@@ -71,7 +71,7 @@\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n--         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n+-         _9 = discriminant_value::<()>(move _10) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:84:5: 84:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n@@ -92,7 +92,7 @@\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n--         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n+-         _13 = discriminant_value::<E>(move _14) -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:85:5: 85:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }"}, {"sha": "b0c32e4b21a753eac810c9bd43589a238d400821", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -47,7 +47,7 @@\n           _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n           _8 = move _9 as *mut i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n--         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+-         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:98:9: 98:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }"}, {"sha": "bfb000ccdb5c684794f5460f53cd34ced63c8043", "filename": "tests/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n           _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n--         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n+-         _0 = std::intrinsics::forget::<T>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }"}, {"sha": "64d82907c7e361e4f3218ed5e14861af68f4976b", "filename": "tests/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -17,7 +17,7 @@\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n--         _0 = move _2() -> bb1;           // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n+-         _0 = move _2() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n +         _0 = SizeOf(T);                  // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n       }"}, {"sha": "93863fca344a6599a84c253c6893b609e3eca900", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:13: +2:15\n           StorageLive(_4);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n--         _3 = option_payload_ptr::<usize>(move _4) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n+-         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n@@ -35,7 +35,7 @@\n           StorageLive(_5);                 // scope 2 at $DIR/lower_intrinsics.rs:+3:13: +3:15\n           StorageLive(_6);                 // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n--         _5 = option_payload_ptr::<String>(move _6) -> bb2; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n+-         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }"}, {"sha": "f816678b4b3aebd43e1f72feafa1716884951363", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n--         _0 = read_via_copy::<i32>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n+-         _0 = read_via_copy::<i32>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:118:14: 118:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32) -> i32 {read_via_copy::<i32>}, val: Value(<ZST>) }"}, {"sha": "f34164189220f690ea3c8193cd6742401be0adfa", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n--         _0 = read_via_copy::<Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n+-         _0 = read_via_copy::<Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:123:14: 123:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Never) -> Never {read_via_copy::<Never>}, val: Value(<ZST>) }"}, {"sha": "27e8accea8be50e2ab03f5cd630b25bbd615570d", "filename": "tests/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:24: +0:29\n   \n       bb0: {\n--         _0 = std::intrinsics::size_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n+-         _0 = std::intrinsics::size_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:16:5: 16:35\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }"}, {"sha": "1b3b7685185bc9a2bd24d1c886dddfd4d3081c6d", "filename": "tests/mir-opt/lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n--         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:43:14: 43:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(std::cmp::Ordering) -> i8 {transmute::<std::cmp::Ordering, i8>}, val: Value(<ZST>) }"}, {"sha": "c6a7d2287e75d6b3ef2b912f34b2614a393d5343", "filename": "tests/mir-opt/lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n--         _0 = transmute::<&T, *const T>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-         _0 = transmute::<&T, *const T>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:53:14: 53:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&T) -> *const T {transmute::<&T, *const T>}, val: Value(<ZST>) }"}, {"sha": "8735a7500603dfc10f4630703b64b0d3a610f398", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }"}, {"sha": "a772132770c36981e181a0d06078e139d028196b", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &mut Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-         _2 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }"}, {"sha": "c4d53d4e8c74858ef2e54be33eee410c99f86211", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+-         _2 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }"}, {"sha": "f0b76127dd5e6da9336fe291b7b6245e584f3f02", "filename": "tests/mir-opt/lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n--         _0 = transmute::<(), Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n+-         _0 = transmute::<(), Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:48:14: 48:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Never {transmute::<(), Never>}, val: Value(<ZST>) }"}, {"sha": "c0cc698c48188491cfd773d38fb67f6a8145b551", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n--         _3 = std::intrinsics::unreachable(); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+-         _3 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }"}, {"sha": "fb12d3dfa6e9899428ca7de8c3d8f699b7dc09a6", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -30,7 +30,7 @@\n           _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n           StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n--         _3 = add_with_overflow::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n+-         _3 = add_with_overflow::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:111:14: 111:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n@@ -46,7 +46,7 @@\n           _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n           StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n--         _6 = sub_with_overflow::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n+-         _6 = sub_with_overflow::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:112:14: 112:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n@@ -62,7 +62,7 @@\n           _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:50: +3:51\n           StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n--         _9 = mul_with_overflow::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n+-         _9 = mul_with_overflow::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:113:14: 113:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }"}, {"sha": "0bfb34acac2db6f80b841d4e73384eb57e56730f", "filename": "tests/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -30,7 +30,7 @@\n           _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:45: +1:46\n           StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:48: +1:49\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:48: +1:49\n--         _3 = wrapping_add::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n+-         _3 = wrapping_add::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_add::<i32>}, val: Value(<ZST>) }\n@@ -46,7 +46,7 @@\n           _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:45: +2:46\n           StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:48: +2:49\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:48: +2:49\n--         _6 = wrapping_sub::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n+-         _6 = wrapping_sub::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:10:14: 10:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_sub::<i32>}, val: Value(<ZST>) }\n@@ -62,7 +62,7 @@\n           _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:45: +3:46\n           StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:48: +3:49\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:48: +3:49\n--         _9 = wrapping_mul::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n+-         _9 = wrapping_mul::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:11:14: 11:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_mul::<i32>}, val: Value(<ZST>) }"}, {"sha": "4f5df133181291f579faf795547bb67ad25839a2", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -12,7 +12,7 @@ fn f_u64() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n-        _2 = f_non_zst::<u64>(const 0_u64) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        _2 = f_non_zst::<u64>(const 0_u64) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }"}, {"sha": "8654e80cd7c82aed9fea330e2c67ce2599f9683d", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -10,7 +10,7 @@ fn f_unit() -> () {\n     }\n \n     bb0: {\n-        _1 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        _1 = f_zst::<()>(const ()) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }"}, {"sha": "67918e62b9c22b28e840a5a572affd4ea0650eaa", "filename": "tests/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@\n           _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n -         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n+-                                          // + span: $DIR/lower_slice_len.rs:6:22: 6:25\n -                                          // + literal: Const { ty: for<'a> fn(&'a [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }\n +         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n +         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27"}, {"sha": "9c39c29fc4e4d61ea164fac582c87e868981808d", "filename": "tests/mir-opt/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_slice_len.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: LowerSliceLenCalls\n \n // EMIT_MIR lower_slice_len.bound.LowerSliceLenCalls.diff"}, {"sha": "3081e78f26db78c3d48c90eb20a3fd55be7184ce", "filename": "tests/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -243,7 +243,7 @@\n       }\n   \n -     bb25 (cleanup): {\n--         drop(_2) -> bb26;                // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n+-         drop(_2) -> [return: bb26, unwind terminate]; // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     bb22 (cleanup): {\n +         goto -> bb27;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }"}, {"sha": "950f8758e31c453276e51ff6cfefbdc28378b51a", "filename": "tests/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -40,7 +40,7 @@ fn main() -> () {\n     }\n \n     bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n+        drop(_2) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n     }\n \n     bb4 (cleanup): {"}, {"sha": "525dfe4262a467211eeadb4403d52224b5775ab6", "filename": "tests/mir-opt/nrvo_simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fnrvo_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fnrvo_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnrvo_simple.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: RenameReturnPlace\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff"}, {"sha": "81b96e3b6315d68c8924fadb0f40ff5d3b256614", "filename": "tests/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -33,7 +33,7 @@ fn main() -> () {\n \n     bb1 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n-        drop(_1) -> bb3;                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n+        drop(_1) -> [return: bb3, unwind terminate]; // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n     }\n \n     bb2: {"}, {"sha": "0e8309532c2faa5d51b0fcbb2ac543e27e8b9bb3", "filename": "tests/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -34,7 +34,7 @@\n           _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + span: $DIR/remove_storage_markers.rs:11:14: 11:19\n                                            // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -54,7 +54,7 @@\n           _8 = &mut (*_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb3; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + span: $DIR/remove_storage_markers.rs:11:14: 11:19\n                                            // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "480db8ac155b5d4c06a44e86c38716fb22c4ebe4", "filename": "tests/mir-opt/remove_storage_markers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_storage_markers.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: RemoveStorageMarkers\n \n // Checks that storage markers are removed at opt-level=0."}, {"sha": "4eef028e1ccb99ccc8cb6687b2b9ea5b5bd27dc1", "filename": "tests/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -186,11 +186,11 @@ fn main() -> () {\n     }\n \n     bb7 (cleanup): {\n-        drop(_21) -> bb9;                // scope 7 at $DIR/retag.rs:+18:24: +18:25\n+        drop(_21) -> [return: bb9, unwind terminate]; // scope 7 at $DIR/retag.rs:+18:24: +18:25\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 1 at $DIR/retag.rs:+3:36: +3:37\n+        drop(_5) -> [return: bb9, unwind terminate]; // scope 1 at $DIR/retag.rs:+3:36: +3:37\n     }\n \n     bb9 (cleanup): {"}, {"sha": "c61107d25e004c5b57d1e13d913f89e4b34eb42f", "filename": "tests/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -12,8 +12,8 @@\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n-+         falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n+-         falseUnwind -> [real: bb2, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n++         falseUnwind -> [real: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n       }\n   \n       bb2: {"}, {"sha": "b473d0fdecd097cacabf304dec6934cedabbabcd", "filename": "tests/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -16,7 +16,7 @@\n       bb1: {\n           _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:+2:9: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_if.rs:7:9: 7:13\n+                                           // + span: $DIR/simplify_if.rs:8:9: 8:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "b86f80a8038bfc2dc623e1aa10bba27e090b99f6", "filename": "tests/mir-opt/simplify_if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_if.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn noop() {}\n "}, {"sha": "7c41e8b7c20eebb0916ce31237b3efc7e534f741", "filename": "tests/mir-opt/simplify_locals_fixedpoint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Zmir-opt-level=1\n \n fn foo<T>() {"}, {"sha": "ae2c774f29dc683f5c1bfafdaa730fe14e001745", "filename": "tests/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -56,7 +56,7 @@\n +         StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n +         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:15:5: 15:12\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:16:5: 16:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n@@ -84,7 +84,7 @@\n +         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34\n +         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:17:5: 17:11\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:18:5: 18:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "983d8004e2ed4db9016ad5d9d76a7e93f920aa5f", "filename": "tests/mir-opt/simplify_locals_removes_unused_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: SimplifyLocals-before-const-prop\n // compile-flags: -C overflow-checks=no\n "}, {"sha": "d2b9ac3cc0b966474feecb9d15bebb78c3d10d96", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@\n       bb2: {\n           _0 = noop() -> bb3;              // scope 0 at $DIR/simplify_match.rs:+2:17: +2:23\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_match.rs:7:17: 7:21\n+                                           // + span: $DIR/simplify_match.rs:8:17: 8:21\n                                            // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6a2a6f2171967b2355513e60880654da41481761", "filename": "tests/mir-opt/simplify_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsimplify_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn noop() {}\n "}, {"sha": "11115c96e23e83a9502c779b3461a5813f6f1933", "filename": "tests/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -24,7 +24,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     bb3 (cleanup): {\n         _4 = &raw mut (*_1)[_3];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         _3 = Add(move _3, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_4)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop((*_4)) -> [return: bb4, unwind terminate]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb4 (cleanup): {"}, {"sha": "579587a430b25c9f976afb78f4685c4229e02c07", "filename": "tests/mir-opt/sroa/lifetimes.foo.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -58,7 +58,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n           StorageLive(_3);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n           StorageLive(_4);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n-          _4 = Box::<u32>::new(const 5_u32) -> bb1; // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          _4 = Box::<u32>::new(const 5_u32) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:19:15: 19:23\n                                            // + user_ty: UserType(1)\n@@ -113,7 +113,7 @@\n           StorageLive(_22);                // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n           _22 = &_8;                       // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n           _21 = &(*_22);                   // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n-          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> bb3; // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> [return: bb3, unwind unreachable]; // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:27:20: 27:23\n                                            // + user_ty: UserType(4)\n@@ -127,7 +127,7 @@\n           StorageLive(_25);                // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n           _25 = &_6;                       // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n           _24 = &(*_25);                   // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n-          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> bb4; // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> [return: bb4, unwind unreachable]; // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:27:24: 27:27\n                                            // + user_ty: UserType(5)\n@@ -143,7 +143,7 @@\n           _17 = &(*_18);                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _16 = move _17 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _11 = Arguments::<'_>::new_v1(move _12, move _16) -> bb5; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb5, unwind unreachable]; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + user_ty: UserType(3)\n@@ -153,7 +153,7 @@\n       bb5: {\n           StorageDead(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _10 = _eprint(move _11) -> bb6;  // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _10 = _eprint(move _11) -> [return: bb6, unwind unreachable]; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }\n@@ -170,7 +170,7 @@\n           _9 = const ();                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_9);                 // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _0 = const ();                   // scope 4 at $DIR/lifetimes.rs:+9:22: +11:6\n-          drop(_8) -> bb8;                 // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+          drop(_8) -> [return: bb8, unwind unreachable]; // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n       }\n   \n       bb7: {\n@@ -204,11 +204,11 @@\n       }\n   \n       bb12: {\n-          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> bb10; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> [return: bb10, unwind unreachable]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n       }\n   \n       bb13: {\n-          drop(_5) -> bb10;                // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          drop(_5) -> [return: bb10, unwind unreachable]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n       }\n   }\n   "}, {"sha": "d378c260a0040d413f6f6565f8325b41820ac43d", "filename": "tests/mir-opt/sroa/structs.dropping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -23,11 +23,11 @@\n           StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n           StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n           _1 = move (_2.1: Tag);           // scope 0 at $DIR/structs.rs:+1:5: +1:32\n-          drop(_1) -> bb1;                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   \n       bb1: {\n-          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop((_2.0: Tag)) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   \n       bb2: {\n@@ -38,7 +38,7 @@\n       }\n   \n       bb3: {\n-          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop((_2.2: Tag)) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   }\n   "}, {"sha": "3074fcbdf531513e8c49206d1b513b86fb176864", "filename": "tests/mir-opt/sroa/structs.escaping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -15,7 +15,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n           StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:8: +1:39\n           StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n-          _5 = g() -> bb1;                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+          _5 = g() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:34: +1:37\n                                            // mir::Constant\n                                            // + span: $DIR/structs.rs:78:34: 78:35\n                                            // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n@@ -26,7 +26,7 @@\n           StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:38: +1:39\n           _3 = &(_4.0: u32);               // scope 0 at $DIR/structs.rs:+1:7: +1:41\n           _2 = &raw const (*_3);           // scope 0 at $DIR/structs.rs:+1:7: +1:41\n-          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+          _1 = f(move _2) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:5: +1:42\n                                            // mir::Constant\n                                            // + span: $DIR/structs.rs:78:5: 78:6\n                                            // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }"}, {"sha": "323b61346c004354773bed128f069a58d6e5436f", "filename": "tests/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -21,7 +21,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/unreachable.rs:+1:23: +1:30\n           _1 = empty() -> bb1;             // scope 1 at $DIR/unreachable.rs:+1:23: +1:30\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable.rs:9:23: 9:28\n+                                           // + span: $DIR/unreachable.rs:10:23: 10:28\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "97093729dd137b2d9b0d1fb8aeaa14f4ead6fa01", "filename": "tests/mir-opt/unreachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n enum Empty {}\n \n fn empty() -> Option<Empty> {"}, {"sha": "94bc633613b7f35ad638ec82008ee7542de9d944", "filename": "tests/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -23,7 +23,7 @@\n           StorageLive(_2);                 // scope 2 at $DIR/unreachable_diverging.rs:+2:25: +2:32\n           _2 = empty() -> bb1;             // scope 2 at $DIR/unreachable_diverging.rs:+2:25: +2:32\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n+                                           // + span: $DIR/unreachable_diverging.rs:15:25: 15:30\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   \n@@ -44,7 +44,7 @@\n       bb3: {\n           _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:+4:13: +4:27\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n+                                           // + span: $DIR/unreachable_diverging.rs:17:13: 17:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "24e776148c123fa9549844e0c212547be33077de", "filename": "tests/mir-opt/unreachable_diverging.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funreachable_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable_diverging.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n pub enum Empty {}\n \n fn empty() -> Option<Empty> {"}, {"sha": "c27a93e91f89b2b44005c42c29401b6166aa201a", "filename": "tests/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -22,7 +22,7 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb2, unwind terminate]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb5: {"}, {"sha": "d10048dd908ae429a8a69dcd4117b88311909d0a", "filename": "tests/mir-opt/while_storage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fwhile_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fwhile_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Test that we correctly generate StorageDead statements for while loop\n // conditions on all branches\n "}, {"sha": "811789a60c3eb25d52bd4a56a16cd7c686583799", "filename": "tests/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -14,7 +14,7 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n         _2 = get_bool(_1) -> bb2;        // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n                                          // mir::Constant\n-                                         // + span: $DIR/while_storage.rs:10:11: 10:19\n+                                         // + span: $DIR/while_storage.rs:11:11: 11:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n@@ -26,7 +26,7 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n         _3 = get_bool(_1) -> bb4;        // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n                                          // mir::Constant\n-                                         // + span: $DIR/while_storage.rs:11:12: 11:20\n+                                         // + span: $DIR/while_storage.rs:12:12: 12:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n "}, {"sha": "a71c58d618daac7b26503eb0e62e5bfcea655d55", "filename": "tests/run-make/coverage-reports/expected_show_coverage.abort.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -32,7 +32,7 @@\n    30|       |// Notes:\n    31|       |//   1. Compare this program and its coverage results to those of the similar tests\n    32|       |//      `panic_unwind.rs` and `try_error_result.rs`.\n-   33|       |//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n+   33|       |//   2. This test confirms the coverage generated when a program includes `UnwindAction::Terminate`.\n    34|       |//   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n    35|       |//      results show where the program did and did not execute.\n    36|       |//   4. If the program actually aborted, the coverage counters would not be saved (which \"works as"}, {"sha": "98264bdc1afe5a3b20d7624ba7a977ab7c087476", "filename": "tests/run-make/coverage/abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da140814682407ee326d36f5256bc883899a7388/tests%2Frun-make%2Fcoverage%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da140814682407ee326d36f5256bc883899a7388/tests%2Frun-make%2Fcoverage%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Fabort.rs?ref=da140814682407ee326d36f5256bc883899a7388", "patch": "@@ -30,7 +30,7 @@ fn main() -> Result<(), u8> {\n // Notes:\n //   1. Compare this program and its coverage results to those of the similar tests\n //      `panic_unwind.rs` and `try_error_result.rs`.\n-//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n+//   2. This test confirms the coverage generated when a program includes `UnwindAction::Terminate`.\n //   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n //      results show where the program did and did not execute.\n //   4. If the program actually aborted, the coverage counters would not be saved (which \"works as"}]}