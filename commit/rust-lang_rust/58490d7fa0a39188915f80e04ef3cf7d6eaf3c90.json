{"sha": "58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDkwZDdmYTBhMzkxODg5MTVmODBlMDRlZjNjZjdkNmVhZjNjOTA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-17T21:17:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-17T21:33:13Z"}, "message": "Fix the last known (to me) bug in import resolution. We were not properly\ndropping the inner part of the environment when an intermediate item resolved\nin an outer scope.", "tree": {"sha": "1fe802de8ad4ff1a347b5996239b7a301da5c8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fe802de8ad4ff1a347b5996239b7a301da5c8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "html_url": "https://github.com/rust-lang/rust/commit/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "html_url": "https://github.com/rust-lang/rust/commit/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "45d6ce80b349818e59d3d50d8dea9256b16302c9", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "patch": "@@ -448,6 +448,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         import4.rs \\\n                         import5.rs \\\n                         import6.rs \\\n+                        import7.rs \\\n                         item-name-overload.rs \\\n                         large-records.rs \\\n                         lazy-init.rs \\"}, {"sha": "760f86d1d8403fb34a04fc16d847d271a716d971", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "patch": "@@ -40,11 +40,11 @@ fn lookup_name(&env e, import_map index,\n                ast.ident i) -> option.t[def] {\n     auto d_ = lookup_name_wrapped(e, i);\n     alt (d_) {\n-        case (none[def_wrap]) {\n+        case (none[tup(@env, def_wrap)]) {\n             ret none[def];\n         }\n-        case (some[def_wrap](?d)) {\n-            alt (d) {\n+        case (some[tup(@env, def_wrap)](?d)) {\n+            alt (d._1) {\n                 case (def_wrap_use(?it)) {\n                     alt (it.node) {\n                         case (ast.view_item_use(_, _, ?id)) {\n@@ -115,14 +115,14 @@ fn find_final_def(&env e, &span sp, vec[ident] idents) -> def_wrap {\n                 auto next_i = rest_idents.(0);\n                 auto next_ = lookup_name_wrapped(tmp_e, next_i);\n                 alt (next_) {\n-                    case (none[def_wrap]) {\n+                    case (none[tup(@env, def_wrap)]) {\n                         e.sess.span_err(sp, \"unresolved name: \" + next_i);\n                         fail;\n                     }\n-                    case (some[def_wrap](?next)) {\n+                    case (some[tup(@env, def_wrap)](?next)) {\n                         auto combined_e = update_env_for_item(e, i);\n                         ret found_something(combined_e, pending, sp,\n-                                            rest_idents, next);\n+                                            rest_idents, next._1);\n                     }\n                 }\n             }\n@@ -141,20 +141,20 @@ fn find_final_def(&env e, &span sp, vec[ident] idents) -> def_wrap {\n         auto first = idents.(0);\n         auto d_ = lookup_name_wrapped(e, first);\n         alt (d_) {\n-            case (none[def_wrap]) {\n+            case (none[tup(@env, def_wrap)]) {\n                 e.sess.span_err(sp, \"unresolved name: \" + first);\n                 fail;\n             }\n-            case (some[def_wrap](?d)) {\n-                ret found_something(e, pending, sp, idents, d);\n+            case (some[tup(@env, def_wrap)](?d)) {\n+                ret found_something(*d._0, pending, sp, idents, d._1);\n             }\n         }\n     }\n     auto pending = new_def_hash[bool]();\n     ret inner(e, pending, sp, idents);\n }\n \n-fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n+fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n \n     // log \"resolving name \" + i;\n \n@@ -308,8 +308,23 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n         ret none[def_wrap];\n     }\n \n-    ret std.list.find[scope,def_wrap](e.scopes,\n-                                      bind in_scope(i, _));\n+    alt (e.scopes) {\n+        case (nil[scope]) {\n+            ret none[tup(@env, def_wrap)];\n+        }\n+        case (cons[scope](?hd, ?tl)) {\n+            auto x = in_scope(i, hd);\n+            alt (x) {\n+                case (some[def_wrap](?x)) {\n+                    ret some(tup(@e, x));\n+                }\n+                case (none[def_wrap]) {\n+                    auto outer_env = rec(scopes = *tl with e);\n+                    ret lookup_name_wrapped(outer_env, i);\n+                }\n+            }\n+        }\n+    }\n }\n \n fn fold_pat_tag(&env e, &span sp, import_map index, ident i,"}, {"sha": "29915fb1f2fc772729ef8eb0fcceeb272174d7db", "filename": "src/test/run-pass/import7.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58490d7fa0a39188915f80e04ef3cf7d6eaf3c90/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=58490d7fa0a39188915f80e04ef3cf7d6eaf3c90", "patch": "@@ -0,0 +1,19 @@\n+import bar.baz;\n+import foo.zed;\n+mod foo {\n+  mod zed {\n+    fn baz() {\n+      log \"baz\";\n+    }\n+  }\n+}\n+mod bar {\n+  import zed.baz;\n+  mod foo {\n+    mod zed {\n+    }\n+  }\n+}\n+fn main(vec[str] args) {\n+  baz();\n+}"}]}