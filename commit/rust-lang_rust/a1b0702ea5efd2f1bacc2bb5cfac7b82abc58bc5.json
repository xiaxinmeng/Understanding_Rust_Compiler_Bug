{"sha": "a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5", "node_id": "C_kwDOAAsO6NoAKGExYjA3MDJlYTVlZmQyZjFiYWNjMmJiNWNmYWM3YjgyYWJjNThiYzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-13T16:37:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-13T16:37:36Z"}, "message": "Rollup merge of #103996 - SUPERCILEX:docs, r=RalfJung\n\nAdd small clarification around using pointers derived from references\n\nr? `@RalfJung`\n\nOne question about your example from https://github.com/rust-lang/libs-team/issues/122: at what point does UB arise? If writing 0 does not cause UB and the reference `x` is never read or written to (explicitly or implicitly by being wrapped in another data structure) after the call to `foo`, does UB only arise when dropping the value? I don't really get that since I thought references were always supposed to point to valid data?\n\n```rust\nfn foo(x: &mut NonZeroI32)  {\n  let ptr = x as *mut NonZeroI32;\n  unsafe { ptr.cast::<i32>().write(0); } // no UB here\n  // What now? x is considered garbage when?\n}\n```", "tree": {"sha": "08aac459556ddc8fc45fde8331e90a206b6d4eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08aac459556ddc8fc45fde8331e90a206b6d4eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcR1QCRBK7hj4Ov3rIwAASBkIAFVfLEp8JVOzdvdYKDrEVeoE\nTkDo+jxg58U1o3cDtDYuefHBNnTkidBOYdJPhEZNgsJDpVy+eY8FiWP1B9qmGyMg\n87xPbymxSUk7ePiQ8LkBxxvH+jHhGnZOOfdMdkFrsP506vME/kaZ8HoQu1vUG7Bb\nDSGfoA+vJYuZjeWdOTPSNz2kLB1XF353+QtIxB7QcE9VBhOfqiglEAdU3RDuj1UH\n2taIqhosdUQhaZi3i/d6ntOAYsflS4EjypWCcGyICgRqX2il14OJiBafDnHf91OL\nLKWIOwqxoAlONee3zHz70NL0BTqBnNG2CDl9JkEJx0shNoPB/7HkMELWeSDExuw=\n=0cL+\n-----END PGP SIGNATURE-----\n", "payload": "tree 08aac459556ddc8fc45fde8331e90a206b6d4eea\nparent afd7977c850d9ce06f1dd2bebb40db8cc2224a51\nparent 28ea0023408d9edcc61e89b9f511528e4757a53e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668357456 +0100\ncommitter GitHub <noreply@github.com> 1668357456 +0100\n\nRollup merge of #103996 - SUPERCILEX:docs, r=RalfJung\n\nAdd small clarification around using pointers derived from references\n\nr? `@RalfJung`\n\nOne question about your example from https://github.com/rust-lang/libs-team/issues/122: at what point does UB arise? If writing 0 does not cause UB and the reference `x` is never read or written to (explicitly or implicitly by being wrapped in another data structure) after the call to `foo`, does UB only arise when dropping the value? I don't really get that since I thought references were always supposed to point to valid data?\n\n```rust\nfn foo(x: &mut NonZeroI32)  {\n  let ptr = x as *mut NonZeroI32;\n  unsafe { ptr.cast::<i32>().write(0); } // no UB here\n  // What now? x is considered garbage when?\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5", "html_url": "https://github.com/rust-lang/rust/commit/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd7977c850d9ce06f1dd2bebb40db8cc2224a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd7977c850d9ce06f1dd2bebb40db8cc2224a51", "html_url": "https://github.com/rust-lang/rust/commit/afd7977c850d9ce06f1dd2bebb40db8cc2224a51"}, {"sha": "28ea0023408d9edcc61e89b9f511528e4757a53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ea0023408d9edcc61e89b9f511528e4757a53e", "html_url": "https://github.com/rust-lang/rust/commit/28ea0023408d9edcc61e89b9f511528e4757a53e"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "fd6fe46bf50a85eca419a9469603e11249264939", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a1b0702ea5efd2f1bacc2bb5cfac7b82abc58bc5", "patch": "@@ -35,7 +35,8 @@\n //!   be used for inter-thread synchronization.\n //! * The result of casting a reference to a pointer is valid for as long as the\n //!   underlying object is live and no reference (just raw pointers) is used to\n-//!   access the same memory.\n+//!   access the same memory. That is, reference and pointer accesses cannot be\n+//!   interleaved.\n //!\n //! These axioms, along with careful use of [`offset`] for pointer arithmetic,\n //! are enough to correctly implement many useful things in unsafe code. Stronger guarantees\n@@ -64,7 +65,6 @@\n //! separate allocated object), heap allocations (each allocation created by the global allocator is\n //! a separate allocated object), and `static` variables.\n //!\n-//!\n //! # Strict Provenance\n //!\n //! **The following text is non-normative, insufficiently formal, and is an extremely strict"}]}