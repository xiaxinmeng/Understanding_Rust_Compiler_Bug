{"sha": "bb99fc31d0a8f962662e636938cf96f0f70d3803", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTlmYzMxZDBhOGY5NjI2NjJlNjM2OTM4Y2Y5NmYwZjcwZDM4MDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T04:08:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T04:08:34Z"}, "message": "review comment: update error code descr", "tree": {"sha": "161982d74b9f804d7f5e56197512015767dbfdcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161982d74b9f804d7f5e56197512015767dbfdcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb99fc31d0a8f962662e636938cf96f0f70d3803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb99fc31d0a8f962662e636938cf96f0f70d3803", "html_url": "https://github.com/rust-lang/rust/commit/bb99fc31d0a8f962662e636938cf96f0f70d3803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb99fc31d0a8f962662e636938cf96f0f70d3803/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "html_url": "https://github.com/rust-lang/rust/commit/c1e5e5c56717c5fe224db425d891c274a3f3cb5e"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "ebfa6acf23e00afba5a0ed0116cb4414a9b31551", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb99fc31d0a8f962662e636938cf96f0f70d3803/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99fc31d0a8f962662e636938cf96f0f70d3803/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=bb99fc31d0a8f962662e636938cf96f0f70d3803", "patch": "@@ -212,7 +212,7 @@ match string {\n E0033: r##\"\n This error indicates that a pointer to a trait type cannot be implicitly\n dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementors isn't fixed, this type has no compile-time size.\n+size of trait implementers isn't fixed, this type has no compile-time size.\n Therefore, all accesses to trait types must be through pointers. If you\n encounter this error you should try to avoid dereferencing the pointer.\n \n@@ -2430,23 +2430,23 @@ This error indicates that the `self` parameter in a method has an invalid\n \"reciever type\".\n \n Methods take a special first parameter, of which there are three variants:\n-`self`, `&self`, and `&mut self`. The type `Self` acts as an alias to the\n-type of the current trait implementor, or \"receiver type\". Besides the\n-already mentioned `Self`, `&Self` and `&mut Self` valid receiver types, the\n-following are also valid, if less common: `self: Box<Self>`,\n-`self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>` (where P is one of\n-the previous types except `Self`).\n+`self`, `&self`, and `&mut self`. These are syntactic sugar for\n+`self: Self`, `self: &Self`, and `self: &mut Self` respectively. The type\n+`Self` acts as an alias to the type of the current trait implementer, or\n+\"receiver type\". Besides the already mentioned `Self`, `&Self` and\n+`&mut Self` valid receiver types, the following are also valid:\n+`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n+(where P is one of the previous types except `Self`).\n \n ```\n # struct Foo;\n trait Trait {\n     fn foo(&self);\n-//         ^^^^^ this let's you refer to the type that implements this trait\n }\n+\n impl Trait for Foo {\n-//             ^^^ this is the \"receiver type\"\n     fn foo(&self) {}\n-//         ^^^^^ this is of type `Foo`\n+//         ^^^^^ this the receiver type `&Foo`\n }\n ```\n \n@@ -2458,11 +2458,12 @@ The above is equivalent to:\n #     fn foo(&self);\n # }\n impl Trait for Foo {\n-    fn foo(&self: &Foo) {}\n+    fn foo(self: &Foo) {}\n }\n ```\n \n-When using an invalid reciver type, like in the following example,\n+E0307 will be emitted by the compiler when using an invalid reciver type,\n+like in the following example:\n \n ```compile_fail,E0307\n # struct Foo;\n@@ -2471,12 +2472,13 @@ When using an invalid reciver type, like in the following example,\n #     fn foo(&self);\n # }\n impl Trait for Struct {\n-    fn foo(&self: &Bar) {}\n+    fn foo(self: &Bar) {}\n }\n ```\n \n The nightly feature [Arbintrary self types][AST] extends the accepted\n-receiver type to also include any type that can dereference to `Self`:\n+set of receiver types to also include any type that can dereference to\n+`Self`:\n \n ```\n #![feature(arbitrary_self_types)]"}]}