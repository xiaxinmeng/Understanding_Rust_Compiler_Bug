{"sha": "7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "node_id": "C_kwDOAAsO6NoAKDc1NjZlZDhmZjRkYjE1NDlmZWVhZWJlMGVkMWNhMmUwZGUyYzljMDE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T10:58:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T11:22:08Z"}, "message": "tweak wording", "tree": {"sha": "f66166af298faa6292fc065cb6cc96c9bb4a66e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66166af298faa6292fc065cb6cc96c9bb4a66e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "html_url": "https://github.com/rust-lang/rust/commit/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe178ccb72ab824bc62a011a00e8a821332a068c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe178ccb72ab824bc62a011a00e8a821332a068c", "html_url": "https://github.com/rust-lang/rust/commit/fe178ccb72ab824bc62a011a00e8a821332a068c"}], "stats": {"total": 221, "additions": 111, "deletions": 110}, "files": [{"sha": "2c6d27ced0180df81e3d8768c6881be94712a68f", "filename": "src/tools/miri/src/borrow_tracker/tree_borrows/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -70,7 +70,7 @@ impl HistoryData {\n         let this = format!(\"the {tag_name} tag {tag:?}\");\n         let msg_initial_state = format!(\", in the initial state {}\", created.1);\n         let msg_creation = format!(\n-            \"{this} was created here{maybe_msg_initial_state}.\",\n+            \"{this} was created here{maybe_msg_initial_state}\",\n             maybe_msg_initial_state = if show_initial_state { &msg_initial_state } else { \"\" },\n         );\n \n@@ -79,8 +79,8 @@ impl HistoryData {\n         {\n             // NOTE: `offset` is explicitly absent from the error message, it has no significance\n             // to the user. The meaningful one is `access_range`.\n-            self.events.push((Some(span.data()), format!(\"{this} then transitioned {transition} due to a {rel} {access_kind} at offsets {access_range:?}.\", rel = if is_foreign { \"foreign\" } else { \"child\" })));\n-            self.events.push((None, format!(\"this corresponds to {}.\", transition.summary())));\n+            self.events.push((Some(span.data()), format!(\"{this} then transitioned {transition} due to a {rel} {access_kind} at offsets {access_range:?}\", rel = if is_foreign { \"foreign\" } else { \"child\" })));\n+            self.events.push((None, format!(\"this corresponds to {}\", transition.summary())));\n         }\n     }\n }\n@@ -266,50 +266,49 @@ impl TbError<'_> {\n         let accessed = self.accessed_info;\n         let conflicting = self.conflicting_info;\n         let accessed_is_conflicting = accessed.tag == conflicting.tag;\n-        let (pre_error, title, relation, problem, conflicting_tag_name) = match self.error_kind {\n+        let (pre_error, title, details, conflicting_tag_name) = match self.error_kind {\n             ChildAccessForbidden(perm) => {\n                 let conflicting_tag_name =\n                     if accessed_is_conflicting { \"accessed\" } else { \"conflicting\" };\n-                (\n-                    perm,\n-                    format!(\"{kind} through {accessed} is forbidden.\"),\n-                    (!accessed_is_conflicting).then_some(format!(\n-                        \"the accessed tag {accessed} is a child of the conflicting tag {conflicting}.\"\n-                    )),\n-                    format!(\n-                        \"the {conflicting_tag_name} tag {conflicting} has state {perm} which forbids child {kind}es.\"\n-                    ),\n-                    conflicting_tag_name,\n-                )\n+                let title = format!(\"{kind} through {accessed} is forbidden\");\n+                let mut details = Vec::new();\n+                if !accessed_is_conflicting {\n+                    details.push(format!(\n+                        \"the accessed tag {accessed} is a child of the conflicting tag {conflicting}\"\n+                    ));\n+                }\n+                details.push(format!(\n+                    \"the {conflicting_tag_name} tag {conflicting} has state {perm} which forbids child {kind}es\"\n+                ));\n+                (perm, title, details, conflicting_tag_name)\n             }\n             ProtectedTransition(transition) => {\n                 let conflicting_tag_name = \"protected\";\n-                (\n-                    transition.started(),\n-                    format!(\"{kind} through {accessed} is forbidden.\"),\n-                    Some(format!(\n-                        \"the accessed tag {accessed} is a foreign tag for the {conflicting_tag_name} tag {conflicting}.\"\n-                    )),\n+                let title = format!(\"{kind} through {accessed} is forbidden\");\n+                let details = vec![\n+                    format!(\n+                        \"the accessed tag {accessed} is foreign to the {conflicting_tag_name} tag {conflicting} (i.e., it is not a child)\"\n+                    ),\n+                    format!(\n+                        \"the access would cause the {conflicting_tag_name} tag {conflicting} to transition {transition}\"\n+                    ),\n                     format!(\n-                        \"the access would cause the {conflicting_tag_name} tag {conflicting} to transition {transition}. This is {loss}, which is not allowed for protected tags.\",\n+                        \"this is {loss}, which is not allowed for protected tags\",\n                         loss = transition.summary(),\n                     ),\n-                    conflicting_tag_name,\n-                )\n+                ];\n+                (transition.started(), title, details, conflicting_tag_name)\n             }\n             ProtectedDealloc => {\n                 let conflicting_tag_name = \"strongly protected\";\n-                (\n-                    started_as,\n-                    format!(\"deallocation through {accessed} is forbidden.\"),\n-                    Some(format!(\n-                        \"the allocation of the accessed tag {accessed} also contains the {conflicting_tag_name} tag {conflicting}.\"\n-                    )),\n+                let title = format!(\"deallocation through {accessed} is forbidden\");\n+                let details = vec![\n                     format!(\n-                        \"the {conflicting_tag_name} tag {conflicting} disallows deallocations.\"\n+                        \"the allocation of the accessed tag {accessed} also contains the {conflicting_tag_name} tag {conflicting}\"\n                     ),\n-                    conflicting_tag_name,\n-                )\n+                    format!(\"the {conflicting_tag_name} tag {conflicting} disallows deallocations\"),\n+                ];\n+                (started_as, title, details, conflicting_tag_name)\n             }\n         };\n         let pre_transition = PermTransition::from(started_as, pre_error).unwrap();\n@@ -322,7 +321,7 @@ impl TbError<'_> {\n             conflicting_tag_name,\n             true,\n         );\n-        err_machine_stop!(TerminationInfo::TreeBorrowsUb { title, relation, problem, history })\n+        err_machine_stop!(TerminationInfo::TreeBorrowsUb { title, details, history })\n     }\n }\n "}, {"sha": "aeba0ea5a9524f66cee0015ba8a6c01e4a78b282", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -25,8 +25,7 @@ pub enum TerminationInfo {\n     },\n     TreeBorrowsUb {\n         title: String,\n-        relation: Option<String>,\n-        problem: String,\n+        details: Vec<String>,\n         history: tree_diagnostics::HistoryData,\n     },\n     Int2PtrWithStrictProvenance,\n@@ -222,13 +221,13 @@ pub fn report_error<'tcx, 'mir>(\n                 }\n                 helps\n             },\n-            TreeBorrowsUb { title: _, relation, problem, history } => {\n-                let mut helps = Vec::new();\n-                if let Some(relation) = relation {\n-                    helps.push((None, relation.clone()));\n+            TreeBorrowsUb { title: _, details, history } => {\n+                let mut helps = vec![\n+                    (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\"))\n+                ];\n+                for m in details {\n+                    helps.push((None, m.clone()));\n                 }\n-                helps.push((None, problem.clone()));\n-                helps.push((None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\")));\n                 for event in history.events.clone() {\n                     helps.push(event);\n                 }"}, {"sha": "bb601fc88352d6c23aedd4674584163b5dc44952", "filename": "src/tools/miri/tests/fail/tree-borrows/alternate-read-write.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Falternate-read-write.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,34 +1,34 @@\n-error: Undefined Behavior: write access through <TAG> is forbidden.\n+error: Undefined Behavior: write access through <TAG> is forbidden\n   --> $DIR/alternate-read-write.rs:LL:CC\n    |\n LL |     *y += 1; // Failure\n-   |     ^^^^^^^ write access through <TAG> is forbidden.\n+   |     ^^^^^^^ write access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>.\n-   = help: the conflicting tag <TAG> has state Frozen which forbids child write accesses.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>\n+   = help: the conflicting tag <TAG> has state Frozen which forbids child write accesses\n+help: the accessed tag <TAG> was created here\n   --> $DIR/alternate-read-write.rs:LL:CC\n    |\n LL |     let y = unsafe { &mut *(x as *mut u8) };\n    |                      ^^^^^^^^^^^^^^^^^^^^\n-help: the conflicting tag <TAG> was created here, in the initial state Reserved.\n+help: the conflicting tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/alternate-read-write.rs:LL:CC\n    |\n LL |     let y = unsafe { &mut *(x as *mut u8) };\n    |                      ^^^^^^^^^^^^^^^^^^^^\n-help: the conflicting tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x0..0x1].\n+help: the conflicting tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x0..0x1]\n   --> $DIR/alternate-read-write.rs:LL:CC\n    |\n LL |     *y += 1; // Success\n    |     ^^^^^^^\n-   = help: this corresponds to an activation.\n-help: the conflicting tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x0..0x1].\n+   = help: this corresponds to an activation\n+help: the conflicting tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x0..0x1]\n   --> $DIR/alternate-read-write.rs:LL:CC\n    |\n LL |     let _val = *x;\n    |                ^^\n-   = help: this corresponds to a loss of write permissions.\n+   = help: this corresponds to a loss of write permissions\n    = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/alternate-read-write.rs:LL:CC\n "}, {"sha": "bc829fd86d35094c50fe0a814fe1842caedd68f8", "filename": "src/tools/miri/tests/fail/tree-borrows/error-range.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ferror-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ferror-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ferror-range.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,40 +1,40 @@\n-error: Undefined Behavior: read access through <TAG> is forbidden.\n+error: Undefined Behavior: read access through <TAG> is forbidden\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         rmut[5] += 1;\n-   |         ^^^^^^^^^^^^ read access through <TAG> is forbidden.\n+   |         ^^^^^^^^^^^^ read access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>.\n-   = help: the conflicting tag <TAG> has state Disabled which forbids child read accesses.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>\n+   = help: the conflicting tag <TAG> has state Disabled which forbids child read accesses\n+help: the accessed tag <TAG> was created here\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         let rmut = &mut *addr_of_mut!(data[0..6]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: the conflicting tag <TAG> was created here, in the initial state Reserved.\n+help: the conflicting tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         let rmut = &mut *addr_of_mut!(data[0..6]);\n    |                                       ^^^^\n-help: the conflicting tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x5..0x6].\n+help: the conflicting tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x5..0x6]\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         rmut[5] += 1;\n    |         ^^^^^^^^^^^^\n-   = help: this corresponds to an activation.\n-help: the conflicting tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x5..0x6].\n+   = help: this corresponds to an activation\n+help: the conflicting tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x5..0x6]\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         let _v = data[5];\n    |                  ^^^^^^^\n-   = help: this corresponds to a loss of write permissions.\n-help: the conflicting tag <TAG> then transitioned from Frozen to Disabled due to a foreign write access at offsets [0x5..0x6].\n+   = help: this corresponds to a loss of write permissions\n+help: the conflicting tag <TAG> then transitioned from Frozen to Disabled due to a foreign write access at offsets [0x5..0x6]\n   --> $DIR/error-range.rs:LL:CC\n    |\n LL |         data[5] = 1;\n    |         ^^^^^^^^^^^\n-   = help: this corresponds to a loss of read permissions.\n+   = help: this corresponds to a loss of read permissions\n    = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/error-range.rs:LL:CC\n "}, {"sha": "8e80bdd63c0bed64feab6e6b7d752f99acb40090", "filename": "src/tools/miri/tests/fail/tree-borrows/fragile-data-race.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Ffragile-data-race.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,28 +1,28 @@\n-error: Undefined Behavior: write access through <TAG> is forbidden.\n+error: Undefined Behavior: write access through <TAG> is forbidden\n   --> $DIR/fragile-data-race.rs:LL:CC\n    |\n LL |     unsafe { *p = 1 };\n-   |              ^^^^^^ write access through <TAG> is forbidden.\n+   |              ^^^^^^ write access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>.\n-   = help: the conflicting tag <TAG> has state Frozen which forbids child write accesses.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> is a child of the conflicting tag <TAG>\n+   = help: the conflicting tag <TAG> has state Frozen which forbids child write accesses\n+help: the accessed tag <TAG> was created here\n   --> $DIR/fragile-data-race.rs:LL:CC\n    |\n LL | fn thread_1(x: &mut u8) -> SendPtr {\n    |             ^\n-help: the conflicting tag <TAG> was created here, in the initial state Reserved.\n+help: the conflicting tag <TAG> was created here, in the initial state Reserved\n   --> RUSTLIB/std/src/panic.rs:LL:CC\n    |\n LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    |                                                       ^\n-help: the conflicting tag <TAG> then transitioned from Reserved to Frozen due to a foreign read access at offsets [0x0..0x1].\n+help: the conflicting tag <TAG> then transitioned from Reserved to Frozen due to a foreign read access at offsets [0x0..0x1]\n   --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    |\n LL |             crate::intrinsics::read_via_copy(src)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: this corresponds to a loss of write permissions.\n+   = help: this corresponds to a loss of write permissions\n    = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/fragile-data-race.rs:LL:CC\n "}, {"sha": "14696c704fc1b8e6beb10a1d6d2b64c89a44d7aa", "filename": "src/tools/miri/tests/fail/tree-borrows/outside-range.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Foutside-range.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,18 +1,19 @@\n-error: Undefined Behavior: write access through <TAG> is forbidden.\n+error: Undefined Behavior: write access through <TAG> is forbidden\n   --> $DIR/outside-range.rs:LL:CC\n    |\n LL |     *y.add(3) = 42;\n-   |     ^^^^^^^^^^^^^^ write access through <TAG> is forbidden.\n+   |     ^^^^^^^^^^^^^^ write access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> is a foreign tag for the protected tag <TAG>.\n-   = help: the access would cause the protected tag <TAG> to transition from Reserved to Disabled. This is a loss of read and write permissions, which is not allowed for protected tags.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> is foreign to the protected tag <TAG> (i.e., it is not a child)\n+   = help: the access would cause the protected tag <TAG> to transition from Reserved to Disabled\n+   = help: this is a loss of read and write permissions, which is not allowed for protected tags\n+help: the accessed tag <TAG> was created here\n   --> $DIR/outside-range.rs:LL:CC\n    |\n LL |         let raw = data.as_mut_ptr();\n    |                   ^^^^^^^^^^^^^^^^^\n-help: the protected tag <TAG> was created here, in the initial state Reserved.\n+help: the protected tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/outside-range.rs:LL:CC\n    |\n LL | unsafe fn stuff(x: &mut u8, y: *mut u8) {"}, {"sha": "8c9c2f8f9656b2344a43e1583ac52c3731f30417", "filename": "src/tools/miri/tests/fail/tree-borrows/read-to-local.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fread-to-local.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,28 +1,28 @@\n-error: Undefined Behavior: write access through <TAG> is forbidden.\n+error: Undefined Behavior: write access through <TAG> is forbidden\n   --> $DIR/read-to-local.rs:LL:CC\n    |\n LL |         *ptr = 0;\n-   |         ^^^^^^^^ write access through <TAG> is forbidden.\n+   |         ^^^^^^^^ write access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> has state Frozen which forbids child write accesses.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here, in the initial state Reserved.\n+   = help: the accessed tag <TAG> has state Frozen which forbids child write accesses\n+help: the accessed tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/read-to-local.rs:LL:CC\n    |\n LL |         let mref = &mut root;\n    |                    ^^^^^^^^^\n-help: the accessed tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x0..0x1].\n+help: the accessed tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x0..0x1]\n   --> $DIR/read-to-local.rs:LL:CC\n    |\n LL |         *ptr = 0; // Write\n    |         ^^^^^^^^\n-   = help: this corresponds to an activation.\n-help: the accessed tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x0..0x1].\n+   = help: this corresponds to an activation\n+help: the accessed tag <TAG> then transitioned from Active to Frozen due to a foreign read access at offsets [0x0..0x1]\n   --> $DIR/read-to-local.rs:LL:CC\n    |\n LL |         assert_eq!(root, 0); // Parent Read\n    |         ^^^^^^^^^^^^^^^^^^^\n-   = help: this corresponds to a loss of write permissions.\n+   = help: this corresponds to a loss of write permissions\n    = note: BACKTRACE (of the first span):\n    = note: inside `main` at $DIR/read-to-local.rs:LL:CC\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "b85793ff0633758e1225aef234cf3da3d5c0cb0e", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/cell-protected-write.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fcell-protected-write.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -8,21 +8,22 @@ Warning: this tree is indicative only. Some tags may have been hidden.\n | Re*|        \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x> Strongly protected\n | Re*|        \u2514\u2500\u2500\u2500\u2500<TAG=y, callee:y, caller:y>\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-error: Undefined Behavior: write access through <TAG> (y, callee:y, caller:y) is forbidden.\n+error: Undefined Behavior: write access through <TAG> (y, callee:y, caller:y) is forbidden\n   --> $DIR/cell-protected-write.rs:LL:CC\n    |\n LL |             *y = 1;\n-   |             ^^^^^^ write access through <TAG> (y, callee:y, caller:y) is forbidden.\n+   |             ^^^^^^ write access through <TAG> (y, callee:y, caller:y) is forbidden\n    |\n-   = help: the accessed tag <TAG> (y, callee:y, caller:y) is a foreign tag for the protected tag <TAG> (callee:x).\n-   = help: the access would cause the protected tag <TAG> (callee:x) to transition from Reserved to Disabled. This is a loss of read and write permissions, which is not allowed for protected tags.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> (y, callee:y, caller:y) is foreign to the protected tag <TAG> (callee:x) (i.e., it is not a child)\n+   = help: the access would cause the protected tag <TAG> (callee:x) to transition from Reserved to Disabled\n+   = help: this is a loss of read and write permissions, which is not allowed for protected tags\n+help: the accessed tag <TAG> was created here\n   --> $DIR/cell-protected-write.rs:LL:CC\n    |\n LL |         let y = (&mut *n).get();\n    |                 ^^^^^^^^^\n-help: the protected tag <TAG> was created here, in the initial state Reserved.\n+help: the protected tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/cell-protected-write.rs:LL:CC\n    |\n LL |         unsafe fn write_second(x: &mut UnsafeCell<u8>, y: *mut u8) {"}, {"sha": "5de7dc0c7c51fd79bd3fe2d46bfb298f8c7253ff", "filename": "src/tools/miri/tests/fail/tree-borrows/reserved/int-protected-write.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Freserved%2Fint-protected-write.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -8,21 +8,22 @@ Warning: this tree is indicative only. Some tags may have been hidden.\n | Res|        \u2502   \u2514\u2500\u2500\u2500\u2500<TAG=callee:x> Strongly protected\n | Res|        \u2514\u2500\u2500\u2500\u2500<TAG=y, callee:y, caller:y>\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-error: Undefined Behavior: write access through <TAG> (y, callee:y, caller:y) is forbidden.\n+error: Undefined Behavior: write access through <TAG> (y, callee:y, caller:y) is forbidden\n   --> $DIR/int-protected-write.rs:LL:CC\n    |\n LL |             *y = 0;\n-   |             ^^^^^^ write access through <TAG> (y, callee:y, caller:y) is forbidden.\n+   |             ^^^^^^ write access through <TAG> (y, callee:y, caller:y) is forbidden\n    |\n-   = help: the accessed tag <TAG> (y, callee:y, caller:y) is a foreign tag for the protected tag <TAG> (callee:x).\n-   = help: the access would cause the protected tag <TAG> (callee:x) to transition from Reserved to Disabled. This is a loss of read and write permissions, which is not allowed for protected tags.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the accessed tag <TAG> (y, callee:y, caller:y) is foreign to the protected tag <TAG> (callee:x) (i.e., it is not a child)\n+   = help: the access would cause the protected tag <TAG> (callee:x) to transition from Reserved to Disabled\n+   = help: this is a loss of read and write permissions, which is not allowed for protected tags\n+help: the accessed tag <TAG> was created here\n   --> $DIR/int-protected-write.rs:LL:CC\n    |\n LL |         let y = (&mut *n) as *mut _;\n    |                 ^^^^^^^^^\n-help: the protected tag <TAG> was created here, in the initial state Reserved.\n+help: the protected tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/int-protected-write.rs:LL:CC\n    |\n LL |         unsafe fn write_second(x: &mut u8, y: *mut u8) {"}, {"sha": "97088d5854cc9dd396f4d85f90a5c6b6e09eea64", "filename": "src/tools/miri/tests/fail/tree-borrows/strongly-protected.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,18 +1,18 @@\n-error: Undefined Behavior: deallocation through <TAG> is forbidden.\n+error: Undefined Behavior: deallocation through <TAG> is forbidden\n   --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n    |\n LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocation through <TAG> is forbidden.\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocation through <TAG> is forbidden\n    |\n-   = help: the allocation of the accessed tag <TAG> also contains the strongly protected tag <TAG>.\n-   = help: the strongly protected tag <TAG> disallows deallocations.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here.\n+   = help: the allocation of the accessed tag <TAG> also contains the strongly protected tag <TAG>\n+   = help: the strongly protected tag <TAG> disallows deallocations\n+help: the accessed tag <TAG> was created here\n   --> $DIR/strongly-protected.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: the strongly protected tag <TAG> was created here, in the initial state Reserved.\n+help: the strongly protected tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/strongly-protected.rs:LL:CC\n    |\n LL | fn inner(x: &mut i32, f: fn(&mut i32)) {"}, {"sha": "f6285bdcf16d4fc49a7a17ce23a79c84361cfe50", "filename": "src/tools/miri/tests/fail/tree-borrows/write-during-2phase.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fwrite-during-2phase.stderr?ref=7566ed8ff4db1549feeaebe0ed1ca2e0de2c9c01", "patch": "@@ -1,12 +1,12 @@\n-error: Undefined Behavior: read access through <TAG> is forbidden.\n+error: Undefined Behavior: read access through <TAG> is forbidden\n   --> $DIR/write-during-2phase.rs:LL:CC\n    |\n LL |     fn add(&mut self, n: u64) -> u64 {\n-   |            ^^^^^^^^^ read access through <TAG> is forbidden.\n+   |            ^^^^^^^^^ read access through <TAG> is forbidden\n    |\n-   = help: the accessed tag <TAG> has state Disabled which forbids child read accesses.\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\n-help: the accessed tag <TAG> was created here, in the initial state Reserved.\n+   = help: the accessed tag <TAG> has state Disabled which forbids child read accesses\n+help: the accessed tag <TAG> was created here, in the initial state Reserved\n   --> $DIR/write-during-2phase.rs:LL:CC\n    |\n LL |       let _res = f.add(unsafe {\n@@ -18,12 +18,12 @@ LL | |         *inner = 42;\n LL | |         n\n LL | |     });\n    | |______^\n-help: the accessed tag <TAG> then transitioned from Reserved to Disabled due to a foreign write access at offsets [0x0..0x8].\n+help: the accessed tag <TAG> then transitioned from Reserved to Disabled due to a foreign write access at offsets [0x0..0x8]\n   --> $DIR/write-during-2phase.rs:LL:CC\n    |\n LL |         *inner = 42;\n    |         ^^^^^^^^^^^\n-   = help: this corresponds to a loss of read and write permissions.\n+   = help: this corresponds to a loss of read and write permissions\n    = note: BACKTRACE (of the first span):\n    = note: inside `Foo::add` at $DIR/write-during-2phase.rs:LL:CC\n note: inside `main`"}]}