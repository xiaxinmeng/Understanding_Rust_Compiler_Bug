{"sha": "e42f79c0a3eb64deb5445968a0bb7106df489ed2", "node_id": "C_kwDOAAsO6NoAKGU0MmY3OWMwYTNlYjY0ZGViNTQ0NTk2OGEwYmI3MTA2ZGY0ODllZDI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-12-08T21:24:06Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-12-09T17:11:46Z"}, "message": "Add `filter` option to lintcheck", "tree": {"sha": "840cef37ed30cdd7c64741e0fc040dd4d48248cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840cef37ed30cdd7c64741e0fc040dd4d48248cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42f79c0a3eb64deb5445968a0bb7106df489ed2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmGyONIACgkQ/Ny/Ka9k\n1gHicA/+NMriLJYQ9P9LL0L3vx6LOyiKf8jbSvNf/QPboSVRf2BtV8LbTeDiSTe+\nbJYQaQJcAMJ9pfn7BvS4muEKByQQAOpb+hyz/RtzWA+8VQ6EkLc39/EG5aCX80Um\nBY4Xh+rV/K79JgTFzDdCCNspVZLRk2wVNYgeU0keyA5ETk2aKMKgyBPq3qlkE76l\nI/F1j6tt5MtvXgKf5YINlNeHH+nMuok0U16ATQoUzsdj7LJwwY2Ns9qzQhvbEoDs\nk61aj93kyGRkqlC1QRAJxjw3KvZH3gkfn0qohezUUXl3hXAOErStDuuO8KVx89hL\nH43cLI1eHkSr5HricMYPrJx9FwfK+C5s478JIcpq1hdMLs8J2kyTcuO6K1h8TPxs\nmTEQOwkQbdndYxtGuIPwaDReVrgv+MjfQYz+yUwWXweMZoNDvpn3cvVF7t7fjTOA\nHUhC6FdUy4+oaEGSueKRXEk+pgD0Yei2RHtxwzzUqbfN2JOsATfBTUkZ3nFYawSv\nPhU8FcW6agpR4pAoYk9NR4OjIu0k62rbmL5j1Vug5qaOjXywPlDMnZO0dWWd2I4W\n3+w7cA6IUgconxhn1wEpRogoSh4c34RoiiEWSTMFrIIH0FPdpuMUlKYOgkVjIXUJ\ncmC/E+Ahu+15j4//EGQf8MaYCYYVWFL9YTOVA2DLWe4c8+nfIRg=\n=9Bkp\n-----END PGP SIGNATURE-----", "payload": "tree 840cef37ed30cdd7c64741e0fc040dd4d48248cc\nparent 460bef22a32210c2ad9e13efc63ab095c74fc457\nauthor xFrednet <xFrednet@gmail.com> 1638998646 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1639069906 +0100\n\nAdd `filter` option to lintcheck\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42f79c0a3eb64deb5445968a0bb7106df489ed2", "html_url": "https://github.com/rust-lang/rust/commit/e42f79c0a3eb64deb5445968a0bb7106df489ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42f79c0a3eb64deb5445968a0bb7106df489ed2/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460bef22a32210c2ad9e13efc63ab095c74fc457", "url": "https://api.github.com/repos/rust-lang/rust/commits/460bef22a32210c2ad9e13efc63ab095c74fc457", "html_url": "https://github.com/rust-lang/rust/commit/460bef22a32210c2ad9e13efc63ab095c74fc457"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "9ece023927bac060041530b2d870d34b59ccad3f", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e42f79c0a3eb64deb5445968a0bb7106df489ed2/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f79c0a3eb64deb5445968a0bb7106df489ed2/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=e42f79c0a3eb64deb5445968a0bb7106df489ed2", "patch": "@@ -264,6 +264,7 @@ impl Crate {\n         thread_limit: usize,\n         total_crates_to_lint: usize,\n         fix: bool,\n+        lint_filter: &Vec<String>,\n     ) -> Vec<ClippyWarning> {\n         // advance the atomic index by one\n         let index = target_dir_index.fetch_add(1, Ordering::SeqCst);\n@@ -288,9 +289,9 @@ impl Crate {\n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir\");\n \n         let mut args = if fix {\n-            vec![\"--fix\", \"--allow-no-vcs\", \"--\", \"--cap-lints=warn\"]\n+            vec![\"--fix\", \"--allow-no-vcs\", \"--\"]\n         } else {\n-            vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"]\n+            vec![\"--\", \"--message-format=json\", \"--\"]\n         };\n \n         if let Some(options) = &self.options {\n@@ -301,6 +302,13 @@ impl Crate {\n             args.extend(&[\"-Wclippy::pedantic\", \"-Wclippy::cargo\"])\n         }\n \n+        if lint_filter.is_empty() {\n+            args.push(\"--cap-lints=warn\");\n+        } else {\n+            args.push(\"--cap-lints=allow\");\n+            args.extend(lint_filter.iter().map(|filter| filter.as_str()))\n+        }\n+\n         let all_output = std::process::Command::new(&cargo_clippy_path)\n             // use the looping index to create individual target dirs\n             .env(\n@@ -360,14 +368,16 @@ impl Crate {\n \n #[derive(Debug)]\n struct LintcheckConfig {\n-    // max number of jobs to spawn (default 1)\n+    /// max number of jobs to spawn (default 1)\n     max_jobs: usize,\n-    // we read the sources to check from here\n+    /// we read the sources to check from here\n     sources_toml_path: PathBuf,\n-    // we save the clippy lint results here\n+    /// we save the clippy lint results here\n     lintcheck_results_path: PathBuf,\n-    // whether to just run --fix and not collect all the warnings\n+    /// whether to just run --fix and not collect all the warnings\n     fix: bool,\n+    /// A list of lint that this lintcheck run shound focus on\n+    lint_filter: Vec<String>,\n }\n \n impl LintcheckConfig {\n@@ -410,12 +420,26 @@ impl LintcheckConfig {\n             None => 1,\n         };\n         let fix: bool = clap_config.is_present(\"fix\");\n+        let lint_filter: Vec<String> = clap_config\n+            .values_of(\"filter\")\n+            .map(|iter| {\n+                iter.map(|lint_name| {\n+                    let mut filter = lint_name.replace('_', \"-\");\n+                    if !filter.starts_with(\"clippy::\") {\n+                        filter.insert_str(0, \"clippy::\");\n+                    }\n+                    filter\n+                })\n+                .collect()\n+            })\n+            .unwrap_or_default();\n \n         LintcheckConfig {\n             max_jobs,\n             sources_toml_path,\n             lintcheck_results_path,\n             fix,\n+            lint_filter,\n         }\n     }\n }\n@@ -682,6 +706,15 @@ pub fn main() {\n     let old_stats = read_stats_from_file(&config.lintcheck_results_path);\n \n     let counter = AtomicUsize::new(1);\n+    let lint_filter: Vec<String> = config\n+        .lint_filter\n+        .iter()\n+        .map(|filter| {\n+            let mut filter = filter.clone();\n+            filter.insert_str(0, \"--force-warn=\");\n+            filter\n+        })\n+        .collect();\n \n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n         // if we don't have the specified crate in the .toml, throw an error\n@@ -705,7 +738,9 @@ pub fn main() {\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .filter(|krate| krate.name == only_one_crate)\n-            .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1, config.fix))\n+            .flat_map(|krate| {\n+                krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1, config.fix, &lint_filter)\n+            })\n             .collect()\n     } else {\n         if config.max_jobs > 1 {\n@@ -729,7 +764,14 @@ pub fn main() {\n                 .into_par_iter()\n                 .map(|krate| krate.download_and_extract())\n                 .flat_map(|krate| {\n-                    krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates, config.fix)\n+                    krate.run_clippy_lints(\n+                        &cargo_clippy_path,\n+                        &counter,\n+                        num_cpus,\n+                        num_crates,\n+                        config.fix,\n+                        &lint_filter,\n+                    )\n                 })\n                 .collect()\n         } else {\n@@ -738,7 +780,9 @@ pub fn main() {\n             crates\n                 .into_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates, config.fix))\n+                .flat_map(|krate| {\n+                    krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates, config.fix, &lint_filter)\n+                })\n                 .collect()\n         }\n     };\n@@ -774,7 +818,7 @@ pub fn main() {\n     std::fs::create_dir_all(config.lintcheck_results_path.parent().unwrap()).unwrap();\n     write(&config.lintcheck_results_path, text).unwrap();\n \n-    print_stats(old_stats, new_stats);\n+    print_stats(old_stats, new_stats, &config.lint_filter);\n }\n \n /// read the previous stats from the lintcheck-log file\n@@ -807,7 +851,7 @@ fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n }\n \n /// print how lint counts changed between runs\n-fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, usize>) {\n+fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, usize>, lint_filter: &Vec<String>) {\n     let same_in_both_hashmaps = old_stats\n         .iter()\n         .filter(|(old_key, old_val)| new_stats.get::<&String>(&old_key) == Some(old_val))\n@@ -846,6 +890,7 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n     old_stats_deduped\n         .iter()\n         .filter(|(old_key, _)| new_stats_deduped.get::<&String>(&old_key).is_none())\n+        .filter(|(old_key, _)| lint_filter.is_empty() || lint_filter.contains(old_key))\n         .for_each(|(old_key, old_value)| {\n             println!(\"{} {} => 0\", old_key, old_value);\n         });\n@@ -904,6 +949,14 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .long(\"--fix\")\n                 .help(\"runs cargo clippy --fix and checks if all suggestions apply\"),\n         )\n+        .arg(\n+            Arg::with_name(\"filter\")\n+                .long(\"--filter\")\n+                .takes_value(true)\n+                .multiple(true)\n+                .value_name(\"clippy_lint_name\")\n+                .help(\"apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n+        )\n         .get_matches()\n }\n "}]}