{"sha": "2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDViM2FjZTY1NjI1OTdkN2QyNjhlYjdhMTBmYzZmMWRlZjJkMGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-29T03:28:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-01T03:31:15Z"}, "message": "optionally enforce local variable mutability", "tree": {"sha": "caa535fdeffef9f338b96ac9f40acec31e34ebe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa535fdeffef9f338b96ac9f40acec31e34ebe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "html_url": "https://github.com/rust-lang/rust/commit/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f231f3477c276c84b1335490c3942453095dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f231f3477c276c84b1335490c3942453095dad", "html_url": "https://github.com/rust-lang/rust/commit/99f231f3477c276c84b1335490c3942453095dad"}], "stats": {"total": 185, "additions": 112, "deletions": 73}, "files": [{"sha": "4aaabc667ba284223e24c6c869b36798578ddfa8", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -421,6 +421,7 @@ fn build_session_options(match: getopts::match,\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let warn_unused_imports = opt_present(match, \"warn-unused-imports\");\n+    let enforce_mut_vars = opt_present(match, \"enforce-mut-vars\");\n     let sopts: @session::options =\n         @{crate_type: crate_type,\n           static: static,\n@@ -444,7 +445,8 @@ fn build_session_options(match: getopts::match,\n           no_asm_comments: no_asm_comments,\n           monomorphize: monomorphize,\n           inline: inline,\n-          warn_unused_imports: warn_unused_imports};\n+          warn_unused_imports: warn_unused_imports,\n+          enforce_mut_vars: enforce_mut_vars};\n     ret sopts;\n }\n \n@@ -518,7 +520,8 @@ fn opts() -> [getopts::opt] {\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"no-asm-comments\"),\n-         optflag(\"warn-unused-imports\")];\n+         optflag(\"warn-unused-imports\"),\n+         optflag(\"enforce-mut-vars\")];\n }\n \n type output_filenames = @{out_filename: str, obj_filename:str};"}, {"sha": "ec2182d2929bc0b71adf6528ba08cf6316f11d8a", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -47,7 +47,8 @@ type options =\n      no_asm_comments: bool,\n      monomorphize: bool,\n      inline: bool,\n-     warn_unused_imports: bool};\n+     warn_unused_imports: bool,\n+     enforce_mut_vars: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "71ddbeb749bfe0815f1835d784225ae66f59f025", "filename": "src/comp/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -360,7 +360,7 @@ impl of tr for ast::def {\n           ast::def_native_mod(did) { ast::def_native_mod(did.tr(xcx)) }\n           ast::def_const(did) { ast::def_const(did.tr(xcx)) }\n           ast::def_arg(nid, m) { ast::def_arg(xcx.tr_id(nid), m) }\n-          ast::def_local(nid) { ast::def_local(xcx.tr_id(nid)) }\n+          ast::def_local(nid, b) { ast::def_local(xcx.tr_id(nid), b) }\n           ast::def_variant(e_did, v_did) {\n             ast::def_variant(e_did.tr(xcx), v_did.tr(xcx))\n           }"}, {"sha": "f95b9a2105f30021aeb5d8424ec248e42e7f5770", "filename": "src/comp/metadata/astencode_gen.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -1956,18 +1956,20 @@ fn serialize_114<S: std::serialization::serializer>(s: S,\n fn serialize_106<S: std::serialization::serializer>(s: S,\n                                                     v: syntax::ast::local_) {\n \n-    s.emit_rec(/*@syntax::ast::ty*//*@syntax::ast::pat*/\n+    s.emit_rec(/*bool*//*@syntax::ast::ty*//*@syntax::ast::pat*/\n                /*core::option::t<syntax::ast::initializer>*/\n                /*syntax::ast::node_id*/\n                {||\n                    {\n-                       s.emit_rec_field(\"ty\", 0u,\n+                       s.emit_rec_field(\"is_mutbl\", 0u,\n+                                        {|| serialize_18(s, v.is_mutbl) });\n+                       s.emit_rec_field(\"ty\", 1u,\n                                         {|| serialize_29(s, v.ty) });\n-                       s.emit_rec_field(\"pat\", 1u,\n+                       s.emit_rec_field(\"pat\", 2u,\n                                         {|| serialize_107(s, v.pat) });\n-                       s.emit_rec_field(\"init\", 2u,\n+                       s.emit_rec_field(\"init\", 3u,\n                                         {|| serialize_114(s, v.init) });\n-                       s.emit_rec_field(\"id\", 3u, {|| serialize_27(s, v.id) })\n+                       s.emit_rec_field(\"id\", 4u, {|| serialize_27(s, v.id) })\n                    }\n                });\n }\n@@ -5974,6 +5976,8 @@ fn deserialize_106<S: std::serialization::deserializer>(s: S) ->\n     s.read_rec(\n \n \n+               /*bool*/\n+\n                /*@syntax::ast::ty*/\n \n                /*@syntax::ast::pat*/\n@@ -5983,13 +5987,16 @@ fn deserialize_106<S: std::serialization::deserializer>(s: S) ->\n                /*syntax::ast::node_id*/\n \n                {||\n-                   {ty: s.read_rec_field(\"ty\", 0u, {|| deserialize_29(s) }),\n+                   {is_mutbl:\n+                        s.read_rec_field(\"is_mutbl\", 0u,\n+                                         {|| deserialize_18(s) }),\n+                    ty: s.read_rec_field(\"ty\", 1u, {|| deserialize_29(s) }),\n                     pat:\n-                        s.read_rec_field(\"pat\", 1u, {|| deserialize_107(s) }),\n+                        s.read_rec_field(\"pat\", 2u, {|| deserialize_107(s) }),\n                     init:\n-                        s.read_rec_field(\"init\", 2u,\n+                        s.read_rec_field(\"init\", 3u,\n                                          {|| deserialize_114(s) }),\n-                    id: s.read_rec_field(\"id\", 3u, {|| deserialize_27(s) }),}\n+                    id: s.read_rec_field(\"id\", 4u, {|| deserialize_27(s) }),}\n                })\n }\n /*syntax::ast::local*/\n@@ -8015,7 +8022,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::node_id*/\n                 /*syntax::ast::mode<syntax::ast::rmode>*/\n-                /*syntax::ast::node_id*/\n+                /*syntax::ast::node_id*//*bool*/\n                 /*syntax::ast::def_id*//*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::prim_ty*/\n@@ -8112,14 +8119,19 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 }\n                                             })\n                       }\n-                      syntax::ast::def_local(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::def_local\", 6u, 1u,\n+                      syntax::ast::def_local(v0, v1) {\n+                        s.emit_enum_variant(\"syntax::ast::def_local\", 6u, 2u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n                                                                                 serialize_27(s,\n                                                                                              v0)\n+                                                                            });\n+                                                    s.emit_enum_variant_arg(1u,\n+                                                                            {||\n+                                                                                serialize_18(s,\n+                                                                                             v1)\n                                                                             })\n                                                 }\n                                             })\n@@ -8378,7 +8390,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                 /*syntax::ast::node_id*/\n                 /*syntax::ast::mode<syntax::ast::rmode>*/\n \n-                /*syntax::ast::node_id*/\n+                /*syntax::ast::node_id*//*bool*/\n \n                 /*syntax::ast::def_id*//*syntax::ast::def_id*/\n \n@@ -8451,6 +8463,10 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                                 syntax::ast::def_local(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_27(s)\n+                                                                                               }),\n+                                                                       s.read_enum_variant_arg(1u,\n+                                                                                               {||\n+                                                                                                   deserialize_18(s)\n                                                                                                }))\n                                               }\n                                               7u {"}, {"sha": "cb0785b4df18f6b6bf96699074c61fe6ec2ab1d8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -255,7 +255,7 @@ fn check_call(cx: ctx, sc: scope, f: @ast::expr, args: [@ast::expr])\n     }\n     let f_may_close =\n         alt f.node {\n-          ast::expr_path(_) { def_is_local(cx.tcx.def_map.get(f.id)) }\n+          ast::expr_path(_) { def_is_local_or_self(cx.tcx.def_map.get(f.id)) }\n           _ { true }\n         };\n     if f_may_close {\n@@ -390,7 +390,7 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n fn check_var(cx: ctx, ex: @ast::expr, p: @ast::path, id: ast::node_id,\n              assign: bool, sc: scope) {\n     let def = cx.tcx.def_map.get(id);\n-    if !def_is_local(def) { ret; }\n+    if !def_is_local_or_self(def) { ret; }\n     let my_defnum = ast_util::def_id_of_def(def).node;\n     let my_local_id = local_id_of_node(cx, my_defnum);\n     let var_t = ty::expr_ty(cx.tcx, ex);\n@@ -539,9 +539,9 @@ fn ty_can_unsafely_include(cx: ctx, needle: unsafe_ty, haystack: ty::t,\n     ret helper(cx.tcx, needle, haystack, mutbl);\n }\n \n-fn def_is_local(d: ast::def) -> bool {\n+fn def_is_local_or_self(d: ast::def) -> bool {\n     alt d {\n-      ast::def_local(_) | ast::def_arg(_, _) | ast::def_binding(_) |\n+      ast::def_local(_, _) | ast::def_arg(_, _) | ast::def_binding(_) |\n       ast::def_upvar(_, _, _) | ast::def_self(_) { true }\n       _ { false }\n     }"}, {"sha": "12ffdfccb416a6a102df0e4ec795383febea4999", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -342,7 +342,7 @@ fn clear_in_current(cx: ctx, my_def: node_id, to: bool) {\n \n fn def_is_owned_local(cx: ctx, d: def) -> option<node_id> {\n     alt d {\n-      def_local(id) { some(id) }\n+      def_local(id, _) { some(id) }\n       def_arg(id, m) {\n         alt ty::resolved_mode(cx.tcx, m) {\n           by_copy | by_move { some(id) }"}, {"sha": "836b26314278da7e35126093f0feae4341e9bb22", "filename": "src/comp/middle/mutbl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmutbl.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -298,6 +298,15 @@ fn is_immutable_def(cx: @ctx, def: def) -> option<str> {\n           _ { some(\"upvar\") }\n         };\n       }\n+\n+      // Note: we should *always* allow all local variables to be assigned\n+      // here and then guarantee in the typestate pass that immutable local\n+      // variables are assigned at most once.  But this requires a new kind of\n+      // propagation (def. not assigned), so I didn't do that.\n+      def_local(_, false) if cx.tcx.sess.opts.enforce_mut_vars {\n+        some(\"immutable local variable\")\n+      }\n+\n       def_binding(_) { some(\"binding\") }\n       _ { none }\n     }"}, {"sha": "117641c9fe876c755f540ca173087f855561ff38", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -957,7 +957,7 @@ fn scope_closes(sc: scope) -> option<node_id> {\n \n fn def_is_local(d: def) -> bool {\n     alt d {\n-      ast::def_arg(_, _) | ast::def_local(_) | ast::def_binding(_) |\n+      ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_binding(_) |\n       ast::def_upvar(_, _, _) { true }\n       _ { false }\n     }\n@@ -1235,7 +1235,8 @@ fn lookup_in_block(e: env, name: ident, sp: span, b: ast::blk_, pos: uint,\n                                      && (i < pos || j < loc_pos) {\n                             alt lookup_in_pat(e, name, loc.node.pat) {\n                               some(nid) {\n-                                ret some(ast::def_local(nid));\n+                                ret some(ast::def_local(nid,\n+                                                        loc.node.is_mutbl));\n                               }\n                               _ { }\n                             }\n@@ -1702,7 +1703,7 @@ fn ns_for_def(d: def) -> namespace {\n     alt d {\n       ast::def_variant(_, _) { ns_val(definite_enum) }\n       ast::def_fn(_, _) | ast::def_self(_) |\n-      ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_) |\n+      ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_, _) |\n       ast::def_upvar(_, _, _) |  ast::def_self(_) |\n       ast::def_class_field(_,_) | ast::def_class_method(_,_)\n           { ns_val(value_or_enum) }"}, {"sha": "479def401fb90945e6e43d13c06f00065ab1d488", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -2253,7 +2253,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         assert (cx.fcx.llargs.contains_key(nid));\n         ret take_local(cx.fcx.llargs, nid);\n       }\n-      ast::def_local(nid) | ast::def_binding(nid) {\n+      ast::def_local(nid, _) | ast::def_binding(nid) {\n         assert (cx.fcx.lllocals.contains_key(nid));\n         ret take_local(cx.fcx.lllocals, nid);\n       }"}, {"sha": "11b1ef3366ec825d94854af6df17c152cbcd0f65", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -576,7 +576,7 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n     alt e.node {\n       expr_path(p) {\n         alt tcx.def_map.find(e.id) {\n-          some(def_local(nid)) | some(def_arg(nid, _)) |\n+          some(def_local(nid, _)) | some(def_arg(nid, _)) |\n           some(def_binding(nid)) | some(def_upvar(nid, _, _)) {\n             ret @respan(p.span,\n                         carg_ident({ident: p.node.idents[0], node: nid}));\n@@ -786,7 +786,7 @@ enum if_ty { if_check, plain_if, }\n fn local_node_id_to_def_id_strict(fcx: fn_ctxt, sp: span, i: node_id) ->\n    def_id {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(nid)) | some(def_arg(nid, _)) |\n+      some(def_local(nid, _)) | some(def_arg(nid, _)) |\n       some(def_upvar(nid, _, _)) {\n         ret local_def(nid);\n       }\n@@ -810,8 +810,8 @@ fn local_node_id_to_def(fcx: fn_ctxt, i: node_id) -> option<def> {\n \n fn local_node_id_to_def_id(fcx: fn_ctxt, i: node_id) -> option<def_id> {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(nid)) | some(def_arg(nid, _)) | some(def_binding(nid)) |\n-      some(def_upvar(nid, _, _)) {\n+      some(def_local(nid, _)) | some(def_arg(nid, _)) |\n+      some(def_binding(nid)) | some(def_upvar(nid, _, _)) {\n         some(local_def(nid))\n       }\n       _ { none }"}, {"sha": "6acb23d906aa851ae3d389ccc98c38892e929d80", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -185,7 +185,7 @@ fn clear_in_poststate_expr(fcx: fn_ctxt, e: @expr, t: poststate) {\n         alt vec::last(p.node.idents) {\n           some(i) {\n             alt local_node_id_to_def(fcx, e.id) {\n-              some(def_local(nid)) {\n+              some(def_local(nid, _)) {\n                 clear_in_poststate_(bit_num(fcx, ninit(nid, i)), t);\n               }\n               some(_) {/* ignore args (for now...) */ }"}, {"sha": "8a83f7dd7b4e7d589b4d7545f5b962e24fe686d2", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -176,7 +176,7 @@ fn gen_if_local(fcx: fn_ctxt, lhs: @expr, rhs: @expr, larger_id: node_id,\n     alt node_id_to_def(fcx.ccx, new_var) {\n       some(d) {\n         alt d {\n-          def_local(nid) {\n+          def_local(nid, _) {\n             find_pre_post_expr(fcx, rhs);\n             let p = expr_pp(fcx.ccx, rhs);\n             set_pre_and_post(fcx.ccx, larger_id, p.precondition,\n@@ -214,7 +214,7 @@ fn handle_update(fcx: fn_ctxt, parent: @expr, lhs: @expr, rhs: @expr,\n             // pure and assign_op require the lhs to be init'd\n             let df = node_id_to_def_strict(fcx.ccx.tcx, lhs.id);\n             alt df {\n-              def_local(nid) {\n+              def_local(nid, _) {\n                 let i = bit_num(fcx, ninit(nid, path_to_ident(p)));\n                 require_and_preserve(i, expr_pp(fcx.ccx, lhs));\n               }\n@@ -259,7 +259,7 @@ fn handle_var(fcx: fn_ctxt, rslt: pre_and_post, id: node_id, name: ident) {\n fn handle_var_def(fcx: fn_ctxt, rslt: pre_and_post, def: def, name: ident) {\n     log(debug, (\"handle_var_def: \", def, name));\n     alt def {\n-      def_local(nid) | def_arg(nid, _) {\n+      def_local(nid, _) | def_arg(nid, _) {\n         use_var(fcx, nid);\n         let i = bit_num(fcx, ninit(nid, name));\n         require_and_preserve(i, rslt);"}, {"sha": "bba7b4c4834598f7e34f86a6891b77d54cc93893", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -246,7 +246,7 @@ fn gen_if_local(fcx: fn_ctxt, p: poststate, e: @expr) -> bool {\n     alt e.node {\n       expr_path(pth) {\n         alt fcx.ccx.tcx.def_map.find(e.id) {\n-          some(def_local(nid)) {\n+          some(def_local(nid, _)) {\n             ret set_in_poststate_ident(fcx, nid, path_to_ident(pth), p);\n           }\n           _ { ret false; }"}, {"sha": "265f57174612ad4fa0f08f1c5221064449df841a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -101,7 +101,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};\n       }\n-      ast::def_local(nid) {\n+      ast::def_local(nid, _) {\n         assert (fcx.locals.contains_key(nid));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};"}, {"sha": "edc5ade406272e3e4c26debe35f6f3c235c31698", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -38,7 +38,7 @@ enum def {\n     def_native_mod(def_id),\n     def_const(def_id),\n     def_arg(node_id, mode),\n-    def_local(node_id),\n+    def_local(node_id, bool /* is_mutbl */),\n     def_variant(def_id /* enum */, def_id /* variant */),\n     def_ty(def_id),\n     def_prim_ty(prim_ty),\n@@ -194,7 +194,8 @@ enum init_op { init_assign, init_move, }\n type initializer = {op: init_op, expr: @expr};\n \n type local_ =  // FIXME: should really be a refinement on pat\n-    {ty: @ty, pat: @pat, init: option<initializer>, id: node_id};\n+    {is_mutbl: bool, ty: @ty, pat: @pat,\n+     init: option<initializer>, id: node_id};\n \n type local = spanned<local_>;\n "}, {"sha": "5f303b8c4a861f1969f9de98372176708f2400ba", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -41,7 +41,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_use(id) |\n       def_class(id) | def_class_field(_, id) | def_class_method(_, id) { id }\n \n-      def_self(id) | def_arg(id, _) | def_local(id) |\n+      def_self(id) | def_arg(id, _) | def_local(id, _) |\n       def_upvar(id, _, _) | def_binding(id) {\n         local_def(id)\n       }"}, {"sha": "94a0ff6b879491c96a0c8091682fe03e0b016a28", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -532,7 +532,8 @@ fn noop_fold_path(&&p: path_, fld: ast_fold) -> path_ {\n }\n \n fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {\n-    ret {ty: fld.fold_ty(l.ty),\n+    ret {is_mutbl: l.is_mutbl,\n+         ty: fld.fold_ty(l.ty),\n          pat: fld.fold_pat(l.pat),\n          init:\n              alt l.init {"}, {"sha": "5837baf1ff90ea1d409aa7f220b8d0eeccb52c8e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -1346,7 +1346,7 @@ fn parse_else_expr(p: parser) -> @ast::expr {\n \n fn parse_for_expr(p: parser) -> @ast::expr {\n     let lo = p.last_span.lo;\n-    let decl = parse_local(p, false);\n+    let decl = parse_local(p, false, false);\n     expect_word(p, \"in\");\n     let seq = parse_expr(p);\n     let body = parse_block_no_value(p);\n@@ -1568,24 +1568,24 @@ fn parse_pat(p: parser) -> @ast::pat {\n     ret @{id: p.get_id(), node: pat, span: ast_util::mk_sp(lo, hi)};\n }\n \n-fn parse_local(p: parser, allow_init: bool) -> @ast::local {\n+fn parse_local(p: parser, is_mutbl: bool,\n+               allow_init: bool) -> @ast::local {\n     let lo = p.span.lo;\n     let pat = parse_pat(p);\n     let ty = @spanned(lo, lo, ast::ty_infer);\n     if eat(p, token::COLON) { ty = parse_ty(p, false); }\n     let init = if allow_init { parse_initializer(p) } else { none };\n     ret @spanned(lo, p.last_span.hi,\n-                 {ty: ty, pat: pat, init: init, id: p.get_id()});\n+                 {is_mutbl: is_mutbl, ty: ty, pat: pat,\n+                  init: init, id: p.get_id()});\n }\n \n fn parse_let(p: parser) -> @ast::decl {\n-    if eat_word(p, \"mut\") {\n-        /* FIXME */\n-    }\n+    let is_mutbl = eat_word(p, \"mut\");\n     let lo = p.span.lo;\n-    let locals = [parse_local(p, true)];\n+    let locals = [parse_local(p, is_mutbl, true)];\n     while eat(p, token::COMMA) {\n-        locals += [parse_local(p, true)];\n+        locals += [parse_local(p, is_mutbl, true)];\n     }\n     ret @spanned(lo, p.last_span.hi, ast::decl_local(locals));\n }"}, {"sha": "601c73ae0a247f5bd74ff6577182ef209dcbce47", "filename": "src/etc/gen-astencode", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fetc%2Fgen-astencode", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Fetc%2Fgen-astencode", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgen-astencode?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -1,25 +1,26 @@\n #!/bin/sh\n \n+function msg {\n+        echo \"\"\n+        echo \"\"\n+        echo \"****************************************\"\n+        echo \"* Processing errors encountered        *\"\n+        echo \"*                                      *\"\n+        echo \"* Dummy versions of the AST encoder    *\"\n+        echo \"* have been left in astencode_gen.rs.  *\"\n+        echo \"* Fix the compilation errors and rerun *\"\n+        echo \"* this script to generate the real     *\"\n+        echo \"* versions.                            *\"\n+        echo \"****************************************\"\n+}\n+\n M=src/comp/metadata\n GEN_TYPES=\"syntax::ast::item syntax::ast::def middle::typeck::method_origin \\\n            middle::freevars::freevar_entry syntax::ast::def_id\"\n \n # Find serializer tool:\n for S in build/*/stage1/bin/serializer; do\n \n-    if [ ! -x \"$S\" ]; then\n-        echo \"serializer excutable not found; try 'make serializer'\"\n-        exit 1\n-    fi\n-\n-    # Find rustc:\n-    D=$(dirname \"$S\")\n-    R=\"${D}/../../stage0/bin/rustc\"\n-    if [ ! -x \"$R\" ]; then\n-        echo \"rustc not found or not executable at path '$R'\"\n-        exit 1\n-    fi\n-\n     echo \"Generating src/comp/metadata/astencode_gen.rs\"\n \n     # First, generate dummy fns so that the compiler can type\n@@ -33,20 +34,25 @@ for S in build/*/stage1/bin/serializer; do\n           >> $M/astencode_gen.rs\n     done\n \n+    # Find rustc and serializer:\n+    D=$(dirname \"$S\")\n+    R=\"${D}/../../stage0/bin/rustc\"\n+    if [ ! -x \"$R\" ]; then\n+        echo \"rustc not found or not executable at path '$R'\"\n+        msg\n+        exit 1\n+    fi\n+\n+    if [ ! -x \"$S\" ]; then\n+        echo \"serializer excutable not found; try 'make serializer'\"\n+        msg\n+        exit 1\n+    fi\n+\n     # Generate the real code into a temporary file.\n     if ! \"$S\" src/comp/rustc.rc $GEN_TYPES > tmp.$$.rs\n     then\n-        echo \"\"\n-        echo \"\"\n-        echo \"****************************************\"\n-        echo \"* Compilation errors encountered       *\"\n-        echo \"*                                      *\"\n-        echo \"* Dummy versions of the AST encoder    *\"\n-        echo \"* have been left in astencode_gen.rs.  *\"\n-        echo \"* Fix the compilation errors and rerun *\"\n-        echo \"* this script to generate the real     *\"\n-        echo \"* versions.                            *\"\n-        echo \"****************************************\"\n+        msg\n         rm tmp.$$.rs\n         exit 1\n     fi"}, {"sha": "227bb56841d0793c8eed8201ec10c85acd32aa0c", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "patch": "@@ -146,7 +146,8 @@ fn build_session() -> (session::session, @mutable bool) {\n         no_asm_comments: false,\n         monomorphize: false,\n         inline: false,\n-        warn_unused_imports: false\n+        warn_unused_imports: false,\n+        enforce_mut_vars: false\n     };\n \n     let codemap = codemap::new_codemap();"}]}