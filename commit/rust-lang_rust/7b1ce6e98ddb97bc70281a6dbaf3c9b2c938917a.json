{"sha": "7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMWNlNmU5OGRkYjk3YmM3MDI4MWE2ZGJhZjNjOWIyYzkzODkxN2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T10:18:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T10:18:33Z"}, "message": "Rollup merge of #71203 - csmoe:issue-71137, r=csmoe\n\nCorrect await span for async-await error reporting\n\nCloses #71137\nr? @tmandry", "tree": {"sha": "d62ffa1fcbeeffba035df435ea228f2c5918a18d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62ffa1fcbeeffba035df435ea228f2c5918a18d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoBn5CRBK7hj4Ov3rIwAAdHIIABrASo8e37LBDPUBFhZbmHiB\nu+sXxzXhvXaJ+8khJcO+aa4i+ogUkL6YYJocA+lkef4ZW8I57/cguF+yoRwNoW2Z\npPpbWZFDyiJXiFz3G55eJzEpAfBkDCA24oL/nEQFV+ROxovNl7XnRqr4Gnvh7HE0\na/PPXmvioVm0KTjXXuP5wGqmL9SreT/+O1LJ0doxa2VSRE5uflHbwVApIHbALsei\nuFwT3AEPCuMqIt5+WxPYajlqaziYP6/KzwRiKnVKlZ89wKZ/4rZlDAdOCa0Lofbq\nLN8aSkKxEl/i36BbrZGgD/wsLBxnOmfgCkljlmKBIUYO1GoXXGNvZ6VparAsdHI=\n=ZE5V\n-----END PGP SIGNATURE-----\n", "payload": "tree d62ffa1fcbeeffba035df435ea228f2c5918a18d\nparent 707004c55228d155646014f705f6f77d3887fb29\nparent 00d12ef9016f2eab194488ac7d51567175eddebc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587550713 +0200\ncommitter GitHub <noreply@github.com> 1587550713 +0200\n\nRollup merge of #71203 - csmoe:issue-71137, r=csmoe\n\nCorrect await span for async-await error reporting\n\nCloses #71137\nr? @tmandry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "html_url": "https://github.com/rust-lang/rust/commit/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "707004c55228d155646014f705f6f77d3887fb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/707004c55228d155646014f705f6f77d3887fb29", "html_url": "https://github.com/rust-lang/rust/commit/707004c55228d155646014f705f6f77d3887fb29"}, {"sha": "00d12ef9016f2eab194488ac7d51567175eddebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d12ef9016f2eab194488ac7d51567175eddebc", "html_url": "https://github.com/rust-lang/rust/commit/00d12ef9016f2eab194488ac7d51567175eddebc"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "9a23f8813fe93c6df7ec3095855873d2512a5113", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "patch": "@@ -298,14 +298,14 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// ```ignore (pseudo-Rust)\n /// async move {\n-///     let x: T = ...;\n+///     let x: T = expr;\n ///     foo.await\n ///     ...\n /// }\n /// ```\n ///\n-/// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n-/// the scope that contains `x`.\n+/// Here, we would store the type `T`, the span of the value `x`, the \"scope-span\" for\n+/// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.\n #[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n@@ -314,6 +314,8 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n+    /// Span of `.await` or `yield` expression.\n+    pub yield_span: Span,\n     /// Expr which the type evaluated from.\n     pub expr: Option<hir::HirId>,\n }"}, {"sha": "e579393434e003d71b41c7da81672b066f745ff0", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "patch": "@@ -125,6 +125,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        await_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1289,20 +1290,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         ty_matches(ty)\n                     })\n                     .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, expr, .. } = cause;\n-                (span, source_map.span_to_snippet(*span), scope_span, expr, from_awaited_ty)\n+                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n+                    cause;\n+                (\n+                    span,\n+                    source_map.span_to_snippet(*span),\n+                    scope_span,\n+                    yield_span,\n+                    expr,\n+                    from_awaited_ty,\n+                )\n             });\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n                 generator_interior_types={:?} target_span={:?}\",\n             target_ty, tables.generator_interior_types, target_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span, expr, from_awaited_ty)) = target_span {\n+        if let Some((target_span, Ok(snippet), scope_span, yield_span, expr, from_awaited_ty)) =\n+            target_span\n+        {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n+                *yield_span,\n                 *expr,\n                 snippet,\n                 generator_body,\n@@ -1327,6 +1339,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        yield_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1418,10 +1431,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n                 tables.generator_interior_types\n             );\n-            let await_span = tables.generator_interior_types.iter().map(|t| t.span).last().unwrap();\n-            let mut span = MultiSpan::from_span(await_span);\n+            let mut span = MultiSpan::from_span(yield_span);\n             span.push_span_label(\n-                await_span,\n+                yield_span,\n                 format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n             );\n "}, {"sha": "ce376a08ea60486ddf2c8f60705e9e2ad3b16f64", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "patch": "@@ -96,6 +96,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n+                        yield_span: yield_data.span,\n                         expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);"}, {"sha": "ebb392a45308e85bb34c7c84ab5adc4ba8345e87", "filename": "src/test/ui/async-await/issue-71137.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs?ref=7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+use std::future::Future;\n+use std::sync::Mutex;\n+\n+fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+\n+async fn wrong_mutex() {\n+  let m = Mutex::new(1);\n+  {\n+    let mut guard = m.lock().unwrap();\n+    (async { \"right\"; }).await;\n+    *guard += 1;\n+  }\n+\n+  (async { \"wrong\"; }).await;\n+}\n+\n+fn main() {\n+  fake_spawn(wrong_mutex()); //~ Error future cannot be sent between threads safely\n+}"}, {"sha": "788a9bc2c7e47a2e902e4ec650f247c2b2e5c82f", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=7b1ce6e98ddb97bc70281a6dbaf3c9b2c938917a", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-71137.rs:20:3\n+   |\n+LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+   |                           ---- required by this bound in `fake_spawn`\n+...\n+LL |   fake_spawn(wrong_mutex());\n+   |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, i32>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-71137.rs:12:5\n+   |\n+LL |     let mut guard = m.lock().unwrap();\n+   |         --------- has type `std::sync::MutexGuard<'_, i32>` which is not `Send`\n+LL |     (async { \"right\"; }).await;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n+LL |     *guard += 1;\n+LL |   }\n+   |   - `mut guard` is later dropped here\n+\n+error: aborting due to previous error\n+"}]}