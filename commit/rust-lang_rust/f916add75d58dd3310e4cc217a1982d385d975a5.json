{"sha": "f916add75d58dd3310e4cc217a1982d385d975a5", "node_id": "C_kwDOAAsO6NoAKGY5MTZhZGQ3NWQ1OGRkMzMxMGU0Y2MyMTdhMTk4MmQzODVkOTc1YTU", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2023-04-23T00:55:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-23T00:55:38Z"}, "message": "Don't use direct field access in `Simd` functions (rust-lang/portable-simd#339)\n\nAlso see: https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/splat.20no.20longer.20compiles.20for.20release.20builds", "tree": {"sha": "2fa33b9ae0b4655b6213ab75c69838fa8b43d98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa33b9ae0b4655b6213ab75c69838fa8b43d98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f916add75d58dd3310e4cc217a1982d385d975a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRIIKCRBK7hj4Ov3rIwAAvaIIAJgyIgmi7y88da1oyxUeGiY/\nfvpcvZyW7aLiSjYE1pgZm4T6kflYi8qShJ7KI7/jJGkNUqajRkOIkTMNzYMKcAtv\nEIQfrAJMwxoNZp1u7vwIcPnJ453F3GXcZgVq/z6ZHwslOzpGd6wShJm0CHSZB8ov\nv5mgOpm5MJO8HIsNjb9ZPuewUWpzMESR3yF4OPzuIprEjrTCJnG5qH4KuQ/935ba\ngg8nGDnATVHfNA6LggrjHcHjbuEPXNTibSMHzo/XG6DKUsnJoqwjq1eFbIRGo5x5\n4PsW4Jfnoxsw/8FANwaIAtQLsR+CrCFVR0i/0on1aQSCfMBAYMUYZzbOtJpjBTU=\n=m/gk\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fa33b9ae0b4655b6213ab75c69838fa8b43d98c\nparent ceb26115928c5c69b10268fd2f9e500865c142d6\nparent f1b86baf8453733c72e196ce2c08b4d85e94d81a\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1682211338 -0700\ncommitter GitHub <noreply@github.com> 1682211338 -0700\n\nDon't use direct field access in `Simd` functions (rust-lang/portable-simd#339)\n\nAlso see: https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/splat.20no.20longer.20compiles.20for.20release.20builds"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f916add75d58dd3310e4cc217a1982d385d975a5", "html_url": "https://github.com/rust-lang/rust/commit/f916add75d58dd3310e4cc217a1982d385d975a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f916add75d58dd3310e4cc217a1982d385d975a5/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb26115928c5c69b10268fd2f9e500865c142d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb26115928c5c69b10268fd2f9e500865c142d6", "html_url": "https://github.com/rust-lang/rust/commit/ceb26115928c5c69b10268fd2f9e500865c142d6"}, {"sha": "f1b86baf8453733c72e196ce2c08b4d85e94d81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b86baf8453733c72e196ce2c08b4d85e94d81a", "html_url": "https://github.com/rust-lang/rust/commit/f1b86baf8453733c72e196ce2c08b4d85e94d81a"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "e054d483ca5d22768a7e8ad06a0f7dc8c6766353", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f916add75d58dd3310e4cc217a1982d385d975a5/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f916add75d58dd3310e4cc217a1982d385d975a5/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=f916add75d58dd3310e4cc217a1982d385d975a5", "patch": "@@ -1,6 +1,7 @@\n #![no_std]\n #![feature(\n     const_ptr_read,\n+    const_refs_to_cell,\n     convert_float_to_int,\n     decl_macro,\n     intra_doc_pointers,"}, {"sha": "a38d701588ce05693a28ac4954b238cdf758743c", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f916add75d58dd3310e4cc217a1982d385d975a5/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f916add75d58dd3310e4cc217a1982d385d975a5/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=f916add75d58dd3310e4cc217a1982d385d975a5", "patch": "@@ -76,6 +76,11 @@ use crate::simd::{\n /// [`read`]: pointer::read\n /// [`write`]: pointer::write\n /// [as_simd]: slice::as_simd\n+//\n+// NOTE: Accessing the inner array directly in any way (e.g. by using the `.0` field syntax) or\n+// directly constructing an instance of the type (i.e. `let vector = Simd(array)`) should be\n+// avoided, as it will likely become illegal on `#[repr(simd)]` structs in the future. It also\n+// causes rustc to emit illegal LLVM IR in some cases.\n #[repr(simd)]\n pub struct Simd<T, const LANES: usize>([T; LANES])\n where\n@@ -135,22 +140,54 @@ where\n     /// assert_eq!(v.as_array(), &[0, 1, 2, 3]);\n     /// ```\n     pub const fn as_array(&self) -> &[T; LANES] {\n-        &self.0\n+        // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n+        // is always valid and `Simd<T, LANES>` never has a lower alignment\n+        // than `[T; LANES]`.\n+        //\n+        // NOTE: This deliberately doesn't just use `&self.0`, see the comment\n+        // on the struct definition for details.\n+        unsafe { &*(self as *const Self as *const [T; LANES]) }\n     }\n \n     /// Returns a mutable array reference containing the entire SIMD vector.\n     pub fn as_mut_array(&mut self) -> &mut [T; LANES] {\n-        &mut self.0\n+        // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n+        // is always valid and `Simd<T, LANES>` never has a lower alignment\n+        // than `[T; LANES]`.\n+        //\n+        // NOTE: This deliberately doesn't just use `&mut self.0`, see the comment\n+        // on the struct definition for details.\n+        unsafe { &mut *(self as *mut Self as *mut [T; LANES]) }\n     }\n \n     /// Converts an array to a SIMD vector.\n     pub const fn from_array(array: [T; LANES]) -> Self {\n-        Self(array)\n+        // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n+        // is always valid. We need to use `read_unaligned` here, since\n+        // the array may have a lower alignment than the vector.\n+        //\n+        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n+        // it results in better codegen with optimizations disabled, but we should\n+        // probably just use `transmute` once that works on const generic types.\n+        //\n+        // NOTE: This deliberately doesn't just use `Self(array)`, see the comment\n+        // on the struct definition for details.\n+        unsafe { (&array as *const [T; LANES] as *const Self).read_unaligned() }\n     }\n \n     /// Converts a SIMD vector to an array.\n     pub const fn to_array(self) -> [T; LANES] {\n-        self.0\n+        // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n+        // is always valid. No need to use `read_unaligned` here, since\n+        // the vector never has a lower alignment than the array.\n+        //\n+        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n+        // it results in better codegen with optimizations disabled, but we should\n+        // probably just use `transmute` once that works on const generic types.\n+        //\n+        // NOTE: This deliberately doesn't just use `self.0`, see the comment\n+        // on the struct definition for details.\n+        unsafe { (&self as *const Self as *const [T; LANES]).read() }\n     }\n \n     /// Converts a slice to a SIMD vector containing `slice[..LANES]`.\n@@ -735,7 +772,7 @@ where\n {\n     #[inline]\n     fn as_ref(&self) -> &[T; LANES] {\n-        &self.0\n+        self.as_array()\n     }\n }\n \n@@ -746,7 +783,7 @@ where\n {\n     #[inline]\n     fn as_mut(&mut self) -> &mut [T; LANES] {\n-        &mut self.0\n+        self.as_mut_array()\n     }\n }\n \n@@ -758,7 +795,7 @@ where\n {\n     #[inline]\n     fn as_ref(&self) -> &[T] {\n-        &self.0\n+        self.as_array()\n     }\n }\n \n@@ -769,7 +806,7 @@ where\n {\n     #[inline]\n     fn as_mut(&mut self) -> &mut [T] {\n-        &mut self.0\n+        self.as_mut_array()\n     }\n }\n "}]}