{"sha": "61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmMxMmQwZDBkMWI4YWNiNzQ3MmJmYzYyMjM4ODJiMzJhY2QzZDI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T16:10:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-25T19:15:11Z"}, "message": "Partial implementation of resources\n\nNon-copyability is not enforced yet, and something is still flaky with\ndropping of the internal value, so don't actually use them yet. I'm\nmerging this in so that I don't have to keep merging against new\npatches.", "tree": {"sha": "f608c6036509602785bf35a7f879bf15560d4d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f608c6036509602785bf35a7f879bf15560d4d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "html_url": "https://github.com/rust-lang/rust/commit/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781a265b88f7fc3c8c406b327e8a548e742d6224", "url": "https://api.github.com/repos/rust-lang/rust/commits/781a265b88f7fc3c8c406b327e8a548e742d6224", "html_url": "https://github.com/rust-lang/rust/commit/781a265b88f7fc3c8c406b327e8a548e742d6224"}], "stats": {"total": 215, "additions": 198, "deletions": 17}, "files": [{"sha": "bfe7d576cfd64a7c39788e76988249dfa9ce9f0d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -335,7 +335,7 @@ tag ty_ {\n      /* bot represents the value of functions that don't return a value\n         locally to their context. in contrast, things like log that do\n         return, but don't return a meaningful value, have result type nil. */\n-     ty_bool;\n+    ty_bool;\n     ty_int;\n     ty_uint;\n     ty_float;\n@@ -478,7 +478,7 @@ type attribute_ = rec(attr_style style, meta_item value);\n \n type item = rec(ident ident,\n                 vec[attribute] attrs,\n-                node_id id, // For objs, this is the type's def_id\n+                node_id id, // For objs and resources, this is the type def_id\n                 item_ node,\n                 span span);\n \n@@ -490,6 +490,8 @@ tag item_ {\n     item_ty(@ty, vec[ty_param]);\n     item_tag(vec[variant], vec[ty_param]);\n     item_obj(_obj, vec[ty_param], node_id /* constructor id */);\n+    item_res(_fn /* dtor */, node_id /* dtor id */,\n+             vec[ty_param], node_id /* ctor id */);\n }\n \n type native_item = rec(ident ident,"}, {"sha": "e6e48c78df7244eaa3597d074e628a08aa58d647", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -281,6 +281,11 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n             st.pos += 1u;\n             ret ty::mk_obj(st.tcx, methods);\n         }\n+        case ('r') {\n+            auto def = parse_def(st, sd);\n+            auto inner = parse_ty(st, sd);\n+            ret ty::mk_res(st.tcx, def, inner);\n+        }\n         case ('X') { ret ty::mk_var(st.tcx, parse_int(st)); }\n         case ('E') { ret ty::mk_native(st.tcx); }\n         case ('Y') { ret ty::mk_type(st.tcx); }"}, {"sha": "a39b6885583ad179c44fa1d4c9e5810eca363372", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -139,6 +139,7 @@ fn bad_expr_word_table() -> hashmap[str, ()] {\n     words.insert(\"be\", ());\n     words.insert(\"fail\", ());\n     words.insert(\"type\", ());\n+    words.insert(\"res\", ());\n     words.insert(\"check\", ());\n     words.insert(\"assert\", ());\n     words.insert(\"claim\", ());\n@@ -1656,7 +1657,6 @@ fn parse_ty_params(&parser p) -> vec[ast::ty_param] {\n }\n \n fn parse_fn_decl(&parser p, ast::purity purity) -> ast::fn_decl {\n-    auto pf = parse_arg;\n     let util::common::spanned[vec[ast::arg]] inputs =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA), parse_arg,\n                   p);\n@@ -1765,10 +1765,9 @@ fn parse_item_obj(&parser p, ast::layer lyr, vec[ast::attribute] attrs) ->\n     auto lo = p.get_last_lo_pos();\n     auto ident = parse_value_ident(p);\n     auto ty_params = parse_ty_params(p);\n-    auto pf = parse_obj_field;\n     let util::common::spanned[vec[ast::obj_field]] fields =\n         parse_seq[ast::obj_field](token::LPAREN, token::RPAREN,\n-                                  some(token::COMMA), pf, p);\n+                                  some(token::COMMA), parse_obj_field, p);\n     let vec[@ast::method] meths = [];\n     let option::t[@ast::method] dtor = none;\n     expect(p, token::LBRACE);\n@@ -1784,6 +1783,27 @@ fn parse_item_obj(&parser p, ast::layer lyr, vec[ast::attribute] attrs) ->\n                                                 p.get_id()), attrs);\n }\n \n+fn parse_item_res(&parser p, ast::layer lyr, vec[ast::attribute] attrs) ->\n+   @ast::item {\n+    auto lo = p.get_last_lo_pos();\n+    auto ident = parse_value_ident(p);\n+    auto ty_params = parse_ty_params(p);\n+    expect(p, token::LPAREN);\n+    auto t = parse_ty(p);\n+    auto arg_ident = parse_value_ident(p);\n+    expect(p, token::RPAREN);\n+    auto dtor = parse_block(p);\n+    auto decl = rec(inputs=[rec(mode=ast::alias(false), ty=t, ident=arg_ident,\n+                                id=p.get_id())],\n+                    output=@spanned(lo, lo, ast::ty_nil),\n+                    purity=ast::impure_fn,\n+                    cf=ast::return,\n+                    constraints=[]);\n+    auto f = rec(decl=decl, proto=ast::proto_fn, body=dtor);\n+    ret mk_item(p, lo, dtor.span.hi, ident,\n+                ast::item_res(f, p.get_id(), ty_params, p.get_id()), attrs);\n+}\n+\n fn parse_mod_items(&parser p, token::token term,\n                    vec[ast::attribute] first_item_attrs) -> ast::_mod {\n     auto view_items = if (vec::len(first_item_attrs) == 0u) {\n@@ -2028,6 +2048,8 @@ fn parse_item(&parser p, vec[ast::attribute] attrs) -> parsed_item {\n         ret got_item(parse_item_tag(p, attrs));\n     } else if (eat_word(p, \"obj\")) {\n         ret got_item(parse_item_obj(p, lyr, attrs));\n+    } else if (eat_word(p, \"res\")) {\n+        ret got_item(parse_item_res(p, lyr, attrs));\n     } else { ret no_item; }\n }\n "}, {"sha": "ae59a208fa3eadc9634440fea408ce48166aab5c", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -231,6 +231,12 @@ mod encode {\n                 }\n                 w.write_char(']');\n             }\n+            case (ty::ty_res(?def, ?ty)) {\n+                w.write_char('r');\n+                w.write_str(cx.ds(def));\n+                w.write_char('|');\n+                enc_ty(w, cx, ty);\n+            }\n             case (ty::ty_var(?id)) {\n                 w.write_char('X');\n                 w.write_str(common::istr(id));\n@@ -393,6 +399,18 @@ fn encode_module_item_paths(&ebml::writer ebml_w, &_mod module,\n                 encode_def_id(ebml_w, local_def(it.id));\n                 ebml::end_tag(ebml_w);\n             }\n+            case (item_res(_, _, ?tps, ?ctor_id)) {\n+                add_to_index(ebml_w, path, index, it.ident);\n+                ebml::start_tag(ebml_w, tag_paths_data_item);\n+                encode_name(ebml_w, it.ident);\n+                encode_def_id(ebml_w, local_def(ctor_id));\n+                ebml::end_tag(ebml_w);\n+                add_to_index(ebml_w, path, index, it.ident);\n+                ebml::start_tag(ebml_w, tag_paths_data_item);\n+                encode_name(ebml_w, it.ident);\n+                encode_def_id(ebml_w, local_def(it.id));\n+                ebml::end_tag(ebml_w);\n+            }\n             case (item_tag(?variants, ?tps)) {\n                 add_to_index(ebml_w, path, index, it.ident);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n@@ -553,6 +571,23 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n             encode_tag_variant_info(cx, ebml_w, item.id, variants, index,\n                                     tps);\n         }\n+        case (item_res(_, _, ?tps, ?ctor_id)) {\n+            ebml::start_tag(ebml_w, tag_items_data_item);\n+            encode_def_id(ebml_w, local_def(ctor_id));\n+            encode_kind(ebml_w, 'f' as u8);\n+            encode_type_param_count(ebml_w, tps);\n+            auto fn_ty = trans::node_id_type(cx, item.id);\n+            encode_type(cx, ebml_w, fn_ty);\n+            encode_symbol(cx, ebml_w, ctor_id);\n+            ebml::end_tag(ebml_w);\n+            index += [tup(item.id, ebml_w.writer.tell())];\n+            ebml::start_tag(ebml_w, tag_items_data_item);\n+            encode_def_id(ebml_w, local_def(item.id));\n+            encode_kind(ebml_w, 'y' as u8);\n+            encode_type_param_count(ebml_w, tps);\n+            encode_type(cx, ebml_w, ty::ty_fn_ret(cx.tcx, fn_ty));\n+            ebml::end_tag(ebml_w);\n+        }\n         case (item_obj(_, ?tps, ?ctor_id)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(ctor_id));"}, {"sha": "b9f6c604996047eefb3826bda913e15b66b5311a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -819,6 +819,14 @@ fn found_def_item(&@ast::item i, namespace ns) -> option::t[def] {\n                 ret some(ast::def_ty(local_def(i.id)));\n             }\n         }\n+        case (ast::item_res(_, _, _, ?ctor_id)) {\n+            alt (ns) {\n+                case (ns_value) { ret some(ast::def_fn(local_def(ctor_id),\n+                                                       ast::impure_fn)); }\n+                case (ns_type) { ret some(ast::def_ty(local_def(i.id))); }\n+                case (_) { }\n+            }\n+        }\n         case (ast::item_tag(_, _)) {\n             if (ns == ns_type) {\n                 ret some(ast::def_ty(local_def(i.id)));\n@@ -1085,6 +1093,9 @@ fn index_mod(&ast::_mod md) -> mod_index {\n             case (ast::item_ty(_, _)) {\n                 add_to_index(index, it.ident, mie_item(it));\n             }\n+            case (ast::item_res(_, _, _, _)) {\n+                add_to_index(index, it.ident, mie_item(it));\n+            }\n             case (ast::item_tag(?variants, _)) {\n                 add_to_index(index, it.ident, mie_item(it));\n                 let uint variant_idx = 0u;\n@@ -1282,6 +1293,10 @@ fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n                             case (ast::item_ty(_, _)) {\n                                 add_name(types, it.span, it.ident);\n                             }\n+                            case (ast::item_res(_, _, _, _)) {\n+                                add_name(types, it.span, it.ident);\n+                                add_name(values, it.span, it.ident);\n+                            }\n                             case (ast::item_obj(_, _, _)) {\n                                 add_name(types, it.span, it.ident);\n                                 add_name(values, it.span, it.ident);"}, {"sha": "3a67296e86de5af39355ed9e463d2204aba757b0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -881,6 +881,9 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n             abs_pair = llvm::LLVMResolveTypeHandle(th.llth);\n             llty = abs_pair;\n         }\n+        case (ty::ty_res(_, ?sub)) {\n+            ret type_of_inner(cx, sp, sub);\n+        }\n         case (ty::ty_var(_)) {\n             cx.tcx.sess.span_fatal(sp, \"trans::type_of called on ty_var\");\n         }\n@@ -1217,6 +1220,7 @@ fn simplify_type(&@crate_ctxt ccx, &ty::t typ) -> ty::t {\n                                     ty::mk_imm_box(ccx.tcx,\n                                                    ty::mk_nil(ccx.tcx))]);\n             }\n+            case (ty::ty_res(_, ?sub)) { ret simplify_type(ccx, sub);}\n             case (_) { ret typ; }\n         }\n     }\n@@ -2064,7 +2068,7 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n         case (ty::ty_vec(_)) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n         case (ty::ty_ivec(?tm)) {\n             auto v1;\n-            if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, tm.ty)) {\n+            if (ty::type_has_dynamic_size(ccx.tcx, tm.ty)) {\n                 v1 = cx.build.PointerCast(v0, T_ptr(T_opaque_ivec()));\n             } else {\n                 v1 = v0;\n@@ -2082,6 +2086,18 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n                 cx.build.GEP(v0, [C_int(0), C_int(abi::obj_field_box)]);\n             decr_refcnt_maybe_free(cx, box_cell, v0, t)\n         }\n+        case (ty::ty_res(?did, ?inner)) {\n+            auto dtor = alt (ccx.ast_map.get(did._1)) {\n+                case (ast_map::node_item(?i)) {\n+                    alt (i.node) {\n+                        case (ast::item_res(?dtor, _, _, _)) { dtor }\n+                    }\n+                }\n+            };\n+            cx.fcx.llargs.insert(dtor.decl.inputs.(0).id, v0);\n+            auto rs = trans_block(cx, dtor.body, return);\n+            drop_ty(rs.bcx, v0, inner)\n+        }\n         case (ty::ty_fn(_, _, _, _, _)) {\n             auto box_cell =\n                 cx.build.GEP(v0, [C_int(0), C_int(abi::fn_field_box)]);\n@@ -2549,6 +2565,10 @@ fn iter_structural_ty_full(&@block_ctxt cx, ValueRef av, ValueRef bv,\n                 i += 1;\n             }\n         }\n+        case (ty::ty_res(_, ?inner)) {\n+            f(r.bcx, load_if_immediate(r.bcx, av, inner),\n+              load_if_immediate(r.bcx, bv, inner), inner);\n+        }\n         case (ty::ty_tag(?tid, ?tps)) {\n             auto variants = ty::tag_variants(cx.fcx.lcx.ccx.tcx, tid);\n             auto n_variants = vec::len[ty::variant_info](variants);\n@@ -4633,12 +4653,10 @@ fn lval_generic_fn(&@block_ctxt cx, &ty::ty_param_count_and_ty tpt,\n     auto lv;\n     if (cx.fcx.lcx.ccx.sess.get_targ_crate_num() == fn_id._0) {\n         // Internal reference.\n-\n         assert (cx.fcx.lcx.ccx.fn_pairs.contains_key(fn_id._1));\n         lv = lval_val(cx, cx.fcx.lcx.ccx.fn_pairs.get(fn_id._1));\n     } else {\n         // External reference.\n-\n         lv = trans_external_path(cx, fn_id, tpt);\n     }\n     auto tys = ty::node_id_to_type_params(cx.fcx.lcx.ccx.tcx, id);\n@@ -7621,6 +7639,26 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::node_id ctor_id,\n     finish_fn(fcx, lltop);\n }\n \n+fn trans_res(@local_ctxt cx, &span sp, &ast::_fn f, ast::node_id ctor_id,\n+             &vec[ast::ty_param] ty_params) {\n+    auto llctor_decl = cx.ccx.item_ids.get(ctor_id);\n+    auto fcx = new_fn_ctxt(cx, sp, llctor_decl);\n+    auto ret_ty = ty::ret_ty_of_fn(cx.ccx.tcx, ctor_id);\n+    create_llargs_for_fn_args(fcx, ast::proto_fn, none[ty_self_pair],\n+                              ret_ty, f.decl.inputs, ty_params);\n+    auto bcx = new_top_block_ctxt(fcx);\n+    auto lltop = bcx.llbb;\n+    auto self_ty = ty::ret_ty_of_fn(cx.ccx.tcx, ctor_id);\n+    auto llself_ty = type_of(cx.ccx, sp, self_ty);\n+    auto arg_ty = arg_tys_of_fn(cx.ccx, ctor_id).(0).ty;\n+    auto arg = load_if_immediate\n+        (bcx, fcx.llargs.get(f.decl.inputs.(0).id), arg_ty);\n+    bcx = copy_val(bcx, INIT, fcx.llretptr, arg, arg_ty).bcx;\n+    bcx.build.RetVoid();\n+    finish_fn(fcx, lltop);\n+}\n+\n+\n fn trans_tag_variant(@local_ctxt cx, ast::node_id tag_id,\n                      &ast::variant variant, int index,\n                      &vec[ast::ty_param] ty_params) {\n@@ -7729,6 +7767,9 @@ fn trans_item(@local_ctxt cx, &ast::item item) {\n                      with *extend_path(cx, item.ident));\n             trans_obj(sub_cx, item.span, ob, ctor_id, tps);\n         }\n+        case (ast::item_res(?decl, _, ?tps, ?ctor_id)) {\n+            trans_res(cx, item.span, decl, ctor_id, tps);\n+        }\n         case (ast::item_mod(?m)) {\n             auto sub_cx =\n                 @rec(path=cx.path + [item.ident],\n@@ -8062,6 +8103,9 @@ fn collect_item_2(&@crate_ctxt ccx, &@ast::item i, &vec[str] pt,\n                 ccx.obj_methods.insert(m.node.id, ());\n             }\n         }\n+        case (ast::item_res(?decl, _, ?tps, ?ctor_id)) {\n+            decl_fn_and_pair(ccx, i.span, new_pt, \"res_ctor\", tps, ctor_id);\n+        }\n         case (_) { }\n     }\n }"}, {"sha": "e5eaadbb2838fe7836a642eb3bdec5db8a7490f0", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -119,7 +119,7 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) {\n                     ccx=ccx);\n             find_pre_post_expr(fake_fcx, e);\n         }\n-        case (item_fn(?f, ?ps)) {\n+        case (item_fn(?f, _)) {\n             assert (ccx.fm.contains_key(i.id));\n             auto fcx =\n                 rec(enclosing=ccx.fm.get(i.id),\n@@ -132,6 +132,13 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) {\n         case (item_native_mod(?nm)) { find_pre_post_native_mod(nm); }\n         case (item_ty(_, _)) { ret; }\n         case (item_tag(_, _)) { ret; }\n+        case (item_res(?dtor, ?dtor_id, _, _)) {\n+            auto fcx = rec(enclosing=ccx.fm.get(dtor_id),\n+                           id=dtor_id,\n+                           name=i.ident,\n+                           ccx=ccx);\n+            find_pre_post_fn(fcx, dtor);\n+        }\n         case (item_obj(?o, _, _)) { find_pre_post_obj(ccx, o); }\n     }\n }"}, {"sha": "0d5948eed6a7c059449787cf5e4a00a23619fb5d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -78,6 +78,7 @@ export mk_native;\n export mk_native_fn;\n export mk_nil;\n export mk_obj;\n+export mk_res;\n export mk_param;\n export mk_port;\n export mk_ptr;\n@@ -134,6 +135,7 @@ export ty_machine;\n export ty_native;\n export ty_nil;\n export ty_obj;\n+export ty_res;\n export ty_param;\n export ty_port;\n export ty_ptr;\n@@ -263,14 +265,12 @@ tag sty {\n     ty_fn(ast::proto, vec[arg], t, controlflow, vec[@constr_def]);\n     ty_native_fn(ast::native_abi, vec[arg], t);\n     ty_obj(vec[method]);\n+    ty_res(def_id, t);\n     ty_var(int); // type variable\n-\n     ty_param(uint); // fn/tag type param\n-\n     ty_type;\n     ty_native;\n     // TODO: ty_fn_arg(t), for a possibly-aliased function argument\n-\n }\n \n type constr_def = spanned[constr_general[uint]];\n@@ -492,6 +492,7 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] cname) -> raw_t {\n                                  m.output);\n             }\n         }\n+        case (ty_res(_, ?tt)) { derive_flags_t(cx, has_params, has_vars, tt);}\n     }\n     ret rec(struct=st,\n             cname=cname,\n@@ -598,6 +599,10 @@ fn mk_obj(&ctxt cx, &vec[method] meths) -> t {\n     ret gen_ty(cx, ty_obj(meths));\n }\n \n+fn mk_res(&ctxt cx, &ast::def_id did, &t inner) -> t {\n+    ret gen_ty(cx, ty_res(did, inner));\n+}\n+\n fn mk_var(&ctxt cx, int v) -> t { ret gen_ty(cx, ty_var(v)); }\n \n fn mk_param(&ctxt cx, uint n) -> t { ret gen_ty(cx, ty_param(n)); }\n@@ -679,6 +684,7 @@ fn walk_ty(&ctxt cx, ty_walk walker, t ty) {\n                 walk_ty(cx, walker, m.output);\n             }\n         }\n+        case (ty_res(_, ?sub)) { walk_ty(cx, walker, sub); }\n         case (ty_var(_)) {/* no-op */ }\n         case (ty_param(_)) {/* no-op */ }\n     }\n@@ -811,6 +817,9 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n             }\n             ty = copy_cname(cx, mk_obj(cx, new_methods), ty);\n         }\n+        case (ty_res(?did, ?subty)) {\n+            ty = copy_cname(cx, mk_res(cx, did, fold_ty(cx, fld, subty)), ty);\n+        }\n         case (ty_var(?id)) {\n             alt (fld) {\n                 case (fm_var(?folder)) { ty = folder(id); }\n@@ -880,6 +889,7 @@ fn type_is_structural(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(_, _)) { ret true; }\n         case (ty_fn(_, _, _, _, _)) { ret true; }\n         case (ty_obj(_)) { ret true; }\n+        case (ty_res(_, _)) { ret true; }\n         case (ty_ivec(_)) { ret true; }\n         case (ty_istr) { ret true; }\n         case (_) { ret false; }\n@@ -1091,6 +1101,7 @@ fn type_has_dynamic_size(&ctxt cx, &t ty) -> bool {\n         case (ty_fn(_,_,_,_,_)) { ret false; }\n         case (ty_native_fn(_,_,_)) { ret false; }\n         case (ty_obj(_)) { ret false; }\n+        case (ty_res(_, ?sub)) { ret type_has_dynamic_size(cx, sub); }\n         case (ty_var(_)) { fail \"ty_var in type_has_dynamic_size()\"; }\n         case (ty_param(_)) { ret true; }\n         case (ty_type) { ret false; }\n@@ -1196,6 +1207,7 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n                 if (type_owns_heap_mem(cx, f.mt.ty)) { result = true; }\n             }\n         }\n+        case (ty_res(_, ?inner)) { result = type_owns_heap_mem(cx, inner); }\n \n         case (ty_ptr(_)) { result = false; }\n         case (ty_port(_)) { result = false; }\n@@ -1289,9 +1301,8 @@ fn hash_type_structure(&sty st) -> uint {\n             for (field f in fields) { h += h << 5u + hash_ty(f.mt.ty); }\n             ret h;\n         }\n-        case (\n-             // ???\n-             ty_fn(_, ?args, ?rty, _, _)) {\n+        // ???\n+        case (ty_fn(_, ?args, ?rty, _, _)) {\n             ret hash_fn(27u, args, rty);\n         }\n         case (ty_native_fn(_, ?args, ?rty)) { ret hash_fn(28u, args, rty); }\n@@ -1306,6 +1317,7 @@ fn hash_type_structure(&sty st) -> uint {\n         case (ty_native) { ret 33u; }\n         case (ty_bot) { ret 34u; }\n         case (ty_ptr(?mt)) { ret hash_subty(35u, mt.ty); }\n+        case (ty_res(?did, ?sub)) { ret hash_subty(hash_def(18u, did), sub); }\n     }\n }\n "}, {"sha": "4ad7400dc9919aad28c2efb8a417f74997efa9d0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -526,8 +526,7 @@ mod collect {\n         auto methods = get_obj_method_types(cx, obj_info);\n         auto t_obj = ty::mk_obj(cx.tcx, ty::sort_methods(methods));\n         t_obj = ty::rename(cx.tcx, t_obj, id);\n-        auto ty_param_count = vec::len[ast::ty_param](ty_params);\n-        ret tup(ty_param_count, t_obj);\n+        ret tup(vec::len(ty_params), t_obj);\n     }\n     fn ty_of_obj_ctor(@ctxt cx, &ast::ident id, &ast::_obj obj_info,\n                       ast::node_id ctor_id, &vec[ast::ty_param] ty_params) ->\n@@ -579,6 +578,13 @@ mod collect {\n                 cx.tcx.tcache.insert(local_def(it.id), tpt);\n                 ret tpt;\n             }\n+            case (ast::item_res(?f, _, ?tps, _)) {\n+                auto t_arg = ty_of_arg(cx, f.decl.inputs.(0));\n+                auto t_res = tup(vec::len(tps), ty::mk_res\n+                                 (cx.tcx, local_def(it.id), t_arg.ty));\n+                cx.tcx.tcache.insert(local_def(it.id), t_res);\n+                ret t_res;\n+            }\n             case (ast::item_tag(_, ?tps)) {\n                 // Create a new generic polytype.\n \n@@ -729,6 +735,18 @@ mod collect {\n                     }\n                 }\n             }\n+            case (ast::item_res(?f, ?dtor_id, ?tps, ?ctor_id)) {\n+                auto t_arg = ty_of_arg(cx, f.decl.inputs.(0));\n+                auto t_res = ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty);\n+                auto t_ctor = ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg],\n+                                        t_res, ast::return, []);\n+                auto t_dtor = ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg],\n+                                        ty::mk_nil(cx.tcx), ast::return, []);\n+                write::ty_only(cx.tcx, ctor_id, t_ctor);\n+                cx.tcx.tcache.insert(local_def(ctor_id),\n+                                     tup(vec::len(tps), t_ctor));\n+                write::ty_only(cx.tcx, dtor_id, t_dtor);\n+            }\n             case (_) {\n                 // This call populates the type cache with the converted type\n                 // of the item in passing. All we have to do here is to write\n@@ -2337,6 +2355,9 @@ fn check_item(@crate_ctxt ccx, &@ast::item it) {\n         case (ast::item_fn(?f, _)) {\n             check_fn(ccx, f.decl, f.proto, f.body, it.id);\n         }\n+        case (ast::item_res(?f, ?dtor_id, _, _)) {\n+            check_fn(ccx, f.decl, f.proto, f.body, dtor_id);\n+        }\n         case (ast::item_obj(?ob, _, _)) {\n             // We're entering an object, so gather up the info we need.\n "}, {"sha": "53efe81c4a2d4eb9c69e38c4b9d5782a33d7a1b4", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -115,6 +115,9 @@ fn visit_item[E](&@item i, &E e, &vt[E] v) {\n             }\n         }\n         case (item_ty(?t, _)) { vt(v).visit_ty(t, e, v); }\n+        case (item_res(?f, ?dtor_id, ?tps, _)) {\n+            vt(v).visit_fn(f, tps, i.span, i.ident, dtor_id, e, v);\n+        }\n         case (item_tag(?variants, _)) {\n             for (variant vr in variants) {\n                 for (variant_arg va in vr.node.args) {"}, {"sha": "821a00ad4508262d957b485c76d9454ce0fc716b", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -105,6 +105,9 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n         case (ast::item_mod(?m)) { walk_mod(v, m); }\n         case (ast::item_native_mod(?nm)) { walk_native_mod(v, nm); }\n         case (ast::item_ty(?t, _)) { walk_ty(v, t); }\n+        case (ast::item_res(?f, ?dtor_id, _, _)) {\n+            walk_fn(v, f, i.span, some(i.ident), dtor_id);\n+        }\n         case (ast::item_tag(?variants, _)) {\n             for (ast::variant vr in variants) {\n                 for (ast::variant_arg va in vr.node.args) {"}, {"sha": "23f2efc3d04f99d0907bb65d33175ce6efc92225", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fc12d0d0d1b8acb7472bfc6223882b32acd3d2/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=61fc12d0d0d1b8acb7472bfc6223882b32acd3d2", "patch": "@@ -436,6 +436,18 @@ fn print_item(&ps s, &@ast::item item) {\n             }\n             bclose(s, item.span);\n         }\n+        case (ast::item_res(?dt, ?dt_id, ?tps, ?ct_id)) {\n+            head(s, \"res\");\n+            word(s.s, item.ident);\n+            print_type_params(s, tps);\n+            popen(s);\n+            print_type(s, *dt.decl.inputs.(0).ty);\n+            space(s.s);\n+            word(s.s, dt.decl.inputs.(0).ident);\n+            pclose(s);\n+            space(s.s);\n+            print_block(s, dt.body);\n+        }\n     }\n \n     // Print the node ID if necessary. TODO: type as well."}]}