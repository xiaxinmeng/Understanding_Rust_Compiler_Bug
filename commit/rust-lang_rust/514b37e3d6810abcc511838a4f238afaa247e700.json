{"sha": "514b37e3d6810abcc511838a4f238afaa247e700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGIzN2UzZDY4MTBhYmNjNTExODM4YTRmMjM4YWZhYTI0N2U3MDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-25T14:50:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-06T19:27:29Z"}, "message": "refactor interface of make_compile_args", "tree": {"sha": "b3a9c87f33e0603de47e9397d0314729c184ccd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a9c87f33e0603de47e9397d0314729c184ccd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514b37e3d6810abcc511838a4f238afaa247e700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514b37e3d6810abcc511838a4f238afaa247e700", "html_url": "https://github.com/rust-lang/rust/commit/514b37e3d6810abcc511838a4f238afaa247e700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514b37e3d6810abcc511838a4f238afaa247e700/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102bab3d6811eb2ca672730e853add3b568c6210", "url": "https://api.github.com/repos/rust-lang/rust/commits/102bab3d6811eb2ca672730e853add3b568c6210", "html_url": "https://github.com/rust-lang/rust/commit/102bab3d6811eb2ca672730e853add3b568c6210"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "8e6ac114ab3ff0aebaedc3d1450c96e42bf7983a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/514b37e3d6810abcc511838a4f238afaa247e700/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514b37e3d6810abcc511838a4f238afaa247e700/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=514b37e3d6810abcc511838a4f238afaa247e700", "patch": "@@ -1161,7 +1161,8 @@ fn compile_test(config: &Config, props: &TestProps,\n     let args = make_compile_args(config,\n                                  props,\n                                  link_args,\n-                                 |a, b| TargetLocation::ThisFile(make_exe_name(a, b)), testpaths);\n+                                 &testpaths.file,\n+                                 TargetLocation::ThisFile(make_exe_name(config, testpaths)));\n     compose_and_run_compiler(config, props, testpaths, args, None)\n }\n \n@@ -1270,16 +1271,17 @@ fn compose_and_run_compiler(config: &Config, props: &TestProps,\n             }\n         };\n         crate_type.extend(extra_link_args.clone());\n+        let aux_output = {\n+            let f = make_lib_name(config, &testpaths.file, testpaths);\n+            let parent = f.parent().unwrap();\n+            TargetLocation::ThisDirectory(parent.to_path_buf())\n+        };\n         let aux_args =\n             make_compile_args(config,\n                               &aux_props,\n                               crate_type,\n-                              |a,b| {\n-                                  let f = make_lib_name(a, &b.file, testpaths);\n-                                  let parent = f.parent().unwrap();\n-                                  TargetLocation::ThisDirectory(parent.to_path_buf())\n-                              },\n-                              &aux_testpaths);\n+                              &aux_testpaths.file,\n+                              aux_output);\n         let auxres = compose_and_run(config,\n                                      &aux_testpaths,\n                                      aux_args,\n@@ -1328,22 +1330,21 @@ enum TargetLocation {\n     ThisDirectory(PathBuf),\n }\n \n-fn make_compile_args<F>(config: &Config,\n-                        props: &TestProps,\n-                        extras: Vec<String> ,\n-                        xform: F,\n-                        testpaths: &TestPaths)\n-                        -> ProcArgs where\n-    F: FnOnce(&Config, &TestPaths) -> TargetLocation,\n+fn make_compile_args(config: &Config,\n+                     props: &TestProps,\n+                     extras: Vec<String> ,\n+                     input_file: &Path,\n+                     output_file: TargetLocation)\n+                     -> ProcArgs\n {\n-    let xform_file = xform(config, testpaths);\n     let target = if props.force_host {\n         &*config.host\n     } else {\n         &*config.target\n     };\n+\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let mut args = vec!(testpaths.file.to_str().unwrap().to_owned(),\n+    let mut args = vec!(input_file.to_str().unwrap().to_owned(),\n                         \"-L\".to_owned(),\n                         config.build_base.to_str().unwrap().to_owned(),\n                         format!(\"--target={}\", target));\n@@ -1384,7 +1385,7 @@ fn make_compile_args<F>(config: &Config,\n         args.push(\"-C\".to_owned());\n         args.push(\"prefer-dynamic\".to_owned());\n     }\n-    let path = match xform_file {\n+    let path = match output_file {\n         TargetLocation::ThisFile(path) => {\n             args.push(\"-o\".to_owned());\n             path\n@@ -1550,6 +1551,9 @@ fn output_testname(filepath: &Path) -> PathBuf {\n     PathBuf::from(filepath.file_stem().unwrap())\n }\n \n+/// Given a test path like `compile-fail/foo/bar.rs` Returns a name like\n+///\n+///     <output>/foo/bar-stage1\n fn output_base_name(config: &Config, testpaths: &TestPaths) -> PathBuf {\n     let dir = config.build_base.join(&testpaths.relative_dir);\n \n@@ -1772,10 +1776,11 @@ fn compile_test_and_save_ir(config: &Config, props: &TestProps,\n     let args = make_compile_args(config,\n                                  props,\n                                  link_args,\n-                                 |a, b| TargetLocation::ThisDirectory(\n-                                     output_base_name(a, b).parent()\n-                                        .unwrap().to_path_buf()),\n-                                 testpaths);\n+                                 &testpaths.file,\n+                                 TargetLocation::ThisDirectory(\n+                                     output_base_name(config, testpaths).parent()\n+                                                                        .unwrap()\n+                                                                        .to_path_buf()));\n     compose_and_run_compiler(config, props, testpaths, args, None)\n }\n "}]}