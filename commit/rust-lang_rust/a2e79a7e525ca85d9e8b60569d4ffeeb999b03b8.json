{"sha": "a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTc5YTdlNTI1Y2E4NWQ5ZThiNjA1NjlkNGZmZWViOTk5YjAzYjg=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-28T15:20:43Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-28T15:20:43Z"}, "message": "Add more links to `!` doc text", "tree": {"sha": "090c864f3b6a2978287b7bc591850d527b2e4e1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090c864f3b6a2978287b7bc591850d527b2e4e1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8", "html_url": "https://github.com/rust-lang/rust/commit/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd094a602196f53d3d78f72dc44e522f8a64ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd094a602196f53d3d78f72dc44e522f8a64ce8", "html_url": "https://github.com/rust-lang/rust/commit/afd094a602196f53d3d78f72dc44e522f8a64ce8"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "b24f4d12ebbee7579c17f8a1020f9996ec56ef9d", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a2e79a7e525ca85d9e8b60569d4ffeeb999b03b8", "patch": "@@ -76,7 +76,7 @@ mod prim_bool { }\n /// so returns `!`.\n ///\n /// `break`, `continue` and `return` expressions also have type `!`. For example we are allowed to\n-/// write\n+/// write:\n ///\n /// ```\n /// # #![feature(never_type)]\n@@ -104,10 +104,11 @@ mod prim_bool { }\n /// # }\n /// ```\n ///\n-/// Both match arms must produce values of type `u32`, but since `break` never produces a value at\n-/// all we know it can never produce a value which isn't a `u32`. This illustrates another\n+/// Both match arms must produce values of type [`u32`], but since `break` never produces a value\n+/// at all we know it can never produce a value which isn't a [`u32`]. This illustrates another\n /// behaviour of the `!` type - expressions with type `!` will coerce into any other type.\n ///\n+/// [`u32`]: primitive.str.html\n /// [`exit`]: process/fn.exit.html\n ///\n /// # `!` and generics\n@@ -122,21 +123,27 @@ mod prim_bool { }\n /// }\n /// ```\n ///\n-/// When implementing this trait for `String` we need to pick a type for `Err`. And since\n+/// When implementing this trait for [`String`] we need to pick a type for [`Err`]. And since\n /// converting a string into a string will never result in an error, the appropriate type is `!`.\n /// (Currently the type actually used is an enum with no variants, though this is only because `!`\n-/// was added to Rust at a later date and it may change in the future). With an `Err` type of `!`,\n-/// if we have to call `String::from_str` for some reason the result will be a `Result<String, !>`\n-/// which we can unpack like this:\n+/// was added to Rust at a later date and it may change in the future). With an [`Err`] type of\n+/// `!`, if we have to call [`String::from_str`] for some reason the result will be a\n+/// [`Result<String, !>`] which we can unpack like this:\n ///\n /// ```ignore (string-from-str-error-type-is-not-never-yet)\n /// let Ok(s) = String::from_str(\"hello\");\n /// ```\n ///\n-/// Since the `Err` variant contains a `!`, it can never occur. So we can exhaustively match on\n-/// `Result<T, !>` by just taking the `Ok` variant. This illustrates another behaviour of `!` - it\n-/// can be used to \"delete\" certain enum variants from generic types like `Result`.\n+/// Since the [`Err`] variant contains a `!`, it can never occur. So we can exhaustively match on\n+/// [`Result<T, !>`] by just taking the [`Ok`] variant. This illustrates another behaviour of `!` -\n+/// it can be used to \"delete\" certain enum variants from generic types like `Result`.\n ///\n+/// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n+/// [`Result<String, !>`]: result/enum.Result.html\n+/// [`Result<T, !>`]: result/enum.Result.html\n+/// [`Ok`]: result/enum.Result.html#variant.Ok\n+/// [`String`]: string/struct.String.html\n+/// [`Err`]: result/enum.Result.html#variant.Err\n /// [`FromStr`]: str/trait.FromStr.html\n ///\n /// # `!` and traits\n@@ -158,13 +165,13 @@ mod prim_bool { }\n /// }\n /// ```\n ///\n-/// Once again we're using `!`'s ability to coerce into any other type, in this case `fmt::Result`.\n-/// Since this method takes a `&!` as an argument we know that it can never be called (because\n-/// there is no value of type `!` for it to be called with). Writing `*self` essentially tells the\n-/// compiler \"We know that this code can never be run, so just treat the entire function body has\n-/// having type `fmt::Result`\". This pattern can be used a lot when implementing traits for `!`.\n-/// Generally, any trait which only has methods which take a `self` parameter should have such as\n-/// impl.\n+/// Once again we're using `!`'s ability to coerce into any other type, in this case\n+/// [`fmt::Result`]. Since this method takes a `&!` as an argument we know that it can never be\n+/// called (because there is no value of type `!` for it to be called with). Writing `*self`\n+/// essentially tells the compiler \"We know that this code can never be run, so just treat the\n+/// entire function body has having type [`fmt::Result`]\". This pattern can be used a lot when\n+/// implementing traits for `!`. Generally, any trait which only has methods which take a `self`\n+/// parameter should have such as impl.\n ///\n /// On the other hand, one trait which would not be appropriate to implement is [`Default`]:\n ///\n@@ -176,10 +183,13 @@ mod prim_bool { }\n ///\n /// Since `!` has no values, it has no default value either. It's true that we could write an\n /// `impl` for this which simply panics, but the same is true for any type (we could `impl\n-/// Default` for (eg.) `File` by just making `default()` panic.)\n+/// Default` for (eg.) [`File`] by just making [`default()`] panic.)\n ///\n+/// [`fmt::Result`]: fmt/type.Result.html\n+/// [`File`]: fs/struct.File.html\n /// [`Debug`]: fmt/trait.Debug.html\n /// [`Default`]: default/trait.Default.html\n+/// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n mod prim_never { }"}]}