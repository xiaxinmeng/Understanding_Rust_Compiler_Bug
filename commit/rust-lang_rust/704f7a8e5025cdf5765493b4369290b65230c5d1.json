{"sha": "704f7a8e5025cdf5765493b4369290b65230c5d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNGY3YThlNTAyNWNkZjU3NjU0OTNiNDM2OTI5MGI2NTIzMGM1ZDE=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-13T01:13:45Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-13T13:39:59Z"}, "message": "Keep track of whether `deref` or `deref_mut` was called\nRemove more unnecessary code", "tree": {"sha": "813ec01eae0bf8a2d66327216ae9fae3a8ec3580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/813ec01eae0bf8a2d66327216ae9fae3a8ec3580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704f7a8e5025cdf5765493b4369290b65230c5d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBMwLAACgkQ2lnoZDo37QZTcQD9EoFJ9KL3PGgBISqZ3OBz4qSz\nbDEo8hsQ/76wiG9Vus8A/0j7YYEo1RphsFDM563iMqyBsgVzZzv0MkCwplFcaeoP\n=KaM1\n-----END PGP SIGNATURE-----", "payload": "tree 813ec01eae0bf8a2d66327216ae9fae3a8ec3580\nparent 1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e\nauthor Jason Newcomb <jsnewcomb@pm.me> 1615598025 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1615642799 -0500\n\nKeep track of whether `deref` or `deref_mut` was called\nRemove more unnecessary code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704f7a8e5025cdf5765493b4369290b65230c5d1", "html_url": "https://github.com/rust-lang/rust/commit/704f7a8e5025cdf5765493b4369290b65230c5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704f7a8e5025cdf5765493b4369290b65230c5d1/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "html_url": "https://github.com/rust-lang/rust/commit/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e"}], "stats": {"total": 77, "additions": 17, "deletions": 60}, "files": [{"sha": "a1d0110929ce09067f24f8f9577559d443f945c4", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 16, "deletions": 59, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/704f7a8e5025cdf5765493b4369290b65230c5d1/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f7a8e5025cdf5765493b4369290b65230c5d1/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=704f7a8e5025cdf5765493b4369290b65230c5d1", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{get_parent_node, in_macro, is_allowed, peel_mid_ty_refs, snippet_with_context, span_lint_and_sugg};\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Destination, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, adjustment::Adjustment, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n \n@@ -66,7 +66,7 @@ enum State {\n \n // A reference operation considered by this lint pass\n enum RefOp {\n-    Method,\n+    Method(Mutability),\n     Deref,\n     AddrOf,\n }\n@@ -100,18 +100,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n         match (self.state.take(), kind) {\n             (None, kind) => {\n                 let parent = get_parent_node(cx.tcx, expr.hir_id);\n-\n-                let expr_adjustments = find_adjustments(cx.tcx, typeck, expr);\n                 let expr_ty = typeck.expr_ty(expr);\n-                let target_mut =\n-                    if let ty::Ref(_, _, mutability) = *expr_adjustments.last().map_or(expr_ty, |a| a.target).kind() {\n-                        mutability\n-                    } else {\n-                        Mutability::Not\n-                    };\n \n                 match kind {\n-                    RefOp::Method\n+                    RefOp::Method(target_mut)\n                         if !is_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && is_linted_explicit_deref_position(parent, expr.hir_id) =>\n                     {\n@@ -133,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     _ => (),\n                 }\n             },\n-            (Some((State::DerefMethod { ty_changed_count, .. }, data)), RefOp::Method) => {\n+            (Some((State::DerefMethod { ty_changed_count, .. }, data)), RefOp::Method(_)) => {\n                 self.state = Some((\n                     State::DerefMethod {\n                         ty_changed_count: if deref_method_same_type(typeck.expr_ty(expr), typeck.expr_ty(sub_expr)) {\n@@ -173,9 +165,13 @@ fn try_parse_ref_op(\n         ExprKind::AddrOf(BorrowKind::Ref, _, sub_expr) => return Some((RefOp::AddrOf, sub_expr)),\n         _ => return None,\n     };\n-    (tcx.is_diagnostic_item(sym::deref_method, def_id)\n-        || tcx.trait_of_item(def_id)? == tcx.lang_items().deref_mut_trait()?)\n-    .then(|| (RefOp::Method, arg))\n+    if tcx.is_diagnostic_item(sym::deref_method, def_id) {\n+        Some((RefOp::Method(Mutability::Not), arg))\n+    } else if tcx.trait_of_item(def_id)? == tcx.lang_items().deref_mut_trait()? {\n+        Some((RefOp::Method(Mutability::Mut), arg))\n+    } else {\n+        None\n+    }\n }\n \n // Checks whether the type for a deref call actually changed the type, not just the mutability of\n@@ -191,48 +187,6 @@ fn deref_method_same_type(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-// Adjustments are sometimes made in the parent block rather than the expression itself.\n-fn find_adjustments(\n-    tcx: TyCtxt<'tcx>,\n-    typeck: &'tcx TypeckResults<'_>,\n-    expr: &'tcx Expr<'_>,\n-) -> &'tcx [Adjustment<'tcx>] {\n-    let map = tcx.hir();\n-    let mut iter = map.parent_iter(expr.hir_id);\n-    let mut prev = expr;\n-\n-    loop {\n-        match typeck.expr_adjustments(prev) {\n-            [] => (),\n-            a => break a,\n-        };\n-\n-        match iter.next().map(|(_, x)| x) {\n-            Some(Node::Block(_)) => {\n-                if let Some((_, Node::Expr(e))) = iter.next() {\n-                    prev = e;\n-                } else {\n-                    // This shouldn't happen. Blocks are always contained in an expression.\n-                    break &[];\n-                }\n-            },\n-            Some(Node::Expr(&Expr {\n-                kind: ExprKind::Break(Destination { target_id: Ok(id), .. }, _),\n-                ..\n-            })) => {\n-                if let Some(Node::Expr(e)) = map.find(id) {\n-                    prev = e;\n-                    iter = map.parent_iter(id);\n-                    continue;\n-                }\n-                // This shouldn't happen. The destination should definitely exist at this point.\n-                break &[];\n-            },\n-            _ => break &[],\n-        }\n-    }\n-}\n-\n // Checks whether the parent node is a suitable context for switching from a deref method to the\n // deref operator.\n fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n@@ -331,7 +285,10 @@ fn report(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data: Stat\n                 cx,\n                 EXPLICIT_DEREF_METHODS,\n                 data.span,\n-                \"explicit `deref` method call\",\n+                match data.target_mut {\n+                    Mutability::Not => \"explicit `deref` method call\",\n+                    Mutability::Mut => \"explicit `deref_mut` method call\",\n+                },\n                 \"try this\",\n                 format!(\"{}{}{}\", addr_of_str, deref_str, expr_str),\n                 app,"}, {"sha": "335c0e4bb9d1602e78546eac6ba768f7da39fd90", "filename": "tests/ui/explicit_deref_methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f7a8e5025cdf5765493b4369290b65230c5d1/tests%2Fui%2Fexplicit_deref_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704f7a8e5025cdf5765493b4369290b65230c5d1/tests%2Fui%2Fexplicit_deref_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.stderr?ref=704f7a8e5025cdf5765493b4369290b65230c5d1", "patch": "@@ -6,7 +6,7 @@ LL |     let b: &str = a.deref();\n    |\n    = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n \n-error: explicit `deref` method call\n+error: explicit `deref_mut` method call\n   --> $DIR/explicit_deref_methods.rs:32:23\n    |\n LL |     let b: &mut str = a.deref_mut();"}]}