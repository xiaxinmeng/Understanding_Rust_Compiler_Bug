{"sha": "a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjgyNjlkMGMyY2RmMDVhYTg2ZDZlZjQ3ODA3M2Y2ZjYzNGQ4Mzg=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-17T18:40:45Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-17T18:40:45Z"}, "message": "making adjust_span a closure", "tree": {"sha": "2fd6ef49e6fdc8c622ce84bd826a8eed577a2898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd6ef49e6fdc8c622ce84bd826a8eed577a2898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "html_url": "https://github.com/rust-lang/rust/commit/a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8269d0c2cdf05aa86d6ef478073f6f634d838/comments", "author": null, "committer": null, "parents": [{"sha": "999ee0190fbcabf13253d6f95bb7ab73709c9240", "url": "https://api.github.com/repos/rust-lang/rust/commits/999ee0190fbcabf13253d6f95bb7ab73709c9240", "html_url": "https://github.com/rust-lang/rust/commit/999ee0190fbcabf13253d6f95bb7ab73709c9240"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "7ffdad08453e740714ff8cc3822ba70adc9cf8a2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2f8269d0c2cdf05aa86d6ef478073f6f634d838/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f8269d0c2cdf05aa86d6ef478073f6f634d838/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "patch": "@@ -68,35 +68,35 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     }\n }\n \n-/// Adjust the span from the block, to the last expression of the\n-/// block. This is a better span when returning a mutable reference\n-/// with too short a lifetime. The error message will use the span\n-/// from the assignment to the return place, which should only point\n-/// at the returned value, not the entire function body.\n-///\n-/// fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n-///      x\n-///   // ^ error message points at this expression.\n-/// }\n-fn adjust_span<'tcx>(expr: &mut Expr<'tcx>) -> Span {\n-    if let ExprKind::Block { body } = expr.kind {\n-        if let Some(ref last_expr) = body.expr {\n-            expr.span = last_expr.span;\n-        }\n-    }\n-\n-    expr.span\n-}\n-\n fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     hir_expr: &'tcx hir::Expr,\n                                     mut expr: Expr<'tcx>,\n                                     adjustment: &Adjustment<'tcx>)\n                                     -> Expr<'tcx> {\n     let Expr { temp_lifetime, mut span, .. } = expr;\n+\n+    // Adjust the span from the block, to the last expression of the\n+    // block. This is a better span when returning a mutable reference\n+    // with too short a lifetime. The error message will use the span\n+    // from the assignment to the return place, which should only point\n+    // at the returned value, not the entire function body.\n+    //\n+    // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n+    //      x\n+    //   // ^ error message points at this expression.\n+    // }\n+    let mut adjust_span = |expr: &mut Expr<'tcx>| {\n+        if let ExprKind::Block { body } = expr.kind {\n+            if let Some(ref last_expr) = body.expr {\n+                span = last_expr.span;\n+                expr.span = span;\n+            }\n+        }\n+    };\n+\n     let kind = match adjustment.kind {\n         Adjust::Pointer(PointerCast::Unsize) => {\n-            span = adjust_span(&mut expr);\n+            adjust_span(&mut expr);\n             ExprKind::Pointer { cast: PointerCast::Unsize, source: expr.to_ref() }\n         }\n         Adjust::Pointer(cast) => {\n@@ -106,7 +106,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ExprKind::NeverToAny { source: expr.to_ref() }\n         }\n         Adjust::Deref(None) => {\n-            span = adjust_span(&mut expr);\n+            adjust_span(&mut expr);\n             ExprKind::Deref { arg: expr.to_ref() }\n         }\n         Adjust::Deref(Some(deref)) => {"}]}