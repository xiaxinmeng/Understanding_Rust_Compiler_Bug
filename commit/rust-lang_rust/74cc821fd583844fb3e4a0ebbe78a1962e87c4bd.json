{"sha": "74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Y2M4MjFmZDU4Mzg0NGZiM2U0YTBlYmJlNzhhMTk2MmU4N2M0YmQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-11T18:38:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T18:38:34Z"}, "message": "Rollup merge of #52193 - Emerentius:step_by_note, r=alexcrichton\n\nstep_by: leave time of item skip unspecified\n\nThis gives us some leeway when optimizing. `StepBy<RangeFrom<_>>` is one case where this is needed.", "tree": {"sha": "892949bcdc1a9c285168d071532361a637d34347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892949bcdc1a9c285168d071532361a637d34347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRk6qCRBK7hj4Ov3rIwAAdHIIAJXnssmCDI8oBOPJLaKAxmRd\nj/eB9Cq0/kB26wS3yme1dGYaQZ6Egij+yMAbWxx2F0eFV+TQpd3L2eESD//ycjai\nzC5duhpJ5o7+5yfcU5E+PE+vgzzRxkgCLpn6b0J9W0wdJFpbnwg8wTBMeVs6e9PN\naoQLJVz3jC9VzDo4PYOiRkgXpc9rw1BNOQjOG9C1e8KgGTGOap/YyGtbVxah3hES\nvmw4hcq35T9MouCNeRCKbTyq7wFK4m2gccFbZ+lwfFZHQNv7u2F0UjlE7Z3Fw6JX\nI8VqnyisGbFSqbB6nClOIqyW3wf6M0YK5Y3TokBu7ctzCr9pTEv0H1NNVLiLUmw=\n=1iPd\n-----END PGP SIGNATURE-----\n", "payload": "tree 892949bcdc1a9c285168d071532361a637d34347\nparent 322632ac108aa08c41a23e804a856f383d1b705f\nparent 39fcfa8ccb4605e307eed4c7515b58c5edc97c74\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1531334314 -0600\ncommitter GitHub <noreply@github.com> 1531334314 -0600\n\nRollup merge of #52193 - Emerentius:step_by_note, r=alexcrichton\n\nstep_by: leave time of item skip unspecified\n\nThis gives us some leeway when optimizing. `StepBy<RangeFrom<_>>` is one case where this is needed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "html_url": "https://github.com/rust-lang/rust/commit/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322632ac108aa08c41a23e804a856f383d1b705f", "url": "https://api.github.com/repos/rust-lang/rust/commits/322632ac108aa08c41a23e804a856f383d1b705f", "html_url": "https://github.com/rust-lang/rust/commit/322632ac108aa08c41a23e804a856f383d1b705f"}, {"sha": "39fcfa8ccb4605e307eed4c7515b58c5edc97c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/39fcfa8ccb4605e307eed4c7515b58c5edc97c74", "html_url": "https://github.com/rust-lang/rust/commit/39fcfa8ccb4605e307eed4c7515b58c5edc97c74"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "c0681619bf8b584ce9f71997a9e8b3e103a48221", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "patch": "@@ -271,9 +271,30 @@ pub trait Iterator {\n     /// Creates an iterator starting at the same point, but stepping by\n     /// the given amount at each iteration.\n     ///\n-    /// Note that it will always return the first element of the iterator,\n+    /// Note 1: The first element of the iterator will always be returned,\n     /// regardless of the step given.\n     ///\n+    /// Note 2: The time at which ignored elements are pulled is not fixed.\n+    /// `StepBy` behaves like the sequence `next(), nth(step-1), nth(step-1), \u2026`,\n+    /// but is also free to behave like the sequence\n+    /// `advance_n_and_return_first(step), advance_n_and_return_first(step), \u2026`\n+    /// Which way is used may change for some iterators for performance reasons.\n+    /// The second way will advance the iterator earlier and may consume more items.\n+    ///\n+    /// `advance_n_and_return_first` is the equivalent of:\n+    /// ```\n+    /// fn advance_n_and_return_first<I>(iter: &mut I, total_step: usize) -> Option<I::Item>\n+    /// where\n+    ///     I: Iterator,\n+    /// {\n+    ///     let next = iter.next();\n+    ///     if total_step > 1 {\n+    ///         iter.nth(total_step-2);\n+    ///     }\n+    ///     next\n+    /// }\n+    /// ```\n+    ///\n     /// # Panics\n     ///\n     /// The method will panic if the given step is `0`."}]}