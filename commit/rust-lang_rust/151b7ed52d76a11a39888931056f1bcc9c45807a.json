{"sha": "151b7ed52d76a11a39888931056f1bcc9c45807a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MWI3ZWQ1MmQ3NmExMWEzOTg4ODkzMTA1NmYxYmNjOWM0NTgwN2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-22T22:15:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:25:27Z"}, "message": "libstd: Fix Win32 and other bustage.", "tree": {"sha": "614d773bfa0bcb8c1b93d4a6c4f824780f925f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614d773bfa0bcb8c1b93d4a6c4f824780f925f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/151b7ed52d76a11a39888931056f1bcc9c45807a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/151b7ed52d76a11a39888931056f1bcc9c45807a", "html_url": "https://github.com/rust-lang/rust/commit/151b7ed52d76a11a39888931056f1bcc9c45807a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/151b7ed52d76a11a39888931056f1bcc9c45807a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749ee53c6d23ae1467568d6e0280a4f59e4e952b", "url": "https://api.github.com/repos/rust-lang/rust/commits/749ee53c6d23ae1467568d6e0280a4f59e4e952b", "html_url": "https://github.com/rust-lang/rust/commit/749ee53c6d23ae1467568d6e0280a4f59e4e952b"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "e34e94ac10cc5e651866567116e11560f00aab02", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -30,14 +30,14 @@ This macro declares an inner module called `my_error` with one static variable,\n parameters are used for, an example usage of this condition would be:\n \n ```rust\n-do my_error::cond.trap(|raised_int| {\n+my_error::cond.trap(|raised_int| {\n \n     // the condition `my_error` was raised on, and the value it raised is stored\n     // in `raised_int`. This closure must return a `~str` type (as specified in\n     // the declaration of the condition\n     if raised_int == 3 { ~\"three\" } else { ~\"oh well\" }\n \n-}).inside {\n+}).inside(|| {\n \n     // The condition handler above is installed for the duration of this block.\n     // That handler will override any previous handler, but the previous handler\n@@ -50,7 +50,7 @@ do my_error::cond.trap(|raised_int| {\n     println(my_error::cond.raise(3)); // prints \"three\"\n     println(my_error::cond.raise(4)); // prints \"oh well\"\n \n-}\n+})\n  ```\n \n Condition handling is useful in cases where propagating errors is either to\n@@ -176,9 +176,9 @@ impl<'self, T, U> Trap<'self, T, U> {\n     /// ```rust\n     /// condition! { my_error: int -> int; }\n     ///\n-    /// let result = do my_error::cond.trap(|error| error + 3).inside {\n+    /// let result = my_error::cond.trap(|error| error + 3).inside(|| {\n     ///     my_error::cond.raise(4)\n-    /// };\n+    /// });\n     /// assert_eq!(result, 7);\n     /// ```\n     pub fn inside<V>(&self, inner: 'self || -> V) -> V {"}, {"sha": "d3bec8ca6c907c18fc2d75a414e7dd35839c3d92", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -61,19 +61,19 @@ mod tests {\n     fn test_clone() {\n         let x = Gc::new(RefCell::new(5));\n         let y = x.clone();\n-        do x.borrow().with_mut |inner| {\n+        x.borrow().with_mut(|inner| {\n             *inner = 20;\n-        }\n+        });\n         assert_eq!(y.borrow().with(|x| *x), 20);\n     }\n \n     #[test]\n     fn test_deep_clone() {\n         let x = Gc::new(RefCell::new(5));\n         let y = x.deep_clone();\n-        do x.borrow().with_mut |inner| {\n+        x.borrow().with_mut(|inner| {\n             *inner = 20;\n-        }\n+        });\n         assert_eq!(y.borrow().with(|x| *x), 5);\n     }\n "}, {"sha": "9dd6daf66e9489056a3c8929066d45f13521c3cc", "filename": "src/libstd/io/native/file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -576,7 +576,9 @@ pub fn unlink(p: &CString) -> IoResult<()> {\n     #[cfg(windows)]\n     fn os_unlink(p: &CString) -> IoResult<()> {\n         super::mkerr_winbool(unsafe {\n-            as_utf16_p(p.as_str().unwrap(), |buf| libc::DeleteFileW(buf));\n+            as_utf16_p(p.as_str().unwrap(), |buf| {\n+                libc::DeleteFileW(buf)\n+            })\n         })\n     }\n "}, {"sha": "038b6ec0ff20140f6ee01a57c1f0898c8c844d78", "filename": "src/libstd/io/native/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -499,7 +499,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n \n             blk.push(0);\n \n-            blk.as_imm_buf(|p, _len| unsafe { cb(cast::transmute(p)) });\n+            blk.as_imm_buf(|p, _len| unsafe { cb(cast::transmute(p)) })\n         }\n         _ => cb(ptr::mut_null())\n     }"}, {"sha": "456011d51720e2654a0354243aa86401d828a0d5", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -104,7 +104,7 @@ pub trait Unsigned: Num {}\n /// use num::Times;\n /// let ten = 10 as uint;\n /// let mut accum = 0;\n-/// do ten.times { accum += 1; }\n+/// ten.times(|| { accum += 1; })\n /// ```\n ///\n pub trait Times {"}, {"sha": "cf28083bb09b941d6106614d85e3f3cbd113d299", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -77,13 +77,13 @@ impl num::Times for uint {\n     #[inline]\n     ///\n     /// A convenience form for basic repetition. Given a uint `x`,\n-    /// `do x.times { ... }` executes the given block x times.\n+    /// `x.times(|| { ... })` executes the given block x times.\n     ///\n     /// Equivalent to `for uint::range(0, x) |_| { ... }`.\n     ///\n     /// Not defined on all integer types to permit unambiguous\n     /// use with integer literals of inferred integer-type as\n-    /// the self-value (eg. `do 100.times { ... }`).\n+    /// the self-value (eg. `100.times(|| { ... })`).\n     ///\n     fn times(&self, it: ||) {\n         let mut i = *self;"}, {"sha": "cdc63608122a8ef4d512e97a9b4ad2a193f668df", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -481,8 +481,8 @@ mod bench {\n \n     #[bench]\n     fn alloc_obj_with_dtor(bh: &mut BenchHarness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             HasDtor { x : 10 };\n-        }\n+        })\n     }\n }"}, {"sha": "5558b8b33487bd08bb6e78b8f42dd8eb8bafa90d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -111,9 +111,9 @@ impl Rng for OSRng {\n                                    pbBuffer: *mut BYTE);\n         }\n \n-        do v.as_mut_buf |ptr, len| {\n+        v.as_mut_buf(|ptr, len| {\n             unsafe {rust_win32_rand_gen(self.hcryptprov, len as DWORD, ptr)}\n-        }\n+        })\n     }\n }\n "}, {"sha": "82b98fa7f9a09f5501a9e2e452e9c18a69d00cc3", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -109,16 +109,16 @@ mod imp {\n \n     fn with_lock<T>(f: || -> T) -> T {\n         static mut lock: Mutex = MUTEX_INIT;\n-        do (|| {\n+        (|| {\n             unsafe {\n                 lock.lock();\n                 f()\n             }\n-        }).finally {\n+        }).finally(|| {\n             unsafe {\n                 lock.unlock();\n             }\n-        }\n+        })\n     }\n \n     fn get_global_ptr() -> *mut Option<~~[~str]> {\n@@ -127,9 +127,9 @@ mod imp {\n \n     // Copied from `os`.\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n-        do vec::from_fn(argc as uint) |i| {\n+        vec::from_fn(argc as uint, |i| {\n             str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int))\n-        }\n+        })\n     }\n \n     #[cfg(test)]"}, {"sha": "22cf57979a1a21780d1a99d57582d65a2913b554", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b7ed52d76a11a39888931056f1bcc9c45807a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=151b7ed52d76a11a39888931056f1bcc9c45807a", "patch": "@@ -3894,68 +3894,68 @@ mod bench {\n     #[bench]\n     fn push(bh: &mut BenchHarness) {\n         let mut vec: ~[uint] = ~[0u];\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.push(0);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn starts_with_same_vector(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.starts_with(vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn starts_with_single_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = ~[0u];\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.starts_with(vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn starts_with_diff_one_element_at_end(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n         let mut match_vec: ~[uint] = vec::from_fn(99, |i| i);\n         match_vec.push(0);\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.starts_with(match_vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn ends_with_same_vector(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.ends_with(vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn ends_with_single_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = ~[0u];\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.ends_with(vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn ends_with_diff_one_element_at_beginning(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n         let mut match_vec: ~[uint] = vec::from_fn(100, |i| i);\n         match_vec[0] = 200;\n-        do bh.iter() {\n+        bh.iter(|| {\n             vec.starts_with(match_vec);\n-        }\n+        })\n     }\n \n     #[bench]\n     fn contains_last_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n-        do bh.iter() {\n+        bh.iter(|| {\n                 vec.contains(&99u);\n-        }\n+        })\n     }\n }"}]}