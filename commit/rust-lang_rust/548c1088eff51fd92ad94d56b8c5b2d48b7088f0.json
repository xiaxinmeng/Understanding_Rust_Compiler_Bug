{"sha": "548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "node_id": "C_kwDOAAsO6NoAKDU0OGMxMDg4ZWZmNTFmZDkyYWQ5NGQ1NmI4YzViMmQ0OGI3MDg4ZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T23:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T23:54:14Z"}, "message": "Auto merge of #90774 - alexcrichton:tweak-const, r=m-ou-se\n\nstd: Tweak expansion of thread-local const\n\nThis commit tweaks the expansion of `thread_local!` when combined with a\n`const { ... }` value to help ensure that the rules which apply to\n`const { ... }` blocks will be the same as when they're stabilized.\nPreviously with this invocation:\n\n    thread_local!(static NAME: Type = const { init_expr });\n\nthis would generate (on supporting platforms):\n\n    #[thread_local]\n    static NAME: Type = init_expr;\n\ninstead the macro now expands to:\n\n    const INIT_EXPR: Type = init_expr;\n    #[thread_local]\n    static NAME: Type = INIT_EXPR;\n\nwith the hope that because `init_expr` is defined as a `const` item then\nit's not accidentally allowing more behavior than if it were put into a\n`static`. For example on the stabilization issue [this example][ex] now\ngives the same error both ways.\n\n[ex]: https://github.com/rust-lang/rust/issues/84223#issuecomment-953384298", "tree": {"sha": "f708203519be2f68d88d88a5986eef1431b6e5c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f708203519be2f68d88d88a5986eef1431b6e5c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "html_url": "https://github.com/rust-lang/rust/commit/548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548c1088eff51fd92ad94d56b8c5b2d48b7088f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc946fcd326f7d85d4af096efdc73538622568e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc946fcd326f7d85d4af096efdc73538622568e9", "html_url": "https://github.com/rust-lang/rust/commit/cc946fcd326f7d85d4af096efdc73538622568e9"}, {"sha": "1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "html_url": "https://github.com/rust-lang/rust/commit/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4da59577d78a19cfb61ba24c47c1b54e7cc37cc9", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/548c1088eff51fd92ad94d56b8c5b2d48b7088f0/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c1088eff51fd92ad94d56b8c5b2d48b7088f0/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "patch": "@@ -165,6 +165,7 @@ macro_rules! __thread_local_inner {\n         #[cfg_attr(not(windows), inline)] // see comments below\n         unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n             const _REQUIRE_UNSTABLE: () = $crate::thread::require_unstable_const_init_thread_local();\n+            const INIT_EXPR: $t = $init;\n \n             // wasm without atomics maps directly to `static mut`, and dtors\n             // aren't implemented because thread dtors aren't really a thing\n@@ -174,7 +175,7 @@ macro_rules! __thread_local_inner {\n             // block.\n             #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n             {\n-                static mut VAL: $t = $init;\n+                static mut VAL: $t = INIT_EXPR;\n                 Some(&VAL)\n             }\n \n@@ -184,18 +185,17 @@ macro_rules! __thread_local_inner {\n                 not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n+                #[thread_local]\n+                static mut VAL: $t = INIT_EXPR;\n+\n                 // If a dtor isn't needed we can do something \"very raw\" and\n                 // just get going.\n                 if !$crate::mem::needs_drop::<$t>() {\n-                    #[thread_local]\n-                    static mut VAL: $t = $init;\n                     unsafe {\n                         return Some(&VAL)\n                     }\n                 }\n \n-                #[thread_local]\n-                static mut VAL: $t = $init;\n                 // 0 == dtor not registered\n                 // 1 == dtor registered, dtor not run\n                 // 2 == dtor registered and is running or has run\n@@ -242,7 +242,7 @@ macro_rules! __thread_local_inner {\n             ))]\n             {\n                 #[inline]\n-                const fn __init() -> $t { $init }\n+                const fn __init() -> $t { INIT_EXPR }\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n                 #[allow(unused_unsafe)]"}]}