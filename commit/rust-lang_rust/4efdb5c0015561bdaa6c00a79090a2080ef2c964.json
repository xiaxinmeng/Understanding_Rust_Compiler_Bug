{"sha": "4efdb5c0015561bdaa6c00a79090a2080ef2c964", "node_id": "C_kwDOAAsO6NoAKDRlZmRiNWMwMDE1NTYxYmRhYTZjMDBhNzkwOTBhMjA4MGVmMmM5NjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T16:10:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T16:10:27Z"}, "message": "Rollup merge of #98202 - aticu:impl_tryfrom_osstr_for_str, r=Amanieu\n\nImplement `TryFrom<&OsStr>` for `&str`\n\nRecently when trying to work with `&OsStr` I was surprised to find this `impl` missing.\n\nSince the `to_str` method already existed the actual implementation is fairly non-controversial, except for maybe the choice of the error type. I chose an opaque error here instead of something like `std::str::Utf8Error`, since that would already make a number of assumption about the underlying implementation of `OsStr`.\n\nAs this is a trait implementation, it is insta-stable, if I'm not mistaken?\nEither way this will need an FCP.\nI chose \"1.64.0\" as the version, since this is unlikely to land before the beta cut-off.\n\n`@rustbot` modify labels: +T-libs-api\n\nAPI Change Proposal: rust-lang/rust#99031 (accepted)", "tree": {"sha": "8002841bf08d692f21735bfdfb0dac357e0d5da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8002841bf08d692f21735bfdfb0dac357e0d5da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efdb5c0015561bdaa6c00a79090a2080ef2c964", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkieZzCRBK7hj4Ov3rIwAAgiIIABptlJXHrBsQixpKc7iNYfRQ\n1hqLCZtSSRpXyABrNx8w7BJVfABUJ+p+R8Fl5sMEAywgqEqoMKvcN4i8CosgZduo\noFGSAbWV+28sceHsTALQmJ7p5jb7D0Nb5G7v4HSkIg9qHv3kCuXt4HJ/49rcIYm0\nvucd5e/qDo20qBe6HvDNRmvaGqRwZ5k71JTsWQwe7YlSWiHw7jn3aPH4tKeFaozO\nY9BH8yC/PuTee7Fp+hr63KTfIbXOotEe2IOynOpoKIYIs88a2Tva6uhCcenSN5UX\nDnPWNGO/XeUULp5idgJ6jq9ju591frCtZ3zpcEkkj5x+wzapRNcYxh0mSVdqE7o=\n=HH/I\n-----END PGP SIGNATURE-----\n", "payload": "tree 8002841bf08d692f21735bfdfb0dac357e0d5da3\nparent 7b0eac438ace0ba305b4633328b00474fbbf5120\nparent e3a1a11ed2a1b081b229f1d873114aaf7f5f5137\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686759027 +0200\ncommitter GitHub <noreply@github.com> 1686759027 +0200\n\nRollup merge of #98202 - aticu:impl_tryfrom_osstr_for_str, r=Amanieu\n\nImplement `TryFrom<&OsStr>` for `&str`\n\nRecently when trying to work with `&OsStr` I was surprised to find this `impl` missing.\n\nSince the `to_str` method already existed the actual implementation is fairly non-controversial, except for maybe the choice of the error type. I chose an opaque error here instead of something like `std::str::Utf8Error`, since that would already make a number of assumption about the underlying implementation of `OsStr`.\n\nAs this is a trait implementation, it is insta-stable, if I'm not mistaken?\nEither way this will need an FCP.\nI chose \"1.64.0\" as the version, since this is unlikely to land before the beta cut-off.\n\n`@rustbot` modify labels: +T-libs-api\n\nAPI Change Proposal: rust-lang/rust#99031 (accepted)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efdb5c0015561bdaa6c00a79090a2080ef2c964", "html_url": "https://github.com/rust-lang/rust/commit/4efdb5c0015561bdaa6c00a79090a2080ef2c964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efdb5c0015561bdaa6c00a79090a2080ef2c964/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0eac438ace0ba305b4633328b00474fbbf5120", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0eac438ace0ba305b4633328b00474fbbf5120", "html_url": "https://github.com/rust-lang/rust/commit/7b0eac438ace0ba305b4633328b00474fbbf5120"}, {"sha": "e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "html_url": "https://github.com/rust-lang/rust/commit/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "fbdf7f5ecacc15c1ef3ae558ba8e074ece978e38", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=4efdb5c0015561bdaa6c00a79090a2080ef2c964", "patch": "@@ -745,7 +745,7 @@ impl OsStr {\n                   without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n-        self.inner.to_str()\n+        self.inner.to_str().ok()\n     }\n \n     /// Converts an `OsStr` to a <code>[Cow]<[str]></code>.\n@@ -1165,6 +1165,24 @@ impl<'a> From<Cow<'a, OsStr>> for OsString {\n     }\n }\n \n+#[stable(feature = \"str_tryfrom_osstr_impl\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a> TryFrom<&'a OsStr> for &'a str {\n+    type Error = crate::str::Utf8Error;\n+\n+    /// Tries to convert an `&OsStr` to a `&str`.\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// let as_str = <&str>::try_from(os_str).unwrap();\n+    /// assert_eq!(as_str, \"foo\");\n+    /// ```\n+    fn try_from(value: &'a OsStr) -> Result<Self, Self::Error> {\n+        value.inner.to_str()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     #[inline]"}, {"sha": "f7333fd5a1fed10652aaddef155d104a56d39b89", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=4efdb5c0015561bdaa6c00a79090a2080ef2c964", "patch": "@@ -207,8 +207,8 @@ impl Slice {\n         unsafe { Slice::from_os_str_bytes_unchecked(s.as_bytes()) }\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n+        str::from_utf8(&self.inner)\n     }\n \n     pub fn to_string_lossy(&self) -> Cow<'_, str> {"}, {"sha": "16c4f55c6879a7af92789cc6eda65ea92a223945", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=4efdb5c0015561bdaa6c00a79090a2080ef2c964", "patch": "@@ -166,7 +166,7 @@ impl Slice {\n         unsafe { mem::transmute(Wtf8::from_str(s)) }\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n         self.inner.as_str()\n     }\n "}, {"sha": "c9d3e13cf0c56b60c68886c2586b06779da541cf", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=4efdb5c0015561bdaa6c00a79090a2080ef2c964", "patch": "@@ -626,13 +626,8 @@ impl Wtf8 {\n     ///\n     /// This does not copy the data.\n     #[inline]\n-    pub fn as_str(&self) -> Option<&str> {\n-        // Well-formed WTF-8 is also well-formed UTF-8\n-        // if and only if it contains no surrogate.\n-        match self.next_surrogate(0) {\n-            None => Some(unsafe { str::from_utf8_unchecked(&self.bytes) }),\n-            Some(_) => None,\n-        }\n+    pub fn as_str(&self) -> Result<&str, str::Utf8Error> {\n+        str::from_utf8(&self.bytes)\n     }\n \n     /// Creates an owned `Wtf8Buf` from a borrowed `Wtf8`."}, {"sha": "a07bbe6d7e425fcac4df32b9db82e07e3a0c45dc", "filename": "library/std/src/sys_common/wtf8/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efdb5c0015561bdaa6c00a79090a2080ef2c964/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs?ref=4efdb5c0015561bdaa6c00a79090a2080ef2c964", "patch": "@@ -521,11 +521,11 @@ fn wtf8_code_points() {\n \n #[test]\n fn wtf8_as_str() {\n-    assert_eq!(Wtf8::from_str(\"\").as_str(), Some(\"\"));\n-    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Some(\"a\u00e9 \ud83d\udca9\"));\n+    assert_eq!(Wtf8::from_str(\"\").as_str(), Ok(\"\"));\n+    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Ok(\"a\u00e9 \ud83d\udca9\"));\n     let mut string = Wtf8Buf::new();\n     string.push(CodePoint::from_u32(0xD800).unwrap());\n-    assert_eq!(string.as_str(), None);\n+    assert!(string.as_str().is_err());\n }\n \n #[test]"}]}