{"sha": "022f76d432f3e3289af68845d9169c1866c14d70", "node_id": "C_kwDOAAsO6NoAKDAyMmY3NmQ0MzJmM2UzMjg5YWY2ODg0NWQ5MTY5YzE4NjZjMTRkNzA", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2022-07-02T22:42:08Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-03-26T21:49:46Z"}, "message": "Added the new lint with some docs and tests", "tree": {"sha": "072011d4525bfebd816e78dd453796761fb7c040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072011d4525bfebd816e78dd453796761fb7c040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022f76d432f3e3289af68845d9169c1866c14d70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmQgvgEACgkQrtlL+hww\nE4kZsg/9EVgiHmAx1OKigzYJv5I6u+rOcSkpAF/BOzy9gwsI02SfgcZIfIGc0/6D\nQWsTMUSD4S8kAYW1nya/Wy2s9TRP8PBIRQPbPFOwWwaHngwWmvnBJKSSr64utPLl\nertH+6oOEVpU1ZLR40eFV2UeEsahGUzUqOXhiTbqzS9dCcMS2582ONRtGdf1ZFhf\nDQa/SaZNvo8DoRQ6mB83FiiTbKoeK7C/Z+u78fN2jC85nxKSh1HNrbHzVP96S/DF\neRzsQkGceGIanQbWRisGB5hwfatzLQUn9UE0Oo+Gpck+ifWHPDfV5lrHCmDLzhqY\nDFZXEq7LxYDLB798OsxMtTbf3Ea7+Q4tOlT8YUt2LHZQXEu12LXWX++ynLT3rr5B\nbAXxJEX42zBIwnVR0g1QAv2Kd4gT2l9PsyZFsxi1SmZGP7s6CxnR8nBCMpd89cVR\npHXfu7661KWi8mfPu8QbahobuDXdFQENafc/rGnyERRfTiw1prI661r+IMti15Vb\ndKjAaH/BMcb9IHlwyDt+PZSVQRNlqkrhDQ623sVlE+jZnwS05TS1j00T71NLbZ+G\nKCvnM9pW5cZsCKlhcFJWDeGsnrBG8OKLK+Ek3X5so1X8tiFKcj3vXygaaKWxqCmf\nnKdVsYHuldJwIHA+CnNZAH4bLAR4Igup1oLqh/L7xljH6x6MxKs=\n=rgOD\n-----END PGP SIGNATURE-----", "payload": "tree 072011d4525bfebd816e78dd453796761fb7c040\nparent 5ed64d4c612508ece912f170005abd7988865d10\nauthor Micha White <botahamec@outlook.com> 1656801728 -0400\ncommitter Micha White <botahamec@outlook.com> 1679867386 -0400\n\nAdded the new lint with some docs and tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022f76d432f3e3289af68845d9169c1866c14d70", "html_url": "https://github.com/rust-lang/rust/commit/022f76d432f3e3289af68845d9169c1866c14d70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022f76d432f3e3289af68845d9169c1866c14d70/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed64d4c612508ece912f170005abd7988865d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed64d4c612508ece912f170005abd7988865d10", "html_url": "https://github.com/rust-lang/rust/commit/5ed64d4c612508ece912f170005abd7988865d10"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "1a37ff2e171d054027d61c10413e4e2fa0a4f4aa", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -4974,6 +4974,7 @@ Released 2018-09-13\n [`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n+[`unnecessary_box_returns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n [`unnecessary_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map"}, {"sha": "89076e5d294f52b6dd59bb17e273218d744403c1", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -616,6 +616,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::unit_types::UNIT_CMP_INFO,\n     crate::unnamed_address::FN_ADDRESS_COMPARISONS_INFO,\n     crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n+    crate::unnecessary_box_returns::UNNECESSARY_BOX_RETURNS_INFO,\n     crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n     crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n     crate::unnecessary_struct_initialization::UNNECESSARY_STRUCT_INITIALIZATION_INFO,"}, {"sha": "c172ee263c6a1d084fba8929c847549a93410db9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -300,6 +300,7 @@ mod uninit_vec;\n mod unit_return_expecting_ord;\n mod unit_types;\n mod unnamed_address;\n+mod unnecessary_box_returns;\n mod unnecessary_owned_empty_strings;\n mod unnecessary_self_imports;\n mod unnecessary_struct_initialization;\n@@ -940,6 +941,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n     store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n+    store.register_late_pass(|_| Box::new(unnecessary_box_returns::UnnecessaryBoxReturns));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "533ee026500e8cde4e5c82eb9bb167541e4dbf93", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -0,0 +1,88 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def_id::LocalDefId, intravisit::FnKind, Body, FnDecl, FnRetTy};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for a return type containing a `Box<T>` where `T` implements `Sized`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It's better to just return `T` in these cases. The caller may not need\n+    /// the value to be boxed, and it's expensive to free the memory once the\n+    /// `Box<T>` been dropped.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo() -> Box<String> {\n+    ///     Box::new(String::from(\"Hello, world!\"))\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo() -> String {\n+    ///     String::from(\"Hello, world!\")\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub UNNECESSARY_BOX_RETURNS,\n+    pedantic,\n+    \"Needlessly returning a Box\"\n+}\n+declare_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n+\n+impl LateLintPass<'_> for UnnecessaryBoxReturns {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        fn_kind: FnKind<'_>,\n+        decl: &FnDecl<'_>,\n+        _: &Body<'_>,\n+        _: Span,\n+        def_id: LocalDefId,\n+    ) {\n+        // it's unclear what part of a closure you would span, so for now it's ignored\n+        // if this is changed, please also make sure not to call `hir_ty_to_ty` below\n+        if matches!(fn_kind, FnKind::Closure) {\n+            return;\n+        }\n+\n+        let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n+\n+        let return_ty = cx\n+            .tcx\n+            .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n+            .output();\n+\n+        if !return_ty.is_box() {\n+            return;\n+        }\n+\n+        let boxed_ty = return_ty.boxed_ty();\n+\n+        // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n+        if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_BOX_RETURNS,\n+                return_ty_hir.span,\n+                format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n+                |diagnostic| {\n+                    diagnostic.span_suggestion(\n+                        return_ty_hir.span,\n+                        \"try\",\n+                        boxed_ty.to_string(),\n+                        // the return value and function callers also needs to\n+                        // be changed, so this can't be MachineApplicable\n+                        Applicability::Unspecified,\n+                    );\n+                    diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "49e24878c82da60ea2b9912a91dcf3211900bdf2", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::unnecessary_box_returns)]\n+\n+struct Foo {}\n+\n+// lint\n+fn boxed_usize() -> Box<usize> {\n+    Box::new(5)\n+}\n+\n+// lint\n+fn boxed_foo() -> Box<Foo> {\n+    Box::new(Foo {})\n+}\n+\n+// don't lint: str is unsized\n+fn boxed_str() -> Box<str> {\n+    \"Hello, world!\".to_string().into_boxed_str()\n+}\n+\n+// don't lint: this has an unspecified return type\n+fn default() {}\n+\n+// don't lint: this doesn't return a Box\n+fn string() -> String {\n+    String::from(\"Hello, world\")\n+}\n+\n+fn main() {\n+    // don't lint: this is a closure\n+    let a = || -> Box<usize> { Box::new(5) };\n+}"}, {"sha": "8acaf33de047d0fd8a0a952533e37db60b0d6eb7", "filename": "tests/ui/unnecessary_box_returns.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/022f76d432f3e3289af68845d9169c1866c14d70/tests%2Fui%2Funnecessary_box_returns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022f76d432f3e3289af68845d9169c1866c14d70/tests%2Fui%2Funnecessary_box_returns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.stderr?ref=022f76d432f3e3289af68845d9169c1866c14d70", "patch": "@@ -0,0 +1,19 @@\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:6:21\n+   |\n+LL | fn boxed_usize() -> Box<usize> {\n+   |                     ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+   = note: `-D clippy::unnecessary-box-returns` implied by `-D warnings`\n+\n+error: boxed return of the sized type `Foo`\n+  --> $DIR/unnecessary_box_returns.rs:11:19\n+   |\n+LL | fn boxed_foo() -> Box<Foo> {\n+   |                   ^^^^^^^^ help: try: `Foo`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+\n+error: aborting due to 2 previous errors\n+"}]}