{"sha": "0c5fe37786425edf53db60f20fe68f86dcb0b481", "node_id": "C_kwDOAAsO6NoAKDBjNWZlMzc3ODY0MjVlZGY1M2RiNjBmMjBmZTY4Zjg2ZGNiMGI0ODE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-03T18:58:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-03T19:03:19Z"}, "message": "remove `inside_canonicalization_ctxt` flag\n\nwe never reach the code checking for this flag while the\nflag is enabled, so it does not change the behavior\nof the code.", "tree": {"sha": "a75ab8fdc64a989513307b569e02b0615123330b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75ab8fdc64a989513307b569e02b0615123330b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5fe37786425edf53db60f20fe68f86dcb0b481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fe37786425edf53db60f20fe68f86dcb0b481", "html_url": "https://github.com/rust-lang/rust/commit/0c5fe37786425edf53db60f20fe68f86dcb0b481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fe37786425edf53db60f20fe68f86dcb0b481/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "html_url": "https://github.com/rust-lang/rust/commit/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed"}], "stats": {"total": 58, "additions": 13, "deletions": 45}, "files": [{"sha": "315303b25fe4e0e0bf18e1c6a71335d6e4e6ab4f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=0c5fe37786425edf53db60f20fe68f86dcb0b481", "patch": "@@ -498,11 +498,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         let next_region = self.infcx.next_region_var(origin);\n         let vid = next_region.as_var();\n \n-        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(vid, ctxt);\n+            assert_eq!(var_to_origin.insert(vid, ctxt), None);\n         }\n \n         next_region\n@@ -520,11 +520,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         let next_region = self.infcx.next_nll_region_var(origin);\n         let vid = next_region.as_var();\n \n-        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(vid, ctxt);\n+            assert_eq!(var_to_origin.insert(vid, ctxt), None);\n         }\n \n         next_region"}, {"sha": "7158c62b548afb00250172969d09bea8e5dcbbfe", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=0c5fe37786425edf53db60f20fe68f86dcb0b481", "patch": "@@ -131,9 +131,13 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n-        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(reg.as_var(), RegionCtxt::Placeholder(reg_info));\n+            let new = RegionCtxt::Placeholder(reg_info);\n+            let prev = var_to_origin.insert(reg.as_var(), new);\n+            if let Some(prev) = prev {\n+                assert_eq!(new, prev);\n+            }\n         }\n \n         reg\n@@ -146,9 +150,10 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             universe,\n         );\n \n-        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(reg.as_var(), RegionCtxt::Existential(None));\n+            let prev = var_to_origin.insert(reg.as_var(), RegionCtxt::Existential(None));\n+            assert_eq!(prev, None);\n         }\n \n         reg"}, {"sha": "0c8854e962abb85a8f55bb743156b8959dd11ba3", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=0c5fe37786425edf53db60f20fe68f86dcb0b481", "patch": "@@ -30,8 +30,6 @@ use super::*;\n use rustc_middle::ty::relate::{Relate, TypeRelation};\n use rustc_middle::ty::{Const, ImplSubject};\n \n-use std::cell::Cell;\n-\n /// Whether we should define opaque types or just treat them opaquely.\n ///\n /// Currently only used to prevent predicate matching from matching anything\n@@ -84,7 +82,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n             intercrate: self.intercrate,\n-            inside_canonicalization_ctxt: Cell::new(self.inside_canonicalization_ctxt()),\n         }\n     }\n }"}, {"sha": "427d05c8b4da7d14e300b7a10418ac88544d8192", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=0c5fe37786425edf53db60f20fe68f86dcb0b481", "patch": "@@ -561,8 +561,6 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     where\n         V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n-        let _inside_canonical_ctxt_guard = infcx.set_canonicalization_ctxt();\n-\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::HAS_INFER |\n             TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`"}, {"sha": "a89b9931599023f88ce753ec16dc9f52faaa962e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fe37786425edf53db60f20fe68f86dcb0b481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=0c5fe37786425edf53db60f20fe68f86dcb0b481", "patch": "@@ -39,7 +39,6 @@ use rustc_span::Span;\n \n use std::cell::{Cell, RefCell};\n use std::fmt;\n-use std::ops::Drop;\n \n use self::combine::CombineFields;\n use self::error_reporting::TypeErrCtxt;\n@@ -342,11 +341,6 @@ pub struct InferCtxt<'tcx> {\n     /// there is no type that the user could *actually name* that\n     /// would satisfy it. This avoids crippling inference, basically.\n     pub intercrate: bool,\n-\n-    /// Flag that is set when we enter canonicalization. Used for debugging to ensure\n-    /// that we only collect region information for `BorrowckInferCtxt::reg_var_to_origin`\n-    /// inside non-canonicalization contexts.\n-    inside_canonicalization_ctxt: Cell<bool>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -638,7 +632,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n             intercrate,\n-            inside_canonicalization_ctxt: Cell::new(false),\n         }\n     }\n }\n@@ -1636,31 +1629,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n         }\n     }\n-\n-    pub fn inside_canonicalization_ctxt(&self) -> bool {\n-        self.inside_canonicalization_ctxt.get()\n-    }\n-\n-    pub fn set_canonicalization_ctxt(&self) -> CanonicalizationCtxtGuard<'_, 'tcx> {\n-        let prev_ctxt = self.inside_canonicalization_ctxt();\n-        self.inside_canonicalization_ctxt.set(true);\n-        CanonicalizationCtxtGuard { prev_ctxt, infcx: self }\n-    }\n-\n-    fn set_canonicalization_ctxt_to(&self, ctxt: bool) {\n-        self.inside_canonicalization_ctxt.set(ctxt);\n-    }\n-}\n-\n-pub struct CanonicalizationCtxtGuard<'cx, 'tcx> {\n-    prev_ctxt: bool,\n-    infcx: &'cx InferCtxt<'tcx>,\n-}\n-\n-impl<'cx, 'tcx> Drop for CanonicalizationCtxtGuard<'cx, 'tcx> {\n-    fn drop(&mut self) {\n-        self.infcx.set_canonicalization_ctxt_to(self.prev_ctxt)\n-    }\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {"}]}