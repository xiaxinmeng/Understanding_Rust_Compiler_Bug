{"sha": "0f271619e457ce8a2e32d822cce4c219bad58aa1", "node_id": "C_kwDOAAsO6NoAKDBmMjcxNjE5ZTQ1N2NlOGEyZTMyZDgyMmNjZTRjMjE5YmFkNThhYTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-24T05:53:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T05:53:23Z"}, "message": "Rollup merge of #110255 - clubby789:proc-macro-test-help, r=jackh726\n\nSuggest using integration tests for test crate using own proc-macro\n\ncc #110247", "tree": {"sha": "5e10000477138b8b584182bcbf22c6cd1a33c623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e10000477138b8b584182bcbf22c6cd1a33c623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f271619e457ce8a2e32d822cce4c219bad58aa1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRhlTCRBK7hj4Ov3rIwAAoOwIAFXQ4Qa+s1DRB+p70mGR3Vf/\nJs3iyyiF3OhrfV0QqRUDmWRiy3oBNBye9VmlRMfa6tdgdulYiz2phB97KIda5oW0\nLzS15KByolrWyCeAJCo4D56BY1GygaMnwaEzBIVRnbLFMvvNk492OBVeLV9PVRho\nyDgDpzCdFLTalOIYeipbL2HhDFCzUssK8jt5ExyZ0ze2Z2IDLM4CJHUz7mXPj3Wh\nTD3FLYJzwYsQ+cV2tQCxnjC1uhwl1/5zz7tVFzWZ6LntSIGVHGidUC4RFJrYAPmQ\nq9L7TvlsuQ5RlAhv7yGAlSHCgEHwoLHL3N/dBL0zVQnjEYIN/qhxWHBe9qHwXfE=\n=v7jD\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e10000477138b8b584182bcbf22c6cd1a33c623\nparent f65615f02d22b85e9205f2716ab36182d34bab2b\nparent f7581d8d219613d6aa2a017d31d230587a6076f6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682315603 +0200\ncommitter GitHub <noreply@github.com> 1682315603 +0200\n\nRollup merge of #110255 - clubby789:proc-macro-test-help, r=jackh726\n\nSuggest using integration tests for test crate using own proc-macro\n\ncc #110247\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f271619e457ce8a2e32d822cce4c219bad58aa1", "html_url": "https://github.com/rust-lang/rust/commit/0f271619e457ce8a2e32d822cce4c219bad58aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f271619e457ce8a2e32d822cce4c219bad58aa1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65615f02d22b85e9205f2716ab36182d34bab2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65615f02d22b85e9205f2716ab36182d34bab2b", "html_url": "https://github.com/rust-lang/rust/commit/f65615f02d22b85e9205f2716ab36182d34bab2b"}, {"sha": "f7581d8d219613d6aa2a017d31d230587a6076f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7581d8d219613d6aa2a017d31d230587a6076f6", "html_url": "https://github.com/rust-lang/rust/commit/f7581d8d219613d6aa2a017d31d230587a6076f6"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "192badcbc37ea9d6428209ca063266587d3984ae", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=0f271619e457ce8a2e32d822cce4c219bad58aa1", "patch": "@@ -223,3 +223,6 @@ resolve_remove_surrounding_derive =\n resolve_add_as_non_derive =\n     add as non-Derive macro\n     `#[{$macro_path}]`\n+\n+resolve_proc_macro_same_crate = can't use a procedural macro from the same crate that defines it\n+    .help = you can define integration tests in a directory named `tests`"}, {"sha": "6197af105a96580a5f4a728c8563aabb145e545e", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=0f271619e457ce8a2e32d822cce4c219bad58aa1", "patch": "@@ -508,3 +508,12 @@ pub(crate) struct RemoveSurroundingDerive {\n pub(crate) struct AddAsNonDerive<'a> {\n     pub(crate) macro_path: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_proc_macro_same_crate)]\n+pub(crate) struct ProcMacroSameCrate {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[help]\n+    pub(crate) is_test: bool,\n+}"}, {"sha": "2211fb56ccda1aac5fd810511c9e8d60a64e2b33", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f271619e457ce8a2e32d822cce4c219bad58aa1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=0f271619e457ce8a2e32d822cce4c219bad58aa1", "patch": "@@ -1,7 +1,7 @@\n //! A bunch of methods and structures more or less related to resolving macros and\n //! interface provided by `Resolver` to macro expander.\n \n-use crate::errors::{AddAsNonDerive, MacroExpectedFound, RemoveSurroundingDerive};\n+use crate::errors::{self, AddAsNonDerive, MacroExpectedFound, RemoveSurroundingDerive};\n use crate::Namespace::*;\n use crate::{BuiltinMacroState, Determinacy};\n use crate::{DeriveData, Finalize, ParentScope, ResolutionError, Resolver, ScopeSet};\n@@ -513,10 +513,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if let Some(def_id) = def_id.as_local() {\n                     self.unused_macros.remove(&def_id);\n                     if self.proc_macro_stubs.contains(&def_id) {\n-                        self.tcx.sess.span_err(\n-                            path.span,\n-                            \"can't use a procedural macro from the same crate that defines it\",\n-                        );\n+                        self.tcx.sess.emit_err(errors::ProcMacroSameCrate {\n+                            span: path.span,\n+                            is_test: self.tcx.sess.is_test_crate(),\n+                        });\n                     }\n                 }\n             }"}, {"sha": "c13f384fa3ae14a9474ad57a3ca6c8adc182d62c", "filename": "tests/ui/proc-macro/test-same-crate.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f271619e457ce8a2e32d822cce4c219bad58aa1/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f271619e457ce8a2e32d822cce4c219bad58aa1/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs?ref=0f271619e457ce8a2e32d822cce4c219bad58aa1", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: --test\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn mac(input: TokenStream) -> TokenStream { loop {} }\n+\n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn t() { crate::mac!(A) }\n+    //~^ ERROR can't use a procedural macro from the same crate that defines it\n+    //~| HELP you can define integration tests in a directory named `tests`\n+}"}, {"sha": "5d12e149c3c4cf7f87d87337549d03f9048e6744", "filename": "tests/ui/proc-macro/test-same-crate.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f271619e457ce8a2e32d822cce4c219bad58aa1/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f271619e457ce8a2e32d822cce4c219bad58aa1/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr?ref=0f271619e457ce8a2e32d822cce4c219bad58aa1", "patch": "@@ -0,0 +1,10 @@\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/test-same-crate.rs:13:14\n+   |\n+LL |     fn t() { crate::mac!(A) }\n+   |              ^^^^^^^^^^\n+   |\n+   = help: you can define integration tests in a directory named `tests`\n+\n+error: aborting due to previous error\n+"}]}