{"sha": "bfe610cc8d7d380cfaf83f03629a23747fc54fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZTYxMGNjOGQ3ZDM4MGNmYWY4M2YwMzYyOWEyMzc0N2ZjNTRmYWQ=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:03:12Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:08:51Z"}, "message": "ignore mutable self reference parameters", "tree": {"sha": "6183095e0cb215cc4800850b86206ef65ee02594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6183095e0cb215cc4800850b86206ef65ee02594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe610cc8d7d380cfaf83f03629a23747fc54fad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8tfJMACgkQoZMWSk0F\n7kTFyAgAlY0lO9GD9fdk5d57BAbXMTf3Snxiie2yGKW3gMvcCeFMtEDs1wqpHZQ9\nmyU1ETyoNBmXcEZ3OO3q5bMUKeK2nJ2ZBq/K/Dl7+MoDvbdkq+WaRyTLU89+Yrwk\nfcnE5XYujaINBVQdF0cJSfqoYkqFizk/KGKqEcDK79KNjXrsSTXUfcz+qK8sM7bQ\nQ+YpWaqX38dFoHahA5lpEeZX8PzI3k+0ndKWgdd7dna09omhGLYq3BNDPQnvax+8\n0LQLWkm2BBo2zFtYR7xZDmfoWF9mM7k1xMEN8X+/g4jdZg1R99i6QG1tKoIoUzgb\nAdeSXPFVy3BtdPWWftqX+iyq8POqnQ==\n=G/aG\n-----END PGP SIGNATURE-----", "payload": "tree 6183095e0cb215cc4800850b86206ef65ee02594\nparent e03f73e627721c35459886781af281632cac299d\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596816192 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1596816531 +0200\n\nignore mutable self reference parameters\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe610cc8d7d380cfaf83f03629a23747fc54fad", "html_url": "https://github.com/rust-lang/rust/commit/bfe610cc8d7d380cfaf83f03629a23747fc54fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe610cc8d7d380cfaf83f03629a23747fc54fad/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e03f73e627721c35459886781af281632cac299d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03f73e627721c35459886781af281632cac299d", "html_url": "https://github.com/rust-lang/rust/commit/e03f73e627721c35459886781af281632cac299d"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "38bdd0f7ed23bdd49dda3fd8443a91be55ea81c7", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe610cc8d7d380cfaf83f03629a23747fc54fad/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe610cc8d7d380cfaf83f03629a23747fc54fad/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=bfe610cc8d7d380cfaf83f03629a23747fc54fad", "patch": "@@ -104,8 +104,12 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n                 }\n             },\n             TyKind::Rptr(lifetime, mut_ty) => {\n-                if let TyKind::Path(None, path) = &mut_ty.ty.kind {\n-                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                if_chain! {\n+                if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n+                if let PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, _) = p.pat.kind;\n+                    then {\n+                        check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                    }\n                 }\n             },\n             _ => {},"}, {"sha": "9da21eb6b29b82ff9ce6283373d2f1819c8f0ebb", "filename": "tests/ui/needless_arbitrary_self_type.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.fixed?ref=bfe610cc8d7d380cfaf83f03629a23747fc54fad", "patch": "@@ -57,7 +57,7 @@ impl ValType {\n         unimplemented!();\n     }\n \n-    pub fn mut_ref_mut_bad(&mut self) {\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n         unimplemented!();\n     }\n "}, {"sha": "17aeaaf97ac73ab792661dc03cf95f14035746f3", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=bfe610cc8d7d380cfaf83f03629a23747fc54fad", "patch": "@@ -57,7 +57,7 @@ impl ValType {\n         unimplemented!();\n     }\n \n-    pub fn mut_ref_mut_bad(mut self: &mut Self) {\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n         unimplemented!();\n     }\n "}, {"sha": "f4c645d35c8f134a05fa4bd1d1665d65a42a4d5a", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe610cc8d7d380cfaf83f03629a23747fc54fad/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=bfe610cc8d7d380cfaf83f03629a23747fc54fad", "patch": "@@ -36,11 +36,5 @@ error: the type of the `self` parameter does not need to be arbitrary\n LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n    |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n \n-error: the type of the `self` parameter does not need to be arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:60:28\n-   |\n-LL |     pub fn mut_ref_mut_bad(mut self: &mut Self) {\n-   |                            ^^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}]}