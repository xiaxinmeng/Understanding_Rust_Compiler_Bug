{"sha": "95c06a29707c8b2f811495c05b0cd009743e29de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzA2YTI5NzA3YzhiMmY4MTE0OTVjMDViMGNkMDA5NzQzZTI5ZGU=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-09-05T11:30:30Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-10-22T17:23:10Z"}, "message": "Apply clippy::needless_return suggestions", "tree": {"sha": "78374dc1757b47bc5c54e9095da0e66395c889c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78374dc1757b47bc5c54e9095da0e66395c889c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c06a29707c8b2f811495c05b0cd009743e29de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c06a29707c8b2f811495c05b0cd009743e29de", "html_url": "https://github.com/rust-lang/rust/commit/95c06a29707c8b2f811495c05b0cd009743e29de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c06a29707c8b2f811495c05b0cd009743e29de/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffc1b32820d740b3e2b3cf8e98b4d0511a62163", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffc1b32820d740b3e2b3cf8e98b4d0511a62163", "html_url": "https://github.com/rust-lang/rust/commit/dffc1b32820d740b3e2b3cf8e98b4d0511a62163"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "8f3dfabd8886d6286ae8949ddfd8bf1c1e00ffe9", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -1817,7 +1817,7 @@ impl<T> VecDeque<T> {\n             }\n         }\n \n-        return elem;\n+        elem\n     }\n \n     /// Splits the `VecDeque` into two at the given index."}, {"sha": "83816d8b954c4dbbd7e3e0ccf3c76185319a5fc8", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -456,7 +456,7 @@ impl str {\n                 }\n             }\n         }\n-        return s;\n+        s\n     }\n \n     /// Converts a [`Box<str>`] into a [`String`] without copying or allocating."}, {"sha": "80d6c6e0d43907bbdf936a9e8f1a34a7b5efaa3f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -1638,7 +1638,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n             }\n         }\n \n-        return Weak { ptr: self.ptr };\n+        Weak { ptr: self.ptr }\n     }\n }\n "}, {"sha": "a35847c85fc206476f78174e406781cca340c90b", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -156,21 +156,21 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n     if actions as i32 & uw::_UA_SEARCH_PHASE as i32 != 0 {\n         match eh_action {\n             EHAction::None |\n-            EHAction::Cleanup(_) => return uw::_URC_CONTINUE_UNWIND,\n-            EHAction::Catch(_) => return uw::_URC_HANDLER_FOUND,\n-            EHAction::Terminate => return uw::_URC_FATAL_PHASE1_ERROR,\n+            EHAction::Cleanup(_) => uw::_URC_CONTINUE_UNWIND,\n+            EHAction::Catch(_) => uw::_URC_HANDLER_FOUND,\n+            EHAction::Terminate => uw::_URC_FATAL_PHASE1_ERROR,\n         }\n     } else {\n         match eh_action {\n-            EHAction::None => return uw::_URC_CONTINUE_UNWIND,\n+            EHAction::None => uw::_URC_CONTINUE_UNWIND,\n             EHAction::Cleanup(lpad) |\n             EHAction::Catch(lpad) => {\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.0, exception_object as uintptr_t);\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.1, 0);\n                 uw::_Unwind_SetIP(context, lpad);\n-                return uw::_URC_INSTALL_CONTEXT;\n+                uw::_URC_INSTALL_CONTEXT\n             }\n-            EHAction::Terminate => return uw::_URC_FATAL_PHASE2_ERROR,\n+            EHAction::Terminate => uw::_URC_FATAL_PHASE2_ERROR,\n         }\n     }\n }"}, {"sha": "16b699a44379979f7eda4031937e072e7b8d4d8c", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -46,7 +46,7 @@ pub fn payload() -> *mut u8 {\n \n pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     let panic_ctx = Box::from_raw(ptr as *mut PanicData);\n-    return panic_ctx.data;\n+    panic_ctx.data\n }\n \n // SEH doesn't support resuming unwinds after calling a landing pad like"}, {"sha": "619b182019081fd8e3094e98d9b390b3d8371934", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -217,7 +217,7 @@ pub fn update_panic_count(amt: isize) -> usize {\n     PANIC_COUNT.with(|c| {\n         let next = (c.get() as isize + amt) as usize;\n         c.set(next);\n-        return next\n+        next\n     })\n }\n "}, {"sha": "be112f6fc032923f75b2069e5bcd741d8f109a05", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -8,7 +8,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n                                              mem::size_of_val(&v));\n         imp::fill_bytes(view);\n     }\n-    return v\n+    v\n }\n \n #[cfg(all(unix,"}, {"sha": "3986cda1a50477e01839c4601c6877b394679f9a", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -46,7 +46,7 @@ impl Handle {\n     pub fn into_raw(self) -> c::HANDLE {\n         let ret = self.raw();\n         mem::forget(self);\n-        return ret;\n+        ret\n     }\n }\n "}, {"sha": "79dec1adf4bc8a9e194bd8acbbb1f85f1341f5db", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -144,7 +144,7 @@ fn kind() -> Kind {\n         Some(..) => Kind::SRWLock,\n     };\n     KIND.store(ret as usize, Ordering::SeqCst);\n-    return ret;\n+    ret\n }\n \n pub struct ReentrantMutex { inner: UnsafeCell<MaybeUninit<c::CRITICAL_SECTION>> }"}, {"sha": "61393680883fd509ee407a3155e6ca5bacdea38f", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -257,7 +257,7 @@ impl Stdio {\n                         let ret = io.duplicate(0, true,\n                                                c::DUPLICATE_SAME_ACCESS);\n                         io.into_raw();\n-                        return ret\n+                        ret\n                     }\n                     Err(..) => Ok(Handle::new(c::INVALID_HANDLE_VALUE)),\n                 }"}, {"sha": "993831bec188698d85939205e5aa74a208323c62", "filename": "src/libstd/sys/windows/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -13,7 +13,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n         panic!(\"couldn't generate random bytes: {}\",\n                io::Error::last_os_error());\n     }\n-    return v\n+    v\n }\n \n #[cfg(target_vendor = \"uwp\")]"}, {"sha": "728257cdd4bb14517efa588da53b2f5b189e8cbc", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -52,7 +52,7 @@ pub unsafe fn create(dtor: Option<Dtor>) -> Key {\n     if let Some(f) = dtor {\n         register_dtor(key, f);\n     }\n-    return key;\n+    key\n }\n \n #[inline]"}, {"sha": "bd533c93d434c5420cc494aa489413515e56ea53", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -80,7 +80,7 @@ impl SystemTime {\n         unsafe {\n             let mut t: SystemTime = mem::zeroed();\n             c::GetSystemTimeAsFileTime(&mut t.t);\n-            return t\n+            t\n         }\n     }\n \n@@ -228,7 +228,7 @@ mod perf_counter {\n                 FREQUENCY = frequency;\n                 STATE.store(2, SeqCst);\n             }\n-            return frequency;\n+            frequency\n         }\n     }\n "}, {"sha": "c86bfd16c21b185dc4250fe56315fecbdbd844ec", "filename": "src/libtest/bench.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fbench.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -48,7 +48,7 @@ impl Bencher {\n         F: FnMut(&mut Bencher),\n     {\n         f(self);\n-        return self.summary;\n+        self.summary\n     }\n }\n \n@@ -116,7 +116,7 @@ where\n     for _ in 0..k {\n         black_box(inner());\n     }\n-    return ns_from_dur(start.elapsed());\n+    ns_from_dur(start.elapsed())\n }\n \n pub fn iter<T, F>(inner: &mut F) -> stats::Summary"}, {"sha": "a34426305be2e82a87ac6d209b973f78a86bff1d", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -149,7 +149,7 @@ fn optgroups() -> getopts::Options {\n             `CRITICAL_TIME` here means the limit that should not be exceeded by test.\n             \"\n         );\n-    return opts;\n+    opts\n }\n \n fn usage(binary: &str, options: &getopts::Options) {"}, {"sha": "244cbd2cf5fe807b702c836d44e022f881800914", "filename": "src/libtest/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c06a29707c8b2f811495c05b0cd009743e29de/src%2Flibtest%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fconsole.rs?ref=95c06a29707c8b2f811495c05b0cd009743e29de", "patch": "@@ -296,7 +296,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n \n     assert!(st.current_test_count() == st.total);\n \n-    return out.write_run_finish(&st);\n+    out.write_run_finish(&st)\n }\n \n // Calculates padding for given test description."}]}