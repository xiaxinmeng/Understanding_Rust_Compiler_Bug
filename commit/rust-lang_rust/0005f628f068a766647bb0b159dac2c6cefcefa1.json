{"sha": "0005f628f068a766647bb0b159dac2c6cefcefa1", "node_id": "C_kwDOAAsO6NoAKDAwMDVmNjI4ZjA2OGE3NjY2NDdiYjBiMTU5ZGFjMmM2Y2VmY2VmYTE", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T06:46:05Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:15Z"}, "message": "Refactor diagnostics in `handle_errors` function", "tree": {"sha": "214a5c91f7a6bb23dcd1b2d2ace4b7a9b038e660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214a5c91f7a6bb23dcd1b2d2ace4b7a9b038e660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0005f628f068a766647bb0b159dac2c6cefcefa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0005f628f068a766647bb0b159dac2c6cefcefa1", "html_url": "https://github.com/rust-lang/rust/commit/0005f628f068a766647bb0b159dac2c6cefcefa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0005f628f068a766647bb0b159dac2c6cefcefa1/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0dc8d78019ca924203fe153ff0af7f64f68cb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0dc8d78019ca924203fe153ff0af7f64f68cb5d", "html_url": "https://github.com/rust-lang/rust/commit/e0dc8d78019ca924203fe153ff0af7f64f68cb5d"}], "stats": {"total": 285, "additions": 254, "deletions": 31}, "files": [{"sha": "b43551db43d67b43cd1a56622e5e6c6743c7b8e0", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=0005f628f068a766647bb0b159dac2c6cefcefa1", "patch": "@@ -14,6 +14,8 @@ use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n \n+use crate::session_diagnostics;\n+\n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n }\n@@ -25,46 +27,38 @@ enum AttrError {\n     NonIdentFeature,\n     MissingFeature,\n     MultipleStabilityLevels,\n-    UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n+    UnsupportedLiteral(UnsupportedLiteralReason, /* is_bytestr */ bool),\n+}\n+\n+pub(crate) enum UnsupportedLiteralReason {\n+    Generic,\n+    CfgString,\n+    DeprecatedString,\n+    DeprecatedKvPair,\n }\n \n fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n-    let diag = &sess.span_diagnostic;\n     match error {\n         AttrError::MultipleItem(item) => {\n-            struct_span_err!(diag, span, E0538, \"multiple '{}' items\", item).emit();\n+            sess.emit_err(session_diagnostics::MultipleItem { span, item });\n         }\n         AttrError::UnknownMetaItem(item, expected) => {\n-            let expected = expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n-            struct_span_err!(diag, span, E0541, \"unknown meta item '{}'\", item)\n-                .span_label(span, format!(\"expected one of {}\", expected.join(\", \")))\n-                .emit();\n+            sess.emit_err(session_diagnostics::UnknownMetaItem { span, item, expected });\n         }\n         AttrError::MissingSince => {\n-            struct_span_err!(diag, span, E0542, \"missing 'since'\").emit();\n+            sess.emit_err(session_diagnostics::MissingSince { span });\n         }\n         AttrError::NonIdentFeature => {\n-            struct_span_err!(diag, span, E0546, \"'feature' is not an identifier\").emit();\n+            sess.emit_err(session_diagnostics::NonIdentFeature { span });\n         }\n         AttrError::MissingFeature => {\n-            struct_span_err!(diag, span, E0546, \"missing 'feature'\").emit();\n+            sess.emit_err(session_diagnostics::MissingFeature { span });\n         }\n         AttrError::MultipleStabilityLevels => {\n-            struct_span_err!(diag, span, E0544, \"multiple stability levels\").emit();\n+            sess.emit_err(session_diagnostics::MultipleStabilityLevels { span });\n         }\n-        AttrError::UnsupportedLiteral(msg, is_bytestr) => {\n-            let mut err = struct_span_err!(diag, span, E0565, \"{}\", msg);\n-            if is_bytestr {\n-                if let Ok(lint_str) = sess.source_map().span_to_snippet(span) {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider removing the prefix\",\n-                        &lint_str[1..],\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-            }\n-            err.emit();\n+        AttrError::UnsupportedLiteral(reason, is_bytestr) => {\n+            sess.emit_err(session_diagnostics::UnsupportedLiteral { span, reason, is_bytestr });\n         }\n     }\n }\n@@ -326,7 +320,7 @@ where\n                             handle_errors(\n                                 &sess.parse_sess,\n                                 meta.span(),\n-                                AttrError::UnsupportedLiteral(\"unsupported literal\", false),\n+                                AttrError::UnsupportedLiteral(UnsupportedLiteralReason::Generic, false),\n                             );\n                             continue 'outer;\n                         };\n@@ -494,7 +488,10 @@ where\n                                 handle_errors(\n                                     &sess.parse_sess,\n                                     lit.span,\n-                                    AttrError::UnsupportedLiteral(\"unsupported literal\", false),\n+                                    AttrError::UnsupportedLiteral(\n+                                        UnsupportedLiteralReason::Generic,\n+                                        false,\n+                                    ),\n                                 );\n                                 continue 'outer;\n                             }\n@@ -711,7 +708,7 @@ pub fn eval_condition(\n                     handle_errors(\n                         sess,\n                         mi.span(),\n-                        AttrError::UnsupportedLiteral(\"unsupported literal\", false),\n+                        AttrError::UnsupportedLiteral(UnsupportedLiteralReason::Generic, false),\n                     );\n                     return false;\n                 }\n@@ -790,7 +787,7 @@ pub fn eval_condition(\n                 sess,\n                 lit.span,\n                 AttrError::UnsupportedLiteral(\n-                    \"literal in `cfg` predicate value must be a string\",\n+                    UnsupportedLiteralReason::CfgString,\n                     lit.kind.is_bytestr(),\n                 ),\n             );\n@@ -870,8 +867,7 @@ where\n                                 &sess.parse_sess,\n                                 lit.span,\n                                 AttrError::UnsupportedLiteral(\n-                                    \"literal in `deprecated` \\\n-                                    value must be a string\",\n+                                    UnsupportedLiteralReason::DeprecatedString,\n                                     lit.kind.is_bytestr(),\n                                 ),\n                             );\n@@ -934,7 +930,7 @@ where\n                                 &sess.parse_sess,\n                                 lit.span,\n                                 AttrError::UnsupportedLiteral(\n-                                    \"item in `deprecated` must be a key/value pair\",\n+                                    UnsupportedLiteralReason::DeprecatedKvPair,\n                                     false,\n                                 ),\n                             );"}, {"sha": "36a3620b6b9a214a488b86708fe948930810fbdc", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=0005f628f068a766647bb0b159dac2c6cefcefa1", "patch": "@@ -10,6 +10,7 @@\n extern crate rustc_macros;\n \n mod builtin;\n+mod session_diagnostics;\n \n pub use builtin::*;\n pub use IntType::*;"}, {"sha": "92ce9336edc592a0efa3d7f49d9f2e8e3734459b", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=0005f628f068a766647bb0b159dac2c6cefcefa1", "patch": "@@ -0,0 +1,196 @@\n+use std::num::IntErrorKind;\n+\n+use rustc_errors::{error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_macros::SessionDiagnostic;\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_span::Span;\n+\n+use crate::UnsupportedLiteralReason;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::multiple_item, code = \"E0538\")]\n+pub(crate) struct MultipleItem {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub item: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_since, code = \"E0542\")]\n+pub(crate) struct MissingSince {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::non_ident_feature, code = \"E0546\")]\n+pub(crate) struct NonIdentFeature {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_feature, code = \"E0546\")]\n+pub(crate) struct MissingFeature {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::multiple_stability_levels, code = \"E0544\")]\n+pub(crate) struct MultipleStabilityLevels {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_meta_item, code = \"E0539\")]\n+pub(crate) struct InvalidMetaItem {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_issue, code = \"E0547\")]\n+pub(crate) struct MissingIssue {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::rustc_promotable_pairing, code = \"E0717\")]\n+pub(crate) struct RustcPromotablePairing {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n+pub(crate) struct RustcAllowedUnstablePairing {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::soft_no_args)]\n+pub(crate) struct SoftNoArgs {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_issue_string, code = \"E0545\")]\n+pub(crate) struct InvalidIssueString {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    #[subdiagnostic]\n+    pub cause: Option<InvalidIssueStringCause>,\n+}\n+\n+// The error kinds of `IntErrorKind` are duplicated here in order to allow the messages to be\n+// translatable.\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum InvalidIssueStringCause {\n+    #[label(attr::must_not_be_zero)]\n+    MustNotBeZero {\n+        #[primary_span]\n+        span: Span,\n+    },\n+\n+    #[label(attr::empty)]\n+    Empty {\n+        #[primary_span]\n+        span: Span,\n+    },\n+\n+    #[label(attr::invalid_digit)]\n+    InvalidDigit {\n+        #[primary_span]\n+        span: Span,\n+    },\n+\n+    #[label(attr::pos_overflow)]\n+    PosOverflow {\n+        #[primary_span]\n+        span: Span,\n+    },\n+\n+    #[label(attr::neg_overflow)]\n+    NegOverflow {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+impl InvalidIssueStringCause {\n+    pub fn from_int_error_kind(span: Span, kind: &IntErrorKind) -> Option<Self> {\n+        match kind {\n+            IntErrorKind::Empty => Some(Self::Empty { span }),\n+            IntErrorKind::InvalidDigit => Some(Self::InvalidDigit { span }),\n+            IntErrorKind::PosOverflow => Some(Self::PosOverflow { span }),\n+            IntErrorKind::NegOverflow => Some(Self::NegOverflow { span }),\n+            IntErrorKind::Zero => Some(Self::MustNotBeZero { span }),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+pub(crate) struct UnknownMetaItem<'a> {\n+    pub span: Span,\n+    pub item: String,\n+    pub expected: &'a [&'a str],\n+}\n+\n+// Manual implementation to be able to format `expected` items correctly.\n+impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n+        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            fluent::attr::unknown_meta_item,\n+            error_code!(E0541),\n+        );\n+        diag.set_arg(\"item\", self.item);\n+        diag.set_arg(\"expected\", expected.join(\", \"));\n+        diag.span_label(self.span, fluent::attr::label);\n+        diag\n+    }\n+}\n+\n+pub(crate) struct UnsupportedLiteral {\n+    pub span: Span,\n+    pub reason: UnsupportedLiteralReason,\n+    pub is_bytestr: bool,\n+}\n+\n+impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            match self.reason {\n+                UnsupportedLiteralReason::Generic => fluent::attr::unsupported_literal_generic,\n+                UnsupportedLiteralReason::CfgString => fluent::attr::unsupported_literal_cfg_string,\n+                UnsupportedLiteralReason::DeprecatedString => {\n+                    fluent::attr::unsupported_literal_deprecated_string\n+                }\n+                UnsupportedLiteralReason::DeprecatedKvPair => {\n+                    fluent::attr::unsupported_literal_deprecated_kv_pair\n+                }\n+            },\n+            error_code!(E0565),\n+        );\n+        if self.is_bytestr {\n+            if let Ok(lint_str) = sess.source_map().span_to_snippet(self.span) {\n+                diag.span_suggestion(\n+                    self.span,\n+                    fluent::attr::unsupported_literal_suggestion,\n+                    &lint_str[1..],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+        diag\n+    }\n+}"}, {"sha": "a8207b1f7bc37a635b830eaa9d5e52c863d3d738", "filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl?ref=0005f628f068a766647bb0b159dac2c6cefcefa1", "patch": "@@ -0,0 +1,29 @@\n+attr_multiple_item =\n+    multiple '{$item}' items\n+\n+attr_unknown_meta_item =\n+    unknown meta item '{$item}'\n+    .label = expected one of {$expected}\n+\n+attr_missing_since =\n+    missing 'since'\n+\n+attr_non_ident_feature =\n+    'feature' is not an identifier\n+\n+attr_missing_feature =\n+    missing 'feature'\n+\n+attr_multiple_stability_levels =\n+    multiple stability levels\n+\n+attr_unsupported_literal_generic =\n+    unsupported literal\n+attr_unsupported_literal_cfg_string =\n+    literal in `cfg` predicate value must be a string\n+attr_unsupported_literal_deprecated_string =\n+    literal in `deprecated` value must be a string\n+attr_unsupported_literal_deprecated_kv_pair =\n+    item in `deprecated` must be a key/value pair\n+attr_unsupported_literal_suggestion =\n+    consider removing the prefix"}, {"sha": "ab09a902b0a7acfecdb6dd406ad1e2592f601977", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0005f628f068a766647bb0b159dac2c6cefcefa1/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=0005f628f068a766647bb0b159dac2c6cefcefa1", "patch": "@@ -33,6 +33,7 @@ pub use unic_langid::{langid, LanguageIdentifier};\n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n fluent_messages! {\n     ast_passes => \"../locales/en-US/ast_passes.ftl\",\n+    attr => \"../locales/en-US/attr.ftl\",\n     borrowck => \"../locales/en-US/borrowck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\","}]}