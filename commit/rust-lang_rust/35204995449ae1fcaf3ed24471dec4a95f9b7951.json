{"sha": "35204995449ae1fcaf3ed24471dec4a95f9b7951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MjA0OTk1NDQ5YWUxZmNhZjNlZDI0NDcxZGVjNGE5NWY5Yjc5NTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-12T13:37:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-16T22:05:56Z"}, "message": "Port the tests to the decl foo<T> syntax.", "tree": {"sha": "7b2b6f6e935e77876d35985ae8ee48293cd89106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b2b6f6e935e77876d35985ae8ee48293cd89106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35204995449ae1fcaf3ed24471dec4a95f9b7951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35204995449ae1fcaf3ed24471dec4a95f9b7951", "html_url": "https://github.com/rust-lang/rust/commit/35204995449ae1fcaf3ed24471dec4a95f9b7951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35204995449ae1fcaf3ed24471dec4a95f9b7951/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4abc471390d897e97e07eafcb723a8dcb59c520f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4abc471390d897e97e07eafcb723a8dcb59c520f", "html_url": "https://github.com/rust-lang/rust/commit/4abc471390d897e97e07eafcb723a8dcb59c520f"}], "stats": {"total": 322, "additions": 161, "deletions": 161}, "files": [{"sha": "dbbce0ee8a17bd57e8b005c9216e274b9a86d4a7", "filename": "src/fuzzer/ast_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ffuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ffuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fast_match.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::vec;\n \n-fn ivec_equal[T](v: &[T], u: &[T], element_equality_test: fn(&T, &T) -> bool )\n+fn ivec_equal<T>(v: &[T], u: &[T], element_equality_test: fn(&T, &T) -> bool )\n    -> bool {\n     let Lv = vec::len(v);\n     if Lv != vec::len(u) { ret false; }\n@@ -13,7 +13,7 @@ fn ivec_equal[T](v: &[T], u: &[T], element_equality_test: fn(&T, &T) -> bool )\n     ret true;\n }\n \n-fn builtin_equal[T](a: &T, b: &T) -> bool { ret a == b; }\n+fn builtin_equal<T>(a: &T, b: &T) -> bool { ret a == b; }\n \n fn main() {\n     assert (builtin_equal(5, 5));"}, {"sha": "f6681bf70bd790b2be864c55734e8853bfda54fd", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -7,7 +7,7 @@ Idea: provide functions for 'exhaustive' and 'random' modification of vecs.\n   two functions, \"return the number of possible edits\" and \"return edit #n\"\n \n It would be nice if this could be data-driven, so the two functions could share information:\n-  type vec_modifier = rec(fn (&[T] v, uint i) -> [T] fun, uint lo, uint di);\n+  type vec_modifier = rec(fn (&<T> v, uint i) -> [T] fun, uint lo, uint di);\n   const [vec_modifier] vec_modifiers = ~[rec(fun=vec_omit, 0u, 1u), ...];\n But that gives me \"error: internal compiler error unimplemented consts that's not a plain literal\".\n https://github.com/graydon/rust/issues/570\n@@ -26,24 +26,24 @@ import std::ivec::slice;\n import std::ivec::len;\n import std::int;\n \n-//fn vec_reverse(&[T] v) -> [T] { ... }\n+//fn vec_reverse(&<T> v) -> [T] { ... }\n \n-fn vec_omit[T](v: &[T], i: uint) -> [T] {\n+fn vec_omit<T>(v: &[T], i: uint) -> [T] {\n     slice(v, 0u, i) + slice(v, i + 1u, len(v))\n }\n-fn vec_dup[T](v: &[T], i: uint) -> [T] {\n+fn vec_dup<T>(v: &[T], i: uint) -> [T] {\n     slice(v, 0u, i) + ~[v.(i)] + slice(v, i, len(v))\n }\n-fn vec_swadj[T](v: &[T], i: uint) -> [T] {\n+fn vec_swadj<T>(v: &[T], i: uint) -> [T] {\n     slice(v, 0u, i) + ~[v.(i + 1u), v.(i)] + slice(v, i + 2u, len(v))\n }\n-fn vec_prefix[T](v: &[T], i: uint) -> [T] { slice(v, 0u, i) }\n-fn vec_suffix[T](v: &[T], i: uint) -> [T] { slice(v, i, len(v)) }\n+fn vec_prefix<T>(v: &[T], i: uint) -> [T] { slice(v, 0u, i) }\n+fn vec_suffix<T>(v: &[T], i: uint) -> [T] { slice(v, i, len(v)) }\n \n-fn vec_poke[T](v: &[T], i: uint, x: &T) -> [T] {\n+fn vec_poke<T>(v: &[T], i: uint, x: &T) -> [T] {\n     slice(v, 0u, i) + ~[x] + slice(v, i + 1u, len(v))\n }\n-fn vec_insert[T](v: &[T], i: uint, x: &T) -> [T] {\n+fn vec_insert<T>(v: &[T], i: uint, x: &T) -> [T] {\n     slice(v, 0u, i) + ~[x] + slice(v, i, len(v))\n }\n \n@@ -54,7 +54,7 @@ iter ix(skip_low: uint, skip_high: uint, length: uint) -> uint {\n }\n \n // Returns a bunch of modified versions of v, some of which introduce new elements (borrowed from xs).\n-fn vec_edits[T](v: &[T], xs: &[T]) -> [[T]] {\n+fn vec_edits<T>(v: &[T], xs: &[T]) -> [[T]] {\n     let edits: [[T]] = ~[];\n     let Lv: uint = len(v);\n "}, {"sha": "3e94bdfd9ebca6c7716b56e7e7944113fde72dc1", "filename": "src/test/compile-fail/bad-type-env-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,7 +2,7 @@\n // xfail-stage2\n // xfail-stage3\n // error-pattern: attempted dynamic environment-capture\n-fn foo[T]() {\n+fn foo<T>() {\n     obj bar(b: T) { }\n }\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "bb1d8bafcd88b22c7375ec93bcb0c74f2cf557aa", "filename": "src/test/compile-fail/item-name-overload.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,8 +2,8 @@\n // error-pattern: Dynamically sized arguments must be passed by alias\n \n mod foo {\n-    fn bar[T](f: T) -> int { ret 17; }\n-    type bar[U, T] = {a: int, b: U, c: T};\n+    fn bar<T>(f: T) -> int { ret 17; }\n+    type bar<U, T> = {a: int, b: U, c: T};\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "413ea8836184cee8b352057e4929867b13176951", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Attempt to use a type argument out of scope\n-fn hd[U](v: &[U]) -> U {\n+fn hd<U>(v: &[U]) -> U {\n     fn hd1(w: &[U]) -> U { ret w.(0); }\n \n     ret hd1(v);"}, {"sha": "802fa934f0c9a47c8663e11671703cb21dc8fb53", "filename": "src/test/compile-fail/occurs-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:mismatched types\n // From Issue #778\n-tag clam[T] { a(T); }\n+tag clam<T> { a(T); }\n fn main() { let c; c = a(c); alt c { a[int](_) { } } }"}, {"sha": "538fc36e91cc555f9e75e263dd912443e2aa6fed", "filename": "src/test/compile-fail/tag-type-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: Wrong number of type arguments\n \n-tag quux[T] { }\n+tag quux<T> { }\n \n fn foo(c: quux) { assert (false); }\n \n-fn main() { fail; }\n\\ No newline at end of file\n+fn main() { fail; }"}, {"sha": "a3ae6619b3e8c1db28ba556c1c865c2df2fbb722", "filename": "src/test/compile-fail/type-arg-out-of-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Attempt to use a type argument out of scope\n-fn foo[T](x: &T) {\n+fn foo<T>(x: &T) {\n     fn bar(f: fn(&T) -> T ) { }\n }\n-fn main() { foo(1); }\n\\ No newline at end of file\n+fn main() { foo(1); }"}, {"sha": "41a511b396c573932e6095b8bf4107feb3eb40c8", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -167,7 +167,7 @@ fn worker(p: _port<request>) {\n     }\n }\n \n-fn with_lib_path[T](path: &str, f: fn() -> T ) -> T {\n+fn with_lib_path<T>(path: &str, f: fn() -> T ) -> T {\n     let maybe_oldpath = getenv(util::lib_path_env_var());\n     append_lib_path(path);\n     let res = f();"}, {"sha": "176b95343eb8dbc8b41464e5a0c3ee660c3574c5", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -6,11 +6,11 @@ fn test00_start(ch: chan_t<int>, message: int) {\n type task_id = int;\n type port_id = int;\n \n-type chan_t[~T] = {\n+type chan_t<~T> = {\n     task : task_id,\n     port : port_id\n };\n \n-fn send[~T](ch : chan_t<T>, data : -T) { fail; }\n+fn send<~T>(ch : chan_t<T>, data : -T) { fail; }\n \n fn main() { fail \"quux\"; }"}, {"sha": "55843e4bbe1573305e1d09924cf6db3b168058e5", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,7 +4,7 @@ import std::comm::_chan;\n import std::comm::mk_port;\n import std::comm::send;\n \n-fn echo[~T](c: _chan<T>, oc: _chan<_chan<T>>) {\n+fn echo<~T>(c: _chan<T>, oc: _chan<_chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = mk_port[T]();"}, {"sha": "00371d3567da76f400f5205dfb1fb41a514f083d", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,7 +1,7 @@\n-tag option[T] { some(T); none; }\n+tag option<T> { some(T); none; }\n \n-type r[T] = {mutable v: [option<T>]};\n+type r<T> = {mutable v: [option<T>]};\n \n-fn f[T]() -> [T] { ret ~[]; }\n+fn f<T>() -> [T] { ret ~[]; }\n \n fn main() { let r: r<int> = {mutable v: ~[]}; r.v = f(); }"}, {"sha": "48e87c9b069e6cfd34e24269083e3e954a8b28ae", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -5,7 +5,7 @@ import std::option::t;\n import std::option::none;\n import std::option::some;\n \n-fn foo[T](y: &option::t<T>) {\n+fn foo<T>(y: &option::t<T>) {\n     let x: int;\n     let rs: [int] = ~[];\n     /* tests that x doesn't get put in the precondition for the"}, {"sha": "994e9f147e40b33960b241f69b7a496ba40fd853", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-tag maybe[T] { nothing; just(T); }\n+tag maybe<T> { nothing; just(T); }\n \n fn foo(x: maybe<int>) {\n     alt x { nothing. { log_err \"A\"; } just(a) { log_err \"B\"; } }"}, {"sha": "f8d9ebbb587edf903eb852f2725118177875aa3f", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-fn f[T, U](x: &T, y: &U) -> {a: T, b: U} { ret {a: x, b: y}; }\n+fn f<T, U>(x: &T, y: &U) -> {a: T, b: U} { ret {a: x, b: y}; }\n \n-fn main() { log f({x: 3, y: 4, z: 5}, 4).a.x; log f(5, 6).a; }\n\\ No newline at end of file\n+fn main() { log f({x: 3, y: 4, z: 5}, 4).a.x; log f(5, 6).a; }"}, {"sha": "f8a0f8e3ee7a1d56396ecfb7efe4c1e40725bac1", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn f[T](x: &[T]) -> T { ret x.(0); }\n+fn f<T>(x: &[T]) -> T { ret x.(0); }\n \n fn g(act: fn(&[int]) -> int ) -> int { ret act(~[1, 2, 3]); }\n "}, {"sha": "3646b8ba69121f9333cf26f61379355df032a1e4", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    fn echo[T](c: int, x: fn(&T)) { log_err \"wee\"; }\n+    fn echo<T>(c: int, x: fn(&T)) { log_err \"wee\"; }\n \n     let y = bind echo(42, _);\n "}, {"sha": "53b8f85ea49b63fab1d9d12ed83bba7567a06416", "filename": "src/test/run-pass/bind-parameterized-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    fn echo[T](c: int, x: &[T]) { }\n+    fn echo<T>(c: int, x: &[T]) { }\n \n     let y: fn(&[int])  = bind echo(42, _);\n "}, {"sha": "47c728af36d736b2407c4a5df75726bc4f57c1bc", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn iter_vec[T](v: &[T], f: &block(&T) ) { for x: T in v { f(x); } }\n+fn iter_vec<T>(v: &[T], f: &block(&T) ) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7];"}, {"sha": "a6d9455e3f1ff70a61d91bee50888ca1d920e831", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn iter_vec[T](v: &[T], f: &block(&T) ) { for x: T in v { f(x); } }\n+fn iter_vec<T>(v: &[T], f: &block(&T) ) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5];"}, {"sha": "03618cf5e0ed8204121e11a630a5e1e56dbeca1b", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n \n \n-type box[T] = {c: @T};\n+type box<T> = {c: @T};\n \n-fn unbox[T](b: &box<T>) -> T { ret *b.c; }\n+fn unbox<T>(b: &box<T>) -> T { ret *b.c; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "f330f900d2b200278ecbf856a8db10f27ee20e6f", "filename": "src/test/run-pass/drop-parametric-closure-with-bound-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn f[T](i: @int, t: &T) { }\n+fn f<T>(i: @int, t: &T) { }\n \n-fn main() { let x = bind f[char](@0xdeafbeef, _); }\n\\ No newline at end of file\n+fn main() { let x = bind f[char](@0xdeafbeef, _); }"}, {"sha": "e3efcc2835f32a912dc36bd0326f1549b964d951", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,6 +2,6 @@\n export foo;\n export main;\n \n-tag list_cell[T] { cons(@list_cell<T>); }\n+tag list_cell<T> { cons(@list_cell<T>); }\n \n fn main() { }"}, {"sha": "9f1fd139905ef885336165e35056751c138d645f", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(@T, @T) -> bool ;\n+type compare<T> = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, eq: &compare<T>) {\n+fn test_generic<T>(expected: @T, eq: &compare<T>) {\n     let actual: @T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "a512a6c376d5a988ec5dd6f09ba320fffc904b4a", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, eq: &compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "f9a9e55c872fbbbe7085a608d294ee6a87f6c0f7", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, eq: &compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "97469dc5cc3b75f8ab5ca0bafb354d13c35f5cf1", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(@T, @T) -> bool ;\n+type compare<T> = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, eq: &compare<T>) {\n+fn test_generic<T>(expected: @T, eq: &compare<T>) {\n     let actual: @T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "9e41231d155614ca389a4d832bd9e6c0a9004755", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, eq: &compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "b7f588a5806404318581e1d2c1ad5215dbdfacc2", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,9 +4,9 @@\n // -*- rust -*-\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, eq: &compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "1bff51000b9cb2549c1560b76c448d0a59a34ff5", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -9,7 +9,7 @@ fn test_vec() {\n }\n \n fn test_generic() {\n-    fn f[T](t: &T) -> T { t }\n+    fn f<T>(t: &T) -> T { t }\n     assert (f(10) == 10);\n }\n "}, {"sha": "f23ca216f4ed5fe693187d2a09e4abb658f20eaf", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(@T, @T) -> bool ;\n+type compare<T> = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, not_expected: @T, eq: &compare<T>) {\n+fn test_generic<T>(expected: @T, not_expected: @T, eq: &compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "0ebeb20d6157df6c252a2e1d7107786091da3257", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, not_expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, not_expected: &T, eq: &compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "732694d6cee3e6d2fc08b65cdd60ebeddaf243bb", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,9 +4,9 @@\n // -*- rust -*-\n \n // Tests for if as expressions with dynamic type sizes\n-type compare[T] = fn(&T, &T) -> bool ;\n+type compare<T> = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, not_expected: &T, eq: &compare<T>) {\n+fn test_generic<T>(expected: &T, not_expected: &T, eq: &compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "f93add461a4b48702160da1cc01195f2e7f99972", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help[A, B](f: @fn(@fn(&A) -> B , &A) -> B , x: &A) -> B {\n+fn fix_help<A, B>(f: @fn(@fn(&A) -> B , &A) -> B , x: &A) -> B {\n     ret f(@bind fix_help(f, _), x);\n }\n \n-fn fix[A, B](f: @fn(@fn(&A) -> B , &A) -> B ) -> @fn(&A) -> B  {\n+fn fix<A, B>(f: @fn(@fn(&A) -> B , &A) -> B ) -> @fn(&A) -> B  {\n     ret @bind fix_help(f, _);\n }\n \n@@ -15,4 +15,4 @@ fn main() {\n     let fact = fix(@fact_);\n     assert (fact(5) == 120);\n     assert (fact(2) == 2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b849d05cc9da249f84e870401b97cb7d9e38730f", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj ob[K](k: K) {\n+obj ob<K>(k: K) {\n     iter foo() -> @{a: K} { put @{a: k}; }\n }\n "}, {"sha": "98cf7708bedfb5fc4fbe78f8f0a3440d7497601a", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,10 +1,10 @@\n \n \n-fn id[T](t: &T) -> T { ret t; }\n+fn id<T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let expected = @100;\n     let actual = id[@int](expected);\n     log *actual;\n     assert (*expected == *actual);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "499bc2a25d1fafb6e444f32fb0bdbb30637ba046", "filename": "src/test/run-pass/generic-bind-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,10 +1,10 @@\n \n \n-fn id[T](t: &T) -> T { ret t; }\n+fn id<T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let t = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7};\n     assert (t.f == 6);\n     let f0 = bind id(t);\n     assert (f0().f == 6);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "bb8e4adfc1f6e4190832c052b9dbb02e186b1d42", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id[T](t: &T) -> T { ret t; }\n+fn id<T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let t = {_0: 1, _1: 2, _2: 3, _3: 4, _4: 5, _5: 6, _6: 7};\n@@ -14,4 +14,4 @@ fn main() {\n                  _5: int,\n                  _6: int}](_);\n     assert (f1(t)._5 == 6);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f5294da042a8b9643dc85c95843602a551a636d1", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n \n \n-fn box[T](x: &{x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n+fn box<T>(x: &{x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n \n fn main() {\n     let x: @{x: int, y: int, z: int} = box[int]({x: 1, y: 2, z: 3});\n     assert (x.y == 2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a5519ec88c230f7abb0a6ccf312cd60693ed2728", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n \n \n-fn g[X](x: &X) -> X { ret x; }\n+fn g<X>(x: &X) -> X { ret x; }\n \n-fn f[T](t: &T) -> {a: T, b: T} {\n+fn f<T>(t: &T) -> {a: T, b: T} {\n     type pair = {a: T, b: T};\n \n     let x: pair = {a: t, b: t};\n@@ -15,4 +15,4 @@ fn main() {\n     log b.b;\n     assert (b.a == 10);\n     assert (b.b == 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ffadf46e8dd7ec369f6fa670eb259c089628d027", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn f[T](t: &T) { let t1: T = t; }\n+fn f<T>(t: &T) { let t1: T = t; }\n \n-fn main() { let x = {x: @10, y: @12}; f(x); }\n\\ No newline at end of file\n+fn main() { let x = {x: @10, y: @12}; f(x); }"}, {"sha": "35c51011ba644b3f07646faac5f0a01166dd2d41", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n \n \n-type recbox[T] = {x: @T};\n+type recbox<T> = {x: @T};\n \n-fn reclift[T](t: &T) -> recbox<T> { ret {x: @t}; }\n+fn reclift<T>(t: &T) -> recbox<T> { ret {x: @t}; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "ca90cbfd65efbfd429554da2699a03a240788781", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn f[T](x: @T) -> @T { ret x; }\n+fn f<T>(x: @T) -> @T { ret x; }\n \n-fn main() { let x = f(@3); log *x; }\n\\ No newline at end of file\n+fn main() { let x = f(@3); log *x; }"}, {"sha": "4c6597e97d759ede1ff7c4b43cd37d2f95cb2714", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n \n // Issue #45: infer type parameters in function applications\n-fn id[T](x: &T) -> T { ret x; }\n+fn id<T>(x: &T) -> T { ret x; }\n \n-fn main() { let x: int = 42; let y: int = id(x); assert (x == y); }\n\\ No newline at end of file\n+fn main() { let x: int = 42; let y: int = id(x); assert (x == y); }"}, {"sha": "7d5fc711244289a92709f1372fa31d6b10de5140", "filename": "src/test/run-pass/generic-fn-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n mod foomod {\n-    fn foo[T]() { }\n+    fn foo<T>() { }\n }\n \n-fn main() { foomod::foo[int](); foomod::foo[int](); }\n\\ No newline at end of file\n+fn main() { foomod::foo[int](); foomod::foo[int](); }"}, {"sha": "c6afc6970713b0a79bb88de5d03106c92a138bfe", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn id[T](x: &T) -> T { ret x; }\n+fn id<T>(x: &T) -> T { ret x; }\n \n type triple = {x: int, y: int, z: int};\n \n@@ -24,4 +24,4 @@ fn main() {\n     y = q.z;\n     log y;\n     assert (x == y);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b575fe4809bca907b59e48580f40c5cab8f5756d", "filename": "src/test/run-pass/generic-iter-frame.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,6 +4,6 @@\n // Contrived example? No. It showed up in rustc's resolve pass.\n iter i() { put (); }\n \n-fn foo[T](t: &T) { let x: int = 10; for each j: () in i() { log x; } }\n+fn foo<T>(t: &T) { let x: int = 10; for each j: () in i() { log x; } }\n \n fn main() { foo(0xdeadbeef_u); }"}, {"sha": "f9755e176b97400e59d2a511e0fe1549163b22b5", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-tag wrapper[T] { wrapped(T); }\n+tag wrapper<T> { wrapped(T); }\n \n fn main() { let w = wrapped(~[1, 2, 3, 4, 5]); }\n "}, {"sha": "39ba083a5a36c835a2f0eea43fb60c795357d4c7", "filename": "src/test/run-pass/generic-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,3 +1,3 @@\n-fn f[T](v: @T) { }\n+fn f<T>(v: @T) { }\n fn main() { f(@~[1, 2, 3, 4, 5]); }\n "}, {"sha": "e0d92fd1d4ccc1534422fff978c57aba279585bc", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj handle[T](data: T) {\n+obj handle<T>(data: T) {\n     fn get() -> T { ret data; }\n }\n "}, {"sha": "0b2978c5960c3e679c94304a032d77a1a6328109", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj buf[T](data: {_0: T, _1: T, _2: T}) {\n+obj buf<T>(data: {_0: T, _1: T, _2: T}) {\n     fn get(i: int) -> T {\n         if i == 0 {\n             ret data._0;"}, {"sha": "fa9f1016a3113dd8fda73eadf0d1ae26f73f10b5", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag list[T] { cons(@T, @list<T>); nil; }\n+tag list<T> { cons(@T, @list<T>); nil; }\n \n fn main() {\n     let a: list<int> ="}, {"sha": "0edb4899ab03ea4929b6db0924e2dd52645d3ce1", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n \n \n-tag foo[T] { arm(T); }\n+tag foo<T> { arm(T); }\n \n-fn altfoo[T](f: &foo<T>) {\n+fn altfoo<T>(f: &foo<T>) {\n     let hit = false;\n     alt f { arm[T](x) { log \"in arm\"; hit = true; } }\n     assert (hit);"}, {"sha": "13019735c2610c243e1c7c794c30a4b05deca398", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,6 +2,6 @@\n \n \n // This causes memory corruption in stage0.\n-tag thing[K] { some(K); }\n+tag thing<K> { some(K); }\n \n-fn main() { let x = some(\"hi\"); }\n\\ No newline at end of file\n+fn main() { let x = some(\"hi\"); }"}, {"sha": "529cec476d0c861ca43799f0e2a73982fc869e5a", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam[T] { a(T); }\n+tag clam<T> { a(T); }\n \n-fn main() { let c = a(3); }\n\\ No newline at end of file\n+fn main() { let c = a(3); }"}, {"sha": "38ad190a913fd97ee1cf7ffaf9f5b62606c1c329", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-tag noption[T] { some(T); }\n+tag noption<T> { some(T); }\n \n fn main() {\n     let nop: noption<int> = some[int](5);"}, {"sha": "3434f00b4488046e4b9719ff3d39bb7f0fb87fa5", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag option[T] { some(@T); none; }\n+tag option<T> { some(@T); none; }\n \n fn main() { let a: option<int> = some[int](@10); a = none[int]; }"}, {"sha": "fe7d1dcd6e5494eea40ea17308f1ead122bad8c9", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,10 +4,10 @@ fn mk() -> int { ret 1; }\n \n fn chk(a: &int) { log a; assert (a == 1); }\n \n-fn apply[T](produce: fn() -> T , consume: fn(&T) ) { consume(produce()); }\n+fn apply<T>(produce: fn() -> T , consume: fn(&T) ) { consume(produce()); }\n \n fn main() {\n     let produce: fn() -> int  = mk;\n     let consume: fn(&int)  = chk;\n     apply[int](produce, consume);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "bdd8ddf12686501fc18a2cd178b12ffab276e1be", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn get_third[T](t: &(T, T, T)) -> T {\n+fn get_third<T>(t: &(T, T, T)) -> T {\n     let (_, _, x) = t;\n     ret x;\n }\n@@ -7,4 +7,4 @@ fn main() {\n     log get_third((1, 2, 3));\n     assert (get_third((1, 2, 3)) == 3);\n     assert (get_third((5u8, 6u8, 7u8)) == 7u8);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d05e9218a564578e209c6a08b587439c5e11d62c", "filename": "src/test/run-pass/generic-type-synonym.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,9 +1,9 @@\n \n \n-type foo[T] = {a: T};\n+type foo<T> = {a: T};\n \n-type bar[T] = foo<T>;\n+type bar<T> = foo<T>;\n \n-fn takebar[T](b: &bar<T>) { }\n+fn takebar<T>(b: &bar<T>) { }\n \n fn main() { }"}, {"sha": "000ee686d3cc86159812f335a12108107ec815f7", "filename": "src/test/run-pass/generic-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n \n \n-type pair[T] = {x: T, y: T};\n+type pair<T> = {x: T, y: T};\n \n fn main() {\n     let x: pair<int> = {x: 10, y: 12};"}, {"sha": "28995a5b3ac9dffae4d000d57df5469d6e234e2f", "filename": "src/test/run-pass/interior-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -3,7 +3,7 @@\n import rusti::ivec_len;\n \n native \"rust-intrinsic\" mod rusti {\n-    fn ivec_len[T](v: &[T]) -> uint;\n+    fn ivec_len<T>(v: &[T]) -> uint;\n }\n \n fn main() {"}, {"sha": "fa93645418cf2b4d04c2e6d43c8c151e22b38483", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n-fn quux[T](x: &T) -> T { let f = id[T]; ret f(x); }\n+fn quux<T>(x: &T) -> T { let f = id[T]; ret f(x); }\n \n-fn id[T](x: &T) -> T { ret x; }\n+fn id<T>(x: &T) -> T { ret x; }\n \n-fn main() { assert (quux(10) == 10); }\n\\ No newline at end of file\n+fn main() { assert (quux(10) == 10); }"}, {"sha": "8dd2c32f86bfc5fcd808a415f521ee7f6fbb6b3c", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn double[T](a: &T) -> [T] { ret ~[a] + ~[a]; }\n+fn double<T>(a: &T) -> [T] { ret ~[a] + ~[a]; }\n \n fn double_int(a: int) -> [int] { ret ~[a] + ~[a]; }\n "}, {"sha": "d48887304ef10d5569a454722b6084266f53c563", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn leaky[T](t: &T) { }\n+fn leaky<T>(t: &T) { }\n \n-fn main() { let x = @10; leaky[@int](x); }\n\\ No newline at end of file\n+fn main() { let x = @10; leaky[@int](x); }"}, {"sha": "637b1b8103b8d37322aa690dea59c1733b9527cc", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,8 +1,8 @@\n-tag myvec[X] = [X];\n+tag myvec<X> = [X];\n \n-fn myvec_deref[X](mv: &myvec<X>) -> [X] { ret *mv; }\n+fn myvec_deref<X>(mv: &myvec<X>) -> [X] { ret *mv; }\n \n-fn myvec_elt[X](mv: &myvec<X>) -> X { ret mv.(0); }\n+fn myvec_elt<X>(mv: &myvec<X>) -> X { ret mv.(0); }\n \n fn main() {\n     let mv = myvec(~[1, 2, 3]);"}, {"sha": "397eafd33cae23e97e813ec09f5e40f915f2ece3", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,11 +2,11 @@\n \n \n // -*- rust -*-\n-tag clam[T] { signed(int); unsigned(uint); }\n+tag clam<T> { signed(int); unsigned(uint); }\n \n-fn getclam[T]() -> clam<T> { ret signed[T](42); }\n+fn getclam<T>() -> clam<T> { ret signed[T](42); }\n \n-obj impatience[T]() {\n+obj impatience<T>() {\n     fn moreclam() -> clam<T> { be getclam[T](); }\n }\n "}, {"sha": "6ab2eb308b64e322fcb3f747a095c07cbf5b684f", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,9 +1,9 @@\n-resource finish[T](arg: {val: T, fin: fn(&T) }) { arg.fin(arg.val); }\n+resource finish<T>(arg: {val: T, fin: fn(&T) }) { arg.fin(arg.val); }\n \n fn main() {\n     let box = @mutable 10;\n     fn dec_box(i: &@mutable int) { *i -= 1; }\n \n     { let i <- finish({val: box, fin: dec_box}); }\n     assert (*box == 9);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6e7e8dc6bfdb07a7902b8046187379c9f0fe1bb9", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -7,7 +7,7 @@ resource close_res(i: closable) {\n     *i = false;\n }\n \n-tag option[T] { none; some(T); }\n+tag option<T> { none; some(T); }\n \n fn sink(res: option<close_res>) {}\n "}, {"sha": "a10508b7f25e55ad4dfbd105ef3b9d407db88321", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,7 +1,7 @@\n \n \n-tag option[T] { none; some(T); }\n+tag option<T> { none; some(T); }\n \n-fn f[T]() -> option<T> { ret none; }\n+fn f<T>() -> option<T> { ret none; }\n \n fn main() { f[int](); }"}, {"sha": "4dd7f8bf28eb0602fd72b8f50a408d4b04f33db3", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,9 +4,9 @@ import std::comm::send;\n import std::comm::mk_port;\n \n // tests that ctrl's type gets inferred properly\n-type command[K, V] = {key: K, val: V};\n+type command<K, V> = {key: K, val: V};\n \n-fn cache_server[K, V](c: _chan<_chan<command<K, V>>>) {\n+fn cache_server<K, V>(c: _chan<_chan<command<K, V>>>) {\n     let ctrl = mk_port[_chan<command<K, V>>]();\n     send(c, ctrl.mk_chan());\n }"}, {"sha": "b024b7b9a8f6bd9925b34ebe1c5e87a7670aafdf", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -10,7 +10,7 @@ fn foo(c: [int]) {\n     }\n }\n \n-tag t[T] { none; some(T); }\n+tag t<T> { none; some(T); }\n \n fn main() {\n     let x = 10;"}, {"sha": "ac6d8f11f539049bcf7e0adba43590e6b2c0b82a", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag opt[T] { none; }\n+tag opt<T> { none; }\n \n-fn main() { let x = none[int]; alt x { none[int]. { log \"hello world\"; } } }\n\\ No newline at end of file\n+fn main() { let x = none[int]; alt x { none[int]. { log \"hello world\"; } } }"}, {"sha": "de731c007ea134ae3e3df2b5971085b308d25232", "filename": "src/test/run-pass/simple-generic-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam[T] { a(T); }\n+tag clam<T> { a(T); }\n \n-fn main() { let c = a(2); alt c { a[int](_) { } } }\n\\ No newline at end of file\n+fn main() { let c = a(2); alt c { a[int](_) { } } }"}, {"sha": "49bf69bde7437638ab71e2e2d9981af6bd7eb721", "filename": "src/test/run-pass/simple-generic-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam[T] { a(T); }\n+tag clam<T> { a(T); }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "996073fc906fcae78ea897620abae67c4a5993ab", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,9 +2,9 @@\n \n \n // -*- rust -*-\n-tag clam[T] { a(T, int); b; }\n+tag clam<T> { a(T, int); b; }\n \n-fn uhoh[T](v: &[clam<T>]) {\n+fn uhoh<T>(v: &[clam<T>]) {\n     alt v.(1) {\n       a[T](t, u) { log \"incorrect\"; log u; fail; }\n       b[T]. { log \"correct\"; }"}, {"sha": "155d71399e57a7afd808debb861191d41d656e50", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,4 +1,4 @@\n-fn swap[@T](v: &[mutable T], i: int, j: int) { v.(i) <-> v.(j); }\n+fn swap<@T>(v: &[mutable T], i: int, j: int) { v.(i) <-> v.(j); }\n \n fn main() {\n     let a: [mutable int] = ~[mutable 0, 1, 2, 3, 4, 5, 6];"}, {"sha": "eecba139f33d90573b0e63d04305b8f63f4c6e31", "filename": "src/test/run-pass/tag-and-generic-obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -2,8 +2,8 @@\n \n tag colour { red; green; }\n \n-obj foo[T]() {\n+obj foo<T>() {\n     fn meth(x: &T) { }\n }\n \n-fn main() { foo[colour]().meth(red); }\n\\ No newline at end of file\n+fn main() { foo[colour]().meth(red); }"}, {"sha": "e1c80d31fb7d248008208040c8fd1b0b9656b18b", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,6 +1,6 @@\n-fn p_foo[T](pinned: &T) {  }\n-fn s_foo[@T](shared: &T) {  }\n-fn u_foo[~T](unique: &T) {  }\n+fn p_foo<T>(pinned: &T) {  }\n+fn s_foo<@T>(shared: &T) {  }\n+fn u_foo<~T>(unique: &T) {  }\n \n resource r(i: int) { }\n \n@@ -22,4 +22,4 @@ fn main() {\n \n     //u_foo(~10);\n     u_foo(10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "36ef46420a9a8d0a532e2fd90b17471e4f7ecc7b", "filename": "src/test/run-pass/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-type lteq[T] = fn(&T) -> bool ;\n+type lteq<T> = fn(&T) -> bool ;\n \n fn main(args: [str]) { }"}, {"sha": "b8e2f5fc8a8fc77e6afb6b0f56ff1a588f23334f", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -5,7 +5,7 @@ iter range(lo: uint, hi: uint) -> uint {\n     while lo_ < hi { put lo_; lo_ += 1u; }\n }\n \n-fn create_index[T](index: &[{a: T, b: uint}], hash_fn: fn(&T) -> uint ) {\n+fn create_index<T>(index: &[{a: T, b: uint}], hash_fn: fn(&T) -> uint ) {\n     for each i: uint in range(0u, 256u) { let bucket: [T] = ~[]; }\n }\n "}, {"sha": "8d36f2b4b557f6d8ae4a8cf9acc666ee54fcadcd", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -4,8 +4,8 @@\n use std;\n import std::unsafe;\n \n-fn null[T]() -> *T { unsafe::reinterpret_cast(0) }\n+fn null<T>() -> *T { unsafe::reinterpret_cast(0) }\n \n fn main() {\n     null[int]();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "43985cac7ca66cf5aca28d4b0a913938805b12ab", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,11 +1,11 @@\n \n \n-fn foo[T](o: &myoption<T>) -> int {\n+fn foo<T>(o: &myoption<T>) -> int {\n     let x: int = 5;\n     alt o { none[T]. { } some[T](t) { x += 1; } }\n     ret x;\n }\n \n-tag myoption[T] { none; some(T); }\n+tag myoption<T> { none; some(T); }\n \n fn main() { log 5; }"}, {"sha": "c9021328cea2076bed9fc38a3d017b430769c200", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,11 +1,11 @@\n \n \n-fn foo[T](o: &myoption<T>) -> int {\n+fn foo<T>(o: &myoption<T>) -> int {\n     let x: int;\n     alt o { none[T]. { fail; } some[T](t) { x = 5; } }\n     ret x;\n }\n \n-tag myoption[T] { none; some(T); }\n+tag myoption<T> { none; some(T); }\n \n fn main() { log 5; }"}, {"sha": "6e54bd7467e178798a4bf25457c472f55b452d96", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn push[T](v: &mutable [mutable? T], t: &T) { v += ~[t]; }\n+fn push<T>(v: &mutable [mutable? T], t: &T) { v += ~[t]; }\n \n fn main() { let v = ~[1, 2, 3]; push(v, 1); }"}, {"sha": "0c53895bd37004948d3bc2b2161c7aade5df2b83", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35204995449ae1fcaf3ed24471dec4a95f9b7951/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=35204995449ae1fcaf3ed24471dec4a95f9b7951", "patch": "@@ -79,9 +79,9 @@ fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n     assert (deq.get(3) == d);\n }\n \n-type eqfn[T] = fn(&T, &T) -> bool ;\n+type eqfn<T> = fn(&T, &T) -> bool ;\n \n-fn test_parameterized[@T](e: eqfn<T>, a: &T, b: &T, c: &T, d: &T) {\n+fn test_parameterized<@T>(e: eqfn<T>, a: &T, b: &T, c: &T, d: &T) {\n     let deq: deque::t<T> = deque::create[T]();\n     assert (deq.size() == 0u);\n     deq.add_front(a);\n@@ -113,7 +113,7 @@ fn test_parameterized[@T](e: eqfn<T>, a: &T, b: &T, c: &T, d: &T) {\n \n tag taggy { one(int); two(int, int); three(int, int, int); }\n \n-tag taggypar[@T] { onepar(int); twopar(int, int); threepar(int, int, int); }\n+tag taggypar<@T> { onepar(int); twopar(int, int); threepar(int, int, int); }\n \n type reccy = {x: int, y: int, t: taggy};\n \n@@ -138,7 +138,7 @@ fn test() {\n           }\n         }\n     }\n-    fn taggypareq[@T](a: &taggypar<T>, b: &taggypar<T>) -> bool {\n+    fn taggypareq<@T>(a: &taggypar<T>, b: &taggypar<T>) -> bool {\n         alt a {\n           onepar[T](a1) {\n             alt b { onepar[T](b1) { ret a1 == b1; } _ { ret false; } }"}]}