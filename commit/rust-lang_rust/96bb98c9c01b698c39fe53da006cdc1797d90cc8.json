{"sha": "96bb98c9c01b698c39fe53da006cdc1797d90cc8", "node_id": "C_kwDOAAsO6NoAKDk2YmI5OGM5YzAxYjY5OGMzOWZlNTNkYTAwNmNkYzE3OTdkOTBjYzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-29T18:34:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T18:34:58Z"}, "message": "Rollup merge of #98434 - dpaoliello:staticcrt, r=jyn514\n\nEnsure that `static_crt` is set in the bootstrapper whenever using `cc-rs` to get a compiler command line.\n\nWhen attempting to build rustc with LLVM on Windows, I noticed that the CRT flag provided to the C and C++ Compilers was inconsistent:\n\n```\n\"-DCMAKE_C_FLAGS=-nologo -MT -Brepro\" \"-DCMAKE_CXX_FLAGS=-nologo -MD -Brepro\"\n```\n\nSince the bootstrapper also sets the various `LLVM_USE_CRT` variables, this resulted in cl.exe reporting a bunch of warnings:\n\n```\ncl : Command line warning D9025 : overriding '/MD' with '/MT'\n```\n\nThe root cause for this is that `cc_detect::find` was creating a `cc::Build` twice, but didn't set `static_crt` the second time.\n\nIt's possible that this what is also causing #81381", "tree": {"sha": "7bae5d770aa744f4405ccc47e3732e61c86fae18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bae5d770aa744f4405ccc47e3732e61c86fae18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bb98c9c01b698c39fe53da006cdc1797d90cc8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivJtSCRBK7hj4Ov3rIwAAXS4IACG18tt62U3JBVtFfdLsuIDU\nCr4WVBMi2QKeZqyQ17ZRXK9Vi5FeNy9D0KnghufLtRIpx1zibJGwOFAA+nCp5lJ4\n8+VymD8QiMe3OMBQp7iDkjJDfe0gTXM2zNToCRKGtluvd0yF2hub5BUedbr2FM4M\nWvKbDn7O+KZKQt1baz7te+7W58t45zLI6s5v09Qxj9R7vrVfWyJEkvouu1kOkYi5\nu7Ya9N6TnBSDFRhxvn5KZDvUF2FW1xHQWnmmwXOku25s2C4sbPxEdMhlKMXymKfZ\ngxPUUFrTrJsFhyvUsPTH7qKhmy1FID4Qqva+pDGWYO6/nAlTthS6YbHma4X+uk4=\n=8SU8\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bae5d770aa744f4405ccc47e3732e61c86fae18\nparent 3fcf43bb0f3e86c16a88f239da18a1729a94d244\nparent 1fca2468420bb5ac2f6868bddc65e164dd05dbfb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656527698 +0200\ncommitter GitHub <noreply@github.com> 1656527698 +0200\n\nRollup merge of #98434 - dpaoliello:staticcrt, r=jyn514\n\nEnsure that `static_crt` is set in the bootstrapper whenever using `cc-rs` to get a compiler command line.\n\nWhen attempting to build rustc with LLVM on Windows, I noticed that the CRT flag provided to the C and C++ Compilers was inconsistent:\n\n```\n\"-DCMAKE_C_FLAGS=-nologo -MT -Brepro\" \"-DCMAKE_CXX_FLAGS=-nologo -MD -Brepro\"\n```\n\nSince the bootstrapper also sets the various `LLVM_USE_CRT` variables, this resulted in cl.exe reporting a bunch of warnings:\n\n```\ncl : Command line warning D9025 : overriding '/MD' with '/MT'\n```\n\nThe root cause for this is that `cc_detect::find` was creating a `cc::Build` twice, but didn't set `static_crt` the second time.\n\nIt's possible that this what is also causing #81381\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb98c9c01b698c39fe53da006cdc1797d90cc8", "html_url": "https://github.com/rust-lang/rust/commit/96bb98c9c01b698c39fe53da006cdc1797d90cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bb98c9c01b698c39fe53da006cdc1797d90cc8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcf43bb0f3e86c16a88f239da18a1729a94d244", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcf43bb0f3e86c16a88f239da18a1729a94d244", "html_url": "https://github.com/rust-lang/rust/commit/3fcf43bb0f3e86c16a88f239da18a1729a94d244"}, {"sha": "1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "html_url": "https://github.com/rust-lang/rust/commit/1fca2468420bb5ac2f6868bddc65e164dd05dbfb"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "759a99c330c279d1aec9714b7eaae757908a315b", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/96bb98c9c01b698c39fe53da006cdc1797d90cc8/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb98c9c01b698c39fe53da006cdc1797d90cc8/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=96bb98c9c01b698c39fe53da006cdc1797d90cc8", "patch": "@@ -61,6 +61,30 @@ fn cc2ar(cc: &Path, target: TargetSelection) -> Option<PathBuf> {\n     }\n }\n \n+fn new_cc_build(build: &Build, target: TargetSelection) -> cc::Build {\n+    let mut cfg = cc::Build::new();\n+    cfg.cargo_metadata(false)\n+        .opt_level(2)\n+        .warnings(false)\n+        .debug(false)\n+        .target(&target.triple)\n+        .host(&build.build.triple);\n+    match build.crt_static(target) {\n+        Some(a) => {\n+            cfg.static_crt(a);\n+        }\n+        None => {\n+            if target.contains(\"msvc\") {\n+                cfg.static_crt(true);\n+            }\n+            if target.contains(\"musl\") {\n+                cfg.static_flag(true);\n+            }\n+        }\n+    }\n+    cfg\n+}\n+\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n@@ -72,27 +96,7 @@ pub fn find(build: &mut Build) {\n         .chain(iter::once(build.build))\n         .collect::<HashSet<_>>();\n     for target in targets.into_iter() {\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-        match build.crt_static(target) {\n-            Some(a) => {\n-                cfg.static_crt(a);\n-            }\n-            None => {\n-                if target.contains(\"msvc\") {\n-                    cfg.static_crt(true);\n-                }\n-                if target.contains(\"musl\") {\n-                    cfg.static_flag(true);\n-                }\n-            }\n-        }\n-\n+        let mut cfg = new_cc_build(build, target);\n         let config = build.config.target_config.get(&target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n             cfg.compiler(cc);\n@@ -112,15 +116,8 @@ pub fn find(build: &mut Build) {\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n         // We'll need one anyways if the target triple is also a host triple\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .cpp(true)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-\n+        let mut cfg = new_cc_build(build, target);\n+        cfg.cpp(true);\n         let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n             true"}]}