{"sha": "0a80cc82b1220eddcfd00327f5debcbb7dce975c", "node_id": "C_kwDOAAsO6NoAKDBhODBjYzgyYjEyMjBlZGRjZmQwMDMyN2Y1ZGViY2JiN2RjZTk3NWM", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:55:21Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:55:21Z"}, "message": "cleaning", "tree": {"sha": "c18cd2f1390d26ce4a78fb444b056eb52c35ba33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18cd2f1390d26ce4a78fb444b056eb52c35ba33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a80cc82b1220eddcfd00327f5debcbb7dce975c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmILvtkACgkQeO9fUvOM\nSb2dPAwAv0EOddww9TPotPLJPGpyNYw7IZn0p6Skijb7JlTenrnjY+CviogyM2iN\nfcaOVF9gittprxf+Z/Up4079up7fH8fPSIiO5QTiBw7BVd9rc0PfQBMx41eoa1Ss\nsIm4uc4N0VsDmbfnHvIdiV2D8p9lTc46kEOtd2Uq+L+PjxKppivsIb80j9tlt2ae\njJ4q6eqWxfTGOzwj/DKSZTVN9D/pxnk3/P2PgJdClr6EqgECAMMetfZ8nN6SoiYj\n5OL1fbvRyHN7kp/zugP6Cv8PuRTVguUOcfDH5VNoHTplyJFt/GswaUJyJgCjady3\nK172wOnU71v94ta9ghMDvoC2b1zHMZ6fvEBgUjLtSxx+DOsxDqwR1uUUZJP7oPoK\n3VpnpgoiHUYJDMskuzN80B9fZyZzG/pzULjObTteGtYEl2SwhccGaNFgRwYwTe5z\n7NiMGWjjIL5ke8zRGUb+9wnM8YcEjhctu9+V3qQO2uXY3CDjTq3uEcRm2RuovZH5\n/tVucOUT\n=vm3U\n-----END PGP SIGNATURE-----", "payload": "tree c18cd2f1390d26ce4a78fb444b056eb52c35ba33\nparent 3bba811e925e8eb5d53a58b7cb8a10fa29f71caa\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1644936921 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1644936921 +0000\n\ncleaning\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a80cc82b1220eddcfd00327f5debcbb7dce975c", "html_url": "https://github.com/rust-lang/rust/commit/0a80cc82b1220eddcfd00327f5debcbb7dce975c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a80cc82b1220eddcfd00327f5debcbb7dce975c/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "html_url": "https://github.com/rust-lang/rust/commit/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "01aca8f1de0065566cdcbcd291ab90b1ce865d31", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=0a80cc82b1220eddcfd00327f5debcbb7dce975c", "patch": "@@ -241,7 +241,9 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types, _) => types.iter().for_each(|t| go(&t.1, f)),\n+                TypeRef::Fn(params, _) => {\n+                    params.iter().for_each(|(_, param_type)| go(&param_type, f))\n+                }\n                 TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)"}, {"sha": "377821b3761adf082c39395e098a7d4426d0c518", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=0a80cc82b1220eddcfd00327f5debcbb7dce975c", "patch": "@@ -1103,9 +1103,10 @@ impl HirDisplay for TypeRef {\n                             write!(f, \"{}: \", name)?;\n                             param_type.hir_fmt(f)?;\n                         }\n-                        None => write!(f, \" : {:?}\", param_type)?,\n+                        None => param_type.hir_fmt(f)?,\n                     };\n \n+                    // Last index contains the return type so we stop writing commas on the second-to-last index\n                     if index != parameters.len() - 2 {\n                         write!(f, \", \")?;\n                     }"}, {"sha": "a140dd4057c625fe6d27e25b1f7184cb1c908393", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a80cc82b1220eddcfd00327f5debcbb7dce975c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=0a80cc82b1220eddcfd00327f5debcbb7dce975c", "patch": "@@ -201,7 +201,7 @@ impl<'a> TyLoweringContext<'a> {\n             TypeRef::Placeholder => TyKind::Error.intern(Interner),\n             TypeRef::Fn(params, is_varargs) => {\n                 let substs = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                    Substitution::from_iter(Interner, params.iter().map(|tr| ctx.lower_ty(&tr.1)))\n+                    Substitution::from_iter(Interner, params.iter().map(|(_, tr)| ctx.lower_ty(tr)))\n                 });\n                 TyKind::Function(FnPointer {\n                     num_binders: 0, // FIXME lower `for<'a> fn()` correctly"}]}