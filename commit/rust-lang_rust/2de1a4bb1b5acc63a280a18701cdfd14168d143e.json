{"sha": "2de1a4bb1b5acc63a280a18701cdfd14168d143e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTFhNGJiMWI1YWNjNjNhMjgwYTE4NzAxY2RmZDE0MTY4ZDE0M2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-31T19:57:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-31T19:58:02Z"}, "message": "Handle pretty-printing else-if properly.", "tree": {"sha": "76f731970c4328370f08f556f9aa2d87d382bedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f731970c4328370f08f556f9aa2d87d382bedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de1a4bb1b5acc63a280a18701cdfd14168d143e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de1a4bb1b5acc63a280a18701cdfd14168d143e", "html_url": "https://github.com/rust-lang/rust/commit/2de1a4bb1b5acc63a280a18701cdfd14168d143e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de1a4bb1b5acc63a280a18701cdfd14168d143e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc96eeafca395ae2889ddfea8dc3194f2ad1c80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc96eeafca395ae2889ddfea8dc3194f2ad1c80d", "html_url": "https://github.com/rust-lang/rust/commit/cc96eeafca395ae2889ddfea8dc3194f2ad1c80d"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "dfe6cc3a75a1082626e4b1738c2cc1b6745b0b74", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2de1a4bb1b5acc63a280a18701cdfd14168d143e/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de1a4bb1b5acc63a280a18701cdfd14168d143e/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=2de1a4bb1b5acc63a280a18701cdfd14168d143e", "patch": "@@ -587,28 +587,42 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_type(s, *ty);\n         }\n         case (ast::expr_if(?test,?block,?elseopt,_)) {\n+\n             head(s, \"if\");\n             popen(s);\n             print_expr(s, test);\n             pclose(s);\n             space(s.s);\n             print_block(s, block);\n-            alt (elseopt) {\n-                case (option::some[@ast::expr](?_else)) {\n-                    // NB: we can't use 'head' here since\n-                    // it builds a block that starts in the\n-                    // wrong column.\n-                    cbox(s.s, indent_unit-1u);\n-                    ibox(s.s, 0u);\n-                    word(s.s, \" else \");\n-                    alt (_else.node) {\n-                        case (ast::expr_block(?b, _)) {\n-                            print_block(s, block);\n+            fn do_else(&ps s, option::t[@ast::expr] els) {\n+                alt (els) {\n+                    case (option::some[@ast::expr](?_else)) {\n+                        alt (_else.node) {\n+                            // \"another else-if\"\n+                            case (ast::expr_if(?i,?t,?e,_)) {\n+                                cbox(s.s, indent_unit-1u);\n+                                ibox(s.s, 0u);\n+                                word(s.s, \" else if \");\n+                                popen(s);\n+                                print_expr(s, i);\n+                                pclose(s);\n+                                space(s.s);\n+                                print_block(s, t);\n+                                do_else(s, e);\n+                            }\n+                            // \"final else\"\n+                            case (ast::expr_block(?b, _)) {\n+                                cbox(s.s, indent_unit-1u);\n+                                ibox(s.s, 0u);\n+                                word(s.s, \" else \");\n+                                print_block(s, b);\n+                            }\n                         }\n                     }\n+                    case (_) { /* fall through */ }\n                 }\n-                case (_) { /* fall through */ }\n             }\n+            do_else(s, elseopt);\n         }\n         case (ast::expr_while(?test,?block,_)) {\n             head(s, \"while\");"}]}