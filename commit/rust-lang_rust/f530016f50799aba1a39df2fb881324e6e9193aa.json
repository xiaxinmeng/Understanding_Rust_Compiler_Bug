{"sha": "f530016f50799aba1a39df2fb881324e6e9193aa", "node_id": "C_kwDOAAsO6NoAKGY1MzAwMTZmNTA3OTlhYmExYTM5ZGYyZmI4ODEzMjRlNmU5MTkzYWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-15T15:52:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T15:52:35Z"}, "message": "Rollup merge of #111212 - nicklimmm:issue-107896-fix, r=pnkfelix\n\nAdd casting suggestion when assigning negative 2's complement bin or hex literal to a size compatible signed integer\n\nFixes #107896\n\nThe issue stated the case for `iX::MIN` variants. This PR extends the cases for other negative values (in the 2's complement).\n\nLeveraged sign bits to detect such cases.\n\nExample cases:\n- <img width=\"845\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236289682-19859f59-a9c5-48c5-b15f-78a935fbfcec.png\">\n- <img width=\"831\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236289805-5b16488d-9138-4363-a1b6-a5c027c50aba.png\">\n- <img width=\"912\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236290065-685a9777-034b-4def-83a8-cc4e20b1ed0c.png\">", "tree": {"sha": "58e9b92529ff3ecc2491630730dad51483ef8b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58e9b92529ff3ecc2491630730dad51483ef8b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f530016f50799aba1a39df2fb881324e6e9193aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkizPDCRBK7hj4Ov3rIwAAPjIIAFLHCE7oiNB71pdBBxFTz+zy\n7cWcTlRUho6QBfleP8DNFkjgA2cG27t/O0XgSWyMWafO7leY7FA4Q1F4+aDOKLWF\nTVr5ni2hXRp3hfxFD+/JHYoO9rKnqZw5J86cdY70fuWrsKMCkOxREwYkbY63cetf\nSDtba4EaHpbRsJ+ONdqwdhn+FGHRpKfw+AU83NybZ5Lfnz9+114663xSh8wHKwRu\nhupYIdg3o+Nj5BWL5yKOPaJmpuiKhUmJYq0AjGJeP/aN9oi1F/q2nKpSr2om0aoy\nVP+kwZ5waR/V86AO1UfLjc8wV0SsrOMU5ucIT4c1aus5QMp/0pXm2l0YZ6rMjCc=\n=/3co\n-----END PGP SIGNATURE-----\n", "payload": "tree 58e9b92529ff3ecc2491630730dad51483ef8b9d\nparent 4996b56ba9647d149265d03dcbd9ab837af3a1bb\nparent 211376927d02a032987d61a445648e7c1e6cc4ca\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686844355 +0200\ncommitter GitHub <noreply@github.com> 1686844355 +0200\n\nRollup merge of #111212 - nicklimmm:issue-107896-fix, r=pnkfelix\n\nAdd casting suggestion when assigning negative 2's complement bin or hex literal to a size compatible signed integer\n\nFixes #107896\n\nThe issue stated the case for `iX::MIN` variants. This PR extends the cases for other negative values (in the 2's complement).\n\nLeveraged sign bits to detect such cases.\n\nExample cases:\n- <img width=\"845\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236289682-19859f59-a9c5-48c5-b15f-78a935fbfcec.png\">\n- <img width=\"831\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236289805-5b16488d-9138-4363-a1b6-a5c027c50aba.png\">\n- <img width=\"912\" alt=\"image\" src=\"https://user-images.githubusercontent.com/65026286/236290065-685a9777-034b-4def-83a8-cc4e20b1ed0c.png\">\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f530016f50799aba1a39df2fb881324e6e9193aa", "html_url": "https://github.com/rust-lang/rust/commit/f530016f50799aba1a39df2fb881324e6e9193aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f530016f50799aba1a39df2fb881324e6e9193aa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4996b56ba9647d149265d03dcbd9ab837af3a1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4996b56ba9647d149265d03dcbd9ab837af3a1bb", "html_url": "https://github.com/rust-lang/rust/commit/4996b56ba9647d149265d03dcbd9ab837af3a1bb"}, {"sha": "211376927d02a032987d61a445648e7c1e6cc4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/211376927d02a032987d61a445648e7c1e6cc4ca", "html_url": "https://github.com/rust-lang/rust/commit/211376927d02a032987d61a445648e7c1e6cc4ca"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "c66fcdec7164c83839db0c7c166ff0ed838365ee", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=f530016f50799aba1a39df2fb881324e6e9193aa", "patch": "@@ -425,6 +425,7 @@ lint_overflowing_bin_hex = literal out of range for `{$ty}`\n     .negative_becomes_note = and the value `-{$lit}` will become `{$actually}{$ty}`\n     .positive_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}` and will become `{$actually}{$ty}`\n     .suggestion = consider using the type `{$suggestion_ty}` instead\n+    .sign_bit_suggestion = to use as a negative number (decimal `{$negative_val}`), consider using the type `{$uint_ty}` for the literal and cast it to `{$int_ty}`\n     .help = consider using the type `{$suggestion_ty}` instead\n \n lint_overflowing_int = literal out of range for `{$ty}`"}, {"sha": "89fa5713b73ef23c4f53aa1e5e4e3eeacbb9c460", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=f530016f50799aba1a39df2fb881324e6e9193aa", "patch": "@@ -1342,6 +1342,8 @@ pub struct OverflowingBinHex<'a> {\n     pub sign: OverflowingBinHexSign,\n     #[subdiagnostic]\n     pub sub: Option<OverflowingBinHexSub<'a>>,\n+    #[subdiagnostic]\n+    pub sign_bit_sub: Option<OverflowingBinHexSignBitSub<'a>>,\n }\n \n pub enum OverflowingBinHexSign {\n@@ -1386,6 +1388,21 @@ pub enum OverflowingBinHexSub<'a> {\n     Help { suggestion_ty: &'a str },\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    lint_sign_bit_suggestion,\n+    code = \"{lit_no_suffix}{uint_ty} as {int_ty}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct OverflowingBinHexSignBitSub<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub lit_no_suffix: &'a str,\n+    pub negative_val: String,\n+    pub uint_ty: &'a str,\n+    pub int_ty: &'a str,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_overflowing_int)]\n #[note]"}, {"sha": "ec9e7c7fdae83a1297cdc2e764fbd4c43d553491", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f530016f50799aba1a39df2fb881324e6e9193aa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f530016f50799aba1a39df2fb881324e6e9193aa", "patch": "@@ -3,9 +3,10 @@ use crate::{\n     lints::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n         InvalidAtomicOrderingDiag, InvalidNanComparisons, InvalidNanComparisonsSuggestion,\n-        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSub,\n-        OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n-        RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange, VariantSizeDifferencesDiag,\n+        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSignBitSub,\n+        OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n+        VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -297,10 +298,50 @@ fn report_bin_hex_error(\n             }\n         },\n     );\n+    let sign_bit_sub = (!negative)\n+        .then(|| {\n+            let ty::Int(int_ty) = cx.typeck_results().node_type(expr.hir_id).kind() else {\n+                return None;\n+            };\n+\n+            let Some(bit_width) = int_ty.bit_width() else {\n+                return None; // isize case\n+            };\n+\n+            // Skip if sign bit is not set\n+            if (val & (1 << (bit_width - 1))) == 0 {\n+                return None;\n+            }\n+\n+            let lit_no_suffix =\n+                if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n+                    repr_str.split_at(pos).0\n+                } else {\n+                    &repr_str\n+                };\n+\n+            Some(OverflowingBinHexSignBitSub {\n+                span: expr.span,\n+                lit_no_suffix,\n+                negative_val: actually.clone(),\n+                int_ty: int_ty.name_str(),\n+                uint_ty: int_ty.to_unsigned().name_str(),\n+            })\n+        })\n+        .flatten();\n+\n     cx.emit_spanned_lint(\n         OVERFLOWING_LITERALS,\n         expr.span,\n-        OverflowingBinHex { ty: t, lit: repr_str.clone(), dec: val, actually, sign, sub },\n+        OverflowingBinHex {\n+            ty: t,\n+            lit: repr_str.clone(),\n+            dec: val,\n+            actually,\n+            sign,\n+            sub,\n+            sign_bit_sub,\n+        },\n     )\n }\n "}, {"sha": "e7c90dcc81bb206861c209d4f252416ade1d5042", "filename": "tests/ui/lint/type-overflow.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f530016f50799aba1a39df2fb881324e6e9193aa/tests%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f530016f50799aba1a39df2fb881324e6e9193aa/tests%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Ftype-overflow.stderr?ref=f530016f50799aba1a39df2fb881324e6e9193aa", "patch": "@@ -16,17 +16,33 @@ warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:10:16\n    |\n LL |     let fail = 0b1000_0001i8;\n-   |                ^^^^^^^^^^^^^ help: consider using the type `u8` instead: `0b1000_0001u8`\n+   |                ^^^^^^^^^^^^^\n    |\n    = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into the type `i8` and will become `-127i8`\n+help: consider using the type `u8` instead\n+   |\n+LL |     let fail = 0b1000_0001u8;\n+   |                ~~~~~~~~~~~~~\n+help: to use as a negative number (decimal `-127`), consider using the type `u8` for the literal and cast it to `i8`\n+   |\n+LL |     let fail = 0b1000_0001u8 as i8;\n+   |                ~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i64`\n   --> $DIR/type-overflow.rs:12:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x8000_0000_0000_0000u64`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into the type `i64` and will become `-9223372036854775808i64`\n+help: consider using the type `u64` instead\n+   |\n+LL |     let fail = 0x8000_0000_0000_0000u64;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+help: to use as a negative number (decimal `-9223372036854775808`), consider using the type `u64` for the literal and cast it to `i64`\n+   |\n+LL |     let fail = 0x8000_0000_0000_0000u64 as i64;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `u32`\n   --> $DIR/type-overflow.rs:14:16\n@@ -44,6 +60,10 @@ LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |\n    = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into the type `i128` and will become `-170141183460469231731687303715884105728i128`\n    = help: consider using the type `u128` instead\n+help: to use as a negative number (decimal `-170141183460469231731687303715884105728`), consider using the type `u128` for the literal and cast it to `i128`\n+   |\n+LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000u128 as i128;\n+   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i32`\n   --> $DIR/type-overflow.rs:19:16\n@@ -53,6 +73,10 @@ LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE;\n    |\n    = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into the type `i32` and will become `-2i32`\n    = help: consider using the type `i128` instead\n+help: to use as a negative number (decimal `-2`), consider using the type `u32` for the literal and cast it to `i32`\n+   |\n+LL |     let fail = 0x8FFF_FFFF_FFFF_FFFEu32 as i32;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:21:17"}]}