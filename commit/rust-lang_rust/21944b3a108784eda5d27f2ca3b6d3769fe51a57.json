{"sha": "21944b3a108784eda5d27f2ca3b6d3769fe51a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTQ0YjNhMTA4Nzg0ZWRhNWQyN2YyY2EzYjZkMzc2OWZlNTFhNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T13:13:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:56Z"}, "message": "expand: add recovery for parse_nt", "tree": {"sha": "f1b7a21076ef80174b4a69815c2799083ee86c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b7a21076ef80174b4a69815c2799083ee86c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21944b3a108784eda5d27f2ca3b6d3769fe51a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21944b3a108784eda5d27f2ca3b6d3769fe51a57", "html_url": "https://github.com/rust-lang/rust/commit/21944b3a108784eda5d27f2ca3b6d3769fe51a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21944b3a108784eda5d27f2ca3b6d3769fe51a57/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397996420040fb7245f1f5e09a8ec441522183c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/397996420040fb7245f1f5e09a8ec441522183c0", "html_url": "https://github.com/rust-lang/rust/commit/397996420040fb7245f1f5e09a8ec441522183c0"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "e868b7e36aac5008d03236d7ab8012c30fb0dce5", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=21944b3a108784eda5d27f2ca3b6d3769fe51a57", "patch": "@@ -84,7 +84,7 @@ use rustc_parse::parser::{FollowedByType, Parser, PathStyle};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Ident, MacroRulesNormalizedIdent, Symbol};\n \n-use rustc_errors::{FatalError, PResult};\n+use rustc_errors::PResult;\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n \n@@ -271,6 +271,7 @@ crate enum ParseResult<T> {\n     Failure(Token, &'static str),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(rustc_span::Span, String),\n+    ErrorReported,\n }\n \n /// A `ParseResult` where the `Success` variant contains a mapping of\n@@ -652,6 +653,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             Success(_) => {}\n             Failure(token, msg) => return Failure(token, msg),\n             Error(sp, msg) => return Error(sp, msg),\n+            ErrorReported => return ErrorReported,\n         }\n \n         // inner parse loop handled all cur_items, so it's empty\n@@ -735,10 +737,11 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             let mut item = bb_items.pop().unwrap();\n             if let TokenTree::MetaVarDecl(span, _, ident) = item.top_elts.get_tt(item.idx) {\n                 let match_cur = item.match_cur;\n-                item.push_match(\n-                    match_cur,\n-                    MatchedNonterminal(Lrc::new(parse_nt(parser.to_mut(), span, ident.name))),\n-                );\n+                let nt = match parse_nt(parser.to_mut(), span, ident.name) {\n+                    Err(()) => return ErrorReported,\n+                    Ok(nt) => nt,\n+                };\n+                item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));\n                 item.idx += 1;\n                 item.match_cur += 1;\n             } else {\n@@ -849,20 +852,16 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n /// # Returns\n ///\n /// The parsed non-terminal.\n-fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n+fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Result<Nonterminal, ()> {\n     // FIXME(Centril): Consider moving this to `parser.rs` to make\n     // the visibilities of the methods used below `pub(super)` at most.\n-\n     if name == sym::tt {\n-        return token::NtTT(p.parse_token_tree());\n-    }\n-    match parse_nt_inner(p, sp, name) {\n-        Ok(nt) => nt,\n-        Err(mut err) => {\n-            err.emit();\n-            FatalError.raise();\n-        }\n+        return Ok(token::NtTT(p.parse_token_tree()));\n     }\n+    parse_nt_inner(p, sp, name).map_err(|mut err| {\n+        err.span_label(sp, format!(\"while parsing argument for this `{}` macro fragment\", name))\n+            .emit()\n+    })\n }\n \n fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a, Nonterminal> {"}, {"sha": "43bc72090bc43892536abfc2d2d298f4fba0c378", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=21944b3a108784eda5d27f2ca3b6d3769fe51a57", "patch": "@@ -4,7 +4,7 @@ use crate::expand::{ensure_complete_parse, parse_ast_fragment, AstFragment, AstF\n use crate::mbe;\n use crate::mbe::macro_check;\n use crate::mbe::macro_parser::parse_tt;\n-use crate::mbe::macro_parser::{Error, Failure, Success};\n+use crate::mbe::macro_parser::{Error, ErrorReported, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq};\n use crate::mbe::transcribe::transcribe;\n \n@@ -317,6 +317,7 @@ fn generic_extension<'cx>(\n                 cx.struct_span_err(span, &msg).emit();\n                 return DummyResult::any(span);\n             }\n+            ErrorReported => return DummyResult::any(sp),\n         }\n \n         // The matcher was not `Success(..)`ful.\n@@ -448,6 +449,9 @@ pub fn compile_declarative_macro(\n             sess.span_diagnostic.struct_span_err(sp.substitute_dummy(def.span), &msg).emit();\n             return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n         }\n+        ErrorReported => {\n+            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n+        }\n     };\n \n     let mut valid = true;"}, {"sha": "73e3552e3ec7a5e81a360203536a2e14bc455d01", "filename": "src/test/ui/parser/issue-62894.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr?ref=21944b3a108784eda5d27f2ca3b6d3769fe51a57", "patch": "@@ -42,6 +42,11 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n LL | \n LL | fn main() {}\n    | ^^ unexpected token\n+   | \n+  ::: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+   |\n+LL |     ($left:expr, $right:expr) => ({\n+   |      ---------- while parsing argument for this `expr` macro fragment\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ccbeb398af5baee5f87050f40c4dd01758b2c2c8", "filename": "src/test/ui/parser/nt-parsing-has-recovery.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.rs?ref=21944b3a108784eda5d27f2ca3b6d3769fe51a57", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! foo {\n+    ($e:expr) => {}\n+}\n+\n+foo!(1 + @); //~ ERROR expected expression, found `@`\n+foo!(1 + @); //~ ERROR expected expression, found `@`\n+\n+fn main() {\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "263c4ad53612ee98f7c90a3ff2055b6aec2a5eac", "filename": "src/test/ui/parser/nt-parsing-has-recovery.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21944b3a108784eda5d27f2ca3b6d3769fe51a57/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnt-parsing-has-recovery.stderr?ref=21944b3a108784eda5d27f2ca3b6d3769fe51a57", "patch": "@@ -0,0 +1,29 @@\n+error: expected expression, found `@`\n+  --> $DIR/nt-parsing-has-recovery.rs:5:10\n+   |\n+LL |     ($e:expr) => {}\n+   |      ------- while parsing argument for this `expr` macro fragment\n+...\n+LL | foo!(1 + @);\n+   |          ^ expected expression\n+\n+error: expected expression, found `@`\n+  --> $DIR/nt-parsing-has-recovery.rs:6:10\n+   |\n+LL |     ($e:expr) => {}\n+   |      ------- while parsing argument for this `expr` macro fragment\n+...\n+LL | foo!(1 + @);\n+   |          ^ expected expression\n+\n+error[E0308]: mismatched types\n+  --> $DIR/nt-parsing-has-recovery.rs:9:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}