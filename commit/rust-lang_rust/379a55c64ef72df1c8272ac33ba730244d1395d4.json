{"sha": "379a55c64ef72df1c8272ac33ba730244d1395d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OWE1NWM2NGVmNzJkZjFjODI3MmFjMzNiYTczMDI0NGQxMzk1ZDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:11Z"}, "message": "Rollup merge of #84450 - jyn514:missing-std, r=petrochenkov\n\nGive a better error when `std` or `core` are missing\n\n- Suggest using `rustup target add` if `RUSTUP_HOME` is set. I don't know if there's any precedent for doing this, but it seems harmless enough and it will be a big help.\n- On nightly, suggest using `cargo build -Z build-std` if `CARGO` is set\n- Add a note about `#![no_std]` if `std` is missing but not core\n- Add a note that std may be unsupported if `std` is missing but not core\n\nFixes https://github.com/rust-lang/rust/issues/84418.\n\nr? `@petrochenkov`", "tree": {"sha": "2974fc18fd6afd1b9083cc5455f01f2d7d5a60ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2974fc18fd6afd1b9083cc5455f01f2d7d5a60ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379a55c64ef72df1c8272ac33ba730244d1395d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdvgCRBK7hj4Ov3rIwAAWXAIAGzg7RkVfkB1SM35bcc3W7eQ\nzlnB/B7Bv+s8hnuz2VytuF/JRck20VkY1IprQg4cS73mIt3mBFKxb2f/E1wcmc5p\nPoQcrQWUVxUORAxVodfXgjht4nNee+6+MlvF+c48NiyE/dRvAPE80/5xztVKYEbv\nS5rvWspen3Ik5bFjJdYpx866d4SMMdHKAdqgoQixN0n1DTGvwF8arygu36EzPfHM\nvSjlWu7rl2yK3+7Iv8KZq/86CZiVgGby1IaQHwjt53lFSv2r+Q/bKmMN9sbvEjdu\nx5/sG4Pqe2Vme+aBhq8MRMBdohC3UobibVU+jeNVr6eeJ6RfAUoJkEbkZRHL4Oc=\n=hwQk\n-----END PGP SIGNATURE-----\n", "payload": "tree 2974fc18fd6afd1b9083cc5455f01f2d7d5a60ad\nparent e7e22b47ad25f03c9a085f0b99346cab201847db\nparent d326a4b4c9176193ff0ac445ec14ac50bd081f04\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385311 +0200\ncommitter GitHub <noreply@github.com> 1619385311 +0200\n\nRollup merge of #84450 - jyn514:missing-std, r=petrochenkov\n\nGive a better error when `std` or `core` are missing\n\n- Suggest using `rustup target add` if `RUSTUP_HOME` is set. I don't know if there's any precedent for doing this, but it seems harmless enough and it will be a big help.\n- On nightly, suggest using `cargo build -Z build-std` if `CARGO` is set\n- Add a note about `#![no_std]` if `std` is missing but not core\n- Add a note that std may be unsupported if `std` is missing but not core\n\nFixes https://github.com/rust-lang/rust/issues/84418.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379a55c64ef72df1c8272ac33ba730244d1395d4", "html_url": "https://github.com/rust-lang/rust/commit/379a55c64ef72df1c8272ac33ba730244d1395d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379a55c64ef72df1c8272ac33ba730244d1395d4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e22b47ad25f03c9a085f0b99346cab201847db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e22b47ad25f03c9a085f0b99346cab201847db", "html_url": "https://github.com/rust-lang/rust/commit/e7e22b47ad25f03c9a085f0b99346cab201847db"}, {"sha": "d326a4b4c9176193ff0ac445ec14ac50bd081f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/d326a4b4c9176193ff0ac445ec14ac50bd081f04", "html_url": "https://github.com/rust-lang/rust/commit/d326a4b4c9176193ff0ac445ec14ac50bd081f04"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "e9ae22f8cedbc47926fd0ed4aa39e9ae0469fa10", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/379a55c64ef72df1c8272ac33ba730244d1395d4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379a55c64ef72df1c8272ac33ba730244d1395d4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=379a55c64ef72df1c8272ac33ba730244d1395d4", "patch": "@@ -511,8 +511,11 @@ impl<'a> CrateLoader<'a> {\n         if dep.is_none() {\n             self.used_extern_options.insert(name);\n         }\n-        self.maybe_resolve_crate(name, dep_kind, dep)\n-            .unwrap_or_else(|err| err.report(self.sess, span))\n+        self.maybe_resolve_crate(name, dep_kind, dep).unwrap_or_else(|err| {\n+            let missing_core =\n+                self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n+            err.report(&self.sess, span, missing_core)\n+        })\n     }\n \n     fn maybe_resolve_crate<'b>("}, {"sha": "6e7360950908e9dbd164ff0c7f7ecfebb93f4b91", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/379a55c64ef72df1c8272ac33ba730244d1395d4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379a55c64ef72df1c8272ac33ba730244d1395d4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=379a55c64ef72df1c8272ac33ba730244d1395d4", "patch": "@@ -790,7 +790,8 @@ pub fn find_plugin_registrar(\n ) -> (PathBuf, CrateDisambiguator) {\n     match find_plugin_registrar_impl(sess, metadata_loader, name) {\n         Ok(res) => res,\n-        Err(err) => err.report(sess, span),\n+        // `core` is always available if we got as far as loading plugins.\n+        Err(err) => err.report(sess, span, false),\n     }\n }\n \n@@ -883,7 +884,7 @@ crate enum CrateError {\n }\n \n impl CrateError {\n-    crate fn report(self, sess: &Session, span: Span) -> ! {\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n         let mut err = match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n@@ -1068,7 +1069,37 @@ impl CrateError {\n                     if (crate_name == sym::std || crate_name == sym::core)\n                         && locator.triple != TargetTriple::from_triple(config::host_triple())\n                     {\n-                        err.note(&format!(\"the `{}` target may not be installed\", locator.triple));\n+                        if missing_core {\n+                            err.note(&format!(\n+                                \"the `{}` target may not be installed\",\n+                                locator.triple\n+                            ));\n+                        } else {\n+                            err.note(&format!(\n+                                \"the `{}` target may not support the standard library\",\n+                                locator.triple\n+                            ));\n+                        }\n+                        if missing_core && std::env::var(\"RUSTUP_HOME\").is_ok() {\n+                            err.help(&format!(\n+                                \"consider downloading the target with `rustup target add {}`\",\n+                                locator.triple\n+                            ));\n+                        }\n+                        // Suggest using #![no_std]. #[no_core] is unstable and not really supported anyway.\n+                        // NOTE: this is a dummy span if `extern crate std` was injected by the compiler.\n+                        // If it's not a dummy, that means someone added `extern crate std` explicitly and `#![no_std]` won't help.\n+                        if !missing_core && span.is_dummy() {\n+                            let current_crate =\n+                                sess.opts.crate_name.as_deref().unwrap_or(\"<unknown>\");\n+                            err.note(&format!(\n+                                \"`std` is required by `{}` because it does not declare `#![no_std]`\",\n+                                current_crate\n+                            ));\n+                        }\n+                        if sess.is_nightly_build() && std::env::var(\"CARGO\").is_ok() {\n+                            err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n+                        }\n                     } else if crate_name == sym::profiler_builtins {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n                     }"}, {"sha": "442a7c01e5a69421da5a91fe10f859624c202912", "filename": "src/test/ui/crate-loading/missing-std.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/379a55c64ef72df1c8272ac33ba730244d1395d4/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379a55c64ef72df1c8272ac33ba730244d1395d4/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs?ref=379a55c64ef72df1c8272ac33ba730244d1395d4", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --target x86_64-unknown-uefi\n+// rustc-env:CARGO=/usr/bin/cargo\n+// rustc-env:RUSTUP_HOME=/home/bors/.rustup\n+#![no_core]\n+extern crate core;\n+//~^ ERROR can't find crate for `core`\n+//~| NOTE can't find crate\n+//~| NOTE target may not be installed\n+//~| HELP consider building the standard library from source with `cargo build -Zbuild-std`\n+//~| HELP consider downloading the target with `rustup target add x86_64-unknown-uefi`\n+fn main() {}"}, {"sha": "25808efdfa6993e94c45af96bfd0878e1598f4ad", "filename": "src/test/ui/crate-loading/missing-std.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/379a55c64ef72df1c8272ac33ba730244d1395d4/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/379a55c64ef72df1c8272ac33ba730244d1395d4/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr?ref=379a55c64ef72df1c8272ac33ba730244d1395d4", "patch": "@@ -0,0 +1,13 @@\n+error[E0463]: can't find crate for `core`\n+  --> $DIR/missing-std.rs:5:1\n+   |\n+LL | extern crate core;\n+   | ^^^^^^^^^^^^^^^^^^ can't find crate\n+   |\n+   = note: the `x86_64-unknown-uefi` target may not be installed\n+   = help: consider downloading the target with `rustup target add x86_64-unknown-uefi`\n+   = help: consider building the standard library from source with `cargo build -Zbuild-std`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0463`."}]}