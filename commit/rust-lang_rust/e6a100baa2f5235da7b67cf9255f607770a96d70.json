{"sha": "e6a100baa2f5235da7b67cf9255f607770a96d70", "node_id": "C_kwDOAAsO6NoAKGU2YTEwMGJhYTJmNTIzNWRhN2I2N2NmOTI1NWY2MDc3NzBhOTZkNzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-19T11:30:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T11:30:49Z"}, "message": "Rollup merge of #99438 - WaffleLapkin:dont_wrap_in_non_zero, r=compiler-errors\n\nImprove suggestions for `NonZeroT` <- `T` coercion error\n\nCurrently, when encountering a type mismatch error with `NonZeroT` and `T` (for example `NonZeroU8` and `u8`) we errorneusly suggest wrapping expression in `NonZeroT`:\n```text\nerror[E0308]: mismatched types\n --> ./t.rs:7:35\n  |\n7 |     let _: std::num::NonZeroU64 = 1;\n  |            --------------------   ^ expected struct `NonZeroU64`, found integer\n  |            |\n  |            expected due to this\n  |\nhelp: try wrapping the expression in `std::num::NonZeroU64`\n  |\n7 |     let _: std::num::NonZeroU64 = std::num::NonZeroU64(1);\n  |                                   +++++++++++++++++++++ +\n```\n\nI've removed this suggestion and added suggestions to call `new` (for `Option<NonZeroT>` <- `T` case) or `new` and `unwrap` (for `NonZeroT` <- `T` case):\n\n```text\nerror[E0308]: mismatched types\n --> ./t.rs:7:35\n  |\n7 |     let _: std::num::NonZeroU64 = 1;\n  |            --------------------   ^ expected struct `NonZeroU64`, found integer\n  |            |\n  |            expected due to this\n  |\nhelp: Consider calling `NonZeroU64::new`\n  |\n7 |     let _: std::num::NonZeroU64 = NonZeroU64::new(1).unwrap();\n  |                                   ++++++++++++++++ ++++++++++\n\nerror[E0308]: mismatched types\n --> ./t.rs:8:43\n  |\n8 |     let _: Option<std::num::NonZeroU64> = 1;\n  |            ----------------------------   ^ expected enum `Option`, found integer\n  |            |\n  |            expected due to this\n  |\n  = note: expected enum `Option<NonZeroU64>`\n             found type `{integer}`\nhelp: Consider calling `NonZeroU64::new`\n  |\n8 |     let _: Option<std::num::NonZeroU64> = NonZeroU64::new(1);\n  |                                           ++++++++++++++++ +\n```\n\nr? `@compiler-errors`", "tree": {"sha": "f0addc86bedc85ada8e2099485eef7d89b30f355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0addc86bedc85ada8e2099485eef7d89b30f355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a100baa2f5235da7b67cf9255f607770a96d70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1pXqCRBK7hj4Ov3rIwAAU98IACZg5oE1y3qTjEkuQSGV0dQx\n5MF54hw3NKl85U98r1oVUisO/yM8e6twOxbt8nVZzeUtR8jBBCd4PusrxOydCKKN\nmpg6cbD41YSkpAyKxrso6mJCoAX+efa4+TP1otjC40PJvYkeIUF2DkeFvFXhOGse\nlpIpjSxH0otRCyvjiHB6vVv9MozoapL1LtFIeaXwolPTAlIrDNDiLviPr06gdkCd\ngNBQY0BsqzOiDqIE8rdbtakdz6+VGcb9j37g2gINrGghAz3vrd+nIj6A9JJffC3J\n8yH0bxE3AaQFfPmlBbEKyCj4tlEhPUOjdJugDJh0NOXYZAWHZAvCgAC2qAJpc90=\n=dhuS\n-----END PGP SIGNATURE-----\n", "payload": "tree f0addc86bedc85ada8e2099485eef7d89b30f355\nparent 19932a55335d00c9829c5fc6473bc6cf0b689aff\nparent 5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658230249 +0200\ncommitter GitHub <noreply@github.com> 1658230249 +0200\n\nRollup merge of #99438 - WaffleLapkin:dont_wrap_in_non_zero, r=compiler-errors\n\nImprove suggestions for `NonZeroT` <- `T` coercion error\n\nCurrently, when encountering a type mismatch error with `NonZeroT` and `T` (for example `NonZeroU8` and `u8`) we errorneusly suggest wrapping expression in `NonZeroT`:\n```text\nerror[E0308]: mismatched types\n --> ./t.rs:7:35\n  |\n7 |     let _: std::num::NonZeroU64 = 1;\n  |            --------------------   ^ expected struct `NonZeroU64`, found integer\n  |            |\n  |            expected due to this\n  |\nhelp: try wrapping the expression in `std::num::NonZeroU64`\n  |\n7 |     let _: std::num::NonZeroU64 = std::num::NonZeroU64(1);\n  |                                   +++++++++++++++++++++ +\n```\n\nI've removed this suggestion and added suggestions to call `new` (for `Option<NonZeroT>` <- `T` case) or `new` and `unwrap` (for `NonZeroT` <- `T` case):\n\n```text\nerror[E0308]: mismatched types\n --> ./t.rs:7:35\n  |\n7 |     let _: std::num::NonZeroU64 = 1;\n  |            --------------------   ^ expected struct `NonZeroU64`, found integer\n  |            |\n  |            expected due to this\n  |\nhelp: Consider calling `NonZeroU64::new`\n  |\n7 |     let _: std::num::NonZeroU64 = NonZeroU64::new(1).unwrap();\n  |                                   ++++++++++++++++ ++++++++++\n\nerror[E0308]: mismatched types\n --> ./t.rs:8:43\n  |\n8 |     let _: Option<std::num::NonZeroU64> = 1;\n  |            ----------------------------   ^ expected enum `Option`, found integer\n  |            |\n  |            expected due to this\n  |\n  = note: expected enum `Option<NonZeroU64>`\n             found type `{integer}`\nhelp: Consider calling `NonZeroU64::new`\n  |\n8 |     let _: Option<std::num::NonZeroU64> = NonZeroU64::new(1);\n  |                                           ++++++++++++++++ +\n```\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a100baa2f5235da7b67cf9255f607770a96d70", "html_url": "https://github.com/rust-lang/rust/commit/e6a100baa2f5235da7b67cf9255f607770a96d70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a100baa2f5235da7b67cf9255f607770a96d70/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19932a55335d00c9829c5fc6473bc6cf0b689aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/19932a55335d00c9829c5fc6473bc6cf0b689aff", "html_url": "https://github.com/rust-lang/rust/commit/19932a55335d00c9829c5fc6473bc6cf0b689aff"}, {"sha": "5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328", "html_url": "https://github.com/rust-lang/rust/commit/5bd88dfa8a0b5d5bcdd84d21e2f465719ce8c328"}], "stats": {"total": 213, "additions": 207, "deletions": 6}, "files": [{"sha": "3ccd3fcbafa2bafb5c4db93540e3689f6176dc58", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -223,6 +223,16 @@ symbols! {\n         LintPass,\n         Mutex,\n         N,\n+        NonZeroI128,\n+        NonZeroI16,\n+        NonZeroI32,\n+        NonZeroI64,\n+        NonZeroI8,\n+        NonZeroU128,\n+        NonZeroU16,\n+        NonZeroU32,\n+        NonZeroU64,\n+        NonZeroU8,\n         None,\n         Ok,\n         Option,"}, {"sha": "a2d8765289c55498ae098f049d3ea424b386a5aa", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -33,6 +33,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n+        self.suggest_non_zero_new_unwrap(err, expr, expected, expr_ty);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n             return;\n         }\n@@ -347,14 +348,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            let compatible_variants: Vec<String> = expected_adt\n+            let compatible_variants: Vec<(String, Option<String>)> = expected_adt\n                 .variants()\n                 .iter()\n                 .filter(|variant| {\n                     variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n                 })\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n+\n+                    let field_is_local = sole_field.did.is_local();\n+                    let field_is_accessible =\n+                        sole_field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx);\n+\n+                    if !field_is_local && !field_is_accessible {\n+                        return None;\n+                    }\n+\n+                    let note_about_variant_field_privacy = (field_is_local && !field_is_accessible)\n+                        .then(|| format!(\" (its field is private, but it's local to this crate and its privacy can be changed)\"));\n+\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path =\n@@ -363,9 +376,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\")\n                             && let Some((_, path)) = path.split_once(\"::\")\n                         {\n-                            return Some(path.to_string());\n+                            return Some((path.to_string(), note_about_variant_field_privacy));\n                         }\n-                        Some(variant_path)\n+                        Some((variant_path, note_about_variant_field_privacy))\n                     } else {\n                         None\n                     }\n@@ -379,10 +392,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match &compatible_variants[..] {\n                 [] => { /* No variants to format */ }\n-                [variant] => {\n+                [(variant, note)] => {\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n-                        &format!(\"try wrapping the expression in `{variant}`\"),\n+                        &format!(\n+                            \"try wrapping the expression in `{variant}`{note}\",\n+                            note = note.as_deref().unwrap_or(\"\")\n+                        ),\n                         vec![\n                             (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -397,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"try wrapping the expression in a variant of `{}`\",\n                             self.tcx.def_path_str(expected_adt.did())\n                         ),\n-                        compatible_variants.into_iter().map(|variant| {\n+                        compatible_variants.into_iter().map(|(variant, _)| {\n                             vec![\n                                 (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                                 (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -410,6 +426,57 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_non_zero_new_unwrap(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        expr_ty: Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        let (adt, unwrap) = match expected.kind() {\n+            // In case Option<NonZero*> is wanted, but * is provided, suggest calling new\n+            ty::Adt(adt, substs) if tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n+                // Unwrap option\n+                let ty::Adt(adt, _) = substs.type_at(0).kind() else { return };\n+\n+                (adt, \"\")\n+            }\n+            // In case NonZero* is wanted, but * is provided also add `.unwrap()` to satisfy types\n+            ty::Adt(adt, _) => (adt, \".unwrap()\"),\n+            _ => return,\n+        };\n+\n+        let map = [\n+            (sym::NonZeroU8, tcx.types.u8),\n+            (sym::NonZeroU16, tcx.types.u16),\n+            (sym::NonZeroU32, tcx.types.u32),\n+            (sym::NonZeroU64, tcx.types.u64),\n+            (sym::NonZeroU128, tcx.types.u128),\n+            (sym::NonZeroI8, tcx.types.i8),\n+            (sym::NonZeroI16, tcx.types.i16),\n+            (sym::NonZeroI32, tcx.types.i32),\n+            (sym::NonZeroI64, tcx.types.i64),\n+            (sym::NonZeroI128, tcx.types.i128),\n+        ];\n+\n+        let Some((s, _)) = map\n+            .iter()\n+            .find(|&&(s, t)| self.tcx.is_diagnostic_item(s, adt.did()) && self.can_coerce(expr_ty, t))\n+            else { return };\n+\n+        let path = self.tcx.def_path_str(adt.non_enum_variant().def_id);\n+\n+        err.multipart_suggestion(\n+            format!(\"consider calling `{s}::new`\"),\n+            vec![\n+                (expr.span.shrink_to_lo(), format!(\"{path}::new(\")),\n+                (expr.span.shrink_to_hi(), format!(\"){unwrap}\")),\n+            ],\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub fn get_conversion_methods(\n         &self,\n         span: Span,"}, {"sha": "4de0a0cf564c576928718c32ed85fa2f623d01f4", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -39,6 +39,7 @@ macro_rules! nonzero_integers {\n             #[repr(transparent)]\n             #[rustc_layout_scalar_valid_range_start(1)]\n             #[rustc_nonnull_optimization_guaranteed]\n+            #[rustc_diagnostic_item = stringify!($Ty)]\n             pub struct $Ty($Int);\n \n             impl $Ty {"}, {"sha": "d2adbe01c18286f11a66787f469f0d0664a8d479", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _: std::num::NonZeroU64 = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+\n+    let _: Option<std::num::NonZeroU64> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+}"}, {"sha": "d4b2c902f9b2ed4e275dc4c902a4d4acb8f1267d", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -0,0 +1,31 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:2:35\n+   |\n+LL |     let _: std::num::NonZeroU64 = 1;\n+   |            --------------------   ^ expected struct `NonZeroU64`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: std::num::NonZeroU64 = NonZeroU64::new(1).unwrap();\n+   |                                   ++++++++++++++++ ++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:6:43\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = 1;\n+   |            ----------------------------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<NonZeroU64>`\n+              found type `{integer}`\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = NonZeroU64::new(1);\n+   |                                           ++++++++++++++++ +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "63cb1a1299147d24a0ade82bc97567f6ffb22dc8", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -0,0 +1,24 @@\n+mod inner {\n+    pub struct Wrapper<T>(T);\n+}\n+\n+fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+fn needs_ready(t: std::future::Ready<i32>) {}\n+\n+fn main() {\n+    // Suggest wrapping expression because type is local\n+    // and its privacy can be easily changed\n+    needs_wrapper(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `inner::Wrapper`\n+\n+    // Suggest wrapping expression because field is accessible\n+    needs_wrapping(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `std::num::Wrapping`\n+\n+    // Do not suggest wrapping expression\n+    needs_ready(Some(0));\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "e8eb8d263ec795d068e71d14ef464dc56020a7e4", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6a100baa2f5235da7b67cf9255f607770a96d70/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=e6a100baa2f5235da7b67cf9255f607770a96d70", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:12:19\n+   |\n+LL |     needs_wrapper(0);\n+   |     ------------- ^ expected struct `Wrapper`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapper<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:5:4\n+   |\n+LL | fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+   |    ^^^^^^^^^^^^^ ----------------------\n+help: try wrapping the expression in `inner::Wrapper` (its field is private, but it's local to this crate and its privacy can be changed)\n+   |\n+LL |     needs_wrapper(inner::Wrapper(0));\n+   |                   +++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:17:20\n+   |\n+LL |     needs_wrapping(0);\n+   |     -------------- ^ expected struct `Wrapping`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapping<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:6:4\n+   |\n+LL | fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+   |    ^^^^^^^^^^^^^^ --------------------------\n+help: try wrapping the expression in `std::num::Wrapping`\n+   |\n+LL |     needs_wrapping(std::num::Wrapping(0));\n+   |                    +++++++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:22:17\n+   |\n+LL |     needs_ready(Some(0));\n+   |     ----------- ^^^^^^^ expected struct `std::future::Ready`, found enum `Option`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `std::future::Ready<i32>`\n+                found enum `Option<{integer}>`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:7:4\n+   |\n+LL | fn needs_ready(t: std::future::Ready<i32>) {}\n+   |    ^^^^^^^^^^^ --------------------------\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}