{"sha": "f62903b74a8630fa62e721f69e6621d1d441e7f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjkwM2I3NGE4NjMwZmE2MmU3MjFmNjllNjYyMWQxZDQ0MWU3ZjE=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-05T15:47:37Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-15T08:40:56Z"}, "message": "Export `#[inline] #[no_mangle]` fns in cdylibs and staticlibs", "tree": {"sha": "a054cf5352766f8084835cc3f9326a316f83cd96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a054cf5352766f8084835cc3f9326a316f83cd96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62903b74a8630fa62e721f69e6621d1d441e7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62903b74a8630fa62e721f69e6621d1d441e7f1", "html_url": "https://github.com/rust-lang/rust/commit/f62903b74a8630fa62e721f69e6621d1d441e7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62903b74a8630fa62e721f69e6621d1d441e7f1/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6d3a73b514e9649e57cee812ad129bb2112016", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6d3a73b514e9649e57cee812ad129bb2112016", "html_url": "https://github.com/rust-lang/rust/commit/ce6d3a73b514e9649e57cee812ad129bb2112016"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "bf8693f3547a4b5efc8f4a9145e18bc52b752ed6", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -89,10 +89,11 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                 | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n-                    if !generics.requires_monomorphization(tcx) &&\n-                        // Functions marked with #[inline] are only ever codegened\n-                        // with \"internal\" linkage and are never exported.\n-                        !Instance::mono(tcx, def_id.to_def_id()).def.generates_cgu_internal_copy(tcx)\n+                    if !generics.requires_monomorphization(tcx)\n+                        && (!Instance::mono(tcx, def_id.to_def_id())\n+                            .def\n+                            .generates_cgu_internal_copy(tcx)\n+                            || tcx.inline_exportable(def_id.to_def_id()))\n                     {\n                         Some(def_id)\n                     } else {"}, {"sha": "d8dcf0dea8a5f3cf62aec4474d723112fa795143", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -95,6 +95,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some()\n                     || !instance.def.generates_cgu_internal_copy(tcx)\n+                    || tcx.inline_exportable(instance.def_id())\n                     || Some(instance.def_id()) == entry_def_id.map(LocalDefId::to_def_id)\n                 {\n                     return InstantiationMode::GloballyShared { may_conflict: false };"}, {"sha": "20487fdb6696d1397e975dcc990b0da08f7dc689", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -697,6 +697,10 @@ rustc_queries! {\n             storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { true }\n         }\n+\n+        query inline_exportable(def_id: DefId) -> bool {\n+            desc { |tcx| \"computing whether `{}` should be explicitly exported\", tcx.def_path_str(def_id) }\n+        }\n     }\n \n     Other {"}, {"sha": "08a6330e718e63f267702594fbd7a9f8cf3e2dc5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_session::config::CrateType;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -79,6 +80,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         static_mutability,\n         generator_kind,\n         codegen_fn_attrs,\n+        inline_exportable,\n         collect_mod_item_types,\n         ..*providers\n     };\n@@ -2599,6 +2601,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     codegen_fn_attrs\n }\n \n+fn inline_exportable(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    // Functions marked with #[inline] are only ever codegened\n+    // with \"internal\" linkage and are never exported unless we're\n+    // building a `staticlib` or `cdylib` and they are marked\n+    // `#[no_mangle]`.\n+    tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n+        && (tcx.sess.crate_types().contains(&CrateType::Cdylib)\n+            || tcx.sess.crate_types().contains(&CrateType::Staticlib))\n+}\n+\n /// Checks if the provided DefId is a method in a trait impl for a trait which has track_caller\n /// applied to the method prototype.\n fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {"}, {"sha": "827de7e5c11d9341647b014a79d684fb1dacd32e", "filename": "src/test/codegen/cdylib-external-no-mangle-fns.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcdylib-external-no-mangle-fns.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"cdylib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {\n+    // side effect to keep `a` around\n+    unsafe {\n+        core::ptr::read_volatile(&42);\n+    }\n+}"}, {"sha": "0b4a37febb209c5475f6f3600a4aea0215242e32", "filename": "src/test/codegen/staticlib-external-no-mangle-fns.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62903b74a8630fa62e721f69e6621d1d441e7f1/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstaticlib-external-no-mangle-fns.rs?ref=f62903b74a8630fa62e721f69e6621d1d441e7f1", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {\n+    // side effect to keep `a` around\n+    unsafe {\n+        core::ptr::read_volatile(&42);\n+    }\n+}"}]}