{"sha": "1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmY2IwNDQzY2YyYTU1NzU2OTFiNzBlN2VmODBlOTcyMGJjNGJjMDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T02:15:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:35:59Z"}, "message": "doc: Remove documentation on newtype enums.", "tree": {"sha": "48498367eea47ad48de8b3f63744ab6352dcec44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48498367eea47ad48de8b3f63744ab6352dcec44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "html_url": "https://github.com/rust-lang/rust/commit/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7538450b8d5e831dca7891bdd54ebdf25d865970", "url": "https://api.github.com/repos/rust-lang/rust/commits/7538450b8d5e831dca7891bdd54ebdf25d865970", "html_url": "https://github.com/rust-lang/rust/commit/7538450b8d5e831dca7891bdd54ebdf25d865970"}], "stats": {"total": 80, "additions": 36, "deletions": 44}, "files": [{"sha": "23ab1ce4400c275e23fba58b42e44451fdb20329", "filename": "doc/tutorial.md", "status": "modified", "additions": 36, "deletions": 44, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "patch": "@@ -681,45 +681,6 @@ the value of `North` is 0, `East` is 1, `South` is 2, and `West` is 3.\n When an enum is C-like, you can apply the `as` cast operator to\n convert it to its discriminator value as an `int`.\n \n-<a name=\"single_variant_enum\"></a>\n-\n-There is a special case for enums with a single variant, which are\n-sometimes called \"newtype-style enums\" (after Haskell's \"newtype\"\n-feature). These are used to define new types in such a way that the\n-new name is not just a synonym for an existing type, but its own\n-distinct type: `type` creates a structural synonym, while this form of\n-`enum` creates a nominal synonym. If you say:\n-\n-~~~~\n-enum GizmoId = int;\n-~~~~\n-\n-That is a shorthand for this:\n-\n-~~~~\n-enum GizmoId { GizmoId(int) }\n-~~~~\n-\n-You can extract the contents of such an enum type with the\n-dereference (`*`) unary operator:\n-\n-~~~~\n-# enum GizmoId = int;\n-let my_gizmo_id: GizmoId = GizmoId(10);\n-let id_int: int = *my_gizmo_id;\n-~~~~\n-\n-Types like this can be useful to differentiate between data that have\n-the same type but must be used in different ways.\n-\n-~~~~\n-enum Inches = int;\n-enum Centimeters = int;\n-~~~~\n-\n-The above definitions allow for a simple way for programs to avoid\n-confusing numbers that correspond to different units.\n-\n For enum types with multiple variants, destructuring is the only way to\n get at their contents. All variant constructors can be used as\n patterns, as in this definition of `area`:\n@@ -789,10 +750,10 @@ match mytup {\n \n ## Tuple structs\n \n-Rust also has _nominal tuples_, which behave like both structs and tuples,\n-except that nominal tuple types have names\n-(so `Foo(1, 2)` has a different type from `Bar(1, 2)`),\n-and nominal tuple types' _fields_ do not have names.\n+Rust also has _tuple structs_, which behave like both structs and tuples,\n+except that, unlike tuples, tuple structs have names (so `Foo(1, 2)` has a\n+different type from `Bar(1, 2)`), and tuple structs' _fields_ do not have\n+names.\n \n For example:\n ~~~~\n@@ -803,6 +764,37 @@ match mytup {\n }\n ~~~~\n \n+<a name=\"newtype\"></a>\n+\n+There is a special case for tuple structs with a single field, which are\n+sometimes called \"newtypes\" (after Haskell's \"newtype\" feature). These are\n+used to define new types in such a way that the new name is not just a\n+synonym for an existing type but is rather its own distinct type.\n+\n+~~~~\n+struct GizmoId(int);\n+~~~~\n+\n+For convenience, you can extract the contents of such a struct with the\n+dereference (`*`) unary operator:\n+\n+~~~~\n+# struct GizmoId(int);\n+let my_gizmo_id: GizmoId = GizmoId(10);\n+let id_int: int = *my_gizmo_id;\n+~~~~\n+\n+Types like this can be useful to differentiate between data that have\n+the same type but must be used in different ways.\n+\n+~~~~\n+struct Inches(int);\n+struct Centimeters(int);\n+~~~~\n+\n+The above definitions allow for a simple way for programs to avoid\n+confusing numbers that correspond to different units.\n+\n # Functions\n \n We've already seen several function definitions. Like all other static\n@@ -2294,7 +2286,7 @@ struct level. Note that fields and methods are _public_ by default.\n pub mod farm {\n # pub type Chicken = int;\n # type Cow = int;\n-# enum Human = int;\n+# struct Human(int);\n # impl Human { fn rest(&self) { } }\n # pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n     pub struct Farm {"}]}