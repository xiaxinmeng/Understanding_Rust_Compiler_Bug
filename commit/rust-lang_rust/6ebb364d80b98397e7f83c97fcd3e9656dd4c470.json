{"sha": "6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYmIzNjRkODBiOTgzOTdlN2Y4M2M5N2ZjZDNlOTY1NmRkNGM0NzA=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-20T20:52:37Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-21T21:15:58Z"}, "message": "std: cleanup file::io rustdoc_ng output", "tree": {"sha": "9ea5906797a07c7fe0481989619a00a3d83e3a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea5906797a07c7fe0481989619a00a3d83e3a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "html_url": "https://github.com/rust-lang/rust/commit/6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb364d80b98397e7f83c97fcd3e9656dd4c470/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44dc3fba8b10e066056a03f5444729d2e38596dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/44dc3fba8b10e066056a03f5444729d2e38596dc", "html_url": "https://github.com/rust-lang/rust/commit/44dc3fba8b10e066056a03f5444729d2e38596dc"}], "stats": {"total": 116, "additions": 49, "deletions": 67}, "files": [{"sha": "9779176024753f643fa0ee76a007b5c03b62d436", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 49, "deletions": 67, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb364d80b98397e7f83c97fcd3e9656dd4c470/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb364d80b98397e7f83c97fcd3e9656dd4c470/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "patch": "@@ -479,25 +479,29 @@ pub trait FileSystemInfo {\n ///\n /// * Check if a file exists, reading from it if so\n ///\n-///     use std;\n-///     use std::path::Path;\n-///     use std::rt::io::file::{FileInfo, FileReader};\n-///\n-///     let f = &Path(\"/some/file/path.txt\");\n-///     if f.exists() {\n-///         let reader = f.open_reader(Open);\n-///         let mut mem = [0u8, 8*64000];\n-///         reader.read(mem);\n-///         // ...\n-///     }\n+/// ~~~{.rust}\n+/// use std;\n+/// use std::path::Path;\n+/// use std::rt::io::file::{FileInfo, FileReader};\n+///\n+/// let f = &Path(\"/some/file/path.txt\");\n+/// if f.exists() {\n+///     let reader = f.open_reader(Open);\n+///     let mut mem = [0u8, 8*64000];\n+///     reader.read(mem);\n+///     // ...\n+/// }\n+/// ~~~\n ///\n /// * Is the given path a file?\n ///\n-///    let f = get_file_path_from_wherever();\n-///    match f.is_file() {\n-///        true => doing_something_with_a_file(f),\n-///        _ => {}\n-///    }\n+/// ~~~{.rust}\n+/// let f = get_file_path_from_wherever();\n+/// match f.is_file() {\n+///    true => doing_something_with_a_file(f),\n+///    _ => {}\n+/// }\n+/// ~~~\n pub trait FileInfo : FileSystemInfo {\n     /// Whether the underlying implemention (be it a file path,\n     /// or something else) points at a \"regular file\" on the FS. Will return\n@@ -572,27 +576,31 @@ impl FileInfo for Path { }\n ///\n /// * Check if a directory exists, `mkdir`'ing it if not\n ///\n-///     use std;\n-///     use std::path::Path;\n-///     use std::rt::io::file::{DirectoryInfo};\n+/// ~~~{.rust}\n+/// use std;\n+/// use std::path::Path;\n+/// use std::rt::io::file::{DirectoryInfo};\n ///\n-///     let dir = &Path(\"/some/dir\");\n-///     if !dir.exists() {\n-///         dir.mkdir();\n-///     }\n+/// let dir = &Path(\"/some/dir\");\n+/// if !dir.exists() {\n+///     dir.mkdir();\n+/// }\n+/// ~~~\n ///\n /// * Is the given path a directory? If so, iterate on its contents\n ///\n-///     fn visit_dirs(dir: &Path, cb: &fn(&Path)) {\n-///         if dir.is_dir() {\n-///             let contents = dir.readdir();\n-///             for entry in contents.iter() {\n-///                 if entry.is_dir() { visit_dirs(entry, cb); }\n-///                 else { cb(entry); }\n-///             }\n+/// ~~~{.rust}\n+/// fn visit_dirs(dir: &Path, cb: &fn(&Path)) {\n+///     if dir.is_dir() {\n+///         let contents = dir.readdir();\n+///         for entry in contents.iter() {\n+///             if entry.is_dir() { visit_dirs(entry, cb); }\n+///             else { cb(entry); }\n ///         }\n-///         else { fail!(\"nope\"); }\n ///     }\n+///     else { fail!(\"nope\"); }\n+/// }\n+/// ~~~\n trait DirectoryInfo : FileSystemInfo {\n     /// Whether the underlying implemention (be it a file path,\n     /// or something else) is pointing at a directory in the underlying FS.\n@@ -678,7 +686,8 @@ trait DirectoryInfo : FileSystemInfo {\n /// `DirectoryInfo` impl for `path::Path`\n impl DirectoryInfo for Path { }\n \n-fn file_test_smoke_test_impl() {\n+#[test]\n+fn file_test_io_smoke_test() {\n     do run_in_mt_newsched_task {\n         let message = \"it's alright. have a good time\";\n         let filename = &Path(\"./tmp/file_rt_io_file_test.txt\");\n@@ -701,11 +710,7 @@ fn file_test_smoke_test_impl() {\n }\n \n #[test]\n-fn file_test_io_smoke_test() {\n-    file_test_smoke_test_impl();\n-}\n-\n-fn file_test_invalid_path_opened_without_create_should_raise_condition_impl() {\n+fn file_test_io_invalid_path_opened_without_create_should_raise_condition() {\n     do run_in_mt_newsched_task {\n         let filename = &Path(\"./tmp/file_that_does_not_exist.txt\");\n         let mut called = false;\n@@ -718,12 +723,9 @@ fn file_test_invalid_path_opened_without_create_should_raise_condition_impl() {\n         assert!(called);\n     }\n }\n-#[test]\n-fn file_test_io_invalid_path_opened_without_create_should_raise_condition() {\n-    file_test_invalid_path_opened_without_create_should_raise_condition_impl();\n-}\n \n-fn file_test_unlinking_invalid_path_should_raise_condition_impl() {\n+#[test]\n+fn file_test_iounlinking_invalid_path_should_raise_condition() {\n     do run_in_mt_newsched_task {\n         let filename = &Path(\"./tmp/file_another_file_that_does_not_exist.txt\");\n         let mut called = false;\n@@ -735,12 +737,9 @@ fn file_test_unlinking_invalid_path_should_raise_condition_impl() {\n         assert!(called);\n     }\n }\n-#[test]\n-fn file_test_iounlinking_invalid_path_should_raise_condition() {\n-    file_test_unlinking_invalid_path_should_raise_condition_impl();\n-}\n \n-fn file_test_io_non_positional_read_impl() {\n+#[test]\n+fn file_test_io_non_positional_read() {\n     do run_in_mt_newsched_task {\n         use str;\n         let message = \"ten-four\";\n@@ -768,11 +767,7 @@ fn file_test_io_non_positional_read_impl() {\n }\n \n #[test]\n-fn file_test_io_non_positional_read() {\n-    file_test_io_non_positional_read_impl();\n-}\n-\n-fn file_test_io_seeking_impl() {\n+fn file_test_io_seek_and_tell_smoke_test() {\n     do run_in_mt_newsched_task {\n         use str;\n         let message = \"ten-four\";\n@@ -801,11 +796,7 @@ fn file_test_io_seeking_impl() {\n }\n \n #[test]\n-fn file_test_io_seek_and_tell_smoke_test() {\n-    file_test_io_seeking_impl();\n-}\n-\n-fn file_test_io_seek_and_write_impl() {\n+fn file_test_io_seek_and_write() {\n     do run_in_mt_newsched_task {\n         use str;\n         let initial_msg =   \"food-is-yummy\";\n@@ -831,11 +822,7 @@ fn file_test_io_seek_and_write_impl() {\n }\n \n #[test]\n-fn file_test_io_seek_and_write() {\n-    file_test_io_seek_and_write_impl();\n-}\n-\n-fn file_test_io_seek_shakedown_impl() {\n+fn file_test_io_seek_shakedown() {\n     do run_in_mt_newsched_task {\n         use str;          // 01234567890123\n         let initial_msg =   \"qwer-asdf-zxcv\";\n@@ -870,11 +857,6 @@ fn file_test_io_seek_shakedown_impl() {\n     }\n }\n \n-#[test]\n-fn file_test_io_seek_shakedown() {\n-    file_test_io_seek_shakedown_impl();\n-}\n-\n #[test]\n fn file_test_stat_is_correct_on_is_file() {\n     do run_in_mt_newsched_task {"}]}