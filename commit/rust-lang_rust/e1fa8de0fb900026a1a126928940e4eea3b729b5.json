{"sha": "e1fa8de0fb900026a1a126928940e4eea3b729b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZmE4ZGUwZmI5MDAwMjZhMWExMjY5Mjg5NDBlNGVlYTNiNzI5YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T03:46:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T03:46:16Z"}, "message": "Auto merge of #42522 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #42470, #42490, #42497, #42510, #42512\n- Failed merges:", "tree": {"sha": "ceadfbdc47590ae898d8c6396895d677f41f84ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceadfbdc47590ae898d8c6396895d677f41f84ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1fa8de0fb900026a1a126928940e4eea3b729b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fa8de0fb900026a1a126928940e4eea3b729b5", "html_url": "https://github.com/rust-lang/rust/commit/e1fa8de0fb900026a1a126928940e4eea3b729b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1fa8de0fb900026a1a126928940e4eea3b729b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d5592596b75ff1b810c15944e6bac57ab9c15a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5592596b75ff1b810c15944e6bac57ab9c15a", "html_url": "https://github.com/rust-lang/rust/commit/d8d5592596b75ff1b810c15944e6bac57ab9c15a"}, {"sha": "13ae42fb205e06320647b3f508462c46a2644c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ae42fb205e06320647b3f508462c46a2644c07", "html_url": "https://github.com/rust-lang/rust/commit/13ae42fb205e06320647b3f508462c46a2644c07"}], "stats": {"total": 151, "additions": 119, "deletions": 32}, "files": [{"sha": "8bf4b6ad3e0c7baec9539b060afbf6b6413ec3af", "filename": "src/Cargo.lock", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -103,6 +103,11 @@ name = \"bitflags\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bootstrap\"\n version = \"0.0.0\"\n@@ -160,14 +165,14 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libgit2-sys 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -197,7 +202,7 @@ dependencies = [\n  \"cargo 0.20.0\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -466,12 +471,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"git2\"\n-version = \"0.6.5\"\n+version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libgit2-sys 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -483,7 +488,7 @@ version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -602,7 +607,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libgit2-sys\"\n-version = \"0.6.11\"\n+version = \"0.6.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1994,6 +1999,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n+\"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n@@ -2018,7 +2024,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f837c392f2ea61cb1576eac188653df828c861b7137d74ea4a5caa89621f9e6\"\n \"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de9df4358c17e448a778d90cd0272e1dab5eae30244502333fa2001c4e24357\"\n+\"checksum git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa01936ac96555c083c0e8553f672616274408d9d3fc5b8696603fbf63ff43ee\"\n \"checksum git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68676bc784bf0bef83278898929bf64a251e87c0340723d0b93fa096c9c5bf8e\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf088f042a467089e9baa4972f57f9247e42a0cc549ba264c7a04fbb8ecb89d4\"\n@@ -2030,7 +2036,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97c2985bfcbbcb0189cfa25e1c10c1ac7111df2b6214b652c690127aefdf4e5b\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n-\"checksum libgit2-sys 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9dc31ee90fb179b706d35fb672e91d0b74e950d7fb4ea7eae3c0f5ecbf2d3d3\"\n+\"checksum libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df18a822100352d9863b302faf6f8f25c0e77f0e60feb40e5dbe1238b7f13b1d\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5ee912a45d686d393d5ac87fac15ba0ba18daae14e8e7543c63ebf7fb7e970c\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\""}, {"sha": "30d09e5453b370f7f5325fbff1b9538d8597d98d", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -262,7 +262,7 @@ pub trait Iterator {\n     /// Creates an iterator starting at the same point, but stepping by\n     /// the given amount at each iteration.\n     ///\n-    /// Note that it will always return the first element of the range,\n+    /// Note that it will always return the first element of the iterator,\n     /// regardless of the step given.\n     ///\n     /// # Panics"}, {"sha": "6f3db0b388defe4607a37804a8344fa2cbf0eeeb", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -309,8 +309,8 @@ use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n \n const A: AtomicUsize = ATOMIC_USIZE_INIT;\n static B: &'static AtomicUsize = &A;\n-// error: cannot borrow a constant which contains interior mutability, create a\n-//        static instead\n+// error: cannot borrow a constant which may contain interior mutability,\n+//        create a static instead\n ```\n \n A `const` represents a constant value that should never change. If one takes\n@@ -338,8 +338,8 @@ use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);\n const B: &'static Cell<usize> = &A;\n-// error: cannot borrow a constant which contains interior mutability, create\n-//        a static instead\n+// error: cannot borrow a constant which may contain interior mutability,\n+//        create a static instead\n \n // or:\n struct C { a: Cell<usize> }"}, {"sha": "793cffdec89e36699d17852282337f40905b45b0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n                             span_err!(self.tcx.sess, self.span, E0492,\n-                                      \"cannot borrow a constant which contains \\\n+                                      \"cannot borrow a constant which may contain \\\n                                        interior mutability, create a static instead\");\n                         }\n                     }"}, {"sha": "60c07eda4d5c515b3e374032926a4d33552b2576", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -285,10 +285,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                      -> Result<Option<Rc<SyntaxExtension>>, Determinacy> {\n         let def = match invoc.kind {\n             InvocationKind::Attr { attr: None, .. } => return Ok(None),\n-            _ => match self.resolve_invoc_to_def(invoc, scope, force) {\n-                Ok(def) => def,\n-                Err(determinacy) => return Err(determinacy),\n-            },\n+            _ => self.resolve_invoc_to_def(invoc, scope, force)?,\n         };\n \n         self.macro_defs.insert(invoc.expansion_data.mark, def.def_id());"}, {"sha": "2d78f0511d6d763b2ccc953159e1e6b8745f3e09", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -288,6 +288,26 @@ impl CString {\n     /// Failure to call [`from_raw`] will lead to a memory leak.\n     ///\n     /// [`from_raw`]: #method.from_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    ///\n+    /// let ptr = c_string.into_raw();\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(b'f', *ptr as u8);\n+    ///     assert_eq!(b'o', *ptr.offset(1) as u8);\n+    ///     assert_eq!(b'o', *ptr.offset(2) as u8);\n+    ///     assert_eq!(b'\\0', *ptr.offset(3) as u8);\n+    ///\n+    ///     // retake pointer to free memory\n+    ///     let _ = CString::from_raw(ptr);\n+    /// }\n+    /// ```\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n@@ -311,6 +331,16 @@ impl CString {\n     ///\n     /// The returned buffer does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.into_bytes();\n+    /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n+    /// ```\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         let mut vec = self.into_inner().into_vec();\n@@ -323,6 +353,16 @@ impl CString {\n     /// includes the trailing nul byte.\n     ///\n     /// [`into_bytes`]: #method.into_bytes\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.into_bytes_with_nul();\n+    /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n+    /// ```\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n         self.into_inner().into_vec()\n@@ -332,6 +372,16 @@ impl CString {\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.as_bytes();\n+    /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.inner[..self.inner.len() - 1]\n@@ -341,6 +391,16 @@ impl CString {\n     /// includes the trailing nul byte.\n     ///\n     /// [`as_bytes`]: #method.as_bytes\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.as_bytes_with_nul();\n+    /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner"}, {"sha": "58356bc43eebc8ab8aa93c37dbd613d8b192fa39", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -112,7 +112,7 @@ pub trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// `UnwindSafe` trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_on_unimplemented = \"the type {Self} contains interior mutability \\\n+#[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n                             across a catch_unwind boundary\"]\n pub trait RefUnwindSafe {}"}, {"sha": "1e156ed07b0cefac319ecf15cb143bd7f80055fa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -1249,10 +1249,7 @@ impl<'a> Parser<'a> {\n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n             (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac))\n         } else {\n-            let (constness, unsafety, abi) = match self.parse_fn_front_matter() {\n-                Ok(cua) => cua,\n-                Err(e) => return Err(e),\n-            };\n+            let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n \n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;"}, {"sha": "d51ff9860ac8495ec85c8095fabd15536d1da03a", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -211,10 +211,7 @@ impl<T: Encodable> Encodable for P<[T]> {\n \n impl<T: Decodable> Decodable for P<[T]> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<P<[T]>, D::Error> {\n-        Ok(P::from_vec(match Decodable::decode(d) {\n-            Ok(t) => t,\n-            Err(e) => return Err(e)\n-        }))\n+        Ok(P::from_vec(Decodable::decode(d)?))\n     }\n }\n "}, {"sha": "327b6946822987d1c0ed16ed71164a583e4b04eb", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -14,13 +14,13 @@ use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);\n const B: &'static UnsafeCell<usize> = &A;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n \n struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell::new(1) };\n const E: &'static UnsafeCell<usize> = &D.a;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n const F: &'static C = &D;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n \n fn main() {}"}, {"sha": "60d85d1b3b787c3144beba792858bc10c1f8f2b2", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+use std::panic::catch_unwind;\n+fn main() {\n+    let mut x = Cell::new(22);\n+    catch_unwind(|| { x.set(23); });\n+}"}, {"sha": "a9535f1c8303884ff6e63919c0e16a2c7543b0eb", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1fa8de0fb900026a1a126928940e4eea3b729b5/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=e1fa8de0fb900026a1a126928940e4eea3b729b5", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<i32>`\n+  --> $DIR/interior-mutability.rs:15:5\n+   |\n+15 |     catch_unwind(|| { x.set(23); });\n+   |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<i32> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |\n+   = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n+   = note: required because it appears within the type `std::cell::Cell<i32>`\n+   = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:15:18: 15:35 x:&std::cell::Cell<i32>]`\n+   = note: required by `std::panic::catch_unwind`\n+\n+error: aborting due to previous error(s)\n+"}]}