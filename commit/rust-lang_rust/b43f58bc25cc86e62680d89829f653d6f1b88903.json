{"sha": "b43f58bc25cc86e62680d89829f653d6f1b88903", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0M2Y1OGJjMjVjYzg2ZTYyNjgwZDg5ODI5ZjY1M2Q2ZjFiODg5MDM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-18T15:41:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-18T15:41:34Z"}, "message": "Rollup merge of #43304 - ids1024:path2, r=aturon\n\nredox: handle multiple paths in PATH", "tree": {"sha": "74a359345a7254ab942be88032f9e73fd75edb59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a359345a7254ab942be88032f9e73fd75edb59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b43f58bc25cc86e62680d89829f653d6f1b88903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b43f58bc25cc86e62680d89829f653d6f1b88903", "html_url": "https://github.com/rust-lang/rust/commit/b43f58bc25cc86e62680d89829f653d6f1b88903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b43f58bc25cc86e62680d89829f653d6f1b88903/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f568249cca914e3ff1457449a74d18d5e6e7bb09", "url": "https://api.github.com/repos/rust-lang/rust/commits/f568249cca914e3ff1457449a74d18d5e6e7bb09", "html_url": "https://github.com/rust-lang/rust/commit/f568249cca914e3ff1457449a74d18d5e6e7bb09"}, {"sha": "6f80cd7bfc9b6141451a818daa4ac2fd9f4abad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f80cd7bfc9b6141451a818daa4ac2fd9f4abad0", "html_url": "https://github.com/rust-lang/rust/commit/6f80cd7bfc9b6141451a818daa4ac2fd9f4abad0"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "efddd5f0294840afb40a94b8f627d5d23e4138e6", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=b43f58bc25cc86e62680d89829f653d6f1b88903", "patch": "@@ -73,10 +73,10 @@ pub fn split_paths(unparsed: &OsStr) -> SplitPaths {\n     fn bytes_to_path(b: &[u8]) -> PathBuf {\n         PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n     }\n-    fn is_colon(b: &u8) -> bool { *b == b':' }\n+    fn is_semicolon(b: &u8) -> bool { *b == b';' }\n     let unparsed = unparsed.as_bytes();\n     SplitPaths {\n-        iter: unparsed.split(is_colon as fn(&u8) -> bool)\n+        iter: unparsed.split(is_semicolon as fn(&u8) -> bool)\n                       .map(bytes_to_path as fn(&[u8]) -> PathBuf)\n     }\n }\n@@ -94,7 +94,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     where I: Iterator<Item=T>, T: AsRef<OsStr>\n {\n     let mut joined = Vec::new();\n-    let sep = b':';\n+    let sep = b';';\n \n     for (i, path) in paths.enumerate() {\n         let path = path.as_ref().as_bytes();"}, {"sha": "ff1626d9b31c1aaf5ba64d9f9ffd8ca6d28e7739", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=b43f58bc25cc86e62680d89829f653d6f1b88903", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use collections::hash_map::HashMap;\n-use env;\n+use env::{self, split_paths};\n use ffi::OsStr;\n+use os::unix::ffi::OsStrExt;\n use fmt;\n use io::{self, Error, ErrorKind};\n-use path::Path;\n+use path::{Path, PathBuf};\n use sys::fd::FileDesc;\n use sys::fs::{File, OpenOptions};\n use sys::pipe::{self, AnonPipe};\n@@ -313,23 +314,29 @@ impl Command {\n         }\n \n         let program = if self.program.contains(':') || self.program.contains('/') {\n-            self.program.to_owned()\n-        } else {\n-            let mut path_env = ::env::var(\"PATH\").unwrap_or(\".\".to_string());\n-\n-            if ! path_env.ends_with('/') {\n-                path_env.push('/');\n+            Some(PathBuf::from(&self.program))\n+        } else if let Ok(path_env) = ::env::var(\"PATH\") {\n+            let mut program = None;\n+            for mut path in split_paths(&path_env) {\n+                path.push(&self.program);\n+                if path.exists() {\n+                    program = Some(path);\n+                    break;\n+                }\n             }\n-\n-            path_env.push_str(&self.program);\n-\n-            path_env\n+            program\n+        } else {\n+            None\n         };\n \n-        if let Err(err) = syscall::execve(&program, &args) {\n-            io::Error::from_raw_os_error(err.errno as i32)\n+        if let Some(program) = program {\n+            if let Err(err) = syscall::execve(program.as_os_str().as_bytes(), &args) {\n+                io::Error::from_raw_os_error(err.errno as i32)\n+            } else {\n+                panic!(\"return from exec without err\");\n+            }\n         } else {\n-            panic!(\"return from exec without err\");\n+            io::Error::new(io::ErrorKind::NotFound, \"\")\n         }\n     }\n "}, {"sha": "ec9005c2cc3be702981a2febe47b20fc5307fe18", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43f58bc25cc86e62680d89829f653d6f1b88903/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=b43f58bc25cc86e62680d89829f653d6f1b88903", "patch": "@@ -77,9 +77,9 @@ pub fn dup2(fd: usize, newfd: usize, buf: &[u8]) -> Result<usize> {\n }\n \n /// Replace the current process with a new executable\n-pub fn execve(path: &str, args: &[[usize; 2]]) -> Result<usize> {\n-    unsafe { syscall4(SYS_EXECVE, path.as_ptr() as usize, path.len(),\n-                                  args.as_ptr() as usize, args.len()) }\n+pub fn execve<T: AsRef<[u8]>>(path: T, args: &[[usize; 2]]) -> Result<usize> {\n+    unsafe { syscall4(SYS_EXECVE, path.as_ref().as_ptr() as usize,\n+                      path.as_ref().len(), args.as_ptr() as usize, args.len()) }\n }\n \n /// Exit the current process"}]}