{"sha": "26a5dc593c1895b4dd9a024ef785cb3682cb064a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTVkYzU5M2MxODk1YjRkZDlhMDI0ZWY3ODVjYjM2ODJjYjA2NGE=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-02-27T05:53:35Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-02-27T05:53:35Z"}, "message": "mk: rewrite make files", "tree": {"sha": "773fa33fbb52d7205dab691d468e92f08c09d5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773fa33fbb52d7205dab691d468e92f08c09d5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a5dc593c1895b4dd9a024ef785cb3682cb064a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a5dc593c1895b4dd9a024ef785cb3682cb064a", "html_url": "https://github.com/rust-lang/rust/commit/26a5dc593c1895b4dd9a024ef785cb3682cb064a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a5dc593c1895b4dd9a024ef785cb3682cb064a/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96b483a01b9d9c5918850a00e9ca6e49d0e9de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96b483a01b9d9c5918850a00e9ca6e49d0e9de1", "html_url": "https://github.com/rust-lang/rust/commit/d96b483a01b9d9c5918850a00e9ca6e49d0e9de1"}], "stats": {"total": 740, "additions": 397, "deletions": 343}, "files": [{"sha": "ccc0af3acdf66096fd8445316d2a5ca875b40c02", "filename": "Makefile.in", "status": "modified", "additions": 67, "deletions": 60, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -130,36 +130,43 @@ else\n   CFG_VALGRIND_COMPILE :=\n endif\n \n-CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n-CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n-CFG_CORELIB :=$(call CFG_LIB_NAME,core)\n-CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n-CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n-CFG_LIBSYNTAX :=$(call CFG_LIB_NAME,syntax)\n-CFG_LIBFUZZER :=$(call CFG_LIB_NAME,fuzzer)\n-CFG_LIBRUSTPKG :=$(call CFG_LIB_NAME,rustpkg)\n-CFG_LIBRUSTDOC :=$(call CFG_LIB_NAME,rustdoc)\n-CFG_LIBRUSTI :=$(call CFG_LIB_NAME,rusti)\n-CFG_LIBRUST :=$(call CFG_LIB_NAME,rust)\n-\n-STDLIB_GLOB :=$(call CFG_LIB_GLOB,std)\n-CORELIB_GLOB :=$(call CFG_LIB_GLOB,core)\n-LIBRUSTC_GLOB :=$(call CFG_LIB_GLOB,rustc)\n-LIBSYNTAX_GLOB :=$(call CFG_LIB_GLOB,syntax)\n-LIBFUZZER_GLOB :=$(call CFG_LIB_GLOB,fuzzer)\n-LIBRUSTPKG_GLOB :=$(call CFG_LIB_GLOB,rustpkg)\n-LIBRUSTDOC_GLOB :=$(call CFG_LIB_GLOB,rustdoc)\n-LIBRUSTI_GLOB :=$(call CFG_LIB_GLOB,rusti)\n-LIBRUST_GLOB :=$(call CFG_LIB_GLOB,rust)\n-STDLIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,std)\n-CORELIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,core)\n-LIBRUSTC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustc)\n-LIBSYNTAX_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,syntax)\n-LIBFUZZER_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,fuzzer)\n-LIBRUSTPKG_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustpkg)\n-LIBRUSTDOC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustdoc)\n-LIBRUSTI_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rusti)\n-LIBRUST_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rust)\n+define LIBREQ\n+\n+CFG_RUNTIME_$(1) :=$(call CFG_LIB_NAME_$(1),rustrt)\n+CFG_RUSTLLVM_$(1) :=$(call CFG_LIB_NAME_$(1),rustllvm)\n+CFG_CORELIB_$(1) :=$(call CFG_LIB_NAME_$(1),core)\n+CFG_STDLIB_$(1) :=$(call CFG_LIB_NAME_$(1),std)\n+CFG_LIBRUSTC_$(1) :=$(call CFG_LIB_NAME_$(1),rustc)\n+CFG_LIBSYNTAX_$(1) :=$(call CFG_LIB_NAME_$(1),syntax)\n+CFG_LIBFUZZER_$(1) :=$(call CFG_LIB_NAME_$(1),fuzzer)\n+CFG_LIBRUSTPKG_$(1) :=$(call CFG_LIB_NAME_$(1),rustpkg)\n+CFG_LIBRUSTDOC_$(1) :=$(call CFG_LIB_NAME_$(1),rustdoc)\n+CFG_LIBRUSTI_$(1) :=$(call CFG_LIB_NAME_$(1),rusti)\n+CFG_LIBRUST_$(1) :=$(call CFG_LIB_NAME_$(1),rust)\n+\n+STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n+CORELIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),core)\n+LIBRUSTC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustc)\n+LIBSYNTAX_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),syntax)\n+LIBFUZZER_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),fuzzer)\n+LIBRUSTPKG_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustpkg)\n+LIBRUSTDOC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustdoc)\n+LIBRUSTI_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rusti)\n+LIBRUST_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rust)\n+STDLIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),std)\n+CORELIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),core)\n+LIBRUSTC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustc)\n+LIBSYNTAX_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),syntax)\n+LIBFUZZER_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),fuzzer)\n+LIBRUSTPKG_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustpkg)\n+LIBRUSTDOC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustdoc)\n+LIBRUSTI_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rusti)\n+LIBRUST_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rust)\n+\n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(call LIBREQ,$(target))))\n \n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n@@ -190,13 +197,13 @@ endif\n # Target-and-rule \"utility variables\"\n ######################################################################\n \n-ifdef VERBOSE\n+#ifdef VERBOSE\n   Q :=\n   E =\n-else\n-  Q := @\n-  E = echo $(1)\n-endif\n+#else\n+#  Q := @\n+#  E = echo $(1)\n+#endif\n \n S := $(CFG_SRC_DIR)\n X := $(CFG_EXE_SUFFIX)\n@@ -338,26 +345,26 @@ ifdef CFG_DISABLE_SHAREDSTD\n     $$(TLIB$(1)_T_$(2)_H_$(3))/librustc.rlib\n else\n   HCORELIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB_$(3))\n   TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n \n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n \n   HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n   TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n endif\n \n # Preqrequisites for using the stageN compiler\n HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLLVM) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_RUNTIME_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_RUSTLLVM_$(3)) \\\n \t$$(HCORELIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HLIBSYNTAX_DEFAULT$(1)_H_$(3)) \\\n@@ -367,14 +374,14 @@ HSREQ$(1)_H_$(3) = \\\n # Prerequisites for using the stageN compiler to build target artifacts\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \n # Prerequisites for a working stageN compiler and libraries, for a specific target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n \n # Prerequisites for a working stageN compiler and libraries, for a specific target\n CSREQ$(1)_T_$(2)_H_$(3) = \\\n@@ -384,20 +391,20 @@ CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustdoc$$(X) \\\n \t$$(HBIN$(1)_H_$(3))/rusti$$(X) \\\n \t$$(HBIN$(1)_H_$(3))/rust$$(X) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBFUZZER) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTI) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUST) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBFUZZER) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTI) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUST)\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBFUZZER_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTI_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUST_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(3))  \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3))  \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(3))\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed"}, {"sha": "bfd27fc744d66961c44cc51790d59ad7d1c83b0c", "filename": "configure", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -349,6 +349,7 @@ valopt llvm-root \"\" \"set LLVM root\"\n valopt build-triple \"${DEFAULT_BUILD_TRIPLE}\" \"LLVM build triple\"\n valopt host-triples \"${CFG_BUILD_TRIPLE}\" \"LLVM host triples\"\n valopt target-triples \"${CFG_HOST_TRIPLES}\" \"LLVM target triples\"\n+valopt android-ndk-path \"\" \"Android NDK Standalone path\"\n \n # Validate Options\n step_msg \"validating $CFG_SELF args\"\n@@ -529,6 +530,24 @@ else\n     CFG_C_COMPILER=\"gcc\"\n fi\n \n+if [ ! -z \"$CFG_ANDROID_NDK_PATH\" ]\n+then\n+    if [ ! -f $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-gcc ]\n+    then\n+        err \"NDK $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-gcc not found\"\n+    fi\n+    if [ ! -f $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-g++ ]\n+    then\n+        err \"NDK $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-g++ not found\"\n+    fi\n+    if [ ! -f $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-ar ]\n+    then\n+        err \"NDK $CFG_ANDROID_NDK_PATH/bin/arm-linux-androideabi-ar not found\"\n+    fi\n+\n+    CFG_CROSS_PREFIX_arm=$CFG_ANDROID_NDK_PATH\"/bin/arm-linux-androideabi-\"\n+fi\n+\n # a little post-processing of various config values\n \n CFG_PREFIX=${CFG_PREFIX%/}\n@@ -575,7 +594,7 @@ for t in $CFG_TARGET_TRIPLES\n do\n   make_dir rt/$t\n   for i in                                          \\\n-    isaac linenoise sync test arch/i386 arch/x86_64    \\\n+    isaac linenoise sync test arch/i386 arch/x86_64 arch/arm   \\\n     libuv\n   do\n     make_dir rt/$t/$i\n@@ -822,6 +841,7 @@ putvar CFG_TARGET_TRIPLES\n putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n+putvar CFG_CROSS_PREFIX_arm\n \n if [ ! -z \"$CFG_ENABLE_PAX_FLAGS\" ]\n then"}, {"sha": "ddee25443d288ff1d9d8f84bdaea80759a3202cd", "filename": "mk/clean.mk", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -69,26 +69,26 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rust$(X)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBFUZZER)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBFUZZER_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBFUZZER_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBFUZZER_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n endef\n@@ -105,22 +105,22 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustpkg$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBFUZZER_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBFUZZER_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix"}, {"sha": "78ef16768f2319c90f0d710011a9b164c1cd404b", "filename": "mk/host.mk", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -23,47 +23,47 @@ define CP_HOST_STAGE_N\n \n $$(HBIN$(2)_H_$(4))/rustc$$(X): \\\n \t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3)) \\\n \t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBSYNTAX) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(3)) \\\n \t$$(HCORELIB_DEFAULT$(2)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB) \\\n-\t\t$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB_$(3)) \\\n+\t\t$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBSYNTAX): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBSYNTAX) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBSYNTAX_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(3)) \\\n \t$$(HCORELIB_DEFAULT$(2)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUNTIME_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n # Subtle: We do not let the shell expand $(CORELIB_DSYM_GLOB) directly rather\n@@ -73,18 +73,18 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n # glob, and cp reports an error because libcore-*.dylib.dsym does not exist.\n # Make instead expands the glob to nothing, which gives us the correct behavior.\n # (Copy .dsym file if it exists, but do nothing otherwise)\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(3)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/libcore.rlib: \\\n@@ -108,8 +108,8 @@ $$(HLIB$(2)_H_$(4))/librustc.rlib: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUSTLLVM)\n+$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(3)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUSTLLVM_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n "}, {"sha": "21a2f553376702232cb0bd875c9796076311110d", "filename": "mk/platform.mk", "status": "modified", "additions": 108, "deletions": 108, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -36,10 +36,6 @@ CFG_GCCISH_CFLAGS += -fno-omit-frame-pointer\n # embedded into the executable, so use a no-op command.\n CFG_DSYMUTIL := true\n \n-# Add a dSYM glob for all platforms, even though it will do nothing on\n-# non-Darwin platforms; omitting it causes a full -R copy of lib/\n-CFG_LIB_DSYM_GLOB=lib$(1)-*.dylib.dSYM\n-\n # Hack: not sure how to test if a file exists in make other than this\n OS_SUPP = $(patsubst %,--suppressions=%,\\\n       $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n@@ -55,43 +51,50 @@ else\n   CFG_GCCISH_CFLAGS += -O2\n endif\n \n-ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).so\n-  CFG_LIB_GLOB=lib$(1)-*.so\n-  CFG_GCCISH_CFLAGS += -fPIC -I/usr/local/include\n-  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n-  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n-  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n-  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive\n-  CFG_GCCISH_CFLAGS_i386 += -m32\n-  CFG_GCCISH_LINK_FLAGS_i386 += -m32\n-  CFG_GCCISH_CFLAGS_x86_64 += -m64\n-  CFG_GCCISH_LINK_FLAGS_x86_64 += -m64\n-  CFG_UNIXY := 1\n-  CFG_FBSD := 1\n-  CFG_LDENV := LD_LIBRARY_PATH\n-  CFG_DEF_SUFFIX := .bsd.def\n-  CFG_INSTALL_NAME =\n-  CFG_PERF_TOOL := /usr/bin/time\n-endif\n+CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n+CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -lpthread -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_x86_64-unknown-linux-gnu := .linux.def\n+CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n+CFG_UNIXY := 1\n+CFG_LDENV := LD_LIBRARY_PATH\n+CFG_GCCISH_CROSS_x86_64-unknown-linux-gnu =\n+\n+CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n+CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n+CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64\n+CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind -m64\n+CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-darwin :=\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-darwin :=\n+CFG_DEF_SUFFIX_x86_64-apple-darwin := .darwin.def\n+CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n+\n+CFG_LIB_NAME_arm-unknown-android=lib$(1).so\n+CFG_LIB_GLOB_arm-unknown-android=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_arm-unknown-android=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_arm-unknown-android := -fPIC -Wall -g -D__arm__ -DANDROID -D__ANDROID__\n+CFG_GCCISH_CXXFLAGS_arm-unknown-android := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_arm-unknown-android := -shared -fPIC -ldl -g -lm -lsupc++ -lgnustl_shared\n+CFG_GCCISH_DEF_FLAG_arm-unknown-android := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-android := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-android := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_arm-unknown-android := .android.def\n+CFG_INSTALL_NAME_arm-unknown-android =\n+CFG_GCCISH_CROSS_arm-unknown-android = $(CFG_CROSS_PREFIX_arm)\n+\n \n ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).so\n-  CFG_LIB_GLOB=lib$(1)-*.so\n-  CFG_GCCISH_CFLAGS += -fPIC\n-  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n-  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n-  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n   # -znoexecstack is here because librt is for some reason being created\n   # with executable stack and Fedora (or SELinux) doesn't like that (#798)\n-  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive -Wl,-znoexecstack\n-  CFG_GCCISH_CFLAGS_i386 = -m32\n-  CFG_GCCISH_LINK_FLAGS_i386 = -m32\n-  CFG_GCCISH_CFLAGS_x86_64 = -m64\n-  CFG_GCCISH_LINK_FLAGS_x86_64 = -m64\n-  CFG_UNIXY := 1\n-  CFG_LDENV := LD_LIBRARY_PATH\n-  CFG_DEF_SUFFIX := .linux.def\n   ifdef CFG_PERF\n     ifneq ($(CFG_PERF_WITH_LOGFD),)\n         CFG_PERF_TOOL := $(CFG_PERF) stat -r 3 --log-fd 2\n@@ -106,34 +109,10 @@ ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n       CFG_PERF_TOOL := /usr/bin/time --verbose\n     endif\n   endif\n-  CFG_INSTALL_NAME =\n   # Linux requires LLVM to be built like this to get backtraces into Rust code\n   CFG_LLVM_BUILD_ENV=\"CXXFLAGS=-fno-omit-frame-pointer\"\n endif\n \n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).dylib\n-  CFG_LIB_GLOB=lib$(1)-*.dylib\n-  CFG_UNIXY := 1\n-  CFG_LDENV := DYLD_LIBRARY_PATH\n-  CFG_GCCISH_LINK_FLAGS += -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind\n-  CFG_GCCISH_DEF_FLAG := -Wl,-exported_symbols_list,\n-  # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n-  # \"on an i386\" when the whole userspace is 64-bit and the compiler\n-  # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n-  # approaches welcome!\n-  #\n-  # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCCISH_CFLAGS_i386 := -m32 -arch i386\n-  CFG_GCCISH_CFLAGS_x86_64 := -m64 -arch x86_64\n-  CFG_GCCISH_LINK_FLAGS_i386 := -m32\n-  CFG_GCCISH_LINK_FLAGS_x86_64 := -m64\n-  CFG_DSYMUTIL := dsymutil\n-  CFG_DEF_SUFFIX := .darwin.def\n-  # Mac requires this flag to make rpath work\n-  CFG_INSTALL_NAME = -Wl,-install_name,@rpath/$(1)\n-endif\n-\n ifdef CFG_UNIXY\n   CFG_INFO := $(info cfg: unix-y environment)\n \n@@ -143,7 +122,7 @@ ifdef CFG_UNIXY\n   CFG_RUN=$(2)\n   CFG_RUN_TARG=$(call CFG_RUN,,$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,,$(CFG_VALGRIND) $(1))\n-  CFG_LIBUV_LINK_FLAGS=-lpthread\n+  CFG_LIBUV_LINK_FLAGS=\n   ifdef CFG_FBSD\n     CFG_LIBUV_LINK_FLAGS=-lpthread -lkvm\n   endif\n@@ -233,22 +212,15 @@ ifeq ($(CFG_C_COMPILER),clang)\n     CXX=clang++\n   endif\n   ifeq ($(origin CPP),default)\n-    CPP=clang -E\n+    CPP=clang\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n-  CFG_GCCISH_CXXFLAGS += -fno-rtti\n-  CFG_GCCISH_LINK_FLAGS += -g\n+  CFG_GCCISH_CFLAGS += \n+  CFG_GCCISH_CXXFLAGS += \n+  CFG_GCCISH_LINK_FLAGS += \n   # These flags will cause the compiler to produce a .d file\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n-  CFG_SPECIFIC_CC_CFLAGS = $(CFG_CLANG_CFLAGS)\n-  define MAKE_CLANG_SPECIFIC_CFLAGS\n-    CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(target)) = $(CFG_CLANG_CFLAGS_$$(HOST_$(target)))\n-  endef\n-  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call MAKE_CLANG_SPECIFIC_CFLAGS,$(target))))\n-\n else\n ifeq ($(CFG_C_COMPILER),gcc)\n   ifeq ($(origin CC),default)\n@@ -258,53 +230,73 @@ ifeq ($(CFG_C_COMPILER),gcc)\n     CXX=g++\n   endif\n   ifeq ($(origin CPP),default)\n-    CPP=gcc -E\n+    CPP=gcc\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n-  CFG_GCCISH_CXXFLAGS += -fno-rtti\n-  CFG_GCCISH_LINK_FLAGS += -g\n+  CFG_GCCISH_CFLAGS += \n+  CFG_GCCISH_CXXFLAGS += \n+  CFG_GCCISH_LINK_FLAGS += \n   # These flags will cause the compiler to produce a .d file\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n-  CFG_SPECIFIC_CC_CFLAGS = $(CFG_GCC_CFLAGS)\n-  define MAKE_GCC_SPECIFIC_CFLAGS\n-    CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(target)) = $(CFG_GCC_CFLAGS_$$(HOST_$(target)))\n-  endef\n-  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call MAKE_GCC_SPECIFIC_CFLAGS,$(target))))\n-\n else\n   CFG_ERR := $(error please try on a system with gcc or clang)\n endif\n endif\n \n define CFG_MAKE_CC\n-  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n-        $$(CFG_GCCISH_CFLAGS)             \\\n-      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_SPECIFIC_CC_CFLAGS)                \\\n-        $$(CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n+  ifeq ($$(CFG_BUILD_TRIPLE),$(1))\n+  \n+  CFG_COMPILE_C_$(1) = $$(CC)  \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n+        -c -o $$(1) $$(2)\n+  CFG_LINK_C_$(1) = $$(CC) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+  CFG_COMPILE_CXX_$(1) = $$(CXX) \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CXXFLAGS)    \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n+        -c -o $$(1) $$(2)\n+  CFG_LINK_CXX_$(1) = $$(CXX) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+\n+  else\n+  \n+  CFG_COMPILE_C_$(1) = $(CFG_GCCISH_CROSS_$(1))$$(CC)  \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n         -c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-        $$(call CFG_INSTALL_NAME,$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n-        $$(CFG_GCCISH_CFLAGS)             \\\n-        $$(CFG_GCCISH_CXXFLAGS)           \\\n-      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_SPECIFIC_CC_CFLAGS)                \\\n-        $$(CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n+  CFG_LINK_C_$(1) = $(CFG_GCCISH_CROSS_$(1))$$(CC) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+  CFG_COMPILE_CXX_$(1) = $(CFG_GCCISH_CROSS_$(1))$$(CXX) \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CXXFLAGS)    \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n         -c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-        $$(call CFG_INSTALL_NAME,$$(4))\n+  CFG_LINK_CXX_$(1) = $(CFG_GCCISH_CROSS_$(1))$$(CXX) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+\n+  endif\n+\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n@@ -313,12 +305,20 @@ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n # We're using llvm-mc as our assembler because it supports\n # .cfi pseudo-ops on mac\n define CFG_MAKE_ASSEMBLER\n-  CFG_ASSEMBLE_$(1)=$$(CPP) $$(CFG_DEPEND_FLAGS) $$(2) | \\\n+  ifeq ($$(CFG_BUILD_TRIPLE),$(1))\n+\n+  CFG_ASSEMBLE_$(1)=$$(CPP) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n                     $$(LLVM_MC_$$(CFG_BUILD_TRIPLE)) \\\n                     -assemble \\\n                     -filetype=obj \\\n                     -triple=$(1) \\\n                     -o=$$(1)\n+  else\n+\n+  CFG_ASSEMBLE_$(1)=$(CFG_GCCISH_CROSS_$(1))$$(CPP) $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1) \n+\n+  endif\n+\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES),\\"}, {"sha": "b7b702597190f843f71ac01c5e9b63d947061e70", "filename": "mk/rt.mk", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -26,6 +26,7 @@\n # Hack for passing flags into LIBUV, see below.\n LIBUV_FLAGS_i386 = -m32 -fPIC\n LIBUV_FLAGS_x86_64 = -m64 -fPIC\n+LIBUV_FLAGS_arm = -fPIC -DANDROID -std=gnu99\n \n # when we're doing a snapshot build, we intentionally degrade as many\n # features in libuv and the runtime as possible, to ease portability.\n@@ -73,35 +74,29 @@ RUNTIME_CXXS_$(1) := \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\\n-              rt/arch/$$(HOST_$(1))/gpr.cpp\n+              rt/arch/$$(HOST_$(1))/gpr.cpp \\\n+              rt/rust_android_dummy.cpp\n \n RUNTIME_CS_$(1) := rt/linenoise/linenoise.c rt/linenoise/utf8.c\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\\n                   rt/arch/$$(HOST_$(1))/record_sp.S\n \n-ifeq ($$(HOST_$(1)), i386)\n-  LIBUV_ARCH_$(1) := ia32\n-else\n-  LIBUV_ARCH_$(1) := x86_64\n-endif\n \n-ifeq ($$(CFG_WINDOWSY), 1)\n-  LIBUV_OSTYPE_$(1) := win\n+ifeq ($$(HOST_$(1)), arm)\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+else ifeq ($$(CFG_WINDOWSY), 1)\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n-  LIBUV_OSTYPE_$(1) := mac\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), unknown-freebsd)\n-  LIBUV_OSTYPE_$(1) := unix/freebsd\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else\n-  LIBUV_OSTYPE_$(1) := unix/linux\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n endif\n \n-RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n+RUNTIME_DEF_$(1) := rt/rustrt$(CFG_DEF_SUFFIX_$(1))\n RUNTIME_INCS_$(1) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                      -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n                      -I $$(S)src/rt/linenoise \\\n@@ -135,13 +130,13 @@ rt/$(1)/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJ_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)ar rcs $$@ $$<\n \n-rt/$(1)/$(CFG_RUNTIME): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n+rt/$(1)/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n                         $$(RUNTIME_DEF_$(1)) \\\n                         $$(RUNTIME_LIBS_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_POST_LIB_FLAGS) $$(RUNTIME_LIBS_$(1)) \\\n-\t  $$(CFG_LIBUV_LINK_FLAGS),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME))\n+\t  $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(RUNTIME_LIBS_$(1)) \\\n+\t  $$(CFG_LIBUV_LINK_FLAGS),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME_$(1)))\n \n # FIXME: For some reason libuv's makefiles can't figure out the\n # correct definition of CC on the mingw I'm using, so we are\n@@ -165,12 +160,26 @@ $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t\tOS=mingw \\\n \t\tV=$$(VERBOSE)\n else\n+ifeq ($$(HOST_$(1)), arm)\n+$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n+\t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n+\t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n+\t\tLDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n+\t\tCC=\"$$(CFG_GCCISH_CROSS_$(1))$$(CC)\" \\\n+\t\tCXX=\"$$(CFG_GCCISH_CROSS_$(1))$$(CXX)\" \\\n+\t\tAR=\"$$(CFG_CROSS_PREFIX_arm)$$(AR)\" \\\n+\t\tBUILDTYPE=Release \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\thost=android OS=linux \\\n+        V=$$(VERBOSE)\n+else\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n \t\tV=$$(VERBOSE)\n endif\n+endif\n \n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n@@ -188,6 +197,12 @@ endif\n \t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n \t$$(Q)echo \"};\" >> $$@\n \n+%.android.def:  %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n %.darwin.def:\t%.def.in $$(MKFILE_DEPS)\n \t@$$(call E, def: $$@)\n \t$$(Q)sed 's/^./_&/' $$< > $$@"}, {"sha": "569efda41b3029de5ce62bcef5b6e5a2e7c9e680", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -24,21 +24,21 @@ endif\n \n RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp)\n \n-RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$$(CFG_DEF_SUFFIX)\n+RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$(CFG_DEF_SUFFIX_$(1))\n \n RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n                      -iquote $$(LLVM_INCDIR_$(1)) \\\n                      -iquote $$(S)src/rustllvm/include\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=rustllvm/$(1)/%.o)\n ALL_OBJ_FILES += $$(RUSTLLVM_OBJS_OBJS_$(1))\n \n-rustllvm/$(1)/$(CFG_RUSTLLVM): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n+rustllvm/$(1)/$(CFG_RUSTLLVM_$(1)): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n                           $$(MKFILE_DEPS) $$(RUSTLLVM_DEF_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@,$$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_PRE_LIB_FLAGS) $$(LLVM_LIBS_$(1)) \\\n-          $$(CFG_GCCISH_POST_LIB_FLAGS) \\\n-          $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM))\n+\t  $$(CFG_GCCISH_PRE_LIB_FLAGS_$(1)) $$(LLVM_LIBS_$(1)) \\\n+          $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) \\\n+          $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM_$(1)))\n \n rustllvm/$(1)/%.o: rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t@$$(call E, compile: $$@)"}, {"sha": "528bb0734ebc2b56a4a568ea3b54a683ef2f58e3", "filename": "mk/stage0.mk", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -21,23 +21,23 @@ endif\n \n # Host libs will be extracted by the above rule\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_CORELIB): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_CORELIB_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUSTLLVM): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n@@ -53,28 +53,28 @@ $$(HBIN0_H_$(1))/rustc$$(X):\t\t\t\t\t\t\t\t\\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB0_H_$(1))/$$(CFG_RUNTIME): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_RUNTIME)\n+$$(HLIB0_H_$(1))/$(CFG_RUNTIME_$(4)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_CORELIB): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_CORELIB)\n+$$(HLIB0_H_$(1))/$(CFG_CORELIB_$(4)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_CORELIB_$(4))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(CORELIB_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(CORELIB_GLOB_$(4)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_STDLIB): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_STDLIB)\n+$$(HLIB0_H_$(1))/$(CFG_STDLIB_$(4)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_STDLIB_$(4))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(STDLIB_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(STDLIB_GLOB_$(4)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_LIBRUSTC): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_LIBRUSTC)\n+$$(HLIB0_H_$(1))/$(CFG_LIBRUSTC_$(4)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(LIBRUSTC_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(LIBRUSTC_GLOB_$(4)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_RUSTLLVM): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_RUSTLLVM)\n+$$(HLIB0_H_$(1))/$(CFG_RUSTLLVM_$(4)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_RUSTLLVM_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n "}, {"sha": "8401f8b994152f801dedb04ae5e90d47537e3a70", "filename": "mk/target.mk", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -22,25 +22,25 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n-\t\trt/$(2)/$$(CFG_RUNTIME)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)): \\\n+\t\trt/$(2)/$(CFG_RUNTIME_$(2))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)): \\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n+\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX): \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n \t\t$$(TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n@@ -51,21 +51,21 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX): \\\n # Only build the compiler for host triples\n ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n-\t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n+\t\trustllvm/$(2)/$(CFG_RUSTLLVM_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX) \\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)) \\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n ifdef CFG_ENABLE_PAX_FLAGS"}, {"sha": "4ed1a5db217d86e70bec810d9e737e438f671a7c", "filename": "mk/tools.mk", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -38,86 +38,86 @@ RUST_INPUTS := $(wildcard $(S)src/librust/*.rs)\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N_TARGET\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER):          \\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(3)):          \\\n \t\t$$(FUZZER_LIB) $$(FUZZER_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X):\t\t\t\t\\\n \t\t$$(DRIVER_CRATE)\t\t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg fuzzer -o $$@ $$<\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X):\t\t\t\\\n \t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)      \\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))      \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)):\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t    \\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X):\t\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustpkg -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)):\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustdoc -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(3)):\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rusti -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(3)):\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(3))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rust -o $$@ $$<\n \n@@ -129,19 +129,19 @@ define TOOLS_STAGE_N_HOST\n # Promote the stageN target to stageN+1 host\n # FIXME: Shouldn't need to depend on host/librustc.so once\n # rpath is working\n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBFUZZER):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBFUZZER_$(3)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(3))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HBIN$(2)_H_$(4))/fuzzer$$(X):\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBFUZZER)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBFUZZER_$(3))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -153,70 +153,70 @@ $$(HBIN$(2)_H_$(4))/compiletest$$(X):\t\t\t\t\\\n \t$$(Q)cp $$< $$@\n \n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTPKG):\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(3)):\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(3))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3))\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HBIN$(2)_H_$(4))/rustpkg$$(X):\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTPKG)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(3))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTDOC):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(3)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(3))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HBIN$(2)_H_$(4))/rustdoc$$(X):\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTDOC)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(3))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTI):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTI_$(3)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(3))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_DSYM_GLOB_$(3))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTI)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTI_$(3))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(3)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(3))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(3))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB_$(3)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)_$(3)) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HBIN$(2)_H_$(4))/rust$$(X):\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(3))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}, {"sha": "bc1c0c23025337dcb0cac3409c4e82844dbe5037", "filename": "src/rt/arch/arm/morestack.S", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/src%2Frt%2Farch%2Farm%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/src%2Frt%2Farch%2Farm%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fmorestack.S?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -0,0 +1,8 @@\n+.text\n+.code 32\n+.arm\n+.align\n+\n+.globl __morestack\n+.hidden __morestack\n+__morestack:"}, {"sha": "3c7034a2f9561576e6b7bd67b244d8cdd1b41aa6", "filename": "src/rt/rust_android_dummy.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a5dc593c1895b4dd9a024ef785cb3682cb064a/src%2Frt%2Frust_android_dummy.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/26a5dc593c1895b4dd9a024ef785cb3682cb064a/src%2Frt%2Frust_android_dummy.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.cpp?ref=26a5dc593c1895b4dd9a024ef785cb3682cb064a", "patch": "@@ -4,6 +4,7 @@\n \n #include \"rust_android_dummy.h\"\n #include <math.h>\n+#include <errno.h>\n \n #ifdef __ANDROID__\n \n@@ -13,6 +14,9 @@ char **backtrace_symbols(void *const *array, int size) { return 0; }\n \n void backtrace_symbols_fd (void *const *array, int size, int fd) {}\n \n+extern \"C\" volatile int* __errno_location() {\n+    return &errno;\n+}\n \n extern \"C\" float log2f(float f)\n {"}]}