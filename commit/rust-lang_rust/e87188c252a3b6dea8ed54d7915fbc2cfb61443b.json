{"sha": "e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzE4OGMyNTJhM2I2ZGVhOGVkNTRkNzkxNWZiYzJjZmI2MTQ0M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T18:36:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T18:36:44Z"}, "message": "Auto merge of #87133 - GuillaumeGomez:rollup-pfz9jbk, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87027 (expand: Support helper attributes for built-in derive macros)\n - #87056 (Fix codeblocks overflow)\n - #87117 (Shrink the CrateStore dynamic interface.)\n - #87120 (rustdoc: Remove unnecessary `extern crate` aliases)\n - #87125 (Fix Ayu theme `<code>` color)\n - #87130 (Update browser-ui-test package version)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d1a7dcc583bbe747a2b06f9d31d45f13a65da0f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a7dcc583bbe747a2b06f9d31d45f13a65da0f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "html_url": "https://github.com/rust-lang/rust/commit/e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0c568785adcc0a123cac9d47047020b7a24821", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c568785adcc0a123cac9d47047020b7a24821", "html_url": "https://github.com/rust-lang/rust/commit/4f0c568785adcc0a123cac9d47047020b7a24821"}, {"sha": "ac6672b74631cfcdbfd042724e29969b193cefa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6672b74631cfcdbfd042724e29969b193cefa1", "html_url": "https://github.com/rust-lang/rust/commit/ac6672b74631cfcdbfd042724e29969b193cefa1"}], "stats": {"total": 441, "additions": 267, "deletions": 174}, "files": [{"sha": "a8c61d53346de279ea68c618d70ad47a5e5b967a", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 7, "deletions": 76, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{self as ast, NodeId};\n use rustc_ast_pretty::pprust;\n-use rustc_expand::base::{ExtCtxt, ResolverExpand};\n+use rustc_expand::base::{parse_macro_name_and_helper_attrs, ExtCtxt, ResolverExpand};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_session::Session;\n use rustc_span::hygiene::AstPass;\n@@ -109,86 +109,17 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_custom_derive(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n-        // Once we've located the `#[proc_macro_derive]` attribute, verify\n-        // that it's of the form `#[proc_macro_derive(Foo)]` or\n-        // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n-        let list = match attr.meta_item_list() {\n-            Some(list) => list,\n-            None => return,\n-        };\n-        if list.len() != 1 && list.len() != 2 {\n-            self.handler.span_err(attr.span, \"attribute must have either one or two arguments\");\n-            return;\n-        }\n-        let trait_attr = match list[0].meta_item() {\n-            Some(meta_item) => meta_item,\n-            _ => {\n-                self.handler.span_err(list[0].span(), \"not a meta item\");\n-                return;\n-            }\n-        };\n-        let trait_ident = match trait_attr.ident() {\n-            Some(trait_ident) if trait_attr.is_word() => trait_ident,\n-            _ => {\n-                self.handler.span_err(trait_attr.span, \"must only be one word\");\n-                return;\n-            }\n-        };\n-\n-        if !trait_ident.name.can_be_raw() {\n-            self.handler.span_err(\n-                trait_attr.span,\n-                &format!(\"`{}` cannot be a name of derive macro\", trait_ident),\n-            );\n-        }\n-\n-        let attributes_attr = list.get(1);\n-        let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n-            if !attr.has_name(sym::attributes) {\n-                self.handler.span_err(attr.span(), \"second argument must be `attributes`\")\n-            }\n-            attr.meta_item_list()\n-                .unwrap_or_else(|| {\n-                    self.handler\n-                        .span_err(attr.span(), \"attribute must be of form: `attributes(foo, bar)`\");\n-                    &[]\n-                })\n-                .iter()\n-                .filter_map(|attr| {\n-                    let attr = match attr.meta_item() {\n-                        Some(meta_item) => meta_item,\n-                        _ => {\n-                            self.handler.span_err(attr.span(), \"not a meta item\");\n-                            return None;\n-                        }\n-                    };\n-\n-                    let ident = match attr.ident() {\n-                        Some(ident) if attr.is_word() => ident,\n-                        _ => {\n-                            self.handler.span_err(attr.span, \"must only be one word\");\n-                            return None;\n-                        }\n-                    };\n-                    if !ident.name.can_be_raw() {\n-                        self.handler.span_err(\n-                            attr.span,\n-                            &format!(\"`{}` cannot be a name of derive helper attribute\", ident),\n-                        );\n-                    }\n-\n-                    Some(ident.name)\n-                })\n-                .collect()\n-        } else {\n-            Vec::new()\n-        };\n+        let (trait_name, proc_attrs) =\n+            match parse_macro_name_and_helper_attrs(self.handler, attr, \"derive\") {\n+                Some(name_and_attrs) => name_and_attrs,\n+                None => return,\n+            };\n \n         if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n                 id: item.id,\n                 span: item.span,\n-                trait_name: trait_ident.name,\n+                trait_name,\n                 function_name: item.ident,\n                 attrs: proc_attrs,\n             }));"}, {"sha": "0183add495777184abf448fc63988f44bd2d5bb9", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -745,9 +745,17 @@ impl SyntaxExtension {\n             }\n         }\n \n-        let builtin_name = sess\n+        let (builtin_name, helper_attrs) = sess\n             .find_by_name(attrs, sym::rustc_builtin_macro)\n-            .map(|a| a.value_str().unwrap_or(name));\n+            .map(|attr| {\n+                // Override `helper_attrs` passed above if it's a built-in macro,\n+                // marking `proc_macro_derive` macros as built-in is not a realistic use case.\n+                parse_macro_name_and_helper_attrs(sess.diagnostic(), attr, \"built-in\").map_or_else(\n+                    || (Some(name), Vec::new()),\n+                    |(name, helper_attrs)| (Some(name), helper_attrs),\n+                )\n+            })\n+            .unwrap_or_else(|| (None, helper_attrs));\n         let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n         if let Some((_, sp)) = const_stability {\n             sess.parse_sess\n@@ -1213,6 +1221,88 @@ pub fn get_exprs_from_tts(\n     Some(es)\n }\n \n+pub fn parse_macro_name_and_helper_attrs(\n+    diag: &rustc_errors::Handler,\n+    attr: &Attribute,\n+    descr: &str,\n+) -> Option<(Symbol, Vec<Symbol>)> {\n+    // Once we've located the `#[proc_macro_derive]` attribute, verify\n+    // that it's of the form `#[proc_macro_derive(Foo)]` or\n+    // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n+    let list = match attr.meta_item_list() {\n+        Some(list) => list,\n+        None => return None,\n+    };\n+    if list.len() != 1 && list.len() != 2 {\n+        diag.span_err(attr.span, \"attribute must have either one or two arguments\");\n+        return None;\n+    }\n+    let trait_attr = match list[0].meta_item() {\n+        Some(meta_item) => meta_item,\n+        _ => {\n+            diag.span_err(list[0].span(), \"not a meta item\");\n+            return None;\n+        }\n+    };\n+    let trait_ident = match trait_attr.ident() {\n+        Some(trait_ident) if trait_attr.is_word() => trait_ident,\n+        _ => {\n+            diag.span_err(trait_attr.span, \"must only be one word\");\n+            return None;\n+        }\n+    };\n+\n+    if !trait_ident.name.can_be_raw() {\n+        diag.span_err(\n+            trait_attr.span,\n+            &format!(\"`{}` cannot be a name of {} macro\", trait_ident, descr),\n+        );\n+    }\n+\n+    let attributes_attr = list.get(1);\n+    let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n+        if !attr.has_name(sym::attributes) {\n+            diag.span_err(attr.span(), \"second argument must be `attributes`\")\n+        }\n+        attr.meta_item_list()\n+            .unwrap_or_else(|| {\n+                diag.span_err(attr.span(), \"attribute must be of form: `attributes(foo, bar)`\");\n+                &[]\n+            })\n+            .iter()\n+            .filter_map(|attr| {\n+                let attr = match attr.meta_item() {\n+                    Some(meta_item) => meta_item,\n+                    _ => {\n+                        diag.span_err(attr.span(), \"not a meta item\");\n+                        return None;\n+                    }\n+                };\n+\n+                let ident = match attr.ident() {\n+                    Some(ident) if attr.is_word() => ident,\n+                    _ => {\n+                        diag.span_err(attr.span, \"must only be one word\");\n+                        return None;\n+                    }\n+                };\n+                if !ident.name.can_be_raw() {\n+                    diag.span_err(\n+                        attr.span,\n+                        &format!(\"`{}` cannot be a name of derive helper attribute\", ident),\n+                    );\n+                }\n+\n+                Some(ident.name)\n+            })\n+            .collect()\n+    } else {\n+        Vec::new()\n+    };\n+\n+    Some((trait_ident.name, proc_attrs))\n+}\n+\n /// This nonterminal looks like some specific enums from\n /// `proc-macro-hack` and `procedural-masquerade` crates.\n /// We need to maintain some special pretty-printing behavior for them due to incorrect"}, {"sha": "b1c725ecd85c857db40b883d631ac7b529263add", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -448,7 +448,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word, NameValueStr: \"name\"), IMPL_DETAIL),\n+    rustc_attr!(\n+        rustc_builtin_macro, AssumedUsed,\n+        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"),\n+        IMPL_DETAIL,\n+    ),\n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, AssumedUsed,"}, {"sha": "958a4ab68020a24d642f0523d38c36ab627842b6", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -18,7 +18,7 @@ use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n-use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n+use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n@@ -860,11 +860,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                     tcx.ensure().proc_macro_decls_static(())\n                 });\n \n-                let cstore = tcx\n-                    .cstore_as_any()\n-                    .downcast_ref::<CStore>()\n-                    .expect(\"`tcx.cstore` is not a `CStore`\");\n-                cstore.report_unused_deps(tcx);\n+                CStore::from_tcx(tcx).report_unused_deps(tcx);\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {"}, {"sha": "70d29f9d7caa801daa275c77a4b8b24325d545dd", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -130,7 +130,7 @@ impl<'a> std::fmt::Debug for CrateDump<'a> {\n }\n \n impl CStore {\n-    crate fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n+    pub fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n         tcx.cstore_as_any().downcast_ref::<CStore>().expect(\"`tcx.cstore` is not a `CStore`\")\n     }\n "}, {"sha": "ce8dfeae076e6b0b40573b334debc132264ab125", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -5,7 +5,6 @@ use crate::rmeta::encoder;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -369,6 +368,7 @@ pub fn provide(providers: &mut Providers) {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n+        crates: |tcx, ()| tcx.arena.alloc_slice(&CStore::from_tcx(tcx).crates_untracked()),\n \n         ..*providers\n     };\n@@ -451,6 +451,16 @@ impl CStore {\n         self.get_crate_data(def_id.krate).get_span(def_id.index, sess)\n     }\n \n+    pub fn def_kind(&self, def: DefId) -> DefKind {\n+        self.get_crate_data(def.krate).def_kind(def.index)\n+    }\n+\n+    pub fn crates_untracked(&self) -> Vec<CrateNum> {\n+        let mut result = vec![];\n+        self.iter_crate_data(|cnum, _| result.push(cnum));\n+        result\n+    }\n+\n     pub fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n         self.get_crate_data(def_id.krate).get_generics(def_id.index, sess).own_counts().lifetimes\n     }\n@@ -485,29 +495,21 @@ impl CrateStore for CStore {\n         self\n     }\n \n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol {\n+    fn crate_name(&self, cnum: CrateNum) -> Symbol {\n         self.get_crate_data(cnum).root.name\n     }\n \n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n+    fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId {\n         self.get_crate_data(cnum).root.stable_crate_id\n     }\n \n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh {\n-        self.get_crate_data(cnum).root.hash\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n     fn def_key(&self, def: DefId) -> DefKey {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n-    fn def_kind(&self, def: DefId) -> DefKind {\n-        self.get_crate_data(def.krate).def_kind(def.index)\n-    }\n-\n     fn def_path(&self, def: DefId) -> DefPath {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n@@ -526,12 +528,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).def_path_hash_to_def_id(cnum, index_guess, hash)\n     }\n \n-    fn crates_untracked(&self) -> Vec<CrateNum> {\n-        let mut result = vec![];\n-        self.iter_crate_data(|cnum, _| result.push(cnum));\n-        result\n-    }\n-\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }"}, {"sha": "5c7d84e2bc97f350e18e51937ae36955fab8f592", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -1061,10 +1061,7 @@ impl EncodeContext<'a, 'tcx> {\n             Lazy::empty()\n         };\n \n-        let data = ModData {\n-            reexports,\n-            expansion: tcx.resolutions(()).definitions.expansion_that_defined(local_def_id),\n-        };\n+        let data = ModData { reexports, expansion: tcx.expn_that_defined(local_def_id) };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         if self.is_proc_macro {"}, {"sha": "ae53f1ac3bb49aad914d0da0e5e5804e592720e6", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -1,7 +1,6 @@\n use self::collector::NodeCollector;\n \n use crate::hir::{AttributeMap, IndexedHir};\n-use crate::middle::cstore::CrateStore;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -991,7 +990,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n         },\n     );\n \n-    let upstream_crates = upstream_crates(&*tcx.untracked_resolutions.cstore);\n+    let upstream_crates = upstream_crates(tcx);\n \n     // We hash the final, remapped names of all local source files so we\n     // don't have to include the path prefix remapping commandline args.\n@@ -1021,13 +1020,13 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     Svh::new(crate_hash.to_smaller_hash())\n }\n \n-fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(StableCrateId, Svh)> {\n-    let mut upstream_crates: Vec<_> = cstore\n-        .crates_untracked()\n+fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n+    let mut upstream_crates: Vec<_> = tcx\n+        .crates(())\n         .iter()\n         .map(|&cnum| {\n-            let stable_crate_id = cstore.stable_crate_id_untracked(cnum);\n-            let hash = cstore.crate_hash_untracked(cnum);\n+            let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);\n+            let hash = tcx.crate_hash(cnum);\n             (stable_crate_id, hash)\n         })\n         .collect();"}, {"sha": "7efe8e061e885a8b385b1aa77f1220afe47547e0", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -5,9 +5,7 @@\n use crate::ty::TyCtxt;\n \n use rustc_ast as ast;\n-use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n-use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n@@ -190,27 +188,26 @@ pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n pub trait CrateStore: std::fmt::Debug {\n     fn as_any(&self) -> &dyn Any;\n \n-    // resolve\n+    // Foreign definitions.\n+    // This information is safe to access, since it's hashed as part of the DefPathHash, which incr.\n+    // comp. uses to identify a DefId.\n     fn def_key(&self, def: DefId) -> DefKey;\n-    fn def_kind(&self, def: DefId) -> DefKind;\n     fn def_path(&self, def: DefId) -> DefPath;\n     fn def_path_hash(&self, def: DefId) -> DefPathHash;\n+\n+    // This information is safe to access, since it's hashed as part of the StableCrateId, which\n+    // incr.  comp. uses to identify a CrateNum.\n+    fn crate_name(&self, cnum: CrateNum) -> Symbol;\n+    fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId;\n+\n+    /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(\n         &self,\n         cnum: CrateNum,\n         index_guess: u32,\n         hash: DefPathHash,\n     ) -> Option<DefId>;\n \n-    // \"queries\" used in resolve that aren't tracked for incremental compilation\n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-\n-    // This is basically a 1-based range of ints, which is a little\n-    // silly - I may fix that.\n-    fn crates_untracked(&self) -> Vec<CrateNum>;\n-\n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n }"}, {"sha": "80c4ff2ae5d993b86f207424c18cd7e3cb98eb72", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -213,6 +213,8 @@ rustc_queries! {\n     }\n \n     query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n+        // This query reads from untracked data in definitions.\n+        eval_always\n         desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n     }\n \n@@ -1446,6 +1448,7 @@ rustc_queries! {\n         desc { \"calculating the stability index for the local crate\" }\n     }\n     query crates(_: ()) -> &'tcx [CrateNum] {\n+        eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n "}, {"sha": "f52686c9b5f2ea1db06e12b208260a6d7b1ee6c0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -1277,7 +1277,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if crate_num == LOCAL_CRATE {\n             self.sess.local_stable_crate_id()\n         } else {\n-            self.untracked_resolutions.cstore.stable_crate_id_untracked(crate_num)\n+            self.untracked_resolutions.cstore.stable_crate_id(crate_num)\n         }\n     }\n \n@@ -1290,10 +1290,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n             let cstore = &self.untracked_resolutions.cstore;\n-            (\n-                cstore.crate_name_untracked(def_id.krate),\n-                cstore.stable_crate_id_untracked(def_id.krate),\n-            )\n+            (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n         };\n \n         format!(\n@@ -2831,8 +2828,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.crates =\n-        |tcx, ()| tcx.arena.alloc_slice(&tcx.resolutions(()).cstore.crates_untracked());\n     providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {"}, {"sha": "35e7688fbe45aefddae87ad971a69c813adbf5cc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -128,7 +128,7 @@ impl<'a> Resolver<'a> {\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n             // This is the crate root\n-            (self.cstore().crate_name_untracked(def_id.krate), None)\n+            (self.cstore().crate_name(def_id.krate), None)\n         } else {\n             let def_key = self.cstore().def_key(def_id);\n             let name = def_key"}, {"sha": "7d22bfedb93b946234540931169e3d71c9cd04d6", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -1,6 +1,7 @@\n #[doc = include_str!(\"panic.md\")]\n #[macro_export]\n-#[rustc_builtin_macro = \"core_panic\"]\n+#[cfg_attr(bootstrap, rustc_builtin_macro = \"core_panic\")]\n+#[cfg_attr(not(bootstrap), rustc_builtin_macro(core_panic))]\n #[allow_internal_unstable(edition_panic)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n #[rustc_diagnostic_item = \"core_panic_macro\"]"}, {"sha": "7afe52a3fd693ccf2cec1d69901eb4ba3df56135", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -6,7 +6,8 @@\n \n #[doc = include_str!(\"../../core/src/macros/panic.md\")]\n #[macro_export]\n-#[rustc_builtin_macro = \"std_panic\"]\n+#[cfg_attr(bootstrap, rustc_builtin_macro = \"std_panic\")]\n+#[cfg_attr(not(bootstrap), rustc_builtin_macro(std_panic))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(edition_panic)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_macro\")]"}, {"sha": "779b301ff618fa6ed583949def93385171d5853b", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.4.1 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.4.2 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "c5ca396e72029c4870506a73145c79a9aec9c5da", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -167,11 +167,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n \n-    testing::test_main(\n-        &test_args,\n-        tests,\n-        Some(testing::Options::new().display_output(display_warnings)),\n-    );\n+    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -769,7 +765,7 @@ crate trait Tester {\n }\n \n crate struct Collector {\n-    crate tests: Vec<testing::TestDescAndFn>,\n+    crate tests: Vec<test::TestDescAndFn>,\n \n     // The name of the test displayed to the user, separated by `::`.\n     //\n@@ -930,22 +926,22 @@ impl Tester for Collector {\n         };\n \n         debug!(\"creating test {}: {}\", name, test);\n-        self.tests.push(testing::TestDescAndFn {\n-            desc: testing::TestDesc {\n-                name: testing::DynTestName(name),\n+        self.tests.push(test::TestDescAndFn {\n+            desc: test::TestDesc {\n+                name: test::DynTestName(name),\n                 ignore: match config.ignore {\n                     Ignore::All => true,\n                     Ignore::None => false,\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n                 // compiler failures are test failures\n-                should_panic: testing::ShouldPanic::No,\n+                should_panic: test::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n                 compile_fail: config.compile_fail,\n                 no_run,\n-                test_type: testing::TestType::DocTest,\n+                test_type: test::TestType::DocTest,\n             },\n-            testfn: testing::DynTestFn(box move || {\n+            testfn: test::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };"}, {"sha": "3b599e4997a4bbb0c7d16c6d9f7cdb1f61590f32", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -33,6 +33,7 @@ use std::str;\n \n use crate::clean::RenderedLink;\n use crate::doctest;\n+use crate::html::escape::Escape;\n use crate::html::highlight;\n use crate::html::toc::TocBuilder;\n \n@@ -207,26 +208,11 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let should_panic;\n         let ignore;\n         let edition;\n-        if let Some(Event::Start(Tag::CodeBlock(kind))) = event {\n-            let parse_result = match kind {\n-                CodeBlockKind::Fenced(ref lang) => {\n-                    LangString::parse_without_check(&lang, self.check_error_codes, false)\n-                }\n-                CodeBlockKind::Indented => Default::default(),\n-            };\n-            if !parse_result.rust {\n-                return Some(Event::Start(Tag::CodeBlock(kind)));\n-            }\n-            compile_fail = parse_result.compile_fail;\n-            should_panic = parse_result.should_panic;\n-            ignore = parse_result.ignore;\n-            edition = parse_result.edition;\n+        let kind = if let Some(Event::Start(Tag::CodeBlock(kind))) = event {\n+            kind\n         } else {\n             return event;\n-        }\n-\n-        let explicit_edition = edition.is_some();\n-        let edition = edition.unwrap_or(self.edition);\n+        };\n \n         let mut origtext = String::new();\n         for event in &mut self.inner {\n@@ -241,6 +227,35 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n         let text = lines.collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n \n+        let parse_result = match kind {\n+            CodeBlockKind::Fenced(ref lang) => {\n+                let parse_result =\n+                    LangString::parse_without_check(&lang, self.check_error_codes, false);\n+                if !parse_result.rust {\n+                    return Some(Event::Html(\n+                        format!(\n+                            \"<div class=\\\"example-wrap\\\">\\\n+                                 <pre{}>{}</pre>\\\n+                             </div>\",\n+                            format!(\" class=\\\"language-{}\\\"\", lang),\n+                            Escape(&text),\n+                        )\n+                        .into(),\n+                    ));\n+                }\n+                parse_result\n+            }\n+            CodeBlockKind::Indented => Default::default(),\n+        };\n+\n+        compile_fail = parse_result.compile_fail;\n+        should_panic = parse_result.should_panic;\n+        ignore = parse_result.ignore;\n+        edition = parse_result.edition;\n+\n+        let explicit_edition = edition.is_some();\n+        let edition = edition.unwrap_or(self.edition);\n+\n         let playground_button = self.playground.as_ref().and_then(|playground| {\n             let krate = &playground.crate_name;\n             let url = &playground.url;"}, {"sha": "208e8f723f40720a4b0ef4f2bfb28fe1142a5766", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -435,7 +435,7 @@ nav.sub {\n \tborder-bottom-left-radius: 5px;\n }\n \n-.rustdoc:not(.source) .example-wrap > pre.rust {\n+.rustdoc:not(.source) .example-wrap > pre:not(.line-number) {\n \twidth: 100%;\n \toverflow-x: auto;\n }"}, {"sha": "8296c3f91ca3b1afc7f03696150d54570852b564", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -34,7 +34,7 @@ h4 {\n \tbackground: rgba(0, 0, 0, 0);\n }\n \n-code {\n+.docblock code {\n \tcolor: #ffb454;\n }\n h3 > code, h4 > code, h5 > code {"}, {"sha": "d4d87819c0d7a3c4a7452971e23175afc8928a58", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -53,11 +53,11 @@ extern crate rustc_parse;\n extern crate rustc_passes;\n extern crate rustc_resolve;\n extern crate rustc_session;\n-extern crate rustc_span as rustc_span;\n+extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n-extern crate test as testing;\n+extern crate test;\n \n #[cfg(feature = \"jemalloc\")]\n extern crate tikv_jemalloc_sys;"}, {"sha": "45966c0058df4de71fa520d4b631235854f7ebef", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -136,10 +136,10 @@ crate fn test(mut options: Options) -> Result<(), String> {\n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n-    testing::test_main(\n+    test::test_main(\n         &options.test_args,\n         collector.tests,\n-        Some(testing::Options::new().display_output(options.display_warnings)),\n+        Some(test::Options::new().display_output(options.display_warnings)),\n     );\n     Ok(())\n }"}, {"sha": "50af36fa3d6412c6b1e45934b64199c8c895580f", "filename": "src/test/rustdoc-gui/ayu-code-tag-colors.goml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fayu-code-tag-colors.goml?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -0,0 +1,13 @@\n+// The ayu theme has a different color for the \"<code>\" tags in the doc blocks. We need to\n+// check that the rule isn't applied on other \"<code>\" elements.\n+goto: file://|DOC_PATH|/test_docs/enum.AnEnum.html\n+// We need to show the text, otherwise the colors aren't \"computed\" by the web browser.\n+show-text: true\n+// We set the theme to ayu.\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload to get the text appearing and the theme applied.\n+reload:\n+\n+assert-css: (\".docblock code\", {\"color\": \"rgb(255, 180, 84)\"}, ALL)\n+// It includes variants and the \"titles\" as well (for example: \"impl RefUnwindSafe for AnEnum\").\n+assert-css: (\"div:not(.docblock) > code\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)"}, {"sha": "ee4dad444e93219861026e24eb4ed7cabd970b44", "filename": "src/test/rustdoc-gui/code-blocks-overflow.goml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -0,0 +1,8 @@\n+// This test ensures that codeblocks content don't overflow.\n+goto: file://|DOC_PATH|/lib2/sub_mod/struct.Foo.html\n+size: (1080, 600)\n+// There should be two codeblocks: a rust one and a non-rust one.\n+assert-count: (\".docblock > .example-wrap\", 2)\n+assert: \".docblock > .example-wrap > .language-txt\"\n+assert: \".docblock > .example-wrap > .rust-example-rendered\"\n+assert-css: (\".docblock > .example-wrap > pre\", {\"width\": \"796px\", \"overflow-x\": \"auto\"}, ALL)"}, {"sha": "ec8ab339e2804ebc9a208c3c2c99005cd71c0a1b", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n pub mod module {\n     pub mod sub_module {\n         pub mod sub_sub_module {\n@@ -32,4 +34,16 @@ impl Trait for Foo {\n     const Y: u32 = 0;\n }\n \n+\n impl implementors::Whatever for Foo {}\n+\n+pub mod sub_mod {\n+    /// ```txt\n+    /// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    /// ```\n+    ///\n+    /// ```\n+    /// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    /// ```\n+    pub struct Foo;\n+}"}, {"sha": "85dd8805fbc4c9a98531738f0280322d145a4efc", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -96,6 +96,7 @@ pub fn check_list_code_block() {}\n #[doc(cfg(unix))]\n pub fn replaced_function() {}\n \n+/// Some doc with `code`!\n pub enum AnEnum {\n     WithVariants { and: usize, sub: usize, variants: usize },\n }"}, {"sha": "ea74a15624c602ce76179dc223913937a3f43668", "filename": "src/test/ui/deriving/deriving-with-helper.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87188c252a3b6dea8ed54d7915fbc2cfb61443b/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs?ref=e87188c252a3b6dea8ed54d7915fbc2cfb61443b", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+// compile-flags: --crate-type=lib\n+\n+#![feature(decl_macro)]\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![feature(rustc_attrs)]\n+\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro derive() {}\n+\n+#[rustc_builtin_macro(Default, attributes(default))]\n+macro Default() {}\n+\n+mod default {\n+    pub trait Default {\n+        fn default() -> Self;\n+    }\n+\n+    impl Default for u8 {\n+        fn default() -> u8 {\n+            0\n+        }\n+    }\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[derive(Default)]\n+struct S {\n+    #[default] // OK\n+    field: u8,\n+}"}]}