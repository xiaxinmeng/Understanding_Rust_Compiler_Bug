{"sha": "c6b27db8767a6e070701d22a179caac60592f713", "node_id": "C_kwDOAAsO6NoAKGM2YjI3ZGI4NzY3YTZlMDcwNzAxZDIyYTE3OWNhYWM2MDU5MmY3MTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-15T15:02:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-15T15:02:35Z"}, "message": "Rollup merge of #93999 - barzamin:suggest-raw-strings, r=jackh726\n\nsuggest using raw strings when invalid escapes appear in literals\n\ni'd guess about 70% of \"bad escape\" cases occur when someone meant to use a raw string literal because they're passing it directly to `Regex::new()`.\nthis emits an advisory (`Applicability::MaybeIncorrect`) `help:` suggestion to the user that they use an `r\"\"` string, on top of the normal notes about looking at the string literal documentation/spec.", "tree": {"sha": "f3920481c5835837d0061d7eb573a8956e7cf759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3920481c5835837d0061d7eb573a8956e7cf759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b27db8767a6e070701d22a179caac60592f713", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiC8CMCRBK7hj4Ov3rIwAAEqIIAEoCTrLIq4JfWsXQybZuR5KD\nkyy3zTfFLJPhiyKhZvmgRy6nXP+Eu/jTmxNj2WdPkzfou3utXvHoZTnWkm1AnUh1\ngPitOL6TY8BAYiqRkxtXRmZ+CnBTOeh7Nx0rUw9Bpw8v5Q0/6yOJ7TFNUn71eq1m\nHkb+3WwU2AkAx1nr20m3raU5e60Rfd+Bki7QtpbVEA+B1IoXtJN1d3HRYjnBNCnO\nR4M7cTpzSB9pR2VsuezGMUvuZchP9pdXbHut3n6ApxRRHiqkkvKF+6+BS9imNP/R\nhxKXq1TpZcAyz2btG6LTPTh5JmSTu53qh0i66hq08JmtxF9EDHx/gJvXyaZfEvU=\n=tFtk\n-----END PGP SIGNATURE-----\n", "payload": "tree f3920481c5835837d0061d7eb573a8956e7cf759\nparent e1baa3d5b959ae6c74b6e83292a5db33d4ebf7db\nparent e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644937355 +0100\ncommitter GitHub <noreply@github.com> 1644937355 +0100\n\nRollup merge of #93999 - barzamin:suggest-raw-strings, r=jackh726\n\nsuggest using raw strings when invalid escapes appear in literals\n\ni'd guess about 70% of \"bad escape\" cases occur when someone meant to use a raw string literal because they're passing it directly to `Regex::new()`.\nthis emits an advisory (`Applicability::MaybeIncorrect`) `help:` suggestion to the user that they use an `r\"\"` string, on top of the normal notes about looking at the string literal documentation/spec.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b27db8767a6e070701d22a179caac60592f713", "html_url": "https://github.com/rust-lang/rust/commit/c6b27db8767a6e070701d22a179caac60592f713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b27db8767a6e070701d22a179caac60592f713/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1baa3d5b959ae6c74b6e83292a5db33d4ebf7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1baa3d5b959ae6c74b6e83292a5db33d4ebf7db", "html_url": "https://github.com/rust-lang/rust/commit/e1baa3d5b959ae6c74b6e83292a5db33d4ebf7db"}, {"sha": "e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789", "html_url": "https://github.com/rust-lang/rust/commit/e59cda9ee1b9fab3fe966ea7e4b12c14b1f85789"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "a41956c58f005af4b4a6c0ce43df5fc784094c3c", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6b27db8767a6e070701d22a179caac60592f713/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b27db8767a6e070701d22a179caac60592f713/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=c6b27db8767a6e070701d22a179caac60592f713", "patch": "@@ -185,6 +185,15 @@ pub(crate) fn emit_unescape_error(\n                      version control settings\",\n                 );\n             } else {\n+                if !mode.is_bytes() {\n+                    diag.span_suggestion(\n+                        span_with_quotes,\n+                        \"if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\",\n+                        format!(\"r\\\"{}\\\"\", lit),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+\n                 diag.help(\n                     \"for more information, visit \\\n                      <https://static.rust-lang.org/doc/master/reference.html#literals>\","}, {"sha": "e6ff1f662bde9c9b85cd6ee359854cc865f640e9", "filename": "src/test/ui/lexer/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr?ref=c6b27db8767a6e070701d22a179caac60592f713", "patch": "@@ -17,6 +17,10 @@ LL |     '\\\u25cf'\n    |       ^ unknown character escape\n    |\n    = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     r\"\\\u25cf\"\n+   |     ~~~~~\n \n error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:14:7\n@@ -25,6 +29,10 @@ LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n    |\n    = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     r\"\\\u25cf\"\n+   |     ~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "978b92cbcd2116c761daf66dd0a2045180536812", "filename": "src/test/ui/parser/bad-escape-suggest-raw-string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs?ref=c6b27db8767a6e070701d22a179caac60592f713", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let ok = r\"ab\\[c\";\n+    let bad = \"ab\\[c\";\n+    //~^ ERROR unknown character escape: `[`\n+    //~| HELP for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+    //~| HELP if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+}"}, {"sha": "fc34bd3281af5bae4a1331cdd50728623612467a", "filename": "src/test/ui/parser/bad-escape-suggest-raw-string.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b27db8767a6e070701d22a179caac60592f713/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr?ref=c6b27db8767a6e070701d22a179caac60592f713", "patch": "@@ -0,0 +1,14 @@\n+error: unknown character escape: `[`\n+  --> $DIR/bad-escape-suggest-raw-string.rs:3:19\n+   |\n+LL |     let bad = \"ab\\[c\";\n+   |                   ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n+   |\n+LL |     let bad = r\"ab\\[c\";\n+   |               ~~~~~~~~\n+\n+error: aborting due to previous error\n+"}]}