{"sha": "e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTFjOWNhNjBjMTliZjNiMDJiMzAyZTIxZDlmOWZkOWJkOGE0NjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T16:12:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T16:12:30Z"}, "message": "Merge #8371\n\n8371: Don't use HirDisplayWrapper when displaying SourceCode r=matklad a=Veykril\n\nThe issue was basically that when displaying for `DisplayTarget::SourceCode` some `hir_fmt` functions would create `HirDisplayWrapper`s which would then `fmt` these triggering the Display panic since `fmt::Display` can't fail the same way as `HirDisplay`. Simple fix is to just use `hir_fmt` directly. Should probably write that down somewhere in source, looking for a good spot to put that right now.\r\n\r\nFixes #8077, Fixes #8370\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "adcf85ca11cefefec4473e8cdb0f7069083b03a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcf85ca11cefefec4473e8cdb0f7069083b03a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbIhuCRBK7hj4Ov3rIwAAdHIIABGFlwc73O2Ns2nnWEXFd5PF\n5mAuSEX8D+E3i4uRNAo61er6lSfdiVrl0dAKah/hmCuHgCg/CfnEVGGg04BpP3Id\nsfxdiKVYSa9kq596uJpDCrG10Ht3m2fZ2VCHY+sk1HnqdpyPPGC2gE7Z6NDQsl6g\nV/c+oHHFiBHerUFZHcAVDq5elqkhWpbO7ZIQkN7Tds+e/Eb4+53pXWQAroDPq4c+\n859x8sNxOWNnCjVvuiOr+UTfsJSO9WEGPuEomFcdqTrsScCYYuZVFKfk79amiXtI\nbjEY76iVnDIbo28BemuBhc6tLp5sXHbVxJs7K2E1+JyUsjD4qwMIpIZ57wm3cwo=\n=43S1\n-----END PGP SIGNATURE-----\n", "payload": "tree adcf85ca11cefefec4473e8cdb0f7069083b03a2\nparent 7dd7017547c83bb3d33a785047e6da0a1464c0ad\nparent a43409fa4313938be21c8650eb2f523fefdcb508\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617725550 +0000\ncommitter GitHub <noreply@github.com> 1617725550 +0000\n\nMerge #8371\n\n8371: Don't use HirDisplayWrapper when displaying SourceCode r=matklad a=Veykril\n\nThe issue was basically that when displaying for `DisplayTarget::SourceCode` some `hir_fmt` functions would create `HirDisplayWrapper`s which would then `fmt` these triggering the Display panic since `fmt::Display` can't fail the same way as `HirDisplay`. Simple fix is to just use `hir_fmt` directly. Should probably write that down somewhere in source, looking for a good spot to put that right now.\r\n\r\nFixes #8077, Fixes #8370\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "html_url": "https://github.com/rust-lang/rust/commit/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd7017547c83bb3d33a785047e6da0a1464c0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd7017547c83bb3d33a785047e6da0a1464c0ad", "html_url": "https://github.com/rust-lang/rust/commit/7dd7017547c83bb3d33a785047e6da0a1464c0ad"}, {"sha": "a43409fa4313938be21c8650eb2f523fefdcb508", "url": "https://api.github.com/repos/rust-lang/rust/commits/a43409fa4313938be21c8650eb2f523fefdcb508", "html_url": "https://github.com/rust-lang/rust/commit/a43409fa4313938be21c8650eb2f523fefdcb508"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "9e6bbcdf1eaf8d3a68ddc5814ecbf4a08631a99a", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "patch": "@@ -51,6 +51,10 @@ pub trait HirDisplay {\n     where\n         Self: Sized,\n     {\n+        assert!(\n+            !matches!(display_target, DisplayTarget::SourceCode { .. }),\n+            \"HirDisplayWrapper cannot fail with DisplaySourceCodeError, use HirDisplay::hir_fmt directly instead\"\n+        );\n         HirDisplayWrapper { db, t: self, max_size, omit_verbose_types, display_target }\n     }\n \n@@ -235,7 +239,7 @@ where\n             Err(HirDisplayError::FmtError) => Err(fmt::Error),\n             Err(HirDisplayError::DisplaySourceCodeError(_)) => {\n                 // This should never happen\n-                panic!(\"HirDisplay failed when calling Display::fmt!\")\n+                panic!(\"HirDisplay::hir_fmt failed with DisplaySourceCodeError when calling Display::fmt!\")\n             }\n         }\n     }\n@@ -256,13 +260,9 @@ impl HirDisplay for ProjectionTy {\n         }\n \n         let trait_ = f.db.trait_data(self.trait_(f.db));\n-        let first_parameter = self.self_type_parameter(&Interner).into_displayable(\n-            f.db,\n-            f.max_size,\n-            f.omit_verbose_types,\n-            f.display_target,\n-        );\n-        write!(f, \"<{} as {}\", first_parameter, trait_.name)?;\n+        write!(f, \"<\")?;\n+        self.self_type_parameter(&Interner).hir_fmt(f)?;\n+        write!(f, \" as {}\", trait_.name)?;\n         if self.substitution.len(&Interner) > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.substitution.interned()[1..], \", \")?;\n@@ -341,9 +341,6 @@ impl HirDisplay for Ty {\n                 write!(f, \"]\")?;\n             }\n             TyKind::Raw(m, t) | TyKind::Ref(m, _, t) => {\n-                let ty_display =\n-                    t.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n-\n                 if matches!(self.kind(&Interner), TyKind::Raw(..)) {\n                     write!(\n                         f,\n@@ -398,16 +395,16 @@ impl HirDisplay for Ty {\n                     if fn_traits(f.db.upcast(), trait_).any(|it| it == trait_)\n                         && predicates.len() <= 2\n                     {\n-                        return write!(f, \"{}\", ty_display);\n+                        return t.hir_fmt(f);\n                     }\n                 }\n \n                 if predicates.len() > 1 {\n                     write!(f, \"(\")?;\n-                    write!(f, \"{}\", ty_display)?;\n+                    t.hir_fmt(f)?;\n                     write!(f, \")\")?;\n                 } else {\n-                    write!(f, \"{}\", ty_display)?;\n+                    t.hir_fmt(f)?;\n                 }\n             }\n             TyKind::Tuple(_, substs) => {\n@@ -454,14 +451,8 @@ impl HirDisplay for Ty {\n                 write!(f, \")\")?;\n                 let ret = sig.ret();\n                 if !ret.is_unit() {\n-                    let ret_display = ret.into_displayable(\n-                        f.db,\n-                        f.max_size,\n-                        f.omit_verbose_types,\n-                        f.display_target,\n-                    );\n-\n-                    write!(f, \" -> {}\", ret_display)?;\n+                    write!(f, \" -> \")?;\n+                    ret.hir_fmt(f)?;\n                 }\n             }\n             TyKind::Adt(AdtId(def_id), parameters) => {\n@@ -603,13 +594,8 @@ impl HirDisplay for Ty {\n                         write!(f, \"|\")?;\n                     };\n \n-                    let ret_display = sig.ret().into_displayable(\n-                        f.db,\n-                        f.max_size,\n-                        f.omit_verbose_types,\n-                        f.display_target,\n-                    );\n-                    write!(f, \" -> {}\", ret_display)?;\n+                    write!(f, \" -> \")?;\n+                    sig.ret().hir_fmt(f)?;\n                 } else {\n                     write!(f, \"{{closure}}\")?;\n                 }\n@@ -697,9 +683,8 @@ impl HirDisplay for CallableSig {\n         write!(f, \")\")?;\n         let ret = self.ret();\n         if !ret.is_unit() {\n-            let ret_display =\n-                ret.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n-            write!(f, \" -> {}\", ret_display)?;\n+            write!(f, \" -> \")?;\n+            ret.hir_fmt(f)?;\n         }\n         Ok(())\n     }"}]}