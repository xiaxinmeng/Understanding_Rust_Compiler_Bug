{"sha": "cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYjE5NzljMTljMWI4YTg3YjhmNWQ4MDZmODAxZGIxZTljMWVlYWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-20T14:07:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-20T14:07:55Z"}, "message": "fix: rename works when invoked on a reference", "tree": {"sha": "9c2296dd2b10b9b24612609ea74be9d329f271c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2296dd2b10b9b24612609ea74be9d329f271c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa", "html_url": "https://github.com/rust-lang/rust/commit/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c4b3fa7f9d97029d64a7e13a12aa1ee42316d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c4b3fa7f9d97029d64a7e13a12aa1ee42316d7", "html_url": "https://github.com/rust-lang/rust/commit/15c4b3fa7f9d97029d64a7e13a12aa1ee42316d7"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "96bd07708c8793cef59cc6c579e1a4e1ac4bdc43", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=cbb1979c19c1b8a87b8f5d806f801db1e9c1eeaa", "patch": "@@ -10,7 +10,7 @@ use ide_db::{\n     rename::{bail, format_err, source_edit_from_references, IdentifierKind},\n     RootDatabase,\n };\n-use stdx::never;\n+use stdx::{always, never};\n use syntax::{ast, AstNode, SyntaxNode};\n \n use text_edit::TextEdit;\n@@ -31,10 +31,13 @@ pub(crate) fn prepare_rename(\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n \n-    let def = find_definition(&sema, syntax, position)?;\n-    let frange = def\n-        .range_for_rename(&sema)\n-        .ok_or_else(|| format_err!(\"No references found at position\"))?;\n+    let (name_like, def) = find_definition(&sema, syntax, position)?;\n+    if def.range_for_rename(&sema).is_none() {\n+        bail!(\"No references found at position\")\n+    }\n+\n+    let frange = sema.original_range(name_like.syntax());\n+    always!(frange.range.contains_inclusive(position.offset) && frange.file_id == position.file_id);\n     Ok(RangeInfo::new(frange.range, ()))\n }\n \n@@ -55,31 +58,23 @@ pub(crate) fn rename(\n     new_name: &str,\n ) -> RenameResult<SourceChange> {\n     let sema = Semantics::new(db);\n-    rename_with_semantics(&sema, position, new_name)\n-}\n-\n-pub(crate) fn rename_with_semantics(\n-    sema: &Semantics<RootDatabase>,\n-    position: FilePosition,\n-    new_name: &str,\n-) -> RenameResult<SourceChange> {\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n \n-    let def = find_definition(sema, syntax, position)?;\n+    let (_name_like, def) = find_definition(&sema, syntax, position)?;\n \n     if let Definition::Local(local) = def {\n         if let Some(self_param) = local.as_self_param(sema.db) {\n             cov_mark::hit!(rename_self_to_param);\n-            return rename_self_to_param(sema, local, self_param, new_name);\n+            return rename_self_to_param(&sema, local, self_param, new_name);\n         }\n         if new_name == \"self\" {\n             cov_mark::hit!(rename_to_self);\n-            return rename_to_self(sema, local);\n+            return rename_to_self(&sema, local);\n         }\n     }\n \n-    def.rename(sema, new_name)\n+    def.rename(&sema, new_name)\n }\n \n /// Called by the client when it is about to rename a file.\n@@ -100,11 +95,12 @@ fn find_definition(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n-) -> RenameResult<Definition> {\n-    match sema\n-        .find_node_at_offset_with_descend(syntax, position.offset)\n-        .ok_or_else(|| format_err!(\"No references found at position\"))?\n-    {\n+) -> RenameResult<(ast::NameLike, Definition)> {\n+    let name_like = sema\n+        .find_node_at_offset_with_descend::<ast::NameLike>(syntax, position.offset)\n+        .ok_or_else(|| format_err!(\"No references found at position\"))?;\n+\n+    let def = match &name_like {\n         // renaming aliases would rename the item being aliased as the HIR doesn't track aliases yet\n         ast::NameLike::Name(name)\n             if name.syntax().parent().map_or(false, |it| ast::Rename::can_cast(it.kind())) =>\n@@ -134,7 +130,9 @@ fn find_definition(\n                     .map(|it| it.referenced_or_defined(sema.db))\n             }),\n     }\n-    .ok_or_else(|| format_err!(\"No references found at position\"))\n+    .ok_or_else(|| format_err!(\"No references found at position\"))?;\n+\n+    Ok((name_like, def))\n }\n \n fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameResult<SourceChange> {\n@@ -328,7 +326,7 @@ mod tests {\n     fn test_prepare_rename_namelikes() {\n         check_prepare(r\"fn name$0<'lifetime>() {}\", expect![[r#\"3..7: name\"#]]);\n         check_prepare(r\"fn name<'lifetime$0>() {}\", expect![[r#\"8..17: 'lifetime\"#]]);\n-        check_prepare(r\"fn name<'lifetime>() { name$0(); }\", expect![[r#\"3..7: name\"#]]);\n+        check_prepare(r\"fn name<'lifetime>() { name$0(); }\", expect![[r#\"23..27: name\"#]]);\n     }\n \n     #[test]"}]}