{"sha": "2839805b9cb5414e4abb789e51adf452cea42315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Mzk4MDViOWNiNTQxNGU0YWJiNzg5ZTUxYWRmNDUyY2VhNDIzMTU=", "commit": {"author": {"name": "Andrei Formiga", "email": "archimedes_siracusa@hotmail.com", "date": "2013-11-17T18:31:50Z"}, "committer": {"name": "Andrei Formiga", "email": "archimedes_siracusa@hotmail.com", "date": "2013-11-18T02:30:57Z"}, "message": "Fixed uses of get() to unwrap() in doc examples in std::iter", "tree": {"sha": "8b02f0b7b65dc1b547bdc3140d82b5e83fc63e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b02f0b7b65dc1b547bdc3140d82b5e83fc63e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2839805b9cb5414e4abb789e51adf452cea42315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2839805b9cb5414e4abb789e51adf452cea42315", "html_url": "https://github.com/rust-lang/rust/commit/2839805b9cb5414e4abb789e51adf452cea42315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2839805b9cb5414e4abb789e51adf452cea42315/comments", "author": {"login": "tautologico", "id": 62906, "node_id": "MDQ6VXNlcjYyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/62906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tautologico", "html_url": "https://github.com/tautologico", "followers_url": "https://api.github.com/users/tautologico/followers", "following_url": "https://api.github.com/users/tautologico/following{/other_user}", "gists_url": "https://api.github.com/users/tautologico/gists{/gist_id}", "starred_url": "https://api.github.com/users/tautologico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tautologico/subscriptions", "organizations_url": "https://api.github.com/users/tautologico/orgs", "repos_url": "https://api.github.com/users/tautologico/repos", "events_url": "https://api.github.com/users/tautologico/events{/privacy}", "received_events_url": "https://api.github.com/users/tautologico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tautologico", "id": 62906, "node_id": "MDQ6VXNlcjYyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/62906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tautologico", "html_url": "https://github.com/tautologico", "followers_url": "https://api.github.com/users/tautologico/followers", "following_url": "https://api.github.com/users/tautologico/following{/other_user}", "gists_url": "https://api.github.com/users/tautologico/gists{/gist_id}", "starred_url": "https://api.github.com/users/tautologico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tautologico/subscriptions", "organizations_url": "https://api.github.com/users/tautologico/orgs", "repos_url": "https://api.github.com/users/tautologico/repos", "events_url": "https://api.github.com/users/tautologico/events{/privacy}", "received_events_url": "https://api.github.com/users/tautologico/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4197aeed670acd855c21c0b66c87eed0919c219", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4197aeed670acd855c21c0b66c87eed0919c219", "html_url": "https://github.com/rust-lang/rust/commit/b4197aeed670acd855c21c0b66c87eed0919c219"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "f5979b9b6bf9fb2472878b492553b302f6436c3f", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2839805b9cb5414e4abb789e51adf452cea42315/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2839805b9cb5414e4abb789e51adf452cea42315/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=2839805b9cb5414e4abb789e51adf452cea42315", "patch": "@@ -115,8 +115,8 @@ pub trait Iterator<A> {\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().chain(b.iter());\n-    /// assert_eq!(it.next().get(), &0);\n-    /// assert_eq!(it.next().get(), &1);\n+    /// assert_eq!(it.next().unwrap(), &0);\n+    /// assert_eq!(it.next().unwrap(), &1);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -135,7 +135,7 @@ pub trait Iterator<A> {\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().zip(b.iter());\n-    /// assert_eq!(it.next().get(), (&0, &1));\n+    /// assert_eq!(it.next().unwrap(), (&0, &1));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -151,8 +151,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().map(|&x| 2 * x);\n-    /// assert_eq!(it.next().get(), 2);\n-    /// assert_eq!(it.next().get(), 4);\n+    /// assert_eq!(it.next().unwrap(), 2);\n+    /// assert_eq!(it.next().unwrap(), 4);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -169,7 +169,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter(|&x| *x > 1);\n-    /// assert_eq!(it.next().get(), &2);\n+    /// assert_eq!(it.next().unwrap(), &2);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -186,7 +186,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter_map(|&x| if x > 1 {Some(2 * x)} else {None});\n-    /// assert_eq!(it.next().get(), 4);\n+    /// assert_eq!(it.next().unwrap(), 4);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -202,8 +202,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [100, 200];\n     /// let mut it = a.iter().enumerate();\n-    /// assert_eq!(it.next().get(), (0, &100));\n-    /// assert_eq!(it.next().get(), (1, &200));\n+    /// assert_eq!(it.next().unwrap(), (0, &100));\n+    /// assert_eq!(it.next().unwrap(), (1, &200));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -243,9 +243,9 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().skip_while(|&a| *a < 3);\n-    /// assert_eq!(it.next().get(), &3);\n-    /// assert_eq!(it.next().get(), &2);\n-    /// assert_eq!(it.next().get(), &1);\n+    /// assert_eq!(it.next().unwrap(), &3);\n+    /// assert_eq!(it.next().unwrap(), &2);\n+    /// assert_eq!(it.next().unwrap(), &1);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -262,8 +262,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().take_while(|&a| *a < 3);\n-    /// assert_eq!(it.next().get(), &1);\n-    /// assert_eq!(it.next().get(), &2);\n+    /// assert_eq!(it.next().unwrap(), &1);\n+    /// assert_eq!(it.next().unwrap(), &2);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -279,8 +279,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().skip(3);\n-    /// assert_eq!(it.next().get(), &4);\n-    /// assert_eq!(it.next().get(), &5);\n+    /// assert_eq!(it.next().unwrap(), &4);\n+    /// assert_eq!(it.next().unwrap(), &5);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -296,9 +296,9 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().take(3);\n-    /// assert_eq!(it.next().get(), &1);\n-    /// assert_eq!(it.next().get(), &2);\n-    /// assert_eq!(it.next().get(), &3);\n+    /// assert_eq!(it.next().unwrap(), &1);\n+    /// assert_eq!(it.next().unwrap(), &2);\n+    /// assert_eq!(it.next().unwrap(), &3);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -319,11 +319,11 @@ pub trait Iterator<A> {\n     ///   *fac = *fac * x;\n     ///   Some(*fac)\n     /// });\n-    /// assert_eq!(it.next().get(), 1);\n-    /// assert_eq!(it.next().get(), 2);\n-    /// assert_eq!(it.next().get(), 6);\n-    /// assert_eq!(it.next().get(), 24);\n-    /// assert_eq!(it.next().get(), 120);\n+    /// assert_eq!(it.next().unwrap(), 1);\n+    /// assert_eq!(it.next().unwrap(), 2);\n+    /// assert_eq!(it.next().unwrap(), 6);\n+    /// assert_eq!(it.next().unwrap(), 24);\n+    /// assert_eq!(it.next().unwrap(), 120);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -485,7 +485,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.nth(2).get() == &3);\n+    /// assert!(it.nth(2).unwrap() == &3);\n     /// assert!(it.nth(2) == None);\n     /// ```\n     #[inline]\n@@ -506,7 +506,7 @@ pub trait Iterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().last().get() == &5);\n+    /// assert!(a.iter().last().unwrap() == &5);\n     /// ```\n     #[inline]\n     fn last(&mut self) -> Option<A> {\n@@ -865,7 +865,7 @@ pub trait OrdIterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().max().get() == &5);\n+    /// assert!(a.iter().max().unwrap() == &5);\n     /// ```\n     fn max(&mut self) -> Option<A>;\n \n@@ -875,7 +875,7 @@ pub trait OrdIterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().min().get() == &1);\n+    /// assert!(a.iter().min().unwrap() == &1);\n     /// ```\n     fn min(&mut self) -> Option<A>;\n }"}]}