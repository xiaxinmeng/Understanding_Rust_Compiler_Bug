{"sha": "c5382adc65119d55ac5045049d6cff095f6d111f", "node_id": "C_kwDOAAsO6NoAKGM1MzgyYWRjNjUxMTlkNTVhYzUwNDUwNDlkNmNmZjA5NWY2ZDExMWY", "commit": {"author": {"name": "WANG Rui", "email": "wangrui@loongson.cn", "date": "2023-05-08T03:07:56Z"}, "committer": {"name": "WANG Rui", "email": "wangrui@loongson.cn", "date": "2023-05-08T03:08:09Z"}, "message": "Simplify match statement since variable arch that is predictable", "tree": {"sha": "54bbd9f99b2ee9cab57b471800cc154fe9185902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54bbd9f99b2ee9cab57b471800cc154fe9185902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5382adc65119d55ac5045049d6cff095f6d111f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5382adc65119d55ac5045049d6cff095f6d111f", "html_url": "https://github.com/rust-lang/rust/commit/c5382adc65119d55ac5045049d6cff095f6d111f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5382adc65119d55ac5045049d6cff095f6d111f/comments", "author": {"login": "heiher", "id": 1407733, "node_id": "MDQ6VXNlcjE0MDc3MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1407733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heiher", "html_url": "https://github.com/heiher", "followers_url": "https://api.github.com/users/heiher/followers", "following_url": "https://api.github.com/users/heiher/following{/other_user}", "gists_url": "https://api.github.com/users/heiher/gists{/gist_id}", "starred_url": "https://api.github.com/users/heiher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heiher/subscriptions", "organizations_url": "https://api.github.com/users/heiher/orgs", "repos_url": "https://api.github.com/users/heiher/repos", "events_url": "https://api.github.com/users/heiher/events{/privacy}", "received_events_url": "https://api.github.com/users/heiher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "heiher", "id": 1407733, "node_id": "MDQ6VXNlcjE0MDc3MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1407733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heiher", "html_url": "https://github.com/heiher", "followers_url": "https://api.github.com/users/heiher/followers", "following_url": "https://api.github.com/users/heiher/following{/other_user}", "gists_url": "https://api.github.com/users/heiher/gists{/gist_id}", "starred_url": "https://api.github.com/users/heiher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heiher/subscriptions", "organizations_url": "https://api.github.com/users/heiher/orgs", "repos_url": "https://api.github.com/users/heiher/repos", "events_url": "https://api.github.com/users/heiher/events{/privacy}", "received_events_url": "https://api.github.com/users/heiher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad78cb02c62af59e750082c538968430d9c0cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad78cb02c62af59e750082c538968430d9c0cdd", "html_url": "https://github.com/rust-lang/rust/commit/8ad78cb02c62af59e750082c538968430d9c0cdd"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "9d1a4f3eeeafa4961a80424848a5c093c72386de", "filename": "compiler/rustc_target/src/asm/loongarch.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5382adc65119d55ac5045049d6cff095f6d111f/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5382adc65119d55ac5045049d6cff095f6d111f/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs?ref=c5382adc65119d55ac5045049d6cff095f6d111f", "patch": "@@ -33,12 +33,11 @@ impl LoongArchInlineAsmRegClass {\n \n     pub fn supported_types(\n         self,\n-        arch: InlineAsmArch,\n+        _arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n-        match (self, arch) {\n-            (Self::reg, InlineAsmArch::LoongArch64) => types! { _: I8, I16, I32, I64, F32, F64; },\n-            (Self::reg, _) => types! { _: I8, I16, I32, F32; },\n-            (Self::freg, _) => types! { _: F32, F64; },\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n+            Self::freg => types! { _: F32, F64; },\n         }\n     }\n }"}]}