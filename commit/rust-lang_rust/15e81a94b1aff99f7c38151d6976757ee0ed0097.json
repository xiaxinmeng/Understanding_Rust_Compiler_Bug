{"sha": "15e81a94b1aff99f7c38151d6976757ee0ed0097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTgxYTk0YjFhZmY5OWY3YzM4MTUxZDY5NzY3NTdlZTBlZDAwOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T20:35:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T20:35:34Z"}, "message": "Auto merge of #1845 - Smittyvb:fix-after-mir-alloc-oom, r=RalfJung\n\nMake work with latest rustc\n\nCc https://github.com/rust-lang/rust/issues/86863, which was caused by PR https://github.com/rust-lang/rust/pull/86255.", "tree": {"sha": "9830ed102ca4d2bfa746582e57734f17e1f6e5f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9830ed102ca4d2bfa746582e57734f17e1f6e5f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e81a94b1aff99f7c38151d6976757ee0ed0097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e81a94b1aff99f7c38151d6976757ee0ed0097", "html_url": "https://github.com/rust-lang/rust/commit/15e81a94b1aff99f7c38151d6976757ee0ed0097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e81a94b1aff99f7c38151d6976757ee0ed0097/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a18683d09f74ead9438aa7fdd323b18821f7709", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a18683d09f74ead9438aa7fdd323b18821f7709", "html_url": "https://github.com/rust-lang/rust/commit/6a18683d09f74ead9438aa7fdd323b18821f7709"}, {"sha": "d19376985d84e54e452c8b26548d0f239dce9cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19376985d84e54e452c8b26548d0f239dce9cc0", "html_url": "https://github.com/rust-lang/rust/commit/d19376985d84e54e452c8b26548d0f239dce9cc0"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "23819ebc24e42c243183757d4394435ce7e17360", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -1 +1 @@\n-46ae6ee65df19c6a3fb683499c1203e749975e60\n+39e20f1ae5f13451eb35247808d6a2527cb7d060"}, {"sha": "f728248c3a723d649c4bd186d788b3e7186ead61", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -169,15 +169,16 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             // Make space for `0` terminator.\n             let size = u64::try_from(arg.len()).unwrap().checked_add(1).unwrap();\n             let arg_type = tcx.mk_array(tcx.types.u8, size);\n-            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into());\n+            let arg_place =\n+                ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into())?;\n             ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n             argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout = ecx.layout_of(\n             tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), u64::try_from(argvs.len()).unwrap()),\n         )?;\n-        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into());\n+        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into())?;\n         for (idx, arg) in argvs.into_iter().enumerate() {\n             let place = ecx.mplace_field(&argvs_place, idx)?;\n             ecx.write_scalar(arg, &place.into())?;\n@@ -188,14 +189,14 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n             let argc_place =\n-                ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into());\n+                ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into())?;\n             ecx.write_scalar(argc, &argc_place.into())?;\n             ecx.machine.argc = Some(argc_place.ptr);\n \n             let argv_place = ecx.allocate(\n                 ecx.layout_of(tcx.mk_imm_ptr(tcx.types.unit))?,\n                 MiriMemoryKind::Machine.into(),\n-            );\n+            )?;\n             ecx.write_scalar(argv, &argv_place.into())?;\n             ecx.machine.argv = Some(argv_place.ptr);\n         }\n@@ -214,7 +215,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, u64::try_from(cmd_utf16.len()).unwrap());\n-            let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into());\n+            let cmd_place =\n+                ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into())?;\n             ecx.machine.cmd_line = Some(cmd_place.ptr);\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n             for (idx, &c) in cmd_utf16.iter().enumerate() {\n@@ -226,7 +228,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     };\n \n     // Return place (in static memory so that it does not count as leak).\n-    let ret_place = ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into());\n+    let ret_place = ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into())?;\n     // Call start function.\n     ecx.call_function(\n         start_instance,"}, {"sha": "a6e66c3dbd38ed193bec937c0ca3740775f7ca62", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -440,7 +440,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             // Allocate new place, set initial value to 0.\n             let errno_layout = this.machine.layouts.u32;\n-            let errno_place = this.allocate(errno_layout, MiriMemoryKind::Machine.into());\n+            let errno_place = this.allocate(errno_layout, MiriMemoryKind::Machine.into())?;\n             this.write_scalar(Scalar::from_u32(0), &errno_place.into())?;\n             this.active_thread_mut().last_error = Some(errno_place);\n             Ok(errno_place)"}, {"sha": "999e21796d3049f0d2b44012fca2a7932a2f3655", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -199,7 +199,7 @@ impl MemoryExtra {\n                 // \"__cxa_thread_atexit_impl\"\n                 // This should be all-zero, pointer-sized.\n                 let layout = this.machine.layouts.usize;\n-                let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into());\n+                let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n                 this.write_scalar(Scalar::from_machine_usize(0, this), &place.into())?;\n                 Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n                 // \"environ\"\n@@ -213,7 +213,7 @@ impl MemoryExtra {\n                 // \"_tls_used\"\n                 // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n                 let layout = this.machine.layouts.u8;\n-                let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into());\n+                let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n                 this.write_scalar(Scalar::from_u8(0), &place.into())?;\n                 Self::add_extern_static(this, \"_tls_used\", place.ptr);\n             }\n@@ -377,6 +377,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     const GLOBAL_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Global);\n \n+    const PANIC_ON_ALLOC_FAIL: bool = false;\n+\n     #[inline(always)]\n     fn enforce_alignment(memory_extra: &MemoryExtra) -> bool {\n         memory_extra.check_alignment != AlignmentCheck::None"}, {"sha": "ec29fef6368fb94a402fe519fa3cc6daaddc9b79", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -57,7 +57,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let array_ty = tcx.mk_array(ptr_ty, ptrs.len().try_into().unwrap());\n \n         // Write pointers into array\n-        let alloc = this.allocate(this.layout_of(array_ty).unwrap(), MiriMemoryKind::Rust.into());\n+        let alloc =\n+            this.allocate(this.layout_of(array_ty).unwrap(), MiriMemoryKind::Rust.into())?;\n         for (i, ptr) in ptrs.into_iter().enumerate() {\n             let place = this.mplace_index(&alloc, i as u64)?;\n             this.write_immediate_to_mplace(ptr.into(), &place)?;"}, {"sha": "d99ffb31b5cf5ee8ba68ab5879e7af91b7c15d30", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -88,7 +88,7 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into()))\n+    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n }\n \n fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n@@ -99,7 +99,7 @@ fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into()))\n+    ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n }\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -179,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // Allocate environment block & Store environment variables to environment block.\n         // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n-        let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::Env.into());\n+        let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::Env.into())?;\n         // If the function succeeds, the return value is a pointer to the environment block of the current process.\n         Ok(envblock_ptr.into())\n     }\n@@ -442,7 +442,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // No `environ` allocated yet, let's do that.\n             // This is memory backing an extern static, hence `ExternStatic`, not `Env`.\n             let layout = this.machine.layouts.usize;\n-            let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into());\n+            let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n             this.machine.env_vars.environ = Some(place);\n         }\n \n@@ -455,7 +455,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = this.tcx;\n         let vars_layout =\n             this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n-        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Env.into());\n+        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Env.into())?;\n         for (idx, var) in vars.into_iter().enumerate() {\n             let place = this.mplace_field(&vars_place, idx)?;\n             this.write_scalar(var, &place.into())?;"}, {"sha": "5d46f3c05c3396f791053e3e0b5fc96af9e6417f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -67,18 +67,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Align::from_bytes(prev_power_of_two(size)).unwrap()\n     }\n \n-    fn malloc(&mut self, size: u64, zero_init: bool, kind: MiriMemoryKind) -> Scalar<Tag> {\n+    fn malloc(\n+        &mut self,\n+        size: u64,\n+        zero_init: bool,\n+        kind: MiriMemoryKind,\n+    ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n         if size == 0 {\n-            Scalar::null_ptr(this)\n+            Ok(Scalar::null_ptr(this))\n         } else {\n             let align = this.min_align(size, kind);\n-            let ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into());\n+            let ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into())?;\n             if zero_init {\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize)).unwrap();\n             }\n-            Scalar::Ptr(ptr)\n+            Ok(Scalar::Ptr(ptr))\n         }\n     }\n \n@@ -104,7 +109,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(Scalar::null_ptr(this))\n             } else {\n                 let new_ptr =\n-                    this.memory.allocate(Size::from_bytes(new_size), new_align, kind.into());\n+                    this.memory.allocate(Size::from_bytes(new_size), new_align, kind.into())?;\n                 Ok(Scalar::Ptr(new_ptr))\n             }\n         } else {\n@@ -331,7 +336,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"malloc\" => {\n                 let &[ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n-                let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C);\n+                let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C)?;\n                 this.write_scalar(res, dest)?;\n             }\n             \"calloc\" => {\n@@ -340,7 +345,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let len = this.read_scalar(len)?.to_machine_usize(this)?;\n                 let size =\n                     items.checked_mul(len).ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n-                let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C);\n+                let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C)?;\n                 this.write_scalar(res, dest)?;\n             }\n             \"free\" => {\n@@ -368,7 +373,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Size::from_bytes(size),\n                     Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n-                );\n+                )?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n@@ -380,7 +385,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Size::from_bytes(size),\n                     Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n-                );\n+                )?;\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n                 this.write_scalar(ptr, dest)?;"}, {"sha": "ea99921c0b67648b3628b757547c61422cf8bdc1", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -161,29 +161,29 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         os_str: &OsStr,\n         memkind: MemoryKind<MiriMemoryKind>,\n-    ) -> Pointer<Tag> {\n+    ) -> InterpResult<'tcx, Pointer<Tag>> {\n         let size = u64::try_from(os_str.len()).unwrap().checked_add(1).unwrap(); // Make space for `0` terminator.\n         let this = self.eval_context_mut();\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);\n-        let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind);\n+        let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n         assert!(self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap().0);\n-        arg_place.ptr.assert_ptr()\n+        Ok(arg_place.ptr.assert_ptr())\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of `u16`.\n     fn alloc_os_str_as_wide_str(\n         &mut self,\n         os_str: &OsStr,\n         memkind: MemoryKind<MiriMemoryKind>,\n-    ) -> Pointer<Tag> {\n+    ) -> InterpResult<'tcx, Pointer<Tag>> {\n         let size = u64::try_from(os_str.len()).unwrap().checked_add(1).unwrap(); // Make space for `0x0000` terminator.\n         let this = self.eval_context_mut();\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n-        let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind);\n+        let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n         assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n-        arg_place.ptr.assert_ptr()\n+        Ok(arg_place.ptr.assert_ptr())\n     }\n \n     /// Read a null-terminated sequence of bytes, and perform path separator conversion if needed."}, {"sha": "1cfc3f0a4e79f4803d1c566da8039a5a8cb2abc4", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -159,7 +159,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Size::from_bytes(size),\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::C.into(),\n-                    );\n+                    )?;\n                     this.write_scalar(ptr, &ret.into())?;\n                 }\n                 this.write_null(dest)?;"}, {"sha": "ce1c817cf3ba003fc479f5f2ee15ca730965639a", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // pthread_join below) because the Rust standard library does not use\n         // it.\n         let ret_place =\n-            this.allocate(this.layout_of(this.tcx.types.usize)?, MiriMemoryKind::Machine.into());\n+            this.allocate(this.layout_of(this.tcx.types.usize)?, MiriMemoryKind::Machine.into())?;\n \n         this.call_function(\n             instance,"}, {"sha": "b5324576273c9204cb4acfa0747434c0228d0779", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e81a94b1aff99f7c38151d6976757ee0ed0097/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=15e81a94b1aff99f7c38151d6976757ee0ed0097", "patch": "@@ -115,7 +115,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n-                let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap);\n+                let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap)?;\n                 this.write_scalar(res, dest)?;\n             }\n             \"HeapFree\" => {"}]}