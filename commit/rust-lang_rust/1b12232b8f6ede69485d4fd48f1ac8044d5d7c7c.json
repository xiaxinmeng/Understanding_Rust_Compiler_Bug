{"sha": "1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTIyMzJiOGY2ZWRlNjk0ODVkNGZkNDhmMWFjODA0NGQ1ZDdjN2M=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2020-01-31T14:19:22Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-02-10T19:44:12Z"}, "message": "Fix SGX RWLock representation for UnsafeCell niche fix", "tree": {"sha": "a9864cbda5c5c7fdf7917744d74e1c94fe475bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9864cbda5c5c7fdf7917744d74e1c94fe475bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "html_url": "https://github.com/rust-lang/rust/commit/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c/comments", "author": null, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e047229efc892492f6561de4a894ae9710d8533", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e047229efc892492f6561de4a894ae9710d8533", "html_url": "https://github.com/rust-lang/rust/commit/3e047229efc892492f6561de4a894ae9710d8533"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "5bb5436bec59d3faafa838e5d3fb32b232a17292", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "patch": "@@ -48,7 +48,7 @@ RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n # We pass the commit id of the port of LLVM's libunwind to the build script.\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n-RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"53b586346f2c7870e20b170decdc30729d97c42b\"\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"5125c169b30837208a842f85f7ae44a83533bd0e\"\n \n COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n RUN /tmp/build-wasi-toolchain.sh"}, {"sha": "722b4f5e0ba387fcc98b584025d8ee59aa6629bf", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "patch": "@@ -10,10 +10,10 @@ pub struct RWLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-// Below is to check at compile time, that RWLock has size of 128 bytes.\n+// Check at compile time that RWLock size matches C definition (see test_c_rwlock_initializer below)\n #[allow(dead_code)]\n unsafe fn rw_lock_size_assert(r: RWLock) {\n-    mem::transmute::<RWLock, [u8; 128]>(r);\n+    mem::transmute::<RWLock, [u8; 144]>(r);\n }\n \n impl RWLock {\n@@ -210,15 +210,17 @@ mod tests {\n     // be changed too.\n     #[test]\n     fn test_c_rwlock_initializer() {\n+        #[rustfmt::skip]\n         const RWLOCK_INIT: &[u8] = &[\n-            0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x00 */ 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x10 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x20 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x30 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x40 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x50 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x60 */ 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x70 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x80 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n         ];\n \n         #[inline(never)]\n@@ -239,7 +241,7 @@ mod tests {\n             zero_stack();\n             let mut init = MaybeUninit::<RWLock>::zeroed();\n             rwlock_new(&mut init);\n-            assert_eq!(mem::transmute::<_, [u8; 128]>(init.assume_init()).as_slice(), RWLOCK_INIT)\n+            assert_eq!(mem::transmute::<_, [u8; 144]>(init.assume_init()).as_slice(), RWLOCK_INIT)\n         };\n     }\n }"}]}