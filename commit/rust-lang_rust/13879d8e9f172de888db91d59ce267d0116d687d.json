{"sha": "13879d8e9f172de888db91d59ce267d0116d687d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODc5ZDhlOWYxNzJkZTg4OGRiOTFkNTljZTI2N2QwMTE2ZDY4N2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T20:46:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T20:48:27Z"}, "message": "libstd: Fix tests. rs=bustage", "tree": {"sha": "1a126bc38de394418f96decd468cb3271aa106f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a126bc38de394418f96decd468cb3271aa106f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13879d8e9f172de888db91d59ce267d0116d687d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13879d8e9f172de888db91d59ce267d0116d687d", "html_url": "https://github.com/rust-lang/rust/commit/13879d8e9f172de888db91d59ce267d0116d687d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13879d8e9f172de888db91d59ce267d0116d687d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd095f8734509e92efde0dffd9d36e7eba0a461f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd095f8734509e92efde0dffd9d36e7eba0a461f", "html_url": "https://github.com/rust-lang/rust/commit/fd095f8734509e92efde0dffd9d36e7eba0a461f"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "b38f756a2b57d3ba639a1de3fbb3bd8b9b99600c", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -470,6 +470,8 @@ impl<T: Const Owned> &RWReadMode<T> {\n mod tests {\n     #[legacy_exports];\n \n+    use arc;\n+\n     use core::oldcomm::*;\n     use core::option::{Some, None};\n     use core::option;"}, {"sha": "38ebe67898d3aa028ae8d0e74b1f5acc564864c5", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -581,6 +581,7 @@ mod tests {\n     use bitv;\n \n     use core::uint;\n+    use core::vec;\n \n     #[test]\n     fn test_to_str() {"}, {"sha": "8f239b2a130ff965f56e0d47d0ef4a384ecaa5ed", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -695,6 +695,7 @@ mod test {\n     use core::int;\n     use core::io::BytesReader;\n     use core::io;\n+    use core::result;\n     use core::sys;\n     use core::task;\n \n@@ -818,6 +819,7 @@ mod test {\n         use net::ip;\n         use cell::Cell;\n         use net::tcp::TcpSocket;\n+        use uv;\n \n         // Indicate to the client task that the server is listening\n         let (begin_connect_port, begin_connect_chan) = pipes::stream();\n@@ -916,6 +918,14 @@ mod test {\n     // Tests that the different backends behave the same when the\n     // binary streaming protocol is broken\n     mod broken_protocol {\n+        use flatpipes::pod;\n+        use flatpipes::util::BufReader;\n+\n+        use core::io;\n+        use core::pipes;\n+        use core::sys;\n+        use core::task;\n+\n         type PortLoader<P: BytePort> =\n             ~fn(~[u8]) -> FlatPort<int, PodUnflattener<int>, P>;\n "}, {"sha": "7cbd42f217d2ba27b3d35d13ccb2cce8d752b1a6", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -145,6 +145,9 @@ pub fn spawn<A:Owned>(blk: fn~() -> A) -> Future<A> {\n \n #[allow(non_implicitly_copyable_typarams)]\n pub mod test {\n+    use core::pipes::oneshot;\n+    use core::task;\n+\n     #[test]\n     pub fn test_from_value() {\n         let f = from_value(~\"snail\");"}, {"sha": "96bd6367e569e91a9759e188a074513c84056810", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -350,6 +350,13 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n \n #[cfg(test)]\n mod test {\n+    use net_ip::v4;\n+    use net_ip::v6;\n+    use uv;\n+\n+    use core::result;\n+    use core::vec;\n+\n     #[test]\n     fn test_ip_ipv4_parse_and_format_ip() {\n         let localhost_str = ~\"127.0.0.1\";"}, {"sha": "cfe2543fe61927281204bb021b591f03ebe7e53f", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -735,6 +735,11 @@ impl Url: to_bytes::IterBytes {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n+    use net_url::UserInfo;\n+\n+    use core::result;\n+    use core::str;\n+\n     #[test]\n     fn test_split_char_first() {\n         let (u,v) = split_char_first(~\"hello, sweet world\", ',');"}, {"sha": "1513e621fcbb352649b4725783e5c94a293c2c53", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -1264,6 +1264,7 @@ mod tests {\n \n     use core::option;\n     use core::str;\n+    use core::uint;\n     use core::vec;\n \n     //Utility function, used for sanity check"}, {"sha": "505b2526741262c400a80cc69cd74d65458eae62", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -714,6 +714,9 @@ fn copy_vec<T: Copy>(dest: &[mut T], s1: uint,\n #[cfg(test)]\n mod test_qsort3 {\n     #[legacy_exports];\n+\n+    use core::vec;\n+\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         quick_sort3::<int>(v1);\n@@ -754,6 +757,10 @@ mod test_qsort3 {\n #[cfg(test)]\n mod test_qsort {\n     #[legacy_exports];\n+\n+    use core::int;\n+    use core::vec;\n+\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         pure fn leual(a: &int, b: &int) -> bool { *a <= *b }\n@@ -815,6 +822,8 @@ mod test_qsort {\n mod tests {\n     #[legacy_exports];\n \n+    use core::vec;\n+\n     fn check_sort(v1: &[int], v2: &[int]) {\n         let len = vec::len::<int>(v1);\n         pub pure fn le(a: &int, b: &int) -> bool { *a <= *b }\n@@ -878,6 +887,9 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n+    use core::rand;\n+    use core::vec;\n+\n     struct CVal {\n         val: float,\n     }\n@@ -970,6 +982,7 @@ mod test_tim_sort {\n mod big_tests {\n     use core::rand;\n     use core::task;\n+    use core::uint;\n     use core::vec;\n \n     #[test]"}, {"sha": "d957a7ee2abbf585a4869fe65f863ea0310a1e1d", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -709,10 +709,13 @@ impl &RWlockReadMode {\n mod tests {\n     #[legacy_exports];\n \n+    use core::cast;\n+    use core::option;\n     use core::pipes;\n     use core::ptr;\n     use core::result;\n     use core::task;\n+    use core::vec;\n \n     /************************************************************************\n      * Semaphore tests"}, {"sha": "68bf2612f9a480ab901534d1923f214413578b54", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -11,6 +11,7 @@\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n+use core::io;\n use core::pipes::{Chan, Port};\n use core::pipes;\n use core::task::{SchedMode, SingleThreaded};"}, {"sha": "43ed58aa0c1255cbaae5214776333f5d89e72379", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -130,6 +130,7 @@ mod test {\n     use core::libc;\n     use core::oldcomm;\n     use core::ptr;\n+    use core::task;\n \n     extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n         let exit_ch_ptr = ll::get_data_for_uv_handle("}, {"sha": "7853f1cd9f79fa2e8130cc3715b2d15e76f78d30", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -178,8 +178,11 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n mod test {\n     use uv::ll;\n \n+    use core::iter;\n+    use core::libc;\n     use core::oldcomm;\n     use core::ptr;\n+    use core::task;\n \n     extern fn async_close_cb(handle: *ll::uv_async_t) unsafe {\n         log(debug, fmt!(\"async_close_cb handle %?\", handle));"}, {"sha": "46574ced2e59650a2bfdc39612ac74e756acea82", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13879d8e9f172de888db91d59ce267d0116d687d/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=13879d8e9f172de888db91d59ce267d0116d687d", "patch": "@@ -1040,6 +1040,13 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n pub mod test {\n+    use core::libc;\n+    use core::oldcomm;\n+    use core::ptr;\n+    use core::str;\n+    use core::sys;\n+    use core::task;\n+    use core::vec;\n \n     enum tcp_read_data {\n         tcp_read_eof,\n@@ -1562,7 +1569,8 @@ pub mod test {\n     // struct size tests\n     #[test]\n     fn test_uv_ll_struct_size_uv_tcp_t() {\n-        let foreign_handle_size = rustrt::rust_uv_helper_uv_tcp_t_size();\n+        let foreign_handle_size =\n+            ::uv_ll::rustrt::rust_uv_helper_uv_tcp_t_size();\n         let rust_handle_size = sys::size_of::<uv_tcp_t>();\n         let output = fmt!(\"uv_tcp_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1572,7 +1580,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_connect_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_connect_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_connect_t_size();\n         let rust_handle_size = sys::size_of::<uv_connect_t>();\n         let output = fmt!(\"uv_connect_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1582,7 +1590,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_buf_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_buf_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_buf_t_size();\n         let rust_handle_size = sys::size_of::<uv_buf_t>();\n         let output = fmt!(\"uv_buf_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1592,7 +1600,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_write_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_write_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_write_t_size();\n         let rust_handle_size = sys::size_of::<uv_write_t>();\n         let output = fmt!(\"uv_write_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1603,7 +1611,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_sockaddr_in_size();\n+            ::uv_ll::rustrt::rust_uv_helper_sockaddr_in_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in>();\n         let output = fmt!(\"sockaddr_in -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1613,7 +1621,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in6() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_sockaddr_in6_size();\n+            ::uv_ll::rustrt::rust_uv_helper_sockaddr_in6_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in6>();\n         let output = fmt!(\"sockaddr_in6 -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1628,7 +1636,7 @@ pub mod test {\n     #[ignore(reason = \"questionable size calculations\")]\n     fn test_uv_ll_struct_size_addr_in() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_addr_in_size();\n+            ::uv_ll::rustrt::rust_uv_helper_addr_in_size();\n         let rust_handle_size = sys::size_of::<addr_in>();\n         let output = fmt!(\"addr_in -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1640,7 +1648,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_async_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_async_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_async_t_size();\n         let rust_handle_size = sys::size_of::<uv_async_t>();\n         let output = fmt!(\"uv_async_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1651,7 +1659,7 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_timer_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_timer_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size();\n         let rust_handle_size = sys::size_of::<uv_timer_t>();\n         let output = fmt!(\"uv_timer_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1663,7 +1671,7 @@ pub mod test {\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_uv_getaddrinfo_t() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n+            ::uv_ll::rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n         let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n         let output = fmt!(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n@@ -1675,7 +1683,7 @@ pub mod test {\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_addrinfo() {\n         let foreign_handle_size =\n-            rustrt::rust_uv_helper_addrinfo_size();\n+            ::uv_ll::rustrt::rust_uv_helper_addrinfo_size();\n         let rust_handle_size = sys::size_of::<addrinfo>();\n         let output = fmt!(\"addrinfo -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);"}]}