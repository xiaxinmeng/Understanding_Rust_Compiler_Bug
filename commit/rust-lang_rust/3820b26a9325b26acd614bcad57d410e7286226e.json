{"sha": "3820b26a9325b26acd614bcad57d410e7286226e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MjBiMjZhOTMyNWIyNmFjZDYxNGJjYWQ1N2Q0MTBlNzI4NjIyNmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:19:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:19:24Z"}, "message": "Generate token for ints and floats", "tree": {"sha": "9b21f3abf3b331492862694c6393b85fa4930f81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b21f3abf3b331492862694c6393b85fa4930f81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3820b26a9325b26acd614bcad57d410e7286226e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3820b26a9325b26acd614bcad57d410e7286226e", "html_url": "https://github.com/rust-lang/rust/commit/3820b26a9325b26acd614bcad57d410e7286226e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3820b26a9325b26acd614bcad57d410e7286226e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c408c68a4a27e9a85ce85ec1342e3af58c1571f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c408c68a4a27e9a85ce85ec1342e3af58c1571f", "html_url": "https://github.com/rust-lang/rust/commit/2c408c68a4a27e9a85ce85ec1342e3af58c1571f"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "1b8449221d31abdf5078bd7e94ef0630f4b21a9b", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3820b26a9325b26acd614bcad57d410e7286226e/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3820b26a9325b26acd614bcad57d410e7286226e/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=3820b26a9325b26acd614bcad57d410e7286226e", "patch": "@@ -89,3 +89,45 @@ impl AstToken for RawString {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct IntNumber {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for IntNumber {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for IntNumber {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == INT_NUMBER }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatNumber {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for FloatNumber {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for FloatNumber {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}"}, {"sha": "87c934e66763d3efcb9d32a3f4a786df718e424d", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3820b26a9325b26acd614bcad57d410e7286226e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3820b26a9325b26acd614bcad57d410e7286226e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=3820b26a9325b26acd614bcad57d410e7286226e", "patch": "@@ -504,7 +504,11 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc::default();\n-    res.tokens = vec![\"Whitespace\".into(), \"Comment\".into(), \"String\".into(), \"RawString\".into()];\n+\n+    res.tokens = \"Whitespace Comment String RawString IntNumber FloatNumber\"\n+        .split_ascii_whitespace()\n+        .map(|it| it.to_string())\n+        .collect::<Vec<_>>();\n \n     let nodes = grammar.iter().collect::<Vec<_>>();\n "}]}