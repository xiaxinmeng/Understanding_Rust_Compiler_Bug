{"sha": "986549e9f565091ec4bb70cf456029a572da8046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjU0OWU5ZjU2NTA5MWVjNGJiNzBjZjQ1NjAyOWE1NzJkYTgwNDY=", "commit": {"author": {"name": "oliver-giersch", "email": "oliver.giersch@googlemail.com", "date": "2018-10-15T10:48:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-15T10:48:24Z"}, "message": "adds doc for `Builder::spawn_unchecked`", "tree": {"sha": "fd97bd16b80f6102e1a0b27771f93e55495df3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd97bd16b80f6102e1a0b27771f93e55495df3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986549e9f565091ec4bb70cf456029a572da8046", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxHB4CRBK7hj4Ov3rIwAAdHIIAGaT48UqHadYkme+MMLHmxm/\nfjrzZ+lUCuyBkU2h9izV9llCCp/cfQ+UGcP+yZNtb9iU3nmHEmpBt6IQBrf8lSO2\ndzdIxk47lrr/JkXY/0jCXox82Uas5zFnN1lvq979rPffDHiW5qqCqJXkcpuq0s3T\n9PWVrmzmP8NrSBX96d4aKWei7uC5gmmEvs/UHDmlUtN1TndjorFyHTiuXRiJFyS1\nJU7Hl7gfJwo6xu4k3aisXpMBF39fS65fIqZePzg0td2PGENWlTW+cJ74Ld+BJjX9\ndV1BLYXSaX2WqpSoI9j5EunBdIpc2rfHkg1jgFvE2sh2AhMhW5qtNhIbblFwRWE=\n=E/Hb\n-----END PGP SIGNATURE-----\n", "payload": "tree fd97bd16b80f6102e1a0b27771f93e55495df3bb\nparent bf9dc98655a9d42571815798992e2534af3296f8\nauthor oliver-giersch <oliver.giersch@googlemail.com> 1539600504 +0200\ncommitter GitHub <noreply@github.com> 1539600504 +0200\n\nadds doc for `Builder::spawn_unchecked`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986549e9f565091ec4bb70cf456029a572da8046", "html_url": "https://github.com/rust-lang/rust/commit/986549e9f565091ec4bb70cf456029a572da8046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986549e9f565091ec4bb70cf456029a572da8046/comments", "author": {"login": "oliver-giersch", "id": 19815381, "node_id": "MDQ6VXNlcjE5ODE1Mzgx", "avatar_url": "https://avatars.githubusercontent.com/u/19815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliver-giersch", "html_url": "https://github.com/oliver-giersch", "followers_url": "https://api.github.com/users/oliver-giersch/followers", "following_url": "https://api.github.com/users/oliver-giersch/following{/other_user}", "gists_url": "https://api.github.com/users/oliver-giersch/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliver-giersch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliver-giersch/subscriptions", "organizations_url": "https://api.github.com/users/oliver-giersch/orgs", "repos_url": "https://api.github.com/users/oliver-giersch/repos", "events_url": "https://api.github.com/users/oliver-giersch/events{/privacy}", "received_events_url": "https://api.github.com/users/oliver-giersch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9dc98655a9d42571815798992e2534af3296f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9dc98655a9d42571815798992e2534af3296f8", "html_url": "https://github.com/rust-lang/rust/commit/bf9dc98655a9d42571815798992e2534af3296f8"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "73251d40599e9aa2f0f886b5f2f1f190699ac8d6", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/986549e9f565091ec4bb70cf456029a572da8046/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986549e9f565091ec4bb70cf456029a572da8046/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=986549e9f565091ec4bb70cf456029a572da8046", "patch": "@@ -390,7 +390,66 @@ impl Builder {\n         unsafe { self.spawn_unchecked(f) }\n     }\n \n-    /// FIXME: Doc\n+    /// Spawns a new thread without any lifetime restrictions by taking ownership\n+    /// of the `Builder`, and returns an [`io::Result`] to its [`JoinHandle`].\n+    ///\n+    /// The spawned thread may outlive the caller (unless the caller thread\n+    /// is the main thread; the whole process is terminated when the main\n+    /// thread finishes). The join handle can be used to block on\n+    /// termination of the child thread, including recovering its panics.\n+    ///\n+    /// This method is identical to [`thread::Builder::spawn`][`Builder::spawn`],\n+    /// except for the relaxed lifetime bounds, which render it unsafe.\n+    /// For a more complete documentation see [`thread::spawn`][`spawn`].\n+    ///\n+    /// # Errors\n+    ///\n+    /// Unlike the [`spawn`] free function, this method yields an\n+    /// [`io::Result`] to capture any failure to create the thread at\n+    /// the OS level.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if a thread name was set and it contained null bytes.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller has to ensure that no references in the supplied thread closure\n+    /// or its return type can outlive the spawned thread's lifetime. This can be\n+    /// guaranteed in two ways:\n+    ///\n+    /// - ensure that [`join`][`JoinHandle::join`] is called before any referenced\n+    /// data is dropped\n+    /// - use only types with `'static` lifetime bounds, i.e. those with no or only\n+    /// `'static` references (both [`thread::Builder::spawn`][`Builder::spawn`]\n+    /// and [`thread::spawn`][`spawn`] enforce this property statically)\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let x = 1;\n+    /// let thread_x = &x;\n+    ///\n+    /// let handler = unsafe {\n+    ///     builder.spawn_unchecked(move || {\n+    ///         println!(\"x = {}\", *thread_x);\n+    ///     }).unwrap();\n+    /// }\n+    ///\n+    /// // caller has to ensure `join()` is called, otherwise\n+    /// // it is possible to access freed memory if `x` gets\n+    /// // dropped before the thread closure is executed!\n+    /// handler.join.unwrap();\n+    /// ```\n+    ///\n+    /// [`spawn`]: ../../std/thread/fn.spawn.html\n+    /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n+    /// [`io::Result`]: ../../std/io/type.Result.html\n+    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"0\")]\n     pub unsafe fn spawn_unchecked<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send, T: Send"}]}