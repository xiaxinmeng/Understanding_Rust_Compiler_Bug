{"sha": "374af4aea7878127ca52cbc271fb1237b4afe223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NGFmNGFlYTc4NzgxMjdjYTUyY2JjMjcxZmIxMjM3YjRhZmUyMjM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-08T02:30:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-09T00:24:39Z"}, "message": "save-analysis: API-ify paths", "tree": {"sha": "b938a9e372c032ea4d3789b5184b567c14c6bbc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b938a9e372c032ea4d3789b5184b567c14c6bbc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/374af4aea7878127ca52cbc271fb1237b4afe223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/374af4aea7878127ca52cbc271fb1237b4afe223", "html_url": "https://github.com/rust-lang/rust/commit/374af4aea7878127ca52cbc271fb1237b4afe223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/374af4aea7878127ca52cbc271fb1237b4afe223/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84cb4ad96994dd8a0dd0d8827834526b0184ca82", "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb4ad96994dd8a0dd0d8827834526b0184ca82", "html_url": "https://github.com/rust-lang/rust/commit/84cb4ad96994dd8a0dd0d8827834526b0184ca82"}], "stats": {"total": 233, "additions": 147, "deletions": 86}, "files": [{"sha": "23bab3fe5b76633f344b09e81c411800b3436b2e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 45, "deletions": 82, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=374af4aea7878127ca52cbc271fb1237b4afe223", "patch": "@@ -28,7 +28,7 @@\n //! DumpCsvVisitor walks the AST and processes it.\n \n \n-use super::{escape, generated_code, recorder, SaveContext, PathCollector};\n+use super::{escape, generated_code, recorder, SaveContext, PathCollector, Data};\n \n use session::Session;\n \n@@ -738,90 +738,51 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n     fn process_path(&mut self,\n                     id: NodeId,\n-                    span: Span,\n                     path: &ast::Path,\n                     ref_kind: Option<recorder::Row>) {\n-        if generated_code(span) {\n-            return\n+        if generated_code(path.span) {\n+            return;\n         }\n \n-        let def_map = self.tcx.def_map.borrow();\n-        if !def_map.contains_key(&id) {\n-            self.sess.span_bug(span,\n-                               &format!(\"def_map has no key for {} in visit_expr\", id));\n-        }\n-        let def = def_map.get(&id).unwrap().full_def();\n-        let sub_span = self.span.span_for_last_ident(span);\n-        match def {\n-            def::DefUpvar(..) |\n-            def::DefLocal(..) |\n-            def::DefStatic(..) |\n-            def::DefConst(..) |\n-            def::DefAssociatedConst(..) |\n-            def::DefVariant(..) => self.fmt.ref_str(ref_kind.unwrap_or(recorder::VarRef),\n-                                                    span,\n-                                                    sub_span,\n-                                                    def.def_id(),\n-                                                    self.cur_scope),\n-            def::DefStruct(def_id) => self.fmt.ref_str(recorder::TypeRef,\n-                                                       span,\n-                                                       sub_span,\n-                                                       def_id,\n-                                                       self.cur_scope),\n-            def::DefTy(def_id, _) => self.fmt.ref_str(recorder::TypeRef,\n-                                                      span,\n-                                                      sub_span,\n-                                                      def_id,\n-                                                      self.cur_scope),\n-            def::DefMethod(declid, provenence) => {\n-                let sub_span = self.span.sub_span_for_meth_name(span);\n-                let defid = if declid.krate == ast::LOCAL_CRATE {\n-                    let ti = self.tcx.impl_or_trait_item(declid);\n-                    match provenence {\n-                        def::FromTrait(def_id) => {\n-                            Some(self.tcx.trait_items(def_id)\n-                                    .iter()\n-                                    .find(|mr| {\n-                                        mr.name() == ti.name()\n-                                    })\n-                                    .unwrap()\n-                                    .def_id())\n-                        }\n-                        def::FromImpl(def_id) => {\n-                            let impl_items = self.tcx.impl_items.borrow();\n-                            Some(impl_items.get(&def_id)\n-                                           .unwrap()\n-                                           .iter()\n-                                           .find(|mr| {\n-                                                self.tcx.impl_or_trait_item(mr.def_id()).name()\n-                                                    == ti.name()\n-                                            })\n-                                           .unwrap()\n-                                           .def_id())\n-                        }\n-                    }\n-                } else {\n-                    None\n-                };\n-                self.fmt.meth_call_str(span,\n-                                       sub_span,\n-                                       defid,\n-                                       Some(declid),\n-                                       self.cur_scope);\n-            },\n-            def::DefFn(def_id, _) => {\n-                self.fmt.fn_call_str(span,\n-                                     sub_span,\n-                                     def_id,\n-                                     self.cur_scope)\n+        let path_data = self.save_ctxt.get_path_data(id, path);\n+        match path_data {\n+            Data::VariableRefData(ref vrd) => {\n+                self.fmt.ref_str(ref_kind.unwrap_or(recorder::VarRef),\n+                                                    path.span,\n+                                                    Some(vrd.span),\n+                                                    vrd.ref_id,\n+                                                    vrd.scope);\n+\n+            }\n+            Data::TypeRefData(ref trd) => {\n+                self.fmt.ref_str(recorder::TypeRef,\n+                                 path.span,\n+                                 Some(trd.span),\n+                                 trd.ref_id,\n+                                 trd.scope);\n+            }\n+            Data::MethodCallData(ref mcd) => {\n+                self.fmt.meth_call_str(path.span,\n+                                       Some(mcd.span),\n+                                       mcd.ref_id,\n+                                       mcd.decl_id,\n+                                       mcd.scope);\n+            }\n+            Data::FunctionCallData(fcd) => {\n+                self.fmt.fn_call_str(path.span,\n+                                     Some(fcd.span),\n+                                     fcd.ref_id,\n+                                     fcd.scope);\n+            }\n+            _ => {\n+                self.sess.span_bug(path.span,\n+                                   &format!(\"Unexpected data: {:?}\", path_data));\n             }\n-            _ => self.sess.span_bug(span,\n-                                    &format!(\"Unexpected def kind while looking \\\n-                                              up path in `{}`: `{:?}`\",\n-                                             self.span.snippet(span),\n-                                             def)),\n         }\n-        // modules or types in the path prefix\n+\n+        // Modules or types in the path prefix.\n+        let def_map = self.tcx.def_map.borrow();\n+        let def = def_map.get(&id).unwrap().full_def();\n         match def {\n             def::DefMethod(did, _) => {\n                 let ti = self.tcx.impl_or_trait_item(did);\n@@ -1187,7 +1148,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 visit::walk_expr(self, ex);\n             }\n             ast::ExprPath(_, ref path) => {\n-                self.process_path(ex.id, path.span, path, None);\n+                self.process_path(ex.id, path, None);\n                 visit::walk_expr(self, ex);\n             }\n             ast::ExprStruct(ref path, ref fields, ref base) =>\n@@ -1283,6 +1244,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n         // This is to get around borrow checking, because we need mut self to call process_path.\n         let mut paths_to_process = vec![];\n+\n         // process collected paths\n         for &(id, ref p, immut, ref_kind) in &collector.collected_paths {\n             let def_map = self.tcx.def_map.borrow();\n@@ -1319,11 +1281,12 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                             def)\n             }\n         }\n+\n         for &(id, ref path, ref_kind) in &paths_to_process {\n-            self.process_path(id, path.span, path, ref_kind);\n+            self.process_path(id, path, ref_kind);\n         }\n         visit::walk_expr_opt(self, &arm.guard);\n-        self.visit_expr(&*arm.body);\n+        self.visit_expr(&arm.body);\n     }\n \n     fn visit_stmt(&mut self, s: &ast::Stmt) {"}, {"sha": "239e5966a710444c3c80344894261a15b7a4cc5a", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 101, "deletions": 3, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=374af4aea7878127ca52cbc271fb1237b4afe223", "patch": "@@ -61,6 +61,8 @@ pub enum Data {\n     VariableRefData(VariableRefData),\n     /// Data for a reference to a type or trait.\n     TypeRefData(TypeRefData),\n+    /// Data about a function call.\n+    FunctionCallData(FunctionCallData),\n     /// Data about a method call.\n     MethodCallData(MethodCallData),\n }\n@@ -122,7 +124,7 @@ pub struct ImplData {\n }\n \n /// Data for the use of some item (e.g., the use of a local variable, which\n-/// will refere to that variables declaration (by ref_id)).\n+/// will refer to that variables declaration (by ref_id)).\n #[derive(Debug)]\n pub struct VariableRefData {\n     pub name: String,\n@@ -139,6 +141,14 @@ pub struct TypeRefData {\n     pub ref_id: DefId,\n }\n \n+/// Data about a function call.\n+#[derive(Debug)]\n+pub struct FunctionCallData {\n+    pub span: Span,\n+    pub scope: NodeId,\n+    pub ref_id: DefId,\n+}\n+\n /// Data about a method call.\n #[derive(Debug)]\n pub struct MethodCallData {\n@@ -392,20 +402,108 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ty::TraitContainer(_) => (None, Some(method_id))\n                 };\n                 let sub_span = self.span_utils.sub_span_for_meth_name(expr.span);\n+                let parent = self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0);\n                 Some(Data::MethodCallData(MethodCallData {\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n+                    scope: parent,\n                     ref_id: def_id,\n-                    decl_id: decl_id,                    \n+                    decl_id: decl_id,\n                 }))\n             }\n+            ast::ExprPath(_, ref path) => {\n+                Some(self.get_path_data(expr.id, path))\n+            }\n             _ => {\n                 // FIXME\n                 unimplemented!();\n             }\n         }\n     }\n \n+    pub fn get_path_data(&self,\n+                         id: NodeId,\n+                         path: &ast::Path)\n+                         -> Data {\n+        let def_map = self.tcx.def_map.borrow();\n+        if !def_map.contains_key(&id) {\n+            self.tcx.sess.span_bug(path.span,\n+                                   &format!(\"def_map has no key for {} in visit_expr\", id));\n+        }\n+        let def = def_map.get(&id).unwrap().full_def();\n+        let sub_span = self.span_utils.span_for_last_ident(path.span);\n+        match def {\n+            def::DefUpvar(..) |\n+            def::DefLocal(..) |\n+            def::DefStatic(..) |\n+            def::DefConst(..) |\n+            def::DefAssociatedConst(..) |\n+            def::DefVariant(..) => {\n+                Data::VariableRefData(VariableRefData {\n+                    name: self.span_utils.snippet(sub_span.unwrap()),\n+                    span: sub_span.unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    ref_id: def.def_id(),\n+                })\n+            }\n+            def::DefStruct(def_id) | def::DefTy(def_id, _) => {\n+                Data::TypeRefData(TypeRefData {\n+                    span: sub_span.unwrap(),\n+                    ref_id: def_id,\n+                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                })\n+            }\n+            def::DefMethod(decl_id, provenence) => {\n+                let sub_span = self.span_utils.sub_span_for_meth_name(path.span);\n+                let def_id = if decl_id.krate == ast::LOCAL_CRATE {\n+                    let ti = self.tcx.impl_or_trait_item(decl_id);\n+                    match provenence {\n+                        def::FromTrait(def_id) => {\n+                            Some(self.tcx.trait_items(def_id)\n+                                    .iter()\n+                                    .find(|mr| {\n+                                        mr.name() == ti.name()\n+                                    })\n+                                    .unwrap()\n+                                    .def_id())\n+                        }\n+                        def::FromImpl(def_id) => {\n+                            let impl_items = self.tcx.impl_items.borrow();\n+                            Some(impl_items.get(&def_id)\n+                                           .unwrap()\n+                                           .iter()\n+                                           .find(|mr| {\n+                                                self.tcx.impl_or_trait_item(mr.def_id()).name()\n+                                                    == ti.name()\n+                                            })\n+                                           .unwrap()\n+                                           .def_id())\n+                        }\n+                    }\n+                } else {\n+                    None\n+                };\n+                Data::MethodCallData(MethodCallData {\n+                    span: sub_span.unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                    ref_id: def_id,\n+                    decl_id: Some(decl_id),\n+                })\n+            },\n+            def::DefFn(def_id, _) => {\n+                Data::FunctionCallData(FunctionCallData {\n+                    ref_id: def_id,\n+                    span: sub_span.unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(id).unwrap_or(0),\n+                })\n+            }\n+            _ => self.tcx.sess.span_bug(path.span,\n+                                        &format!(\"Unexpected def kind while looking \\\n+                                                  up path in `{}`: `{:?}`\",\n+                                                 self.span_utils.snippet(path.span),\n+                                                 def)),\n+        }\n+    }\n+\n     pub fn get_field_ref_data(&self,\n                               field_ref: &ast::Field,\n                               struct_id: DefId,"}, {"sha": "53befc092da88f363d9e10b91fa8a4d1a48f36d7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374af4aea7878127ca52cbc271fb1237b4afe223/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=374af4aea7878127ca52cbc271fb1237b4afe223", "patch": "@@ -61,7 +61,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             // Keep going, outside-in.\n             let fully_expanded = fld.fold_expr(expanded_expr);\n-            let span = fld.new_span(span); \n+            let span = fld.new_span(span);\n             fld.cx.bt_pop();\n \n             fully_expanded.map(|e| ast::Expr {"}]}