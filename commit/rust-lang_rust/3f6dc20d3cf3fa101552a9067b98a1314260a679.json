{"sha": "3f6dc20d3cf3fa101552a9067b98a1314260a679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNmRjMjBkM2NmM2ZhMTAxNTUyYTkwNjdiOThhMTMxNDI2MGE2Nzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-18T15:41:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-18T18:34:47Z"}, "message": "Merge imports assist\n\nWork towards #2220", "tree": {"sha": "7be0684f1c2660eb5da089d1067d13a343e8bcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be0684f1c2660eb5da089d1067d13a343e8bcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f6dc20d3cf3fa101552a9067b98a1314260a679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6dc20d3cf3fa101552a9067b98a1314260a679", "html_url": "https://github.com/rust-lang/rust/commit/3f6dc20d3cf3fa101552a9067b98a1314260a679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f6dc20d3cf3fa101552a9067b98a1314260a679/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e50efcfc5fc6e280e638dd446b90e970f7ce699", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e50efcfc5fc6e280e638dd446b90e970f7ce699", "html_url": "https://github.com/rust-lang/rust/commit/4e50efcfc5fc6e280e638dd446b90e970f7ce699"}], "stats": {"total": 250, "additions": 225, "deletions": 25}, "files": [{"sha": "aef6793e8934b3472272ae8158b6dac81d2f69e9", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -417,6 +417,20 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_merge_imports() {\n+    check(\n+        \"merge_imports\",\n+        r#####\"\n+use std::<|>fmt::Formatter;\n+use std::io;\n+\"#####,\n+        r#####\"\n+use std::{fmt::Formatter, io};\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_merge_match_arms() {\n     check("}, {"sha": "96b1ab86a5c73f26faf1318d4f9d6ffd7e834c1f", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -0,0 +1,154 @@\n+use std::iter::successors;\n+\n+use ast::{edit::AstNodeEdit, make};\n+use ra_syntax::{ast, AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+// Assist: merge_imports\n+//\n+// Merges two imports with a common prefix.\n+//\n+// ```\n+// use std::<|>fmt::Formatter;\n+// use std::io;\n+// ```\n+// ->\n+// ```\n+// use std::{fmt::Formatter, io};\n+// ```\n+pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n+    let tree: ast::UseTree = ctx.find_node_at_offset()?;\n+    let use_item = tree.syntax().parent().and_then(ast::UseItem::cast)?;\n+    let (merged, to_delete) = [Direction::Prev, Direction::Next]\n+        .iter()\n+        .copied()\n+        .filter_map(|dir| next_use_item(&use_item, dir))\n+        .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n+        .find_map(|(use_item, use_tree)| {\n+            Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n+        })?;\n+    let mut offset = ctx.frange.range.start();\n+    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n+        edit.replace_ast(tree, merged);\n+\n+        let mut range = to_delete.syntax().text_range();\n+        let next_ws = to_delete\n+            .syntax()\n+            .next_sibling_or_token()\n+            .and_then(|it| it.into_token())\n+            .and_then(ast::Whitespace::cast);\n+        if let Some(ws) = next_ws {\n+            range = range.extend_to(&ws.syntax().text_range())\n+        }\n+        edit.delete(range);\n+        if range.end() <= offset {\n+            offset -= range.len();\n+        }\n+        edit.set_cursor(offset);\n+    })\n+}\n+\n+fn next_use_item(this_use_item: &ast::UseItem, direction: Direction) -> Option<ast::UseItem> {\n+    this_use_item.syntax().siblings(direction).skip(1).find_map(ast::UseItem::cast)\n+}\n+\n+fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n+    let lhs_path = old.path()?;\n+    let rhs_path = new.path()?;\n+\n+    let (lhs_prefix, rhs_prefix) = common_prefix(&lhs_path, &rhs_path)?;\n+\n+    let lhs = old.split_prefix(&lhs_prefix);\n+    let rhs = new.split_prefix(&rhs_prefix);\n+\n+    let mut to_insert: Vec<SyntaxElement> = Vec::new();\n+    to_insert.push(make::token(T![,]).into());\n+    to_insert.push(make::tokens::single_space().into());\n+    to_insert.extend(\n+        rhs.use_tree_list()?\n+            .syntax()\n+            .children_with_tokens()\n+            .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n+    );\n+    let use_tree_list = lhs.use_tree_list()?;\n+    let pos = InsertPosition::Before(use_tree_list.r_curly()?.into());\n+    let use_tree_list = use_tree_list.insert_children(pos, to_insert);\n+    Some(lhs.with_use_tree_list(use_tree_list))\n+}\n+\n+fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n+    let mut res = None;\n+    let mut lhs_curr = first_path(&lhs);\n+    let mut rhs_curr = first_path(&rhs);\n+    loop {\n+        match (lhs_curr.segment(), rhs_curr.segment()) {\n+            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n+            _ => break,\n+        }\n+        res = Some((lhs_curr.clone(), rhs_curr.clone()));\n+\n+        match (lhs_curr.parent_path(), rhs_curr.parent_path()) {\n+            (Some(lhs), Some(rhs)) => {\n+                lhs_curr = lhs;\n+                rhs_curr = rhs;\n+            }\n+            _ => break,\n+        }\n+    }\n+\n+    res\n+}\n+\n+fn first_path(path: &ast::Path) -> ast::Path {\n+    successors(Some(path.clone()), |it| it.qualifier()).last().unwrap()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_merge_first() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::fmt<|>::Debug;\n+use std::fmt::Display;\n+\",\n+            r\"\n+use std::fmt<|>::{Debug, Display};\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_merge_second() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::fmt::Debug;\n+use std::fmt<|>::Display;\n+\",\n+            r\"\n+use std::fmt<|>::{Display, Debug};\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_merge_nested() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::{fmt<|>::Debug, fmt::Display};\n+\",\n+            r\"\n+use std::{fmt::{Debug, Display}};\n+\",\n+        )\n+    }\n+}"}, {"sha": "342a770ec22f63192ddd1685a55955394cf7b1d7", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, edit, make, AstNode, NameOwner, TypeBoundsOwner},\n+    ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner, TypeBoundsOwner},\n     SyntaxElement,\n     SyntaxKind::*,\n };\n@@ -54,7 +54,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n                 (type_param, without_bounds)\n             });\n \n-        let new_type_param_list = edit::replace_descendants(&type_param_list, new_params);\n+        let new_type_param_list = type_param_list.replace_descendants(new_params);\n         edit.replace_ast(type_param_list.clone(), new_type_param_list);\n \n         let where_clause = {"}, {"sha": "d9244f22d697dae1cdff336a8feaf4b8ba9b72d1", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -1,9 +1,6 @@\n-use std::iter::{once, successors};\n+use std::iter::successors;\n \n-use ra_syntax::{\n-    ast::{self, make},\n-    AstNode, T,\n-};\n+use ra_syntax::{ast, AstNode, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -25,7 +22,10 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n \n     let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast)?;\n \n-    let new_tree = split_use_tree_prefix(&use_tree, &path)?;\n+    let new_tree = use_tree.split_prefix(&path);\n+    if new_tree == use_tree {\n+        return None;\n+    }\n     let cursor = ctx.frange.range.start();\n \n     ctx.add_assist(AssistId(\"split_import\"), \"Split import\", |edit| {\n@@ -35,23 +35,6 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     })\n }\n \n-fn split_use_tree_prefix(use_tree: &ast::UseTree, prefix: &ast::Path) -> Option<ast::UseTree> {\n-    let suffix = split_path_prefix(&prefix)?;\n-    let use_tree = make::use_tree(suffix.clone(), use_tree.use_tree_list(), use_tree.alias());\n-    let nested = make::use_tree_list(once(use_tree));\n-    let res = make::use_tree(prefix.clone(), Some(nested), None);\n-    Some(res)\n-}\n-\n-fn split_path_prefix(prefix: &ast::Path) -> Option<ast::Path> {\n-    let parent = prefix.parent_path()?;\n-    let mut res = make::path_unqualified(parent.segment()?);\n-    for p in successors(parent.parent_path(), |it| it.parent_path()) {\n-        res = make::path_qualified(res, p.segment()?);\n-    }\n-    Some(res)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::helpers::{check_assist, check_assist_target};"}, {"sha": "b8704ea7d2f868b0ce267319a962b06a6854990e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -110,6 +110,7 @@ mod handlers {\n     mod inline_local_variable;\n     mod introduce_variable;\n     mod invert_if;\n+    mod merge_imports;\n     mod merge_match_arms;\n     mod move_bounds;\n     mod move_guard;\n@@ -140,6 +141,7 @@ mod handlers {\n             inline_local_variable::inline_local_variable,\n             introduce_variable::introduce_variable,\n             invert_if::invert_if,\n+            merge_imports::merge_imports,\n             merge_match_arms::merge_match_arms,\n             move_bounds::move_bounds_to_where_clause,\n             move_guard::move_arm_cond_to_match_guard,"}, {"sha": "68dae008f3982a24b04c2ed8045cf145ef0ef0b0", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -273,6 +273,26 @@ impl ast::UseTree {\n         }\n         self.clone()\n     }\n+\n+    #[must_use]\n+    pub fn split_prefix(&self, prefix: &ast::Path) -> ast::UseTree {\n+        let suffix = match split_path_prefix(&prefix) {\n+            Some(it) => it,\n+            None => return self.clone(),\n+        };\n+        let use_tree = make::use_tree(suffix.clone(), self.use_tree_list(), self.alias());\n+        let nested = make::use_tree_list(iter::once(use_tree));\n+        return make::use_tree(prefix.clone(), Some(nested), None);\n+\n+        fn split_path_prefix(prefix: &ast::Path) -> Option<ast::Path> {\n+            let parent = prefix.parent_path()?;\n+            let mut res = make::path_unqualified(parent.segment()?);\n+            for p in iter::successors(parent.parent_path(), |it| it.parent_path()) {\n+                res = make::path_qualified(res, p.segment()?);\n+            }\n+            Some(res)\n+        }\n+    }\n }\n \n #[must_use]"}, {"sha": "c3ae8f90e815a67baa78426c3e91282e986f0b61", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -167,6 +167,20 @@ impl ast::UseTreeList {\n             .and_then(ast::UseTree::cast)\n             .expect(\"UseTreeLists are always nested in UseTrees\")\n     }\n+    pub fn l_curly(&self) -> Option<SyntaxToken> {\n+        self.token(T!['{'])\n+    }\n+\n+    pub fn r_curly(&self) -> Option<SyntaxToken> {\n+        self.token(T!['}'])\n+    }\n+\n+    fn token(&self, kind: SyntaxKind) -> Option<SyntaxToken> {\n+        self.syntax()\n+            .children_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == kind)\n+    }\n }\n \n impl ast::ImplDef {"}, {"sha": "e2850b4ddebe813a215647842aecbb5652a2867b", "filename": "docs/user/assists.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc20d3cf3fa101552a9067b98a1314260a679/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc20d3cf3fa101552a9067b98a1314260a679/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=3f6dc20d3cf3fa101552a9067b98a1314260a679", "patch": "@@ -402,6 +402,19 @@ fn main() {\n }\n ```\n \n+## `merge_imports`\n+\n+Merges two imports with a common prefix.\n+\n+```rust\n+// BEFORE\n+use std::\u2503fmt::Formatter;\n+use std::io;\n+\n+// AFTER\n+use std::{fmt::Formatter, io};\n+```\n+\n ## `merge_match_arms`\n \n Merges identical match arms."}]}