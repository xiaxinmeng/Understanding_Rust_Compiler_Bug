{"sha": "9417b28de55888d99aeefcd03243294b658b4d97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTdiMjhkZTU1ODg4ZDk5YWVlZmNkMDMyNDMyOTRiNjU4YjRkOTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T14:06:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-11T16:42:18Z"}, "message": "treat test binaries like all others", "tree": {"sha": "1834f12a194ecc8527d514c83fdcc37650ec099f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1834f12a194ecc8527d514c83fdcc37650ec099f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9417b28de55888d99aeefcd03243294b658b4d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9417b28de55888d99aeefcd03243294b658b4d97", "html_url": "https://github.com/rust-lang/rust/commit/9417b28de55888d99aeefcd03243294b658b4d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9417b28de55888d99aeefcd03243294b658b4d97/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31bb43804fd70452eb8e20f83065aad186f8ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31bb43804fd70452eb8e20f83065aad186f8ec5", "html_url": "https://github.com/rust-lang/rust/commit/f31bb43804fd70452eb8e20f83065aad186f8ec5"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "179f11dd56a3d4b7d8d89c05ed73e7b515cece53", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9417b28de55888d99aeefcd03243294b658b4d97/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9417b28de55888d99aeefcd03243294b658b4d97/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=9417b28de55888d99aeefcd03243294b658b4d97", "patch": "@@ -279,9 +279,8 @@ fn main() {\n                 (MiriCommand::Test, \"lib\") => {\n                     // For libraries we call `cargo rustc -- --test <rustc args>`\n                     // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n-                    // rustc to build a test harness which calls all #[test] functions. We don't\n-                    // use the harness since we execute each #[test] function's MIR ourselves before\n-                    // compilation even completes, but this option is necessary to build the library.\n+                    // rustc to build a test harness which calls all #[test] functions.\n+                    // We then execute that harness just like any other binary.\n                     if let Err(code) = process(\n                         vec![\"--\".to_string(), \"--test\".to_string()].into_iter().chain(\n                             args,"}, {"sha": "c2255d706339d8d6556f79ea8f1e492cff3709de", "filename": "src/bin/miri.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9417b28de55888d99aeefcd03243294b658b4d97/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9417b28de55888d99aeefcd03243294b658b4d97/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=9417b28de55888d99aeefcd03243294b658b4d97", "patch": "@@ -23,8 +23,6 @@ use rustc_metadata::cstore::CStore;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n-use rustc::hir::{self, itemlikevisit};\n-use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use syntax::ast;\n \n@@ -115,43 +113,12 @@ fn after_analysis<'a, 'tcx>(\n \n     let tcx = state.tcx.unwrap();\n \n-    if std::env::args().any(|arg| arg == \"--test\") {\n-        struct Visitor<'a, 'tcx: 'a> {\n-            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-            state: &'a CompileState<'a, 'tcx>,\n-            validate: bool,\n-        };\n-        impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n-            fn visit_item(&mut self, i: &'hir hir::Item) {\n-                if let hir::ItemKind::Fn(.., body_id) = i.node {\n-                    if i.attrs.iter().any(|attr| {\n-                        attr.name() == \"test\"\n-                    })\n-                    {\n-                        let did = self.tcx.hir().body_owner_def_id(body_id);\n-                        println!(\n-                            \"running test: {}\",\n-                            self.tcx.def_path_debug_str(did),\n-                        );\n-                        miri::eval_main(self.tcx, did, self.validate);\n-                        self.state.session.abort_if_errors();\n-                    }\n-                }\n-            }\n-            fn visit_trait_item(&mut self, _trait_item: &'hir hir::TraitItem) {}\n-            fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n-        }\n-        state.hir_crate.unwrap().visit_all_item_likes(\n-            &mut Visitor { tcx, state, validate }\n-        );\n-    } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n-        miri::eval_main(tcx, entry_def_id, validate);\n-\n-        state.session.abort_if_errors();\n-    } else {\n-        println!(\"no main function found, assuming auxiliary build\");\n-    }\n+    let (entry_node_id, _, _) = state.session.entry_fn.borrow().expect(\"no main function found!\");\n+    let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n+\n+    miri::eval_main(tcx, entry_def_id, validate);\n+\n+    state.session.abort_if_errors();\n }\n \n fn init_early_loggers() {"}]}