{"sha": "c52605024c2e6dfb3cc41728bd246b6073ec4998", "node_id": "C_kwDOAAsO6NoAKGM1MjYwNTAyNGMyZTZkZmIzY2M0MTcyOGJkMjQ2YjYwNzNlYzQ5OTg", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-10T18:30:27Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:10Z"}, "message": "extracted function", "tree": {"sha": "7e2d869e9d12bef6c274706ab2870f44eee47627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2d869e9d12bef6c274706ab2870f44eee47627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c52605024c2e6dfb3cc41728bd246b6073ec4998", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0poACgkQeO9fUvOM\nSb3sFwv/WuODLcEVxcKUKz70faG+DhAvIIEVsAqAY7rnVlmQvQ/DbAi9mX3S5h/l\nNNIKKkFGfzx8yiei3v4WLLNkPHaY6UIEA85j6Qx7ykwvsCPn/dAWCr6GWAgDVmcI\n1fTcW8cCQh+XKdlie36Q+f/sOwMPAgSFDBJtv0h/TungbPik/EPsgd7yjPiewFLi\nVprQNkpH3Rd6yYo7OgYqJ33IsVXECSHSFjv8+1YLrmoCA+J8rp1RXOf6g6ZIXRHY\n1kercRh11Ffk/fgBrb10fsTU7DmCS37oslJ8pjlCOHfeqBFQomhd7thPUha7eK6E\nsYNorN1nyKq8Y8vO8QQjoUSHjdLKCHxpiXxuOb0s1LAYQgMt87URlKXm6tiTwgZ5\n7dLBaRQDMGtruI2GmDqI5KPAeI9Bk8/xwjP1x44Z32DBIHiKgFzleTKvTC3y4TZ/\niO2saDgdJNsaQCvXCgJ0qrkR6FwuVNzLUp4kmnLCnif4aRsabGrcdDHEa2r57+6n\nmimXLI7N\n=0KiH\n-----END PGP SIGNATURE-----", "payload": "tree 7e2d869e9d12bef6c274706ab2870f44eee47627\nparent d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641839427 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123930 +0000\n\nextracted function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c52605024c2e6dfb3cc41728bd246b6073ec4998", "html_url": "https://github.com/rust-lang/rust/commit/c52605024c2e6dfb3cc41728bd246b6073ec4998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c52605024c2e6dfb3cc41728bd246b6073ec4998/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f", "html_url": "https://github.com/rust-lang/rust/commit/d8a3e51a5f4d6dcb8da269470061bfbb6b50e81f"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "75710b138f5cbf8c2fa6284d2d1137e02c504e3c", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c52605024c2e6dfb3cc41728bd246b6073ec4998/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52605024c2e6dfb3cc41728bd246b6073ec4998/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=c52605024c2e6dfb3cc41728bd246b6073ec4998", "patch": "@@ -1,4 +1,3 @@\n-use hir::TypeInfo;\n use itertools::Itertools;\n use std::iter::successors;\n use syntax::{\n@@ -53,18 +52,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n                     return false;\n                 }\n \n-                let arm_types = get_arm_types(&ctx, &arm);\n-                for i in 0..arm_types.len() {\n-                    let other_arm_type = &arm_types[i].as_ref();\n-                    let current_arm_type = current_arm_types[i].as_ref();\n-                    if let (Some(other_arm_type), Some(current_arm_type)) =\n-                        (other_arm_type, current_arm_type)\n-                    {\n-                        return &other_arm_type.original == &current_arm_type.original;\n-                    }\n-                }\n-\n-                true\n+                return are_same_types(&current_arm_types, arm, ctx);\n             }\n             _ => false,\n         })\n@@ -106,7 +94,24 @@ fn contains_placeholder(a: &ast::MatchArm) -> bool {\n     matches!(a.pat(), Some(ast::Pat::WildcardPat(..)))\n }\n \n-fn get_arm_types(ctx: &AssistContext, arm: &ast::MatchArm) -> Vec<Option<TypeInfo>> {\n+fn are_same_types(\n+    current_arm_types: &Vec<Option<hir::TypeInfo>>,\n+    arm: &ast::MatchArm,\n+    ctx: &AssistContext,\n+) -> bool {\n+    let arm_types = get_arm_types(&ctx, &arm);\n+    for i in 0..arm_types.len() {\n+        let other_arm_type = &arm_types[i].as_ref();\n+        let current_arm_type = current_arm_types[i].as_ref();\n+        if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type, current_arm_type) {\n+            return &other_arm_type.original == &current_arm_type.original;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+fn get_arm_types(ctx: &AssistContext, arm: &ast::MatchArm) -> Vec<Option<hir::TypeInfo>> {\n     match arm.pat() {\n         Some(ast::Pat::TupleStructPat(tp)) => tp\n             .fields()"}]}