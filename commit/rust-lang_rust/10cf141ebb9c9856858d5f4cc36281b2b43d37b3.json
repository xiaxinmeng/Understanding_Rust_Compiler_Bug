{"sha": "10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwY2YxNDFlYmI5Yzk4NTY4NThkNWY0Y2MzNjI4MWIyYjQzZDM3YjM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T10:39:43Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T10:39:43Z"}, "message": "Apply review comments", "tree": {"sha": "4a38673068d7b282450b268259f4e2e541a5985d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a38673068d7b282450b268259f4e2e541a5985d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "html_url": "https://github.com/rust-lang/rust/commit/10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8daa2784c7ca136b6aa70a75cb7d8b48b1b94117", "url": "https://api.github.com/repos/rust-lang/rust/commits/8daa2784c7ca136b6aa70a75cb7d8b48b1b94117", "html_url": "https://github.com/rust-lang/rust/commit/8daa2784c7ca136b6aa70a75cb7d8b48b1b94117"}], "stats": {"total": 132, "additions": 95, "deletions": 37}, "files": [{"sha": "fca8e1446a820f696218f9af16e5d60ee4cd3279", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "patch": "@@ -1,4 +1,4 @@\n-use crate::consts::{constant, Constant};\n+use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n@@ -444,7 +444,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], e\n \n fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'_>, arms: &'tcx [Arm<'_>]) {\n     if arms.len() >= 2 && cx.tables.expr_ty(ex).is_integral() {\n-        let ranges = all_ranges(cx, arms);\n+        let ranges = all_ranges(cx, arms, cx.tables.expr_ty(ex));\n         let type_ranges = type_ranges(&ranges);\n         if !type_ranges.is_empty() {\n             if let Some((start, end)) = overlapping(&type_ranges) {\n@@ -705,25 +705,52 @@ fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n }\n \n /// Gets all arms that are unbounded `PatRange`s.\n-fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &'tcx [Arm<'_>]) -> Vec<SpannedRange<Constant>> {\n+fn all_ranges<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    arms: &'tcx [Arm<'_>],\n+    ty: Ty<'tcx>,\n+) -> Vec<SpannedRange<Constant>> {\n     arms.iter()\n         .flat_map(|arm| {\n             if let Arm {\n                 ref pat, guard: None, ..\n             } = *arm\n             {\n-                if let PatKind::Range(ref lhs, ref rhs, ref range_end) = pat.kind {\n-                    if let (Some(l), Some(r)) = (lhs, rhs) {\n-                        let lhs = constant(cx, cx.tables, l)?.0;\n-                        let rhs = constant(cx, cx.tables, r)?.0;\n-                        let rhs = match *range_end {\n-                            RangeEnd::Included => Bound::Included(rhs),\n-                            RangeEnd::Excluded => Bound::Excluded(rhs),\n-                        };\n-                        return Some(SpannedRange {\n-                            span: pat.span,\n-                            node: (lhs, rhs),\n-                        });\n+                if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n+                    match (lhs, rhs) {\n+                        (Some(lhs), Some(rhs)) => {\n+                            let lhs = constant(cx, cx.tables, lhs)?.0;\n+                            let rhs = constant(cx, cx.tables, rhs)?.0;\n+                            let rhs = match range_end {\n+                                RangeEnd::Included => Bound::Included(rhs),\n+                                RangeEnd::Excluded => Bound::Excluded(rhs),\n+                            };\n+                            return Some(SpannedRange {\n+                                span: pat.span,\n+                                node: (lhs, rhs),\n+                            });\n+                        },\n+                        (None, Some(rhs)) => {\n+                            let lhs = miri_to_const(ty.numeric_min_val(cx.tcx)?)?;\n+                            let rhs = constant(cx, cx.tables, rhs)?.0;\n+                            let rhs = match range_end {\n+                                RangeEnd::Included => Bound::Included(rhs),\n+                                RangeEnd::Excluded => Bound::Excluded(rhs),\n+                            };\n+                            return Some(SpannedRange {\n+                                span: pat.span,\n+                                node: (lhs, rhs),\n+                            });\n+                        },\n+                        (Some(lhs), None) => {\n+                            let lhs = constant(cx, cx.tables, lhs)?.0;\n+                            let rhs = miri_to_const(ty.numeric_max_val(cx.tcx)?)?;\n+                            return Some(SpannedRange {\n+                                span: pat.span,\n+                                node: (lhs, Bound::Excluded(rhs)),\n+                            });\n+                        },\n+                        _ => return None,\n                     }\n                 }\n "}, {"sha": "cfbb32806da13d38a73679d6443fb5c8c6a0a587", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_session::declare_tool_lint;\n use syntax::ast::{Attribute, LitFloatType, LitKind};\n+use syntax::walk_list;\n \n declare_clippy_lint! {\n     /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -617,13 +618,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     start_pat, end_pat, end_kind, current\n                 );\n                 self.current = start_pat;\n-                if let Some(expr) = start {\n-                    self.visit_expr(expr);\n-                }\n+                walk_list!(self, visit_expr, start);\n                 self.current = end_pat;\n-                if let Some(expr) = end {\n-                    self.visit_expr(expr);\n-                }\n+                walk_list!(self, visit_expr, end);\n             },\n             PatKind::Slice(ref start, ref middle, ref end) => {\n                 let start_pat = self.next(\"start\");"}, {"sha": "01f719f4ab88ddb9fbe5d57d76b934470235ea4a", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "patch": "@@ -194,11 +194,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&PatKind::Tuple(ref l, ls), &PatKind::Tuple(ref r, rs)) => {\n                 ls == rs && over(l, r, |l, r| self.eq_pat(l, r))\n             },\n-            (&PatKind::Range(ref ls, ref le, ref li), &PatKind::Range(ref rs, ref re, ref ri)) => {\n-                if let (Some(ls), Some(rs), Some(le), Some(re)) = (ls, rs, le, re) {\n-                    return self.eq_expr(ls, rs) && self.eq_expr(le, re) && (*li == *ri);\n-                }\n-                false\n+            (&PatKind::Range(ref ls, ref le, li), &PatKind::Range(ref rs, ref re, ri)) => {\n+                both(ls, rs, |a, b| self.eq_expr(a, b)) && both(le, re, |a, b| self.eq_expr(a, b)) && (li == ri)\n             },\n             (&PatKind::Ref(ref le, ref lm), &PatKind::Ref(ref re, ref rm)) => lm == rm && self.eq_pat(le, re),\n             (&PatKind::Slice(ref ls, ref li, ref le), &PatKind::Slice(ref rs, ref ri, ref re)) => {"}, {"sha": "ce7761119cbf9baa5094b3af8171cca9ce24b17e", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "patch": "@@ -1,4 +1,5 @@\n #![feature(exclusive_range_pattern)]\n+#![feature(half_open_range_patterns)]\n #![warn(clippy::match_overlapping_arm)]\n #![allow(clippy::redundant_pattern_matching)]\n \n@@ -56,6 +57,18 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    match 42 {\n+        0.. => println!(\"0 .. 42\"),\n+        3.. => println!(\"3 .. 42\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        ..=23 => println!(\"0 ... 23\"),\n+        ..26 => println!(\"0 .. 26\"),\n+        _ => (),\n+    }\n+\n     if let None = Some(42) {\n         // nothing\n     } else if let None = Some(42) {"}, {"sha": "32dcefa86d880cb73aa88eb33a578499baf7706c", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10cf141ebb9c9856858d5f4cc36281b2b43d37b3/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=10cf141ebb9c9856858d5f4cc36281b2b43d37b3", "patch": "@@ -1,63 +1,87 @@\n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:11:9\n+  --> $DIR/match_overlapping_arm.rs:12:9\n    |\n LL |         0..=10 => println!(\"0 ... 10\"),\n    |         ^^^^^^\n    |\n    = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:12:9\n+  --> $DIR/match_overlapping_arm.rs:13:9\n    |\n LL |         0..=11 => println!(\"0 ... 11\"),\n    |         ^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:17:9\n+  --> $DIR/match_overlapping_arm.rs:18:9\n    |\n LL |         0..=5 => println!(\"0 ... 5\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:19:9\n+  --> $DIR/match_overlapping_arm.rs:20:9\n    |\n LL |         FOO..=11 => println!(\"0 ... 11\"),\n    |         ^^^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:25:9\n+  --> $DIR/match_overlapping_arm.rs:26:9\n    |\n LL |         0..=5 => println!(\"0 ... 5\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:24:9\n+  --> $DIR/match_overlapping_arm.rs:25:9\n    |\n LL |         2 => println!(\"2\"),\n    |         ^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:31:9\n+  --> $DIR/match_overlapping_arm.rs:32:9\n    |\n LL |         0..=2 => println!(\"0 ... 2\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:30:9\n+  --> $DIR/match_overlapping_arm.rs:31:9\n    |\n LL |         2 => println!(\"2\"),\n    |         ^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:54:9\n+  --> $DIR/match_overlapping_arm.rs:55:9\n    |\n LL |         0..11 => println!(\"0 .. 11\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:55:9\n+  --> $DIR/match_overlapping_arm.rs:56:9\n    |\n LL |         0..=11 => println!(\"0 ... 11\"),\n    |         ^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:61:9\n+   |\n+LL |         0.. => println!(\"0 .. 42\"),\n+   |         ^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:62:9\n+   |\n+LL |         3.. => println!(\"3 .. 42\"),\n+   |         ^^^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:67:9\n+   |\n+LL |         ..=23 => println!(\"0 ... 23\"),\n+   |         ^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:68:9\n+   |\n+LL |         ..26 => println!(\"0 .. 26\"),\n+   |         ^^^^\n+\n+error: aborting due to 7 previous errors\n "}]}