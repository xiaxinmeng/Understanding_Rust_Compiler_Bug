{"sha": "06f89e5f3a00d91e84963745af989f1e9a906bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Zjg5ZTVmM2EwMGQ5MWU4NDk2Mzc0NWFmOTg5ZjFlOWE5MDZiYjQ=", "commit": {"author": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-06-14T13:40:06Z"}, "committer": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-06-15T13:03:13Z"}, "message": "Fix syntax highlighting of recursive macros\n\nAdd syntax highlighting for the BANG (`!`) token if the parent is `MACRO_CALL`.", "tree": {"sha": "6a3d96f58ff9b99066e5b410911b47ce0b28d529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3d96f58ff9b99066e5b410911b47ce0b28d529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f89e5f3a00d91e84963745af989f1e9a906bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f89e5f3a00d91e84963745af989f1e9a906bb4", "html_url": "https://github.com/rust-lang/rust/commit/06f89e5f3a00d91e84963745af989f1e9a906bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f89e5f3a00d91e84963745af989f1e9a906bb4/comments", "author": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017331a53c1eeaa1253d2829165627bfa27dc124", "url": "https://api.github.com/repos/rust-lang/rust/commits/017331a53c1eeaa1253d2829165627bfa27dc124", "html_url": "https://github.com/rust-lang/rust/commit/017331a53c1eeaa1253d2829165627bfa27dc124"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "5c2ff6ab5a472b63bfadf9ddec1ca6bb29fe2a35", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=06f89e5f3a00d91e84963745af989f1e9a906bb4", "patch": "@@ -62,6 +62,12 @@\n     }\n }\n \n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n+    ($expr:expr) =&gt; {\n+        $expr\n+    }\n+}\n+\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n@@ -80,6 +86,8 @@\n         <span class=\"comment\">// Do nothing</span>\n     }\n \n+    <span class=\"macro\">noop!</span>(<span class=\"macro\">noop</span><span class=\"macro\">!</span>(<span class=\"numeric_literal\">1</span>));\n+\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;"}, {"sha": "bbcd52a1c1f8212d215f77234aa332e327660251", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=06f89e5f3a00d91e84963745af989f1e9a906bb4", "patch": "@@ -160,23 +160,25 @@ pub(crate) fn highlight(\n             // Check if macro takes a format string and remember it for highlighting later.\n             // The macros that accept a format string expand to a compiler builtin macros\n             // `format_args` and `format_args_nl`.\n-            if let Some(fmt_macro_call) = parent.parent().and_then(ast::MacroCall::cast) {\n-                if let Some(name) =\n-                    fmt_macro_call.path().and_then(|p| p.segment()).and_then(|s| s.name_ref())\n-                {\n-                    match name.text().as_str() {\n-                        \"format_args\" | \"format_args_nl\" => {\n-                            format_string = parent\n-                                .children_with_tokens()\n-                                .filter(|t| t.kind() != WHITESPACE)\n-                                .nth(1)\n-                                .filter(|e| {\n-                                    ast::String::can_cast(e.kind())\n-                                        || ast::RawString::can_cast(e.kind())\n-                                })\n-                        }\n-                        _ => {}\n+            if let Some(name) = parent\n+                .parent()\n+                .and_then(ast::MacroCall::cast)\n+                .and_then(|mc| mc.path())\n+                .and_then(|p| p.segment())\n+                .and_then(|s| s.name_ref())\n+            {\n+                match name.text().as_str() {\n+                    \"format_args\" | \"format_args_nl\" => {\n+                        format_string = parent\n+                            .children_with_tokens()\n+                            .filter(|t| t.kind() != WHITESPACE)\n+                            .nth(1)\n+                            .filter(|e| {\n+                                ast::String::can_cast(e.kind())\n+                                    || ast::RawString::can_cast(e.kind())\n+                            })\n                     }\n+                    _ => {}\n                 }\n             }\n \n@@ -493,6 +495,9 @@ fn highlight_element(\n             h |= HighlightModifier::Unsafe;\n             h\n         }\n+        T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n+            Highlight::new(HighlightTag::Macro)\n+        }\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);"}, {"sha": "070b24f4551b7da3668b0dfb6e2040562ac3ae00", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f89e5f3a00d91e84963745af989f1e9a906bb4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=06f89e5f3a00d91e84963745af989f1e9a906bb4", "patch": "@@ -43,6 +43,12 @@ def_fn! {\n     }\n }\n \n+macro_rules! noop {\n+    ($expr:expr) => {\n+        $expr\n+    }\n+}\n+\n // comment\n fn main() {\n     println!(\"Hello, {}!\", 92);\n@@ -61,6 +67,8 @@ fn main() {\n         // Do nothing\n     }\n \n+    noop!(noop!(1));\n+\n     let mut x = 42;\n     let y = &mut x;\n     let z = &y;"}]}