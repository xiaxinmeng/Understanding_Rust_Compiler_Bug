{"sha": "18172d1375274050fbe37acd9b3c884f2caaacb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTcyZDEzNzUyNzQwNTBmYmUzN2FjZDliM2M4ODRmMmNhYWFjYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-02T00:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-02T00:06:04Z"}, "message": "Auto merge of #32666 - Manishearth:rollup, r=Manishearth\n\nRollup of 11 pull requests\n\n- Successful merges: #32622, #32629, #32640, #32641, #32642, #32645, #32647, #32649, #32652, #32654, #32656\n- Failed merges:", "tree": {"sha": "2216dff2fd4cbda8c4ff6b81690a47cec7f8e561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2216dff2fd4cbda8c4ff6b81690a47cec7f8e561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18172d1375274050fbe37acd9b3c884f2caaacb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18172d1375274050fbe37acd9b3c884f2caaacb9", "html_url": "https://github.com/rust-lang/rust/commit/18172d1375274050fbe37acd9b3c884f2caaacb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18172d1375274050fbe37acd9b3c884f2caaacb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "html_url": "https://github.com/rust-lang/rust/commit/c8b8eb1fda90998832ba1cdf96a34dc676f7124b"}, {"sha": "45c4769920caf7e8099dcf0c9533b071e8dbbda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/45c4769920caf7e8099dcf0c9533b071e8dbbda8", "html_url": "https://github.com/rust-lang/rust/commit/45c4769920caf7e8099dcf0c9533b071e8dbbda8"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "1acf5fd1f3df8216e80d04887a5150b47813dd9d", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -177,10 +177,11 @@ To contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n Rust has an [IRC] culture and most real-time collaboration happens in a\n variety of channels on Mozilla's IRC network, irc.mozilla.org. The\n most popular channel is [#rust], a venue for general discussion about\n-Rust, and a good place to ask for help.\n+Rust. And a good place to ask for help would be [#rust-beginners].\n \n [IRC]: https://en.wikipedia.org/wiki/Internet_Relay_Chat\n [#rust]: irc://irc.mozilla.org/rust\n+[#rust-beginners]: irc://irc.mozilla.org/rust-beginners\n \n ## License\n "}, {"sha": "16141d936ebccb71584ff8c4ba52752016bffef7", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -164,13 +164,15 @@ installed. Doing so will depend on your specific system, consult its\n documentation for more details.\n \n If not, there are a number of places where we can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n-[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves) who can help us out. Other great resources\n-include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n+[the #rust-beginners IRC channel on irc.mozilla.org][irc-beginners] and for\n+general discussion [the #rust IRC channel on irc.mozilla.org][irc], which we\n+can access through [Mibbit][mibbit]. Then we'll be chatting with other\n+Rustaceans (a silly nickname we call ourselves) who can help us out. Other great\n+resources include [the user\u2019s forum][users] and [Stack Overflow][stackoverflow].\n \n+[irc-beginners]: irc://irc.mozilla.org/#rust-beginners\n [irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-beginners,%23rust\n [users]: https://users.rust-lang.org/\n [stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n "}, {"sha": "691301946de4b0ff452ca7009249e5689cf40aa8", "filename": "src/doc/nomicon/vec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fdoc%2Fnomicon%2Fvec.md", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fdoc%2Fnomicon%2Fvec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec.md?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -2,7 +2,7 @@\n \n To bring everything together, we're going to write `std::Vec` from scratch.\n Because all the best tools for writing unsafe code are unstable, this\n-project will only work on nightly (as of Rust 1.2.0). With the exception of the\n+project will only work on nightly (as of Rust 1.9.0). With the exception of the\n allocator API, much of the unstable code we'll use is expected to be stabilized\n in a similar form as it is today.\n "}, {"sha": "b2cbc29b1c74c146bfef4bb62a6649eb80f6fe54", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -147,8 +147,8 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n use default::Default;\n-use marker::{Copy, Send, Sync, Sized};\n-use ops::{Deref, DerefMut, Drop, FnOnce};\n+use marker::{Copy, Send, Sync, Sized, Unsize};\n+use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n use option::Option;\n use option::Option::{None, Some};\n \n@@ -634,6 +634,9 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n+\n impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// Make a new `RefMut` for a component of the borrowed data, e.g. an enum\n     /// variant.\n@@ -766,6 +769,9 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n+\n /// The core primitive for interior mutability in Rust.\n ///\n /// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the"}, {"sha": "d2e98a795d935cb41f5250a1fb7503321c5c59b8", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -695,7 +695,7 @@ impl AtomicIsize {\n         unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }\n     }\n \n-    /// Stores a value into the `isize if the current value is the same as the `current` value.\n+    /// Stores a value into the `isize` if the current value is the same as the `current` value.\n     ///\n     /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The"}, {"sha": "c0b22274ee9d628f09c36b4b7081629844d102f5", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -261,3 +261,23 @@ fn refcell_unsized() {\n     let comp: &mut [i32] = &mut [4, 2, 5];\n     assert_eq!(&*cell.borrow(), comp);\n }\n+\n+#[test]\n+fn refcell_ref_coercion() {\n+    let cell: RefCell<[i32; 3]> = RefCell::new([1, 2, 3]);\n+    {\n+        let mut cellref: RefMut<[i32; 3]> = cell.borrow_mut();\n+        cellref[0] = 4;\n+        let mut coerced: RefMut<[i32]> = cellref;\n+        coerced[2] = 5;\n+    }\n+    {\n+        let comp: &mut [i32] = &mut [4, 2, 5];\n+        let cellref: Ref<[i32; 3]> = cell.borrow();\n+        assert_eq!(&*cellref, comp);\n+        let coerced: Ref<[i32]> = cellref;\n+        assert_eq!(&*coerced, comp);\n+    }\n+}\n+\n+"}, {"sha": "6f06efd0f9f2659a272b1b4b0eb14037e3202fe4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -1033,6 +1033,47 @@ fn main() {\n     some_func(5i32); // ok!\n }\n ```\n+\n+Or in a generic context, an erroneous code example would look like:\n+```compile_fail\n+fn some_func<T>(foo: T) {\n+    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n+                           //        implemented for the type `T`\n+}\n+\n+fn main() {\n+    // We now call the method with the i32 type,\n+    // which *does* implement the Debug trait.\n+    some_func(5i32);\n+}\n+```\n+\n+Note that the error here is in the definition of the generic function: Although\n+we only call it with a parameter that does implement `Debug`, the compiler\n+still rejects the function: It must work with all possible input types. In\n+order to make this example compile, we need to restrict the generic type we're\n+accepting:\n+```\n+use std::fmt;\n+\n+// Restrict the input type to types that implement Debug.\n+fn some_func<T: fmt::Debug>(foo: T) {\n+    println!(\"{:?}\", foo);\n+}\n+\n+fn main() {\n+    // Calling the method is still fine, as i32 implements Debug.\n+    some_func(5i32);\n+\n+    // This would fail to compile now:\n+    // struct WithoutDebug;\n+    // some_func(WithoutDebug);\n+}\n+\n+Rust only looks at the signature of the called function, as such it must\n+already specify all requirements that will be used for every type parameter.\n+```\n+\n \"##,\n \n E0281: r##\""}, {"sha": "86f8635f58d9a755e1616827bd2d052880704dce", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -931,7 +931,6 @@ pub struct TypeBinding {\n }\n \n \n-// NB PartialEq method appears below.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Ty {\n     pub id: NodeId,"}, {"sha": "4d806bda4842617ff1878e0a294d80ef42821bfc", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -41,7 +41,6 @@ use super::probe::Mode;\n \n fn is_fn_ty<'a, 'tcx>(ty: &Ty<'tcx>, fcx: &FnCtxt<'a, 'tcx>, span: Span) -> bool {\n     let cx = fcx.tcx();\n-    println!(\"{:?}\", ty);\n     match ty.sty {\n         // Not all of these (e.g. unsafe fns) implement FnOnce\n         // so we look for these beforehand"}, {"sha": "c98e42faba7c2591d22ab452dae488d383661ab3", "filename": "src/libstd/sys/unix/ext/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -30,7 +30,7 @@ pub trait JoinHandleExt {\n     ///\n     /// This function **transfers ownership** of the underlying pthread_t to\n     /// the caller. Callers are then the unique owners of the pthread_t and\n-    /// must either detech or join the pthread_t once it's no longer needed.\n+    /// must either detach or join the pthread_t once it's no longer needed.\n     fn into_pthread_t(self) -> RawPthread;\n }\n "}, {"sha": "d1a2ab464cba7e45124177c8f9741704872d589e", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/18172d1375274050fbe37acd9b3c884f2caaacb9/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=18172d1375274050fbe37acd9b3c884f2caaacb9", "patch": "@@ -6,6 +6,7 @@ S 2016-03-18 235d774\n   winnt-i386 7703869608cc4192b8f1943e51b19ba1a03c0110\n   winnt-x86_64 8512b5ecc0c53a2cd3552e4f5688577de95cd978\n   openbsd-x86_64 c5b6feda38138a12cd5c05574b585dadebbb5e87\n+  freebsd-x86_64 390b9a9f60f3d0d6a52c04d939a0355f572d03b3\n \n S 2016-02-17 4d3eebf\n   linux-i386 5f194aa7628c0703f0fd48adc4ec7f3cc64b98c7"}]}