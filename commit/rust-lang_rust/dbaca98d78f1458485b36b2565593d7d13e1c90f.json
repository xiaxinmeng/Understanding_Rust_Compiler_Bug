{"sha": "dbaca98d78f1458485b36b2565593d7d13e1c90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWNhOThkNzhmMTQ1ODQ4NWIzNmIyNTY1NTkzZDdkMTNlMWM5MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-05T11:37:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-05T11:37:58Z"}, "message": "auto merge of #8279 : pcwalton/rust/no-main, r=brson\n\nUseful for SDL and possibly Android too.\r\n\r\nr? @brson", "tree": {"sha": "d0ed0e0a8f4c34709e37f93f870b5e0a4d58a8b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ed0e0a8f4c34709e37f93f870b5e0a4d58a8b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbaca98d78f1458485b36b2565593d7d13e1c90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaca98d78f1458485b36b2565593d7d13e1c90f", "html_url": "https://github.com/rust-lang/rust/commit/dbaca98d78f1458485b36b2565593d7d13e1c90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbaca98d78f1458485b36b2565593d7d13e1c90f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db061160dc4a1925f27371fc220c799b8d86805", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db061160dc4a1925f27371fc220c799b8d86805", "html_url": "https://github.com/rust-lang/rust/commit/4db061160dc4a1925f27371fc220c799b8d86805"}, {"sha": "9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "html_url": "https://github.com/rust-lang/rust/commit/9c08db58ab8457878ce67c99e1e7a32ce7ee053a"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "d725e2db1eba109474b71b0a65eaf6d655fd8e6c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=dbaca98d78f1458485b36b2565593d7d13e1c90f", "patch": "@@ -179,7 +179,8 @@ pub struct crate_metadata {\n #[deriving(Eq)]\n pub enum EntryFnType {\n     EntryMain,\n-    EntryStart\n+    EntryStart,\n+    EntryNone,\n }\n \n pub struct Session_ {"}, {"sha": "34aeaf8a6cebec8fdff7622bf60eee665d54b07c", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=dbaca98d78f1458485b36b2565593d7d13e1c90f", "patch": "@@ -50,6 +50,12 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n         return;\n     }\n \n+    // If the user wants no main function at all, then stop here.\n+    if attr::contains_name(crate.attrs, \"no_main\") {\n+        *session.entry_type = Some(session::EntryNone);\n+        return\n+    }\n+\n     let ctxt = @mut EntryContext {\n         session: session,\n         ast_map: ast_map,"}, {"sha": "0a28da5f88a7ce0fa575e7927cc18ab9c71b336c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dbaca98d78f1458485b36b2565593d7d13e1c90f", "patch": "@@ -2268,13 +2268,16 @@ pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool {\n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n pub fn create_entry_wrapper(ccx: @mut CrateContext,\n-                           _sp: span, main_llfn: ValueRef) {\n+                           _sp: span,\n+                           main_llfn: ValueRef) {\n     let et = ccx.sess.entry_type.unwrap();\n-    if et == session::EntryMain {\n-        let llfn = create_main(ccx, main_llfn);\n-        create_entry_fn(ccx, llfn, true);\n-    } else {\n-        create_entry_fn(ccx, main_llfn, false);\n+    match et {\n+        session::EntryMain => {\n+            let llfn = create_main(ccx, main_llfn);\n+            create_entry_fn(ccx, llfn, true);\n+        }\n+        session::EntryStart => create_entry_fn(ccx, main_llfn, false),\n+        session::EntryNone => {}    // Do nothing.\n     }\n \n     fn create_main(ccx: @mut CrateContext, main_llfn: ValueRef) -> ValueRef {"}, {"sha": "e6c27fc8f836d1ee5db0a598ae661a551a939885", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaca98d78f1458485b36b2565593d7d13e1c90f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=dbaca98d78f1458485b36b2565593d7d13e1c90f", "patch": "@@ -408,9 +408,10 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n           Some((id, sp)) => match *tcx.sess.entry_type {\n               Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),\n               Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n+              Some(session::EntryNone) => {}\n               None => tcx.sess.bug(\"entry function without a type\")\n           },\n-          None => tcx.sess.bug(\"type checking without entry function\")\n+          None => {}\n         }\n     }\n }"}]}