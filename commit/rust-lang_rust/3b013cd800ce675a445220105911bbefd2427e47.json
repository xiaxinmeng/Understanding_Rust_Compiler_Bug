{"sha": "3b013cd800ce675a445220105911bbefd2427e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDEzY2Q4MDBjZTY3NWE0NDUyMjAxMDU5MTFiYmVmZDI0MjdlNDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-18T18:26:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-18T18:27:37Z"}, "message": "rustc: Change all non-keyword uses of \"link\"", "tree": {"sha": "4fb4cb8cac3c8d861e20a4da7fab48dcf54ef247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb4cb8cac3c8d861e20a4da7fab48dcf54ef247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b013cd800ce675a445220105911bbefd2427e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b013cd800ce675a445220105911bbefd2427e47", "html_url": "https://github.com/rust-lang/rust/commit/3b013cd800ce675a445220105911bbefd2427e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b013cd800ce675a445220105911bbefd2427e47/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859a892eb019c115ed8fc790903c8f459743a68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/859a892eb019c115ed8fc790903c8f459743a68a", "html_url": "https://github.com/rust-lang/rust/commit/859a892eb019c115ed8fc790903c8f459743a68a"}], "stats": {"total": 173, "additions": 88, "deletions": 85}, "files": [{"sha": "09f822e0e388c5e29790dae2aa90763de7c8a05f", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -141,7 +141,7 @@ priv impl<T> DList<T> {\n     // Link two nodes together. If either of them are 'none', also sets\n     // the head and/or tail pointers appropriately.\n     #[inline(always)]\n-    fn link(+before: DListLink<T>, +after: DListLink<T>) {\n+    fn link_nodes(+before: DListLink<T>, +after: DListLink<T>) {\n         match before {\n             Some(neighbour) => neighbour.next = after,\n             None            => self.hd        = after\n@@ -155,35 +155,35 @@ priv impl<T> DList<T> {\n     fn unlink(nobe: DListNode<T>) {\n         self.assert_mine(nobe);\n         assert self.size > 0;\n-        self.link(nobe.prev, nobe.next);\n+        self.link_nodes(nobe.prev, nobe.next);\n         nobe.prev = None; // Release extraneous references.\n         nobe.next = None;\n         nobe.linked = false;\n         self.size -= 1;\n     }\n \n     fn add_head(+nobe: DListLink<T>) {\n-        self.link(nobe, self.hd); // Might set tail too.\n+        self.link_nodes(nobe, self.hd); // Might set tail too.\n         self.hd = nobe;\n         self.size += 1;\n     }\n     fn add_tail(+nobe: DListLink<T>) {\n-        self.link(self.tl, nobe); // Might set head too.\n+        self.link_nodes(self.tl, nobe); // Might set head too.\n         self.tl = nobe;\n         self.size += 1;\n     }\n     fn insert_left(nobe: DListLink<T>, neighbour: DListNode<T>) {\n         self.assert_mine(neighbour);\n         assert self.size > 0;\n-        self.link(neighbour.prev, nobe);\n-        self.link(nobe, Some(neighbour));\n+        self.link_nodes(neighbour.prev, nobe);\n+        self.link_nodes(nobe, Some(neighbour));\n         self.size += 1;\n     }\n     fn insert_right(neighbour: DListNode<T>, nobe: DListLink<T>) {\n         self.assert_mine(neighbour);\n         assert self.size > 0;\n-        self.link(nobe, neighbour.next);\n-        self.link(Some(neighbour), nobe);\n+        self.link_nodes(nobe, neighbour.next);\n+        self.link_nodes(Some(neighbour), nobe);\n         self.size += 1;\n     }\n }\n@@ -315,7 +315,7 @@ impl<T> DList<T> {\n             fail ~\"Cannot append a dlist to itself!\"\n         }\n         if them.len() > 0 {\n-            self.link(self.tl, them.hd);\n+            self.link_nodes(self.tl, them.hd);\n             self.tl    = them.tl;\n             self.size += them.size;\n             them.size  = 0;\n@@ -332,7 +332,7 @@ impl<T> DList<T> {\n             fail ~\"Cannot prepend a dlist to itself!\"\n         }\n         if them.len() > 0 {\n-            self.link(them.tl, self.hd);\n+            self.link_nodes(them.tl, self.hd);\n             self.hd    = them.hd;\n             self.size += them.size;\n             them.size  = 0;\n@@ -366,11 +366,11 @@ impl<T> DList<T> {\n \n     /// Iterate over nodes.\n     pure fn each_node(f: fn(DListNode<T>) -> bool) {\n-        let mut link = self.peek_n();\n-        while link.is_some() {\n-            let nobe = link.get();\n+        let mut link_node = self.peek_n();\n+        while link_node.is_some() {\n+            let nobe = link_node.get();\n             if !f(nobe) { break; }\n-            link = nobe.next_link();\n+            link_node = nobe.next_link();\n         }\n     }\n \n@@ -381,10 +381,10 @@ impl<T> DList<T> {\n         }\n         // iterate forwards\n         let mut count = 0;\n-        let mut link = self.peek_n();\n-        let mut rabbit = link;\n-        while option::is_some(link) {\n-            let nobe = option::get(link);\n+        let mut link_node = self.peek_n();\n+        let mut rabbit = link_node;\n+        while option::is_some(link_node) {\n+            let nobe = option::get(link_node);\n             assert nobe.linked;\n             // check cycle\n             if option::is_some(rabbit) { rabbit = option::get(rabbit).next; }\n@@ -393,15 +393,15 @@ impl<T> DList<T> {\n                 assert !box::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n-            link = nobe.next_link();\n+            link_node = nobe.next_link();\n             count += 1;\n         }\n         assert count == self.len();\n         // iterate backwards - some of this is probably redundant.\n-        link = self.peek_tail_n();\n-        rabbit = link;\n-        while option::is_some(link) {\n-            let nobe = option::get(link);\n+        link_node = self.peek_tail_n();\n+        rabbit = link_node;\n+        while option::is_some(link_node) {\n+            let nobe = option::get(link_node);\n             assert nobe.linked;\n             // check cycle\n             if option::is_some(rabbit) { rabbit = option::get(rabbit).prev; }\n@@ -410,7 +410,7 @@ impl<T> DList<T> {\n                 assert !box::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n-            link = nobe.prev_link();\n+            link_node = nobe.prev_link();\n             count -= 1;\n         }\n         assert count == 0;"}, {"sha": "966cd138d4cd7a08483b7ead08f57f961f06cf80", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -9,9 +9,9 @@ type IMPL_T<A> = dlist::DList<A>;\n  * node is forbidden.\n  */\n pure fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {\n-    let mut link = self.peek_n();\n-    while option::is_some(link) {\n-        let nobe = option::get(link);\n+    let mut link_node = self.peek_n();\n+    while option::is_some(link_node) {\n+        let nobe = option::get(link_node);\n         assert nobe.linked;\n         if !f(nobe.data) { break; }\n         // Check (weakly) that the user didn't do a remove.\n@@ -25,7 +25,7 @@ pure fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {\n                || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"), *nobe)))) {\n             fail ~\"Removing a dlist node during iteration is forbidden!\"\n         }\n-        link = nobe.next_link();\n+        link_node = nobe.next_link();\n     }\n }\n "}, {"sha": "f06a2c7588939df5333d7ddaeb36c80ac8d11998", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -1033,7 +1033,8 @@ mod funcs {\n             fn getppid() -> pid_t;\n             fn getuid() -> uid_t;\n             fn isatty(fd: c_int) -> c_int;\n-            fn link(src: *c_char, dst: *c_char) -> c_int;\n+            #[link_name=\"link\"]\n+            fn lnk(src: *c_char, dst: *c_char) -> c_int;\n             fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;\n             fn pathconf(path: *c_char, name: c_int) -> c_long;\n             fn pause() -> c_int;"}, {"sha": "0079ec9f363a73e07d39920003d58553e027b628", "filename": "src/rustc/back/linkage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fback%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fback%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flinkage.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "previous_filename": "src/rustc/back/link.rs"}, {"sha": "b476fa5217b2b23b486bd6a362aafa1a2b5438c2", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -7,7 +7,7 @@ use syntax::attr;\n use middle::{trans, freevars, kind, ty, typeck, lint};\n use syntax::print::{pp, pprust};\n use util::ppaux;\n-use back::link;\n+use back::linkage;\n use result::{Ok, Err};\n use std::getopts;\n use io::WriterUtil;\n@@ -258,20 +258,20 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                                  exp_map, exp_map2, maps));\n \n     time(time_passes, ~\"LLVM passes\", ||\n-        link::write::run_passes(sess, llmod,\n-                                &outputs.obj_filename));\n+        linkage::write::run_passes(sess, llmod,\n+                                   &outputs.obj_filename));\n \n     let stop_after_codegen =\n-        sess.opts.output_type != link::output_type_exe ||\n-        (sess.opts.static && sess.building_library)    ||\n+        sess.opts.output_type != linkage::output_type_exe ||\n+        (sess.opts.static && sess.building_library)       ||\n         sess.opts.jit;\n \n     if stop_after_codegen { return {crate: crate, tcx: Some(ty_cx)}; }\n \n     time(time_passes, ~\"linking\", ||\n-         link::link_binary(sess,\n-                           &outputs.obj_filename,\n-                           &outputs.out_filename, link_meta));\n+         linkage::link_binary(sess,\n+                              &outputs.obj_filename,\n+                              &outputs.out_filename, link_meta));\n \n     return {crate: crate, tcx: Some(ty_cx)};\n }\n@@ -492,17 +492,19 @@ fn build_session_options(binary: ~str,\n     let jit = opt_present(matches, ~\"jit\");\n     let output_type =\n         if parse_only || no_trans {\n-            link::output_type_none\n+            linkage::output_type_none\n         } else if opt_present(matches, ~\"S\") &&\n                   opt_present(matches, ~\"emit-llvm\") {\n-            link::output_type_llvm_assembly\n+            linkage::output_type_llvm_assembly\n         } else if opt_present(matches, ~\"S\") {\n-            link::output_type_assembly\n+            linkage::output_type_assembly\n         } else if opt_present(matches, ~\"c\") {\n-            link::output_type_object\n+            linkage::output_type_object\n         } else if opt_present(matches, ~\"emit-llvm\") {\n-            link::output_type_bitcode\n-        } else { link::output_type_exe };\n+            linkage::output_type_bitcode\n+        } else {\n+            linkage::output_type_exe\n+        };\n     let extra_debuginfo = opt_present(matches, ~\"xg\");\n     let debuginfo = opt_present(matches, ~\"g\") || extra_debuginfo;\n     let sysroot_opt = getopts::opt_maybe_str(matches, ~\"sysroot\");\n@@ -511,7 +513,8 @@ fn build_session_options(binary: ~str,\n     let save_temps = getopts::opt_present(matches, ~\"save-temps\");\n     match output_type {\n       // unless we're emitting huamn-readable assembly, omit comments.\n-      link::output_type_llvm_assembly | link::output_type_assembly => (),\n+      linkage::output_type_llvm_assembly |\n+      linkage::output_type_assembly => (),\n       _ => debugging_opts |= session::no_asm_comments\n     }\n     let opt_level = {\n@@ -657,18 +660,18 @@ fn build_output_filenames(input: input,\n     let out_path;\n     let sopts = sess.opts;\n     let stop_after_codegen =\n-        sopts.output_type != link::output_type_exe ||\n+        sopts.output_type != linkage::output_type_exe ||\n             sopts.static && sess.building_library;\n \n \n     let obj_suffix =\n         match sopts.output_type {\n-          link::output_type_none => ~\"none\",\n-          link::output_type_bitcode => ~\"bc\",\n-          link::output_type_assembly => ~\"s\",\n-          link::output_type_llvm_assembly => ~\"ll\",\n+          linkage::output_type_none => ~\"none\",\n+          linkage::output_type_bitcode => ~\"bc\",\n+          linkage::output_type_assembly => ~\"s\",\n+          linkage::output_type_llvm_assembly => ~\"ll\",\n           // Object and exe output both use the '.o' extension here\n-          link::output_type_object | link::output_type_exe => ~\"o\"\n+          linkage::output_type_object | linkage::output_type_exe => ~\"o\"\n         };\n \n     match *ofile {"}, {"sha": "c4dde985bdba20c89483a18628166ef8c7ae8a07", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{int_ty, uint_ty, float_ty};\n use syntax::parse::parse_sess;\n use metadata::filesearch;\n use back::target_strs;\n-use back::link;\n+use back::linkage;\n use middle::lint;\n \n \n@@ -113,7 +113,7 @@ type options =\n      lint_opts: ~[(lint::lint, lint::level)],\n      save_temps: bool,\n      jit: bool,\n-     output_type: back::link::output_type,\n+     output_type: back::linkage::output_type,\n      addl_lib_search_paths: ~[Path],\n      maybe_sysroot: Option<Path>,\n      target_triple: ~str,\n@@ -256,7 +256,7 @@ fn basic_options() -> @options {\n         lint_opts: ~[],\n         save_temps: false,\n         jit: false,\n-        output_type: link::output_type_exe,\n+        output_type: linkage::output_type_exe,\n         addl_lib_search_paths: ~[],\n         maybe_sysroot: None,\n         target_triple: driver::host_triple(),"}, {"sha": "f72b4214abe6837d478d9adcb57ecfd8f4856122", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -20,7 +20,7 @@ use std::map::{int_hash, str_hash};\n use driver::session;\n use session::session;\n use syntax::attr;\n-use back::{link, abi, upcall};\n+use back::{linkage, abi, upcall};\n use syntax::{ast, ast_util, codemap, ast_map};\n use ast_util::{local_def, path_to_ident};\n use syntax::visit;\n@@ -32,7 +32,7 @@ use util::common::is_main_name;\n use lib::llvm::{llvm, mk_target_data, mk_type_names};\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n use lib::llvm::{True, False};\n-use link::{mangle_internal_name_by_type_only,\n+use linkage::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_seq,\n               mangle_internal_name_by_path,\n               mangle_internal_name_by_path_and_seq,\n@@ -2571,7 +2571,7 @@ fn trans_crate(sess: session::session,\n \n     let symbol_hasher = @hash::default_state();\n     let link_meta =\n-        link::build_link_meta(sess, *crate, output, symbol_hasher);\n+        linkage::build_link_meta(sess, *crate, output, symbol_hasher);\n     let reachable = reachable::find_reachable(crate.node.module, emap, tcx,\n                                               maps.method_map);\n "}, {"sha": "abc9cfecfd678701c90405cd224d86d1cc5d0f38", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -10,7 +10,7 @@ use type_of::*;\n use back::abi;\n use syntax::codemap::span;\n use syntax::print::pprust::expr_to_str;\n-use back::link::{\n+use back::linkage::{\n     mangle_internal_name_by_path,\n     mangle_internal_name_by_path_and_seq};\n use util::ppaux::ty_to_str;"}, {"sha": "f3fc4bfaa26ac5e4856f5925b65e070c528382fc", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -10,7 +10,7 @@ use syntax::{ast, ast_map};\n use driver::session;\n use session::session;\n use middle::ty;\n-use back::{link, abi, upcall};\n+use back::{linkage, abi, upcall};\n use syntax::codemap::span;\n use lib::llvm::{llvm, target_data, type_names, associate_type,\n                    name_has_type};"}, {"sha": "7eda33fb2fb07eaf62325d861281816f28411eec", "filename": "src/rustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -165,7 +165,7 @@ fn trans_log(log_ex: @ast::expr,\n     let global = if ccx.module_data.contains_key(modname) {\n         ccx.module_data.get(modname)\n     } else {\n-        let s = link::mangle_internal_name_by_path_and_seq(\n+        let s = linkage::mangle_internal_name_by_path_and_seq(\n             ccx, modpath, ~\"loglevel\");\n         let global = str::as_c_str(s, |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, T_i32(), buf)"}, {"sha": "d267599095abffb666e9b5a1401ca1acda004664", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -10,7 +10,7 @@ use lib::llvm::{ llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double,\n     StructRetAttribute, ByValAttribute,\n     SequentiallyConsistent, Acquire, Release, Xchg };\n use syntax::{ast, ast_util};\n-use back::{link, abi};\n+use back::{linkage, abi};\n use common::*;\n use build::*;\n use base::*;\n@@ -1007,7 +1007,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n                      id: ast::node_id) -> ValueRef {\n         let _icx = ccx.insn_ctxt(\"foreign::foreign::build_rust_fn\");\n         let t = ty::node_id_to_type(ccx.tcx, id);\n-        let ps = link::mangle_internal_name_by_path(\n+        let ps = linkage::mangle_internal_name_by_path(\n             ccx, vec::append_one(path, ast_map::path_name(\n                 syntax::parse::token::special_idents::clownshoe_abi\n             )));\n@@ -1046,7 +1046,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n             // is wired directly into the return slot in the shim struct\n         }\n \n-        let shim_name = link::mangle_internal_name_by_path(\n+        let shim_name = linkage::mangle_internal_name_by_path(\n             ccx, vec::append_one(path, ast_map::path_name(\n                 syntax::parse::token::special_idents::clownshoe_stack_shim\n             )));"}, {"sha": "ddb79f8cd4a7de0dae692f15974d59b1a72f4c01", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -8,7 +8,7 @@ use syntax::{ast, ast_map};\n use ast_map::{path, path_mod, path_name, node_id_to_str};\n use syntax::ast_util::local_def;\n use metadata::csearch;\n-use back::{link, abi};\n+use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n use lib::llvm::llvm::LLVMGetParam;"}, {"sha": "239988c06e55e41afe7941d158c45cebc6b58be3", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -9,7 +9,7 @@ use base::{trans_item, get_item_val, no_self, self_arg, trans_fn,\n               get_insn_ctxt};\n use syntax::parse::token::special_idents;\n use type_of::type_of_fn_from_ty;\n-use back::link::mangle_exported_name;\n+use back::linkage::mangle_exported_name;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n \n fn monomorphic_fn(ccx: @crate_ctxt,"}, {"sha": "46b2ff1fa5099ff509c2d5617cac9df03ccfc608", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -121,7 +121,7 @@ mod front {\n }\n \n mod back {\n-    mod link;\n+    mod linkage;\n     mod abi;\n     mod upcall;\n     mod x86;"}, {"sha": "1f6ba5ed90759adeb594760c4ce2a857f3ecdc9a", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -17,7 +17,6 @@ use syntax::diagnostic::handler;\n use syntax::ast;\n use syntax::codemap;\n use syntax::ast_map;\n-use rustc::back::link;\n use rustc::metadata::filesearch;\n use rustc::front;\n "}, {"sha": "154a7f1c6d0a603b14b6895eb8ed94b1612fe86a", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -334,21 +334,21 @@ impl index : cmp::Eq {\n  * * kind - The type of thing being indexed, e.g. 'Module'\n  * * name - The name of the thing\n  * * brief - The brief description\n- * * link - A format-specific string representing the link target\n+ * * lnk - A format-specific string representing the link target\n  */\n type index_entry = {\n     kind: ~str,\n     name: ~str,\n     brief: Option<~str>,\n-    link: ~str\n+    lnk: ~str\n };\n \n impl index_entry : cmp::Eq {\n     pure fn eq(&&other: index_entry) -> bool {\n         self.kind == other.kind &&\n         self.name == other.name &&\n         self.brief == other.brief &&\n-        self.link == other.link\n+        self.lnk == other.lnk\n     }\n     pure fn ne(&&other: index_entry) -> bool { !self.eq(other) }\n }"}, {"sha": "067951ef6f9fd444d75c55b3aa1fb550b8c46345", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -78,7 +78,7 @@ fn item_to_entry(\n     doc: doc::itemtag,\n     config: config::config\n ) -> doc::index_entry {\n-    let link = match doc {\n+    let lnk = match doc {\n       doc::modtag(_) | doc::nmodtag(_)\n       if config.output_style == config::doc_per_mod => {\n         markdown_writer::make_filename(config, doc::itempage(doc)).to_str()\n@@ -92,7 +92,7 @@ fn item_to_entry(\n         kind: markdown_pass::header_kind(doc),\n         name: markdown_pass::header_name(doc),\n         brief: doc.brief(),\n-        link: link\n+        lnk: lnk\n     }\n }\n \n@@ -156,13 +156,13 @@ fn should_index_mod_contents() {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n-        link: ~\"#module-a\"\n+        lnk: ~\"#module-a\"\n     };\n     assert option::get(doc.cratemod().index).entries[1] == {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n-        link: ~\"#function-b\"\n+        lnk: ~\"#function-b\"\n     };\n }\n \n@@ -176,13 +176,13 @@ fn should_index_mod_contents_multi_page() {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n-        link: ~\"a.html\"\n+        lnk: ~\"a.html\"\n     };\n     assert option::get(doc.cratemod().index).entries[1] == {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n-        link: ~\"#function-b\"\n+        lnk: ~\"#function-b\"\n     };\n }\n \n@@ -196,7 +196,7 @@ fn should_index_foreign_mod_pages() {\n         kind: ~\"Foreign module\",\n         name: ~\"a\",\n         brief: None,\n-        link: ~\"a.html\"\n+        lnk: ~\"a.html\"\n     };\n }\n \n@@ -220,7 +220,7 @@ fn should_index_foreign_mod_contents() {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n-        link: ~\"#function-b\"\n+        lnk: ~\"#function-b\"\n     };\n }\n "}, {"sha": "726bbc562377929da5df0d75c5c0f7aae8615edc", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -398,7 +398,7 @@ fn write_index(ctxt: ctxt, index: doc::index) {\n \n     for index.entries.each |entry| {\n         let header = header_text_(entry.kind, entry.name);\n-        let id = entry.link;\n+        let id = entry.lnk;\n         if option::is_some(entry.brief) {\n             ctxt.w.write_line(fmt!(\"* [%s](%s) - %s\",\n                                    header, id, option::get(entry.brief)));"}, {"sha": "e07c066f9c996d4a6d5eda643cb85a54ce05f92f", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b013cd800ce675a445220105911bbefd2427e47/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b013cd800ce675a445220105911bbefd2427e47/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=3b013cd800ce675a445220105911bbefd2427e47", "patch": "@@ -2,14 +2,14 @@\n // -*- rust -*-\n extern mod std;\n \n-type cell = {mut c: @list};\n+type Cell = {mut c: @List};\n \n-enum list { link(@cell), nil, }\n+enum List { Link(@Cell), Nil, }\n \n fn main() {\n-    let first: @cell = @{mut c: @nil()};\n-    let second: @cell = @{mut c: @link(first)};\n-    first._0 = @link(second);\n+    let first: @Cell = @{mut c: @Nil()};\n+    let second: @Cell = @{mut c: @Link(first)};\n+    first._0 = @Link(second);\n     sys.rustrt.gc();\n-    let third: @cell = @{mut c: @nil()};\n-}\n\\ No newline at end of file\n+    let third: @Cell = @{mut c: @Nil()};\n+}"}]}