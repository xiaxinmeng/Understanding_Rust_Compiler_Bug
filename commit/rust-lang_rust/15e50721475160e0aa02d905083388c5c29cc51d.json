{"sha": "15e50721475160e0aa02d905083388c5c29cc51d", "node_id": "C_kwDOAAsO6NoAKDE1ZTUwNzIxNDc1MTYwZTBhYTAyZDkwNTA4MzM4OGM1YzI5Y2M1MWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-23T15:38:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-23T16:35:49Z"}, "message": "Do not bother optimizing impossible functions.", "tree": {"sha": "5726de99b5c4d95f7c91b1ade38850864ca2ef6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5726de99b5c4d95f7c91b1ade38850864ca2ef6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e50721475160e0aa02d905083388c5c29cc51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e50721475160e0aa02d905083388c5c29cc51d", "html_url": "https://github.com/rust-lang/rust/commit/15e50721475160e0aa02d905083388c5c29cc51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e50721475160e0aa02d905083388c5c29cc51d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e540df7931a32ca286eb2e907afde78b718fd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e540df7931a32ca286eb2e907afde78b718fd17", "html_url": "https://github.com/rust-lang/rust/commit/9e540df7931a32ca286eb2e907afde78b718fd17"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "29de1873365ed6f614df4a23e43b9735387d3ebd", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/15e50721475160e0aa02d905083388c5c29cc51d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e50721475160e0aa02d905083388c5c29cc51d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=15e50721475160e0aa02d905083388c5c29cc51d", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisi\n use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n use rustc_target::abi::{self, Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n-use rustc_trait_selection::traits;\n \n use crate::MirPass;\n use rustc_const_eval::interpret::{\n@@ -84,42 +83,6 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n-        // Check if it's even possible to satisfy the 'where' clauses\n-        // for this item.\n-        // This branch will never be taken for any normal function.\n-        // However, it's possible to `#!feature(trivial_bounds)]` to write\n-        // a function with impossible to satisfy clauses, e.g.:\n-        // `fn foo() where String: Copy {}`\n-        //\n-        // We don't usually need to worry about this kind of case,\n-        // since we would get a compilation error if the user tried\n-        // to call it. However, since we can do const propagation\n-        // even without any calls to the function, we need to make\n-        // sure that it even makes sense to try to evaluate the body.\n-        // If there are unsatisfiable where clauses, then all bets are\n-        // off, and we just give up.\n-        //\n-        // We manually filter the predicates, skipping anything that's not\n-        // \"global\". We are in a potentially generic context\n-        // (e.g. we are evaluating a function without substituting generic\n-        // parameters, so this filtering serves two purposes:\n-        //\n-        // 1. We skip evaluating any predicates that we would\n-        // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n-        // 2. We avoid trying to normalize predicates involving generic\n-        // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n-        // the normalization code (leading to cycle errors), since\n-        // it's usually never invoked in this way.\n-        let predicates = tcx\n-            .predicates_of(def_id.to_def_id())\n-            .predicates\n-            .iter()\n-            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-        if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n-            trace!(\"ConstProp skipped for {:?}: found unsatisfiable predicates\", def_id);\n-            return;\n-        }\n-\n         trace!(\"ConstProp starting for {:?}\", def_id);\n \n         let dummy_body = &Body::new("}, {"sha": "3def30b51b7727a0fe029beea0337adcc60a39fb", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/15e50721475160e0aa02d905083388c5c29cc51d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e50721475160e0aa02d905083388c5c29cc51d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=15e50721475160e0aa02d905083388c5c29cc51d", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n+use rustc_trait_selection::traits;\n \n #[macro_use]\n mod pass_manager;\n@@ -481,6 +482,54 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         WithMinOptLevel(1, x)\n     }\n \n+    // Check if it's even possible to satisfy the 'where' clauses\n+    // for this item.\n+    // This branch will never be taken for any normal function.\n+    // However, it's possible to `#!feature(trivial_bounds)]` to write\n+    // a function with impossible to satisfy clauses, e.g.:\n+    // `fn foo() where String: Copy {}`\n+    //\n+    // We don't usually need to worry about this kind of case,\n+    // since we would get a compilation error if the user tried\n+    // to call it. However, since we can do const propagation\n+    // even without any calls to the function, we need to make\n+    // sure that it even makes sense to try to evaluate the body.\n+    // If there are unsatisfiable where clauses, then all bets are\n+    // off, and we just give up.\n+    //\n+    // We manually filter the predicates, skipping anything that's not\n+    // \"global\". We are in a potentially generic context\n+    // (e.g. we are evaluating a function without substituting generic\n+    // parameters, so this filtering serves two purposes:\n+    //\n+    // 1. We skip evaluating any predicates that we would\n+    // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n+    // 2. We avoid trying to normalize predicates involving generic\n+    // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n+    // the normalization code (leading to cycle errors), since\n+    // it's usually never invoked in this way.\n+    let predicates = tcx\n+        .predicates_of(body.source.def_id())\n+        .predicates\n+        .iter()\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n+    if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n+        trace!(\"optimizations skipped for {:?}: found unsatisfiable predicates\", body.source);\n+        pm::run_passes(\n+            tcx,\n+            body,\n+            &[\n+                &reveal_all::RevealAll,\n+                &simplify::SimplifyCfg::Final,\n+                &simplify::SimplifyLocals::Final,\n+                // Dump the end result for testing and debugging purposes.\n+                &dump_mir::Marker(\"PreCodegen\"),\n+            ],\n+            Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n+        );\n+        return;\n+    }\n+\n     // The main optimizations that we do on MIR.\n     pm::run_passes(\n         tcx,"}]}