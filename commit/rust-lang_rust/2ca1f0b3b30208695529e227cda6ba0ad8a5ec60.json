{"sha": "2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTFmMGIzYjMwMjA4Njk1NTI5ZTIyN2NkYTZiYTBhZDhhNWVjNjA=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-21T01:09:19Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-21T01:09:19Z"}, "message": "Switch back to alloc_system", "tree": {"sha": "b5aa0963c780cfb58efdaa02b4adf8c8ad53b249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aa0963c780cfb58efdaa02b4adf8c8ad53b249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "html_url": "https://github.com/rust-lang/rust/commit/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7697c7277ea35e215c412b8d1216ca75bd1a6a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7697c7277ea35e215c412b8d1216ca75bd1a6a45", "html_url": "https://github.com/rust-lang/rust/commit/7697c7277ea35e215c412b8d1216ca75bd1a6a45"}], "stats": {"total": 55, "additions": 6, "deletions": 49}, "files": [{"sha": "4daa6cbb8465e58e7d939ef68617c46e0fc0b122", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 4, "deletions": 47, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "patch": "@@ -19,8 +19,7 @@\n             issue = \"27783\")]\n #![feature(allocator)]\n #![feature(staged_api)]\n-#![cfg_attr(target_os = \"redox\", feature(libc))]\n-#![cfg_attr(unix, feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values. In practice, the alignment is a\n@@ -72,49 +71,7 @@ pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n     imp::usable_size(size, align)\n }\n \n-#[cfg(target_os = \"redox\")]\n-mod imp {\n-    extern crate libc;\n-\n-    use core::cmp;\n-    use core::ptr;\n-    use MIN_ALIGN;\n-\n-    pub unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n-        libc::malloc(size as libc::size_t) as *mut u8\n-    }\n-\n-    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n-        if align <= MIN_ALIGN {\n-            libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n-        } else {\n-            let new_ptr = allocate(size, align);\n-            if !new_ptr.is_null() {\n-                ptr::copy(ptr, new_ptr, cmp::min(size, old_size));\n-                deallocate(ptr, old_size, align);\n-            }\n-            new_ptr\n-        }\n-    }\n-\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8,\n-                                     old_size: usize,\n-                                     _size: usize,\n-                                     _align: usize)\n-                                     -> usize {\n-        old_size\n-    }\n-\n-    pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {\n-        libc::free(ptr as *mut libc::c_void)\n-    }\n-\n-    pub fn usable_size(size: usize, _align: usize) -> usize {\n-        size\n-    }\n-}\n-\n-#[cfg(any(unix))]\n+#[cfg(any(unix, target_os = \"redox\"))]\n mod imp {\n     extern crate libc;\n \n@@ -130,7 +87,7 @@ mod imp {\n         }\n     }\n \n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"android\", target_os = \"redox\"))]\n     unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n         // On android we currently target API level 9 which unfortunately\n         // doesn't have the `posix_memalign` API used below. Instead we use\n@@ -152,7 +109,7 @@ mod imp {\n         libc::memalign(align as libc::size_t, size as libc::size_t) as *mut u8\n     }\n \n-    #[cfg(not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"android\", target_os = \"redox\")))]\n     unsafe fn aligned_malloc(size: usize, align: usize) -> *mut u8 {\n         let mut out = ptr::null_mut();\n         let ret = libc::posix_memalign(&mut out, align as libc::size_t, size as libc::size_t);"}, {"sha": "a04ec81e973bafe01a4a3910e1214223be8138b0", "filename": "src/librustc_back/target/redox_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1f0b3b30208695529e227cda6ba0ad8a5ec60/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fredox_base.rs?ref=2ca1f0b3b30208695529e227cda6ba0ad8a5ec60", "patch": "@@ -40,8 +40,8 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"redox\".to_string()),\n         linker_is_gnu: true,\n         no_default_libraries: true,\n-        lib_allocation_crate: \"ralloc\".to_string(),\n-        exe_allocation_crate: \"ralloc\".to_string(),\n+        lib_allocation_crate: \"alloc_system\".to_string(),\n+        exe_allocation_crate: \"alloc_system\".to_string(),\n         has_elf_tls: true,\n         panic_strategy: PanicStrategy::Abort,\n         .. Default::default()"}]}