{"sha": "835faa532f485883a3da86c14cfe4abdbaa3ce71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNWZhYTUzMmY0ODU4ODNhM2RhODZjMTRjZmU0YWJkYmFhM2NlNzE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-16T16:26:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T16:26:35Z"}, "message": "Rollup merge of #79032 - lcnr:arg-count, r=varkor\n\nimprove type const mismatch errors\n\nDoesn't completely remove `check_generic_arg_count` as that would have required some more complex changes but\ninstead checks type and const params in only one step. Also moved the help added by `@JulianKnodt` in #75611 to `generic_arg_mismatch_err`.\n\nr? `@varkor` cc `@petrochenkov`", "tree": {"sha": "d4c8fb5acfc1ec114198b61597753ec3ea2fb7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c8fb5acfc1ec114198b61597753ec3ea2fb7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/835faa532f485883a3da86c14cfe4abdbaa3ce71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsqg7CRBK7hj4Ov3rIwAAdHIIAHl1hGc7nMcw7kt2wunIJ9fp\nn8oTfB22ffwnC3OROx0hqtu6M+p/lHjaq1Rc8b3Qohc7jaEKmBuEh4x0uKmM3ub6\n9fcb74HHNAp0YEY0c+zTq9CwoVCyGai9zzyae5VFCzuxrb3jKsLKaCAu7DhYym0x\nu3DYtRzrnWqtQoIDLtPvCz5IHRFVLT+Dn1ECmPVwaKRfqndOQDCjouwXki66lh5x\nggwGVmI9Y5SOrBJc3Y63UfzEiKu371u0MyNHR0zBslsKuYRbnFnI4LPsLEw4TQWk\naDQozXYi4Y/wsRO5h4fAbblA48Q5hEbAeWooBw8Btxe/OZPQeVK0n8HanM6xGcI=\n=EsZZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d4c8fb5acfc1ec114198b61597753ec3ea2fb7f8\nparent bac213bee4b709843094a6868f4db98056407ed2\nparent 69b43c209c2808f3b6fe0eef857dc7585503666d\nauthor Mara Bos <m-ou.se@m-ou.se> 1605543995 +0100\ncommitter GitHub <noreply@github.com> 1605543995 +0100\n\nRollup merge of #79032 - lcnr:arg-count, r=varkor\n\nimprove type const mismatch errors\n\nDoesn't completely remove `check_generic_arg_count` as that would have required some more complex changes but\ninstead checks type and const params in only one step. Also moved the help added by `@JulianKnodt` in #75611 to `generic_arg_mismatch_err`.\n\nr? `@varkor` cc `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/835faa532f485883a3da86c14cfe4abdbaa3ce71", "html_url": "https://github.com/rust-lang/rust/commit/835faa532f485883a3da86c14cfe4abdbaa3ce71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/835faa532f485883a3da86c14cfe4abdbaa3ce71/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac213bee4b709843094a6868f4db98056407ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac213bee4b709843094a6868f4db98056407ed2", "html_url": "https://github.com/rust-lang/rust/commit/bac213bee4b709843094a6868f4db98056407ed2"}, {"sha": "69b43c209c2808f3b6fe0eef857dc7585503666d", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b43c209c2808f3b6fe0eef857dc7585503666d", "html_url": "https://github.com/rust-lang/rust/commit/69b43c209c2808f3b6fe0eef857dc7585503666d"}], "stats": {"total": 513, "additions": 211, "deletions": 302}, "files": [{"sha": "4497c8c0eaaa8cef1f90fb33802ac7a00a1e47b2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -282,6 +282,14 @@ impl GenericArg<'_> {\n             GenericArg::Const(_) => \"constant\",\n         }\n     }\n+\n+    pub fn short_descr(&self) -> &'static str {\n+        match self {\n+            GenericArg::Lifetime(_) => \"lifetime\",\n+            GenericArg::Type(_) => \"type\",\n+            GenericArg::Const(_) => \"const\",\n+        }\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "0db5fda272a262db2436215889e865b64d4c2232", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 79, "deletions": 103, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -23,6 +23,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         sess: &Session,\n         arg: &GenericArg<'_>,\n         kind: &'static str,\n+        possible_ordering_error: bool,\n         help: Option<&str>,\n     ) {\n         let mut err = struct_span_err!(\n@@ -49,8 +50,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n         };\n \n+        if matches!(arg, GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }))\n+            && matches!(kind_ord, ParamKindOrd::Const { .. })\n+        {\n+            let suggestions = vec![\n+                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                (arg.span().shrink_to_hi(), String::from(\" }\")),\n+            ];\n+            err.multipart_suggestion(\n+                \"if this generic argument was intended as a const parameter, \\\n+                try surrounding it with braces:\",\n+                suggestions,\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n         // This note is only true when generic parameters are strictly ordered by their kind.\n-        if kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n+        if possible_ordering_error && kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n             let (first, last) =\n                 if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n             err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n@@ -148,8 +164,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // Check whether this segment takes generic arguments and the user has provided any.\n             let (generic_args, infer_args) = ctx.args_for_def_id(def_id);\n \n-            let mut args =\n-                generic_args.iter().flat_map(|generic_args| generic_args.args.iter()).peekable();\n+            let args_iter = generic_args.iter().flat_map(|generic_args| generic_args.args.iter());\n+            let mut args = args_iter.clone().peekable();\n \n             // If we encounter a type or const when we expect a lifetime, we infer the lifetimes.\n             // If we later encounter a lifetime, we know that the arguments were provided in the\n@@ -216,8 +232,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                     GenericParamDefKind::Const => {\n                                                         ParamKindOrd::Const {\n                                                             unordered: tcx\n-                                                                .sess\n-                                                                .features_untracked()\n+                                                                .features()\n                                                                 .const_generics,\n                                                         }\n                                                     }\n@@ -237,6 +252,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         tcx.sess,\n                                         arg,\n                                         kind.descr(),\n+                                        !args_iter.clone().is_sorted_by_key(|arg| match arg {\n+                                            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n+                                            GenericArg::Type(_) => ParamKindOrd::Type,\n+                                            GenericArg::Const(_) => ParamKindOrd::Const {\n+                                                unordered: tcx.features().const_generics,\n+                                            },\n+                                        }),\n                                         Some(&format!(\n                                             \"reorder the arguments: {}: `<{}>`\",\n                                             param_types_present\n@@ -288,7 +310,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             assert_eq!(kind, \"lifetime\");\n                             let provided =\n                                 force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n-                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind, None);\n+                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind, false, None);\n                         }\n \n                         break;\n@@ -346,6 +368,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // that lifetimes will proceed types. So it suffices to check the number of each generic\n         // arguments in order to validate them with respect to the generic parameters.\n         let param_counts = def.own_counts();\n+        let named_type_param_count = param_counts.types - has_self as usize;\n         let arg_counts = args.own_counts();\n         let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n \n@@ -384,11 +407,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // For kinds without defaults (e.g.., lifetimes), `required == permitted`.\n             // For other kinds (i.e., types), `permitted` may be greater than `required`.\n             if required <= provided && provided <= permitted {\n-                return Ok(());\n+                return true;\n             }\n \n             if silent {\n-                return Err((0i32, None));\n+                return false;\n             }\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -404,25 +427,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 (required, \"\")\n             };\n \n-            let (spans, label) = if required == permitted && provided > permitted {\n+            let (spans, labels) = if provided > permitted {\n                 // In the case when the user has provided too many arguments,\n                 // we want to point to the unexpected arguments.\n-                let spans: Vec<Span> = args.args[offset + permitted..offset + provided]\n+                let (spans, labels): (Vec<Span>, Vec<String>) = args.args\n+                    [offset + permitted..offset + provided]\n                     .iter()\n-                    .map(|arg| arg.span())\n-                    .collect();\n+                    .map(|arg| (arg.span(), format!(\"unexpected {} argument\", arg.short_descr())))\n+                    .unzip();\n                 unexpected_spans.extend(spans.clone());\n-                (spans, format!(\"unexpected {} argument\", kind))\n+                (spans, labels)\n             } else {\n                 (\n                     vec![span],\n-                    format!(\n+                    vec![format!(\n                         \"expected {}{} {} argument{}\",\n                         quantifier,\n                         bound,\n                         kind,\n                         pluralize!(bound),\n-                    ),\n+                    )],\n                 )\n             };\n \n@@ -434,105 +458,57 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ),\n                 DiagnosticId::Error(\"E0107\".into()),\n             );\n-            for span in spans {\n+            for (span, label) in spans.into_iter().zip(labels) {\n                 err.span_label(span, label.as_str());\n             }\n-\n-            assert_ne!(bound, provided);\n-            Err((bound as i32 - provided as i32, Some(err)))\n+            err.emit();\n+            false\n         };\n \n         let mut unexpected_spans = vec![];\n \n-        let mut lifetime_count_correct = Ok(());\n-        if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n-            lifetime_count_correct = check_kind_count(\n-                \"lifetime\",\n-                param_counts.lifetimes,\n-                param_counts.lifetimes,\n-                arg_counts.lifetimes,\n-                0,\n-                &mut unexpected_spans,\n-                explicit_late_bound == ExplicitLateBound::Yes,\n-            );\n-        }\n-\n-        // FIXME(const_generics:defaults)\n-        let mut const_count_correct = Ok(());\n-        if !infer_args || arg_counts.consts > param_counts.consts {\n-            const_count_correct = check_kind_count(\n-                \"const\",\n-                param_counts.consts,\n-                param_counts.consts,\n-                arg_counts.consts,\n-                arg_counts.lifetimes + arg_counts.types,\n-                &mut unexpected_spans,\n-                false,\n-            );\n-        }\n-\n-        // Note that type errors are currently be emitted *after* const errors.\n-        let mut type_count_correct = Ok(());\n-        if !infer_args || arg_counts.types > param_counts.types - defaults.types - has_self as usize\n-        {\n-            type_count_correct = check_kind_count(\n-                \"type\",\n-                param_counts.types - defaults.types - has_self as usize,\n-                param_counts.types - has_self as usize,\n-                arg_counts.types,\n-                arg_counts.lifetimes,\n-                &mut unexpected_spans,\n-                false,\n-            );\n-        }\n-\n-        // Emit a help message if it's possible that a type could be surrounded in braces\n-        if let Err((c_mismatch, Some(ref mut _const_err))) = const_count_correct {\n-            if let Err((_, Some(ref mut type_err))) = type_count_correct {\n-                let possible_matches = args.args[arg_counts.lifetimes..]\n-                    .iter()\n-                    .filter(|arg| {\n-                        matches!(\n-                            arg,\n-                            GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. })\n-                        )\n-                    })\n-                    .take(c_mismatch.max(0) as usize);\n-                for arg in possible_matches {\n-                    let suggestions = vec![\n-                        (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                        (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                    ];\n-                    type_err.multipart_suggestion(\n-                        \"If this generic argument was intended as a const parameter, \\\n-                        try surrounding it with braces:\",\n-                        suggestions,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-            }\n-        }\n+        let lifetime_count_correct = check_kind_count(\n+            \"lifetime\",\n+            if infer_lifetimes { 0 } else { param_counts.lifetimes },\n+            param_counts.lifetimes,\n+            arg_counts.lifetimes,\n+            0,\n+            &mut unexpected_spans,\n+            explicit_late_bound == ExplicitLateBound::Yes,\n+        );\n \n-        let emit_correct =\n-            |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n-                Ok(()) => Ok(()),\n-                Err((_, None)) => Err(()),\n-                Err((_, Some(mut err))) => {\n-                    err.emit();\n-                    Err(())\n-                }\n-            };\n+        let kind_str = if param_counts.consts + arg_counts.consts == 0 {\n+            \"type\"\n+        } else if named_type_param_count + arg_counts.types == 0 {\n+            \"const\"\n+        } else {\n+            \"generic\"\n+        };\n \n-        let arg_count_correct = emit_correct(lifetime_count_correct)\n-            .and(emit_correct(const_count_correct))\n-            .and(emit_correct(type_count_correct));\n+        let arg_count_correct = check_kind_count(\n+            kind_str,\n+            if infer_args {\n+                0\n+            } else {\n+                param_counts.consts + named_type_param_count - defaults.types\n+            },\n+            param_counts.consts + named_type_param_count,\n+            arg_counts.consts + arg_counts.types,\n+            arg_counts.lifetimes,\n+            &mut unexpected_spans,\n+            false,\n+        );\n \n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: arg_count_correct.map_err(|()| GenericArgCountMismatch {\n-                reported: Some(ErrorReported),\n-                invalid_args: unexpected_spans,\n-            }),\n+            correct: if lifetime_count_correct && arg_count_correct {\n+                Ok(())\n+            } else {\n+                Err(GenericArgCountMismatch {\n+                    reported: Some(ErrorReported),\n+                    invalid_args: unexpected_spans,\n+                })\n+            },\n         }\n     }\n "}, {"sha": "929c88455f04134de9346b2cdc6f6ff37b88e739", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -61,6 +61,7 @@ This API is completely unstable and subject to change.\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n+#![feature(is_sorted)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(try_blocks)]"}, {"sha": "8440e47968e9aea21a91ae4a465600d6be346565", "filename": "src/test/ui/const-generics/const-param-shadowing.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -0,0 +1,9 @@\n+#![feature(min_const_generics)]\n+\n+type N = u32;\n+struct Foo<const M: usize>;\n+fn test<const N: usize>() -> Foo<N> { //~ ERROR type provided when\n+    Foo\n+}\n+\n+fn main() {}"}, {"sha": "df17027802672b08aa2b8161800422315771f3ed", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -0,0 +1,14 @@\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/const-param-shadowing.rs:5:34\n+   |\n+LL | fn test<const N: usize>() -> Foo<N> {\n+   |                                  ^\n+   |\n+help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL | fn test<const N: usize>() -> Foo<{ N }> {\n+   |                                  ^   ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "38ad510e5d7f0d4ca587a832c14f15b72de6e8d5", "filename": "src/test/ui/const-generics/invalid-constant-in-args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n-    let _: Vec<&str, \"a\"> = Vec::new(); //~ ERROR wrong number of const arguments\n+    let _: Vec<&str, \"a\"> = Vec::new();\n+    //~^ ERROR wrong number of generic arguments\n }"}, {"sha": "5111815e002f11b914a999833de143403199b2b9", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: wrong number of const arguments: expected 0, found 1\n+error[E0107]: wrong number of generic arguments: expected 1, found 2\n   --> $DIR/invalid-constant-in-args.rs:2:22\n    |\n LL |     let _: Vec<&str, \"a\"> = Vec::new();"}, {"sha": "4ca10ed8b71a25d9c941b0c449fe76db9389bbcd", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -20,20 +20,16 @@ impl<const CF: CompileFlag, T> Example<CF, T> {\n pub fn main() {\n   test_1::<CompileFlag::A>();\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: wrong number of const arguments\n-  //~| ERROR: wrong number of type arguments\n+  //~| ERROR: type provided when a constant was expected\n \n   test_2::<_, CompileFlag::A>(0);\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: wrong number of const arguments\n-  //~| ERROR: wrong number of type arguments\n+  //~| ERROR: type provided when a constant was expected\n \n   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: wrong number of const arguments\n-  //~| ERROR: wrong number of type arguments\n+  //~| ERROR: type provided when a constant was expected\n \n   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n-  //~^ ERROR: wrong number of const arguments\n-  //~| ERROR: wrong number of type arguments\n+  //~^ ERROR: type provided when a constant was expected\n }"}, {"sha": "7822fc072e35ce81f716bc428181162d35f9e610", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -8,7 +8,7 @@ LL |   test_1::<CompileFlag::A>();\n    |            help: try using the variant's enum: `CompileFlag`\n \n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:26:15\n+  --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n@@ -17,83 +17,59 @@ LL |   test_2::<_, CompileFlag::A>(0);\n    |               help: try using the variant's enum: `CompileFlag`\n \n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:31:18\n+  --> $DIR/invalid-enum.rs:29:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n    |                  |\n    |                  not a type\n    |                  help: try using the variant's enum: `CompileFlag`\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/invalid-enum.rs:31:10\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/invalid-enum.rs:29:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected at most 1, found 2\n-  --> $DIR/invalid-enum.rs:31:10\n-   |\n-LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |                  ^^^^^^^^^^^^^^\n    |\n-help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n    |\n LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n    |                  ^                ^\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/invalid-enum.rs:36:10\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/invalid-enum.rs:33:18\n    |\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected at most 1, found 2\n-  --> $DIR/invalid-enum.rs:36:10\n-   |\n-LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |                  ^^^^^^^^^^^^^^^^^^^\n    |\n-help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n    |\n LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n    |                  ^                     ^\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/invalid-enum.rs:21:3\n-   |\n-LL |   test_1::<CompileFlag::A>();\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n    |\n LL |   test_1::<CompileFlag::A>();\n-   |            ^^^^^^^^^^^^^^ unexpected type argument\n+   |            ^^^^^^^^^^^^^^\n    |\n-help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n    |\n LL |   test_1::<{ CompileFlag::A }>();\n    |            ^                ^\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/invalid-enum.rs:26:3\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/invalid-enum.rs:26:15\n-   |\n-LL |   test_2::<_, CompileFlag::A>(0);\n-   |               ^^^^^^^^^^^^^^ unexpected type argument\n+   |               ^^^^^^^^^^^^^^\n    |\n-help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n    |\n LL |   test_2::<_, { CompileFlag::A }>(0);\n    |               ^                ^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0107, E0573.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0573, E0747.\n+For more information about an error, try `rustc --explain E0573`."}, {"sha": "fc70be404971e93af88389ce4dde577f1717f62b", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -4,25 +4,19 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/issue-62878.rs:11:5\n-   |\n-LL |     foo::<_, {[1]}>();\n-   |     ^^^^^^^^^^^^^^^ expected 2 const arguments\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0747]: type provided when a constant was expected\n   --> $DIR/issue-62878.rs:11:11\n    |\n LL |     foo::<_, {[1]}>();\n-   |           ^ unexpected type argument\n+   |           ^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-62878.rs:11:15\n    |\n LL |     foo::<_, {[1]}>();\n    |               ^^^ expected `usize`, found array `[{integer}; 1]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0308, E0770.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0308, E0747, E0770.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "c087711e5f9adff179f7df24bed53838ef347340", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -9,7 +9,6 @@ fn foo<const N: usize, const A: [u8; N]>() {}\n \n fn main() {\n     foo::<_, {[1]}>();\n-    //[full]~^ ERROR wrong number of const arguments\n-    //[full]~| ERROR wrong number of type arguments\n+    //[full]~^ ERROR type provided when a constant was expected\n     //[full]~| ERROR mismatched types\n }"}, {"sha": "04c019015179e08460e78158dc239b81f022449c", "filename": "src/test/ui/const-generics/issues/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -13,5 +13,5 @@ fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n \n fn main() {\n     test::<2>();\n-    //~^ ERROR wrong number of type\n+    //~^ ERROR wrong number of generic arguments\n }"}, {"sha": "1e37f9dcb1925c82016fab0e7c48e1597e11a5ff", "filename": "src/test/ui/const-generics/issues/issue-76595.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,8 +1,8 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: wrong number of generic arguments: expected 2, found 1\n   --> $DIR/issue-76595.rs:15:5\n    |\n LL |     test::<2>();\n-   |     ^^^^^^^^^ expected 1 type argument\n+   |     ^^^^^^^^^ expected 2 generic arguments\n \n error: aborting due to previous error\n "}, {"sha": "b96d5c561ff515dc40e0414cd1a4e1b7d9758fd4", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -13,8 +13,7 @@ fn b() {\n     foo::<BAR + BAR>();\n     //~^ ERROR expected trait, found constant `BAR`\n     //~| ERROR expected trait, found constant `BAR`\n-    //~| ERROR wrong number of const arguments: expected 1, found 0\n-    //~| ERROR wrong number of type arguments: expected 0, found 1\n+    //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n }\n fn c() {"}, {"sha": "6adcf6a3e36d804359b2334ad4f6ee81a0595852", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -10,7 +10,7 @@ LL |     foo::<{ BAR + 3 }>();\n    |           ^         ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:21:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:20:11\n    |\n LL |     foo::<3 + 3>();\n    |           ^^^^^\n@@ -21,7 +21,7 @@ LL |     foo::<{ 3 + 3 }>();\n    |           ^       ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:24:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:23:15\n    |\n LL |     foo::<BAR - 3>();\n    |               ^ expected one of `,` or `>`\n@@ -32,7 +32,7 @@ LL |     foo::<{ BAR - 3 }>();\n    |           ^         ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:27:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:26:15\n    |\n LL |     foo::<BAR - BAR>();\n    |               ^ expected one of `,` or `>`\n@@ -43,7 +43,7 @@ LL |     foo::<{ BAR - BAR }>();\n    |           ^           ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:30:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:29:11\n    |\n LL |     foo::<100 - BAR>();\n    |           ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     foo::<{ 100 - BAR }>();\n    |           ^           ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:33:19\n+  --> $DIR/const-expression-suggest-missing-braces.rs:32:19\n    |\n LL |     foo::<bar<i32>()>();\n    |                   ^ expected one of `,` or `>`\n@@ -65,7 +65,7 @@ LL |     foo::<{ bar<i32>() }>();\n    |           ^            ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:36:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:35:21\n    |\n LL |     foo::<bar::<i32>()>();\n    |                     ^ expected one of `,` or `>`\n@@ -76,7 +76,7 @@ LL |     foo::<{ bar::<i32>() }>();\n    |           ^              ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:39:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:38:21\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -87,7 +87,7 @@ LL |     foo::<{ bar::<i32>() + BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:42:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:41:21\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -98,7 +98,7 @@ LL |     foo::<{ bar::<i32>() - BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:45:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:44:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -109,7 +109,7 @@ LL |     foo::<{ BAR - bar::<i32>() }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:48:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:47:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -139,19 +139,13 @@ LL |     foo::<BAR + BAR>();\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/const-expression-suggest-missing-braces.rs:13:5\n-   |\n-LL |     foo::<BAR + BAR>();\n-   |     ^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:13:11\n    |\n LL |     foo::<BAR + BAR>();\n-   |           ^^^^^^^^^ unexpected type argument\n+   |           ^^^^^^^^^\n \n-error: aborting due to 15 previous errors; 1 warning emitted\n+error: aborting due to 14 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0107, E0404.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0404, E0747.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "1bd0c46f55e2ddf5e9835d33d66017ccac357ecb", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -14,11 +14,9 @@ trait Marker<const N: usize> {}\n impl<const N: usize> Marker<N> for Example<N> {}\n \n fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n-  //~^ ERROR wrong number of const\n-  //~| ERROR wrong number of type\n+  //~^ ERROR: type provided when a constant was expected\n   Example::<gimme_a_const!(marker)>\n-  //~^ ERROR wrong number of const\n-  //~| ERROR wrong number of type\n+  //~^ ERROR: type provided when a constant was expected\n }\n \n fn from_marker(_: impl Marker<{\n@@ -38,11 +36,9 @@ fn main() {\n   }>;\n \n   let _fail = Example::<external_macro!()>;\n-  //~^ ERROR wrong number of const\n-  //~| ERROR wrong number of type\n+  //~^ ERROR: type provided when a constant was expected\n \n   let _fail = Example::<gimme_a_const!()>;\n-  //~^ ERROR wrong number of const\n-  //~| ERROR wrong number of type\n+  //~^ ERROR: type provided when a constant was expected\n   //~| ERROR unexpected end of macro invocation\n }"}, {"sha": "a5dedf6fe2053ef2b7d8474091bda36860b4dd92", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,5 +1,5 @@\n error: expected type, found `{`\n-  --> $DIR/macro-fail.rs:33:27\n+  --> $DIR/macro-fail.rs:31:27\n    |\n LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n    |                                 ----------------------\n@@ -13,7 +13,7 @@ LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n-  --> $DIR/macro-fail.rs:33:27\n+  --> $DIR/macro-fail.rs:31:27\n    |\n LL |   Example::<gimme_a_const!(marker)>\n    |             ----------------------\n@@ -46,62 +46,38 @@ LL |     let _fail = Example::<external_macro!()>;\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-fail.rs:44:25\n+  --> $DIR/macro-fail.rs:41:25\n    |\n LL |     macro_rules! gimme_a_const {\n    |     -------------------------- when calling this macro\n ...\n LL |   let _fail = Example::<gimme_a_const!()>;\n    |                         ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/macro-fail.rs:16:26\n-   |\n-LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0747]: type provided when a constant was expected\n   --> $DIR/macro-fail.rs:16:33\n    |\n LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n-\n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/macro-fail.rs:19:3\n-   |\n-LL |   Example::<gimme_a_const!(marker)>\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/macro-fail.rs:19:13\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/macro-fail.rs:18:13\n    |\n LL |   Example::<gimme_a_const!(marker)>\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/macro-fail.rs:40:15\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/macro-fail.rs:38:25\n    |\n LL |   let _fail = Example::<external_macro!()>;\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/macro-fail.rs:40:25\n-   |\n-LL |   let _fail = Example::<external_macro!()>;\n-   |                         ^^^^^^^^^^^^^^^^^ unexpected type argument\n-\n-error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/macro-fail.rs:44:15\n-   |\n-LL |   let _fail = Example::<gimme_a_const!()>;\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+   |                         ^^^^^^^^^^^^^^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/macro-fail.rs:44:25\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/macro-fail.rs:41:25\n    |\n LL |   let _fail = Example::<gimme_a_const!()>;\n-   |                         ^^^^^^^^^^^^^^^^ unexpected type argument\n+   |                         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "380e9209e6c608126f19122e1c20f24beb39c94f", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,8 +1,8 @@\n error[E0107]: wrong number of type arguments: expected at most 2, found 3\n-  --> $DIR/generic-impl-more-params-with-defaults.rs:13:5\n+  --> $DIR/generic-impl-more-params-with-defaults.rs:13:24\n    |\n LL |     Vec::<isize, Heap, bool>::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n+   |                        ^^^^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "cc296b5105a4027aef02dd21fc54d136b06d667e", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -1,8 +1,8 @@\n error[E0107]: wrong number of type arguments: expected at most 2, found 3\n-  --> $DIR/generic-type-more-params-with-defaults.rs:9:12\n+  --> $DIR/generic-type-more-params-with-defaults.rs:9:29\n    |\n LL |     let _: Vec<isize, Heap, bool>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n+   |                             ^^^^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "cdda0d001c7dc575c7fb5f49c8aa86f4edebfad6", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -3,8 +3,6 @@ error[E0747]: type provided when a lifetime was expected\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();\n    |                          ^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n \n error: aborting due to previous error\n "}, {"sha": "841e63ecbe9d5128c40f5d27ebed08470bc57375", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -3,8 +3,6 @@ error[E0747]: type provided when a lifetime was expected\n    |\n LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n    |                                     ^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n \n error: aborting due to previous error\n "}, {"sha": "1af5b857e9df6f1b438ec1d552ad7e6f4c08720a", "filename": "src/test/ui/privacy/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -32,8 +32,8 @@ pub mod foo2 {\n fn test_glob2() {\n     use foo2::*;\n \n-    let _x: Box<Bar>;  //~ ERROR wrong number of const arguments: expected 0, found 1\n-    //~^ ERROR wrong number of type arguments: expected at least 1, found 0\n+    let _x: Box<Bar>;\n+    //~^ ERROR constant provided when a type was expected\n }\n \n // neither public"}, {"sha": "714f28941f11ff49f188e2bd954079a09fed1a03", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -52,19 +52,13 @@ help: consider importing this trait\n LL | use foo1::Bar;\n    |\n \n-error[E0107]: wrong number of const arguments: expected 0, found 1\n+error[E0747]: constant provided when a type was expected\n   --> $DIR/privacy-ns1.rs:35:17\n    |\n LL |     let _x: Box<Bar>;\n-   |                 ^^^ unexpected const argument\n-\n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n-  --> $DIR/privacy-ns1.rs:35:13\n-   |\n-LL |     let _x: Box<Bar>;\n-   |             ^^^^^^^^ expected at least 1 type argument\n+   |                 ^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0107, E0412, E0423, E0425.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0412, E0423, E0425, E0747.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "47035ef3af5a2a537e42dd4b8e0ed4d64b310bbc", "filename": "src/test/ui/privacy/privacy-ns2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -38,16 +38,14 @@ pub mod foo2 {\n fn test_single2() {\n     use foo2::Bar;\n \n-    let _x : Box<Bar>; //~ ERROR wrong number of const arguments: expected 0, found 1\n-    //~^ ERROR wrong number of type arguments: expected at least 1, found 0\n+    let _x : Box<Bar>; //~ ERROR constant provided when a type was expected\n     let _x : Bar(); //~ ERROR expected type, found function `Bar`\n }\n \n fn test_list2() {\n     use foo2::{Bar,Baz};\n \n-    let _x: Box<Bar>; //~ ERROR wrong number of const arguments: expected 0, found 1\n-    //~^ ERROR wrong number of type arguments: expected at least 1, found 0\n+    let _x: Box<Bar>; //~ ERROR constant provided when a type was expected\n }\n \n // neither public"}, {"sha": "c7ad8ec503654c7e0b378840200705977fffeaf4", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -28,7 +28,7 @@ LL | use foo2::Bar;\n    |\n \n error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns2.rs:43:14\n+  --> $DIR/privacy-ns2.rs:42:14\n    |\n LL |     let _x : Bar();\n    |              ^^^^^ not a type\n@@ -43,66 +43,54 @@ LL | use foo1::Bar;\n    |\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:63:15\n+  --> $DIR/privacy-ns2.rs:61:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n-  --> $DIR/privacy-ns2.rs:55:5\n+  --> $DIR/privacy-ns2.rs:53:5\n    |\n LL |     trait Bar {\n    |     ^^^^^^^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:67:15\n+  --> $DIR/privacy-ns2.rs:65:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n-  --> $DIR/privacy-ns2.rs:55:5\n+  --> $DIR/privacy-ns2.rs:53:5\n    |\n LL |     trait Bar {\n    |     ^^^^^^^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:74:16\n+  --> $DIR/privacy-ns2.rs:72:16\n    |\n LL |     use foo3::{Bar,Baz};\n    |                ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n-  --> $DIR/privacy-ns2.rs:55:5\n+  --> $DIR/privacy-ns2.rs:53:5\n    |\n LL |     trait Bar {\n    |     ^^^^^^^^^\n \n-error[E0107]: wrong number of const arguments: expected 0, found 1\n+error[E0747]: constant provided when a type was expected\n   --> $DIR/privacy-ns2.rs:41:18\n    |\n LL |     let _x : Box<Bar>;\n-   |                  ^^^ unexpected const argument\n+   |                  ^^^\n \n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n-  --> $DIR/privacy-ns2.rs:41:14\n-   |\n-LL |     let _x : Box<Bar>;\n-   |              ^^^^^^^^ expected at least 1 type argument\n-\n-error[E0107]: wrong number of const arguments: expected 0, found 1\n-  --> $DIR/privacy-ns2.rs:49:17\n-   |\n-LL |     let _x: Box<Bar>;\n-   |                 ^^^ unexpected const argument\n-\n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n-  --> $DIR/privacy-ns2.rs:49:13\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/privacy-ns2.rs:48:17\n    |\n LL |     let _x: Box<Bar>;\n-   |             ^^^^^^^^ expected at least 1 type argument\n+   |                 ^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0107, E0423, E0573, E0603.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0423, E0573, E0603, E0747.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "df064f22f358450d0a52ccd36e089837060fc796", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -107,16 +107,12 @@ error[E0747]: type provided when a lifetime was expected\n    |\n LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n    |                                           ^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n \n error[E0747]: type provided when a lifetime was expected\n   --> $DIR/suggest-move-types.rs:48:71\n    |\n LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n    |                                                                       ^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n \n error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:65:56"}, {"sha": "8958547e82709085b480d7b350f26b50f3f61eba", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/835faa532f485883a3da86c14cfe4abdbaa3ce71/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=835faa532f485883a3da86c14cfe4abdbaa3ce71", "patch": "@@ -27,8 +27,6 @@ error[E0747]: type provided when a lifetime was expected\n    |\n LL |     let _: S<dyn 'static +, 'static>;\n    |              ^^^^^^^^^^^^^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n \n error: aborting due to 5 previous errors\n "}]}