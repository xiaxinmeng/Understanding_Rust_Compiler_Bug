{"sha": "4dd6292c3c563e53732672d878930a9c26d512fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDYyOTJjM2M1NjNlNTM3MzI2NzJkODc4OTMwYTljMjZkNTEyZmM=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-11-19T15:55:58Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-06T10:50:01Z"}, "message": "UniversalRegionRelations: add a way to list the base non-transitive `outlives` constraints", "tree": {"sha": "df770f21b96935c8a7c2ef35c0398eeb1e692c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df770f21b96935c8a7c2ef35c0398eeb1e692c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd6292c3c563e53732672d878930a9c26d512fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd6292c3c563e53732672d878930a9c26d512fc", "html_url": "https://github.com/rust-lang/rust/commit/4dd6292c3c563e53732672d878930a9c26d512fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd6292c3c563e53732672d878930a9c26d512fc/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b16ae1609c65d337d4f22e2f4ddea0c4c467b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b16ae1609c65d337d4f22e2f4ddea0c4c467b3b", "html_url": "https://github.com/rust-lang/rust/commit/4b16ae1609c65d337d4f22e2f4ddea0c4c467b3b"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "8bb68383a49baa3da6d18db7ae1bb495336b3af8", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dd6292c3c563e53732672d878930a9c26d512fc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd6292c3c563e53732672d878930a9c26d512fc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=4dd6292c3c563e53732672d878930a9c26d512fc", "patch": "@@ -217,6 +217,11 @@ impl UniversalRegionRelations<'tcx> {\n     crate fn regions_outlived_by(&self, fr1: RegionVid) -> Vec<&RegionVid> {\n         self.outlives.reachable_from(&fr1)\n     }\n+\n+    /// Returns the _non-transitive_ set of known `outlives` constraints between free regions.\n+    crate fn known_outlives(&self) -> impl Iterator<Item=(&RegionVid, &RegionVid)> {\n+        self.outlives.base_edges()\n+    }\n }\n \n struct UniversalRegionRelationsBuilder<'this, 'tcx> {"}]}