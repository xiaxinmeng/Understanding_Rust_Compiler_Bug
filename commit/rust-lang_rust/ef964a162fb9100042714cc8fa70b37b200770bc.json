{"sha": "ef964a162fb9100042714cc8fa70b37b200770bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTY0YTE2MmZiOTEwMDA0MjcxNGNjOGZhNzBiMzdiMjAwNzcwYmM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-09-13T04:48:47Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-09-13T04:48:47Z"}, "message": "Stop using newtypes in rt::io::buffered\n\nThis is a workaround for #9155. Currently, any uses of BufferedStream\noutside of libstd ICE.", "tree": {"sha": "ad498937d89511e6f3a6b39d507bba2ceb22e679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad498937d89511e6f3a6b39d507bba2ceb22e679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef964a162fb9100042714cc8fa70b37b200770bc", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef964a162fb9100042714cc8fa70b37b200770bc", "html_url": "https://github.com/rust-lang/rust/commit/ef964a162fb9100042714cc8fa70b37b200770bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef964a162fb9100042714cc8fa70b37b200770bc/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7657b782e0249ead5b01efba3782cff0f065198", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7657b782e0249ead5b01efba3782cff0f065198", "html_url": "https://github.com/rust-lang/rust/commit/c7657b782e0249ead5b01efba3782cff0f065198"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "579e581d87e0957cbed13f9204d85d6d3ecc0623", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef964a162fb9100042714cc8fa70b37b200770bc/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef964a162fb9100042714cc8fa70b37b200770bc/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=ef964a162fb9100042714cc8fa70b37b200770bc", "patch": "@@ -187,31 +187,37 @@ impl<W: Writer> Decorator<W> for BufferedWriter<W> {\n     }\n }\n \n-struct InternalBufferedWriter<W>(BufferedWriter<W>);\n+// FIXME #9155 this should be a newtype struct\n+struct InternalBufferedWriter<W> {\n+    inner: BufferedWriter<W>\n+}\n \n impl<W: Reader> Reader for InternalBufferedWriter<W> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        self.inner.read(buf)\n+        self.inner.inner.read(buf)\n     }\n \n     fn eof(&mut self) -> bool {\n-        self.inner.eof()\n+        self.inner.inner.eof()\n     }\n }\n \n /// Wraps a Stream and buffers input and output to and from it\n ///\n /// NOTE: `BufferedStream` will NOT flush its output buffer when dropped.\n-pub struct BufferedStream<S>(BufferedReader<InternalBufferedWriter<S>>);\n+// FIXME #9155 this should be a newtype struct\n+pub struct BufferedStream<S> {\n+    priv inner: BufferedReader<InternalBufferedWriter<S>>\n+}\n \n impl<S: Stream> BufferedStream<S> {\n     pub fn with_capacities(reader_cap: uint, writer_cap: uint, inner: S)\n                            -> BufferedStream<S> {\n         let writer = BufferedWriter::with_capacity(writer_cap, inner);\n-        let internal_writer = InternalBufferedWriter(writer);\n+        let internal_writer = InternalBufferedWriter { inner: writer };\n         let reader = BufferedReader::with_capacity(reader_cap,\n                                                    internal_writer);\n-        BufferedStream(reader)\n+        BufferedStream { inner: reader }\n     }\n \n     pub fn new(inner: S) -> BufferedStream<S> {\n@@ -222,35 +228,35 @@ impl<S: Stream> BufferedStream<S> {\n \n impl<S: Stream> Reader for BufferedStream<S> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        (**self).read(buf)\n+        self.inner.read(buf)\n     }\n \n     fn eof(&mut self) -> bool {\n-        (**self).eof()\n+        self.inner.eof()\n     }\n }\n \n impl<S: Stream> Writer for BufferedStream<S> {\n     fn write(&mut self, buf: &[u8]) {\n-        self.inner.write(buf)\n+        self.inner.inner.inner.write(buf)\n     }\n \n     fn flush(&mut self) {\n-        self.inner.flush()\n+        self.inner.inner.inner.flush()\n     }\n }\n \n impl<S: Stream> Decorator<S> for BufferedStream<S> {\n     fn inner(self) -> S {\n-        self.inner.inner()\n+        self.inner.inner.inner.inner()\n     }\n \n     fn inner_ref<'a>(&'a self) -> &'a S {\n-        self.inner.inner_ref()\n+        self.inner.inner.inner.inner_ref()\n     }\n \n     fn inner_mut_ref<'a>(&'a mut self) -> &'a mut S {\n-        self.inner.inner_mut_ref()\n+        self.inner.inner.inner.inner_mut_ref()\n     }\n }\n "}]}