{"sha": "7faeae0d385730e712634fb2af331ea0140771b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYWVhZTBkMzg1NzMwZTcxMjYzNGZiMmFmMzMxZWEwMTQwNzcxYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T09:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T09:18:12Z"}, "message": "Auto merge of #72135 - oli-obk:const_prop_deaggregates, r=wesleywiser\n\nPropagate locals, even if they have unpropagatable assignments somewhere\n\nSecond try for https://github.com/rust-lang/rust/pull/71946#discussion_r422967292\n\nr? @wesleywiser\n\ncc @rust-lang/wg-mir-opt @RalfJung", "tree": {"sha": "56b9424ab474f7dc0f196b420be4daf8bd5ae5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b9424ab474f7dc0f196b420be4daf8bd5ae5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7faeae0d385730e712634fb2af331ea0140771b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7faeae0d385730e712634fb2af331ea0140771b4", "html_url": "https://github.com/rust-lang/rust/commit/7faeae0d385730e712634fb2af331ea0140771b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7faeae0d385730e712634fb2af331ea0140771b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f230dfd2a4bce3d79e5210e8363f626d90d688", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f230dfd2a4bce3d79e5210e8363f626d90d688", "html_url": "https://github.com/rust-lang/rust/commit/e7f230dfd2a4bce3d79e5210e8363f626d90d688"}, {"sha": "27c818bc56afd28b60dd9f71af11773d177745c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c818bc56afd28b60dd9f71af11773d177745c8", "html_url": "https://github.com/rust-lang/rust/commit/27c818bc56afd28b60dd9f71af11773d177745c8"}], "stats": {"total": 190, "additions": 189, "deletions": 1}, "files": [{"sha": "e1be1daca45a146d5c85e058b9a5294a4bfa2efc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7faeae0d385730e712634fb2af331ea0140771b4/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faeae0d385730e712634fb2af331ea0140771b4/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7faeae0d385730e712634fb2af331ea0140771b4", "patch": "@@ -781,6 +781,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // Projections are fine, because `&mut foo.x` will be caught by\n             // `MutatingUseContext::Borrow` elsewhere.\n             MutatingUse(MutatingUseContext::Projection)\n+            // These are just stores, where the storing is not propagatable, but there may be later\n+            // mutations of the same local via `Store`\n+            | MutatingUse(MutatingUseContext::Call)\n+            // Actual store that can possibly even propagate a value\n             | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {\n@@ -805,7 +809,21 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonUse(_) => {}\n-            _ => {\n+\n+            // These could be propagated with a smarter analysis or just some careful thinking about\n+            // whether they'd be fine right now.\n+            MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Yield)\n+            | MutatingUse(MutatingUseContext::Drop)\n+            | MutatingUse(MutatingUseContext::Retag)\n+            // These can't ever be propagated under any scheme, as we can't reason about indirect\n+            // mutation.\n+            | NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::AddressOf)\n+            | MutatingUse(MutatingUseContext::Borrow)\n+            | MutatingUse(MutatingUseContext::AddressOf) => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n@@ -881,6 +899,11 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     // ```\n                     // FIXME: we overzealously erase the entire local, because that's easier to\n                     // implement.\n+                    trace!(\n+                        \"propagation into {:?} failed.\n+                        Nuking the entire site from orbit, it's the only way to be sure\",\n+                        place,\n+                    );\n                     Self::remove_const(&mut self.ecx, place.local);\n                 }\n             }"}, {"sha": "4f43ec8c9470ab60915ac743a0f37c6720f6919c", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=7faeae0d385730e712634fb2af331ea0140771b4", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let mut x: (i32, i32) = foo();\n+    x.1 = 99;\n+    x.0 = 42;\n+    let y = x.1;\n+}\n+\n+#[inline(never)]\n+fn foo() -> (i32, i32) {\n+    unimplemented!()\n+}"}, {"sha": "6834bb6bdd4f74a1840dbe54d7c9bc16b3b61e8c", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read/rustc.main.ConstProp.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff?ref=7faeae0d385730e712634fb2af331ea0140771b4", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 4:11\n+      let mut _1: (i32, i32) as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n+          _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:34\n+                                           // ty::Const\n+                                           // + ty: fn() -> (i32, i32) {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n+                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          (_1.1: i32) = const 99i32;       // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000063))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:11: 6:13\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          (_1.0: i32) = const 42i32;       // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:11: 7:13\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++         _2 = const 99i32;                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000063))\n++                                          // mir::Constant\n++                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "40f801b1b5e581c8a4ba994ef4090c73bfbab72f", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=7faeae0d385730e712634fb2af331ea0140771b4", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let a = foo();\n+    let mut x: (i32, i32) = (1, 2);\n+    x.1 = a;\n+    let y = x.1;\n+    let z = x.0; // this could theoretically be allowed, but we can't handle it right now\n+}\n+\n+#[inline(never)]\n+fn foo() -> i32 {\n+    unimplemented!()\n+}"}, {"sha": "738343c655e360b11ed205d4f99be0032e119728", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign/rustc.main.ConstProp.diff", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7faeae0d385730e712634fb2af331ea0140771b4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign%2Frustc.main.ConstProp.diff?ref=7faeae0d385730e712634fb2af331ea0140771b4", "patch": "@@ -0,0 +1,74 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n+          let mut _2: (i32, i32) as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+          scope 2 {\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n+              scope 3 {\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n+                  scope 4 {\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n+          _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:13: 5:18\n+                                           // ty::Const\n+                                           // + ty: fn() -> i32 {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n+                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+          _2 = (const 1i32, const 2i32);   // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:30: 6:31\n++                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:33: 6:34\n++                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:5: 7:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:13: 8:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n+          _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:13: 9:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:4:11: 10:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:4:11: 10:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:10:2: 10:2\n+      }\n+  }\n+  "}]}