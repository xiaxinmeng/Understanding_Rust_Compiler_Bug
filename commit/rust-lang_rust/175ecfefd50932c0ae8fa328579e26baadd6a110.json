{"sha": "175ecfefd50932c0ae8fa328579e26baadd6a110", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NWVjZmVmZDUwOTMyYzBhZThmYTMyODU3OWUyNmJhYWRkNmExMTA=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-16T22:40:50Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-17T10:46:08Z"}, "message": "Improve a few errors and fix #33366", "tree": {"sha": "cb01c5880bdb348749ab44b1966b44c95f2d9bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb01c5880bdb348749ab44b1966b44c95f2d9bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/175ecfefd50932c0ae8fa328579e26baadd6a110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/175ecfefd50932c0ae8fa328579e26baadd6a110", "html_url": "https://github.com/rust-lang/rust/commit/175ecfefd50932c0ae8fa328579e26baadd6a110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/175ecfefd50932c0ae8fa328579e26baadd6a110/comments", "author": null, "committer": null, "parents": [{"sha": "3e9747af497d826aa863e5d47830d7cfc80d94d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9747af497d826aa863e5d47830d7cfc80d94d2", "html_url": "https://github.com/rust-lang/rust/commit/3e9747af497d826aa863e5d47830d7cfc80d94d2"}], "stats": {"total": 126, "additions": 68, "deletions": 58}, "files": [{"sha": "d2c2ecf24c56cf403254738228b18dfc8df7828d", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -90,7 +90,7 @@ use std::cell::{Cell, RefCell};\n use std::char::from_u32;\n use std::fmt;\n use syntax::ast;\n-use syntax::errors::DiagnosticBuilder;\n+use syntax::errors::{DiagnosticBuilder, check_old_skool};\n use syntax::codemap::{self, Pos, Span};\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -481,7 +481,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                        \"{}\",\n                                        trace.origin);\n \n-        if !is_simple_error {\n+        if !is_simple_error || check_old_skool() {\n             err.note_expected_found(&\"type\", &expected, &found);\n         }\n "}, {"sha": "36f95f62d0606ef49480e73a9827029e087786b7", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -872,7 +872,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                        &format!(\"borrow of `{}` occurs here\",\n                                self.bccx.loan_path_to_string(loan_path)))\n             .span_label(span,\n-                       &format!(\"assignment to `{}` occurs here\",\n+                       &format!(\"assignment to borrowed `{}` occurs here\",\n                                self.bccx.loan_path_to_string(loan_path)))\n             .emit();\n     }"}, {"sha": "5ebb1ab32b8f82a84ab1488badd0fe2445f31436", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -126,7 +126,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                              move_from.descriptive_string(bccx.tcx));\n             err.span_label(\n                 move_from.span,\n-                &format!(\"move occurs here\")\n+                &format!(\"cannot move out of {}\", move_from.descriptive_string(bccx.tcx))\n                 );\n             err\n         }\n@@ -138,7 +138,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                                \"cannot move out of type `{}`, \\\n                                                a non-copy fixed-size array\",\n                                                b.ty);\n-                err.span_label(move_from.span, &format!(\"can not move out of here\"));\n+                err.span_label(move_from.span, &format!(\"cannot move out of here\"));\n                 err\n             } else {\n                 span_bug!(move_from.span, \"this path should not cause illegal move\");\n@@ -154,7 +154,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                                    \"cannot move out of type `{}`, \\\n                                                    which defines the `Drop` trait\",\n                                                    b.ty);\n-                    err.span_label(move_from.span, &format!(\"can not move out of here\"));\n+                    err.span_label(move_from.span, &format!(\"cannot move out of here\"));\n                     err\n                 },\n                 _ => {\n@@ -175,16 +175,12 @@ fn note_move_destination(mut err: DiagnosticBuilder,\n     if is_first_note {\n         err.span_label(\n             move_to_span,\n-            &format!(\"attempting to move value to here\"));\n-        err.help(\n-            &format!(\"to prevent the move, \\\n-                      use `ref {0}` or `ref mut {0}` to capture value by \\\n-                      reference\",\n+            &format!(\"hint: to prevent move, use `ref {0}` or `ref mut {0}`\",\n                      pat_name));\n         err\n     } else {\n-        err.span_note(move_to_span,\n-                      &format!(\"and here (use `ref {0}` or `ref mut {0}`)\",\n+        err.span_label(move_to_span,\n+                      &format!(\"...and here (use `ref {0}` or `ref mut {0}`)\",\n                                pat_name));\n         err\n     }"}, {"sha": "b541a6ccb8d8a6c1cf33cdb3a0a156cc51dd32f8", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -699,13 +699,13 @@ pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where\n ///\n /// FIXME(#33240)\n #[cfg(not(test))]\n-fn check_old_skool() -> bool {\n+pub fn check_old_skool() -> bool {\n     use std::env;\n     env::var(\"RUST_NEW_ERROR_FORMAT\").is_err()\n }\n \n /// For unit tests, use the new format.\n #[cfg(test)]\n-fn check_old_skool() -> bool {\n+pub fn check_old_skool() -> bool {\n     false\n }"}, {"sha": "438a548819bc72b50f051578f51fe138d2f79ce3", "filename": "src/test/compile-fail/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -19,8 +19,8 @@ enum Foo {\n fn blah() {\n     let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n-                           //~| move occurs here\n-        Foo::Foo1(num1,         //~ NOTE attempting to move value to here\n+                           //~| cannot move out\n+        Foo::Foo1(num1,         //~ NOTE to prevent move\n                   num2) => (),  //~ NOTE and here\n         Foo::Foo2(num) => (),   //~ NOTE and here\n         Foo::Foo3 => ()\n@@ -38,8 +38,8 @@ impl Drop for S {\n fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n-        //~| can not move out of here\n-            f: _s,  //~ NOTE attempting to move value to here\n+        //~| cannot move out of here\n+            f: _s,  //~ NOTE to prevent move\n             g: _t   //~ NOTE and here\n         } => {}\n     }\n@@ -55,8 +55,8 @@ fn free<T>(_: T) {}\n fn blah2() {\n     let a = &A { a: box 1 };\n     match a.a {           //~ ERROR cannot move out of\n-                          //~| move occurs here\n-        n => {            //~ NOTE attempting to move value to here\n+                          //~| cannot move out\n+        n => {            //~ NOTE to prevent move\n             free(n)\n         }\n     }"}, {"sha": "15771295743c16592dff72545d909f6e18b7198a", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -29,8 +29,8 @@ pub fn main() {\n             match tail {\n                 [Foo { string: a },\n                 //~^ ERROR cannot move out of borrowed content\n-                //~| move occurs here\n-                //~| attempting to move value to here\n+                //~| cannot move out\n+                //~| to prevent move\n                  Foo { string: b }] => {\n                     //~^ NOTE and here\n                 }"}, {"sha": "eec6c8473eb3d167bce7d644e773dada2c1120be", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -19,7 +19,7 @@ fn a() {\n         [box ref _a, _, _] => {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n-            //~^ assignment to `vec[..]` occurs here\n+            //~^ assignment to borrowed `vec[..]` occurs here\n         }\n     }\n }\n@@ -31,7 +31,7 @@ fn b() {\n         [_b..] => {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n-            //~^ assignment to `vec[..]` occurs here\n+            //~^ assignment to borrowed `vec[..]` occurs here\n         }\n     }\n }\n@@ -41,8 +41,8 @@ fn c() {\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a,         //~ ERROR cannot move out\n-        //~| move occurs here\n-        //~| attempting to move value to here\n+        //~| cannot move out\n+        //~| to prevent move\n          _b..] => {\n             // Note: `_a` is *moved* here, but `b` is borrowing,\n             // hence illegal.\n@@ -53,38 +53,38 @@ fn c() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE attempting to move value to here\n-    //~| can not move out of here\n+    //~^ NOTE to prevent move\n+    //~| cannot move out of here\n }\n \n fn d() {\n     let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n-        //~^ move occurs here\n-         _b] => {} //~ NOTE attempting to move value to here\n+        //~^ cannot move out\n+         _b] => {} //~ NOTE to prevent move\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE attempting to move value to here\n-    //~| can not move out of here\n+    //~^ NOTE to prevent move\n+    //~| cannot move out of here\n }\n \n fn e() {\n     let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out\n-        //~| move occurs here\n-        //~| NOTE attempting to move value to here\n+        //~| cannot move out\n+        //~| NOTE to prevent move\n         //~| NOTE and here\n         //~| NOTE and here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE attempting to move value to here\n-    //~| can not move out of here\n+    //~^ NOTE to prevent move\n+    //~| cannot move out of here\n }\n \n fn main() {}"}, {"sha": "634a4014e1189f90af08402ba899e983808b2c19", "filename": "src/test/compile-fail/issue-26480.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -26,6 +26,8 @@ macro_rules! write {\n                   $arr.len() * size_of($arr[0]));\n             //~^ ERROR mismatched types\n             //~| expected u64, found usize\n+            //~| expected type\n+            //~| found type\n         }\n     }}\n }\n@@ -38,6 +40,8 @@ fn main() {\n     let hello = ['H', 'e', 'y'];\n     write!(hello);\n     //~^ NOTE in this expansion of write!\n+    //~| NOTE in this expansion of write!\n+    //~| NOTE in this expansion of write!\n \n     cast!(2);\n     //~^ NOTE in this expansion of cast!"}, {"sha": "ea6afcd621419b6d6a4b5726939f9861cc3cd227", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -32,9 +32,10 @@ fn main() {\n     loop {\n         f(&s, |hellothere| {\n             match hellothere.x { //~ ERROR cannot move out\n-                                 //~| move occurs here\n+                                 //~| cannot move out of borrowed content\n                 box E::Foo(_) => {}\n-                box E::Bar(x) => println!(\"{}\", x.to_string()), //~ NOTE attempting to move value to here\n+                box E::Bar(x) => println!(\"{}\", x.to_string()), \n+                //~^ NOTE to prevent move\n                 box E::Baz => {}\n             }\n         })"}, {"sha": "84b78547ab9a4af718bb6cbdd508650c60eddf50", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -12,7 +12,7 @@ use errors::{Error, ErrorKind};\n use rustc_serialize::json;\n use std::str::FromStr;\n use std::path::Path;\n-use runtest::{fatal_proc_rec, ProcRes};\n+use runtest::{ProcRes};\n \n // These structs are a subset of the ones found in\n // `syntax::errors::json`.\n@@ -73,9 +73,9 @@ fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) ->\n                 expected_errors\n             }\n             Err(error) => {\n-                fatal_proc_rec(None, &format!(\n+                proc_res.fatal(Some(&format!(\n                     \"failed to decode compiler output as json: `{}`\\noutput: {}\\nline: {}\",\n-                    error, line, output), proc_res);\n+                    error, line, output)));\n             }\n         }\n     } else {"}, {"sha": "280c87a287466b8ebe47342c0cfd562232152665", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175ecfefd50932c0ae8fa328579e26baadd6a110/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=175ecfefd50932c0ae8fa328579e26baadd6a110", "patch": "@@ -1528,23 +1528,9 @@ actual:\\n\\\n         self.error(err); panic!();\n     }\n \n-    pub fn fatal_proc_rec(&self, err: &str, proc_res: &ProcRes) -> ! {\n+    fn fatal_proc_rec(&self, err: &str, proc_res: &ProcRes) -> ! {\n         self.error(err);\n-        print!(\"\\\n-            status: {}\\n\\\n-            command: {}\\n\\\n-            stdout:\\n\\\n-            ------------------------------------------\\n\\\n-            {}\\n\\\n-            ------------------------------------------\\n\\\n-            stderr:\\n\\\n-            ------------------------------------------\\n\\\n-            {}\\n\\\n-            ------------------------------------------\\n\\\n-            \\n\",\n-               proc_res.status, proc_res.cmdline, proc_res.stdout,\n-               proc_res.stderr);\n-        panic!();\n+        proc_res.fatal(None);\n     }\n \n     fn _arm_exec_compiled_test(&self, env: Vec<(String, String)>) -> ProcRes {\n@@ -2209,6 +2195,29 @@ enum Status {\n     Normal(ExitStatus),\n }\n \n+impl ProcRes {\n+    pub fn fatal(&self, err: Option<&str>) -> ! {\n+        if let Some(e) = err {\n+            println!(\"\\nerror: {}\", e);\n+        }\n+        print!(\"\\\n+            status: {}\\n\\\n+            command: {}\\n\\\n+            stdout:\\n\\\n+            ------------------------------------------\\n\\\n+            {}\\n\\\n+            ------------------------------------------\\n\\\n+            stderr:\\n\\\n+            ------------------------------------------\\n\\\n+            {}\\n\\\n+            ------------------------------------------\\n\\\n+            \\n\",\n+               self.status, self.cmdline, self.stdout,\n+               self.stderr);\n+        panic!();\n+    }\n+}\n+\n impl Status {\n     fn code(&self) -> Option<i32> {\n         match *self {"}]}