{"sha": "c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTNmMzg3ZjQ5YjQ4MTdjMmIxZmM3YTE1MmQ2NGY3N2NiYTQ5NGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-25T05:33:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-25T05:58:00Z"}, "message": "syntax: Divide keywords into contextual/restricted. No bad words", "tree": {"sha": "1f9440475216ca8184b6c11d0e2b62397f357ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f9440475216ca8184b6c11d0e2b62397f357ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "html_url": "https://github.com/rust-lang/rust/commit/c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d0707556e5aafed0368350e4c1396b2507ece7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d0707556e5aafed0368350e4c1396b2507ece7", "html_url": "https://github.com/rust-lang/rust/commit/08d0707556e5aafed0368350e4c1396b2507ece7"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "66e0455c501855054276dd107606ce4f2fa7fa15", "filename": "src/librustsyntax/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse.rs?ref=c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "patch": "@@ -132,7 +132,7 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n       reader: rdr,\n       binop_precs: prec::binop_prec_table(),\n       keywords: token::keyword_table(),\n-      bad_expr_words: token::bad_expr_word_table()}\n+      restricted_keywords: token::restricted_keyword_table()}\n }\n \n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,"}, {"sha": "f02ca65f61755ac4e4c27b3fdd572bf5ef7d9ffe", "filename": "src/librustsyntax/parse/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcommon.rs?ref=c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "patch": "@@ -43,7 +43,7 @@ fn parse_path_list_ident(p: parser) -> ast::path_list_ident {\n }\n \n fn parse_value_ident(p: parser) -> ast::ident {\n-    check_bad_expr_word(p);\n+    check_restricted_keywords(p);\n     ret parse_ident(p);\n }\n \n@@ -87,15 +87,15 @@ fn expect_keyword(p: parser, word: str) {\n     }\n }\n \n-fn is_bad_expr_word(p: parser, word: str) -> bool {\n-    p.bad_expr_words.contains_key(word)\n+fn is_restricted_keyword(p: parser, word: str) -> bool {\n+    p.restricted_keywords.contains_key(word)\n }\n \n-fn check_bad_expr_word(p: parser) {\n+fn check_restricted_keywords(p: parser) {\n     alt p.token {\n       token::IDENT(_, false) {\n         let w = token_to_str(p.reader, p.token);\n-        if is_bad_expr_word(p, w) {\n+        if is_restricted_keyword(p, w) {\n             p.fatal(\"found `\" + w + \"` in expression position\");\n         }\n       }"}, {"sha": "dec7937a41678463bd058bdd10c2c4f5e67e02b3", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "patch": "@@ -59,7 +59,7 @@ type parser = @{\n     reader: reader,\n     binop_precs: @[op_spec],\n     keywords: hashmap<str, ()>,\n-    bad_expr_words: hashmap<str, ()>\n+    restricted_keywords: hashmap<str, ()>\n };\n \n impl parser for parser {\n@@ -543,7 +543,7 @@ fn parse_path(p: parser) -> @ast::path {\n fn parse_value_path(p: parser) -> @ast::path {\n     let pt = parse_path(p);\n     let last_word = vec::last(pt.idents);\n-    if is_bad_expr_word(p, last_word) {\n+    if is_restricted_keyword(p, last_word) {\n         p.fatal(\"found \" + last_word + \" in expression position\");\n     }\n     pt\n@@ -802,7 +802,7 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if p.token == token::MOD_SEP ||\n                   is_ident(p.token) && !is_keyword(p, \"true\") &&\n                       !is_keyword(p, \"false\") {\n-        check_bad_expr_word(p);\n+        check_restricted_keywords(p);\n         let pth = parse_path_and_ty_param_substs(p, true);\n         hi = pth.span.hi;\n         ex = ast::expr_path(pth);\n@@ -1370,7 +1370,7 @@ fn parse_pat(p: parser) -> @ast::pat {\n                 p.bump();\n                 subpat = parse_pat(p);\n             } else {\n-                if is_bad_expr_word(p, fieldname) {\n+                if is_restricted_keyword(p, fieldname) {\n                     p.fatal(\"found \" + fieldname + \" in binding position\");\n                 }\n                 subpat = @{id: p.get_id(),\n@@ -2098,7 +2098,7 @@ fn parse_item_enum(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let mut variants: [ast::variant] = [];\n     // Newtype syntax\n     if p.token == token::EQ {\n-        if is_bad_expr_word(p, id) {\n+        if is_restricted_keyword(p, id) {\n             p.fatal(\"found \" + id + \" in enum constructor position\");\n         }\n         p.bump();"}, {"sha": "3f9ce9d91b6ac115c0a306ca6a214cba559df71b", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3f387f49b4817c2b1fc7a152d64f77cba494e/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=c9e3f387f49b4817c2b1fc7a152d64f77cba494e", "patch": "@@ -201,48 +201,79 @@ fn is_bar(t: token::token) -> bool {\n }\n \n #[doc = \"\n-All the valid words that have meaning in the Rust language. Some of these are\n-nonetheless valid as identifiers becasue they are unambiguous.\n+All the valid words that have meaning in the Rust language.\n+\n+Rust keywords are either 'contextual' or 'restricted'. Contextual\n+keywords may be used as identifiers because their appearance in\n+the grammar is unambiguous. Restricted keywords may not appear\n+in positions that might otherwise contain _value identifiers_.\n \"]\n fn keyword_table() -> hashmap<str, ()> {\n     let keywords = str_hash();\n-    for bad_expr_word_table().each_key {|word|\n+    for contextual_keyword_table().each_key {|word|\n+        keywords.insert(word, ());\n+    }\n+    for restricted_keyword_table().each_key {|word|\n         keywords.insert(word, ());\n     }\n-    let other_keywords = [\n+    ret keywords;\n+}\n+\n+#[doc = \"Keywords that may be used as identifiers\"]\n+fn contextual_keyword_table() -> hashmap<str, ()> {\n+    let words = str_hash();\n+    let keys = [\n         \"as\",\n         \"bind\",\n         \"else\",\n         \"implements\",\n         \"move\",\n         \"of\",\n         \"priv\",\n-        \"self\",\n-        \"send\",\n-        \"static\",\n+        \"self\", \"send\", \"static\",\n         \"to\",\n         \"use\",\n         \"with\"\n     ];\n-    for other_keywords.each {|word|\n-        keywords.insert(word, ());\n+    for keys.each {|word|\n+        words.insert(word, ());\n     }\n-    ret keywords;\n+    words\n }\n \n #[doc = \"\n-These are the words that shouldn't be allowed as value identifiers,\n-because, if used at the start of a line, they will cause the line to be\n-interpreted as a specific kind of statement, which would be confusing.\n+Keywords that may not appear in any position that might otherwise contain a\n+_value identifier_. Restricted keywords may still be used as other types of\n+identifiers.\n+\n+Reasons:\n+\n+* For some (most?), if used at the start of a line, they will cause the line\n+  to be interpreted as a specific kind of statement, which would be confusing.\n+\n+* `true` or `false` as identifiers would always be shadowed by\n+  the boolean constants\n \"]\n-fn bad_expr_word_table() -> hashmap<str, ()> {\n+fn restricted_keyword_table() -> hashmap<str, ()> {\n     let words = str_hash();\n-    let keys = [\"alt\", \"assert\", \"be\", \"break\", \"check\", \"claim\",\n-                \"class\", \"const\", \"cont\", \"copy\", \"crust\", \"do\", \"else\",\n-                \"enum\", \"export\", \"fail\", \"false\", \"fn\", \"for\", \"if\",\n-                \"iface\", \"impl\", \"import\", \"let\", \"log\", \"loop\", \"mod\",\n-                \"mut\", \"native\", \"new\", \"pure\", \"resource\", \"true\",\n-                \"ret\", \"trait\", \"type\", \"unchecked\", \"unsafe\", \"while\"];\n+    let keys = [\n+        \"alt\",\n+        \"assert\",\n+        \"be\", \"break\",\n+        \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\", \"crust\",\n+        \"do\",\n+        \"else\", \"enum\", \"export\",\n+        \"fail\", \"false\", \"fn\", \"for\",\n+        \"if\", \"iface\", \"impl\", \"import\",\n+        \"let\", \"log\", \"loop\",\n+        \"mod\", \"mut\",\n+        \"native\", \"new\",\n+        \"pure\",\n+        \"resource\", \"ret\",\n+        \"true\", \"trait\", \"type\",\n+        \"unchecked\", \"unsafe\",\n+        \"while\"\n+    ];\n     for keys.each {|word|\n         words.insert(word, ());\n     }"}]}