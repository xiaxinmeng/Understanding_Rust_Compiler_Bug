{"sha": "36b15f0409fae948b3de7dee1d6b2cb995c5784d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjE1ZjA0MDlmYWU5NDhiM2RlN2RlZTFkNmIyY2I5OTVjNTc4NGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-30T23:29:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-30T23:29:54Z"}, "message": "Fix multiple footnotes and improve testing", "tree": {"sha": "950cdd1a3833c94e46a9a85107bfd5dea41aca83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950cdd1a3833c94e46a9a85107bfd5dea41aca83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b15f0409fae948b3de7dee1d6b2cb995c5784d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b15f0409fae948b3de7dee1d6b2cb995c5784d", "html_url": "https://github.com/rust-lang/rust/commit/36b15f0409fae948b3de7dee1d6b2cb995c5784d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b15f0409fae948b3de7dee1d6b2cb995c5784d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a741eabf3c223650bb29c5df30c8fd414cd86a", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a741eabf3c223650bb29c5df30c8fd414cd86a", "html_url": "https://github.com/rust-lang/rust/commit/08a741eabf3c223650bb29c5df30c8fd414cd86a"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "e8acabde4081aa7d80633c404ab5b850246a1701", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/36b15f0409fae948b3de7dee1d6b2cb995c5784d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b15f0409fae948b3de7dee1d6b2cb995c5784d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=36b15f0409fae948b3de7dee1d6b2cb995c5784d", "patch": "@@ -27,6 +27,7 @@\n \n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n+use std::collections::HashMap;\n use std::default::Default;\n use std::fmt::{self, Write};\n use std::str;\n@@ -135,27 +136,27 @@ macro_rules! event_loop_break {\n \n struct ParserWrapper<'a> {\n     parser: Parser<'a>,\n-    footnotes: Vec<String>,\n-    current_footnote_id: u16,\n+    // The key is the footnote reference. The value is the footnote definition and the id.\n+    footnotes: HashMap<String, (String, u16)>,\n }\n \n impl<'a> ParserWrapper<'a> {\n     pub fn new(s: &'a str) -> ParserWrapper<'a> {\n         ParserWrapper {\n             parser: Parser::new_ext(s, pulldown_cmark::OPTION_ENABLE_TABLES |\n                                        pulldown_cmark::OPTION_ENABLE_FOOTNOTES),\n-            footnotes: Vec::new(),\n-            current_footnote_id: 1,\n+            footnotes: HashMap::new(),\n         }\n     }\n+\n     pub fn next(&mut self) -> Option<Event<'a>> {\n         self.parser.next()\n     }\n \n-    pub fn get_next_footnote_id(&mut self) -> u16 {\n-        let tmp = self.current_footnote_id;\n-        self.current_footnote_id += 1;\n-        tmp\n+    pub fn get_entry(&mut self, key: &str) -> &mut (String, u16) {\n+        let new_id = self.footnotes.keys().count() + 1;\n+        let key = key.to_owned();\n+        self.footnotes.entry(key).or_insert((String::new(), new_id as u16))\n     }\n }\n \n@@ -450,10 +451,11 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn footnote(parser: &mut ParserWrapper, buffer: &mut String,\n                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n-                mut definition: String, id: &mut Option<&mut String>) {\n-        event_loop_break!(parser, toc_builder, shorter, definition, true, id,\n+                id: &mut Option<&mut String>) {\n+        let mut content = String::new();\n+        event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::FootnoteDefinition(_)));\n-        buffer.push_str(&definition);\n+        buffer.push_str(&content);\n     }\n \n     fn rule(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n@@ -507,17 +509,24 @@ pub fn render(w: &mut fmt::Formatter,\n                 }\n                 Event::Start(Tag::FootnoteDefinition(ref def)) => {\n                     let mut content = String::new();\n-                    footnote(parser, &mut content, toc_builder, shorter, def.as_ref().to_owned(),\n-                             id);\n-                    let cur_len = parser.footnotes.len() + 1;\n-                    parser.footnotes.push(format!(\"<li id=\\\"ref{}\\\">{}<a href=\\\"#supref{0}\\\" \\\n-                                                   rev=\\\"footnote\\\">\u21a9</a></li>\",\n-                                                  cur_len, content));\n-                }\n-                Event::FootnoteReference(_) => {\n+                    let def = def.as_ref();\n+                    footnote(parser, &mut content, toc_builder, shorter, id);\n+                    let entry = parser.get_entry(def);\n+                    let cur_id = (*entry).1;\n+                    (*entry).0.push_str(&format!(\"<li id=\\\"ref{}\\\">{}&nbsp;<a href=\\\"#supref{0}\\\" \\\n+                                                  rev=\\\"footnote\\\">\u21a9</a></p></li>\",\n+                                                 cur_id,\n+                                                 if content.ends_with(\"</p>\") {\n+                                                     &content[..content.len() - 4]\n+                                                 } else {\n+                                                     &content\n+                                                 }));\n+                }\n+                Event::FootnoteReference(ref reference) => {\n+                    let entry = parser.get_entry(reference.as_ref());\n                     buffer.push_str(&format!(\"<sup id=\\\"supref{0}\\\"><a href=\\\"#ref{0}\\\">{0}</a>\\\n                                               </sup>\",\n-                                             parser.get_next_footnote_id()));\n+                                             (*entry).1));\n                 }\n                 Event::Html(h) | Event::InlineHtml(h) => {\n                     buffer.push_str(&*h);\n@@ -545,7 +554,10 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n     if !parser.footnotes.is_empty() {\n         buffer.push_str(&format!(\"<div class=\\\"footnotes\\\"><hr><ol>{}</ol></div>\",\n-                                 parser.footnotes.join(\"\")));\n+                                 parser.footnotes.values()\n+                                                 .map(|&(ref s, _)| s.as_str())\n+                                                 .collect::<Vec<_>>()\n+                                                 .join(\"\")));\n     }\n     let mut ret = toc_builder.map_or(Ok(()), |builder| {\n         write!(w, \"<nav id=\\\"TOC\\\">{}</nav>\", builder.into_toc())"}, {"sha": "4d3bea20ba89586bc1664c8155cb06786159ed57", "filename": "src/test/rustdoc/check-rule-image-footnote.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/36b15f0409fae948b3de7dee1d6b2cb995c5784d/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b15f0409fae948b3de7dee1d6b2cb995c5784d/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-rule-image-footnote.rs?ref=36b15f0409fae948b3de7dee1d6b2cb995c5784d", "patch": "@@ -10,11 +10,10 @@\n \n #![crate_name = \"foo\"]\n \n+// ignore-tidy-linelength\n+\n // @has foo/fn.f.html\n-// @has - '<p>hard break: after hard break</p><hr>'\n-// @has - '<img src=\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\" alt=\"Rust\">'\n-// @has - '<li id=\"ref1\">'\n-// @has - '<sup id=\"supref1\"><a href=\"#ref1\">1</a></sup>'\n+// @has - '<p>markdown test</p><p>this is a <a href=\"https://example.com\" title=\"this is a title\">link</a>.</p><p>hard break: after hard break</p><hr><p>a footnote<sup id=\"supref1\"><a href=\"#ref1\">1</a></sup>.</p><p>another footnote<sup id=\"supref2\"><a href=\"#ref2\">2</a></sup>.</p><p><img src=\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\" alt=\"Rust\"></p><div class=\"footnotes\"><hr><ol><li id=\"ref1\"><p>Thing&nbsp;<a href=\"#supref1\" rev=\"footnote\">\u21a9</a></p></li><li id=\"ref2\"><p>Another Thing&nbsp;<a href=\"#supref2\" rev=\"footnote\">\u21a9</a></p></li></ol></div>'\n /// markdown test\n ///\n /// this is a [link].\n@@ -28,8 +27,14 @@\n ///\n /// a footnote[^footnote].\n ///\n+/// another footnote[^footnotebis].\n+///\n /// [^footnote]: Thing\n ///\n+///\n+/// [^footnotebis]: Another Thing\n+///\n+///\n /// ![Rust](https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png)\n #[deprecated(note = \"Struct<T>\")]\n pub fn f() {}"}]}