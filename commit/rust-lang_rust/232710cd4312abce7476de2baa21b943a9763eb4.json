{"sha": "232710cd4312abce7476de2baa21b943a9763eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMjcxMGNkNDMxMmFiY2U3NDc2ZGUyYmFhMjFiOTQzYTk3NjNlYjQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-22T13:25:51Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:50:46Z"}, "message": "Add configuration variables to wiki", "tree": {"sha": "256e0e5ed94d6bc348f25dfd258110078b6f2c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256e0e5ed94d6bc348f25dfd258110078b6f2c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232710cd4312abce7476de2baa21b943a9763eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232710cd4312abce7476de2baa21b943a9763eb4", "html_url": "https://github.com/rust-lang/rust/commit/232710cd4312abce7476de2baa21b943a9763eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232710cd4312abce7476de2baa21b943a9763eb4/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64", "html_url": "https://github.com/rust-lang/rust/commit/1841804d43b1ef3e919a3e9cb7fdb4e166f8fd64"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "3b2a1dafad4bb0cd1532b56b3b899d1e639efd1a", "filename": "src/conf.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/232710cd4312abce7476de2baa21b943a9763eb4/src%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232710cd4312abce7476de2baa21b943a9763eb4/src%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconf.rs?ref=232710cd4312abce7476de2baa21b943a9763eb4", "patch": "@@ -73,16 +73,16 @@ impl From<io::Error> for ConfError {\n }\n \n macro_rules! define_Conf {\n-    ($(($toml_name: tt, $rust_name: ident, $default: expr, $ty: ident),)+) => {\n+    ($(#[$doc: meta] ($toml_name: tt, $rust_name: ident, $default: expr => $($ty: tt)+),)+) => {\n         /// Type used to store lint configuration.\n         pub struct Conf {\n-            $(pub $rust_name: $ty,)+\n+            $(#[$doc] pub $rust_name: define_Conf!(TY $($ty)+),)+\n         }\n \n         impl Default for Conf {\n             fn default() -> Conf {\n                 Conf {\n-                    $($rust_name: $default,)+\n+                    $($rust_name: define_Conf!(DEFAULT $($ty)+, $default),)+\n                 }\n             }\n         }\n@@ -94,12 +94,12 @@ macro_rules! define_Conf {\n                 match name.as_str() {\n                     $(\n                         define_Conf!(PAT $toml_name) => {\n-                            if let Some(value) = define_Conf!(CONV $ty, value) {\n+                            if let Some(value) = define_Conf!(CONV $($ty)+, value) {\n                                 self.$rust_name = value;\n                             }\n                             else {\n                                 return Err(ConfError::TypeError(define_Conf!(EXPR $toml_name),\n-                                                                stringify!($ty),\n+                                                                stringify!($($ty)+),\n                                                                 value.type_str()));\n                             }\n                         },\n@@ -117,12 +117,13 @@ macro_rules! define_Conf {\n     // hack to convert tts\n     (PAT $pat: pat) => { $pat };\n     (EXPR $e: expr) => { $e };\n+    (TY $ty: ty) => { $ty };\n \n     // how to read the value?\n     (CONV i64, $value: expr) => { $value.as_integer() };\n     (CONV u64, $value: expr) => { $value.as_integer().iter().filter_map(|&i| if i >= 0 { Some(i as u64) } else { None }).next() };\n     (CONV String, $value: expr) => { $value.as_str().map(Into::into) };\n-    (CONV StringVec, $value: expr) => {{\n+    (CONV Vec<String>, $value: expr) => {{\n         let slice = $value.as_slice();\n \n         if let Some(slice) = slice {\n@@ -137,16 +138,21 @@ macro_rules! define_Conf {\n             None\n         }\n     }};\n-}\n \n-/// To keep the `define_Conf!` macro simple\n-pub type StringVec = Vec<String>;\n+    // provide a nicer syntax to declare the default value of `Vec<String>` variables\n+    (DEFAULT Vec<String>, $e: expr) => { $e.iter().map(|&e| e.to_owned()).collect() };\n+    (DEFAULT $ty: ty, $e: expr) => { $e };\n+}\n \n define_Conf! {\n-    (\"blacklisted-names\", blacklisted_names, vec![\"foo\".to_owned(), \"bar\".to_owned(), \"baz\".to_owned()], StringVec),\n-    (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25, u64),\n-    (\"too-many-arguments-threshold\", too_many_arguments_threshold, 6, u64),\n-    (\"type-complexity-threshold\", type_complexity_threshold, 250, u64),\n+    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about\n+    (\"blacklisted-names\", blacklisted_names, [\"foo\", \"bar\", \"baz\"] => Vec<String>),\n+    /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n+    (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n+    /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n+    (\"too-many-arguments-threshold\", too_many_arguments_threshold, 6 => u64),\n+    /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have\n+    (\"type-complexity-threshold\", type_complexity_threshold, 250 => u64),\n }\n \n /// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif"}, {"sha": "b69fdf70c9985e8f967fad1255527ff3719117d1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/232710cd4312abce7476de2baa21b943a9763eb4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232710cd4312abce7476de2baa21b943a9763eb4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=232710cd4312abce7476de2baa21b943a9763eb4", "patch": "@@ -1,3 +1,4 @@\n+#![feature(type_macros)]\n #![feature(plugin_registrar, box_syntax)]\n #![feature(rustc_private, collections)]\n #![feature(iter_arith)]"}, {"sha": "a10b3549a225525c7c52e6280cc43f7dcaa08ec2", "filename": "util/update_wiki.py", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/232710cd4312abce7476de2baa21b943a9763eb4/util%2Fupdate_wiki.py", "raw_url": "https://github.com/rust-lang/rust/raw/232710cd4312abce7476de2baa21b943a9763eb4/util%2Fupdate_wiki.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_wiki.py?ref=232710cd4312abce7476de2baa21b943a9763eb4", "patch": "@@ -9,17 +9,32 @@\n \n \n level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n+conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n+confvar_re = re.compile(r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n \n \n def parse_path(p=\"src\"):\n     d = {}\n     for f in os.listdir(p):\n         if f.endswith(\".rs\"):\n             parse_file(d, os.path.join(p, f))\n-    return d\n+    return (d, parse_conf(p))\n \n-START = 0\n-LINT = 1\n+\n+def parse_conf(p):\n+    c = {}\n+    with open(p + '/conf.rs') as f:\n+        f = f.read()\n+\n+        m = re.search(conf_re, f)\n+        m = m.groups()[0]\n+\n+        m = re.findall(confvar_re, m)\n+\n+        for (lint, doc, name, default, ty) in m:\n+            c[lint.lower()] = (name, ty, doc, default)\n+\n+    return c\n \n \n def parse_file(d, f):\n@@ -85,8 +100,14 @@ def parse_file(d, f):\n \n %s\"\"\"\n \n+conf_template = \"\"\"\n+**Configuration:** This lint has the following configuration variables:\n \n-def write_wiki_page(d, f):\n+* `%s: %s`: %s (defaults to `%s`).\n+\"\"\"\n+\n+\n+def write_wiki_page(d, c, f):\n     keys = list(d.keys())\n     keys.sort()\n     with open(f, \"w\") as w:\n@@ -102,8 +123,11 @@ def write_wiki_page(d, f):\n         for k in keys:\n             w.write(template % (k, d[k][0], \"\".join(d[k][1])))\n \n+            if k in c:\n+                w.write(conf_template % c[k])\n+\n \n-def check_wiki_page(d, f):\n+def check_wiki_page(d, c, f):\n     errors = []\n     with open(f) as w:\n         for line in w:\n@@ -122,11 +146,11 @@ def check_wiki_page(d, f):\n \n \n def main():\n-    d = parse_path()\n+    (d, c) = parse_path()\n     if \"-c\" in sys.argv:\n-        check_wiki_page(d, \"../rust-clippy.wiki/Home.md\")\n+        check_wiki_page(d, c, \"../rust-clippy.wiki/Home.md\")\n     else:\n-        write_wiki_page(d, \"../rust-clippy.wiki/Home.md\")\n+        write_wiki_page(d, c, \"../rust-clippy.wiki/Home.md\")\n \n if __name__ == \"__main__\":\n     main()"}]}