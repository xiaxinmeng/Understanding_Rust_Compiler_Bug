{"sha": "c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzODlhMzljOTcyOGQ1YzkxMmE5Y2UxYmM0YzA0ZWIxYTNmMzFmZTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T16:08:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-22T16:48:56Z"}, "message": "Eliminate unnecessary `Ident::with_empty_ctxt`s", "tree": {"sha": "0fd19bd8ef39f9f25fb08323734082a3fb6013ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd19bd8ef39f9f25fb08323734082a3fb6013ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "html_url": "https://github.com/rust-lang/rust/commit/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a382122fb09e2a9b4629e36efbc63a321eab6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a382122fb09e2a9b4629e36efbc63a321eab6a", "html_url": "https://github.com/rust-lang/rust/commit/59a382122fb09e2a9b4629e36efbc63a321eab6a"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "90dff5e3fc4b44fdd23f2044e73acfe796e426ea", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -1614,7 +1614,7 @@ impl<'a> LoweringContext<'a> {\n         trace!(\"registering existential type with id {:#?}\", exist_ty_id);\n         let exist_ty_item = hir::Item {\n             hir_id: exist_ty_id,\n-            ident: Ident::with_empty_ctxt(kw::Invalid),\n+            ident: Ident::invalid(),\n             attrs: Default::default(),\n             node: exist_ty_item_kind,\n             vis: respan(span.shrink_to_lo(), hir::VisibilityKind::Inherited),"}, {"sha": "bb9e76f02624651c2eb1483f89dad597fff6a78c", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -138,7 +138,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into, the better\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n-            ItemKind::Mod(..) if i.ident == Ident::with_empty_ctxt(kw::Invalid) => {\n+            ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n                 return visit::walk_item(self, i);\n             }\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |"}, {"sha": "e3e930f5d1d3c656e93e2c1c155abd909477a438", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -234,8 +234,7 @@ pub enum LifetimeName {\n impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n-            LifetimeName::Implicit => Ident::with_empty_ctxt(kw::Invalid),\n-            LifetimeName::Error => Ident::with_empty_ctxt(kw::Invalid),\n+            LifetimeName::Implicit | LifetimeName::Error => Ident::invalid(),\n             LifetimeName::Underscore => Ident::with_empty_ctxt(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_empty_ctxt(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),"}, {"sha": "419cc5936862cb250f1da8d09b7eaa05269594e8", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -1602,7 +1602,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     } {\n                         debug!(\"id = {:?} span = {:?} name = {:?}\", id, span, name);\n \n-                        if name == ast::Ident::with_empty_ctxt(kw::UnderscoreLifetime) {\n+                        if name.name == kw::UnderscoreLifetime {\n                             continue;\n                         }\n "}, {"sha": "8c516a4da4e5fca9b7055c3e0b7f01b3be70e34e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -420,7 +420,7 @@ impl<'a> Resolver<'a> {\n \n             ItemKind::GlobalAsm(..) => {}\n \n-            ItemKind::Mod(..) if ident == Ident::with_empty_ctxt(kw::Invalid) => {} // Crate root\n+            ItemKind::Mod(..) if ident.name == kw::Invalid => {} // Crate root\n \n             ItemKind::Mod(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);"}, {"sha": "8b5e2b86d5ee8025804b1c4b802497e0833759fb", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             (Some(fst), _) if fst.ident.span.rust_2018() &&\n                               !fst.ident.is_path_segment_keyword() => {\n                 // Insert a placeholder that's later replaced by `self`/`super`/etc.\n-                path.insert(0, Segment::from_ident(Ident::with_empty_ctxt(kw::Invalid)));\n+                path.insert(0, Segment::from_ident(Ident::invalid()));\n             }\n             _ => return None,\n         }"}, {"sha": "a7097a9475ede1bee0879ad74eb7a80898848adf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -4669,7 +4669,7 @@ impl<'a> Resolver<'a> {\n     {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n-        let not_local_module = crate_name != Ident::with_empty_ctxt(kw::Crate);\n+        let not_local_module = crate_name.name != kw::Crate;\n         let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), not_local_module)];\n \n         while let Some((in_module,"}, {"sha": "ef71bd511672e81e89a77d69f6b783ba6a6973a0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -992,7 +992,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     // HACK(eddyb) `lint_if_path_starts_with_module` needs at least\n                     // 2 segments, so the `resolve_path` above won't trigger it.\n                     let mut full_path = directive.module_path.clone();\n-                    full_path.push(Segment::from_ident(Ident::with_empty_ctxt(kw::Invalid)));\n+                    full_path.push(Segment::from_ident(Ident::invalid()));\n                     self.lint_if_path_starts_with_module(\n                         directive.crate_lint(),\n                         &full_path,"}, {"sha": "466715e69fd565595b733b0da37a5c27f03d656f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -1175,7 +1175,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 vis: ast::Visibility, vp: P<ast::UseTree>) -> P<ast::Item> {\n         P(ast::Item {\n             id: ast::DUMMY_NODE_ID,\n-            ident: Ident::with_empty_ctxt(kw::Invalid),\n+            ident: Ident::invalid(),\n             attrs: vec![],\n             node: ast::ItemKind::Use(vp),\n             vis,"}, {"sha": "fbe052252a1140de41ec7e91b974a28b91c2d293", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             attrs: krate.attrs,\n             span: krate.span,\n             node: ast::ItemKind::Mod(krate.module),\n-            ident: Ident::with_empty_ctxt(kw::Invalid),\n+            ident: Ident::invalid(),\n             id: ast::DUMMY_NODE_ID,\n             vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n             tokens: None,\n@@ -708,7 +708,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n         let path = &mac.node.path;\n \n-        let ident = ident.unwrap_or_else(|| Ident::with_empty_ctxt(kw::Invalid));\n+        let ident = ident.unwrap_or_else(|| Ident::invalid());\n         let validate_and_set_expn_info = |this: &mut Self, // arg instead of capture\n                                           def_site_span: Option<Span>,\n                                           allow_internal_unstable,\n@@ -929,7 +929,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this\n-                    path: Path::from_ident(Ident::with_empty_ctxt(kw::Invalid)),\n+                    path: Path::from_ident(Ident::invalid()),\n                     span: DUMMY_SP,\n                     node: ast::MetaItemKind::Word,\n                 };\n@@ -1338,7 +1338,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 })\n             }\n             ast::ItemKind::Mod(ast::Mod { inner, .. }) => {\n-                if item.ident == Ident::with_empty_ctxt(kw::Invalid) {\n+                if item.ident == Ident::invalid() {\n                     return noop_flat_map_item(item, self);\n                 }\n "}, {"sha": "8f24d11cfd5b0696da080a9cd55211c757086f6c", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -6,7 +6,6 @@ use crate::ext::hygiene::Mark;\n use crate::tokenstream::TokenStream;\n use crate::mut_visit::*;\n use crate::ptr::P;\n-use crate::symbol::kw;\n use crate::ThinVec;\n \n use smallvec::{smallvec, SmallVec};\n@@ -22,7 +21,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         })\n     }\n \n-    let ident = ast::Ident::with_empty_ctxt(kw::Invalid);\n+    let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n     let generics = ast::Generics::default();\n     let vis = dummy_spanned(ast::VisibilityKind::Inherited);"}, {"sha": "a029c6546595217abe0855f1f74ebb06fd5c2995", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -228,7 +228,7 @@ pub fn parse(\n                 result.push(TokenTree::MetaVarDecl(\n                     span,\n                     ident,\n-                    ast::Ident::with_empty_ctxt(kw::Invalid),\n+                    ast::Ident::invalid(),\n                 ));\n             }\n \n@@ -334,7 +334,7 @@ where\n                     pprust::token_to_string(&tok)\n                 );\n                 sess.span_diagnostic.span_err(span, &msg);\n-                TokenTree::MetaVar(span, ast::Ident::with_empty_ctxt(kw::Invalid))\n+                TokenTree::MetaVar(span, ast::Ident::invalid())\n             }\n \n             // There are no more tokens. Just return the `$` we already have."}, {"sha": "a6564de3b982daa9ef7ced6f84abd3982e793e5f", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -11,7 +11,6 @@ use crate::ast::*;\n use crate::source_map::{Spanned, respan};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n-use crate::symbol::kw;\n use crate::ThinVec;\n use crate::tokenstream::*;\n use crate::util::map_in_place::MapInPlace;\n@@ -977,7 +976,7 @@ pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod,\n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n     visit_clobber(krate, |Crate { module, attrs, span }| {\n         let item = P(Item {\n-            ident: Ident::with_empty_ctxt(kw::Invalid),\n+            ident: Ident::invalid(),\n             attrs,\n             id: DUMMY_NODE_ID,\n             vis: respan(span.shrink_to_lo(), VisibilityKind::Public),"}, {"sha": "6c1f1d51a074151474cbd361a305129948d7b381", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -1480,9 +1480,7 @@ impl<'a> Parser<'a> {\n             (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"trait\", None, &mut false)? {\n             // trait item macro.\n-            (Ident::with_empty_ctxt(kw::Invalid),\n-             ast::TraitItemKind::Macro(mac),\n-             ast::Generics::default())\n+            (Ident::invalid(), ast::TraitItemKind::Macro(mac), ast::Generics::default())\n         } else {\n             let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n \n@@ -4988,7 +4986,7 @@ impl<'a> Parser<'a> {\n \n             // it's a macro invocation\n             let id = match self.token {\n-                token::OpenDelim(_) => Ident::with_empty_ctxt(kw::Invalid), // no special identifier\n+                token::OpenDelim(_) => Ident::invalid(), // no special identifier\n                 _ => self.parse_ident()?,\n             };\n \n@@ -6396,7 +6394,7 @@ impl<'a> Parser<'a> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(vis), at_end)? {\n             // method macro\n-            Ok((Ident::with_empty_ctxt(kw::Invalid), vec![], ast::Generics::default(),\n+            Ok((Ident::invalid(), vec![], ast::Generics::default(),\n                 ast::ImplItemKind::Macro(mac)))\n         } else {\n             let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n@@ -6616,7 +6614,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok((Ident::with_empty_ctxt(kw::Invalid), item_kind, Some(attrs)))\n+        Ok((Ident::invalid(), item_kind, Some(attrs)))\n     }\n \n     fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n@@ -7414,7 +7412,7 @@ impl<'a> Parser<'a> {\n             abi,\n             items: foreign_items\n         };\n-        let invalid = Ident::with_empty_ctxt(kw::Invalid);\n+        let invalid = Ident::invalid();\n         Ok(self.mk_item(lo.to(prev_span), invalid, ItemKind::ForeignMod(m), visibility, attrs))\n     }\n \n@@ -7662,7 +7660,7 @@ impl<'a> Parser<'a> {\n \n             let span = lo.to(self.prev_span);\n             let item =\n-                self.mk_item(span, Ident::with_empty_ctxt(kw::Invalid), item_, visibility, attrs);\n+                self.mk_item(span, Ident::invalid(), item_, visibility, attrs);\n             return Ok(Some(item));\n         }\n \n@@ -8108,7 +8106,7 @@ impl<'a> Parser<'a> {\n             Some(mac) => {\n                 Ok(\n                     ForeignItem {\n-                        ident: Ident::with_empty_ctxt(kw::Invalid),\n+                        ident: Ident::invalid(),\n                         span: lo.to(self.prev_span),\n                         id: ast::DUMMY_NODE_ID,\n                         attrs,\n@@ -8155,7 +8153,7 @@ impl<'a> Parser<'a> {\n             let id = if self.token.is_ident() {\n                 self.parse_ident()?\n             } else {\n-                Ident::with_empty_ctxt(kw::Invalid) // no special identifier\n+                Ident::invalid() // no special identifier\n             };\n             // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;"}, {"sha": "398705857bb7e91351f2c668fb6867af9438cca6", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -118,7 +118,7 @@ pub fn maybe_inject_crates_ref(\n             span,\n         })),\n         id: ast::DUMMY_NODE_ID,\n-        ident: ast::Ident::with_empty_ctxt(kw::Invalid),\n+        ident: ast::Ident::invalid(),\n         span,\n         tokens: None,\n     }));"}, {"sha": "0689eb50f9ca2b65f4c53ec5dfe1f9f3a0bdb88e", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -686,7 +686,7 @@ impl<'a> TraitDef<'a> {\n         };\n \n         cx.item(self.span,\n-                Ident::with_empty_ctxt(kw::Invalid),\n+                Ident::invalid(),\n                 a,\n                 ast::ItemKind::Impl(unsafety,\n                                     ast::ImplPolarity::Positive,"}, {"sha": "5220143a3cc461b2753d1587b50ccf6ad38e03d4", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -37,7 +37,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {\n-                ident: ast::Ident::with_empty_ctxt(Symbol::intern(\"\")),\n+                ident: ast::Ident::invalid(),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ItemKind::GlobalAsm(P(global_asm)),"}, {"sha": "f9f0b097f7a8cd877dafe9794284f48d1a31b375", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c389a39c9728d5c912a9ce1bc4c04eb1a3f31fe8", "patch": "@@ -641,6 +641,11 @@ impl Ident {\n         Ident::new(name, DUMMY_SP)\n     }\n \n+    #[inline]\n+    pub fn invalid() -> Ident {\n+        Ident::with_empty_ctxt(kw::Invalid)\n+    }\n+\n     /// Maps an interned string to an identifier with an empty syntax context.\n     pub fn from_interned_str(string: InternedString) -> Ident {\n         Ident::with_empty_ctxt(string.as_symbol())"}]}