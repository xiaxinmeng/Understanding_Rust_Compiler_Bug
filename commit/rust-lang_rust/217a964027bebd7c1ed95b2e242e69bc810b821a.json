{"sha": "217a964027bebd7c1ed95b2e242e69bc810b821a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxN2E5NjQwMjdiZWJkN2MxZWQ5NWIyZTI0MmU2OWJjODEwYjgyMWE=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2016-06-14T12:22:41Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2016-06-15T12:45:50Z"}, "message": "Map::Entry::take() method to recover key and value together", "tree": {"sha": "82b8ffaa45eaf9ff6f4be862167cf7a499648fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b8ffaa45eaf9ff6f4be862167cf7a499648fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/217a964027bebd7c1ed95b2e242e69bc810b821a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/217a964027bebd7c1ed95b2e242e69bc810b821a", "html_url": "https://github.com/rust-lang/rust/commit/217a964027bebd7c1ed95b2e242e69bc810b821a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/217a964027bebd7c1ed95b2e242e69bc810b821a/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af8f3e362fd1c931503703079467df027b57cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af8f3e362fd1c931503703079467df027b57cdb", "html_url": "https://github.com/rust-lang/rust/commit/1af8f3e362fd1c931503703079467df027b57cdb"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "3b775dc2865eea0b2cb9ba1ea83731592098c600", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/217a964027bebd7c1ed95b2e242e69bc810b821a/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217a964027bebd7c1ed95b2e242e69bc810b821a/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=217a964027bebd7c1ed95b2e242e69bc810b821a", "patch": "@@ -1898,6 +1898,12 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n         &self.key\n     }\n \n+    /// Take ownership of the key.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn into_key(self) -> K {\n+        self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1950,6 +1956,12 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n         self.handle.reborrow().into_kv().0\n     }\n \n+    /// Take ownership of the key and value from the map.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        self.remove_kv()\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {"}, {"sha": "536f168e4010843216c6bc07044ae6a57c78e1e4", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/217a964027bebd7c1ed95b2e242e69bc810b821a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217a964027bebd7c1ed95b2e242e69bc810b821a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=217a964027bebd7c1ed95b2e242e69bc810b821a", "patch": "@@ -1552,6 +1552,12 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.elem.read().0\n     }\n \n+    /// Take the ownership of the key and value from the map.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        pop_internal(self.elem)\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n@@ -1584,6 +1590,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     pub fn remove(self) -> V {\n         pop_internal(self.elem).1\n     }\n+\n     /// Returns a key that was used for search.\n     ///\n     /// The key was retained for further use.\n@@ -1600,6 +1607,12 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         &self.key\n     }\n \n+    /// Take ownership of the key.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn into_key(self) -> K {\n+        self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}