{"sha": "a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YThmNmM1YjM3NTk3YmY2OTE3OGVlNWNjNmMxODViNzEzN2Y1ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-18T05:16:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-18T05:16:26Z"}, "message": "Auto merge of #61864 - lzutao:ptr-null, r=sfackler\n\nMake use of `ptr::null(_mut)` instead of casting zero\n\nThere are few places that I don't replace the zero casting pointer with `ptr::null`\nor `ptr::null_mut`:\n```bash\n% git grep -E '[ ([{]0 as \\*'\nsrc/libcore/ptr/mod.rs:216:pub const fn null<T>() -> *const T { 0 as *const T }\nsrc/libcore/ptr/mod.rs:231:pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\nsrc/test/run-pass/consts/const-cast-ptr-int.rs:12:static a: TestStruct = TestStruct{x: 0 as *const u8};\nsrc/test/ui/issues/issue-45730.rs:5:    let x: *const _ = 0 as *const _; //~ ERROR cannot cast\nsrc/test/ui/issues/issue-45730.rs:8:    let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\nsrc/test/ui/issues/issue-45730.stderr:14:LL |     let x: *const _ = 0 as *const _;\nsrc/test/ui/issues/issue-45730.stderr:24:LL |     let x = 0 as *const i32 as *const _ as *mut _;\nsrc/test/ui/lint/lint-forbid-internal-unsafe.rs:15:    println!(\"{}\", evil!(*(0 as *const u8)));\nsrc/test/ui/order-dependent-cast-inference.rs:5:    let mut y = 0 as *const _;\nsrc/test/ui/order-dependent-cast-inference.stderr:4:LL |     let mut y = 0 as *const _;\n```\n\nr? @sfackler", "tree": {"sha": "6a337af65cf1c71cfe81bf552912e67f949b3d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a337af65cf1c71cfe81bf552912e67f949b3d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "html_url": "https://github.com/rust-lang/rust/commit/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704ab2ba10c4d878f879047cdac94a61751ce943", "url": "https://api.github.com/repos/rust-lang/rust/commits/704ab2ba10c4d878f879047cdac94a61751ce943", "html_url": "https://github.com/rust-lang/rust/commit/704ab2ba10c4d878f879047cdac94a61751ce943"}, {"sha": "7d69d4ced23c446d6af341e3f9dc031a302150fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d69d4ced23c446d6af341e3f9dc031a302150fc", "html_url": "https://github.com/rust-lang/rust/commit/7d69d4ced23c446d6af341e3f9dc031a302150fc"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "6867d62a480bd2ba57a5a08767f784ad1266c423", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -32,6 +32,7 @@\n use std::env;\n use std::io;\n use std::mem;\n+use std::ptr;\n use crate::Build;\n \n type HANDLE = *mut u8;\n@@ -118,8 +119,8 @@ pub unsafe fn setup(build: &mut Build) {\n     SetErrorMode(mode & !SEM_NOGPFAULTERRORBOX);\n \n     // Create a new job object for us to use\n-    let job = CreateJobObjectW(0 as *mut _, 0 as *const _);\n-    assert!(job != 0 as *mut _, \"{}\", io::Error::last_os_error());\n+    let job = CreateJobObjectW(ptr::null_mut(), ptr::null());\n+    assert!(!job.is_null(), \"{}\", io::Error::last_os_error());\n \n     // Indicate that when all handles to the job object are gone that all\n     // process in the object should be killed. Note that this includes our\n@@ -166,8 +167,8 @@ pub unsafe fn setup(build: &mut Build) {\n     };\n \n     let parent = OpenProcess(PROCESS_DUP_HANDLE, FALSE, pid.parse().unwrap());\n-    assert!(parent != 0 as *mut _, \"{}\", io::Error::last_os_error());\n-    let mut parent_handle = 0 as *mut _;\n+    assert!(!parent.is_null(), \"{}\", io::Error::last_os_error());\n+    let mut parent_handle = ptr::null_mut();\n     let r = DuplicateHandle(GetCurrentProcess(), job,\n                             parent, &mut parent_handle,\n                             0, FALSE, DUPLICATE_SAME_ACCESS);"}, {"sha": "47f5edd15631a36aec6c3ff21ae95c174c988a82", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -209,7 +209,7 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n             let h = CreateFileW(path.as_ptr(),\n                                 GENERIC_WRITE,\n                                 FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n-                                0 as *mut _,\n+                                ptr::null_mut(),\n                                 OPEN_EXISTING,\n                                 FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_BACKUP_SEMANTICS,\n                                 ptr::null_mut());"}, {"sha": "3d16e335cd8f11870745d0dadf5e30ea2ad91c2d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -114,8 +114,8 @@ impl<T> Default for TypedArena<T> {\n         TypedArena {\n             // We set both `ptr` and `end` to 0 so that the first call to\n             // alloc() will trigger a grow().\n-            ptr: Cell::new(0 as *mut T),\n-            end: Cell::new(0 as *mut T),\n+            ptr: Cell::new(ptr::null_mut()),\n+            end: Cell::new(ptr::null_mut()),\n             chunks: RefCell::new(vec![]),\n             _own: PhantomData,\n         }\n@@ -370,8 +370,8 @@ impl Default for DroplessArena {\n     #[inline]\n     fn default() -> DroplessArena {\n         DroplessArena {\n-            ptr: Cell::new(0 as *mut u8),\n-            end: Cell::new(0 as *mut u8),\n+            ptr: Cell::new(ptr::null_mut()),\n+            end: Cell::new(ptr::null_mut()),\n             chunks: Default::default(),\n         }\n     }"}, {"sha": "8675632638712aa2593f77f1b1bcba0621316680", "filename": "src/libpanic_unwind/dummy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibpanic_unwind%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibpanic_unwind%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdummy.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -7,7 +7,7 @@ use core::any::Any;\n use core::intrinsics;\n \n pub fn payload() -> *mut u8 {\n-    0 as *mut u8\n+    core::ptr::null_mut()\n }\n \n pub unsafe fn cleanup(_ptr: *mut u8) -> Box<dyn Any + Send> {"}, {"sha": "809e4619812dec41c90575e81069f039e62e53d4", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -104,7 +104,7 @@ mod imp {\n     pub const NAME2: [u8; 7] = [b'.', b'P', b'A', b'X', 0, 0, 0];\n \n     macro_rules! ptr {\n-        (0) => (0 as *mut u8);\n+        (0) => (core::ptr::null_mut());\n         ($e:expr) => ($e as *mut u8);\n     }\n }\n@@ -223,13 +223,13 @@ extern \"C\" {\n #[cfg_attr(not(test), lang = \"msvc_try_filter\")]\n static mut TYPE_DESCRIPTOR1: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n-    spare: 0 as *mut _,\n+    spare: core::ptr::null_mut(),\n     name: imp::NAME1,\n };\n \n static mut TYPE_DESCRIPTOR2: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n-    spare: 0 as *mut _,\n+    spare: core::ptr::null_mut(),\n     name: imp::NAME2,\n };\n "}, {"sha": "25a27d2cbd884d953c3e28e64c7f043d2db5e519", "filename": "src/librustc_errors/lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_errors%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_errors%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flock.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -64,7 +64,7 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n         //\n         // This will silently create one if it doesn't already exist, or it'll\n         // open up a handle to one if it already exists.\n-        let mutex = CreateMutexA(0 as *mut _, 0, cname.as_ptr() as *const u8);\n+        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr() as *const u8);\n         if mutex.is_null() {\n             panic!(\"failed to create global mutex named `{}`: {}\",\n                    name,"}, {"sha": "4c279361ff5e1c657b2781670e53634a948b8e55", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -115,7 +115,7 @@ mod dl {\n     {\n         use std::sync::{Mutex, Once};\n         static INIT: Once = Once::new();\n-        static mut LOCK: *mut Mutex<()> = 0 as *mut _;\n+        static mut LOCK: *mut Mutex<()> = ptr::null_mut();\n         unsafe {\n             INIT.call_once(|| {\n                 LOCK = Box::into_raw(Box::new(Mutex::new(())));"}, {"sha": "b5b214d4aff6b9dcc8ad9be89b4d798392f53687", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -3904,7 +3904,7 @@ x as Vec<u8>; // error: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n \n // Another example\n \n-let v = 0 as *const u8; // So here, `v` is a `*const u8`.\n+let v = core::ptr::null::<u8>(); // So here, `v` is a `*const u8`.\n v as &u8; // error: non-primitive cast: `*const u8` as `&u8`\n ```\n \n@@ -3914,7 +3914,7 @@ Only primitive types can be cast into each other. Examples:\n let x = 0u8;\n x as u32; // ok!\n \n-let v = 0 as *const u8;\n+let v = core::ptr::null::<u8>();\n v as *const i8; // ok!\n ```\n \n@@ -3954,7 +3954,7 @@ A cast between a thin and a fat pointer was attempted.\n Erroneous code example:\n \n ```compile_fail,E0607\n-let v = 0 as *const u8;\n+let v = core::ptr::null::<u8>();\n v as *const [u8];\n ```\n "}, {"sha": "8b4b354d9fc20ce868be48418e332b3b698018b6", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -32,7 +32,7 @@ fn maybe_args() -> io::Result<Args> {\n         let (mut argc, mut argv_buf_size) = (0, 0);\n         cvt_wasi(libc::__wasi_args_sizes_get(&mut argc, &mut argv_buf_size))?;\n \n-        let mut argc = vec![0 as *mut libc::c_char; argc];\n+        let mut argc = vec![core::ptr::null_mut::<libc::c_char>(); argc];\n         let mut argv_buf = vec![0; argv_buf_size];\n         cvt_wasi(libc::__wasi_args_get(argc.as_mut_ptr(), argv_buf.as_mut_ptr()))?;\n "}, {"sha": "3dc0bb24553fd644450b36c29a148d26a30fdbad", "filename": "src/libstd/sys/wasm/thread_local_atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_atomics.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -11,7 +11,7 @@ struct ThreadControlBlock {\n impl ThreadControlBlock {\n     fn new() -> ThreadControlBlock {\n         ThreadControlBlock {\n-            keys: [0 as *mut u8; MAX_KEYS],\n+            keys: [core::ptr::null_mut(); MAX_KEYS],\n         }\n     }\n "}, {"sha": "d4612c325d5ac66f9077363118c16af3d7fe4208", "filename": "src/test/run-make-fulldeps/alloc-extern-crates/fakealloc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -2,14 +2,16 @@\n #![no_std]\n \n #[inline]\n-pub unsafe fn allocate(_size: usize, _align: usize) -> *mut u8 { 0 as *mut u8 }\n+pub unsafe fn allocate(_size: usize, _align: usize) -> *mut u8 {\n+    core::ptr::null_mut()\n+}\n \n #[inline]\n pub unsafe fn deallocate(_ptr: *mut u8, _old_size: usize, _align: usize) { }\n \n #[inline]\n pub unsafe fn reallocate(_ptr: *mut u8, _old_size: usize, _size: usize, _align: usize) -> *mut u8 {\n-    0 as *mut u8\n+    core::ptr::null_mut()\n }\n \n #[inline]"}, {"sha": "c7977f461dfccf304c899db06262438c198d44af", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -15,5 +15,5 @@ pub fn main() {\n     // Test that `_` is correctly inferred.\n     let x = &\"hello\";\n     let mut y = x as *const _;\n-    y = 0 as *const _;\n+    y = core::ptr::null_mut();\n }"}, {"sha": "6e67a276d4f1c3bbd4bea49117b767924c029dca", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n \n     if args.len() >= 2 && args[1] == \"signal\" {\n         // Raise a segfault.\n-        unsafe { *(0 as *mut isize) = 0; }\n+        unsafe { *std::ptr::null_mut::<isize>() = 0; }\n     }\n }"}, {"sha": "7172a34c8cfeba6a4c5994482251a387fc6252c2", "filename": "src/test/run-pass/consts/const-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -21,7 +21,7 @@ static BLOCK_EXPLICIT_UNIT: () = { () };\n static BLOCK_IMPLICIT_UNIT: () = { };\n static BLOCK_FLOAT: f64 = { 1.0 };\n static BLOCK_ENUM: Option<usize> = { Some(100) };\n-static BLOCK_STRUCT: Foo = { Foo { a: 12, b: 0 as *const () } };\n+static BLOCK_STRUCT: Foo = { Foo { a: 12, b: std::ptr::null::<()>() } };\n static BLOCK_UNSAFE: usize = unsafe { 1000 };\n \n static BLOCK_FN_INFERRED: fn(usize) -> usize = { foo };\n@@ -36,7 +36,7 @@ pub fn main() {\n     assert_eq!(BLOCK_IMPLICIT_UNIT, ());\n     assert_eq!(BLOCK_FLOAT, 1.0_f64);\n     assert_eq!(BLOCK_STRUCT.a, 12);\n-    assert_eq!(BLOCK_STRUCT.b, 0 as *const ());\n+    assert_eq!(BLOCK_STRUCT.b, std::ptr::null::<()>());\n     assert_eq!(BLOCK_ENUM, Some(100));\n     assert_eq!(BLOCK_UNSAFE, 1000);\n     assert_eq!(BLOCK_FN_INFERRED(300), 300);"}, {"sha": "740e7780de67a35a6f9e6eff6a0e01c8d67be0e5", "filename": "src/test/run-pass/issues/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -23,8 +23,8 @@ mod imp {\n     pub fn test() {\n         let mut buf: [u16; 50] = [0; 50];\n         let ret = unsafe {\n-            FormatMessageW(0x1000, 0 as *mut _, 1, 0x400,\n-                           buf.as_mut_ptr(), buf.len() as u32, 0 as *const _)\n+            FormatMessageW(0x1000, core::ptr::null_mut(), 1, 0x400,\n+                           buf.as_mut_ptr(), buf.len() as u32, core::ptr::null())\n         };\n         // On some 32-bit Windowses (Win7-8 at least) this will panic with segmented\n         // stacks taking control of pvArbitrary"}, {"sha": "76c380c2fc97e878d92d32af66b140b7b0137795", "filename": "src/test/run-pass/issues/issue-19001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -7,5 +7,5 @@ struct Loopy {\n }\n \n fn main() {\n-    let _t = Loopy { ptr: 0 as *mut _ };\n+    let _t = Loopy { ptr: core::ptr::null_mut() };\n }"}, {"sha": "8314be3d14cc5acc242ce9663a5bfd51760bd3eb", "filename": "src/test/run-pass/issues/issue-39367.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -15,7 +15,7 @@ fn arena() -> &'static ArenaSet<Vec<u8>> {\n         fn require_sync<T: Sync>(_: &T) { }\n         unsafe fn __stability() -> &'static ArenaSet<Vec<u8>> {\n             use std::mem::transmute;\n-            static mut DATA: *const ArenaSet<Vec<u8>> = 0 as *const ArenaSet<Vec<u8>>;\n+            static mut DATA: *const ArenaSet<Vec<u8>> = std::ptr::null_mut();\n \n             static mut ONCE: Once = Once::new();\n             ONCE.call_once(|| {"}, {"sha": "1d4f789828d8bd726534258facfee1094b7408e8", "filename": "src/test/run-pass/issues/issue-46069.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-46069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fissues%2Fissue-46069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-46069.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -17,7 +17,7 @@ fn copy_ex() {\n }\n \n fn main() {\n-    let _f = 0 as *mut <Fuse<Cloned<Iter<u8>>> as Iterator>::Item;\n+    let _f: *mut <Fuse<Cloned<Iter<u8>>> as Iterator>::Item = std::ptr::null_mut();\n \n     copy_ex();\n }"}, {"sha": "32fdbf620a98d0c73d9acaf203eb9b60a7141f7d", "filename": "src/test/run-pass/structs-enums/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -38,7 +38,7 @@ fn main() {\n \n     // The optimization can't apply to raw pointers or unions with a ZST field.\n     assert!(size_of::<Option<*const isize>>() != size_of::<*const isize>());\n-    assert!(Some(0 as *const isize).is_some()); // Can't collapse None to null\n+    assert!(Some(std::ptr::null::<isize>()).is_some()); // Can't collapse None to null\n     assert_ne!(size_of::<fn(isize)>(), size_of::<Option<MaybeUninitUnion<fn(isize)>>>());\n     assert_ne!(size_of::<&str>(), size_of::<Option<MaybeUninitUnion<&str>>>());\n     assert_ne!(size_of::<NonNull<isize>>(), size_of::<Option<MaybeUninitUnion<NonNull<isize>>>>());"}, {"sha": "3d0fea245c0c2339f07d5db0cd28e694900e2756", "filename": "src/test/ui/casts-issue-46365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fcasts-issue-46365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fcasts-issue-46365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-issue-46365.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -3,5 +3,5 @@ struct Lorem {\n }\n \n fn main() {\n-    let _foo: *mut Lorem = 0 as *mut _; // no error here\n+    let _foo: *mut Lorem = core::ptr::null_mut(); // no error here\n }"}, {"sha": "2ad1a633d125f18af76f35b09222dbad621ea1b9", "filename": "src/test/ui/consts/const-eval/ice-generic-assoc-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -7,7 +7,7 @@ pub trait Nullable {\n }\n \n impl<T> Nullable for *const T {\n-    const NULL: Self = 0 as *const T;\n+    const NULL: Self = core::ptr::null::<T>();\n \n     fn is_null(&self) -> bool {\n         *self == Self::NULL"}, {"sha": "9523fcbfc603f64e3341a3503b388a5cdeb7b2ca", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -69,8 +69,8 @@ const fn i32_ops3(c: i32, d: i32) -> bool { c != d }\n const fn i32_ops4(c: i32, d: i32) -> i32 { c + d }\n const fn char_cast(u: u8) -> char { u as char }\n const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n-const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { 0 as *const T }\n-const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { 0 as *mut T }\n+const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { core::ptr::null() }\n+const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { core::ptr::null_mut() }\n \n // not ok\n const fn foo11<T: std::fmt::Display>(t: T) -> T { t }"}, {"sha": "0152561aefcb2c5fa182a55db1b04ad089c656c6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -3,8 +3,8 @@\n //------------------------------------------------------------------------------\n \n const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n-const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { 0 as *const T }\n-const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { 0 as *mut T }\n+const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { std::ptr::null() }\n+const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { std::ptr::null_mut() }\n const fn no_unsafe() { unsafe {} }\n \n const fn call_unsafe_const_fn() -> i32 {"}, {"sha": "cfdee26c5599c48a5020d069c47f29e36ec8a2e3", "filename": "src/test/ui/derived-errors/issue-31997.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -10,7 +10,7 @@ fn closure<F, T>(x: F) -> Result<T, ()>\n }\n \n fn foo() -> Result<(), ()> {\n-    try!(closure(|| bar(0 as *mut _))); //~ ERROR cannot find function `bar` in this scope\n+    try!(closure(|| bar(core::ptr::null_mut()))); //~ ERROR cannot find function `bar` in this scope\n     Ok(())\n }\n "}, {"sha": "e9fe0d3971ee68eb8bfd915dab01e79ac16c878e", "filename": "src/test/ui/derived-errors/issue-31997.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997.stderr?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -1,7 +1,7 @@\n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/issue-31997.rs:13:21\n    |\n-LL |     try!(closure(|| bar(0 as *mut _)));\n+LL |     try!(closure(|| bar(core::ptr::null_mut())));\n    |                     ^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "cfbf1aa2bd76530593dfde6fedccd08699df52e5", "filename": "src/test/ui/error-codes/E0605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-codes%2FE0605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-codes%2FE0605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let x = 0u8;\n     x as Vec<u8>; //~ ERROR E0605\n \n-    let v = 0 as *const u8;\n+    let v = std::ptr::null::<u8>();\n     v as &u8; //~ ERROR E0605\n }"}, {"sha": "65001c471cb4bc9b92f9fda773dd0a10b575c4ed", "filename": "src/test/ui/error-codes/E0607.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-codes%2FE0607.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-codes%2FE0607.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0607.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let v = 0 as *const u8;\n+    let v = core::ptr::null::<u8>();\n     v as *const [u8]; //~ ERROR E0607\n }"}, {"sha": "356564e54077a3353aa31a983d3b4b42db5feffa", "filename": "src/test/ui/error-festival.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-festival.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Ferror-festival.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     let y: u32 = x as u32;\n     //~^ ERROR E0606\n \n-    let v = 0 as *const u8;\n+    let v = core::ptr::null::<u8>();\n     v as *const [u8];\n     //~^ ERROR E0607\n }"}, {"sha": "d56ffebad7d5aeb339713ebdd6845c376702050d", "filename": "src/test/ui/issues/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -1,4 +1,4 @@\n-static X: usize = unsafe { 0 as *const usize as usize };\n+static X: usize = unsafe { core::ptr::null::<usize>() as usize };\n //~^ ERROR: casting pointers to integers in statics is unstable\n \n fn main() {"}, {"sha": "d51d2f50d6faf2ec34b8557bd0e2740de44e9397", "filename": "src/test/ui/issues/issue-17458.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: casting pointers to integers in statics is unstable\n   --> $DIR/issue-17458.rs:1:28\n    |\n-LL | static X: usize = unsafe { 0 as *const usize as usize };\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static X: usize = unsafe { core::ptr::null::<usize>() as usize };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable"}, {"sha": "c3f136f2876b699603b37afe9d2f8c1b52299704", "filename": "src/test/ui/issues/issue-20801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -15,11 +15,11 @@ fn mut_ref() -> &'static mut T {\n }\n \n fn mut_ptr() -> *mut T {\n-    unsafe { 0 as *mut T }\n+    unsafe { core::ptr::null_mut() }\n }\n \n fn const_ptr() -> *const T {\n-    unsafe { 0 as *const T }\n+    unsafe { core::ptr::null() }\n }\n \n pub fn main() {"}, {"sha": "fab1cdadaf5e1562449fef1146febf6f4c038295", "filename": "src/test/ui/issues/issue-22034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -3,7 +3,7 @@\n extern crate libc;\n \n fn main() {\n-    let ptr: *mut () = 0 as *mut _;\n+    let ptr: *mut () = core::ptr::null_mut();\n     let _: &mut dyn Fn() = unsafe {\n         &mut *(ptr as *mut dyn Fn())\n         //~^ ERROR expected a `std::ops::Fn<()>` closure, found `()`"}, {"sha": "b8d12fb9809ced8af56340cc997e3c8af0acf420", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=a6a8f6c5b37597bf69178ee5cc6c185b7137f5d8", "patch": "@@ -21,9 +21,9 @@ enum E {\n fn main()\n {\n     let f: f32 = 1.2;\n-    let v = 0 as *const u8;\n-    let fat_v : *const [u8] = unsafe { &*(0 as *const [u8; 1])};\n-    let fat_sv : *const [i8] = unsafe { &*(0 as *const [i8; 1])};\n+    let v = core::ptr::null::<u8>();\n+    let fat_v : *const [u8] = unsafe { &*core::ptr::null::<[u8; 1]>()};\n+    let fat_sv : *const [i8] = unsafe { &*core::ptr::null::<[i8; 1]>()};\n     let foo: &dyn Foo = &f;\n \n     let _ = v as &u8; //~ ERROR non-primitive cast"}]}