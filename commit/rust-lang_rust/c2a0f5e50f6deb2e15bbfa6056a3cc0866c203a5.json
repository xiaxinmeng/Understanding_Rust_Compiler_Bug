{"sha": "c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTBmNWU1MGY2ZGViMmUxNWJiZmE2MDU2YTNjYzA4NjZjMjAzYTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T13:20:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T16:30:49Z"}, "message": "move goto_defenition to a separate file", "tree": {"sha": "c2b1d13dc1cbae2c99e69b2cd9ec63d0f04e2996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2b1d13dc1cbae2c99e69b2cd9ec63d0f04e2996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "html_url": "https://github.com/rust-lang/rust/commit/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4551155073d8e12dd7aa467f6cd90e8705a115b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4551155073d8e12dd7aa467f6cd90e8705a115b3", "html_url": "https://github.com/rust-lang/rust/commit/4551155073d8e12dd7aa467f6cd90e8705a115b3"}], "stats": {"total": 102, "additions": 91, "deletions": 11}, "files": [{"sha": "91de7ef65ead6de00af050f75274938de283a11d", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "patch": "@@ -0,0 +1,80 @@\n+use ra_db::{FileId, Cancelable, SyntaxDatabase};\n+use ra_syntax::{TextRange, AstNode, ast, SyntaxKind::{NAME, MODULE}};\n+\n+use ra_editor::find_node_at_offset;\n+\n+use crate::{FilePosition, NavigationTarget, db::RootDatabase};\n+\n+pub(crate) fn goto_defenition(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Cancelable<Option<Vec<NavigationTarget>>> {\n+    let file = db.source_file(position.file_id);\n+    let syntax = file.syntax();\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n+        return Ok(Some(reference_defenition(db, position.file_id, name_ref)?));\n+    }\n+    if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n+        return name_defenition(db, position.file_id, name);\n+    }\n+    Ok(None)\n+}\n+\n+fn reference_defenition(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    name_ref: ast::NameRef,\n+) -> Cancelable<Vec<NavigationTarget>> {\n+    if let Some(fn_descr) =\n+        hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())?\n+    {\n+        let scope = fn_descr.scopes(db);\n+        // First try to resolve the symbol locally\n+        if let Some(entry) = scope.resolve_local_name(name_ref) {\n+            let nav = NavigationTarget {\n+                file_id,\n+                name: entry.name().to_string().into(),\n+                range: entry.ptr().range(),\n+                kind: NAME,\n+                ptr: None,\n+            };\n+            return Ok(vec![nav]);\n+        };\n+    }\n+    // If that fails try the index based approach.\n+    let navs = db\n+        .index_resolve(name_ref)?\n+        .into_iter()\n+        .map(NavigationTarget::from_symbol)\n+        .collect();\n+    Ok(navs)\n+}\n+\n+fn name_defenition(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    name: ast::Name,\n+) -> Cancelable<Option<Vec<NavigationTarget>>> {\n+    if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n+        if module.has_semi() {\n+            if let Some(child_module) =\n+                hir::source_binder::module_from_declaration(db, file_id, module)?\n+            {\n+                let file_id = child_module.file_id();\n+                let name = match child_module.name() {\n+                    Some(name) => name.to_string().into(),\n+                    None => \"\".into(),\n+                };\n+                let nav = NavigationTarget {\n+                    file_id,\n+                    name,\n+                    range: TextRange::offset_len(0.into(), 0.into()),\n+                    kind: MODULE,\n+                    ptr: None,\n+                };\n+                return Ok(Some(vec![nav]));\n+            }\n+        }\n+    }\n+    Ok(None)\n+}"}, {"sha": "6df118c20c01d39d281e01185caadfde2c1e3902", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "patch": "@@ -416,7 +416,7 @@ impl db::RootDatabase {\n             .collect::<Vec<_>>();\n         Ok(res)\n     }\n-    fn index_resolve(&self, name_ref: ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n+    pub(crate) fn index_resolve(&self, name_ref: ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();"}, {"sha": "0dac9f2680f4238be22c21cc38470810c6e4b09b", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "patch": "@@ -15,6 +15,7 @@ macro_rules! ctry {\n mod db;\n mod imp;\n mod completion;\n+mod goto_defenition;\n mod symbol_index;\n pub mod mock_analysis;\n mod runnables;\n@@ -396,16 +397,15 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<Vec<NavigationTarget>>> {\n-        let r = self.approximately_resolve_symbol(position)?;\n-        Ok(r.map(|it| it.resolves_to))\n-    }\n-    /// Resolves reference to definition, but does not gurantee correctness.\n-    pub fn approximately_resolve_symbol(\n-        &self,\n-        position: FilePosition,\n-    ) -> Cancelable<Option<ReferenceResolution>> {\n-        self.db.approximately_resolve_symbol(position)\n-    }\n+        goto_defenition::goto_defenition(&*self.db, position)\n+    }\n+    // /// Resolves reference to definition, but does not gurantee correctness.\n+    // pub fn approximately_resolve_symbol(\n+    //     &self,\n+    //     position: FilePosition,\n+    // ) -> Cancelable<Option<ReferenceResolution>> {\n+    //     self.db.approximately_resolve_symbol(position)\n+    // }\n     /// Finds all usages of the reference at point.\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n         self.db.find_all_refs(position)"}]}