{"sha": "70f7c624e442c3049d440cd20f8d77b66580105c", "node_id": "C_kwDOAAsO6NoAKDcwZjdjNjI0ZTQ0MmMzMDQ5ZDQ0MGNkMjBmOGQ3N2I2NjU4MDEwNWM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-05T01:54:34Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-15T01:34:33Z"}, "message": "Allow more complex expressions in `let_unit_value`", "tree": {"sha": "1544ba68bd9a4a11f91b8a64e592ef71d09999a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1544ba68bd9a4a11f91b8a64e592ef71d09999a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f7c624e442c3049d440cd20f8d77b66580105c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f7c624e442c3049d440cd20f8d77b66580105c", "html_url": "https://github.com/rust-lang/rust/commit/70f7c624e442c3049d440cd20f8d77b66580105c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f7c624e442c3049d440cd20f8d77b66580105c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48bcc1d95f07eaf03f72f98011e78cb8630798a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/48bcc1d95f07eaf03f72f98011e78cb8630798a4", "html_url": "https://github.com/rust-lang/rust/commit/48bcc1d95f07eaf03f72f98011e78cb8630798a4"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "96858fc7f274955d4bbeced6f0a9a6dbb9ec0a1e", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::visitors::for_each_value_source;\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n@@ -11,11 +12,18 @@ use super::LET_UNIT_VALUE;\n \n pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n     if let StmtKind::Local(local) = stmt.kind\n+        && let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n         && !in_external_macro(cx.sess(), stmt.span)\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n-        if local.init.map_or(false, |e| needs_inferred_result_ty(cx, e)) {\n+        let needs_inferred = for_each_value_source(init, &mut |e| if needs_inferred_result_ty(cx, e) {\n+            ControlFlow::Continue(())\n+        } else {\n+            ControlFlow::Break(())\n+        }).is_continue();\n+\n+        if needs_inferred {\n             if !matches!(local.pat.kind, PatKind::Wild) {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "c00bc2bd213f9a4fd3c8469fe16f0273167b1191", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -1,4 +1,5 @@\n use crate::path_to_local_id;\n+use core::ops::ControlFlow;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n@@ -402,3 +403,36 @@ pub fn contains_unsafe_block<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'tcx>)\n     v.visit_expr(e);\n     v.found_unsafe\n }\n+\n+/// Runs the given function for each sub-expression producing the final value consumed by the parent\n+/// of the give expression.\n+///\n+/// e.g. for the following expression\n+/// ```rust,ignore\n+/// if foo {\n+///     f(0)\n+/// } else {\n+///     1 + 1\n+/// }\n+/// ```\n+/// this will pass both `f(0)` and `1+1` to the given function.\n+pub fn for_each_value_source<'tcx, B>(\n+    e: &'tcx Expr<'tcx>,\n+    f: &mut impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>,\n+) -> ControlFlow<B> {\n+    match e.kind {\n+        ExprKind::Block(Block { expr: Some(e), .. }, _) => for_each_value_source(e, f),\n+        ExprKind::Match(_, arms, _) => {\n+            for arm in arms {\n+                for_each_value_source(arm.body, f)?;\n+            }\n+            ControlFlow::Continue(())\n+        },\n+        ExprKind::If(_, if_expr, Some(else_expr)) => {\n+            for_each_value_source(if_expr, f)?;\n+            for_each_value_source(else_expr, f)\n+        },\n+        ExprKind::DropTemps(e) => for_each_value_source(e, f),\n+        _ => f(e),\n+    }\n+}"}, {"sha": "95bb883df1bf10877db0fff7a242606284dc55a8", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -44,8 +44,8 @@ fn main() {\n         let _ = core::ptr::read_unaligned(ptr as *const u16);\n         let _ = core::intrinsics::unaligned_volatile_load(ptr as *const u16);\n         let ptr = &mut data as *mut [u8; 2] as *mut u8;\n-        let _ = (ptr as *mut u16).write_unaligned(0);\n-        let _ = core::ptr::write_unaligned(ptr as *mut u16, 0);\n-        let _ = core::intrinsics::unaligned_volatile_store(ptr as *mut u16, 0);\n+        (ptr as *mut u16).write_unaligned(0);\n+        core::ptr::write_unaligned(ptr as *mut u16, 0);\n+        core::intrinsics::unaligned_volatile_store(ptr as *mut u16, 0);\n     }\n }"}, {"sha": "e72b746232551b87861e2783cf5ce3d7d76dfd21", "filename": "tests/ui/let_unit.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -87,4 +87,29 @@ fn _returns_generic() {\n \n     f4(vec![()]); // Lint\n     f4(vec![()]); // Lint\n+\n+    // Ok\n+    let _: () = {\n+        let x = 5;\n+        f2(x)\n+    };\n+\n+    let _: () = if true { f() } else { f2(0) }; // Ok\n+    let _: () = if true { f() } else { f2(0) }; // Lint\n+\n+    // Ok\n+    let _: () = match Some(0) {\n+        None => f2(1),\n+        Some(0) => f(),\n+        Some(1) => f2(3),\n+        Some(_) => f2('x'),\n+    };\n+\n+    // Lint\n+    match Some(0) {\n+        None => f2(1),\n+        Some(0) => f(),\n+        Some(1) => f2(3),\n+        Some(_) => (),\n+    };\n }"}, {"sha": "47ee0a76724792445b8da0bd6465355b43fafb73", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -87,4 +87,29 @@ fn _returns_generic() {\n \n     let _: () = f4(vec![()]); // Lint\n     let x: () = f4(vec![()]); // Lint\n+\n+    // Ok\n+    let _: () = {\n+        let x = 5;\n+        f2(x)\n+    };\n+\n+    let _: () = if true { f() } else { f2(0) }; // Ok\n+    let x: () = if true { f() } else { f2(0) }; // Lint\n+\n+    // Ok\n+    let _: () = match Some(0) {\n+        None => f2(1),\n+        Some(0) => f(),\n+        Some(1) => f2(3),\n+        Some(_) => f2('x'),\n+    };\n+\n+    // Lint\n+    let _: () = match Some(0) {\n+        None => f2(1),\n+        Some(0) => f(),\n+        Some(1) => f2(3),\n+        Some(_) => (),\n+    };\n }"}, {"sha": "13ec11a6d33e9a9c12cc06f9a8e37facaab385f3", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -74,5 +74,34 @@ error: this let-binding has unit value\n LL |     let x: () = f4(vec![()]); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n \n-error: aborting due to 9 previous errors\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:98:5\n+   |\n+LL |     let x: () = if true { f() } else { f2(0) }; // Lint\n+   |     ^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: use a wild (`_`) binding: `_`\n+\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:109:5\n+   |\n+LL | /     let _: () = match Some(0) {\n+LL | |         None => f2(1),\n+LL | |         Some(0) => f(),\n+LL | |         Some(1) => f2(3),\n+LL | |         Some(_) => (),\n+LL | |     };\n+   | |______^\n+   |\n+help: omit the `let` binding\n+   |\n+LL ~     match Some(0) {\n+LL +         None => f2(1),\n+LL +         Some(0) => f(),\n+LL +         Some(1) => f2(3),\n+LL +         Some(_) => (),\n+LL +     };\n+   |\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "844cc4b7a09281ebaa23604078f83735625b17c7", "filename": "tests/ui/or_then_unwrap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2For_then_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2For_then_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.fixed?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::or_then_unwrap)]\n-#![allow(clippy::map_identity)]\n+#![allow(clippy::map_identity, clippy::let_unit_value)]\n \n struct SomeStruct;\n impl SomeStruct {"}, {"sha": "1528ef9be964de41ba522ee5fef9930ca3a159bb", "filename": "tests/ui/or_then_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::or_then_unwrap)]\n-#![allow(clippy::map_identity)]\n+#![allow(clippy::map_identity, clippy::let_unit_value)]\n \n struct SomeStruct;\n impl SomeStruct {"}, {"sha": "041ef17fa6834240c97e3234601e8432f3f0ff0a", "filename": "tests/ui/panicking_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7c624e442c3049d440cd20f8d77b66580105c/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=70f7c624e442c3049d440cd20f8d77b66580105c", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clippy::assertions_on_constants, clippy::eq_op)]\n+#![allow(clippy::assertions_on_constants, clippy::eq_op, clippy::let_unit_value)]\n #![feature(inline_const)]\n #![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n "}]}