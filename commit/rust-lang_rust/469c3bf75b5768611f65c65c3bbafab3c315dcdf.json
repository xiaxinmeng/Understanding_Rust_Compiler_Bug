{"sha": "469c3bf75b5768611f65c65c3bbafab3c315dcdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWMzYmY3NWI1NzY4NjExZjY1YzY1YzNiYmFmYWIzYzMxNWRjZGY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-01T02:00:32Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:34Z"}, "message": "Resolve nits brought up in review.", "tree": {"sha": "0ca777b106340f31e58412882de04f901735a714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca777b106340f31e58412882de04f901735a714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469c3bf75b5768611f65c65c3bbafab3c315dcdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469c3bf75b5768611f65c65c3bbafab3c315dcdf", "html_url": "https://github.com/rust-lang/rust/commit/469c3bf75b5768611f65c65c3bbafab3c315dcdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469c3bf75b5768611f65c65c3bbafab3c315dcdf/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "html_url": "https://github.com/rust-lang/rust/commit/4bdc3d833af1229420fce37b245d5cccd1d7cc3f"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "9ffbe1a68b8740d70257d7f8e6c526394e500751", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/469c3bf75b5768611f65c65c3bbafab3c315dcdf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469c3bf75b5768611f65c65c3bbafab3c315dcdf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=469c3bf75b5768611f65c65c3bbafab3c315dcdf", "patch": "@@ -58,6 +58,8 @@ use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n use std::iter;\n \n+struct OnlySelfBounds(bool);\n+\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n@@ -331,7 +333,7 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n         ast_generics: &hir::Generics,\n         param_id: ast::NodeId,\n         ty: Ty<'tcx>,\n-        only_self_bounds: bool,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let from_ty_params = ast_generics\n             .params\n@@ -354,12 +356,10 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n             .flat_map(|bp| {\n                 let bt = if is_param(self.tcx, &bp.bounded_ty, param_id) {\n                     Some(ty)\n+                } else if only_self_bounds.0 {\n+                    None\n                 } else {\n-                    if only_self_bounds {\n-                        None\n-                    } else {\n-                        Some(self.to_ty(&bp.bounded_ty))\n-                    }\n+                    Some(self.to_ty(&bp.bounded_ty))\n                 };\n                 bp.bounds.iter().filter_map(move |b| {\n                     if let Some(bt) = bt { Some((bt, b)) } else { None }\n@@ -710,7 +710,10 @@ fn super_predicates_of<'a, 'tcx>(\n     let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n     // Convert any explicit superbounds in the where clause,\n-    // e.g. `trait Foo where Self : Bar`:\n+    // e.g. `trait Foo where Self : Bar`.\n+    // In the case of trait aliases, however, we include all bounds in the where clause,\n+    // so e.g. `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n+    // as one of its \"superpredicates\".\n     let is_trait_alias = ty::is_trait_alias(tcx, trait_def_id);\n     let superbounds2 = icx.type_parameter_bounds_in_generics(\n         generics, item.id, self_param_ty, !is_trait_alias);"}]}