{"sha": "514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGRmMTVkOWUzMmUwNTdiYTIzZGRhMGQ0ZjVjMDdlODJlN2VkMjM=", "commit": {"author": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2020-01-19T16:51:03Z"}, "committer": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2020-01-19T16:51:03Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer", "tree": {"sha": "41e93f63182bae10a7325fc50220f67df79aaece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e93f63182bae10a7325fc50220f67df79aaece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "html_url": "https://github.com/rust-lang/rust/commit/514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/comments", "author": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b9a19eb72ae9542272ae7a22ac3fb57c75daca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b9a19eb72ae9542272ae7a22ac3fb57c75daca", "html_url": "https://github.com/rust-lang/rust/commit/c3b9a19eb72ae9542272ae7a22ac3fb57c75daca"}, {"sha": "3a7724e44181ccd5c248589538bd82458b5a9407", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7724e44181ccd5c248589538bd82458b5a9407", "html_url": "https://github.com/rust-lang/rust/commit/3a7724e44181ccd5c248589538bd82458b5a9407"}], "stats": {"total": 267, "additions": 181, "deletions": 86}, "files": [{"sha": "67822cb8abc3d5fe9ec94c4a78d274179544451c", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -45,7 +45,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.41\"\n+version = \"0.3.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -463,10 +463,10 @@ dependencies = [\n \n [[package]]\n name = \"indexmap\"\n-version = \"1.3.0\"\n+version = \"1.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -730,7 +730,7 @@ dependencies = [\n \n [[package]]\n name = \"num_cpus\"\n-version = \"1.11.1\"\n+version = \"1.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1038,7 +1038,7 @@ dependencies = [\n  \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fst 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1114,7 +1114,7 @@ dependencies = [\n name = \"ra_prof\"\n version = \"0.1.0\"\n dependencies = [\n- \"backtrace 0.3.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jemalloc-ctl 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jemallocator 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1353,7 +1353,7 @@ dependencies = [\n  \"crossbeam-queue 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1449,7 +1449,7 @@ version = \"0.14.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1631,7 +1631,7 @@ name = \"threadpool\"\n version = \"1.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num_cpus 1.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1781,7 +1781,7 @@ dependencies = [\n \"checksum atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n \"checksum autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \"checksum autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n-\"checksum backtrace 0.3.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4ed64ae6d9ebfd9893193c4b2532b1292ec97bd8271c9d7d0fa90cd78a34cba\"\n+\"checksum backtrace 0.3.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4b1549d804b6c73f4817df2ba073709e96e426f12987127c48e6745568c350b\"\n \"checksum backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n \"checksum base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n \"checksum bit-set 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e84c238982c4b1e1ee668d136c510c67a13465279c0cb367ea6baf6310620a80\"\n@@ -1832,7 +1832,7 @@ dependencies = [\n \"checksum hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n \"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n-\"checksum indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712d7b3ea5827fcb9d4fda14bf4da5f136f0db2ae9c8f4bd4e2d1c6fde4e6db2\"\n+\"checksum indexmap 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b54058f0a6ff80b6803da8faf8997cde53872b38f4023728f6830b06cd3c0dc\"\n \"checksum inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n \"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n \"checksum insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d499dc062e841590a67230d853bce62d0abeb91304927871670b7c55c461349\"\n@@ -1863,7 +1863,7 @@ dependencies = [\n \"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n \"checksum notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n \"checksum num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n-\"checksum num_cpus 1.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76dac5ed2a876980778b8b85f75a71b6cbf0db0b1232ee12f826bccb00d09d72\"\n+\"checksum num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n \"checksum once_cell 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5941ec2d5ee5916c709580d71553b81a633df245bcc73c04dcbd62152ceefc4\"\n \"checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n \"checksum parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e98c49ab0b7ce5b222f2cc9193fc4efe11c6d0bd4f648e374684a6857b1cfc\""}, {"sha": "31259a01de7218158d50aab6fdc0ad3ff9b22afb", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -386,11 +386,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     let lhs_ty = self.infer_expr(*lhs, &lhs_expectation);\n                     // FIXME: find implementation of trait corresponding to operation\n                     // symbol and resolve associated `Output` type\n-                    let rhs_expectation = op::binary_op_rhs_expectation(*op, lhs_ty);\n+                    let rhs_expectation = op::binary_op_rhs_expectation(*op, lhs_ty.clone());\n                     let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(rhs_expectation));\n \n                     // FIXME: similar as above, return ty is often associated trait type\n-                    op::binary_op_return_ty(*op, rhs_ty)\n+                    op::binary_op_return_ty(*op, lhs_ty, rhs_ty)\n                 }\n                 _ => Ty::Unknown,\n             },"}, {"sha": "ae253ca048759453f60bd95e11ef86f2720fd4fa", "filename": "crates/ra_hir_ty/src/op.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fop.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -1,13 +1,21 @@\n-//! FIXME: write short doc here\n-use hir_def::expr::{BinaryOp, CmpOp};\n+//! Helper functions for binary operator type inference.\n+use hir_def::expr::{ArithOp, BinaryOp, CmpOp};\n \n use super::{InferTy, Ty, TypeCtor};\n use crate::ApplicationTy;\n \n-pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n+pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(_) | BinaryOp::CmpOp(_) => Ty::simple(TypeCtor::Bool),\n         BinaryOp::Assignment { .. } => Ty::unit(),\n+        BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => match lhs_ty {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n+                TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n+                _ => Ty::Unknown,\n+            },\n+            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n         BinaryOp::ArithOp(_) => match rhs_ty {\n             Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..) | TypeCtor::Float(..) => rhs_ty,\n@@ -36,6 +44,7 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n                 _ => Ty::Unknown,\n             }\n         }\n+        BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => Ty::Unknown,\n         BinaryOp::CmpOp(CmpOp::Ord { .. })\n         | BinaryOp::Assignment { op: Some(_) }\n         | BinaryOp::ArithOp(_) => match lhs_ty {"}, {"sha": "b7204ec0031f34c4c0d79a3c241aa90171c60d39", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -613,6 +613,27 @@ fn test() -> bool {\n     );\n }\n \n+#[test]\n+fn infer_shift_op() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn test() {\n+    1u32 << 5u8;\n+    1u32 >> 5u8;\n+}\n+\"#),\n+        @r###\"\n+    [11; 48) '{     ...5u8; }': ()\n+    [17; 21) '1u32': u32\n+    [17; 28) '1u32 << 5u8': u32\n+    [25; 28) '5u8': u8\n+    [34; 38) '1u32': u32\n+    [34; 45) '1u32 >> 5u8': u32\n+    [42; 45) '5u8': u8\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_field_autoderef() {\n     assert_snapshot!("}, {"sha": "1e4a472b444283e9ffb9284a428589ed879f14d3", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -169,9 +169,22 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     res.push(self_param.syntax().text().to_string())\n                 }\n \n-                res.extend(param_list.params().map(|param| {\n-                    param.pat().map(|pat| pat.syntax().text().to_string()).unwrap_or_default()\n-                }));\n+                res.extend(\n+                    param_list\n+                        .params()\n+                        .map(|param| {\n+                            Some(\n+                                param\n+                                    .pat()?\n+                                    .syntax()\n+                                    .descendants()\n+                                    .find_map(ast::Name::cast)?\n+                                    .text()\n+                                    .to_string(),\n+                            )\n+                        })\n+                        .map(|param| param.unwrap_or_default()),\n+                );\n             }\n             res\n         }"}, {"sha": "236557541f2ea08f4e1d45b87d15c588a5e15f6a", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -116,7 +116,7 @@ fn get_param_name_hints(\n     let hints = parameters\n         .zip(args)\n         .filter_map(|(param, arg)| {\n-            if arg.syntax().kind() == SyntaxKind::LITERAL {\n+            if arg.syntax().kind() == SyntaxKind::LITERAL && !param.is_empty() {\n                 Some((arg.syntax().text_range(), param))\n             } else {\n                 None\n@@ -683,12 +683,12 @@ fn main() {\n struct Test {}\n \n impl Test {\n-    fn method(&self, param: i32) -> i32 {\n+    fn method(&self, mut param: i32) -> i32 {\n         param * 2\n     }\n }\n \n-fn test_func(foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n+fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n     foo + bar\n }\n \n@@ -704,37 +704,32 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [207; 218),\n+                range: [215; 226),\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: [251; 252),\n+                range: [259; 260),\n                 kind: ParameterHint,\n                 label: \"foo\",\n             },\n             InlayHint {\n-                range: [254; 255),\n+                range: [262; 263),\n                 kind: ParameterHint,\n                 label: \"bar\",\n             },\n             InlayHint {\n-                range: [257; 264),\n+                range: [265; 272),\n                 kind: ParameterHint,\n                 label: \"msg\",\n             },\n             InlayHint {\n-                range: [266; 267),\n-                kind: ParameterHint,\n-                label: \"_\",\n-            },\n-            InlayHint {\n-                range: [323; 326),\n+                range: [331; 334),\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n             InlayHint {\n-                range: [350; 354),\n+                range: [358; 362),\n                 kind: ParameterHint,\n                 label: \"param\",\n             },"}, {"sha": "a46e11e1d945df91fa64a32947783041fd26b230", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -1,7 +1,7 @@\n //! This is the actual \"grammar\" of the Rust language.\n //!\n //! Each function in this module and its children corresponds\n-//! to a production of the format grammar. Submodules roughly\n+//! to a production of the formal grammar. Submodules roughly\n //! correspond to different *areas* of the grammar. By convention,\n //! each submodule starts with `use super::*` import and exports\n //! \"public\" productions via `pub(super)`."}, {"sha": "06c92645e06ef0638d5af244f7e771d4e01d4012", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -19,6 +19,26 @@ pub(super) fn expr(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n     expr_bp(p, r, 1)\n }\n \n+pub(super) fn expr_with_attrs(p: &mut Parser) -> bool {\n+    let m = p.start();\n+    let has_attrs = p.at(T![#]);\n+    attributes::outer_attributes(p);\n+\n+    let (cm, _block_like) = expr(p);\n+    let success = cm.is_some();\n+\n+    match (has_attrs, cm) {\n+        (true, Some(cm)) => {\n+            let kind = cm.kind();\n+            cm.undo_completion(p).abandon(p);\n+            m.complete(p, kind);\n+        }\n+        _ => m.abandon(p),\n+    }\n+\n+    success\n+}\n+\n pub(super) fn expr_stmt(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n     expr_bp(p, r, 1)\n@@ -540,11 +560,13 @@ fn arg_list(p: &mut Parser) {\n     let m = p.start();\n     p.bump(T!['(']);\n     while !p.at(T![')']) && !p.at(EOF) {\n-        if !p.at_ts(EXPR_FIRST) {\n-            p.error(\"expected expression\");\n+        // test arg_with_attr\n+        // fn main() {\n+        //     foo(#[attr] 92)\n+        // }\n+        if !expr_with_attrs(p) {\n             break;\n         }\n-        expr(p);\n         if !p.at(T![')']) && !p.expect(T![,]) {\n             break;\n         }"}, {"sha": "2cc321473aa51674edb66e16fd7b3a072116e014", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -191,19 +191,8 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n \n         // test array_attrs\n         // const A: &[i64] = &[1, #[cfg(test)] 2];\n-        let m = p.start();\n-        let has_attrs = p.at(T![#]);\n-        attributes::outer_attributes(p);\n-\n-        let cm = expr(p).0;\n-\n-        match (has_attrs, cm) {\n-            (true, Some(cm)) => {\n-                let kind = cm.kind();\n-                cm.undo_completion(p).abandon(p);\n-                m.complete(p, kind);\n-            }\n-            _ => m.abandon(p),\n+        if !expr_with_attrs(p) {\n+            break;\n         }\n \n         if n_exprs == 1 && p.eat(T![;]) {"}, {"sha": "cb45eb2fc2028aadd036330717eccf3f65f8da73", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -12,8 +12,8 @@ SOURCE_FILE@[0; 112)\n       BLOCK@[7; 33)\n         L_CURLY@[7; 8) \"{\"\n         WHITESPACE@[8; 9) \" \"\n-        EXPR_STMT@[9; 26)\n-          ARRAY_EXPR@[9; 26)\n+        EXPR_STMT@[9; 17)\n+          ARRAY_EXPR@[9; 17)\n             L_BRACK@[9; 10) \"[\"\n             LITERAL@[10; 11)\n               INT_NUMBER@[10; 11) \"1\"\n@@ -25,10 +25,13 @@ SOURCE_FILE@[0; 112)\n             WHITESPACE@[15; 16) \" \"\n             ERROR@[16; 17)\n               AT@[16; 17) \"@\"\n+        EXPR_STMT@[17; 18)\n+          ERROR@[17; 18)\n             COMMA@[17; 18) \",\"\n-            WHITESPACE@[18; 19) \" \"\n-            ERROR@[19; 25)\n-              STRUCT_KW@[19; 25) \"struct\"\n+        WHITESPACE@[18; 19) \" \"\n+        STRUCT_DEF@[19; 26)\n+          STRUCT_KW@[19; 25) \"struct\"\n+          ERROR@[25; 26)\n             COMMA@[25; 26) \",\"\n         WHITESPACE@[26; 27) \" \"\n         LET_STMT@[27; 31)\n@@ -51,14 +54,14 @@ SOURCE_FILE@[0; 112)\n       BLOCK@[41; 68)\n         L_CURLY@[41; 42) \"{\"\n         WHITESPACE@[42; 43) \" \"\n-        EXPR_STMT@[43; 52)\n-          CALL_EXPR@[43; 52)\n+        EXPR_STMT@[43; 54)\n+          CALL_EXPR@[43; 54)\n             PATH_EXPR@[43; 46)\n               PATH@[43; 46)\n                 PATH_SEGMENT@[43; 46)\n                   NAME_REF@[43; 46)\n                     IDENT@[43; 46) \"foo\"\n-            ARG_LIST@[46; 52)\n+            ARG_LIST@[46; 54)\n               L_PAREN@[46; 47) \"(\"\n               LITERAL@[47; 48)\n                 INT_NUMBER@[47; 48) \"1\"\n@@ -67,10 +70,9 @@ SOURCE_FILE@[0; 112)\n               LITERAL@[50; 51)\n                 INT_NUMBER@[50; 51) \"2\"\n               COMMA@[51; 52) \",\"\n-        WHITESPACE@[52; 53) \" \"\n-        EXPR_STMT@[53; 54)\n-          ERROR@[53; 54)\n-            AT@[53; 54) \"@\"\n+              WHITESPACE@[52; 53) \" \"\n+              ERROR@[53; 54)\n+                AT@[53; 54) \"@\"\n         EXPR_STMT@[54; 55)\n           ERROR@[54; 55)\n             COMMA@[54; 55) \",\"\n@@ -101,8 +103,8 @@ SOURCE_FILE@[0; 112)\n       BLOCK@[76; 111)\n         L_CURLY@[76; 77) \"{\"\n         WHITESPACE@[77; 78) \" \"\n-        EXPR_STMT@[78; 91)\n-          METHOD_CALL_EXPR@[78; 91)\n+        EXPR_STMT@[78; 93)\n+          METHOD_CALL_EXPR@[78; 93)\n             PATH_EXPR@[78; 81)\n               PATH@[78; 81)\n                 PATH_SEGMENT@[78; 81)\n@@ -111,7 +113,7 @@ SOURCE_FILE@[0; 112)\n             DOT@[81; 82) \".\"\n             NAME_REF@[82; 85)\n               IDENT@[82; 85) \"bar\"\n-            ARG_LIST@[85; 91)\n+            ARG_LIST@[85; 93)\n               L_PAREN@[85; 86) \"(\"\n               LITERAL@[86; 87)\n                 INT_NUMBER@[86; 87) \"1\"\n@@ -120,10 +122,9 @@ SOURCE_FILE@[0; 112)\n               LITERAL@[89; 90)\n                 INT_NUMBER@[89; 90) \"2\"\n               COMMA@[90; 91) \",\"\n-        WHITESPACE@[91; 92) \" \"\n-        EXPR_STMT@[92; 93)\n-          ERROR@[92; 93)\n-            AT@[92; 93) \"@\"\n+              WHITESPACE@[91; 92) \" \"\n+              ERROR@[92; 93)\n+                AT@[92; 93) \"@\"\n         EXPR_STMT@[93; 94)\n           ERROR@[93; 94)\n             COMMA@[93; 94) \",\"\n@@ -148,15 +149,14 @@ SOURCE_FILE@[0; 112)\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n error 16: expected expression\n-error 19: expected expression\n-error 26: expected expression\n-error 26: expected COMMA\n-error 26: expected R_BRACK\n-error 26: expected SEMI\n+error 17: expected R_BRACK\n+error 17: expected SEMI\n+error 17: expected expression\n+error 18: expected SEMI\n+error 25: expected a name\n+error 26: expected `;`, `{`, or `(`\n error 30: expected pattern\n error 31: expected SEMI\n-error 52: expected expression\n-error 52: expected SEMI\n error 53: expected expression\n error 54: expected SEMI\n error 54: expected expression\n@@ -168,8 +168,6 @@ error 61: expected SEMI\n error 65: expected pattern\n error 65: expected SEMI\n error 65: expected expression\n-error 91: expected expression\n-error 91: expected SEMI\n error 92: expected expression\n error 93: expected SEMI\n error 93: expected expression"}, {"sha": "5daf1d7b0be91c9fb39fe7a51850e8af914cba55", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_arg_with_attr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    foo(#[attr] 92)\n+}"}, {"sha": "8092d700991a27a46009ff7bc33e84c1ce30bcae", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_arg_with_attr.txt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.txt?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -0,0 +1,37 @@\n+SOURCE_FILE@[0; 34)\n+  FN_DEF@[0; 33)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 33)\n+      BLOCK@[10; 33)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        CALL_EXPR@[16; 31)\n+          PATH_EXPR@[16; 19)\n+            PATH@[16; 19)\n+              PATH_SEGMENT@[16; 19)\n+                NAME_REF@[16; 19)\n+                  IDENT@[16; 19) \"foo\"\n+          ARG_LIST@[19; 31)\n+            L_PAREN@[19; 20) \"(\"\n+            LITERAL@[20; 30)\n+              ATTR@[20; 27)\n+                POUND@[20; 21) \"#\"\n+                L_BRACK@[21; 22) \"[\"\n+                PATH@[22; 26)\n+                  PATH_SEGMENT@[22; 26)\n+                    NAME_REF@[22; 26)\n+                      IDENT@[22; 26) \"attr\"\n+                R_BRACK@[26; 27) \"]\"\n+              WHITESPACE@[27; 28) \" \"\n+              INT_NUMBER@[28; 30) \"92\"\n+            R_PAREN@[30; 31) \")\"\n+        WHITESPACE@[31; 32) \"\\n\"\n+        R_CURLY@[32; 33) \"}\"\n+  WHITESPACE@[33; 34) \"\\n\""}, {"sha": "06db4f15fdff59b20884ef3e06c3e9d2aad078a1", "filename": "editors/emacs/rust-analyzer.el", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/editors%2Femacs%2Frust-analyzer.el", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/editors%2Femacs%2Frust-analyzer.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Frust-analyzer.el?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -210,9 +210,9 @@\n ;; inlay hints\n (defun rust-analyzer--update-inlay-hints (buffer)\n   (if (and (rust-analyzer--initialized?) (eq buffer (current-buffer)))\n-    (lsp-send-request-async\n-     (lsp-make-request \"rust-analyzer/inlayHints\"\n-                       (list :textDocument (lsp--text-document-identifier)))\n+    (lsp-request-async\n+     \"rust-analyzer/inlayHints\"\n+     (list :textDocument (lsp--text-document-identifier))\n      (lambda (res)\n        (remove-overlays (point-min) (point-max) 'rust-analyzer--inlay-hint t)\n        (dolist (hint res)\n@@ -221,9 +221,16 @@\n                  (overlay (make-overlay beg end)))\n            (overlay-put overlay 'rust-analyzer--inlay-hint t)\n            (overlay-put overlay 'evaporate t)\n-           (overlay-put overlay 'after-string (propertize (concat \": \" label)\n-                                                          'font-lock-face 'font-lock-comment-face)))))\n-     'tick))\n+           (cond\n+            ((string= kind \"TypeHint\")\n+             (overlay-put overlay 'after-string (propertize (concat \": \" label)\n+                                                            'font-lock-face 'font-lock-comment-face)))\n+            ((string= kind \"ParameterHint\")\n+             (overlay-put overlay 'before-string (propertize (concat label \": \")\n+                                                            'font-lock-face 'font-lock-comment-face)))\n+            )\n+           )))\n+     :mode 'tick))\n   nil)\n \n (defvar-local rust-analyzer--inlay-hints-timer nil)"}, {"sha": "db05dcebb01ce3d7264d950a5e8d2cbd0b1704b9", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -1,4 +1,4 @@\n-//! This module generate AST datatype used by rust-analyzer.\n+//! This module generates AST datatype used by rust-analyzer.\n //!\n //! Specifically, it generates the `SyntaxKind` enum and a number of newtype\n //! wrappers around `SyntaxNode` which implement `ra_syntax::AstNode`."}, {"sha": "9b0afe8e0cf7fa57d9c7013f03757066635f6cff", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514df15d9e32e057ba23dda0d4f5c07e82e7ed23/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=514df15d9e32e057ba23dda0d4f5c07e82e7ed23", "patch": "@@ -53,6 +53,7 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n     let output = rustfmt.wait_with_output()?;\n     let stdout = String::from_utf8(output.stdout)?;\n+    // TODO: update the preable: replace ra_tools with the relevant path\n     let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n     Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n }"}]}