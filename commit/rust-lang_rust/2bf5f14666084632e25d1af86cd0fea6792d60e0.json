{"sha": "2bf5f14666084632e25d1af86cd0fea6792d60e0", "node_id": "C_kwDOAAsO6NoAKDJiZjVmMTQ2NjYwODQ2MzJlMjVkMWFmODZjZDBmZWE2NzkyZDYwZTA", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-10-16T10:39:55Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-10-16T10:39:55Z"}, "message": "Use trimmed selection range", "tree": {"sha": "7d45a866935542d237f62b16b76d52200095af24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d45a866935542d237f62b16b76d52200095af24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf5f14666084632e25d1af86cd0fea6792d60e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf5f14666084632e25d1af86cd0fea6792d60e0", "html_url": "https://github.com/rust-lang/rust/commit/2bf5f14666084632e25d1af86cd0fea6792d60e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf5f14666084632e25d1af86cd0fea6792d60e0/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efcff7f75a9a88d50600d4208db6b33be2705e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efcff7f75a9a88d50600d4208db6b33be2705e3", "html_url": "https://github.com/rust-lang/rust/commit/2efcff7f75a9a88d50600d4208db6b33be2705e3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "dbff8f3d3e85a5f31b626f1e091733d2ae836703", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2bf5f14666084632e25d1af86cd0fea6792d60e0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf5f14666084632e25d1af86cd0fea6792d60e0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=2bf5f14666084632e25d1af86cd0fea6792d60e0", "patch": "@@ -51,7 +51,7 @@ use super::remove_unused_param::range_to_remove;\n // }\n // ```\n pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    if ctx.frange.range.is_empty() {\n+    if ctx.has_empty_selection() {\n         return None;\n     }\n \n@@ -66,7 +66,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         curr_parent_module = ast::Module::cast(mod_syn_opt);\n     }\n \n-    let mut module = extract_target(&node, ctx.frange.range)?;\n+    let mut module = extract_target(&node, ctx.selection_trimmed())?;\n     if module.body_items.len() == 0 {\n         return None;\n     }\n@@ -119,7 +119,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n             let mut usages_to_be_updated_for_curr_file = vec![];\n             for usages_to_be_updated_for_file in usages_to_be_processed {\n-                if usages_to_be_updated_for_file.0 == ctx.frange.file_id {\n+                if usages_to_be_updated_for_file.0 == ctx.file_id() {\n                     usages_to_be_updated_for_curr_file = usages_to_be_updated_for_file.1;\n                     continue;\n                 }\n@@ -129,7 +129,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                 }\n             }\n \n-            builder.edit_file(ctx.frange.file_id);\n+            builder.edit_file(ctx.file_id());\n             for usage_to_be_processed in usages_to_be_updated_for_curr_file {\n                 builder.replace(usage_to_be_processed.0, usage_to_be_processed.1)\n             }\n@@ -426,11 +426,11 @@ impl Module {\n         ctx: &AssistContext,\n     ) -> Option<TextRange> {\n         //We only need to find in the current file\n-        let selection_range = ctx.frange.range;\n-        let search_scope = SearchScope::single_file(ctx.frange.file_id);\n+        let selection_range = ctx.selection_trimmed();\n+        let curr_file_id = ctx.file_id();\n+        let search_scope = SearchScope::single_file(curr_file_id);\n         let usage_res = def.usages(&ctx.sema).in_scope(search_scope).all();\n-        let curr_file_id = ctx.frange.file_id;\n-        let file = ctx.sema.parse(ctx.frange.file_id);\n+        let file = ctx.sema.parse(curr_file_id);\n \n         let mut exists_inside_sel = false;\n         let mut exists_outside_sel = false;\n@@ -470,7 +470,7 @@ impl Module {\n         let use_stmt_opt: Option<ast::Use> = usage_res.into_iter().find_map(|x| {\n             let file_id = x.0;\n             let mut use_opt: Option<ast::Use> = None;\n-            if file_id == ctx.frange.file_id {\n+            if file_id == curr_file_id {\n                 (&x.1).into_iter().for_each(|x| {\n                     let node_opt: Option<ast::Use> = find_node_at_range(file.syntax(), x.range);\n                     if let Some(node) = node_opt {"}]}