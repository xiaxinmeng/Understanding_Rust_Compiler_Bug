{"sha": "debb2ac76bd8b4ef8de0f470351a2b187afc91df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYmIyYWM3NmJkOGI0ZWY4ZGUwZjQ3MDM1MWEyYjE4N2FmYzkxZGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T15:00:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T15:00:49Z"}, "message": "Improve Open doc", "tree": {"sha": "dd9b535fa71f88c4d50ad551b29046c89bc399a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9b535fa71f88c4d50ad551b29046c89bc399a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/debb2ac76bd8b4ef8de0f470351a2b187afc91df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/debb2ac76bd8b4ef8de0f470351a2b187afc91df", "html_url": "https://github.com/rust-lang/rust/commit/debb2ac76bd8b4ef8de0f470351a2b187afc91df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/debb2ac76bd8b4ef8de0f470351a2b187afc91df/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c50f4e484d1c871538ee99032ec2986177b8062", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c50f4e484d1c871538ee99032ec2986177b8062", "html_url": "https://github.com/rust-lang/rust/commit/2c50f4e484d1c871538ee99032ec2986177b8062"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "4d4d44bae309a7f83ed1e62ca3e9faddcea39b09", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/debb2ac76bd8b4ef8de0f470351a2b187afc91df/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb2ac76bd8b4ef8de0f470351a2b187afc91df/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=debb2ac76bd8b4ef8de0f470351a2b187afc91df", "patch": "@@ -156,12 +156,14 @@ pub struct DirBuilder {\n impl File {\n     /// Attempts to open a file in read-only mode.\n     ///\n-    /// See the `OpenOptions::open` method for more details.\n+    /// See the [`OpenOptions::open`] method for more details.\n     ///\n     /// # Errors\n     ///\n     /// This function will return an error if `path` does not already exist.\n-    /// Other errors may also be returned according to `OpenOptions::open`.\n+    /// Other errors may also be returned according to [`OpenOptions::open`].\n+    ///\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///\n@@ -183,7 +185,9 @@ impl File {\n     /// This function will create a file if it does not exist,\n     /// and will truncate it if it does.\n     ///\n-    /// See the `OpenOptions::open` function for more details.\n+    /// See the [`OpenOptions::open`] function for more details.\n+    ///\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///\n@@ -224,15 +228,17 @@ impl File {\n         self.inner.fsync()\n     }\n \n-    /// This function is similar to `sync_all`, except that it may not\n+    /// This function is similar to [`sync_all`], except that it may not\n     /// synchronize file metadata to the filesystem.\n     ///\n     /// This is intended for use cases that must synchronize content, but don't\n     /// need the metadata on disk. The goal of this method is to reduce disk\n     /// operations.\n     ///\n     /// Note that some platforms may simply implement this in terms of\n-    /// `sync_all`.\n+    /// [`sync_all`].\n+    ///\n+    /// [`sync_all`]: struct.File.html#method.sync_all\n     ///\n     /// # Examples\n     ///\n@@ -304,6 +310,18 @@ impl File {\n     /// The returned `File` is a reference to the same state that this object\n     /// references. Both handles will read and write with the same cursor\n     /// position.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let file_copy = try!(f.try_clone());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_try_clone\", since = \"1.9.0\")]\n     pub fn try_clone(&self) -> io::Result<File> {\n         Ok(File {"}]}