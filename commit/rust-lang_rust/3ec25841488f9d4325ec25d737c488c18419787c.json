{"sha": "3ec25841488f9d4325ec25d737c488c18419787c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYzI1ODQxNDg4ZjlkNDMyNWVjMjVkNzM3YzQ4OGMxODQxOTc4N2M=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T16:55:08Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T16:55:08Z"}, "message": "Add support for showing fn signature when hovering", "tree": {"sha": "8d2b5fdb93baf057c8303162b9fe2901b11da590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2b5fdb93baf057c8303162b9fe2901b11da590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ec25841488f9d4325ec25d737c488c18419787c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec25841488f9d4325ec25d737c488c18419787c", "html_url": "https://github.com/rust-lang/rust/commit/3ec25841488f9d4325ec25d737c488c18419787c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ec25841488f9d4325ec25d737c488c18419787c/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e00a398f77247814a90a68ca351304381b8e82f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e00a398f77247814a90a68ca351304381b8e82f", "html_url": "https://github.com/rust-lang/rust/commit/5e00a398f77247814a90a68ca351304381b8e82f"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "729f435d3bf940635e8842f3ce1c4d967b4d6f57", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3ec25841488f9d4325ec25d737c488c18419787c/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec25841488f9d4325ec25d737c488c18419787c/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=3ec25841488f9d4325ec25d737c488c18419787c", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast,\n+    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner, TypeParamsOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n@@ -118,9 +118,49 @@ impl NavigationTarget {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n \n+        // FIXME: This is copied from `structure.rs` and should probably\n+        // be moved somewhere common\n+        fn collapse_ws(node: &SyntaxNode, output: &mut String) {\n+            let mut can_insert_ws = false;\n+            for line in node.text().chunks().flat_map(|chunk| chunk.lines()) {\n+                let line = line.trim();\n+                if line.is_empty() {\n+                    if can_insert_ws {\n+                        output.push_str(\" \");\n+                        can_insert_ws = false;\n+                    }\n+                } else {\n+                    output.push_str(line);\n+                    can_insert_ws = true;\n+                }\n+            }\n+        }\n+\n+        fn visit_fn(node: &ast::FnDef) -> Option<String> {\n+            let mut detail =\n+                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+\n+            detail.push_str(\"fn \");\n+\n+            node.name()?.syntax().text().push_to(&mut detail);\n+\n+            if let Some(type_param_list) = node.type_param_list() {\n+                collapse_ws(type_param_list.syntax(), &mut detail);\n+            }\n+            if let Some(param_list) = node.param_list() {\n+                collapse_ws(param_list.syntax(), &mut detail);\n+            }\n+            if let Some(ret_type) = node.ret_type() {\n+                detail.push_str(\" \");\n+                collapse_ws(ret_type.syntax(), &mut detail);\n+            }\n+\n+            Some(detail)\n+        }\n+\n         fn visit_node<T>(node: &T, label: &str) -> Option<String>\n         where\n-            T: ast::NameOwner + ast::VisibilityOwner,\n+            T: NameOwner + VisibilityOwner,\n         {\n             let mut string =\n                 node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n@@ -130,7 +170,7 @@ impl NavigationTarget {\n         }\n \n         visitor()\n-            .visit(|node: &ast::FnDef| visit_node(node, \"fn \"))\n+            .visit(visit_fn)\n             .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n             .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n             .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))"}]}