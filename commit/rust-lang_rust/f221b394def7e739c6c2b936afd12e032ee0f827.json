{"sha": "f221b394def7e739c6c2b936afd12e032ee0f827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMjFiMzk0ZGVmN2U3MzljNmMyYjkzNmFmZDEyZTAzMmVlMGY4Mjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T11:29:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract error_negative_bounds", "tree": {"sha": "1b8ae61e689353147cc7397624a41d1b1e31b5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8ae61e689353147cc7397624a41d1b1e31b5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f221b394def7e739c6c2b936afd12e032ee0f827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f221b394def7e739c6c2b936afd12e032ee0f827", "html_url": "https://github.com/rust-lang/rust/commit/f221b394def7e739c6c2b936afd12e032ee0f827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f221b394def7e739c6c2b936afd12e032ee0f827/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f00beaa5a77ff8bccbe4330ea0b5047661cbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f00beaa5a77ff8bccbe4330ea0b5047661cbf5", "html_url": "https://github.com/rust-lang/rust/commit/b5f00beaa5a77ff8bccbe4330ea0b5047661cbf5"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "3877f3f9a62f6072414ba101a24ec281f665f5ca", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f221b394def7e739c6c2b936afd12e032ee0f827/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f221b394def7e739c6c2b936afd12e032ee0f827/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=f221b394def7e739c6c2b936afd12e032ee0f827", "patch": "@@ -371,33 +371,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if !negative_bounds.is_empty() {\n-            let negative_bounds_len = negative_bounds.len();\n-            let last_span = *negative_bounds.last().unwrap();\n-            let mut err = self.struct_span_err(\n-                negative_bounds,\n-                \"negative bounds are not supported\",\n-            );\n-            err.span_label(last_span, \"negative bounds are not supported\");\n-            if let Some(bound_list) = colon_span {\n-                let bound_list = bound_list.to(self.prev_span);\n-                let mut new_bound_list = String::new();\n-                if !bounds.is_empty() {\n-                    let mut snippets = bounds.iter().map(|bound| bound.span())\n-                        .map(|span| self.span_to_snippet(span));\n-                    while let Some(Ok(snippet)) = snippets.next() {\n-                        new_bound_list.push_str(\" + \");\n-                        new_bound_list.push_str(&snippet);\n-                    }\n-                    new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-                }\n-                err.span_suggestion_hidden(\n-                    bound_list,\n-                    &format!(\"remove the bound{}\", pluralize!(negative_bounds_len)),\n-                    new_bound_list,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            err.emit();\n+            self.error_negative_bounds(colon_span, &bounds, negative_bounds);\n         }\n \n         Ok(bounds)\n@@ -414,6 +388,40 @@ impl<'a> Parser<'a> {\n         || self.check(&token::OpenDelim(token::Paren))\n     }\n \n+    fn error_negative_bounds(\n+        &self,\n+        colon_span: Option<Span>,\n+        bounds: &[GenericBound],\n+        negative_bounds: Vec<Span>,\n+    ) {\n+        let negative_bounds_len = negative_bounds.len();\n+        let last_span = *negative_bounds.last().unwrap();\n+        let mut err = self.struct_span_err(\n+            negative_bounds,\n+            \"negative bounds are not supported\",\n+        );\n+        err.span_label(last_span, \"negative bounds are not supported\");\n+        if let Some(bound_list) = colon_span {\n+            let bound_list = bound_list.to(self.prev_span);\n+            let mut new_bound_list = String::new();\n+            if !bounds.is_empty() {\n+                let mut snippets = bounds.iter().map(|bound| self.span_to_snippet(bound.span()));\n+                while let Some(Ok(snippet)) = snippets.next() {\n+                    new_bound_list.push_str(\" + \");\n+                    new_bound_list.push_str(&snippet);\n+                }\n+                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n+            }\n+            err.span_suggestion_hidden(\n+                bound_list,\n+                &format!(\"remove the bound{}\", pluralize!(negative_bounds_len)),\n+                new_bound_list,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     /// Parses a bound according to the grammar:\n     /// ```\n     /// BOUND = TY_BOUND | LT_BOUND"}]}