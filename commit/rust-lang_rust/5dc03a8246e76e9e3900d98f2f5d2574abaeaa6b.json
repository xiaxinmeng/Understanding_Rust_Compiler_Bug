{"sha": "5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzAzYTgyNDZlNzZlOWUzOTAwZDk4ZjJmNWQyNTc0YWJhZWFhNmI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-22T13:15:21Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-22T13:15:21Z"}, "message": "Lazy-load filemaps from external crates.", "tree": {"sha": "9a2d1eb0667c632c6338b4d332cfafc1defa546c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2d1eb0667c632c6338b4d332cfafc1defa546c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "html_url": "https://github.com/rust-lang/rust/commit/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d60aba6c86883c79055c1a3923d4db116b644e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d60aba6c86883c79055c1a3923d4db116b644e", "html_url": "https://github.com/rust-lang/rust/commit/c3d60aba6c86883c79055c1a3923d4db116b644e"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "8562d8c01cc67d9cc8fceb76608a0da129c4e9c0", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "patch": "@@ -21,6 +21,7 @@ use metadata::decoder;\n use metadata::loader;\n use metadata::loader::CratePaths;\n \n+use std::cell::RefCell;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::fs;\n@@ -376,14 +377,13 @@ impl<'a> CrateReader<'a> {\n         let loader::Library { dylib, rlib, metadata } = lib;\n \n         let cnum_map = self.resolve_crate_deps(root, metadata.as_slice(), span);\n-        let codemap_import_info = import_codemap(self.sess.codemap(), &metadata);\n \n         let cmeta = Rc::new( cstore::crate_metadata {\n             name: name.to_string(),\n             data: metadata,\n             cnum_map: cnum_map,\n             cnum: cnum,\n-            codemap_import_info: codemap_import_info,\n+            codemap_import_info: RefCell::new(vec![]),\n             span: span,\n         });\n \n@@ -616,9 +616,9 @@ impl<'a> CrateReader<'a> {\n /// file they represent, just information about length, line breaks, and\n /// multibyte characters. This information is enough to generate valid debuginfo\n /// for items inlined from other crates.\n-fn import_codemap(local_codemap: &codemap::CodeMap,\n-                  metadata: &MetadataBlob)\n-                  -> Vec<cstore::ImportedFileMap> {\n+pub fn import_codemap(local_codemap: &codemap::CodeMap,\n+                      metadata: &MetadataBlob)\n+                      -> Vec<cstore::ImportedFileMap> {\n     let external_codemap = decoder::get_imported_filemaps(metadata.as_slice());\n \n     let imported_filemaps = external_codemap.into_iter().map(|filemap_to_import| {"}, {"sha": "885e7ffb3050ef0ab121df46990da4a23a689c79", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "patch": "@@ -18,12 +18,11 @@ pub use self::LinkagePreference::*;\n pub use self::NativeLibraryKind::*;\n \n use back::svh::Svh;\n-use metadata::decoder;\n-use metadata::loader;\n+use metadata::{creader, decoder, loader};\n use session::search_paths::PathKind;\n use util::nodemap::{FnvHashMap, NodeMap};\n \n-use std::cell::RefCell;\n+use std::cell::{RefCell, Ref};\n use std::rc::Rc;\n use std::path::PathBuf;\n use flate::Bytes;\n@@ -58,7 +57,7 @@ pub struct crate_metadata {\n     pub data: MetadataBlob,\n     pub cnum_map: cnum_map,\n     pub cnum: ast::CrateNum,\n-    pub codemap_import_info: Vec<ImportedFileMap>,\n+    pub codemap_import_info: RefCell<Vec<ImportedFileMap>>,\n     pub span: codemap::Span,\n }\n \n@@ -240,6 +239,20 @@ impl crate_metadata {\n     pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }\n     pub fn name(&self) -> String { decoder::get_crate_name(self.data()) }\n     pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }\n+    pub fn imported_filemaps<'a>(&'a self, codemap: &codemap::CodeMap)\n+                                 -> Ref<'a, Vec<ImportedFileMap>> {\n+        let filemaps = self.codemap_import_info.borrow();\n+        if filemaps.is_empty() {\n+            drop(filemaps);\n+            let filemaps = creader::import_codemap(codemap, &self.data);\n+\n+            // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n+            *self.codemap_import_info.borrow_mut() = filemaps;\n+            self.codemap_import_info.borrow()\n+        } else {\n+            filemaps\n+        }\n+    }\n }\n \n impl MetadataBlob {"}, {"sha": "b7e57819b93b4941c234bf1d7a934ba20b204297", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=5dc03a8246e76e9e3900d98f2f5d2574abaeaa6b", "patch": "@@ -233,8 +233,6 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n     /// codemap as a side-effect of creating the crate_metadata's\n     /// `codemap_import_info`.\n     pub fn tr_span(&self, span: Span) -> Span {\n-        let imported_filemaps = &self.cdata.codemap_import_info[..];\n-\n         let span = if span.lo > span.hi {\n             // Currently macro expansion sometimes produces invalid Span values\n             // where lo > hi. In order not to crash the compiler when trying to\n@@ -248,16 +246,18 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n             span\n         };\n \n-        let filemap_index = {\n+        let imported_filemaps = self.cdata.imported_filemaps(self.tcx.sess.codemap());\n+        let filemap = {\n             // Optimize for the case that most spans within a translated item\n             // originate from the same filemap.\n             let last_filemap_index = self.last_filemap_index.get();\n+            let last_filemap = &imported_filemaps[last_filemap_index];\n \n-            if span.lo >= imported_filemaps[last_filemap_index].original_start_pos &&\n-               span.lo <= imported_filemaps[last_filemap_index].original_end_pos &&\n-               span.hi >= imported_filemaps[last_filemap_index].original_start_pos &&\n-               span.hi <= imported_filemaps[last_filemap_index].original_end_pos {\n-                last_filemap_index\n+            if span.lo >= last_filemap.original_start_pos &&\n+               span.lo <= last_filemap.original_end_pos &&\n+               span.hi >= last_filemap.original_start_pos &&\n+               span.hi <= last_filemap.original_end_pos {\n+                last_filemap\n             } else {\n                 let mut a = 0;\n                 let mut b = imported_filemaps.len();\n@@ -272,14 +272,14 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n                 }\n \n                 self.last_filemap_index.set(a);\n-                a\n+                &imported_filemaps[a]\n             }\n         };\n \n-        let lo = (span.lo - imported_filemaps[filemap_index].original_start_pos) +\n-                  imported_filemaps[filemap_index].translated_filemap.start_pos;\n-        let hi = (span.hi - imported_filemaps[filemap_index].original_start_pos) +\n-                  imported_filemaps[filemap_index].translated_filemap.start_pos;\n+        let lo = (span.lo - filemap.original_start_pos) +\n+                  filemap.translated_filemap.start_pos;\n+        let hi = (span.hi - filemap.original_start_pos) +\n+                  filemap.translated_filemap.start_pos;\n \n         codemap::mk_sp(lo, hi)\n     }"}]}