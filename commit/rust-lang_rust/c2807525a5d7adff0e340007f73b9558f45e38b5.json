{"sha": "c2807525a5d7adff0e340007f73b9558f45e38b5", "node_id": "C_kwDOAAsO6NoAKGMyODA3NTI1YTVkN2FkZmYwZTM0MDAwN2Y3M2I5NTU4ZjQ1ZTM4YjU", "commit": {"author": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2022-01-17T02:17:25Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2022-01-17T02:21:24Z"}, "message": "Help optimize out backtraces when disabled", "tree": {"sha": "a7d128674055cf904bb2792075df02f6ae3b7243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d128674055cf904bb2792075df02f6ae3b7243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2807525a5d7adff0e340007f73b9558f45e38b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2807525a5d7adff0e340007f73b9558f45e38b5", "html_url": "https://github.com/rust-lang/rust/commit/c2807525a5d7adff0e340007f73b9558f45e38b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2807525a5d7adff0e340007f73b9558f45e38b5/comments", "author": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "html_url": "https://github.com/rust-lang/rust/commit/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "d0f332fe5e810f9af151697d9cccdb766a5f034b", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2807525a5d7adff0e340007f73b9558f45e38b5/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2807525a5d7adff0e340007f73b9558f45e38b5/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=c2807525a5d7adff0e340007f73b9558f45e38b5", "patch": "@@ -263,7 +263,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let backtrace_env = if panic_count::get_count() >= 2 {\n-        RustBacktrace::Print(crate::backtrace_rs::PrintFmt::Full)\n+        backtrace::rust_backtrace_print_full()\n     } else {\n         backtrace::rust_backtrace_env()\n     };"}, {"sha": "dc581a0675b38b95580db6953ffcda293df61cdb", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c2807525a5d7adff0e340007f73b9558f45e38b5/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2807525a5d7adff0e340007f73b9558f45e38b5/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=c2807525a5d7adff0e340007f73b9558f45e38b5", "patch": "@@ -150,16 +150,18 @@ pub enum RustBacktrace {\n     RuntimeDisabled,\n }\n \n+// If the `backtrace` feature of this crate isn't enabled quickly return\n+// `Disabled` so this can be constant propagated all over the place to\n+// optimize away callers.\n+#[cfg(not(feature = \"backtrace\"))]\n+pub fn rust_backtrace_env() -> RustBacktrace {\n+    RustBacktrace::Disabled\n+}\n+\n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n+#[cfg(feature = \"backtrace\")]\n pub fn rust_backtrace_env() -> RustBacktrace {\n-    // If the `backtrace` feature of this crate isn't enabled quickly return\n-    // `None` so this can be constant propagated all over the place to turn\n-    // optimize away callers.\n-    if !cfg!(feature = \"backtrace\") {\n-        return RustBacktrace::Disabled;\n-    }\n-\n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {\n@@ -189,6 +191,15 @@ pub fn rust_backtrace_env() -> RustBacktrace {\n     format\n }\n \n+/// Setting for printing the full backtrace, unless backtraces are completely disabled\n+pub(crate) fn rust_backtrace_print_full() -> RustBacktrace {\n+    if cfg!(feature = \"backtrace\") {\n+        RustBacktrace::Print(PrintFmt::Full)\n+    } else {\n+        RustBacktrace::Disabled\n+    }\n+}\n+\n /// Prints the filename of the backtrace frame.\n ///\n /// See also `output`."}]}