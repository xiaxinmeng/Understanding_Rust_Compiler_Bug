{"sha": "5e25dc9966c28f057b33045be9d4967815dcba05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjVkYzk5NjZjMjhmMDU3YjMzMDQ1YmU5ZDQ5Njc4MTVkY2JhMDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-04-01T08:11:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-07-18T00:42:21Z"}, "message": "Unify rules about commas in match arms and semicolons in expressions", "tree": {"sha": "a2b2b726b95d9056364a197dd145430802918c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b2b726b95d9056364a197dd145430802918c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e25dc9966c28f057b33045be9d4967815dcba05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e25dc9966c28f057b33045be9d4967815dcba05", "html_url": "https://github.com/rust-lang/rust/commit/5e25dc9966c28f057b33045be9d4967815dcba05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e25dc9966c28f057b33045be9d4967815dcba05/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2652ce6771b114189cdc1f9bd026a10af0a714e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2652ce6771b114189cdc1f9bd026a10af0a714e0", "html_url": "https://github.com/rust-lang/rust/commit/2652ce6771b114189cdc1f9bd026a10af0a714e0"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "d9f76ce3592d06b28fe3ae3b20924fe62daca317", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=5e25dc9966c28f057b33045be9d4967815dcba05", "patch": "@@ -12,7 +12,7 @@\n \n // Predicates on exprs and stmts that the pretty-printer and parser use\n \n-use ast::{self, BlockCheckMode};\n+use ast;\n \n /// Does this expression require a semicolon to be treated\n /// as a statement? The negation of this: 'can this expression\n@@ -35,13 +35,6 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n     }\n }\n \n-pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n-    match e.node {\n-        ast::ExprKind::Block(ref block) => block.rules == BlockCheckMode::Default,\n-        _ => false,\n-    }\n-}\n-\n /// this statement requires a semicolon after it.\n /// note that in one case (`stmt_semi`), we've already\n /// seen the semicolon, and thus don't need another."}, {"sha": "ae3edfcbf325d2d179103106c9f7e2606ce0d045", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5e25dc9966c28f057b33045be9d4967815dcba05", "patch": "@@ -3209,8 +3209,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::FatArrow)?;\n         let expr = self.parse_expr_res(RESTRICTION_STMT_EXPR, None)?;\n \n-        let require_comma =\n-            !classify::expr_is_simple_block(&expr)\n+        let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)\n             && self.token != token::CloseDelim(token::Brace);\n \n         if require_comma {"}, {"sha": "f70693238fcdcf21ffd882c181db38900f09a2cf", "filename": "src/test/run-pass/optional_comma_in_match_arm.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e25dc9966c28f057b33045be9d4967815dcba05/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs?ref=5e25dc9966c28f057b33045be9d4967815dcba05", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 1;\n+\n+    match x {\n+        1 => loop { break; },\n+        2 => while true { break; },\n+        3 => if true { () },\n+        4 => if true { () } else { () },\n+        5 => match () { () => () },\n+        6 => { () },\n+        7 => unsafe { () },\n+        _ => (),\n+    }\n+\n+    match x {\n+        1 => loop { break; }\n+        2 => while true { break; }\n+        3 => if true { () }\n+        4 => if true { () } else { () }\n+        5 => match () { () => () }\n+        6 => { () }\n+        7 => unsafe { () }\n+        _ => ()\n+    }\n+\n+    let r: &i32 = &x;\n+\n+    match r {\n+        // Absence of comma should not cause confusion between a pattern\n+        // and a bitwise and.\n+        &1 => if true { () } else { () }\n+        &2 => (),\n+        _ =>()\n+    }\n+}"}]}