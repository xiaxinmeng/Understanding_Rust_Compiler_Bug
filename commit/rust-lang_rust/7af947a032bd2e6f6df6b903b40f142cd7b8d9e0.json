{"sha": "7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjk0N2EwMzJiZDJlNmY2ZGY2YjkwM2I0MGYxNDJjZDdiOGQ5ZTA=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-09-06T16:26:53Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-09-06T16:26:53Z"}, "message": "Add consuming modifier to lvalues that are passed by value and not Copy", "tree": {"sha": "a3a07fc4d44f56339d70f2094cf3cc3ce96c20f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a07fc4d44f56339d70f2094cf3cc3ce96c20f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "html_url": "https://github.com/rust-lang/rust/commit/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0275b08d1521606fa733f76fe5d5707717456fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0275b08d1521606fa733f76fe5d5707717456fb4", "html_url": "https://github.com/rust-lang/rust/commit/0275b08d1521606fa733f76fe5d5707717456fb4"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "4fa9e638a08f23327df6bd0e7e5b2505d596c8f6", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "patch": "@@ -13,8 +13,8 @@ use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, HasFormatSpecifier},\n     AstNode, AstToken, Direction, NodeOrToken, SyntaxElement,\n-    SyntaxKind::*,\n-    TextRange, WalkEvent, T,\n+    SyntaxKind::{self, *},\n+    SyntaxNode, TextRange, WalkEvent, T,\n };\n \n use crate::FileId;\n@@ -454,6 +454,23 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+/// Returns true if the parent nodes of `node` all match the `SyntaxKind`s in `kinds` exactly.\n+fn parents_match(mut node: SyntaxNode, mut kinds: &[SyntaxKind]) -> bool {\n+    while let (Some(parent), [kind, rest @ ..]) = (&node.parent(), kinds) {\n+        if parent.kind() != *kind {\n+            return false;\n+        }\n+\n+        // FIXME: Would be nice to get parent out of the match, but binding by-move and by-value\n+        // in the same pattern is unstable: rust-lang/rust#68354.\n+        node = node.parent().unwrap();\n+        kinds = rest;\n+    }\n+\n+    // Only true if we matched all expected kinds\n+    kinds.len() == 0\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -522,6 +539,26 @@ fn highlight_element(\n \n                             let mut h = highlight_def(db, def);\n \n+                            // When lvalues are passed as arguments and they're not Copy, then mark\n+                            // them as Consuming.\n+                            if parents_match(\n+                                name_ref.syntax().clone(),\n+                                &[PATH_SEGMENT, PATH, PATH_EXPR, ARG_LIST],\n+                            ) {\n+                                let lvalue_ty = if let Definition::Local(local) = &def {\n+                                    Some(local.ty(db))\n+                                } else if let Definition::SelfType(impl_def) = &def {\n+                                    Some(impl_def.target_ty(db))\n+                                } else {\n+                                    None\n+                                };\n+                                if let Some(lvalue_ty) = lvalue_ty {\n+                                    if !lvalue_ty.is_copy(db) {\n+                                        h |= HighlightModifier::Consuming;\n+                                    }\n+                                }\n+                            }\n+\n                             if let Some(parent) = name_ref.syntax().parent() {\n                                 if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n                                     if let Definition::Field(field) = def {"}, {"sha": "cade46348d09b6a5e68fd246806dad084711ead9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "patch": "@@ -61,8 +61,8 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">Foo</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n@@ -80,8 +80,8 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">FooCopy</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n@@ -144,14 +144,15 @@\n     <span class=\"variable\">y</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">clone</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"variable consuming\">foo2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"variable mutable\">copy</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>"}, {"sha": "57d4e1252d28ca99a331024340ec099cf9e7fb36", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af947a032bd2e6f6df6b903b40f142cd7b8d9e0/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=7af947a032bd2e6f6df6b903b40f142cd7b8d9e0", "patch": "@@ -35,8 +35,8 @@ impl Bar for Foo {\n }\n \n impl Foo {\n-    fn baz(mut self) -> i32 {\n-        self.x\n+    fn baz(mut self, f: Foo) -> i32 {\n+        f.baz(self)\n     }\n \n     fn qux(&mut self) {\n@@ -54,8 +54,8 @@ struct FooCopy {\n }\n \n impl FooCopy {\n-    fn baz(self) -> u32 {\n-        self.x\n+    fn baz(self, f: FooCopy) -> u32 {\n+        f.baz(self)\n     }\n \n     fn qux(&mut self) {\n@@ -118,14 +118,15 @@ fn main() {\n     y;\n \n     let mut foo = Foo { x, y: x };\n+    let foo2 = foo.clone();\n     foo.quop();\n     foo.qux();\n-    foo.baz();\n+    foo.baz(foo2);\n \n     let mut copy = FooCopy { x };\n     copy.quop();\n     copy.qux();\n-    copy.baz();\n+    copy.baz(copy);\n }\n \n enum Option<T> {"}]}