{"sha": "a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "node_id": "C_kwDOAAsO6NoAKGEwOWUyZjY3NTMwNzhmM2FiNDBiMDJlOGMxODRkOWIyZmUwN2YzNDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-07T05:28:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-07T05:28:12Z"}, "message": "Rollup merge of #102761 - est31:let_else_uninhabited_test, r=compiler-errors\n\nlet-else: test else block with non-never uninhabited type\n\nlet else currently does not allow uninhabited types for the `else` block that aren't `!`. One can maybe think about relaxing this in the future, but if it is done, it should be an explicit choice and not an unexpected side effect of e.g. a refactor. Thus, I'm extending a test that will fail if the behaviour changes.", "tree": {"sha": "24b9a8a33e2dae873270133d8916c63344728de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b9a8a33e2dae873270133d8916c63344728de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjP7jsCRBK7hj4Ov3rIwAAezEIAAGsJIEWjxZsTH9Vo/oziXuI\n/eGYBV2PNKF5DcYuntsEJfvPfO4ePwGMIBUUtwjm85Q+4B4HCvX5r/4eps47m7th\nNJpvPC62sm/ncPzUNrtEVpF2BCHya11n7580C/VI3m/WgKqsXc0UV41rESTqi3NK\n19KHxVWVi6Fe4snZJxqqTJPEM+2sMih4jMciGzRBxp751pKvmEf3sfEJHJ827uKq\n4wMVkYnmWcTApUR9jOriRBcGQ2PXiaZY/3BdB6pZwrHAEjxz7ot5dL52UGCEHG3U\nl1lf21EOp4RrQPlBnrw00UyUeMUn8y+bD59aMYtJMp3UDT+5cBR9B8oJeAapc4o=\n=C6x4\n-----END PGP SIGNATURE-----\n", "payload": "tree 24b9a8a33e2dae873270133d8916c63344728de0\nparent 04459f7a6ac04ca0adb98b04e5fca38e5760e00a\nparent 58fb351cad389b660c82966e28e213e77dfc1c57\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665120492 +0200\ncommitter GitHub <noreply@github.com> 1665120492 +0200\n\nRollup merge of #102761 - est31:let_else_uninhabited_test, r=compiler-errors\n\nlet-else: test else block with non-never uninhabited type\n\nlet else currently does not allow uninhabited types for the `else` block that aren't `!`. One can maybe think about relaxing this in the future, but if it is done, it should be an explicit choice and not an unexpected side effect of e.g. a refactor. Thus, I'm extending a test that will fail if the behaviour changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "html_url": "https://github.com/rust-lang/rust/commit/a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09e2f6753078f3ab40b02e8c184d9b2fe07f342/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04459f7a6ac04ca0adb98b04e5fca38e5760e00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/04459f7a6ac04ca0adb98b04e5fca38e5760e00a", "html_url": "https://github.com/rust-lang/rust/commit/04459f7a6ac04ca0adb98b04e5fca38e5760e00a"}, {"sha": "58fb351cad389b660c82966e28e213e77dfc1c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fb351cad389b660c82966e28e213e77dfc1c57", "html_url": "https://github.com/rust-lang/rust/commit/58fb351cad389b660c82966e28e213e77dfc1c57"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "58d2c09776f985494c0c47b6eaad26309a139e58", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a09e2f6753078f3ab40b02e8c184d9b2fe07f342/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09e2f6753078f3ab40b02e8c184d9b2fe07f342/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "patch": "@@ -8,4 +8,15 @@ fn main() {\n         }\n     };\n     let Some(x) = Some(1) else { Some(2) }; //~ ERROR does not diverge\n+\n+    // Ensure that uninhabited types do not \"diverge\".\n+    // This might be relaxed in the future, but when it is,\n+    // it should be an explicitly wanted descision.\n+    let Some(x) = Some(1) else { foo::<Uninhabited>() }; //~ ERROR does not diverge\n+}\n+\n+enum Uninhabited {}\n+\n+fn foo<T>() -> T {\n+    panic!()\n }"}, {"sha": "78551fcc434a86f81c5b763b4f4805f885724d1b", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a09e2f6753078f3ab40b02e8c184d9b2fe07f342/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09e2f6753078f3ab40b02e8c184d9b2fe07f342/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "patch": "@@ -39,6 +39,17 @@ LL |     let Some(x) = Some(1) else { Some(2) };\n    = help: try adding a diverging expression, such as `return` or `panic!(..)`\n    = help: ...or use `match` instead of `let...else`\n \n-error: aborting due to 3 previous errors\n+error[E0308]: `else` clause of `let...else` does not diverge\n+  --> $DIR/let-else-non-diverging.rs:15:32\n+   |\n+LL |     let Some(x) = Some(1) else { foo::<Uninhabited>() };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found enum `Uninhabited`\n+   |\n+   = note: expected type `!`\n+              found enum `Uninhabited`\n+   = help: try adding a diverging expression, such as `return` or `panic!(..)`\n+   = help: ...or use `match` instead of `let...else`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}