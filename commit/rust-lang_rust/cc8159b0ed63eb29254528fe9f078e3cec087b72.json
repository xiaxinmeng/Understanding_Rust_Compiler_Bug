{"sha": "cc8159b0ed63eb29254528fe9f078e3cec087b72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODE1OWIwZWQ2M2ViMjkyNTQ1MjhmZTlmMDc4ZTNjZWMwODdiNzI=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-28T20:10:50Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc_lint: use bug!(), span_bug!()", "tree": {"sha": "28b24b8d3428ee6a17daaf1907d4f2434895b275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b24b8d3428ee6a17daaf1907d4f2434895b275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8159b0ed63eb29254528fe9f078e3cec087b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8159b0ed63eb29254528fe9f078e3cec087b72", "html_url": "https://github.com/rust-lang/rust/commit/cc8159b0ed63eb29254528fe9f078e3cec087b72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8159b0ed63eb29254528fe9f078e3cec087b72/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065dcd0702769de9bd95d0e9887713c6778ed67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/065dcd0702769de9bd95d0e9887713c6778ed67f", "html_url": "https://github.com/rust-lang/rust/commit/065dcd0702769de9bd95d0e9887713c6778ed67f"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "ca189d0b51961813af28617c1b1643f79d4f6d9b", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc8159b0ed63eb29254528fe9f078e3cec087b72/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8159b0ed63eb29254528fe9f078e3cec087b72/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=cc8159b0ed63eb29254528fe9f078e3cec087b72", "patch": "@@ -30,7 +30,7 @@ pub enum MethodLateContext {\n pub fn method_context(cx: &LateContext, id: ast::NodeId, span: Span) -> MethodLateContext {\n     let def_id = cx.tcx.map.local_def_id(id);\n     match cx.tcx.impl_or_trait_items.borrow().get(&def_id) {\n-        None => cx.sess().span_bug(span, \"missing method descriptor?!\"),\n+        None => span_bug!(span, \"missing method descriptor?!\"),\n         Some(item) => match item.container() {\n             ty::TraitContainer(..) => MethodLateContext::TraitDefaultImpl,\n             ty::ImplContainer(cid) => {"}, {"sha": "6eeadc77698a07867fc7b5d1551472e0a4747e81", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc8159b0ed63eb29254528fe9f078e3cec087b72/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8159b0ed63eb29254528fe9f078e3cec087b72/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cc8159b0ed63eb29254528fe9f078e3cec087b72", "patch": "@@ -181,7 +181,7 @@ impl LateLintPass for TypeLimits {\n                                     return;\n                                 }\n                             }\n-                            _ => panic!()\n+                            _ => bug!()\n                         };\n                     },\n                     ty::TyUint(t) => {\n@@ -195,7 +195,7 @@ impl LateLintPass for TypeLimits {\n                             // _v is u8, within range by definition\n                             ast::LitKind::Byte(_v) => return,\n                             ast::LitKind::Int(v, _) => v,\n-                            _ => panic!()\n+                            _ => bug!()\n                         };\n                         if lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n@@ -212,7 +212,7 @@ impl LateLintPass for TypeLimits {\n                                     Err(_) => return\n                                 }\n                             }\n-                            _ => panic!()\n+                            _ => bug!()\n                         };\n                         if lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n@@ -233,7 +233,7 @@ impl LateLintPass for TypeLimits {\n                 hir::BiGt => v >= min && v <  max,\n                 hir::BiGe => v >  min && v <= max,\n                 hir::BiEq | hir::BiNe => v >= min && v <= max,\n-                _ => panic!()\n+                _ => bug!()\n             }\n         }\n \n@@ -319,7 +319,7 @@ impl LateLintPass for TypeLimits {\n                             ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => v as i64,\n                             _ => return true\n                         },\n-                        _ => panic!()\n+                        _ => bug!()\n                     };\n                     is_valid(norm_binop, lit_val, min, max)\n                 }\n@@ -330,7 +330,7 @@ impl LateLintPass for TypeLimits {\n                             ast::LitKind::Int(v, _) => v,\n                             _ => return true\n                         },\n-                        _ => panic!()\n+                        _ => bug!()\n                     };\n                     is_valid(norm_binop, lit_val, min, max)\n                 }\n@@ -589,7 +589,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::TyParam(..) | ty::TyInfer(..) | ty::TyError |\n             ty::TyClosure(..) | ty::TyProjection(..) |\n             ty::TyFnDef(..) => {\n-                panic!(\"Unexpected type in foreign function\")\n+                bug!(\"Unexpected type in foreign function\")\n             }\n         }\n     }"}]}