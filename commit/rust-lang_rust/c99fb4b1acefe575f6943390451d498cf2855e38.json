{"sha": "c99fb4b1acefe575f6943390451d498cf2855e38", "node_id": "C_kwDOAAsO6NoAKGM5OWZiNGIxYWNlZmU1NzVmNjk0MzM5MDQ1MWQ0OThjZjI4NTVlMzg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T13:45:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T13:45:09Z"}, "message": "Split up highlighting tests a bit more", "tree": {"sha": "c4e9df02a2abf5d4acb4aa79a4482ce987f6add9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e9df02a2abf5d4acb4aa79a4482ce987f6add9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99fb4b1acefe575f6943390451d498cf2855e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99fb4b1acefe575f6943390451d498cf2855e38", "html_url": "https://github.com/rust-lang/rust/commit/c99fb4b1acefe575f6943390451d498cf2855e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99fb4b1acefe575f6943390451d498cf2855e38/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "url": "https://api.github.com/repos/rust-lang/rust/commits/48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "html_url": "https://github.com/rust-lang/rust/commit/48189bc1b4864f8ba3a7840fdcde4cd91f25808d"}], "stats": {"total": 230, "additions": 91, "deletions": 139}, "files": [{"sha": "22bdfffa3ef439f01f6af200dbcafb02112ed233", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c99fb4b1acefe575f6943390451d498cf2855e38/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c99fb4b1acefe575f6943390451d498cf2855e38/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=c99fb4b1acefe575f6943390451d498cf2855e38", "patch": "@@ -44,9 +44,6 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"tool_module attribute library\">rustfmt</span><span class=\"operator attribute\">::</span><span class=\"tool_module attribute library\">skip</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n@@ -58,11 +55,8 @@\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"macro library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"brace\">{</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">x</span> <span class=\"keyword\">pub</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">y</span> <span class=\"keyword\">pub</span>\n-    <span class=\"brace\">}</span> <span class=\"struct declaration\">Foo</span> <span class=\"keyword\">struct</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"type_param\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n@@ -71,7 +65,7 @@\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"self_type\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n+        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -81,26 +75,17 @@\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n+        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment documentation\">/// This is a doc comment</span>\n-<span class=\"comment\">// This is a normal comment</span>\n-<span class=\"comment documentation\">/// This is a doc comment</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment\">// This is another normal comment</span>\n-<span class=\"comment documentation\">/// This is another doc comment</span>\n-<span class=\"comment\">// This is another normal comment</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment\">// The reason for these being here is to test AttrIds</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n@@ -146,68 +131,19 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n-        <span class=\"numeric_literal\">100</span>\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">dont_color_me_braces</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"numeric_literal\">0</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-        <span class=\"punctuation\">$</span>expr\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro</span> <span class=\"macro declaration\">with_args</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"punctuation\">$</span>i\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro</span> <span class=\"macro declaration\">without_args</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-        <span class=\"punctuation\">$</span>i\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">{</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parenthesis\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"brace\">}</span>\n-\n-    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"brace\">{</span>\n-        <span class=\"comment\">// Do nothing</span>\n-    <span class=\"brace\">}</span>\n-\n-    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">x</span> <span class=\"arithmetic mutable\">+=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable reference\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration reference\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable reference\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable reference\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"variable declaration\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable reference\">z</span><span class=\"comma\">,</span> <span class=\"variable mutable reference\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n     <span class=\"variable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "f114840373d47d79d677a26bf2bde188371569e3", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 83, "deletions": 67, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/c99fb4b1acefe575f6943390451d498cf2855e38/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99fb4b1acefe575f6943390451d498cf2855e38/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=c99fb4b1acefe575f6943390451d498cf2855e38", "patch": "@@ -6,19 +6,96 @@ use test_utils::{bench, bench_fixture, skip_slow_tests, AssertLinear};\n \n use crate::{fixture, FileRange, HlTag, TextRange};\n \n+#[test]\n+fn attributes() {\n+    check_highlighting(\n+        r#\"\n+//- proc_macros: identity\n+//- minicore: derive, copy\n+#[allow(dead_code)]\n+#[rustfmt::skip]\n+#[proc_macros::identity]\n+#[derive(Copy)]\n+/// This is a doc comment\n+// This is a normal comment\n+/// This is a doc comment\n+#[derive(Copy)]\n+// This is another normal comment\n+/// This is another doc comment\n+// This is another normal comment\n+#[derive(Copy)]\n+// The reason for these being here is to test AttrIds\n+struct Foo;\n+\"#,\n+        expect_file![\"./test_data/attributes.html\"],\n+        false,\n+    );\n+}\n+#[test]\n+fn macros() {\n+    check_highlighting(\n+        r#\"\n+//- proc_macros: mirror\n+proc_macros::mirror! {\n+    {\n+        ,i32 :x pub\n+        ,i32 :y pub\n+    } Foo struct\n+}\n+macro_rules! def_fn {\n+    ($($tt:tt)*) => {$($tt)*}\n+}\n+\n+def_fn! {\n+    fn bar() -> u32 {\n+        100\n+    }\n+}\n+\n+macro_rules! dont_color_me_braces {\n+    () => {0}\n+}\n+\n+macro_rules! noop {\n+    ($expr:expr) => {\n+        $expr\n+    }\n+}\n+\n+macro_rules! keyword_frag {\n+    ($type:ty) => ($type)\n+}\n+\n+macro with_args($i:ident) {\n+    $i\n+}\n+\n+macro without_args {\n+    ($i:ident) => {\n+        $i\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Hello, {}!\", 92);\n+    dont_color_me_braces!();\n+    noop!(noop!(1));\n+}\n+\"#,\n+        expect_file![\"./test_data/macros.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_highlighting() {\n     check_highlighting(\n         r#\"\n-//- proc_macros: identity, mirror\n //- minicore: derive, copy\n //- /main.rs crate:main deps:foo\n use inner::{self as inner_mod};\n mod inner {}\n \n-#[allow()]\n-#[rustfmt::skip]\n-#[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]\n     pub trait FnOnce<Args> {}\n@@ -30,11 +107,8 @@ pub mod ops {\n     pub trait Fn<Args>: FnMut<Args> {}\n }\n \n-proc_macros::mirror! {\n-    {\n-        ,i32 :x pub\n-        ,i32 :y pub\n-    } Foo struct\n+struct Foo {\n+    x: u32,\n }\n \n trait Bar where Self: {\n@@ -64,15 +138,6 @@ impl Foo {\n use self::FooCopy::{self as BarCopy};\n \n #[derive(Copy)]\n-/// This is a doc comment\n-// This is a normal comment\n-/// This is a doc comment\n-#[derive(Copy)]\n-// This is another normal comment\n-/// This is another doc comment\n-// This is another normal comment\n-#[derive(Copy)]\n-// The reason for these being here is to test AttrIds\n struct FooCopy {\n     x: u32,\n }\n@@ -118,57 +183,8 @@ fn foo() {\n     let bar = foobar();\n }\n \n-macro_rules! def_fn {\n-    ($($tt:tt)*) => {$($tt)*}\n-}\n-\n-def_fn! {\n-    fn bar() -> u32 {\n-        100\n-    }\n-}\n-\n-macro_rules! dont_color_me_braces {\n-    () => {0}\n-}\n-\n-macro_rules! noop {\n-    ($expr:expr) => {\n-        $expr\n-    }\n-}\n-\n-macro_rules! keyword_frag {\n-    ($type:ty) => ($type)\n-}\n-\n-macro with_args($i:ident) {\n-    $i\n-}\n-\n-macro without_args {\n-    ($i:ident) => {\n-        $i\n-    }\n-}\n-\n // comment\n fn main() {\n-    println!(\"Hello, {}!\", 92);\n-    dont_color_me_braces!();\n-\n-    let mut vec = Vec::new();\n-    if true {\n-        let x = 92;\n-        vec.push(Foo { x, y: 1 });\n-    }\n-\n-    for e in vec {\n-        // Do nothing\n-    }\n-\n-    noop!(noop!(1));\n-\n     let mut x = 42;\n     x += 1;\n     let y = &mut x;"}]}