{"sha": "9bfbbd2a786b7d69908f25e5d1f4170316f38726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZmJiZDJhNzg2YjdkNjk5MDhmMjVlNWQxZjQxNzAzMTZmMzg3MjY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-25T14:59:05Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-25T15:02:59Z"}, "message": "Add additional trace statements to the const propagator\n\nThis makes it easier to figure out when const propagation fails.", "tree": {"sha": "c81d82a86b3498c1ecafddd757ed1022be5576fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c81d82a86b3498c1ecafddd757ed1022be5576fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bfbbd2a786b7d69908f25e5d1f4170316f38726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfbbd2a786b7d69908f25e5d1f4170316f38726", "html_url": "https://github.com/rust-lang/rust/commit/9bfbbd2a786b7d69908f25e5d1f4170316f38726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bfbbd2a786b7d69908f25e5d1f4170316f38726/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f5786a324c40b2d8b2d0df98456e48fb45d30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f5786a324c40b2d8b2d0df98456e48fb45d30c", "html_url": "https://github.com/rust-lang/rust/commit/02f5786a324c40b2d8b2d0df98456e48fb45d30c"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "718cb5ce527ecea76d16313d1c6bad6f0f843db6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9bfbbd2a786b7d69908f25e5d1f4170316f38726/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bfbbd2a786b7d69908f25e5d1f4170316f38726/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9bfbbd2a786b7d69908f25e5d1f4170316f38726", "patch": "@@ -295,6 +295,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     }\n \n     fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+        trace!(\"eval_place(place={:?})\", place);\n         match *place {\n             Place::Base(PlaceBase::Local(loc)) => self.places[loc].clone(),\n             Place::Projection(ref proj) => match proj.elem {\n@@ -515,6 +516,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     }\n \n     fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+        trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n         self.ecx.validate_operand(\n             value,\n             vec![],\n@@ -578,6 +580,10 @@ impl CanConstProp {\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n             *val = mir.local_kind(local) == LocalKind::Temp;\n+\n+            if !*val {\n+                trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n+            }\n         }\n         cpv.visit_mir(mir);\n         cpv.can_const_prop\n@@ -597,6 +603,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // FIXME(oli-obk): we could be more powerful here, if the multiple writes\n             // only occur in independent execution paths\n             MutatingUse(MutatingUseContext::Store) => if self.found_assignment[local] {\n+                trace!(\"local {:?} can't be propagated because of multiple assignments\", local);\n                 self.can_const_prop[local] = false;\n             } else {\n                 self.found_assignment[local] = true\n@@ -608,7 +615,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             NonMutatingUse(NonMutatingUseContext::Projection) |\n             MutatingUse(MutatingUseContext::Projection) |\n             NonUse(_) => {},\n-            _ => self.can_const_prop[local] = false,\n+            _ => {\n+                trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n+                self.can_const_prop[local] = false;\n+            },\n         }\n     }\n }"}]}