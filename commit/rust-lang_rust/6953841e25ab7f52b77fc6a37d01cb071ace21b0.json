{"sha": "6953841e25ab7f52b77fc6a37d01cb071ace21b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTM4NDFlMjVhYjdmNTJiNzdmYzZhMzdkMDFjYjA3MWFjZTIxYjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T23:10:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T23:10:17Z"}, "message": "rustc: Remove magic numbers; they aren't a win", "tree": {"sha": "3c56325874856de6de4fb3a33c797100389a9512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c56325874856de6de4fb3a33c797100389a9512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6953841e25ab7f52b77fc6a37d01cb071ace21b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6953841e25ab7f52b77fc6a37d01cb071ace21b0", "html_url": "https://github.com/rust-lang/rust/commit/6953841e25ab7f52b77fc6a37d01cb071ace21b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6953841e25ab7f52b77fc6a37d01cb071ace21b0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df914e89041bd6a133c6fb642144668bafae5a80", "url": "https://api.github.com/repos/rust-lang/rust/commits/df914e89041bd6a133c6fb642144668bafae5a80", "html_url": "https://github.com/rust-lang/rust/commit/df914e89041bd6a133c6fb642144668bafae5a80"}], "stats": {"total": 43, "additions": 3, "deletions": 40}, "files": [{"sha": "838ee980a03e4a8203403196ef82f88220573907", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6953841e25ab7f52b77fc6a37d01cb071ace21b0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6953841e25ab7f52b77fc6a37d01cb071ace21b0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=6953841e25ab7f52b77fc6a37d01cb071ace21b0", "patch": "@@ -73,7 +73,6 @@ fn method_ty_to_fn_ty(ctxt cx, method m) -> t {\n // outside world, to enforce the above invariants.\n type raw_t = rec(sty struct,\n                  Option.t[str] cname,\n-                 uint magic,\n                  uint hash,\n                  bool has_params,\n                  bool has_bound_params,\n@@ -236,7 +235,6 @@ fn mk_ctxt(session.session s) -> ctxt {\n \n fn mk_ty_full(&sty st, &Option.t[str] cname) -> t {\n     auto h = hash_type_info(st, cname);\n-    auto magic = mk_magic(st);\n \n     let bool has_params = false;\n     let bool has_bound_params = false;\n@@ -352,7 +350,7 @@ fn mk_ty_full(&sty st, &Option.t[str] cname) -> t {\n         case (_) { }\n     }\n \n-    ret @rec(struct=st, cname=cname, magic=magic, hash=h,\n+    ret @rec(struct=st, cname=cname, hash=h,\n              has_params = has_params,\n              has_bound_params = has_bound_params,\n              has_vars = has_vars,\n@@ -1048,40 +1046,6 @@ fn def_to_str(&ast.def_id did) -> str {\n }\n \n \n-// Generation of \"magic numbers\", which are workarounds for the lack of\n-// structural equality in rustboot.\n-\n-fn mk_magic(&sty st) -> uint {\n-    alt (st) {\n-        case (ty_nil) { ret 1u; }\n-        case (ty_bool) { ret 2u; }\n-        case (ty_int) { ret 3u; }\n-        case (ty_float) { ret 4u; }\n-        case (ty_uint) { ret 5u; }\n-        case (ty_char) { ret 6u; }\n-        case (ty_str) { ret 7u; }\n-        case (ty_task) { ret 8u; }\n-        case (ty_type) { ret 9u; }\n-        case (ty_native) { ret 10u; }\n-        case (ty_machine(?tm)) {\n-            alt (tm) {\n-                case (common.ty_i8) { ret 11u; }\n-                case (common.ty_i16) { ret 12u; }\n-                case (common.ty_i32) { ret 13u; }\n-                case (common.ty_i64) { ret 14u; }\n-                case (common.ty_u8) { ret 15u; }\n-                case (common.ty_u16) { ret 16u; }\n-                case (common.ty_u32) { ret 17u; }\n-                case (common.ty_u64) { ret 18u; }\n-                case (common.ty_f32) { ret 19u; }\n-                case (common.ty_f64) { ret 20u; }\n-            }\n-        }\n-        case (_) { ret 0u; }\n-    }\n-}\n-\n-\n // Type hashing. This function is private to this module (and slow); external\n // users should use `hash_ty()` instead.\n fn hash_type_structure(&sty st) -> uint {\n@@ -1503,10 +1467,9 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n \n // An expensive type equality function. This function is private to this\n // module.\n+//\n+// FIXME: Use structural comparison, but this loops forever and segfaults.\n fn eq_ty_full(&t a, &t b) -> bool {\n-    // Check magic numbers (fast path).\n-    if (a.magic != 0u || b.magic != 0u) { ret a.magic == b.magic; }\n-\n     // Check hashes (fast path).\n     if (a.hash != b.hash) {\n         ret false;"}]}