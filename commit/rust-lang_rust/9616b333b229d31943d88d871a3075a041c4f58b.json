{"sha": "9616b333b229d31943d88d871a3075a041c4f58b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTZiMzMzYjIyOWQzMTk0M2Q4OGQ4NzFhMzA3NWEwNDFjNGY1OGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T21:47:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T21:47:15Z"}, "message": "review comment: tweak wording", "tree": {"sha": "b5ce05bc1c64a1008ad8604324be319d775a72c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ce05bc1c64a1008ad8604324be319d775a72c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9616b333b229d31943d88d871a3075a041c4f58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9616b333b229d31943d88d871a3075a041c4f58b", "html_url": "https://github.com/rust-lang/rust/commit/9616b333b229d31943d88d871a3075a041c4f58b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9616b333b229d31943d88d871a3075a041c4f58b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "html_url": "https://github.com/rust-lang/rust/commit/ebbe725dd0dcd5289efd80c0c99127b1518da5ed"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "51c69f98d978d3daeabe9c70f01b01726fe825bd", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -142,24 +142,28 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // trying to infer. In the following example, `ty_msg` contains\n         // \" in `std::result::Result<i32, E>`\":\n         // ```\n-        // error[E0282]: type annotations needed in `std::result::Result<i32, E>`\n+        // error[E0282]: type annotations needed for `std::result::Result<i32, E>`\n         //  --> file.rs:L:CC\n         //   |\n         // L |     let b = Ok(4);\n         //   |         -   ^^ cannot infer type for `E` in `std::result::Result<i32, E>`\n         //   |         |\n-        //   |         consider giving `b` the type `std::result::Result<i32, E>` with the type\n-        //   |         parameter `E` specified\n+        //   |         consider giving `b` the explicit type `std::result::Result<i32, E>`, where\n+        //   |         the type parameter `E` is specified\n         // ```\n         let (ty_msg, suffix) = match &local_visitor.found_ty {\n             Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n                 let ty = ty_to_string(ty);\n-                (format!(\" in `{}`\", ty),\n-                 format!( \"the type `{}` with the type parameter `{}` specified\", ty, name))\n+                (format!(\" for `{}`\", ty),\n+                 format!(\n+                     \"the explicit type `{}`, where the type parameter `{}` is specified\",\n+                    ty,\n+                    name,\n+                 ))\n             }\n             _ => (String::new(), \"a type\".to_owned()),\n         };\n-        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name, &ty_msg))];\n+        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name))];\n \n         if let Some(pattern) = local_visitor.found_arg_pattern {\n             err_span = pattern.span;\n@@ -229,15 +233,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        span,\n                        E0698,\n                        \"type inside generator must be known in this context\");\n-        err.span_label(span, InferCtxt::missing_type_msg(&name, \"\"));\n+        err.span_label(span, InferCtxt::missing_type_msg(&name));\n         err\n     }\n \n-    fn missing_type_msg(type_name: &str, postfix: &str) -> String {\n+    fn missing_type_msg(type_name: &str) -> String {\n         if type_name == \"_\" {\n             \"cannot infer type\".to_owned()\n         } else {\n-            format!(\"cannot infer type for `{}`{}\", type_name, postfix)\n+            format!(\"cannot infer type for `{}`\", type_name)\n         }\n     }\n }"}, {"sha": "850e61a9cc2df7fdacf8a99c3fb8d57d1e6018ea", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed in `&T`\n+error[E0282]: type annotations needed for `&T`\n   --> $DIR/issue-12187-1.rs:6:10\n    |\n LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving this pattern the type `&T` with the type parameter `_` specified\n+   |         consider giving this pattern the explicit type `&T`, where the type parameter `_` is specified\n \n error: aborting due to previous error\n "}, {"sha": "4cf2b9010a846c3b24119e340bf2f6c3e4b5c060", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed in `&T`\n+error[E0282]: type annotations needed for `&T`\n   --> $DIR/issue-12187-2.rs:6:10\n    |\n LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving this pattern the type `&T` with the type parameter `_` specified\n+   |         consider giving this pattern the explicit type `&T`, where the type parameter `_` is specified\n \n error: aborting due to previous error\n "}, {"sha": "ce16f0f58eaf0cacff150cf9b4c1a18237cfa26a", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `B<T>`\n+error[E0282]: type annotations needed for `B<T>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n-   |         ---   ^ cannot infer type for `T` in `B<T>`\n+   |         ---   ^ cannot infer type for `T`\n    |         |\n-   |         consider giving `foo` the type `B<T>` with the type parameter `T` specified\n+   |         consider giving `foo` the explicit type `B<T>`, where the type parameter `T` is specified\n \n error: aborting due to previous error\n "}, {"sha": "c6c3f32dfe7d8f3a8a8f8fe6a578dd16acc9bb24", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed in `&(_,)`\n+error[E0282]: type annotations needed for `&(_,)`\n   --> $DIR/issue-20261.rs:4:11\n    |\n LL |     for (ref i,) in [].iter() {"}, {"sha": "12b2eb48e7eaa2987d341590f80595f040d88ba6", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `Expr<'_, VAR>`\n+error[E0282]: type annotations needed for `Expr<'_, VAR>`\n   --> $DIR/issue-23046.rs:17:15\n    |\n LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter the type `Expr<'_, VAR>` with the type parameter `VAR` specified\n+   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n \n error: aborting due to previous error\n "}, {"sha": "0b890b573da131ad77cba13b3d3642f82b8fee92", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed in `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n+error[E0282]: type annotations needed for `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();\n-   |         -------- consider giving this pattern the type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)` with the type parameter `T` specified\n+   |         -------- consider giving this pattern the explicit type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`, where the type parameter `T` is specified\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n-   |                 ^^^ cannot infer type for `T` in `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n+   |                 ^^^ cannot infer type for `T`\n \n error: aborting due to previous error\n "}, {"sha": "813b41663eebb1313ea12d5fb19d6877f22f3421", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `&[_; 0]`\n+error[E0282]: type annotations needed for `&[_; 0]`\n   --> $DIR/issue-7813.rs:2:13\n    |\n LL |     let v = &[];\n    |         -   ^^^ cannot infer type\n    |         |\n-   |         consider giving `v` the type `&[_; 0]` with the type parameter `_` specified\n+   |         consider giving `v` the explicit type `&[_; 0]`, where the type parameter `_` is specified\n \n error: aborting due to previous error\n "}, {"sha": "b1bd749bef4a254e9f121ffcfcd27e61e4ce8f30", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<T>`\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n-   |         -----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n+   |         -----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` the type `std::vec::Vec<T>` with the type parameter `T` specified\n+   |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "04c2870d8329740c841dcfda86e97ce2eb01f8ac", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `std::option::Option<_>`\n+error[E0282]: type annotations needed for `std::option::Option<_>`\n   --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n    |\n LL |     let x: Option<_> = None;\n-   |         - consider giving `x` the type `std::option::Option<_>` with the type parameter `T` specified\n+   |         - consider giving `x` the explicit type `std::option::Option<_>`, where the type parameter `T` is specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n-   |     ^^^^^^^^^^ cannot infer type for `T` in `std::option::Option<_>`\n+   |     ^^^^^^^^^^ cannot infer type for `T`\n    |\n    = note: type must be known at this point\n "}, {"sha": "06b757b0398f06ceaa7f4943572542da9e9418fd", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `[_; 0]`\n+error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/cannot_infer_local_or_array.rs:2:13\n    |\n LL |     let x = [];\n    |         -   ^^ cannot infer type\n    |         |\n-   |         consider giving `x` the type `[_; 0]` with the type parameter `_` specified\n+   |         consider giving `x` the explicit type `[_; 0]`, where the type parameter `_` is specified\n \n error: aborting due to previous error\n "}, {"sha": "6524bf5dd2bc52c81b4481cafd6179fc17e8f269", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<T>`\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n-   |         -   ^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n+   |         -   ^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` the type `std::vec::Vec<T>` with the type parameter `T` specified\n+   |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "6d1ef240da60c03cb3461fa84deab1c7646cf603", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `(std::vec::Vec<T>,)`\n+error[E0282]: type annotations needed for `(std::vec::Vec<T>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );\n-   |         -----    ^^^^^^ cannot infer type for `T` in `(std::vec::Vec<T>,)`\n+   |         -----    ^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving this pattern the type `(std::vec::Vec<T>,)` with the type parameter `T` specified\n+   |         consider giving this pattern the explicit type `(std::vec::Vec<T>,)`, where the type parameter `T` is specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "acd82a397f651df5440c5253d86f48b79322f035", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `std::option::Option<T>`\n+error[E0282]: type annotations needed for `std::option::Option<T>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;\n-   |         ------------ consider giving `closure0` the type `std::option::Option<T>` with the type parameter `_` specified\n+   |         ------------ consider giving `closure0` the explicit type `std::option::Option<T>`, where the type parameter `_` is specified\n ...\n LL |                         return c();\n    |                                ^^^ cannot infer type"}, {"sha": "28100d7c89e71e6e8e091e5617a272846bd29d2b", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9616b333b229d31943d88d871a3075a041c4f58b/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=9616b333b229d31943d88d871a3075a041c4f58b", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<T>`\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n-   |         ----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n+   |         ----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `_foo` the type `std::vec::Vec<T>` with the type parameter `T` specified\n+   |         consider giving `_foo` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n \n error: aborting due to previous error\n "}]}