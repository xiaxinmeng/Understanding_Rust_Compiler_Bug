{"sha": "7fc3183520bfc20c40bdc1718376378df05716c7", "node_id": "C_kwDOAAsO6NoAKDdmYzMxODM1MjBiZmMyMGM0MGJkYzE3MTgzNzYzNzhkZjA1NzE2Yzc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-12T20:47:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T20:47:14Z"}, "message": "Rollup merge of #100291 - WaffleLapkin:cstr_const_methods, r=oli-obk\n\nconstify some `CStr` methods\n\nThis PR marks the following public APIs as `const`:\n```rust\nimpl CStr {\n    // feature(const_cstr_from_bytes)\n    pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError>;\n    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError>;\n\n    // feature(const_cstr_to_bytes)\n    pub const fn to_bytes(&self) -> &[u8];\n    pub const fn to_bytes_with_nul(&self) -> &[u8];\n    pub const fn to_str(&self) -> Result<&str, str::Utf8Error>;\n}\n```\n\nr? ```@oli-obk``` (use of `const_eval_select` :P )\ncc ```@mina86``` (you've asked for this <3 )", "tree": {"sha": "693dbf65a18e6578861333781da228fb3189b5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693dbf65a18e6578861333781da228fb3189b5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc3183520bfc20c40bdc1718376378df05716c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjH5rSCRBK7hj4Ov3rIwAANFcIAKuoHGTTzjVeBeTVGzyhh+66\n1P8/4iekpRSfOhevrSrvqvSI4gR6h4t83GZS5Y5w5cdHVsHtVBeLuvk+rBTt3z5P\nCHl3+UZdPG8g33zJ7AhW0uFu7an1EekhjOKfPCcPO9YQmTwbt3kArKuDxNTdwtQS\npW4q0NLPseaRd0GizCNm6iajf+C6pahFm8SCQ/cQGYDm7JC8VGJwCUE/qfykXDUK\nkPWDYhMTpS/KTw1aTEaUURyhPa0n+RzSNDBdg+mv3HbgGrd5/vyi0w6C61+n3+wq\nF8mpljfdVVfd9iJi6IzXW+rxKI9rfidUbCYXCMBfCov0f40rxXJiyK+dRcgIMmw=\n=LJKV\n-----END PGP SIGNATURE-----\n", "payload": "tree 693dbf65a18e6578861333781da228fb3189b5d9\nparent b7504d6f4f418f991274c6e062111348c55afb3a\nparent cb02b647dc0441cfe152fa037ee14f4606c477cb\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1663015634 +0200\ncommitter GitHub <noreply@github.com> 1663015634 +0200\n\nRollup merge of #100291 - WaffleLapkin:cstr_const_methods, r=oli-obk\n\nconstify some `CStr` methods\n\nThis PR marks the following public APIs as `const`:\n```rust\nimpl CStr {\n    // feature(const_cstr_from_bytes)\n    pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError>;\n    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError>;\n\n    // feature(const_cstr_to_bytes)\n    pub const fn to_bytes(&self) -> &[u8];\n    pub const fn to_bytes_with_nul(&self) -> &[u8];\n    pub const fn to_str(&self) -> Result<&str, str::Utf8Error>;\n}\n```\n\nr? ```@oli-obk``` (use of `const_eval_select` :P )\ncc ```@mina86``` (you've asked for this <3 )\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc3183520bfc20c40bdc1718376378df05716c7", "html_url": "https://github.com/rust-lang/rust/commit/7fc3183520bfc20c40bdc1718376378df05716c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc3183520bfc20c40bdc1718376378df05716c7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7504d6f4f418f991274c6e062111348c55afb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7504d6f4f418f991274c6e062111348c55afb3a", "html_url": "https://github.com/rust-lang/rust/commit/b7504d6f4f418f991274c6e062111348c55afb3a"}, {"sha": "cb02b647dc0441cfe152fa037ee14f4606c477cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb02b647dc0441cfe152fa037ee14f4606c477cb", "html_url": "https://github.com/rust-lang/rust/commit/cb02b647dc0441cfe152fa037ee14f4606c477cb"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "21f80ec025a8133057d232fdf04e94bb5dee2178", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=7fc3183520bfc20c40bdc1718376378df05716c7", "patch": "@@ -120,10 +120,10 @@ enum FromBytesWithNulErrorKind {\n }\n \n impl FromBytesWithNulError {\n-    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+    const fn interior_nul(pos: usize) -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::InteriorNul(pos) }\n     }\n-    fn not_nul_terminated() -> FromBytesWithNulError {\n+    const fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::NotNulTerminated }\n     }\n \n@@ -294,7 +294,8 @@ impl CStr {\n     /// ```\n     ///\n     #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-    pub fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n+    #[rustc_const_unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) => {\n@@ -343,7 +344,8 @@ impl CStr {\n     /// assert!(cstr.is_err());\n     /// ```\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) if nul_pos + 1 == bytes.len() => {\n@@ -493,7 +495,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         // SAFETY: to_bytes_with_nul returns slice with length at least 1\n         unsafe { bytes.get_unchecked(..bytes.len() - 1) }\n@@ -520,7 +523,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes_with_nul(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes_with_nul(&self) -> &[u8] {\n         // SAFETY: Transmuting a slice of `c_char`s to a slice of `u8`s\n         // is safe on all supported targets.\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -543,7 +547,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n-    pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // N.B., when `CStr` is changed to perform the length check in `.to_bytes()`\n         // instead of in `from_ptr()`, it may be worth considering if this should\n         // be rewritten to do the UTF-8 check inline with the length calculation"}, {"sha": "5621d15c1cd6f5d90674801fdc93aa40a63c8bf1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7fc3183520bfc20c40bdc1718376378df05716c7", "patch": "@@ -159,6 +159,7 @@\n #![feature(const_slice_from_ref)]\n #![feature(const_slice_index)]\n #![feature(const_is_char_boundary)]\n+#![feature(const_cstr_methods)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "e0419f0ffdbaceb124a41b2c392fe6425d0d005b", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3183520bfc20c40bdc1718376378df05716c7/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=7fc3183520bfc20c40bdc1718376378df05716c7", "patch": "@@ -2,6 +2,7 @@\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n use crate::cmp;\n+use crate::intrinsics;\n use crate::mem;\n \n const LO_USIZE: usize = usize::repeat_u8(0x01);\n@@ -35,13 +36,31 @@ fn repeat_byte(b: u8) -> usize {\n /// Returns the first index matching the byte `x` in `text`.\n #[must_use]\n #[inline]\n-pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n-    // Fast path for small slices\n-    if text.len() < 2 * USIZE_BYTES {\n-        return text.iter().position(|elt| *elt == x);\n+pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n+    #[inline]\n+    fn rt_impl(x: u8, text: &[u8]) -> Option<usize> {\n+        // Fast path for small slices\n+        if text.len() < 2 * USIZE_BYTES {\n+            return text.iter().position(|elt| *elt == x);\n+        }\n+\n+        memchr_general_case(x, text)\n+    }\n+\n+    const fn const_impl(x: u8, bytes: &[u8]) -> Option<usize> {\n+        let mut i = 0;\n+        while i < bytes.len() {\n+            if bytes[i] == x {\n+                return Some(i);\n+            }\n+            i += 1;\n+        }\n+\n+        None\n     }\n \n-    memchr_general_case(x, text)\n+    // SAFETY: The const and runtime versions have identical behavior\n+    unsafe { intrinsics::const_eval_select((x, text), const_impl, rt_impl) }\n }\n \n fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {"}]}