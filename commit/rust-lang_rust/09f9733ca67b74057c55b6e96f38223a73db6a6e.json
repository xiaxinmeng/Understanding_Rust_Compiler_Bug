{"sha": "09f9733ca67b74057c55b6e96f38223a73db6a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Zjk3MzNjYTY3Yjc0MDU3YzU1YjZlOTZmMzgyMjNhNzNkYjZhNmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-31T13:40:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-31T13:40:36Z"}, "message": "move struct & enum data to hir_def", "tree": {"sha": "1d1ca3aeb17592c9aaa2823f1548b211141b9e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1ca3aeb17592c9aaa2823f1548b211141b9e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09f9733ca67b74057c55b6e96f38223a73db6a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09f9733ca67b74057c55b6e96f38223a73db6a6e", "html_url": "https://github.com/rust-lang/rust/commit/09f9733ca67b74057c55b6e96f38223a73db6a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09f9733ca67b74057c55b6e96f38223a73db6a6e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d067afb064a7fa67b172abf561b7d80740cd6f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d067afb064a7fa67b172abf561b7d80740cd6f18", "html_url": "https://github.com/rust-lang/rust/commit/d067afb064a7fa67b172abf561b7d80740cd6f18"}], "stats": {"total": 415, "additions": 214, "deletions": 201}, "files": [{"sha": "0436d20b79eeb3d9fa188b07601e1555f9ab0bd3", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 172, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -3,152 +3,16 @@\n \n use std::sync::Arc;\n \n-use hir_def::{type_ref::TypeRef, LocalEnumVariantId};\n-use hir_expand::name::AsName;\n-use ra_arena::{impl_arena_id, Arena, RawId};\n-use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n+use hir_def::adt::VariantData;\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n+    db::{DefDatabase, HirDatabase},\n+    EnumVariant, Module, Name, Struct, StructField,\n };\n \n impl Struct {\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self).variant_data.clone()\n-    }\n-}\n-\n-/// Note that we use `StructData` for unions as well!\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StructData {\n-    pub(crate) name: Option<Name>,\n-    pub(crate) variant_data: Arc<VariantData>,\n-}\n-\n-impl StructData {\n-    fn new(struct_def: &ast::StructDef) -> StructData {\n-        let name = struct_def.name().map(|n| n.as_name());\n-        let variant_data = VariantData::new(struct_def.kind());\n-        let variant_data = Arc::new(variant_data);\n-        StructData { name, variant_data }\n-    }\n-\n-    pub(crate) fn struct_data_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        struct_: Struct,\n-    ) -> Arc<StructData> {\n-        let src = struct_.source(db);\n-        Arc::new(StructData::new(&src.ast))\n-    }\n-}\n-\n-fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = ast::EnumVariant> {\n-    enum_def.variant_list().into_iter().flat_map(|it| it.variants())\n-}\n-\n-impl EnumVariant {\n-    pub(crate) fn source_impl(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> Source<ast::EnumVariant> {\n-        let src = self.parent.source(db);\n-        let ast = variants(&src.ast)\n-            .zip(db.enum_data(self.parent).variants.iter())\n-            .find(|(_syntax, (id, _))| *id == self.id)\n-            .unwrap()\n-            .0;\n-        Source { file_id: src.file_id, ast }\n-    }\n-    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.enum_data(self.parent).variants[self.id].variant_data.clone()\n-    }\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct EnumData {\n-    pub(crate) name: Option<Name>,\n-    pub(crate) variants: Arena<LocalEnumVariantId, EnumVariantData>,\n-}\n-\n-impl EnumData {\n-    pub(crate) fn enum_data_query(db: &(impl DefDatabase + AstDatabase), e: Enum) -> Arc<EnumData> {\n-        let src = e.source(db);\n-        let name = src.ast.name().map(|n| n.as_name());\n-        let variants = variants(&src.ast)\n-            .map(|var| EnumVariantData {\n-                name: var.name().map(|it| it.as_name()),\n-                variant_data: Arc::new(VariantData::new(var.kind())),\n-            })\n-            .collect();\n-        Arc::new(EnumData { name, variants })\n-    }\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub(crate) struct EnumVariantData {\n-    pub(crate) name: Option<Name>,\n-    variant_data: Arc<VariantData>,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct StructFieldId(RawId);\n-impl_arena_id!(StructFieldId);\n-\n-/// A single field of an enum variant or struct\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StructFieldData {\n-    pub(crate) name: Name,\n-    pub(crate) type_ref: TypeRef,\n-}\n-\n-/// Fields of an enum variant or struct\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub(crate) struct VariantData(VariantDataInner);\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-enum VariantDataInner {\n-    Struct(Arena<StructFieldId, StructFieldData>),\n-    Tuple(Arena<StructFieldId, StructFieldData>),\n-    Unit,\n-}\n-\n-impl VariantData {\n-    pub(crate) fn fields(&self) -> Option<&Arena<StructFieldId, StructFieldData>> {\n-        match &self.0 {\n-            VariantDataInner::Struct(fields) | VariantDataInner::Tuple(fields) => Some(fields),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-impl VariantData {\n-    fn new(flavor: StructKind) -> Self {\n-        let inner = match flavor {\n-            ast::StructKind::Tuple(fl) => {\n-                let fields = fl\n-                    .fields()\n-                    .enumerate()\n-                    .map(|(i, fd)| StructFieldData {\n-                        name: Name::new_tuple_field(i),\n-                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n-                    })\n-                    .collect();\n-                VariantDataInner::Tuple(fields)\n-            }\n-            ast::StructKind::Named(fl) => {\n-                let fields = fl\n-                    .fields()\n-                    .map(|fd| StructFieldData {\n-                        name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n-                    })\n-                    .collect();\n-                VariantDataInner::Struct(fields)\n-            }\n-            ast::StructKind::Unit => VariantDataInner::Unit,\n-        };\n-        VariantData(inner)\n+        db.struct_data(self.id).variant_data.clone()\n     }\n }\n \n@@ -188,35 +52,3 @@ impl VariantDef {\n         }\n     }\n }\n-\n-impl StructField {\n-    pub(crate) fn source_impl(&self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n-        let var_data = self.parent.variant_data(db);\n-        let fields = var_data.fields().unwrap();\n-        let ss;\n-        let es;\n-        let (file_id, struct_kind) = match self.parent {\n-            VariantDef::Struct(s) => {\n-                ss = s.source(db);\n-                (ss.file_id, ss.ast.kind())\n-            }\n-            VariantDef::EnumVariant(e) => {\n-                es = e.source(db);\n-                (es.file_id, es.ast.kind())\n-            }\n-        };\n-\n-        let field_sources = match struct_kind {\n-            ast::StructKind::Tuple(fl) => fl.fields().map(|it| FieldSource::Pos(it)).collect(),\n-            ast::StructKind::Named(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n-            ast::StructKind::Unit => Vec::new(),\n-        };\n-        let ast = field_sources\n-            .into_iter()\n-            .zip(fields.iter())\n-            .find(|(_syntax, (id, _))| *id == self.id)\n-            .unwrap()\n-            .0;\n-        Source { file_id, ast }\n-    }\n-}"}, {"sha": "ae6ef760674c23859df9a23f9de4e96ae6c3ea75", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -6,16 +6,17 @@ pub(crate) mod docs;\n use std::sync::Arc;\n \n use hir_def::{\n+    adt::VariantData,\n     builtin_type::BuiltinType,\n     type_ref::{Mutability, TypeRef},\n-    CrateModuleId, LocalEnumVariantId, ModuleId,\n+    CrateModuleId, LocalEnumVariantId, LocalStructFieldId, ModuleId,\n };\n use hir_expand::name::{self, AsName};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    adt::{StructFieldId, VariantDef},\n+    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     diagnostics::DiagnosticSink,\n     expr::{validation::ExprValidator, Body, BodySourceMap},\n@@ -250,7 +251,7 @@ impl Module {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,\n-    pub(crate) id: StructFieldId,\n+    pub(crate) id: LocalStructFieldId,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -288,11 +289,11 @@ impl Struct {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.struct_data(self).name.clone()\n+        db.struct_data(self.id).name.clone()\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        db.struct_data(self)\n+        db.struct_data(self.id)\n             .variant_data\n             .fields()\n             .into_iter()\n@@ -302,7 +303,7 @@ impl Struct {\n     }\n \n     pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        db.struct_data(self)\n+        db.struct_data(self.id)\n             .variant_data\n             .fields()\n             .into_iter()\n@@ -338,7 +339,7 @@ pub struct Union {\n \n impl Union {\n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.struct_data(Struct { id: self.id }).name.clone()\n+        db.struct_data(self.id).name.clone()\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n@@ -376,15 +377,19 @@ impl Enum {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.enum_data(self).name.clone()\n+        db.enum_data(self.id).name.clone()\n     }\n \n     pub fn variants(self, db: &impl DefDatabase) -> Vec<EnumVariant> {\n-        db.enum_data(self).variants.iter().map(|(id, _)| EnumVariant { parent: self, id }).collect()\n+        db.enum_data(self.id)\n+            .variants\n+            .iter()\n+            .map(|(id, _)| EnumVariant { parent: self, id })\n+            .collect()\n     }\n \n     pub fn variant(self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n-        db.enum_data(self)\n+        db.enum_data(self.id)\n             .variants\n             .iter()\n             .find(|(_id, data)| data.name.as_ref() == Some(name))\n@@ -422,7 +427,7 @@ impl EnumVariant {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.enum_data(self.parent).variants[self.id].name.clone()\n+        db.enum_data(self.parent.id).variants[self.id].name.clone()\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n@@ -442,6 +447,10 @@ impl EnumVariant {\n             .find(|(_id, data)| data.name == *name)\n             .map(|(id, _)| StructField { parent: self.into(), id })\n     }\n+\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n+    }\n }\n \n /// A Data Type"}, {"sha": "0f4c78df760d8655e88a1055f96d56ac53aa5390", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -3,6 +3,7 @@\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n+    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n     Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n@@ -45,7 +46,33 @@ impl Module {\n impl HasSource for StructField {\n     type Ast = FieldSource;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n-        self.source_impl(db)\n+        let var_data = self.parent.variant_data(db);\n+        let fields = var_data.fields().unwrap();\n+        let ss;\n+        let es;\n+        let (file_id, struct_kind) = match self.parent {\n+            VariantDef::Struct(s) => {\n+                ss = s.source(db);\n+                (ss.file_id, ss.ast.kind())\n+            }\n+            VariantDef::EnumVariant(e) => {\n+                es = e.source(db);\n+                (es.file_id, es.ast.kind())\n+            }\n+        };\n+\n+        let field_sources = match struct_kind {\n+            ast::StructKind::Tuple(fl) => fl.fields().map(|it| FieldSource::Pos(it)).collect(),\n+            ast::StructKind::Named(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n+            ast::StructKind::Unit => Vec::new(),\n+        };\n+        let ast = field_sources\n+            .into_iter()\n+            .zip(fields.iter())\n+            .find(|(_syntax, (id, _))| *id == self.id)\n+            .unwrap()\n+            .0;\n+        Source { file_id, ast }\n     }\n }\n impl HasSource for Struct {\n@@ -69,7 +96,18 @@ impl HasSource for Enum {\n impl HasSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumVariant> {\n-        self.source_impl(db)\n+        let enum_data = db.enum_data(self.parent.id);\n+        let src = self.parent.id.source(db);\n+        let ast = src\n+            .ast\n+            .variant_list()\n+            .into_iter()\n+            .flat_map(|it| it.variants())\n+            .zip(enum_data.variants.iter())\n+            .find(|(_syntax, (id, _))| *id == self.id)\n+            .unwrap()\n+            .0;\n+        Source { file_id: src.file_id, ast }\n     }\n }\n impl HasSource for Function {"}, {"sha": "89ca4e39f0af9fa09933fbb6850f12f802bdb833", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -6,7 +6,6 @@ use ra_db::salsa;\n use ra_syntax::SmolStr;\n \n use crate::{\n-    adt::{EnumData, StructData},\n     debug::HirDebugDatabase,\n     generics::{GenericDef, GenericParams},\n     ids,\n@@ -19,13 +18,13 @@ use crate::{\n         InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, Enum, ExprScopes, FnData, Function, Module, Static,\n-    Struct, StructField, Trait, TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Static,\n+    StructField, Trait, TypeAlias,\n };\n \n pub use hir_def::db::{\n-    DefDatabase2, DefDatabase2Storage, InternDatabase, InternDatabaseStorage, RawItemsQuery,\n-    RawItemsWithSourceMapQuery,\n+    DefDatabase2, DefDatabase2Storage, EnumDataQuery, InternDatabase, InternDatabaseStorage,\n+    RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -36,12 +35,6 @@ pub use hir_expand::db::{\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n-    fn struct_data(&self, s: Struct) -> Arc<StructData>;\n-\n-    #[salsa::invoke(crate::adt::EnumData::enum_data_query)]\n-    fn enum_data(&self, e: Enum) -> Arc<EnumData>;\n-\n     #[salsa::invoke(crate::traits::TraitData::trait_data_query)]\n     fn trait_data(&self, t: Trait) -> Arc<TraitData>;\n "}, {"sha": "8e28343071a29ae2e60a275d7bf030b45705c3de", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -655,8 +655,8 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n }\n \n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n-    let var_data = def.variant_data(db);\n-    let fields = match var_data.fields() {\n+    let struct_data = db.struct_data(def.id);\n+    let fields = match struct_data.variant_data.fields() {\n         Some(fields) => fields,\n         None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n     };\n@@ -671,8 +671,8 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n \n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n-    let var_data = def.variant_data(db);\n-    if var_data.fields().is_none() {\n+    let struct_data = db.struct_data(def.id);\n+    if struct_data.variant_data.fields().is_none() {\n         return type_for_adt(db, def); // Unit struct\n     }\n     let generics = def.generic_params(db);"}, {"sha": "22bd469f0a31a9789c28ec28223521e888ef1afc", "filename": "crates/ra_hir_def/src/adt.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -0,0 +1,114 @@\n+//! Defines hir-level representation of structs, enums and unions\n+\n+use std::sync::Arc;\n+\n+use hir_expand::name::{AsName, Name};\n+use ra_arena::Arena;\n+use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n+\n+use crate::{\n+    db::DefDatabase2, type_ref::TypeRef, AstItemDef, EnumId, LocalEnumVariantId,\n+    LocalStructFieldId, StructId,\n+};\n+\n+/// Note that we use `StructData` for unions as well!\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StructData {\n+    pub name: Option<Name>,\n+    pub variant_data: Arc<VariantData>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct EnumData {\n+    pub name: Option<Name>,\n+    pub variants: Arena<LocalEnumVariantId, EnumVariantData>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct EnumVariantData {\n+    pub name: Option<Name>,\n+    pub variant_data: Arc<VariantData>,\n+}\n+\n+/// Fields of an enum variant or struct\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct VariantData(VariantDataInner);\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum VariantDataInner {\n+    Struct(Arena<LocalStructFieldId, StructFieldData>),\n+    Tuple(Arena<LocalStructFieldId, StructFieldData>),\n+    Unit,\n+}\n+\n+/// A single field of an enum variant or struct\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StructFieldData {\n+    pub name: Name,\n+    pub type_ref: TypeRef,\n+}\n+\n+impl StructData {\n+    pub(crate) fn struct_data_query(db: &impl DefDatabase2, struct_: StructId) -> Arc<StructData> {\n+        let src = struct_.source(db);\n+        let name = src.ast.name().map(|n| n.as_name());\n+        let variant_data = VariantData::new(src.ast.kind());\n+        let variant_data = Arc::new(variant_data);\n+        Arc::new(StructData { name, variant_data })\n+    }\n+}\n+\n+impl EnumData {\n+    pub(crate) fn enum_data_query(db: &impl DefDatabase2, e: EnumId) -> Arc<EnumData> {\n+        let src = e.source(db);\n+        let name = src.ast.name().map(|n| n.as_name());\n+        let variants = src\n+            .ast\n+            .variant_list()\n+            .into_iter()\n+            .flat_map(|it| it.variants())\n+            .map(|var| EnumVariantData {\n+                name: var.name().map(|it| it.as_name()),\n+                variant_data: Arc::new(VariantData::new(var.kind())),\n+            })\n+            .collect();\n+        Arc::new(EnumData { name, variants })\n+    }\n+}\n+\n+impl VariantData {\n+    fn new(flavor: ast::StructKind) -> Self {\n+        let inner = match flavor {\n+            ast::StructKind::Tuple(fl) => {\n+                let fields = fl\n+                    .fields()\n+                    .enumerate()\n+                    .map(|(i, fd)| StructFieldData {\n+                        name: Name::new_tuple_field(i),\n+                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n+                    })\n+                    .collect();\n+                VariantDataInner::Tuple(fields)\n+            }\n+            ast::StructKind::Named(fl) => {\n+                let fields = fl\n+                    .fields()\n+                    .map(|fd| StructFieldData {\n+                        name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n+                        type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n+                    })\n+                    .collect();\n+                VariantDataInner::Struct(fields)\n+            }\n+            ast::StructKind::Unit => VariantDataInner::Unit,\n+        };\n+        VariantData(inner)\n+    }\n+\n+    pub fn fields(&self) -> Option<&Arena<LocalStructFieldId, StructFieldData>> {\n+        match &self.0 {\n+            VariantDataInner::Struct(fields) | VariantDataInner::Tuple(fields) => Some(fields),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "f6027013f2a8e451ec978a4dc424ebb89c2b6fe5", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -5,7 +5,11 @@ use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, SourceDatabase};\n use ra_syntax::ast;\n \n-use crate::nameres::raw::{ImportSourceMap, RawItems};\n+use crate::{\n+    adt::{EnumData, StructData},\n+    nameres::raw::{ImportSourceMap, RawItems},\n+    EnumId, StructId,\n+};\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n@@ -37,4 +41,10 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n+\n+    #[salsa::invoke(StructData::struct_data_query)]\n+    fn struct_data(&self, s: StructId) -> Arc<StructData>;\n+\n+    #[salsa::invoke(EnumData::enum_data_query)]\n+    fn enum_data(&self, e: EnumId) -> Arc<EnumData>;\n }"}, {"sha": "76d5f18522bc685ccb09c65cb151cce293aac959", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f9733ca67b74057c55b6e96f38223a73db6a6e/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=09f9733ca67b74057c55b6e96f38223a73db6a6e", "patch": "@@ -12,6 +12,7 @@ pub mod attr;\n pub mod path;\n pub mod type_ref;\n pub mod builtin_type;\n+pub mod adt;\n \n // FIXME: this should be private\n pub mod nameres;\n@@ -259,6 +260,22 @@ pub struct EnumVariantId {\n pub struct LocalEnumVariantId(RawId);\n impl_arena_id!(LocalEnumVariantId);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum VariantId {\n+    EnumVariantId(EnumVariantId),\n+    StructId(StructId),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct StructFieldId {\n+    parent: VariantId,\n+    local_id: LocalStructFieldId,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LocalStructFieldId(RawId);\n+impl_arena_id!(LocalStructFieldId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);"}]}