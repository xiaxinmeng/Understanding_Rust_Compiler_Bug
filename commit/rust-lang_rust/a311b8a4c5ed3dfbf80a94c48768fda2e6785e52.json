{"sha": "a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "node_id": "C_kwDOAAsO6NoAKGEzMTFiOGE0YzVlZDNkZmJmODBhOTRjNDg3NjhmZGEyZTY3ODVlNTI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-20T10:35:17Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-20T10:35:17Z"}, "message": "use more descriptive names", "tree": {"sha": "b50ef915b9b5db31d4f37dab4f25f527aaff04ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50ef915b9b5db31d4f37dab4f25f527aaff04ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "html_url": "https://github.com/rust-lang/rust/commit/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b3e4af2031fb2faf3330ab01c27ae084412079", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b3e4af2031fb2faf3330ab01c27ae084412079", "html_url": "https://github.com/rust-lang/rust/commit/64b3e4af2031fb2faf3330ab01c27ae084412079"}], "stats": {"total": 188, "additions": 95, "deletions": 93}, "files": [{"sha": "ffc4f8cf3d3b3d7a2d34d7c7d090924ddb5a0188", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 95, "deletions": 93, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "patch": "@@ -908,111 +908,113 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let param_env = obligation.param_env;\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |old_pred: ty::PolyTraitPredicate<'tcx>,\n-                                 blacklist: &[DefId]|\n-         -> bool {\n-            if blacklist.contains(&old_pred.def_id()) {\n-                return false;\n-            }\n-            // We map bounds to `&T` and `&mut T`\n-            let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n-                (\n-                    trait_pred,\n-                    self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                )\n-            });\n-            let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n-                (\n-                    trait_pred,\n-                    self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                )\n-            });\n+        let mut try_borrowing =\n+            |old_pred: ty::PolyTraitPredicate<'tcx>, blacklist: &[DefId]| -> bool {\n+                if blacklist.contains(&old_pred.def_id()) {\n+                    return false;\n+                }\n+                // We map bounds to `&T` and `&mut T`\n+                let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n+                    (\n+                        trait_pred,\n+                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                    )\n+                });\n+                let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n+                    (\n+                        trait_pred,\n+                        self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                    )\n+                });\n \n-            let mk_result = |trait_pred_and_new_ty| {\n-                let obligation =\n-                    self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n-                self.predicate_must_hold_modulo_regions(&obligation)\n-            };\n-            let imm_result = mk_result(trait_pred_and_imm_ref);\n-            let mut_result = mk_result(trait_pred_and_mut_ref);\n+                let mk_result = |trait_pred_and_new_ty| {\n+                    let obligation =\n+                        self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n+                    self.predicate_must_hold_modulo_regions(&obligation)\n+                };\n+                let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n+                let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n \n-            let ref_inner_ty_result =\n+                let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n                 if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code()\n                     && let ty::Ref(_, ty, mutability) = old_pred.self_ty().skip_binder().kind()\n                 {\n-                    Some((mk_result(old_pred.map_bound(|trait_pred| (trait_pred, *ty))), mutability))\n+                    (\n+                        mk_result(old_pred.map_bound(|trait_pred| (trait_pred, *ty))),\n+                        matches!(mutability, hir::Mutability::Mut),\n+                    )\n                 } else {\n-                    None\n+                    (false, false)\n                 };\n \n-            if imm_result || mut_result || ref_inner_ty_result.map_or(false, |(result, _)| result) {\n-                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    // We have a very specific type of error, where just borrowing this argument\n-                    // might solve the problem. In cases like this, the important part is the\n-                    // original type obligation, not the last one that failed, which is arbitrary.\n-                    // Because of this, we modify the error to refer to the original obligation and\n-                    // return early in the caller.\n-\n-                    let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n-                    if has_custom_message {\n-                        err.note(&msg);\n-                    } else {\n-                        err.message =\n-                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n-                    }\n-                    if snippet.starts_with('&') {\n-                        // This is already a literal borrow and the obligation is failing\n-                        // somewhere else in the obligation chain. Do not suggest non-sense.\n-                        return false;\n-                    }\n-                    err.span_label(\n-                        span,\n-                        &format!(\n-                            \"expected an implementor of trait `{}`\",\n-                            old_pred.print_modifiers_and_trait_path(),\n-                        ),\n-                    );\n-\n-                    // This if is to prevent a special edge-case\n-                    if matches!(\n-                        span.ctxt().outer_expn_data().kind,\n-                        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n-                    ) {\n-                        // We don't want a borrowing suggestion on the fields in structs,\n-                        // ```\n-                        // struct Foo {\n-                        //  the_foos: Vec<Foo>\n-                        // }\n-                        // ```\n-\n-                        if imm_result && mut_result {\n-                            err.span_suggestions(\n-                                span.shrink_to_lo(),\n-                                \"consider borrowing here\",\n-                                [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                if imm_ref_self_ty_satisfies_pred\n+                    || mut_ref_self_ty_satisfies_pred\n+                    || ref_inner_ty_satisfies_pred\n+                {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        // We have a very specific type of error, where just borrowing this argument\n+                        // might solve the problem. In cases like this, the important part is the\n+                        // original type obligation, not the last one that failed, which is arbitrary.\n+                        // Because of this, we modify the error to refer to the original obligation and\n+                        // return early in the caller.\n+\n+                        let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n+                        if has_custom_message {\n+                            err.note(&msg);\n                         } else {\n-                            let is_mut = mut_result\n-                                || ref_inner_ty_result.map_or(false, |(_, mutabl)| {\n-                                    matches!(mutabl, hir::Mutability::Mut)\n-                                });\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider{} borrowing here\",\n-                                    if is_mut { \" mutably\" } else { \"\" }\n-                                ),\n-                                format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                            err.message =\n+                                vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n                         }\n+                        if snippet.starts_with('&') {\n+                            // This is already a literal borrow and the obligation is failing\n+                            // somewhere else in the obligation chain. Do not suggest non-sense.\n+                            return false;\n+                        }\n+                        err.span_label(\n+                            span,\n+                            &format!(\n+                                \"expected an implementor of trait `{}`\",\n+                                old_pred.print_modifiers_and_trait_path(),\n+                            ),\n+                        );\n+\n+                        // This if is to prevent a special edge-case\n+                        if matches!(\n+                            span.ctxt().outer_expn_data().kind,\n+                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n+                        ) {\n+                            // We don't want a borrowing suggestion on the fields in structs,\n+                            // ```\n+                            // struct Foo {\n+                            //  the_foos: Vec<Foo>\n+                            // }\n+                            // ```\n+\n+                            if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n+                                err.span_suggestions(\n+                                    span.shrink_to_lo(),\n+                                    \"consider borrowing here\",\n+                                    [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            } else {\n+                                let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    &format!(\n+                                        \"consider{} borrowing here\",\n+                                        if is_mut { \" mutably\" } else { \"\" }\n+                                    ),\n+                                    format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                        return true;\n                     }\n-                    return true;\n                 }\n-            }\n-            return false;\n-        };\n+                return false;\n+            };\n \n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])"}]}