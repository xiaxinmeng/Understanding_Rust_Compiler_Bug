{"sha": "3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzBlZjc4MThiOWVkNTYyZjJjNDhmM2Q2ZDE1ZDkwMjUzYWU3MzI=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-07T13:17:31Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-07T14:46:43Z"}, "message": "Restrict `same_item_push` to suppress false positives\n\nIt emits a lint when the pushed item is a literal, a constant and an immutable binding that are initialized with those.", "tree": {"sha": "633a12a07627d804d14e76ba8d3cde079fc29ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633a12a07627d804d14e76ba8d3cde079fc29ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "html_url": "https://github.com/rust-lang/rust/commit/3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daad592fac4b9f582f0dfeb1c0ca5874b2a0b111", "url": "https://api.github.com/repos/rust-lang/rust/commits/daad592fac4b9f582f0dfeb1c0ca5874b2a0b111", "html_url": "https://github.com/rust-lang/rust/commit/daad592fac4b9f582f0dfeb1c0ca5874b2a0b111"}], "stats": {"total": 130, "additions": 97, "deletions": 33}, "files": [{"sha": "f417e3a0caf9519cce8dad106c002cc0aea50ed3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "patch": "@@ -1153,27 +1153,70 @@ fn detect_same_item_push<'tcx>(\n                     let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n                     let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n                     if let ExprKind::Path(ref qpath) = pushed_item.kind {\n-                        if_chain! {\n-                            if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id);\n-                            let node = cx.tcx.hir().get(hir_id);\n-                            if let Node::Binding(pat) = node;\n-                            if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                            if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n-                            then {\n-                                span_lint_and_help(\n-                                    cx,\n-                                    SAME_ITEM_PUSH,\n-                                    vec.span,\n-                                    \"it looks like the same item is being pushed into this Vec\",\n-                                    None,\n-                                    &format!(\n-                                        \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                        item_str, vec_str, item_str\n-                                    ),\n-                                )\n-                            }\n+                        match qpath_res(cx, qpath, pushed_item.hir_id) {\n+                            // immutable bindings that are initialized with literal or constant\n+                            Res::Local(hir_id) => {\n+                                if_chain! {\n+                                    let node = cx.tcx.hir().get(hir_id);\n+                                    if let Node::Binding(pat) = node;\n+                                    if let PatKind::Binding(bind_ann, ..) = pat.kind;\n+                                    if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n+                                    let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n+                                    if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n+                                    if let rustc_hir::Local { init: Some(init), .. } = parent_let_expr;\n+                                    then {\n+                                        match init.kind {\n+                                            // immutable bindings that are initialized with literal\n+                                            ExprKind::Lit(..) => {\n+                                                span_lint_and_help(\n+                                                    cx,\n+                                                    SAME_ITEM_PUSH,\n+                                                    vec.span,\n+                                                    \"it looks like the same item is being pushed into this Vec\",\n+                                                    None,\n+                                                    &format!(\n+                                                        \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                                        item_str, vec_str, item_str\n+                                                    ),\n+                                                )\n+                                            },\n+                                            // immutable bindings that are initialized with constant\n+                                            ExprKind::Path(ref path) => {\n+                                                if let Res::Def(DefKind::Const, ..) = qpath_res(cx, path, init.hir_id) {\n+                                                    span_lint_and_help(\n+                                                        cx,\n+                                                        SAME_ITEM_PUSH,\n+                                                        vec.span,\n+                                                        \"it looks like the same item is being pushed into this Vec\",\n+                                                        None,\n+                                                        &format!(\n+                                                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                                            item_str, vec_str, item_str\n+                                                        ),\n+                                                    )\n+                                                }\n+                                            }\n+                                            _ => {},\n+                                        }\n+                                    }\n+                                }\n+                            },\n+                            // constant\n+                            Res::Def(DefKind::Const, ..) => span_lint_and_help(\n+                                cx,\n+                                SAME_ITEM_PUSH,\n+                                vec.span,\n+                                \"it looks like the same item is being pushed into this Vec\",\n+                                None,\n+                                &format!(\n+                                    \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                    item_str, vec_str, item_str\n+                                ),\n+                            ),\n+                            _ => {},\n                         }\n-                    } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n+                    } else if let ExprKind::Lit(..) = pushed_item.kind {\n+                        // literal\n                         span_lint_and_help(\n                             cx,\n                             SAME_ITEM_PUSH,"}, {"sha": "bd4792c4a76be858aa1ce827670d7b79eca2767e", "filename": "tests/ui/same_item_push.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "patch": "@@ -1,5 +1,7 @@\n #![warn(clippy::same_item_push)]\n \n+const VALUE: u8 = 7;\n+\n fn mutate_increment(x: &mut u8) -> u8 {\n     *x += 1;\n     *x\n@@ -111,4 +113,15 @@ fn main() {\n     for _ in 0..10 {\n         vec15.push(Box::new(S {}));\n     }\n+\n+    let mut vec16 = Vec::new();\n+    for _ in 0..20 {\n+        vec16.push(VALUE);\n+    }\n+\n+    let mut vec17 = Vec::new();\n+    let item = VALUE;\n+    for _ in 0..20 {\n+        vec17.push(item);\n+    }\n }"}, {"sha": "4896479791af4e9de4cd0ba420ec9dc09ffd94a6", "filename": "tests/ui/same_item_push.stderr", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/tests%2Fui%2Fsame_item_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d30ef7818b9ed562f2c48f3d6d15d90253ae732/tests%2Fui%2Fsame_item_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.stderr?ref=3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "patch": "@@ -1,35 +1,43 @@\n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:16:9\n-   |\n-LL |         spaces.push(vec![b' ']);\n-   |         ^^^^^^\n-   |\n-   = note: `-D clippy::same-item-push` implied by `-D warnings`\n-   = help: try using vec![vec![b' '];SIZE] or spaces.resize(NEW_SIZE, vec![b' '])\n-\n-error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:22:9\n+  --> $DIR/same_item_push.rs:24:9\n    |\n LL |         vec2.push(item);\n    |         ^^^^\n    |\n+   = note: `-D clippy::same-item-push` implied by `-D warnings`\n    = help: try using vec![item;SIZE] or vec2.resize(NEW_SIZE, item)\n \n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:28:9\n+  --> $DIR/same_item_push.rs:30:9\n    |\n LL |         vec3.push(item);\n    |         ^^^^\n    |\n    = help: try using vec![item;SIZE] or vec3.resize(NEW_SIZE, item)\n \n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:33:9\n+  --> $DIR/same_item_push.rs:35:9\n    |\n LL |         vec4.push(13);\n    |         ^^^^\n    |\n    = help: try using vec![13;SIZE] or vec4.resize(NEW_SIZE, 13)\n \n-error: aborting due to 4 previous errors\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:119:9\n+   |\n+LL |         vec16.push(VALUE);\n+   |         ^^^^^\n+   |\n+   = help: try using vec![VALUE;SIZE] or vec16.resize(NEW_SIZE, VALUE)\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:125:9\n+   |\n+LL |         vec17.push(item);\n+   |         ^^^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec17.resize(NEW_SIZE, item)\n+\n+error: aborting due to 5 previous errors\n "}]}