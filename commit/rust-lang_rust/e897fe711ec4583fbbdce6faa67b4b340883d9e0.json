{"sha": "e897fe711ec4583fbbdce6faa67b4b340883d9e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTdmZTcxMWVjNDU4M2ZiYmRjZTZmYWE2N2I0YjM0MDg4M2Q5ZTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T10:25:06Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:06:33Z"}, "message": "Rollup merge of #55301 - estebank:macro-allowed, r=petrochenkov\n\nList allowed tokens after macro fragments\n\nFix #34069.", "tree": {"sha": "6e5929622f34ad00c8ffa9fdc672476954689425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5929622f34ad00c8ffa9fdc672476954689425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e897fe711ec4583fbbdce6faa67b4b340883d9e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvTLXkACgkQ/vbIBR0O\nATwrbxAAv9yzOMuFCPlzEMDVzy7+1e5bzxcpWQnw+txiqv7hZ4pWoT+u/tUmXzoW\nX4tvROWMWhpHlwDkQ4Wkk3P1rafzRrhiZYUFoJWgdtbKU4pCnYQyz+KiDP2vM+vY\nACc7kqIk4onm3oorjo8v4eLyJI+4r4El0ynyjJsubk+8iQlTRr86Mdpwr98MZGQJ\n8xoL+l+lt2HUBWkAyVTH/LxaJYVOvEAKVomo3zb7A7ZmV41AhYTkaY5U5+4ztQb0\n8xzcG1/Ga2emI0700492rOmJZoSMf/fOKn7vzDAiQvrqHw3qkVjjELtOxnfwJtX4\nyUFV7AakN9zSU1zVNpfKEpcBl3UqNi89u7zrcAnT3fgmaBJnAnH60F1VQgohy6gZ\n8dZfuyVbHzJM1KTcqLbLcyASpnMih2XtI2VDw3StMWWfPgd0NorqMggT2BwEz/OB\nDRQY8g7xk1oL24ywawfIwS1BO7fHb5irxG60d1He2ZwOPNCfq8fJvGK4Y2M1Mk+0\n94lINXT7NTx55+9zM1TUvDJPkWqRLw1MbW6ScA+38QKV9bbmd/FFh2SUkQmMEYyO\n6vF3TnHftUBX04I+SdOyX45BUAoOES1270EVX+1T8sjwriZwg9D6ihi4VgBY++0O\npx5JgryXVd5xWBS01kloCofOQ2KesPsEgo3pOf8LWw92RodcFZs=\n=2njh\n-----END PGP SIGNATURE-----", "payload": "tree 6e5929622f34ad00c8ffa9fdc672476954689425\nparent eb74711b5444a10a7a10570a3c206ccee656850e\nparent 2cfd79017744aa55abdd470b93bc544685644612\nauthor kennytm <kennytm@gmail.com> 1540549506 +0800\ncommitter kennytm <kennytm@gmail.com> 1540566393 +0800\n\nRollup merge of #55301 - estebank:macro-allowed, r=petrochenkov\n\nList allowed tokens after macro fragments\n\nFix #34069.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e897fe711ec4583fbbdce6faa67b4b340883d9e0", "html_url": "https://github.com/rust-lang/rust/commit/e897fe711ec4583fbbdce6faa67b4b340883d9e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e897fe711ec4583fbbdce6faa67b4b340883d9e0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb74711b5444a10a7a10570a3c206ccee656850e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb74711b5444a10a7a10570a3c206ccee656850e", "html_url": "https://github.com/rust-lang/rust/commit/eb74711b5444a10a7a10570a3c206ccee656850e"}, {"sha": "2cfd79017744aa55abdd470b93bc544685644612", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfd79017744aa55abdd470b93bc544685644612", "html_url": "https://github.com/rust-lang/rust/commit/2cfd79017744aa55abdd470b93bc544685644612"}], "stats": {"total": 526, "additions": 385, "deletions": 141}, "files": [{"sha": "f298d626cd833656b03aab1989e65c3558a92642", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 94, "deletions": 44, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=e897fe711ec4583fbbdce6faa67b4b340883d9e0", "patch": "@@ -808,15 +808,15 @@ fn check_matcher_core(sess: &ParseSess,\n             if let TokenTree::MetaVarDecl(_, ref name, ref frag_spec) = *token {\n                 for next_token in &suffix_first.tokens {\n                     match is_in_follow(next_token, &frag_spec.as_str()) {\n-                        Err((msg, help)) => {\n+                        IsInFollow::Invalid(msg, help) => {\n                             sess.span_diagnostic.struct_span_err(next_token.span(), &msg)\n                                 .help(help).emit();\n                             // don't bother reporting every source of\n                             // conflict for a particular element of `last`.\n                             continue 'each_last;\n                         }\n-                        Ok(true) => {}\n-                        Ok(false) => {\n+                        IsInFollow::Yes => {}\n+                        IsInFollow::No(ref possible) => {\n                             let may_be = if last.tokens.len() == 1 &&\n                                 suffix_first.tokens.len() == 1\n                             {\n@@ -825,15 +825,41 @@ fn check_matcher_core(sess: &ParseSess,\n                                 \"may be\"\n                             };\n \n-                            sess.span_diagnostic.span_err(\n-                                next_token.span(),\n+                            let sp = next_token.span();\n+                            let mut err = sess.span_diagnostic.struct_span_err(\n+                                sp,\n                                 &format!(\"`${name}:{frag}` {may_be} followed by `{next}`, which \\\n                                           is not allowed for `{frag}` fragments\",\n                                          name=name,\n                                          frag=frag_spec,\n                                          next=quoted_tt_to_string(next_token),\n-                                         may_be=may_be)\n+                                         may_be=may_be),\n                             );\n+                            err.span_label(\n+                                sp,\n+                                format!(\"not allowed after `{}` fragments\", frag_spec),\n+                            );\n+                            let msg = \"allowed there are: \";\n+                            match &possible[..] {\n+                                &[] => {}\n+                                &[t] => {\n+                                    err.note(&format!(\n+                                        \"only {} is allowed after `{}` fragments\",\n+                                        t,\n+                                        frag_spec,\n+                                    ));\n+                                }\n+                                ts => {\n+                                    err.note(&format!(\n+                                        \"{}{} or {}\",\n+                                        msg,\n+                                        ts[..ts.len() - 1].iter().map(|s| *s)\n+                                            .collect::<Vec<_>>().join(\", \"),\n+                                        ts[ts.len() - 1],\n+                                    ));\n+                                }\n+                            }\n+                            err.emit();\n                         }\n                     }\n                 }\n@@ -876,6 +902,12 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n     }\n }\n \n+enum IsInFollow {\n+    Yes,\n+    No(Vec<&'static str>),\n+    Invalid(String, &'static str),\n+}\n+\n /// True if `frag` can legally be followed by the token `tok`. For\n /// fragments that can consume an unbounded number of tokens, `tok`\n /// must be within a well-defined follow set. This is intended to\n@@ -884,81 +916,99 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n /// break macros that were relying on that binary operator as a\n /// separator.\n // when changing this do not forget to update doc/book/macros.md!\n-fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'static str)> {\n+fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n     use self::quoted::TokenTree;\n \n     if let TokenTree::Token(_, token::CloseDelim(_)) = *tok {\n         // closing a token tree can never be matched by any fragment;\n         // iow, we always require that `(` and `)` match, etc.\n-        Ok(true)\n+        IsInFollow::Yes\n     } else {\n         match frag {\n             \"item\" => {\n                 // since items *must* be followed by either a `;` or a `}`, we can\n                 // accept anything after them\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"block\" => {\n                 // anything can follow block, the braces provide an easy boundary to\n                 // maintain\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n-            \"stmt\" | \"expr\"  => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    FatArrow | Comma | Semi => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                _ => Ok(false),\n+            \"stmt\" | \"expr\"  => {\n+                let tokens = vec![\"`=>`\", \"`,`\", \"`;`\"];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        FatArrow | Comma | Semi => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n-            \"pat\" => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    FatArrow | Comma | Eq | BinOp(token::Or) => Ok(true),\n-                    Ident(i, false) if i.name == \"if\" || i.name == \"in\" => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                _ => Ok(false),\n+            \"pat\" => {\n+                let tokens = vec![\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        FatArrow | Comma | Eq | BinOp(token::Or) => IsInFollow::Yes,\n+                        Ident(i, false) if i.name == \"if\" || i.name == \"in\" => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n-            \"path\" | \"ty\" => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    OpenDelim(token::DelimToken::Brace) | OpenDelim(token::DelimToken::Bracket) |\n-                    Comma | FatArrow | Colon | Eq | Gt | BinOp(token::Shr) | Semi |\n-                    BinOp(token::Or) => Ok(true),\n-                    Ident(i, false) if i.name == \"as\" || i.name == \"where\" => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => Ok(true),\n-                _ => Ok(false),\n+            \"path\" | \"ty\" => {\n+                let tokens = vec![\n+                    \"`{`\", \"`[`\", \"`=>`\", \"`,`\", \"`>`\",\"`=`\", \"`:`\", \"`;`\", \"`|`\", \"`as`\",\n+                    \"`where`\",\n+                ];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        OpenDelim(token::DelimToken::Brace) |\n+                        OpenDelim(token::DelimToken::Bracket) |\n+                        Comma | FatArrow | Colon | Eq | Gt | BinOp(token::Shr) | Semi |\n+                        BinOp(token::Or) => IsInFollow::Yes,\n+                        Ident(i, false) if i.name == \"as\" || i.name == \"where\" => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => IsInFollow::Yes,\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n             \"ident\" | \"lifetime\" => {\n                 // being a single token, idents and lifetimes are harmless\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"literal\" => {\n                 // literals may be of a single token, or two tokens (negative numbers)\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"meta\" | \"tt\" => {\n                 // being either a single token or a delimited sequence, tt is\n                 // harmless\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"vis\" => {\n                 // Explicitly disallow `priv`, on the off chance it comes back.\n+                let tokens = vec![\"`,`\", \"an ident\", \"a type\"];\n                 match *tok {\n                     TokenTree::Token(_, ref tok) => match *tok {\n-                        Comma => Ok(true),\n-                        Ident(i, is_raw) if is_raw || i.name != \"priv\" => Ok(true),\n-                        ref tok => Ok(tok.can_begin_type())\n+                        Comma => IsInFollow::Yes,\n+                        Ident(i, is_raw) if is_raw || i.name != \"priv\" => IsInFollow::Yes,\n+                        ref tok => if tok.can_begin_type() {\n+                            IsInFollow::Yes\n+                        } else {\n+                            IsInFollow::No(tokens)\n+                        }\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"ident\"\n                                                        || frag.name == \"ty\"\n-                                                       || frag.name == \"path\" => Ok(true),\n-                    _ => Ok(false)\n+                                                       || frag.name == \"path\" => IsInFollow::Yes,\n+                    _ => IsInFollow::No(tokens),\n                 }\n             },\n-            \"\" => Ok(true), // keywords::Invalid\n-            _ => Err((format!(\"invalid fragment specifier `{}`\", frag),\n-                     VALID_FRAGMENT_NAMES_MSG))\n+            \"\" => IsInFollow::Yes, // keywords::Invalid\n+            _ => IsInFollow::Invalid(format!(\"invalid fragment specifier `{}`\", frag),\n+                                     VALID_FRAGMENT_NAMES_MSG),\n         }\n     }\n }"}, {"sha": "8760f6eb572e38973410f6e08dc07706c07da62e", "filename": "src/test/ui/macros/macro-follow.stderr", "status": "modified", "additions": 255, "deletions": 85, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr?ref=e897fe711ec4583fbbdce6faa67b4b340883d9e0", "patch": "@@ -2,511 +2,681 @@ error: `$p:pat` is followed by `(`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:17:14\n    |\n LL |     ($p:pat ()) => {};       //~ERROR  `$p:pat` is followed by `(`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `[`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:18:14\n    |\n LL |     ($p:pat []) => {};       //~ERROR  `$p:pat` is followed by `[`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `{`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:19:14\n    |\n LL |     ($p:pat {}) => {};       //~ERROR  `$p:pat` is followed by `{`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `:`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:20:13\n    |\n LL |     ($p:pat :) => {};        //~ERROR `$p:pat` is followed by `:`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `>`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:21:13\n    |\n LL |     ($p:pat >) => {};        //~ERROR `$p:pat` is followed by `>`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `+`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:22:13\n    |\n LL |     ($p:pat +) => {};        //~ERROR `$p:pat` is followed by `+`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `ident`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:23:13\n    |\n LL |     ($p:pat ident) => {};    //~ERROR `$p:pat` is followed by `ident`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$p:pat`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:24:13\n    |\n LL |     ($p:pat $p:pat) => {};   //~ERROR `$p:pat` is followed by `$p:pat`\n-   |             ^^^^^^\n+   |             ^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$e:expr`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:25:13\n    |\n LL |     ($p:pat $e:expr) => {};  //~ERROR `$p:pat` is followed by `$e:expr`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$t:ty`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:26:13\n    |\n LL |     ($p:pat $t:ty) => {};    //~ERROR `$p:pat` is followed by `$t:ty`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$s:stmt`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:27:13\n    |\n LL |     ($p:pat $s:stmt) => {};  //~ERROR `$p:pat` is followed by `$s:stmt`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$p:path`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:28:13\n    |\n LL |     ($p:pat $p:path) => {};  //~ERROR `$p:pat` is followed by `$p:path`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$b:block`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:29:13\n    |\n LL |     ($p:pat $b:block) => {}; //~ERROR `$p:pat` is followed by `$b:block`\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$i:ident`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:30:13\n    |\n LL |     ($p:pat $i:ident) => {}; //~ERROR `$p:pat` is followed by `$i:ident`\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$t:tt`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:31:13\n    |\n LL |     ($p:pat $t:tt) => {};    //~ERROR `$p:pat` is followed by `$t:tt`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$i:item`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:32:13\n    |\n LL |     ($p:pat $i:item) => {};  //~ERROR `$p:pat` is followed by `$i:item`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$m:meta`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:33:13\n    |\n LL |     ($p:pat $m:meta) => {};  //~ERROR `$p:pat` is followed by `$m:meta`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$e:expr` is followed by `(`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:37:15\n    |\n LL |     ($e:expr ()) => {};       //~ERROR  `$e:expr` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `[`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:38:15\n    |\n LL |     ($e:expr []) => {};       //~ERROR  `$e:expr` is followed by `[`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `{`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:39:15\n    |\n LL |     ($e:expr {}) => {};       //~ERROR  `$e:expr` is followed by `{`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `=`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:40:14\n    |\n LL |     ($e:expr =) => {};        //~ERROR `$e:expr` is followed by `=`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `|`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:41:14\n    |\n LL |     ($e:expr |) => {};        //~ERROR `$e:expr` is followed by `|`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `:`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:42:14\n    |\n LL |     ($e:expr :) => {};        //~ERROR `$e:expr` is followed by `:`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `>`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:43:14\n    |\n LL |     ($e:expr >) => {};        //~ERROR `$e:expr` is followed by `>`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `+`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:44:14\n    |\n LL |     ($e:expr +) => {};        //~ERROR `$e:expr` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `ident`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:45:14\n    |\n LL |     ($e:expr ident) => {};    //~ERROR `$e:expr` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `if`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:46:14\n    |\n LL |     ($e:expr if) => {};       //~ERROR `$e:expr` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `in`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:47:14\n    |\n LL |     ($e:expr in) => {};       //~ERROR `$e:expr` is followed by `in`\n-   |              ^^\n+   |              ^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$p:pat`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:48:14\n    |\n LL |     ($e:expr $p:pat) => {};   //~ERROR `$e:expr` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$e:expr`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:49:14\n    |\n LL |     ($e:expr $e:expr) => {};  //~ERROR `$e:expr` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$t:ty`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:50:14\n    |\n LL |     ($e:expr $t:ty) => {};    //~ERROR `$e:expr` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$s:stmt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:51:14\n    |\n LL |     ($e:expr $s:stmt) => {};  //~ERROR `$e:expr` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$p:path`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:52:14\n    |\n LL |     ($e:expr $p:path) => {};  //~ERROR `$e:expr` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$b:block`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:53:14\n    |\n LL |     ($e:expr $b:block) => {}; //~ERROR `$e:expr` is followed by `$b:block`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$i:ident`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:54:14\n    |\n LL |     ($e:expr $i:ident) => {}; //~ERROR `$e:expr` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$t:tt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:55:14\n    |\n LL |     ($e:expr $t:tt) => {};    //~ERROR `$e:expr` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$i:item`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:56:14\n    |\n LL |     ($e:expr $i:item) => {};  //~ERROR `$e:expr` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$m:meta`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:57:14\n    |\n LL |     ($e:expr $m:meta) => {};  //~ERROR `$e:expr` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$t:ty` is followed by `(`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:62:13\n    |\n LL |     ($t:ty ()) => {};       //~ERROR  `$t:ty` is followed by `(`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `+`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:64:12\n    |\n LL |     ($t:ty +) => {};        //~ERROR `$t:ty` is followed by `+`\n-   |            ^\n+   |            ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `ident`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:65:12\n    |\n LL |     ($t:ty ident) => {};    //~ERROR `$t:ty` is followed by `ident`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `if`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:66:12\n    |\n LL |     ($t:ty if) => {};       //~ERROR `$t:ty` is followed by `if`\n-   |            ^^\n+   |            ^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$p:pat`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:67:12\n    |\n LL |     ($t:ty $p:pat) => {};   //~ERROR `$t:ty` is followed by `$p:pat`\n-   |            ^^^^^^\n+   |            ^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$e:expr`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:68:12\n    |\n LL |     ($t:ty $e:expr) => {};  //~ERROR `$t:ty` is followed by `$e:expr`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$t:ty`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:69:12\n    |\n LL |     ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$s:stmt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:70:12\n    |\n LL |     ($t:ty $s:stmt) => {};  //~ERROR `$t:ty` is followed by `$s:stmt`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$p:path`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:71:12\n    |\n LL |     ($t:ty $p:path) => {};  //~ERROR `$t:ty` is followed by `$p:path`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$i:ident`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:73:12\n    |\n LL |     ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n-   |            ^^^^^^^^\n+   |            ^^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$t:tt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:74:12\n    |\n LL |     ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$i:item`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:75:12\n    |\n LL |     ($t:ty $i:item) => {};  //~ERROR `$t:ty` is followed by `$i:item`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$m:meta`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:76:12\n    |\n LL |     ($t:ty $m:meta) => {};  //~ERROR `$t:ty` is followed by `$m:meta`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$s:stmt` is followed by `(`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:80:15\n    |\n LL |     ($s:stmt ()) => {};       //~ERROR  `$s:stmt` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `[`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:81:15\n    |\n LL |     ($s:stmt []) => {};       //~ERROR  `$s:stmt` is followed by `[`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `{`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:82:15\n    |\n LL |     ($s:stmt {}) => {};       //~ERROR  `$s:stmt` is followed by `{`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `=`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:83:14\n    |\n LL |     ($s:stmt =) => {};        //~ERROR `$s:stmt` is followed by `=`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `|`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:84:14\n    |\n LL |     ($s:stmt |) => {};        //~ERROR `$s:stmt` is followed by `|`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `:`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:85:14\n    |\n LL |     ($s:stmt :) => {};        //~ERROR `$s:stmt` is followed by `:`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `>`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:86:14\n    |\n LL |     ($s:stmt >) => {};        //~ERROR `$s:stmt` is followed by `>`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `+`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:87:14\n    |\n LL |     ($s:stmt +) => {};        //~ERROR `$s:stmt` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `ident`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:88:14\n    |\n LL |     ($s:stmt ident) => {};    //~ERROR `$s:stmt` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `if`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:89:14\n    |\n LL |     ($s:stmt if) => {};       //~ERROR `$s:stmt` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `in`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:90:14\n    |\n LL |     ($s:stmt in) => {};       //~ERROR `$s:stmt` is followed by `in`\n-   |              ^^\n+   |              ^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$p:pat`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:91:14\n    |\n LL |     ($s:stmt $p:pat) => {};   //~ERROR `$s:stmt` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$e:expr`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:92:14\n    |\n LL |     ($s:stmt $e:expr) => {};  //~ERROR `$s:stmt` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$t:ty`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:93:14\n    |\n LL |     ($s:stmt $t:ty) => {};    //~ERROR `$s:stmt` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$s:stmt`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:94:14\n    |\n LL |     ($s:stmt $s:stmt) => {};  //~ERROR `$s:stmt` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$p:path`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:95:14\n    |\n LL |     ($s:stmt $p:path) => {};  //~ERROR `$s:stmt` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$b:block`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:96:14\n    |\n LL |     ($s:stmt $b:block) => {}; //~ERROR `$s:stmt` is followed by `$b:block`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$i:ident`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:97:14\n    |\n LL |     ($s:stmt $i:ident) => {}; //~ERROR `$s:stmt` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$t:tt`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:98:14\n    |\n LL |     ($s:stmt $t:tt) => {};    //~ERROR `$s:stmt` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$i:item`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:99:14\n    |\n LL |     ($s:stmt $i:item) => {};  //~ERROR `$s:stmt` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$m:meta`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:100:14\n    |\n LL |     ($s:stmt $m:meta) => {};  //~ERROR `$s:stmt` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$p:path` is followed by `(`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:104:15\n    |\n LL |     ($p:path ()) => {};       //~ERROR  `$p:path` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `+`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:106:14\n    |\n LL |     ($p:path +) => {};        //~ERROR `$p:path` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `ident`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:107:14\n    |\n LL |     ($p:path ident) => {};    //~ERROR `$p:path` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `if`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:108:14\n    |\n LL |     ($p:path if) => {};       //~ERROR `$p:path` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$p:pat`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:109:14\n    |\n LL |     ($p:path $p:pat) => {};   //~ERROR `$p:path` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$e:expr`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:110:14\n    |\n LL |     ($p:path $e:expr) => {};  //~ERROR `$p:path` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$t:ty`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:111:14\n    |\n LL |     ($p:path $t:ty) => {};    //~ERROR `$p:path` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$s:stmt`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:112:14\n    |\n LL |     ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$p:path`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:113:14\n    |\n LL |     ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$i:ident`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:115:14\n    |\n LL |     ($p:path $i:ident) => {}; //~ERROR `$p:path` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$t:tt`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:116:14\n    |\n LL |     ($p:path $t:tt) => {};    //~ERROR `$p:path` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$i:item`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:117:14\n    |\n LL |     ($p:path $i:item) => {};  //~ERROR `$p:path` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$m:meta`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:118:14\n    |\n LL |     ($p:path $m:meta) => {};  //~ERROR `$p:path` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: aborting due to 85 previous errors\n "}, {"sha": "2ad8990e1156f85f33648d45c8eaf95f19a43ae0", "filename": "src/test/ui/macros/macro-followed-by-seq-bad.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr?ref=e897fe711ec4583fbbdce6faa67b4b340883d9e0", "patch": "@@ -2,13 +2,17 @@ error: `$a:expr` is followed by `$b:tt`, which is not allowed for `expr` fragmen\n   --> $DIR/macro-followed-by-seq-bad.rs:17:15\n    |\n LL |   ( $a:expr $($b:tt)* ) => { }; //~ ERROR not allowed for `expr` fragments\n-   |               ^^^^^\n+   |               ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$a:ty` is followed by `$b:tt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-followed-by-seq-bad.rs:18:13\n    |\n LL |   ( $a:ty $($b:tt)* ) => { };   //~ ERROR not allowed for `ty` fragments\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4bb46e39562cbf3207e9d25f1ef11c72a1bbda5d", "filename": "src/test/ui/macros/macro-input-future-proofing.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr?ref=e897fe711ec4583fbbdce6faa67b4b340883d9e0", "patch": "@@ -2,55 +2,73 @@ error: `$ty:ty` is followed by `<`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:14:13\n    |\n LL |     ($ty:ty <) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$ty:ty` is followed by `<`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:15:13\n    |\n LL |     ($ty:ty < foo ,) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$pa:pat` is followed by `>`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:21:14\n    |\n LL |     ($pa:pat >) => (); //~ ERROR `$pa:pat` is followed by `>`, which is not allowed for `pat`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$pa:pat` is followed by `$pb:pat`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:23:14\n    |\n LL |     ($pa:pat $pb:pat $ty:ty ,) => ();\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$pb:pat` is followed by `$ty:ty`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:23:22\n    |\n LL |     ($pa:pat $pb:pat $ty:ty ,) => ();\n-   |                      ^^^^^^\n+   |                      ^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$ty:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:26:17\n    |\n LL |     ($($ty:ty)* -) => (); //~ ERROR `$ty:ty` is followed by `-`\n-   |                 ^\n+   |                 ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$b:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:27:23\n    |\n LL |     ($($a:ty, $b:ty)* -) => (); //~ ERROR `$b:ty` is followed by `-`\n-   |                       ^\n+   |                       ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$ty:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:28:7\n    |\n LL |     ($($ty:ty)-+) => (); //~ ERROR `$ty:ty` is followed by `-`, which is not allowed for `ty`\n-   |       ^^^^^^^^\n+   |       ^^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$a:expr` is followed by `$b:tt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-input-future-proofing.rs:29:21\n    |\n LL |     ( $($a:expr)* $($b:tt)* ) => { };\n-   |                     ^^^^^\n+   |                     ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "78362fcb05a8ca46732bc3ca666439a2523eeaf8", "filename": "src/test/ui/unused/unused-macro-with-follow-violation.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e897fe711ec4583fbbdce6faa67b4b340883d9e0/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr?ref=e897fe711ec4583fbbdce6faa67b4b340883d9e0", "patch": "@@ -2,7 +2,9 @@ error: `$e:expr` is followed by `+`, which is not allowed for `expr` fragments\n   --> $DIR/unused-macro-with-follow-violation.rs:14:14\n    |\n LL |     ($e:expr +) => () //~ ERROR not allowed for `expr` fragments\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: aborting due to previous error\n "}]}