{"sha": "30e068f58b46d42b0e71b5112ceb2193f376ecc2", "node_id": "C_kwDOAAsO6NoAKDMwZTA2OGY1OGI0NmQ0MmIwZTcxYjUxMTJjZWIyMTkzZjM3NmVjYzI", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-08T03:26:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T03:26:15Z"}, "message": "Rollup merge of #89622 - m-ou-se:debug-assert-2021, r=estebank\n\nUse correct edition for panic in [debug_]assert!().\n\nSee https://github.com/rust-lang/rust/issues/88638#issuecomment-915472783", "tree": {"sha": "87a0b8e620cbce6d2a0880a6b84c6bac22cfcb41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a0b8e620cbce6d2a0880a6b84c6bac22cfcb41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30e068f58b46d42b0e71b5112ceb2193f376ecc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX7pXCRBK7hj4Ov3rIwAA6D0IAFyrJQUQc743VSUuwzr5Vva/\nmPe2kKRhoZ0wJAOS6GR9x+WXjNoy5mxb271Nv5PzrUCxXkWflSNPEDpq+z1hx1ZJ\nwfqAuEYUdyJ+Rss/0bBFIiDSWc539VRFdPlqh5dOrGoQf0skPT/82CJ69PiF4ro7\nb0rv6mNxbWvzuZUZmnuCDX8arrNXQ1nOytR38qQbazMW1Y3MhGmUqhPszNWxDsxy\nvQ2YuK7Gderw5n1En1G2WAw7AA5z4ZycJ9hxiI0Tw0mga1CQVDGWPuyOt7JxcjMo\nrEx7nuZMPukGftrYR+HNgOrKUB9spnyCWUVkW19TCMiilGiYcduy3BhL+4L6t5s=\n=DitD\n-----END PGP SIGNATURE-----\n", "payload": "tree 87a0b8e620cbce6d2a0880a6b84c6bac22cfcb41\nparent aed18018410ea09de7924938e15f877bc3df4a71\nparent fcd9fa9099569beba9c85c594ecbb9b07a1a7501\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633663575 -0700\ncommitter GitHub <noreply@github.com> 1633663575 -0700\n\nRollup merge of #89622 - m-ou-se:debug-assert-2021, r=estebank\n\nUse correct edition for panic in [debug_]assert!().\n\nSee https://github.com/rust-lang/rust/issues/88638#issuecomment-915472783\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30e068f58b46d42b0e71b5112ceb2193f376ecc2", "html_url": "https://github.com/rust-lang/rust/commit/30e068f58b46d42b0e71b5112ceb2193f376ecc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30e068f58b46d42b0e71b5112ceb2193f376ecc2/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed18018410ea09de7924938e15f877bc3df4a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed18018410ea09de7924938e15f877bc3df4a71", "html_url": "https://github.com/rust-lang/rust/commit/aed18018410ea09de7924938e15f877bc3df4a71"}, {"sha": "fcd9fa9099569beba9c85c594ecbb9b07a1a7501", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd9fa9099569beba9c85c594ecbb9b07a1a7501", "html_url": "https://github.com/rust-lang/rust/commit/fcd9fa9099569beba9c85c594ecbb9b07a1a7501"}], "stats": {"total": 152, "additions": 148, "deletions": 4}, "files": [{"sha": "1e2646e4d348faa5f72614ade0978ac7b01d988c", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -1,10 +1,10 @@\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n-\n+use crate::panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -28,7 +28,7 @@ pub fn expand_assert<'cx>(\n     let sp = cx.with_call_site_ctxt(span);\n \n     let panic_call = if let Some(tokens) = custom_message {\n-        let path = if span.rust_2021() {\n+        let path = if use_panic_2021(span) {\n             // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n                 span: sp,"}, {"sha": "54ab596bf3eb848739a86726afa6d805e3f973c9", "filename": "compiler/rustc_builtin_macros/src/panic.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -2,6 +2,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::*;\n use rustc_expand::base::*;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -19,7 +20,7 @@ pub fn expand_panic<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let panic = if sp.rust_2021() { sym::panic_2021 } else { sym::panic_2015 };\n+    let panic = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n \n     let sp = cx.with_call_site_ctxt(sp);\n \n@@ -46,3 +47,19 @@ pub fn expand_panic<'cx>(\n         ),\n     )\n }\n+\n+pub fn use_panic_2021(mut span: Span) -> bool {\n+    // To determine the editon, we check the first span up the expansion\n+    // stack that does not have #[allow_internal_unstable(edition_panic)].\n+    // (To avoid using the edition of e.g. the assert!() or debug_assert!() definition.)\n+    loop {\n+        let expn = span.ctxt().outer_expn_data();\n+        if let Some(features) = expn.allow_internal_unstable {\n+            if features.iter().any(|&f| f == sym::edition_panic) {\n+                span = expn.call_site;\n+                continue;\n+            }\n+        }\n+        break expn.edition >= Edition::Edition2021;\n+    }\n+}"}, {"sha": "0e30e154ee57c7d5d0abbd0e53c56260f4dacb28", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -570,6 +570,7 @@ symbols! {\n         dyn_metadata,\n         dyn_trait,\n         edition_macro_pats,\n+        edition_panic,\n         eh_catch_typeinfo,\n         eh_personality,\n         emit_enum,"}, {"sha": "5b3e988caa506cc61e8c74f069e30e9ca3711649", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -210,6 +210,7 @@ pub macro assert_matches {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"debug_assert_macro\"]\n+#[allow_internal_unstable(edition_panic)]\n macro_rules! debug_assert {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }"}, {"sha": "394fc3c8f8254c3e6fbe59979096a3a584aea278", "filename": "src/test/ui/rust-2021/panic.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -0,0 +1,24 @@\n+// edition:2021\n+\n+fn main() {\n+    debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+\n+    std::debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    std::assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    std::panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+\n+    core::debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    core::assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    core::panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+}"}, {"sha": "40b62d279a5098ed4ab65a74a6ab067c299ecbaf", "filename": "src/test/ui/rust-2021/panic.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/30e068f58b46d42b0e71b5112ceb2193f376ecc2/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30e068f58b46d42b0e71b5112ceb2193f376ecc2/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr?ref=30e068f58b46d42b0e71b5112ceb2193f376ecc2", "patch": "@@ -0,0 +1,101 @@\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:4:26\n+   |\n+LL |     debug_assert!(false, 123);\n+   |                          ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     debug_assert!(false, \"{}\", 123);\n+   |                          +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:6:20\n+   |\n+LL |     assert!(false, 123);\n+   |                    ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     assert!(false, \"{}\", 123);\n+   |                    +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:8:12\n+   |\n+LL |     panic!(false, 123);\n+   |            ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     panic!(\"{} {}\", false, 123);\n+   |            ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:11:31\n+   |\n+LL |     std::debug_assert!(false, 123);\n+   |                               ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::debug_assert!(false, \"{}\", 123);\n+   |                               +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:13:25\n+   |\n+LL |     std::assert!(false, 123);\n+   |                         ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::assert!(false, \"{}\", 123);\n+   |                         +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:15:17\n+   |\n+LL |     std::panic!(false, 123);\n+   |                 ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::panic!(\"{} {}\", false, 123);\n+   |                 ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:18:32\n+   |\n+LL |     core::debug_assert!(false, 123);\n+   |                                ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::debug_assert!(false, \"{}\", 123);\n+   |                                +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:20:26\n+   |\n+LL |     core::assert!(false, 123);\n+   |                          ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::assert!(false, \"{}\", 123);\n+   |                          +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:22:18\n+   |\n+LL |     core::panic!(false, 123);\n+   |                  ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::panic!(\"{} {}\", false, 123);\n+   |                  ++++++++\n+\n+error: aborting due to 9 previous errors\n+"}]}