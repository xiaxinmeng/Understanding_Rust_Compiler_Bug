{"sha": "d62aa3e085245621218759f8c8d56e29f600b74c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MmFhM2UwODUyNDU2MjEyMTg3NTlmOGM4ZDU2ZTI5ZjYwMGI3NGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-30T11:09:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-30T11:09:26Z"}, "message": "move ScalarMaybeUndef into the miri engine", "tree": {"sha": "dc2b99d19f911f19a86270abec787b6c3a3029ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2b99d19f911f19a86270abec787b6c3a3029ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d62aa3e085245621218759f8c8d56e29f600b74c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d62aa3e085245621218759f8c8d56e29f600b74c", "html_url": "https://github.com/rust-lang/rust/commit/d62aa3e085245621218759f8c8d56e29f600b74c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d62aa3e085245621218759f8c8d56e29f600b74c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392ea7ad53845630a185c20dfa4a88c741cdf866", "url": "https://api.github.com/repos/rust-lang/rust/commits/392ea7ad53845630a185c20dfa4a88c741cdf866", "html_url": "https://github.com/rust-lang/rust/commit/392ea7ad53845630a185c20dfa4a88c741cdf866"}], "stats": {"total": 226, "additions": 113, "deletions": 113}, "files": [{"sha": "9c4e995e24d01fe3dd6fd2dd8171a525d0386276", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -391,11 +391,6 @@ for ::mir::interpret::ConstValue<'gcx> {\n     }\n }\n \n-impl_stable_hash_for!(enum mir::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});\n-\n impl_stable_hash_for!(struct mir::interpret::Pointer {\n     alloc_id,\n     offset"}, {"sha": "1fb729d20b3a9be8f1e11b314c5d7b06e70b1678", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -23,7 +23,7 @@ pub use self::error::{\n     FrameInfo, ConstEvalResult,\n };\n \n-pub use self::value::{Scalar, ConstValue, ScalarMaybeUndef};\n+pub use self::value::{Scalar, ConstValue};\n \n use std::fmt;\n use mir;"}, {"sha": "d695ad88e47aa3d14cc8a355ac1508ce398652b5", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -343,96 +343,3 @@ pub enum Scalar<Id=AllocId> {\n     /// relocation and its associated offset together as a `Pointer` here.\n     Ptr(Pointer<Id>),\n }\n-\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef<Id=AllocId> {\n-    Scalar(Scalar<Id>),\n-    Undef,\n-}\n-\n-impl From<Scalar> for ScalarMaybeUndef {\n-    #[inline(always)]\n-    fn from(s: Scalar) -> Self {\n-        ScalarMaybeUndef::Scalar(s)\n-    }\n-}\n-\n-impl<'tcx> ScalarMaybeUndef {\n-    #[inline]\n-    pub fn not_undef(self) -> EvalResult<'static, Scalar> {\n-        match self {\n-            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n-        }\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer> {\n-        self.not_undef()?.to_ptr()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n-        self.not_undef()?.to_bits(target_size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n-        self.not_undef()?.to_bool()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_char(self) -> EvalResult<'tcx, char> {\n-        self.not_undef()?.to_char()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n-        self.not_undef()?.to_f32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n-        self.not_undef()?.to_f64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n-        self.not_undef()?.to_u8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n-        self.not_undef()?.to_u32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_u64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_usize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n-        self.not_undef()?.to_i8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n-        self.not_undef()?.to_i32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_i64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_isize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n-    }\n-}"}, {"sha": "ff059e7d1853b0c8592d3af9bd8edf2d9700b198", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -25,14 +25,13 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::interpret::{\n     GlobalId, Scalar, FrameInfo, AllocId,\n     EvalResult, EvalErrorKind,\n-    ScalarMaybeUndef,\n     truncate, sign_extend,\n };\n \n use syntax::source_map::{self, Span};\n \n use super::{\n-    Value, Operand, MemPlace, MPlaceTy, Place,\n+    Value, Operand, MemPlace, MPlaceTy, Place, ScalarMaybeUndef,\n     Memory, Machine\n };\n "}, {"sha": "11e27a597fbcab9a1efcfb954956a6d68e994563", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -21,15 +21,15 @@ use std::ptr;\n \n use rustc::ty::{self, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, ScalarMaybeUndef, GlobalId,\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n                             truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n use syntax::ast::Mutability;\n \n-use super::Machine;\n+use super::{Machine, ScalarMaybeUndef};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum MemoryKind<T> {"}, {"sha": "b840af193b64a7d87c4fb3c4a40664d93e19a26f", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -34,4 +34,4 @@ pub use self::memory::{Memory, MemoryKind};\n \n pub use self::machine::Machine;\n \n-pub use self::operand::{Value, ValTy, Operand, OpTy};\n+pub use self::operand::{ScalarMaybeUndef, Value, ValTy, Operand, OpTy};"}, {"sha": "7ca1a4da6f7c4112bda411e13b53d646f6aebf83", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -19,11 +19,105 @@ use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerEx\n \n use rustc::mir::interpret::{\n     GlobalId, AllocId,\n-    ConstValue, Pointer, Scalar, ScalarMaybeUndef,\n+    ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind\n };\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n \n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+pub enum ScalarMaybeUndef<Id=AllocId> {\n+    Scalar(Scalar<Id>),\n+    Undef,\n+}\n+\n+impl From<Scalar> for ScalarMaybeUndef {\n+    #[inline(always)]\n+    fn from(s: Scalar) -> Self {\n+        ScalarMaybeUndef::Scalar(s)\n+    }\n+}\n+\n+impl<'tcx> ScalarMaybeUndef {\n+    #[inline]\n+    pub fn not_undef(self) -> EvalResult<'static, Scalar> {\n+        match self {\n+            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n+            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer> {\n+        self.not_undef()?.to_ptr()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n+        self.not_undef()?.to_bits(target_size)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n+        self.not_undef()?.to_bool()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_char(self) -> EvalResult<'tcx, char> {\n+        self.not_undef()?.to_char()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n+        self.not_undef()?.to_f32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n+        self.not_undef()?.to_f64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n+        self.not_undef()?.to_u8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n+        self.not_undef()?.to_u32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_u64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_usize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_usize(cx)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n+        self.not_undef()?.to_i8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n+        self.not_undef()?.to_i32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_i64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_isize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_isize(cx)\n+    }\n+}\n+\n+\n /// A `Value` represents a single immediate self-contained Rust value.\n ///\n /// For optimization of a few very common cases, there is also a representation for a pair of"}, {"sha": "8878e5ca83f41f05ca770d22f78b756fa03b0316", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -19,9 +19,9 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout};\n \n use rustc::mir::interpret::{\n-    GlobalId, AllocId, Scalar, EvalResult, Pointer, ScalarMaybeUndef, PointerArithmetic\n+    GlobalId, AllocId, Scalar, EvalResult, Pointer, PointerArithmetic\n };\n-use super::{EvalContext, Machine, Value, ValTy, Operand, OpTy, MemoryKind};\n+use super::{EvalContext, Machine, Value, ValTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct MemPlace<Id=AllocId> {"}, {"sha": "9b507eca3633b1cf16f771dd4ae16f0c05ce86e5", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -11,7 +11,7 @@ use std::mem;\n use rustc::ich::{StableHashingContext, StableHashingContextProvider};\n use rustc::mir;\n use rustc::mir::interpret::{\n-    AllocId, Pointer, Scalar, ScalarMaybeUndef,\n+    AllocId, Pointer, Scalar,\n     Relocations, Allocation, UndefMask,\n     EvalResult, EvalErrorKind,\n };\n@@ -25,7 +25,7 @@ use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n use super::eval_context::{LocalValue, StackPopCleanup};\n-use super::{Frame, Memory, Operand, MemPlace, Place, Value};\n+use super::{Frame, Memory, Operand, MemPlace, Place, Value, ScalarMaybeUndef};\n use const_eval::CompileTimeInterpreter;\n \n #[derive(Default)]\n@@ -193,6 +193,11 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Scalar\n     }\n }\n \n+impl_stable_hash_for!(enum ::interpret::ScalarMaybeUndef {\n+    Scalar(v),\n+    Undef\n+});\n+\n impl_snapshot_for!(enum ScalarMaybeUndef {\n     Scalar(s),\n     Undef,"}, {"sha": "c5238d24cf7eddcbb8db0934fa74490205210541", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -15,11 +15,11 @@ use rustc::ty::layout::{self, Size, Primitive};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, ScalarMaybeUndef, EvalErrorKind, PointerArithmetic\n+    Scalar, AllocType, EvalResult, EvalErrorKind, PointerArithmetic\n };\n \n use super::{\n-    OpTy, Machine, EvalContext\n+    OpTy, Machine, EvalContext, ScalarMaybeUndef\n };\n \n macro_rules! validation_failure{"}, {"sha": "70d50d589d1a041b1e24d827e70fffa07c3187b9", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62aa3e085245621218759f8c8d56e29f600b74c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d62aa3e085245621218759f8c8d56e29f600b74c", "patch": "@@ -18,10 +18,10 @@ use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::mir::interpret::{\n-    ConstEvalErr, EvalErrorKind, ScalarMaybeUndef, Scalar, GlobalId, EvalResult\n+    ConstEvalErr, EvalErrorKind, Scalar, GlobalId, EvalResult\n };\n use rustc::ty::{TyCtxt, self, Instance};\n-use interpret::{self, EvalContext, Value, OpTy, MemoryKind};\n+use interpret::{self, EvalContext, Value, OpTy, MemoryKind, ScalarMaybeUndef};\n use const_eval::{CompileTimeInterpreter, eval_promoted, mk_borrowck_eval_cx};\n use transform::{MirPass, MirSource};\n use syntax::source_map::{Span, DUMMY_SP};"}]}