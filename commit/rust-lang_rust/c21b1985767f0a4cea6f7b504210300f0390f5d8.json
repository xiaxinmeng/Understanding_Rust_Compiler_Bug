{"sha": "c21b1985767f0a4cea6f7b504210300f0390f5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWIxOTg1NzY3ZjBhNGNlYTZmN2I1MDQyMTAzMDBmMDM5MGY1ZDg=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-11-14T19:18:24Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-11-15T21:39:27Z"}, "message": "New lint: zst_offset", "tree": {"sha": "f69acdb4c63ad06c29c938976da8adb3f0cd75fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69acdb4c63ad06c29c938976da8adb3f0cd75fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21b1985767f0a4cea6f7b504210300f0390f5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21b1985767f0a4cea6f7b504210300f0390f5d8", "html_url": "https://github.com/rust-lang/rust/commit/c21b1985767f0a4cea6f7b504210300f0390f5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21b1985767f0a4cea6f7b504210300f0390f5d8/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f1769734b6204fc6bece8556b7b80a7683271e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1769734b6204fc6bece8556b7b80a7683271e", "html_url": "https://github.com/rust-lang/rust/commit/b4f1769734b6204fc6bece8556b7b80a7683271e"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "39ca3be04468ab2adecea6e74e4364294dc89014", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -1273,4 +1273,5 @@ Released 2018-09-13\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n [`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n+[`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "c5106e074cbc53975799890eb5bd33159eb29202", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 333 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 334 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "a2dcbb6a95c57303c30a61cd58ed3f2fa8cfe17c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -625,6 +625,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::USELESS_ASREF,\n         &methods::WRONG_PUB_SELF_CONVENTION,\n         &methods::WRONG_SELF_CONVENTION,\n+        &methods::ZST_OFFSET,\n         &minmax::MIN_MAX,\n         &misc::CMP_NAN,\n         &misc::CMP_OWNED,\n@@ -1177,6 +1178,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::USELESS_ASREF),\n         LintId::of(&methods::WRONG_SELF_CONVENTION),\n+        LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),\n         LintId::of(&misc::CMP_NAN),\n         LintId::of(&misc::CMP_OWNED),\n@@ -1498,6 +1500,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n+        LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),\n         LintId::of(&misc::CMP_NAN),\n         LintId::of(&misc::FLOAT_CMP),"}, {"sha": "f20abeff0658253c71a7767b11e7725168c1c2f8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -1065,6 +1065,23 @@ declare_clippy_lint! {\n     \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to\n+    /// zero-sized types\n+    ///\n+    /// **Why is this bad?** This is a no-op, and likely unintended\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// unsafe { (&() as *const ()).offest(1) };\n+    /// ```\n+    pub ZST_OFFSET,\n+    correctness,\n+    \"Check for offset calculations on raw pointers to zero-sized types\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -1109,6 +1126,7 @@ declare_lint_pass!(Methods => [\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n     MANUAL_SATURATING_ARITHMETIC,\n+    ZST_OFFSET,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n@@ -1167,6 +1185,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             | [\"unwrap_or\", arith @ \"checked_mul\"] => {\n                 manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n+            [\"add\"] | [\"offset\"] | [\"sub\"] | [\"wrapping_offset\"] | [\"wrapping_add\"] | [\"wrapping_sub\"] => {\n+                check_pointer_offset(cx, expr, arg_lists[0])\n+            },\n             _ => {},\n         }\n \n@@ -3063,3 +3084,15 @@ fn contains_return(expr: &hir::Expr) -> bool {\n     visitor.visit_expr(expr);\n     visitor.found\n }\n+\n+fn check_pointer_offset(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n+    if_chain! {\n+        if args.len() == 2;\n+        if let ty::RawPtr(ty::TypeAndMut { ref ty, .. }) = cx.tables.expr_ty(&args[0]).kind;\n+        if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty));\n+        if layout.is_zst();\n+        then {\n+            span_lint(cx, ZST_OFFSET, expr.span, \"offset calculation on zero-sized value\");\n+        }\n+    }\n+}"}, {"sha": "8d046aa2b22e65a6342d30d6166d24c137d2dbfb", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 333] = [\n+pub const ALL_LINTS: [Lint; 334] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -2338,5 +2338,12 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"unicode\",\n     },\n+    Lint {\n+        name: \"zst_offset\",\n+        group: \"correctness\",\n+        desc: \"Check for offset calculations on raw pointers to zero-sized types\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n ];\n // end lint list, do not remove this comment, it\u2019s used in `update_lints`"}, {"sha": "2de904376ad45b438ef580b99f2791fe7d5ea9bd", "filename": "tests/ui/zero_offset.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/tests%2Fui%2Fzero_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/tests%2Fui%2Fzero_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.rs?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    unsafe {\n+        let x = &() as *const ();\n+        x.offset(0);\n+        x.wrapping_add(0);\n+        x.sub(0);\n+        x.wrapping_sub(0);\n+\n+        let y = &1 as *const u8;\n+        y.offset(0);\n+    }\n+}"}, {"sha": "cfcd7de2b3d2c6b4503cbb125ff03be2ee0896b8", "filename": "tests/ui/zero_offset.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21b1985767f0a4cea6f7b504210300f0390f5d8/tests%2Fui%2Fzero_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21b1985767f0a4cea6f7b504210300f0390f5d8/tests%2Fui%2Fzero_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.stderr?ref=c21b1985767f0a4cea6f7b504210300f0390f5d8", "patch": "@@ -0,0 +1,9 @@\n+error[E0606]: casting `&i32` as `*const u8` is invalid\n+  --> $DIR/zero_offset.rs:9:17\n+   |\n+LL |         let y = &1 as *const u8;\n+   |                 ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0606`."}]}