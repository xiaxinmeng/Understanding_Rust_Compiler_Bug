{"sha": "dbd39f868bad019ea36fc4d7557015f94d255f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDM5Zjg2OGJhZDAxOWVhMzZmYzRkNzU1NzAxNWY5NGQyNTVmMDY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-30T21:43:44Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-31T00:26:14Z"}, "message": "rustc: \"ifce\" -> \"trt\" in identifiers", "tree": {"sha": "5fc58c6c518d281816a93b107463ffdeea5cbc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc58c6c518d281816a93b107463ffdeea5cbc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd39f868bad019ea36fc4d7557015f94d255f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd39f868bad019ea36fc4d7557015f94d255f06", "html_url": "https://github.com/rust-lang/rust/commit/dbd39f868bad019ea36fc4d7557015f94d255f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd39f868bad019ea36fc4d7557015f94d255f06/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d665ae956a4658860991783a3ff84ad6088e3e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/d665ae956a4658860991783a3ff84ad6088e3e09", "html_url": "https://github.com/rust-lang/rust/commit/d665ae956a4658860991783a3ff84ad6088e3e09"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b42dce15fd558662653f9534e1b9d2b5a2b4db9d", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=dbd39f868bad019ea36fc4d7557015f94d255f06", "patch": "@@ -255,12 +255,12 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: ~[ty::t],\n     let tcx = ccx.tcx;\n \n     // XXX: This should support multiple traits.\n-    let ifce_id = expect(ccx.sess,\n-                         ty::ty_to_def_id(ty::impl_traits(tcx, impl_id)[0]),\n-                         || ~\"make_impl_vtable: non-trait-type implemented\");\n+    let trt_id = expect(ccx.sess,\n+                        ty::ty_to_def_id(ty::impl_traits(tcx, impl_id)[0]),\n+                        || ~\"make_impl_vtable: non-trait-type implemented\");\n \n     let has_tps = (*ty::lookup_item_type(ccx.tcx, impl_id).bounds).len() > 0u;\n-    make_vtable(ccx, vec::map(*ty::trait_methods(tcx, ifce_id), |im| {\n+    make_vtable(ccx, vec::map(*ty::trait_methods(tcx, trt_id), |im| {\n         let fty = ty::subst_tps(tcx, substs, ty::mk_fn(tcx, im.fty));\n         if (*im.tps).len() > 0u || ty::type_has_self(fty) {\n             C_null(T_ptr(T_nil()))"}, {"sha": "6f1e97bc34224c1418711fa9d6cd2e3bdb2faa1f", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=dbd39f868bad019ea36fc4d7557015f94d255f06", "patch": "@@ -214,8 +214,8 @@ class lookup {\n               }\n             };\n \n-            let ifce_methods = ty::trait_methods(tcx, iid);\n-            alt vec::position(*ifce_methods, |m| m.ident == self.m_name) {\n+            let trt_methods = ty::trait_methods(tcx, iid);\n+            alt vec::position(*trt_methods, |m| m.ident == self.m_name) {\n               none {\n                 /* check next bound */\n                 trait_bnd_idx += 1u;\n@@ -233,7 +233,7 @@ class lookup {\n                               with bound_substs};\n \n                 self.add_candidates_from_m(\n-                    substs, ifce_methods[pos],\n+                    substs, trt_methods[pos],\n                     method_param({trait_id:iid,\n                                   method_num:pos,\n                                   param_num:n,"}, {"sha": "60c79407e6da80e6347bb157e76dd85c1d772e76", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd39f868bad019ea36fc4d7557015f94d255f06/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=dbd39f868bad019ea36fc4d7557015f94d255f06", "patch": "@@ -325,7 +325,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         get_enum_variant_types(ccx, tpt.ty, variants, ty_params, rp);\n       }\n-      ast::item_impl(tps, ifce, selfty, ms) {\n+      ast::item_impl(tps, trt, selfty, ms) {\n         let i_bounds = ty_param_bounds(ccx, tps);\n         let selfty = ccx.to_ty(type_rscope(rp), selfty);\n         write_ty_to_tcx(tcx, it.id, selfty);\n@@ -335,7 +335,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n                            ty: selfty});\n \n         let cms = convert_methods(ccx, ms, rp, i_bounds, selfty);\n-        for ifce.each |t| {\n+        for trt.each |t| {\n             check_methods_against_trait(ccx, tps, rp, selfty, t, cms);\n         }\n       }\n@@ -396,11 +396,11 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         let {bounds, substs} = mk_substs(ccx, tps, rp);\n         let selfty = ty::mk_class(tcx, local_def(it.id), substs);\n         let cms = convert_methods(ccx, methods, rp, bounds, selfty);\n-        for traits.each |ifce| {\n-            check_methods_against_trait(ccx, tps, rp, selfty, ifce, cms);\n-            // ifce.impl_id represents (class, iface) pair\n-            write_ty_to_tcx(tcx, ifce.impl_id, tpt.ty);\n-            tcx.tcache.insert(local_def(ifce.impl_id), tpt);\n+        for traits.each |trt| {\n+            check_methods_against_trait(ccx, tps, rp, selfty, trt, cms);\n+            // trt.impl_id represents (class, iface) pair\n+            write_ty_to_tcx(tcx, trt.impl_id, tpt.ty);\n+            tcx.tcache.insert(local_def(trt.impl_id), tpt);\n         }\n       }\n       _ {"}]}