{"sha": "6c5504a61751cbcb71d779dfe2085557e72b6030", "node_id": "C_kwDOAAsO6NoAKDZjNTUwNGE2MTc1MWNiY2I3MWQ3NzlkZmUyMDg1NTU3ZTcyYjYwMzA", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:10:47Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:10:47Z"}, "message": "one last bit of cleanup", "tree": {"sha": "44c78989950000b47f0a7b57b1b9b3f591ab5713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c78989950000b47f0a7b57b1b9b3f591ab5713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5504a61751cbcb71d779dfe2085557e72b6030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5504a61751cbcb71d779dfe2085557e72b6030", "html_url": "https://github.com/rust-lang/rust/commit/6c5504a61751cbcb71d779dfe2085557e72b6030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5504a61751cbcb71d779dfe2085557e72b6030/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "html_url": "https://github.com/rust-lang/rust/commit/c3f30ae4f004e6e3cc52e30370034e79efaad3d5"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "5e382860172669652470f39b66c234721a295895", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6c5504a61751cbcb71d779dfe2085557e72b6030/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5504a61751cbcb71d779dfe2085557e72b6030/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=6c5504a61751cbcb71d779dfe2085557e72b6030", "patch": "@@ -14,7 +14,7 @@ use ide_db::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::RootDatabase;\n+use crate::{prime_caches, RootDatabase};\n \n /// We're indexing many crates.\n #[derive(Debug)]\n@@ -54,34 +54,37 @@ pub(crate) fn parallel_prime_caches(\n         builder.build()\n     };\n \n-    let (work_sender, work_receiver) = crossbeam_channel::unbounded();\n-    let (progress_sender, progress_receiver) = crossbeam_channel::unbounded();\n-\n     enum ParallelPrimeCacheWorkerProgress {\n         BeginCrate { crate_id: CrateId, crate_name: String },\n         EndCrate { crate_id: CrateId },\n     }\n \n-    let prime_caches_worker = move |db: Snapshot<RootDatabase>| {\n-        while let Ok((crate_id, crate_name)) = work_receiver.recv() {\n-            progress_sender\n-                .send(ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name })?;\n+    let (work_sender, progress_receiver) = {\n+        let (progress_sender, progress_receiver) = crossbeam_channel::unbounded();\n+        let (work_sender, work_receiver) = crossbeam_channel::unbounded();\n+        let prime_caches_worker = move |db: Snapshot<RootDatabase>| {\n+            while let Ok((crate_id, crate_name)) = work_receiver.recv() {\n+                progress_sender\n+                    .send(ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name })?;\n+\n+                // This also computes the DefMap\n+                db.import_map(crate_id);\n \n-            // This also computes the DefMap\n-            db.import_map(crate_id);\n+                progress_sender.send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id })?;\n+            }\n \n-            progress_sender.send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id })?;\n+            Ok::<_, crossbeam_channel::SendError<_>>(())\n+        };\n+\n+        for _ in 0..num_worker_threads {\n+            let worker = prime_caches_worker.clone();\n+            let db = db.snapshot();\n+            std::thread::spawn(move || Cancelled::catch(|| worker(db)));\n         }\n \n-        Ok::<_, crossbeam_channel::SendError<_>>(())\n+        (work_sender, progress_receiver)\n     };\n \n-    for _ in 0..num_worker_threads {\n-        let worker = prime_caches_worker.clone();\n-        let db = db.snapshot();\n-        std::thread::spawn(move || Cancelled::catch(|| worker(db)));\n-    }\n-\n     let crates_total = crates_to_prime.pending();\n     let mut crates_done = 0;\n "}]}