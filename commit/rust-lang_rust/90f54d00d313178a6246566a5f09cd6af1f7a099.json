{"sha": "90f54d00d313178a6246566a5f09cd6af1f7a099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjU0ZDAwZDMxMzE3OGE2MjQ2NTY2YTVmMDljZDZhZjFmN2EwOTk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-06T15:19:15Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-06T15:19:15Z"}, "message": "Improve union unused field detection", "tree": {"sha": "6f5d82cf892eddd09404de7e01e76692fcf7b4da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5d82cf892eddd09404de7e01e76692fcf7b4da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f54d00d313178a6246566a5f09cd6af1f7a099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f54d00d313178a6246566a5f09cd6af1f7a099", "html_url": "https://github.com/rust-lang/rust/commit/90f54d00d313178a6246566a5f09cd6af1f7a099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f54d00d313178a6246566a5f09cd6af1f7a099/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fcac6fa977630640fb79c4c97486b14ca66cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fcac6fa977630640fb79c4c97486b14ca66cee", "html_url": "https://github.com/rust-lang/rust/commit/59fcac6fa977630640fb79c4c97486b14ca66cee"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "57198d8ca0b77433ea8a265c8381ee68f51670a0", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=90f54d00d313178a6246566a5f09cd6af1f7a099", "patch": "@@ -877,7 +877,7 @@ pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n     visitor.visit_id(struct_definition.id());\n-    walk_list!(visitor, visit_struct_field, struct_definition.fields().iter().rev());\n+    walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {"}, {"sha": "c82cfb344967110feccdd6816f08d6e8eec40df1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=90f54d00d313178a6246566a5f09cd6af1f7a099", "patch": "@@ -189,6 +189,24 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         self.struct_has_extern_repr = had_extern_repr;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n+\n+    fn mark_as_used_if_union(&mut self, did: DefId) {\n+        if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n+            match self.tcx.hir.find(node_id) {\n+                Some(hir_map::NodeItem(item)) => match item.node {\n+                    Item_::ItemUnion(ref variant, _) => {\n+                        if variant.fields().len() > 1 {\n+                            for field in variant.fields() {\n+                                self.live_symbols.insert(field.id);\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                },\n+                _ => {}\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n@@ -221,6 +239,11 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::ExprPath(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tables.qpath_def(qpath, expr.id);\n                 self.handle_definition(def);\n+                self.mark_as_used_if_union(def.def_id());\n+            }\n+            hir::ExprPath(ref qpath @ hir::QPath::Resolved(..)) => {\n+                let def = self.tables.qpath_def(qpath, expr.id);\n+                self.mark_as_used_if_union(def.def_id());\n             }\n             hir::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id);\n@@ -422,7 +445,6 @@ fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n struct DeadVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n-    need_check_next_union_field: bool,\n }\n \n impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n@@ -538,16 +560,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_variant_data(&mut self,\n-                          s: &'tcx hir::VariantData,\n-                          _: ast::Name,\n-                          _: &'tcx hir::Generics,\n-                          _parent_id: ast::NodeId,\n-                          _: syntax_pos::Span) {\n-        self.need_check_next_union_field = true;\n-        intravisit::walk_struct_def(self, s)\n-    }\n-\n     fn visit_variant(&mut self,\n                      variant: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n@@ -568,23 +580,9 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n-        if self.need_check_next_union_field {\n-            if self.should_warn_about_field(&field) {\n-                self.warn_dead_code(field.id, field.span, field.name, \"field\");\n-            } else {\n-                let did = self.tcx.hir.get_parent_did(field.id);\n-                if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n-                    match self.tcx.hir.find(node_id) {\n-                        Some(hir_map::NodeItem(item)) => match item.node {\n-                            // If this is an union's field, it means all previous fields\n-                            // have been used as well so no need to check further.\n-                            Item_::ItemUnion(_, _) => self.need_check_next_union_field = false,\n-                            _ => {}\n-                        },\n-                        _ => {}\n-                    }\n-                }\n-            }\n+        if self.should_warn_about_field(&field) {\n+            self.warn_dead_code(field.id, field.span,\n+                                field.name, \"field\");\n         }\n         intravisit::walk_struct_field(self, field);\n     }\n@@ -630,7 +628,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = DeadVisitor {\n         tcx: tcx,\n         live_symbols: live_symbols,\n-        need_check_next_union_field: true,\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "7b39a548fe9d265c066985fc87c45ee7219f72ce", "filename": "src/test/ui/union-fields.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Ftest%2Fui%2Funion-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f54d00d313178a6246566a5f09cd6af1f7a099/src%2Ftest%2Fui%2Funion-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-fields.rs?ref=90f54d00d313178a6246566a5f09cd6af1f7a099", "patch": "@@ -10,20 +10,24 @@\n \n #![deny(dead_code)]\n \n-union U {\n-    x: u32,\n-    y: f32,\n+union U1 {\n+    a: u8, // should not be reported\n+    b: u8, // should not be reported\n+    c: u8, // should be reported\n }\n-\n-struct V {\n-    x: u32,\n-    y: u32,\n+union U2 {\n+    a: u8, // should be reported\n+    b: u8, // should not be reported\n+    c: u8, // should not be reported\n }\n+union NoDropLike { a: u8 } // should be reported as unused\n \n fn main() {\n-    let u = U { x: 0x3f800000 };\n-    let _f = unsafe { u.y };\n-    let v = V { x: 0, y: 0 };\n-    println!(\"{}\", v.x);\n-}\n+    let u = U1 { a: 0 };\n+    let _a = unsafe { u.b };\n \n+    let u = U2 { c: 0 };\n+    let _b = unsafe { u.b };\n+\n+    let _u = NoDropLike { a: 10 };\n+}"}]}