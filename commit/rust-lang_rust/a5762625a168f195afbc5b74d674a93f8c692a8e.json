{"sha": "a5762625a168f195afbc5b74d674a93f8c692a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzYyNjI1YTE2OGYxOTVhZmJjNWI3NGQ2NzRhOTNmOGM2OTJhOGU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-24T21:34:57Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-05-01T01:20:22Z"}, "message": "Add downcasting to std::error::Error\n\nThis commit brings the `Error` trait in line with the [Error interoperation\nRFC](https://github.com/rust-lang/rfcs/pull/201) by adding downcasting,\nwhich has long been intended. This change means that for any `Error`\ntrait objects that are `'static`, you can downcast to concrete error\ntypes.\n\nTo make this work, it is necessary for `Error` to inherit from\n`Reflect` (which is currently used to mark concrete types as \"permitted\nfor reflection, aka downcasting\"). This is a breaking change: it means\nthat impls like\n\n```rust\nimpl<T> Error for MyErrorType<T> { ... }\n```\n\nmust change to something like\n\n```rust\nimpl<T: Reflect> Error for MyErrorType<T> { ... }\n```\n\nexcept that `Reflect` is currently unstable (and should remain so for\nthe time being). For now, code can instead bound by `Any`:\n\n```rust\nimpl<T: Any> Error for MyErrorType<T> { ... }\n```\n\nwhich *is* stable and has `Reflect` as a super trait. The downside is\nthat this imposes a `'static` constraint, but that only\nconstrains *when* `Error` is implemented -- it does not actually\nconstrain the types that can implement `Error`.\n\n[breaking-change]", "tree": {"sha": "1d5cd7de1e4894a220c1d34578defbdc0c305d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d5cd7de1e4894a220c1d34578defbdc0c305d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5762625a168f195afbc5b74d674a93f8c692a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5762625a168f195afbc5b74d674a93f8c692a8e", "html_url": "https://github.com/rust-lang/rust/commit/a5762625a168f195afbc5b74d674a93f8c692a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5762625a168f195afbc5b74d674a93f8c692a8e/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e962870420fef19e8f23a299dbe7499aca1656a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e962870420fef19e8f23a299dbe7499aca1656a5", "html_url": "https://github.com/rust-lang/rust/commit/e962870420fef19e8f23a299dbe7499aca1656a5"}], "stats": {"total": 165, "additions": 146, "deletions": 19}, "files": [{"sha": "7a089d733cfdf9d087abffbbdbc241afba264dd2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -240,6 +240,7 @@ impl<T: ?Sized + Hash> Hash for Box<T> {\n impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n@@ -257,11 +258,15 @@ impl Box<Any> {\n     }\n }\n \n-impl Box<Any+Send> {\n+impl Box<Any + Send> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n-        <Box<Any>>::downcast(self)\n+    /// Attempt to downcast the box to a concrete type.\n+    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> {\n+        <Box<Any>>::downcast(self).map_err(|s| unsafe {\n+            // reapply the Send marker\n+            mem::transmute::<Box<Any>, Box<Any + Send>>(s)\n+        })\n     }\n }\n "}, {"sha": "a65394f52682ced3504e38f380fba4906654b166", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -97,9 +97,7 @@ pub trait Any: Reflect + 'static {\n     fn get_type_id(&self) -> TypeId;\n }\n \n-impl<T> Any for T\n-    where T: Reflect + 'static\n-{\n+impl<T: Reflect + 'static> Any for T {\n     fn get_type_id(&self) -> TypeId { TypeId::of::<T>() }\n }\n \n@@ -222,7 +220,7 @@ impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been\n     /// instantiated with\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn of<T: ?Sized + Any>() -> TypeId {\n+    pub fn of<T: ?Sized + Reflect + 'static>() -> TypeId {\n         TypeId {\n             t: unsafe { intrinsics::type_id::<T>() },\n         }"}, {"sha": "e8c7045141d05800b87e7eb6248239f38b0bc7d1", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -416,6 +416,8 @@ mod impls {\n #[rustc_reflect_like]\n #[unstable(feature = \"core\", reason = \"requires RFC and more experience\")]\n #[allow(deprecated)]\n+#[rustc_on_unimplemented = \"`{Self}` does not implement `Any`; \\\n+                            ensure all type parameters are bounded by `Any`\"]\n pub trait Reflect {}\n \n impl Reflect for .. { }"}, {"sha": "06e4d69818e1bbd0118d885b3b6945417e143895", "filename": "src/libstd/error.rs", "status": "modified", "additions": 125, "deletions": 5, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -47,19 +47,22 @@\n // coherence challenge (e.g., specialization, neg impls, etc) we can\n // reconsider what crate these items belong in.\n \n-use boxed::Box;\n+use any::TypeId;\n+use boxed::{self, Box};\n use convert::From;\n use fmt::{self, Debug, Display};\n-use marker::{Send, Sync};\n+use marker::{Send, Sync, Reflect};\n+use mem::transmute;\n use num;\n-use option::Option;\n-use option::Option::None;\n+use option::Option::{self, Some, None};\n+use result::Result::{self, Ok, Err};\n+use raw::TraitObject;\n use str;\n use string::{self, String};\n \n /// Base functionality for all errors in Rust.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Error: Debug + Display {\n+pub trait Error: Debug + Display + Reflect {\n     /// A short description of the error.\n     ///\n     /// The description should not contain newlines or sentence-ending\n@@ -71,6 +74,14 @@ pub trait Error: Debug + Display {\n     /// The lower-level cause of this error, if any.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cause(&self) -> Option<&Error> { None }\n+\n+    /// Get the `TypeId` of `self`\n+    #[doc(hidden)]\n+    #[unstable(feature = \"core\",\n+               reason = \"unclear whether to commit to this public implementation detail\")]\n+    fn type_id(&self) -> TypeId where Self: 'static {\n+        TypeId::of::<Self>()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -154,3 +165,112 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n+// copied from any.rs\n+impl Error + 'static {\n+    /// Returns true if the boxed type is the same as `T`\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        // Get TypeId of the type this function is instantiated with\n+        let t = TypeId::of::<T>();\n+\n+        // Get TypeId of the type in the trait object\n+        let boxed = self.type_id();\n+\n+        // Compare both TypeIds on equality\n+        t == boxed\n+    }\n+\n+    /// Returns some reference to the boxed value if it is of type `T`, or\n+    /// `None` if it isn't.\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject = transmute(self);\n+\n+                // Extract the data pointer\n+                Some(transmute(to.data))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns some mutable reference to the boxed value if it is of type `T`, or\n+    /// `None` if it isn't.\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject = transmute(self);\n+\n+                // Extract the data pointer\n+                Some(transmute(to.data))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl Error + 'static + Send {\n+    /// Forwards to the method defined on the type `Any`.\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        <Error + 'static>::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        <Error + 'static>::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        <Error + 'static>::downcast_mut::<T>(self)\n+    }\n+}\n+\n+impl Error {\n+    #[inline]\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    /// Attempt to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let raw = boxed::into_raw(self);\n+                let to: TraitObject =\n+                    transmute::<*mut Error, TraitObject>(raw);\n+\n+                // Extract the data pointer\n+                Ok(Box::from_raw(to.data as *mut T))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n+impl Error + Send {\n+    #[inline]\n+    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    /// Attempt to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error + Send>> {\n+        let err: Box<Error> = self;\n+        <Error>::downcast(err).map_err(|s| unsafe {\n+            // reapply the Send marker\n+            transmute::<Box<Error>, Box<Error + Send>>(s)\n+        })\n+    }\n+}"}, {"sha": "897ac673182d251abd469b6b374c25f7faf96259", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -13,6 +13,7 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n+use marker::Reflect;\n use cmp;\n use error;\n use fmt;\n@@ -322,7 +323,7 @@ impl<W> From<IntoInnerError<W>> for Error {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W: Send + fmt::Debug> error::Error for IntoInnerError<W> {\n+impl<W: Reflect + Send + fmt::Debug> error::Error for IntoInnerError<W> {\n     fn description(&self) -> &str {\n         error::Error::description(self.error())\n     }"}, {"sha": "965ad74fb60a1d4071c3a3f078b57a6010a60d5e", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -272,6 +272,7 @@ use error;\n use fmt;\n use mem;\n use cell::UnsafeCell;\n+use marker::Reflect;\n \n pub use self::select::{Select, Handle};\n use self::select::StartResult;\n@@ -955,8 +956,7 @@ impl<T> fmt::Display for SendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> error::Error for SendError<T> {\n-\n+impl<T: Send + Reflect> error::Error for SendError<T> {\n     fn description(&self) -> &str {\n         \"sending on a closed channel\"\n     }\n@@ -991,7 +991,7 @@ impl<T> fmt::Display for TrySendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> error::Error for TrySendError<T> {\n+impl<T: Send + Reflect> error::Error for TrySendError<T> {\n \n     fn description(&self) -> &str {\n         match *self {"}, {"sha": "6c59231c23a895f47671b4086f2bc06c005c561c", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5762625a168f195afbc5b74d674a93f8c692a8e/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=a5762625a168f195afbc5b74d674a93f8c692a8e", "patch": "@@ -10,6 +10,7 @@\n \n use prelude::v1::*;\n \n+use marker::Reflect;\n use cell::UnsafeCell;\n use error::{Error};\n use fmt;\n@@ -109,7 +110,7 @@ impl<T> fmt::Display for PoisonError<T> {\n     }\n }\n \n-impl<T: Send> Error for PoisonError<T> {\n+impl<T: Send + Reflect> Error for PoisonError<T> {\n     fn description(&self) -> &str {\n         \"poisoned lock: another task failed inside\"\n     }\n@@ -155,13 +156,13 @@ impl<T> fmt::Debug for TryLockError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> fmt::Display for TryLockError<T> {\n+impl<T: Send + Reflect> fmt::Display for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n \n-impl<T: Send> Error for TryLockError<T> {\n+impl<T: Send + Reflect> Error for TryLockError<T> {\n     fn description(&self) -> &str {\n         match *self {\n             TryLockError::Poisoned(ref p) => p.description(),"}]}