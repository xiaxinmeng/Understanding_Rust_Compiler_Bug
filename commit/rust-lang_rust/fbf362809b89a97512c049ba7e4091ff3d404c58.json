{"sha": "fbf362809b89a97512c049ba7e4091ff3d404c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZjM2MjgwOWI4OWE5NzUxMmMwNDliYTdlNDA5MWZmM2Q0MDRjNTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-26T17:51:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-26T23:30:36Z"}, "message": "Remove description of export, briefly describe `pub use`.", "tree": {"sha": "0cf5d1088a2b64cf53f44096a0ee93b98cf8e070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf5d1088a2b64cf53f44096a0ee93b98cf8e070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbf362809b89a97512c049ba7e4091ff3d404c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf362809b89a97512c049ba7e4091ff3d404c58", "html_url": "https://github.com/rust-lang/rust/commit/fbf362809b89a97512c049ba7e4091ff3d404c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbf362809b89a97512c049ba7e4091ff3d404c58/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385c4dfba00411da738aff96592281f0035e05f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/385c4dfba00411da738aff96592281f0035e05f8", "html_url": "https://github.com/rust-lang/rust/commit/385c4dfba00411da738aff96592281f0035e05f8"}], "stats": {"total": 100, "additions": 14, "deletions": 86}, "files": [{"sha": "c56c796dbef6da6769c66879bd55887da7f51b81", "filename": "doc/rust.md", "status": "modified", "additions": 14, "deletions": 86, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fbf362809b89a97512c049ba7e4091ff3d404c58/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbf362809b89a97512c049ba7e4091ff3d404c58/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=fbf362809b89a97512c049ba7e4091ff3d404c58", "patch": "@@ -783,9 +783,8 @@ link_attrs : link_attr [ ',' link_attrs ] + ;\n link_attr : ident '=' literal ;\n ~~~~~~~~\n \n-An _extern mod declaration_ specifies a dependency on an external crate. The\n-external crate is then imported into the declaring scope as the `ident`\n-provided in the `extern_mod_decl`.\n+An _extern mod declaration_ specifies a dependency on an external crate.\n+The external crate is then bound into the declaring scope as the `ident` provided in the `extern_mod_decl`.\n \n The external crate is resolved to a specific `soname` at compile time, and a\n runtime linkage requirement to that `soname` is passed to the linker for\n@@ -825,16 +824,16 @@ linkage-dependency with external crates. Linkage dependencies are\n independently declared with\n [`extern mod` declarations](#extern-mod-declarations).\n \n-Imports support a number of \"convenience\" notations:\n+Use declarations support a number of \"convenience\" notations:\n \n-  * Importing as a different name than the imported name, using the\n+  * Rebinding the target name as a new local name, using the\n     syntax `use x = p::q::r;`.\n-  * Importing a list of paths differing only in final element, using\n-    the glob-like brace syntax `use a::b::{c,d,e,f};`\n-  * Importing all paths matching a given prefix, using the glob-like\n-    asterisk syntax `use a::b::*;`\n+  * Simultaneously binding a list of paths differing only in final element,\n+    using the glob-like brace syntax `use a::b::{c,d,e,f};`\n+  * Binding all paths matching a given prefix,\n+    using the glob-like asterisk syntax `use a::b::*;`\n \n-An example of imports:\n+An example of `use` declarations:\n \n ~~~~\n use foo = core::info;\n@@ -855,82 +854,11 @@ fn main() {\n }\n ~~~~\n \n-##### Export declarations\n-\n-~~~~~~~~ {.ebnf .gram}\n-export_decl : \"export\" ident [ ',' ident ] *\n-            | \"export\" ident \"::{}\"\n-            | \"export\" ident '{' ident [ ',' ident ] * '}' ;\n-~~~~~~~~\n-\n-An _export declaration_ restricts the set of local names within a module that\n-can be accessed from code outside the module. By default, all _local items_ in\n-a module are exported; imported paths are not automatically re-exported by\n-default. If a module contains an explicit `export` declaration, this\n-declaration replaces the default export with the export specified.\n-\n-An example of an export:\n-\n-~~~~~~~~\n-pub mod foo {\n-\t#[legacy_exports];\n-    export primary;\n-\n-    fn primary() {\n-        helper(1, 2);\n-        helper(3, 4);\n-    }\n-\n-    fn helper(x: int, y: int) {\n-        ...\n-    }\n-}\n-\n-fn main() {\n-    foo::primary();  // Will compile.\n-}\n-~~~~~~~~\n-\n-If, instead of calling `foo::primary` in main, you were to call `foo::helper`\n-then it would fail to compile:\n-\n-~~~~~~~~{.ignore}\n-    foo::helper(2,3) // ERROR: will not compile.\n-~~~~~~~~\n-\n-Multiple names may be exported from a single export declaration:\n-\n-~~~~~~~~\n-mod foo {\n-    export primary, secondary;\n-\n-    fn primary() {\n-        helper(1, 2);\n-        helper(3, 4);\n-    }\n-\n-    fn secondary() {\n-        ...\n-    }\n-\n-    fn helper(x: int, y: int) {\n-        ...\n-    }\n-}\n-~~~~~~~~\n-\n-When exporting the name of an `enum` type `t`, by default, the module does\n-*not* implicitly export any of `t`'s constructors. For example:\n-\n-~~~~~~~~\n-mod foo {\n-    export t;\n-\n-    enum t {a, b, c}\n-}\n-~~~~~~~~\n-\n-Here, `foo` imports `t`, but not `a`, `b`, and `c`.\n+Like items, `use` declarations are private to the containing module, by default.\n+Also like items, a `use` declaration can be public, if qualified by the `pub` keyword.\n+A public `use` declaration can therefore be used to _redirect_ some public name to a different target definition,\n+even a definition with a private canonical path, inside a different module.\n+If a sequence of such redirections form a cycle or cannot be unambiguously resolved, they represent a compile-time error.\n \n ### Functions\n "}]}