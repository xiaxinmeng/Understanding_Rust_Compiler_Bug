{"sha": "f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOGZjMjdiNmYxYjA3ZTFiYzZmNjE3NjRjZDc0ZjU5ZDI5OTU2Yjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T10:04:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-16T10:04:31Z"}, "message": "Merge pull request #401 from RalfJung/tests\n\nrun fullMIR tests in appveyor", "tree": {"sha": "08a82e062758d8a2398bb8f9cf06fbc06a59463e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a82e062758d8a2398bb8f9cf06fbc06a59463e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbTG2vCRBK7hj4Ov3rIwAAdHIIAFnf2bfwcDYwpHEA3EEnzTKB\nU1RQ/lLEuVUedRkoRMi4QQv7YmF7i/sMem08GOki9jvTa4nQHnWGcl2hE7IVjheY\nEma/pScz5yZF4Tpil9oArJLBZsb6PGO82jK86u8FnBfwY1NCcC2OxQhIoglhIob2\nAp/7GZ//47qQElOWcfG2gVDhtE9NMJxGuPXH7S0N53rWFmt6hqnTTrNBg9kr9NAZ\n1np3QBaFDGInjh0eDM2wwr+eThS1+Rm6Y5rfgOLB63aMDSWZ5MFidFm+jGtnBvjJ\nGdm4rXFWkWAFst84lf1fKqqcExgDE/b1w/Zd6MeCERVAhuQdYeL8lDxLQ1QNG9A=\n=u+jm\n-----END PGP SIGNATURE-----\n", "payload": "tree 08a82e062758d8a2398bb8f9cf06fbc06a59463e\nparent 76b71b51b95a024a88e61de3d9ef5549fb85fcdc\nparent e1a3b9606e712dac18bae566498d2fa93ca0c276\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1531735471 +0200\ncommitter GitHub <noreply@github.com> 1531735471 +0200\n\nMerge pull request #401 from RalfJung/tests\n\nrun fullMIR tests in appveyor"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "html_url": "https://github.com/rust-lang/rust/commit/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b71b51b95a024a88e61de3d9ef5549fb85fcdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b71b51b95a024a88e61de3d9ef5549fb85fcdc", "html_url": "https://github.com/rust-lang/rust/commit/76b71b51b95a024a88e61de3d9ef5549fb85fcdc"}, {"sha": "e1a3b9606e712dac18bae566498d2fa93ca0c276", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a3b9606e712dac18bae566498d2fa93ca0c276", "html_url": "https://github.com/rust-lang/rust/commit/e1a3b9606e712dac18bae566498d2fa93ca0c276"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "6aee7e75a956e89bc5aaa4f99dfa4f997169172e", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "patch": "@@ -2,10 +2,10 @@ environment:\n     global:\n         PROJECT_NAME: miri\n     matrix:\n-        - TARGET: i686-pc-windows-msvc\n-          MSYS2_BITS: 32\n         - TARGET: x86_64-pc-windows-msvc\n           MSYS2_BITS: 64\n+        - TARGET: i686-pc-windows-msvc\n+          MSYS2_BITS: 32\n \n # branches to build\n branches:\n@@ -35,6 +35,8 @@ test_script:\n     - set RUST_BACKTRACE=1\n     - cargo build --release\n     - cargo test --release\n+    - set MIRI_SYSROOT=C:\\Users\\appveyor\\.xargo\\HOST\n+    - cargo test --release\n \n notifications:\n     - provider: Email"}, {"sha": "31b3b4b18d17184dfb008171d41a0959cfccc929", "filename": "src/fn_call.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "patch": "@@ -607,7 +607,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n             }\n \n             \"_tlv_atexit\" => {\n-                return err!(Unimplemented(\"can't interpret with full mir for osx target\".to_owned()));\n+                return err!(Unimplemented(\"Thread-local store is not fully supported on macOS\".to_owned()));\n             },\n \n             // Stub out all the other pthread calls to just return 0\n@@ -623,12 +623,53 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n             }\n \n             // Windows API subs\n-            \"AddVectoredExceptionHandler\" |\n-            \"SetThreadStackGuarantee\" => {\n-                let usize = self.tcx.types.usize;\n+            \"AddVectoredExceptionHandler\" => {\n                 // any non zero value works for the stdlib. This is just used for stackoverflows anyway\n-                self.write_scalar(dest, Scalar::from_u128(1), usize)?;\n+                self.write_scalar(dest, Scalar::from_u128(1), dest_ty)?;\n             },\n+            \"GetModuleHandleW\" |\n+            \"GetProcAddress\" |\n+            \"InitializeCriticalSection\" |\n+            \"EnterCriticalSection\" |\n+            \"TryEnterCriticalSection\" |\n+            \"LeaveCriticalSection\" |\n+            \"DeleteCriticalSection\" |\n+            \"SetLastError\" => {\n+                // pretend these do not exist/nothing happened, by returning zero\n+                self.write_scalar(dest, Scalar::from_u128(0), dest_ty)?;\n+            },\n+            \"GetLastError\" => {\n+                // this is c::ERROR_CALL_NOT_IMPLEMENTED\n+                self.write_scalar(dest, Scalar::from_u128(120), dest_ty)?;\n+            },\n+\n+            // Windows TLS\n+            \"TlsAlloc\" => {\n+                // This just creates a key; Windows does not natively support TLS dtors.\n+\n+                // Figure out how large a TLS key actually is. This is c::DWORD.\n+                let key_size = self.layout_of(dest_ty)?.size;\n+\n+                // Create key and return it\n+                let key = self.memory.create_tls_key(None) as u128;\n+                if key_size.bits() < 128 && key >= (1u128 << key_size.bits() as u128) {\n+                    return err!(OutOfTls);\n+                }\n+                self.write_scalar(dest, Scalar::from_u128(key), dest_ty)?;\n+            }\n+            \"TlsGetValue\" => {\n+                let key = self.value_to_scalar(args[0])?.to_bytes()?;\n+                let ptr = self.memory.load_tls(key)?;\n+                self.write_ptr(dest, ptr, dest_ty)?;\n+            }\n+            \"TlsSetValue\" => {\n+                let key = self.value_to_scalar(args[0])?.to_bytes()?;\n+                let new_ptr = self.into_ptr(args[1].value)?;\n+                self.memory.store_tls(key, new_ptr)?;\n+\n+                // Return success (1)\n+                self.write_scalar(dest, Scalar::from_u128(1), dest_ty)?;\n+            }\n \n             // We can't execute anything else\n             _ => {"}, {"sha": "5a2d7e77d65feebc6176914d9be1bed90b29eb6a", "filename": "src/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "patch": "@@ -141,7 +141,12 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     main_id: DefId,\n     start_wrapper: Option<DefId>,\n ) -> EvalResult<'tcx, (EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>, Option<Pointer>)> {\n-    let mut ecx = EvalContext::new(tcx.at(syntax::codemap::DUMMY_SP), ty::ParamEnv::reveal_all(), Default::default(), Default::default());\n+    let mut ecx = EvalContext::new(\n+        tcx.at(syntax::codemap::DUMMY_SP),\n+        ty::ParamEnv::reveal_all(),\n+        Default::default(),\n+        MemoryData::new()\n+    );\n \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;\n@@ -338,7 +343,7 @@ pub struct TlsEntry<'tcx> {\n     dtor: Option<ty::Instance<'tcx>>,\n }\n \n-#[derive(Clone, Default, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n@@ -355,6 +360,17 @@ pub struct MemoryData<'tcx> {\n     statics: HashMap<GlobalId<'tcx>, AllocId>,\n }\n \n+impl<'tcx> MemoryData<'tcx> {\n+    fn new() -> Self {\n+        MemoryData {\n+            next_thread_local: 1, // start with 1 as we must not use 0 on Windows\n+            thread_local: BTreeMap::new(),\n+            locks: HashMap::new(),\n+            statics: HashMap::new(),\n+        }\n+    }\n+}\n+\n impl<'tcx> Hash for MemoryData<'tcx> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         let MemoryData {"}, {"sha": "ffcf86291590d06e2631c7cd910e0eb5c8afe2a1", "filename": "src/tls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18fc27b6f1b07e1bc6f61764cd74f59d29956b8/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=f18fc27b6f1b07e1bc6f61764cd74f59d29956b8", "patch": "@@ -139,6 +139,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 None => self.memory.fetch_tls_dtor(None)?,\n             };\n         }\n+        // FIXME: On a windows target, call `unsafe extern \"system\" fn on_tls_callback`.\n         Ok(())\n     }\n }"}]}