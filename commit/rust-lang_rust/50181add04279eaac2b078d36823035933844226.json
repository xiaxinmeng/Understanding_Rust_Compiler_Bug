{"sha": "50181add04279eaac2b078d36823035933844226", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMTgxYWRkMDQyNzllYWFjMmIwNzhkMzY4MjMwMzU5MzM4NDQyMjY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-21T05:07:42Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-24T23:08:36Z"}, "message": "First sketch of lint pass\n\nEnough attributes are marked to cleanly compile an empty library.", "tree": {"sha": "7d97577a6252865f38aaaf69898ef555a702e667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d97577a6252865f38aaaf69898ef555a702e667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50181add04279eaac2b078d36823035933844226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50181add04279eaac2b078d36823035933844226", "html_url": "https://github.com/rust-lang/rust/commit/50181add04279eaac2b078d36823035933844226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50181add04279eaac2b078d36823035933844226/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c305473d3c60d5b4590ef8c715468f718a7aad8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c305473d3c60d5b4590ef8c715468f718a7aad8f", "html_url": "https://github.com/rust-lang/rust/commit/c305473d3c60d5b4590ef8c715468f718a7aad8f"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "4f9957ee980294bf73992a6cfcd2e249b1f4c216", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=50181add04279eaac2b078d36823035933844226", "patch": "@@ -327,7 +327,7 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     };\n \n     for attr in krate.attrs.iter() {\n-        if !attr.name().equiv(&(\"feature\")) {\n+        if !attr.check_name(\"feature\") {\n             continue\n         }\n "}, {"sha": "fe636f7b686a018f839e37229238214752c671c0", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=50181add04279eaac2b078d36823035933844226", "patch": "@@ -115,6 +115,8 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n                                   InternedString::new(\"feature\"),\n                                   vec![attr::mk_word_item(InternedString::new(\"phase\"))],\n                               ));\n+        // std_inject runs after feature checking so manually mark this attr\n+        attr::mark_used(&feat_phase_attr);\n         krate.attrs.push(feat_phase_attr);\n \n         krate\n@@ -141,6 +143,8 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n \n         let no_std_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n                                               attr::mk_word_item(InternedString::new(\"no_std\")));\n+        // std_inject runs after feature checking so manually mark this attr\n+        attr::mark_used(&no_std_attr);\n         krate.attrs.push(no_std_attr);\n \n         if !no_prelude(krate.attrs.as_slice()) {\n@@ -154,6 +158,8 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n                 vec!(\n                     attr::mk_word_item(InternedString::new(\"globs\")),\n                 )));\n+            // std_inject runs after feature checking so manually mark this attr\n+            attr::mark_used(&globs_attr);\n             krate.attrs.push(globs_attr);\n \n             krate.module = self.fold_mod(&krate.module);"}, {"sha": "6b5b98376b64bd16c730a9b9491b624c65f7258b", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50181add04279eaac2b078d36823035933844226/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=50181add04279eaac2b078d36823035933844226", "patch": "@@ -90,6 +90,7 @@ pub enum Lint {\n     UnusedUnsafe,\n     UnsafeBlock,\n     AttributeUsage,\n+    UnusedAttribute,\n     UnknownFeatures,\n     UnknownCrateType,\n     UnsignedNegate,\n@@ -288,6 +289,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: Warn\n     }),\n \n+    (\"unused_attribute\",\n+     LintSpec {\n+         lint: UnusedAttribute,\n+         desc: \"detects attributes that were not used by the compiler\",\n+         default: Allow\n+    }),\n+\n     (\"unused_variable\",\n      LintSpec {\n         lint: UnusedVariable,\n@@ -619,7 +627,7 @@ pub fn each_lint(sess: &session::Session,\n     let xs = [Allow, Warn, Deny, Forbid];\n     for &level in xs.iter() {\n         let level_name = level_to_str(level);\n-        for attr in attrs.iter().filter(|m| m.name().equiv(&level_name)) {\n+        for attr in attrs.iter().filter(|m| m.check_name(level_name)) {\n             let meta = attr.node.value;\n             let metas = match meta.node {\n                 ast::MetaList(_, ref metas) => metas,\n@@ -1137,6 +1145,15 @@ fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n     }\n }\n \n+fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n+    for attr in attrs.iter() {\n+        if !attr::is_used(attr) {\n+            cx.span_lint(UnusedAttribute, attr.span,\n+                         format!(\"unused attribute {}\", attr.name()).as_slice());\n+        }\n+    }\n+}\n+\n fn check_heap_expr(cx: &Context, e: &ast::Expr) {\n     let ty = ty::expr_ty(cx.tcx, e);\n     check_heap_type(cx, e.span, ty);\n@@ -1694,6 +1711,7 @@ impl<'a> Visitor<()> for Context<'a> {\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n             check_attrs_usage(cx, it.attrs.as_slice());\n+            check_unused_attribute(cx, it.attrs.as_slice());\n             check_raw_ptr_deriving(cx, it);\n \n             cx.visit_ids(|v| v.visit_item(it, ()));\n@@ -1900,6 +1918,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n         check_crate_attrs_usage(cx, krate.attrs.as_slice());\n         // since the root module isn't visited as an item (because it isn't an item), warn for it\n         // here.\n+        check_unused_attribute(cx, krate.attrs.as_slice());\n         check_missing_doc_attrs(cx,\n                                 None,\n                                 krate.attrs.as_slice(),"}, {"sha": "ac5792febbbbc10130e5ce33f0af4cd7f69b5066", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50181add04279eaac2b078d36823035933844226/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50181add04279eaac2b078d36823035933844226/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=50181add04279eaac2b078d36823035933844226", "patch": "@@ -35,9 +35,9 @@ pub fn is_used(attr: &Attribute) -> bool {\n }\n \n pub trait AttrMetaMethods {\n-    // This could be changed to `fn check_name(&self, name: InternedString) ->\n-    // bool` which would facilitate a side table recording which\n-    // attributes/meta items are used/unused.\n+    fn check_name(&self, name: &str) -> bool {\n+        name == self.name().get()\n+    }\n \n     /// Retrieve the name of the meta item, e.g. foo in #[foo],\n     /// #[foo=\"bar\"] and #[foo(bar)]\n@@ -59,6 +59,14 @@ pub trait AttrMetaMethods {\n }\n \n impl AttrMetaMethods for Attribute {\n+    fn check_name(&self, name: &str) -> bool {\n+        if name == self.name().get() {\n+            mark_used(self);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n     fn name(&self) -> InternedString { self.meta().name() }\n     fn value_str(&self) -> Option<InternedString> {\n         self.meta().value_str()"}, {"sha": "64b7e1c28c17853ef5fc6ee54a24351c320c879e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50181add04279eaac2b078d36823035933844226/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50181add04279eaac2b078d36823035933844226/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=50181add04279eaac2b078d36823035933844226", "patch": "@@ -474,7 +474,7 @@ pub fn expand_view_item(vi: &ast::ViewItem,\n     match vi.node {\n         ast::ViewItemExternCrate(..) => {\n             let should_load = vi.attrs.iter().any(|attr| {\n-                attr.name().get() == \"phase\" &&\n+                attr.check_name(\"phase\") &&\n                     attr.meta_item_list().map_or(false, |phases| {\n                         attr::contains_name(phases, \"syntax\")\n                     })"}]}