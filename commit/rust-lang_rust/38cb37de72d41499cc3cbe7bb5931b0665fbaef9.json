{"sha": "38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2IzN2RlNzJkNDE0OTljYzNjYmU3YmI1OTMxYjA2NjVmYmFlZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-15T22:36:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-15T22:36:15Z"}, "message": "auto merge of #16493 : kballard/rust/fix_drop_field_order, r=pnkfelix\n\nWhen a struct implements Drop, its fields should still drop in\r\ndeclaration order (just as they do when the struct does not implement\r\nDrop).\r\n\r\nFixes #16492.", "tree": {"sha": "29924a54bf0c37d2620a472df9da4bfd88c72856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29924a54bf0c37d2620a472df9da4bfd88c72856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "html_url": "https://github.com/rust-lang/rust/commit/38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38cb37de72d41499cc3cbe7bb5931b0665fbaef9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da501883884ab6add110ee1b8dea05ff8d8f013", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da501883884ab6add110ee1b8dea05ff8d8f013", "html_url": "https://github.com/rust-lang/rust/commit/2da501883884ab6add110ee1b8dea05ff8d8f013"}, {"sha": "b517b428913b2af11e27c2f9c24e20f02733d7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b517b428913b2af11e27c2f9c24e20f02733d7a3", "html_url": "https://github.com/rust-lang/rust/commit/b517b428913b2af11e27c2f9c24e20f02733d7a3"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "570f4d370425d9b70f2520eba58a158db1bd1f59", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38cb37de72d41499cc3cbe7bb5931b0665fbaef9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cb37de72d41499cc3cbe7bb5931b0665fbaef9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "patch": "@@ -250,8 +250,9 @@ fn trans_struct_drop<'a>(bcx: &'a Block<'a>,\n         let args = vec!(self_arg);\n \n         // Add all the fields as a value which needs to be cleaned at the end of\n-        // this scope.\n-        for (i, ty) in st.fields.iter().enumerate() {\n+        // this scope. Iterate in reverse order so a Drop impl doesn't reverse\n+        // the order in which fields get dropped.\n+        for (i, ty) in st.fields.iter().enumerate().rev() {\n             let llfld_a = adt::struct_field_ptr(variant_cx, &*st, value, i, false);\n             variant_cx.fcx.schedule_drop_mem(cleanup::CustomScope(field_scope),\n                                              llfld_a, *ty);"}, {"sha": "67af19b85175984aa49e64cfe613483f9b2af11a", "filename": "src/test/run-pass/issue-16492.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/38cb37de72d41499cc3cbe7bb5931b0665fbaef9/src%2Ftest%2Frun-pass%2Fissue-16492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cb37de72d41499cc3cbe7bb5931b0665fbaef9/src%2Ftest%2Frun-pass%2Fissue-16492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16492.rs?ref=38cb37de72d41499cc3cbe7bb5931b0665fbaef9", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+#![feature(unsafe_destructor)]\n+\n+use std::rc::Rc;\n+use std::cell::Cell;\n+\n+struct Field {\n+    number: uint,\n+    state: Rc<Cell<uint>>\n+}\n+\n+impl Field {\n+    fn new(number: uint, state: Rc<Cell<uint>>) -> Field {\n+        Field {\n+            number: number,\n+            state: state\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor] // because Field isn't Send\n+impl Drop for Field {\n+    fn drop(&mut self) {\n+        println!(\"Dropping field {}\", self.number);\n+        assert_eq!(self.state.get(), self.number);\n+        self.state.set(self.state.get()+1);\n+    }\n+}\n+\n+struct NoDropImpl {\n+    _one: Field,\n+    _two: Field,\n+    _three: Field\n+}\n+\n+struct HasDropImpl {\n+    _one: Field,\n+    _two: Field,\n+    _three: Field\n+}\n+\n+#[unsafe_destructor] // because HasDropImpl isn't Send\n+impl Drop for HasDropImpl {\n+    fn drop(&mut self) {\n+        println!(\"HasDropImpl.drop()\");\n+        assert_eq!(self._one.state.get(), 0);\n+        self._one.state.set(1);\n+    }\n+}\n+\n+pub fn main() {\n+    let state = Rc::new(Cell::new(1));\n+    let noImpl = NoDropImpl {\n+        _one: Field::new(1, state.clone()),\n+        _two: Field::new(2, state.clone()),\n+        _three: Field::new(3, state.clone())\n+    };\n+    drop(noImpl);\n+    assert_eq!(state.get(), 4);\n+\n+    state.set(0);\n+    let hasImpl = HasDropImpl {\n+        _one: Field::new(1, state.clone()),\n+        _two: Field::new(2, state.clone()),\n+        _three: Field::new(3, state.clone())\n+    };\n+    drop(hasImpl);\n+    assert_eq!(state.get(), 4);\n+}"}]}