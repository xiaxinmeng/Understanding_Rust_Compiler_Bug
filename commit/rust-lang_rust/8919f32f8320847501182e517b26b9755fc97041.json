{"sha": "8919f32f8320847501182e517b26b9755fc97041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MTlmMzJmODMyMDg0NzUwMTE4MmU1MTdiMjZiOTc1NWZjOTcwNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-03T23:05:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:03:59Z"}, "message": "Remove mutable fields from comm by using casts. Also mark the cast in cell.", "tree": {"sha": "86f97803cbc5c538ac55e3745384605aae6b7984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f97803cbc5c538ac55e3745384605aae6b7984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8919f32f8320847501182e517b26b9755fc97041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8919f32f8320847501182e517b26b9755fc97041", "html_url": "https://github.com/rust-lang/rust/commit/8919f32f8320847501182e517b26b9755fc97041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8919f32f8320847501182e517b26b9755fc97041/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56507798d9eb7bcf95bfca15b3c6f18997adae63", "url": "https://api.github.com/repos/rust-lang/rust/commits/56507798d9eb7bcf95bfca15b3c6f18997adae63", "html_url": "https://github.com/rust-lang/rust/commit/56507798d9eb7bcf95bfca15b3c6f18997adae63"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "072562233de97f2265bc388625d5b323c0e9a66f", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8919f32f8320847501182e517b26b9755fc97041/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8919f32f8320847501182e517b26b9755fc97041/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=8919f32f8320847501182e517b26b9755fc97041", "patch": "@@ -12,7 +12,7 @@\n Message passing\n */\n \n-use cast::transmute;\n+use cast::{transmute, transmute_mut};\n use cast;\n use either::{Either, Left, Right};\n use kinds::Owned;\n@@ -119,13 +119,15 @@ pub mod streamp {\n }\n \n /// An endpoint that can send many messages.\n+#[unsafe_mut_field(endp)]\n pub struct Chan<T> {\n-    mut endp: Option<streamp::client::Open<T>>\n+    endp: Option<streamp::client::Open<T>>\n }\n \n /// An endpoint that can receive many messages.\n+#[unsafe_mut_field(endp)]\n pub struct Port<T> {\n-    mut endp: Option<streamp::server::Open<T>>,\n+    endp: Option<streamp::server::Open<T>>,\n }\n \n /** Creates a `(Port, Chan)` pair.\n@@ -136,69 +138,87 @@ These allow sending or receiving an unlimited number of messages.\n pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n     let (c, s) = streamp::init();\n \n-    (Port { endp: Some(s) }, Chan { endp: Some(c) })\n+    (Port {\n+        endp: Some(s)\n+    }, Chan {\n+        endp: Some(c)\n+    })\n }\n \n impl<T: Owned> GenericChan<T> for Chan<T> {\n     #[inline(always)]\n     fn send(&self, x: T) {\n-        let mut endp = None;\n-        endp <-> self.endp;\n-        self.endp = Some(\n-            streamp::client::data(endp.unwrap(), x))\n+        unsafe {\n+            let mut endp = None;\n+            let mut self_endp = transmute_mut(&self.endp);\n+            endp <-> *self_endp;\n+            *self_endp = Some(streamp::client::data(endp.unwrap(), x))\n+        }\n     }\n }\n \n impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n     #[inline(always)]\n     fn try_send(&self, x: T) -> bool {\n-        let mut endp = None;\n-        endp <-> self.endp;\n-        match streamp::client::try_data(endp.unwrap(), x) {\n-            Some(next) => {\n-                self.endp = Some(next);\n-                true\n+        unsafe {\n+            let mut endp = None;\n+            let mut self_endp = transmute_mut(&self.endp);\n+            endp <-> *self_endp;\n+            match streamp::client::try_data(endp.unwrap(), x) {\n+                Some(next) => {\n+                    *self_endp = Some(next);\n+                    true\n+                }\n+                None => false\n             }\n-            None => false\n         }\n     }\n }\n \n impl<T: Owned> GenericPort<T> for Port<T> {\n     #[inline(always)]\n     fn recv(&self) -> T {\n-        let mut endp = None;\n-        endp <-> self.endp;\n-        let streamp::data(x, endp) = recv(endp.unwrap());\n-        self.endp = Some(endp);\n-        x\n+        unsafe {\n+            let mut endp = None;\n+            let mut self_endp = transmute_mut(&self.endp);\n+            endp <-> *self_endp;\n+            let streamp::data(x, endp) = recv(endp.unwrap());\n+            *self_endp = Some(endp);\n+            x\n+        }\n     }\n \n     #[inline(always)]\n     fn try_recv(&self) -> Option<T> {\n-        let mut endp = None;\n-        endp <-> self.endp;\n-        match try_recv(endp.unwrap()) {\n-            Some(streamp::data(x, endp)) => {\n-                self.endp = Some(endp);\n-                Some(x)\n+        unsafe {\n+            let mut endp = None;\n+            let mut self_endp = transmute_mut(&self.endp);\n+            endp <-> *self_endp;\n+            match try_recv(endp.unwrap()) {\n+                Some(streamp::data(x, endp)) => {\n+                    *self_endp = Some(endp);\n+                    Some(x)\n+                }\n+                None => None\n             }\n-            None => None\n         }\n     }\n }\n \n impl<T: Owned> Peekable<T> for Port<T> {\n     #[inline(always)]\n     fn peek(&self) -> bool {\n-        let mut endp = None;\n-        endp <-> self.endp;\n-        let peek = match endp {\n-            Some(ref mut endp) => peek(endp),\n-            None => fail!(~\"peeking empty stream\")\n-        };\n-        self.endp <-> endp;\n-        peek\n+        unsafe {\n+            let mut endp = None;\n+            let mut self_endp = transmute_mut(&self.endp);\n+            endp <-> *self_endp;\n+            let peek = match endp {\n+                Some(ref mut endp) => peek(endp),\n+                None => fail!(~\"peeking empty stream\")\n+            };\n+            *self_endp <-> endp;\n+            peek\n+        }\n     }\n }\n \n@@ -219,7 +239,6 @@ pub struct PortSet<T> {\n }\n \n pub impl<T: Owned> PortSet<T> {\n-\n     fn new() -> PortSet<T> {\n         PortSet {\n             ports: ~[]"}]}