{"sha": "3445d41f07aba83d83b2093381512a24b9fa974c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDVkNDFmMDdhYmE4M2Q4M2IyMDkzMzgxNTEyYTI0YjlmYTk3NGM=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-15T06:56:56Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-02-04T00:06:16Z"}, "message": "Add new lint: match with a single binding statement\n\n - Lint name: MATCH_SINGLE_BINDING", "tree": {"sha": "5a3b0db4a357fd2ab72de70ab1bee04bfbeef138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3b0db4a357fd2ab72de70ab1bee04bfbeef138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3445d41f07aba83d83b2093381512a24b9fa974c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3445d41f07aba83d83b2093381512a24b9fa974c", "html_url": "https://github.com/rust-lang/rust/commit/3445d41f07aba83d83b2093381512a24b9fa974c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3445d41f07aba83d83b2093381512a24b9fa974c/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536c255b43437b59243b7e2e167e95b4f80910f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/536c255b43437b59243b7e2e167e95b4f80910f7", "html_url": "https://github.com/rust-lang/rust/commit/536c255b43437b59243b7e2e167e95b4f80910f7"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "2f4e6a0fd4881f62255dff81d2d3f7a556e29aae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3445d41f07aba83d83b2093381512a24b9fa974c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3445d41f07aba83d83b2093381512a24b9fa974c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3445d41f07aba83d83b2093381512a24b9fa974c", "patch": "@@ -605,6 +605,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &matches::MATCH_OVERLAPPING_ARM,\n         &matches::MATCH_REF_PATS,\n         &matches::MATCH_WILD_ERR_ARM,\n+        &matches::MATCH_SINGLE_BINDING,\n         &matches::SINGLE_MATCH,\n         &matches::SINGLE_MATCH_ELSE,\n         &matches::WILDCARD_ENUM_MATCH_ARM,\n@@ -1206,6 +1207,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_WILD_ERR_ARM),\n+        LintId::of(&matches::MATCH_SINGLE_BINDING),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n@@ -1483,6 +1485,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::MATCH_AS_REF),\n+        LintId::of(&matches::MATCH_SINGLE_BINDING),\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n         LintId::of(&methods::CLONE_ON_COPY),"}, {"sha": "b5cf12b09472ad3a4becc9f0bf2d9ce1fca42c8d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3445d41f07aba83d83b2093381512a24b9fa974c/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3445d41f07aba83d83b2093381512a24b9fa974c/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3445d41f07aba83d83b2093381512a24b9fa974c", "patch": "@@ -3,9 +3,9 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, is_allowed, is_expn_of, is_wild, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n-    walk_ptrs_ty,\n+    span_lint_and_help, span_lint_and_note, \n+    expr_block, in_macro, is_allowed, is_expn_of, is_wild, match_qpath, match_type, multispan_sugg, remove_blocks,\n+    snippet, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n@@ -245,6 +245,33 @@ declare_clippy_lint! {\n     \"a wildcard pattern used with others patterns in same match arm\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for useless match that binds to only one value.\n+    ///\n+    /// **Why is this bad?** Readability and needless complexity.\n+    ///\n+    /// **Known problems:** This situation frequently happen in macros, so can't lint there.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # let a = 1;\n+    /// # let b = 2;\n+    ///\n+    /// // Bad\n+    /// match (a, b) {\n+    ///     (c, d) => {\n+    ///         // useless match\n+    ///     }\n+    /// }\n+    ///\n+    /// // Good\n+    /// let (c, d) = (a, b);\n+    /// ```\n+    pub MATCH_SINGLE_BINDING,\n+    complexity,\n+    \"a match with a single binding instead of using `let` statement\"\n+}\n+\n declare_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -254,7 +281,8 @@ declare_lint_pass!(Matches => [\n     MATCH_WILD_ERR_ARM,\n     MATCH_AS_REF,\n     WILDCARD_ENUM_MATCH_ARM,\n-    WILDCARD_IN_OR_PATTERNS\n+    WILDCARD_IN_OR_PATTERNS,\n+    MATCH_SINGLE_BINDING,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n@@ -270,6 +298,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n             check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n             check_wild_in_or_pats(cx, arms);\n+            check_match_single_binding(cx, ex, arms, expr);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms, expr);\n@@ -712,6 +741,29 @@ fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n     }\n }\n \n+fn check_match_single_binding(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n+    if in_macro(expr.span) {\n+        return;\n+    }\n+    if arms.len() == 1 {\n+        let bind_names = arms[0].pat.span;\n+        let matched_vars = ex.span;\n+        span_lint_and_sugg(\n+            cx,\n+            MATCH_SINGLE_BINDING,\n+            expr.span,\n+            \"this match could be written as a `let` statement\",\n+            \"try this\",\n+            format!(\n+                \"let {} = {};\",\n+                snippet(cx, bind_names, \"..\"),\n+                snippet(cx, matched_vars, \"..\")\n+            ),\n+            Applicability::HasPlaceholders,\n+        );\n+    }\n+}\n+\n /// Gets all arms that are unbounded `PatRange`s.\n fn all_ranges<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "816a7e7197c714c80cb974d65e2ba53ffc2b7f09", "filename": "tests/ui/match_single_binding.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3445d41f07aba83d83b2093381512a24b9fa974c/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3445d41f07aba83d83b2093381512a24b9fa974c/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=3445d41f07aba83d83b2093381512a24b9fa974c", "patch": "@@ -0,0 +1,25 @@\n+#![warn(clippy::match_single_binding)]\n+#[allow(clippy::many_single_char_names)]\n+\n+fn main() {\n+    let a = 1;\n+    let b = 2;\n+    let c = 3;\n+    // Lint\n+    match (a, b, c) {\n+        (x, y, z) => {\n+            println!(\"{} {} {}\", x, y, z);\n+        },\n+    }\n+    // Ok\n+    match a {\n+        2 => println!(\"2\"),\n+        _ => println!(\"Not 2\"),\n+    }\n+    // Ok\n+    let d = Some(5);\n+    match d {\n+        Some(d) => println!(\"5\"),\n+        _ => println!(\"None\"),\n+    }\n+}"}, {"sha": "2fad6aab32c119e8d42c11329277837aa0043029", "filename": "tests/ui/match_single_binding.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3445d41f07aba83d83b2093381512a24b9fa974c/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3445d41f07aba83d83b2093381512a24b9fa974c/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=3445d41f07aba83d83b2093381512a24b9fa974c", "patch": "@@ -0,0 +1,14 @@\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:9:5\n+   |\n+LL | /     match (a, b, c) {\n+LL | |         (x, y, z) => {\n+LL | |             println!(\"{} {} {}\", x, y, z);\n+LL | |         },\n+LL | |     }\n+   | |_____^ help: try this: `let (x, y, z) = (a, b, c);`\n+   |\n+   = note: `-D clippy::match-single-binding` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}