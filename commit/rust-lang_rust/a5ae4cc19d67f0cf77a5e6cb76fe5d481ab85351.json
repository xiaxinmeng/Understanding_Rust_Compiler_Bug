{"sha": "a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YWU0Y2MxOWQ2N2YwY2Y3N2E1ZTZjYjc2ZmU1ZDQ4MWFiODUzNTE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-21T22:52:01Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-22T15:27:31Z"}, "message": "TRPL: attributes & conditional compilation", "tree": {"sha": "0512db8cfbea3645f5b9dcd226edcce9d459481b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0512db8cfbea3645f5b9dcd226edcce9d459481b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "html_url": "https://github.com/rust-lang/rust/commit/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3860240b0e124f38483ea4bd070b61d362871ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/3860240b0e124f38483ea4bd070b61d362871ece", "html_url": "https://github.com/rust-lang/rust/commit/3860240b0e124f38483ea4bd070b61d362871ece"}], "stats": {"total": 163, "additions": 160, "deletions": 3}, "files": [{"sha": "2d1739c145180557539ba94100125a32cc4efa69", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "patch": "@@ -9,6 +9,7 @@\n     * [The Stack and the Heap](the-stack-and-the-heap.md)\n     * [Debug and Display](debug-and-display.md)\n     * [Testing](testing.md)\n+    * [Conditional Compilation](conditional-compilation.md)\n     * [Documentation](documentation.md)\n     * [Iterators](iterators.md)\n     * [Concurrency](concurrency.md)\n@@ -47,7 +48,6 @@\n     * [`const`](const.md)\n     * [Tuple Structs](tuple-structs.md)\n     * [Attributes](attributes.md)\n-    * [Conditional Compilation](conditional-compilation.md)\n     * [`type` aliases](type-aliases.md)\n     * [Casting between types](casting-between-types.md)\n     * [Associated Types](associated-types.md)"}, {"sha": "54195a5063b7c0b03c3817b59a351c2c7380973e", "filename": "src/doc/trpl/attributes.md", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fattributes.md?ref=a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "patch": "@@ -1,3 +1,70 @@\n % Attributes\n \n-Coming Soon!\n+Declarations can be annotated with \u2018attributes\u2019 in Rust. They look like this:\n+\n+```rust\n+#[test]\n+# fn foo() {}\n+```\n+\n+or like this:\n+\n+```rust\n+# mod foo {\n+#![test]\n+# }\n+```\n+\n+The difference between the two is the `!`, which changes what the attribute\n+applies to:\n+\n+```rust,ignore\n+#[foo]\n+struct Foo;\n+\n+mod bar {\n+    #![bar]\n+}\n+```\n+\n+The `#[foo]` attribute applies to the next item, which is the `struct`\n+declaration. The `#![bar]` attribute applies to the item enclosing it, which is\n+the `mod` declaration. Otherwise, they\u2019re the same. Both change the meaning of\n+the item they\u2019re attached to somehow.\n+\n+For example, consider a function like this:\n+\n+```rust\n+#[test]\n+fn check() {\n+    assert_eq!(2, 1 + 1);\n+}\n+```\n+\n+It is marked with `#[test]`. This means it\u2019s special: when you run\n+[tests][tests], this function will execute. When you compile as usual, it won\u2019t\n+even be included. This function is now a test function.\n+\n+[tests]: testing.html\n+\n+Attributes may also have additional data:\n+\n+```rust\n+#[inline(always)]\n+fn super_fast_fn() {\n+# }\n+```\n+\n+Or even keys and values:\n+\n+```rust\n+#[cfg(target_os = \"macos\")]\n+mod macos_only {\n+# }\n+```\n+\n+Rust attributes are used for a number of different things. There is a full list\n+of attributes [in the reference][reference]. Currently, you are not allowed to\n+create your own attributes, the Rust compiler defines them.\n+\n+[reference]: reference.html#attributes"}, {"sha": "3969063b1240006aabb9bd555b8e30533a0c5e04", "filename": "src/doc/trpl/conditional-compilation.md", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md?ref=a5ae4cc19d67f0cf77a5e6cb76fe5d481ab85351", "patch": "@@ -1,3 +1,93 @@\n % Conditional Compilation\n \n-Coming Soon!\n+Rust has a special attribute, `#[cfg]`, which allows you to compile code\n+based on a flag passed to the compiler. It has two forms:\n+\n+```rust\n+#[cfg(foo)]\n+# fn foo() {}\n+\n+#[cfg(bar = \"baz\")]\n+# fn bar() {}\n+```\n+\n+They also have some helpers:\n+\n+```rust\n+#[cfg(any(unix, windows))]\n+# fn foo() {}\n+\n+#[cfg(all(unix, target_pointer_width = \"32\"))]\n+# fn bar() {}\n+\n+#[cfg(not(foo))]\n+# fn not_foo() {}\n+```\n+\n+These can nest arbitrarily:\n+\n+```rust\n+#[cfg(any(not(unix), all(target_os=\"macos\", target_arch = \"powerpc\")))]\n+# fn foo() {}\n+```\n+\n+As for how to enable or disable these switches, if you\u2019re using Cargo,\n+they get set in the [`[features]` section][features] of your `Cargo.toml`:\n+\n+[features]: http://doc.crates.io/manifest.html#the-[features]-section\n+\n+```toml\n+[features]\n+# no features by default\n+default = []\n+\n+# The \u201csecure-password\u201d feature depends on the bcrypt package.\n+secure-password = [\"bcrypt\"]\n+```\n+\n+When you do this, Cargo passes along a flag to `rustc`:\n+\n+```\n+--cfg feature=\"${feature_name}\"\n+```\n+\n+The sum of these `cfg` flags will determine which ones get activated, and\n+therefore, which code gets compiled. Let\u2019s take this code:\n+\n+```rust\n+#[cfg(feature = \"foo\")]\n+mod foo {\n+}\n+```\n+\n+If we compile it with `cargo build --features \"foo\"`, it will send the `--cfg\n+feature=\"foo\"` flag to `rustc`, and the output will have the `mod foo` in it.\n+If we compile it with a regular `cargo build`, no extra flags get passed on,\n+and so, no `foo` module will exist.\n+\n+# cfg_attr\n+\n+You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n+\n+```rust\n+#[cfg_attr(a, b)]\n+# fn foo() {}\n+```\n+\n+Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwise.\n+\n+# cfg!\n+\n+The `cfg!` [syntax extension][compilerplugins] lets you use these kinds of flags\n+elsewhere in your code, too:\n+\n+```rust\n+if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n+    println!(\"Think Different!\");\n+}\n+```\n+\n+[compilerplugins]: compiler-plugins.html\n+\n+These will be replaced by a `true` or `false` at compile-time, depending on the\n+configuration settings."}]}