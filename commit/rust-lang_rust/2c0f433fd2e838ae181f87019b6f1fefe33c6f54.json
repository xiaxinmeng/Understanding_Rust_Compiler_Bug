{"sha": "2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "node_id": "C_kwDOAAsO6NoAKDJjMGY0MzNmZDJlODM4YWUxODFmODcwMTliNmYxZmVmZTMzYzZmNTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-07T11:13:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-07T11:13:15Z"}, "message": "Merge #10699\n\n10699: internal: Make CompletionItem `label` and `lookup` fields `SmolStr`s r=Veykril a=Veykril\n\nThis replaces a bunch of String clones with SmolStr clones, though also makes a few parts a bit more expensive(mainly things involving `format!`ted strings as labels).\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0cfa2207e97a667712dd88d352440f4c40ec6376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cfa2207e97a667712dd88d352440f4c40ec6376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhh7TLCRBK7hj4Ov3rIwAA9zUIAJdAhwo3UEPQkDfEqU8YM44R\na6cn97dArhLSU/aHlufEeVHWIIud+mIMi8gdSE7IWdle2XOCfRdz0/JuEkGm5OIe\nQb16oBV30lCc8Hnt+eNzcFXu1U5nl7hVZtzHG/dxn2JH0AF+5cH3AaZLcLNf/QCX\nKT70yb/Q5xWtSTyAh7xCwYlXuLwis+0+DMZ3vgYda8KZCR9ekx8GBtOpGw4432/v\nge3wN1oeyls5ehI37ZIOrriKJrxD8Nxu7S19kK79VRwhbCyFZbhwNGK5ql2hvCbp\nGE02TZKs/ygb/+h8cJcVQLPCEyVJdCFXVhHidrdwpMba77Ndsg4rYl6q+P5lMds=\n=1tvf\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cfa2207e97a667712dd88d352440f4c40ec6376\nparent e4ce6c7468631788868e6e20c941ed4c5cbcf220\nparent 2f5afba9f8ce7b7133ba1c4d8e009462cecb17f5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636283595 +0000\ncommitter GitHub <noreply@github.com> 1636283595 +0000\n\nMerge #10699\n\n10699: internal: Make CompletionItem `label` and `lookup` fields `SmolStr`s r=Veykril a=Veykril\n\nThis replaces a bunch of String clones with SmolStr clones, though also makes a few parts a bit more expensive(mainly things involving `format!`ted strings as labels).\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "html_url": "https://github.com/rust-lang/rust/commit/2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ce6c7468631788868e6e20c941ed4c5cbcf220", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ce6c7468631788868e6e20c941ed4c5cbcf220", "html_url": "https://github.com/rust-lang/rust/commit/e4ce6c7468631788868e6e20c941ed4c5cbcf220"}, {"sha": "2f5afba9f8ce7b7133ba1c4d8e009462cecb17f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5afba9f8ce7b7133ba1c4d8e009462cecb17f5", "html_url": "https://github.com/rust-lang/rust/commit/2f5afba9f8ce7b7133ba1c4d8e009462cecb17f5"}], "stats": {"total": 203, "additions": 94, "deletions": 109}, "files": [{"sha": "f867a903b01049020001fb0dcc9a47dd6000c8c0", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -66,24 +66,21 @@ impl CfgOptions {\n         }\n     }\n \n-    pub fn get_cfg_keys(&self) -> Vec<&SmolStr> {\n-        self.enabled\n-            .iter()\n-            .map(|x| match x {\n-                CfgAtom::Flag(key) => key,\n-                CfgAtom::KeyValue { key, .. } => key,\n-            })\n-            .collect()\n+    pub fn get_cfg_keys(&self) -> impl Iterator<Item = &SmolStr> {\n+        self.enabled.iter().map(|x| match x {\n+            CfgAtom::Flag(key) => key,\n+            CfgAtom::KeyValue { key, .. } => key,\n+        })\n     }\n \n-    pub fn get_cfg_values(&self, cfg_key: &str) -> Vec<&SmolStr> {\n-        self.enabled\n-            .iter()\n-            .filter_map(|x| match x {\n-                CfgAtom::KeyValue { key, value } if cfg_key == key => Some(value),\n-                _ => None,\n-            })\n-            .collect()\n+    pub fn get_cfg_values<'a>(\n+        &'a self,\n+        cfg_key: &'a str,\n+    ) -> impl Iterator<Item = &'a SmolStr> + 'a {\n+        self.enabled.iter().filter_map(move |x| match x {\n+            CfgAtom::KeyValue { key, value } if cfg_key == key => Some(value),\n+            _ => None,\n+        })\n     }\n }\n "}, {"sha": "e86f38aaa41263f2aec818687054acdeb8a09985", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -104,7 +104,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n                 let mut item = CompletionItem::new(\n                     CompletionItemKind::Attribute,\n                     ctx.source_range(),\n-                    name.to_string(),\n+                    name.to_smol_str(),\n                 );\n                 if let Some(docs) = mac.docs(ctx.sema.db) {\n                     item.documentation(docs);"}, {"sha": "1a10531a1bd61665ba4a45b60ac294b3e34a26b4", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -31,26 +31,21 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(\"target_endian\") => [\"little\", \"big\"].into_iter().for_each(add_completion),\n         Some(name) => {\n             if let Some(krate) = ctx.krate {\n-                krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n-                    let mut item = CompletionItem::new(\n-                        CompletionItemKind::Attribute,\n-                        ctx.source_range(),\n-                        s.as_str(),\n-                    );\n-                    item.insert_text(format!(r#\"\"{}\"\"#, s));\n+                krate.potential_cfg(ctx.db).get_cfg_values(&name).cloned().for_each(|s| {\n+                    let insert_text = format!(r#\"\"{}\"\"#, s);\n+                    let mut item =\n+                        CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), s);\n+                    item.insert_text(insert_text);\n \n                     acc.add(item.build());\n                 })\n             };\n         }\n         None => {\n             if let Some(krate) = ctx.krate {\n-                krate.potential_cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n-                    let item = CompletionItem::new(\n-                        CompletionItemKind::Attribute,\n-                        ctx.source_range(),\n-                        s.as_str(),\n-                    );\n+                krate.potential_cfg(ctx.db).get_cfg_keys().cloned().for_each(|s| {\n+                    let item =\n+                        CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), s);\n                     acc.add(item.build());\n                 })\n             }"}, {"sha": "b9032318ece8ec0c3106a3da9afc3b9082767691", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -3,7 +3,7 @@ use hir::{HasAttrs, MacroDef, MacroKind};\n use ide_db::helpers::{import_assets::ImportAssets, insert_use::ImportScope, FamousDefs};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{ast, SyntaxKind};\n+use syntax::{ast, SmolStr, SyntaxKind};\n \n use crate::{\n     completions::flyimport::compute_fuzzy_completion_order_key,\n@@ -30,7 +30,6 @@ pub(super) fn complete_derive(\n         }\n \n         let name = name.to_smol_str();\n-        let label;\n         let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n             // show derive dependencies for `core`/`std` derives\n             Some((core, mac_krate)) if core == mac_krate => {\n@@ -48,13 +47,13 @@ pub(super) fn complete_derive(\n                         },\n                     ));\n                     let lookup = components.join(\", \");\n-                    label = components.iter().rev().join(\", \");\n-                    (label.as_str(), Some(lookup))\n+                    let label = Itertools::intersperse(components.into_iter().rev(), \", \");\n+                    (SmolStr::from_iter(label), Some(lookup))\n                 } else {\n-                    (&*name, None)\n+                    (name, None)\n                 }\n             }\n-            _ => (&*name, None),\n+            _ => (name, None),\n         };\n \n         let mut item =\n@@ -68,7 +67,7 @@ pub(super) fn complete_derive(\n         item.add_to(acc);\n     }\n \n-    flyimport_attribute(ctx, acc);\n+    flyimport_attribute(acc, ctx);\n }\n \n fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n@@ -83,7 +82,7 @@ fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n     result\n }\n \n-fn flyimport_attribute(ctx: &CompletionContext, acc: &mut Completions) -> Option<()> {\n+fn flyimport_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if ctx.token.kind() != SyntaxKind::IDENT {\n         return None;\n     };\n@@ -115,7 +114,7 @@ fn flyimport_attribute(ctx: &CompletionContext, acc: &mut Completions) -> Option\n                 let mut item = CompletionItem::new(\n                     CompletionItemKind::Attribute,\n                     ctx.source_range(),\n-                    mac.name(ctx.db)?.to_string(),\n+                    mac.name(ctx.db)?.to_smol_str(),\n                 );\n                 item.add_import(ImportEdit { import, scope: import_scope.clone() });\n                 if let Some(docs) = mac.docs(ctx.db) {"}, {"sha": "5acda464982cbf21a20d75ccbaecc17b539763bd", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -30,6 +30,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         }\n         func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n             if let Some(pat) = param.pat() {\n+                // FIXME: We should be able to turn these into SmolStr without having to allocate a String\n                 let text = param.syntax().text().to_string();\n                 let lookup = pat.syntax().text().to_string();\n                 params.entry(text).or_insert(lookup);\n@@ -59,7 +60,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n     let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n     if ctx.impl_def.is_some() && me?.param_list()?.params().next().is_none() {\n-        self_completion_items.iter().for_each(|self_item| {\n+        self_completion_items.into_iter().for_each(|self_item| {\n             add_new_item_to_acc(ctx, acc, self_item.to_string(), self_item.to_string())\n         });\n     }"}, {"sha": "36d25d5d029334e8423607883e04df13c6506df5", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n \n-    let mut add_keyword = |kw, snippet| add_keyword(ctx, acc, kw, snippet);\n+    let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n \n     let expects_assoc_item = ctx.expects_assoc_item();\n     let has_block_expr_parent = ctx.has_block_expr_parent();\n@@ -157,7 +157,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     )\n }\n \n-fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n+fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n     let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n \n     match ctx.config.snippet_cap {"}, {"sha": "385bf59cde4f343a812dab17f7863df6ce0027f8", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 if ctx.in_use_tree() {\n                     if let hir::ScopeDef::Unknown = def {\n                         if let Some(ast::NameLike::NameRef(name_ref)) = ctx.name_syntax.as_ref() {\n-                            if name_ref.syntax().text() == name.to_string().as_str() {\n+                            if name_ref.syntax().text() == name.to_smol_str().as_str() {\n                                 // for `use self::foo$0`, don't suggest `foo` as a completion\n                                 cov_mark::hit!(dont_complete_current_use);\n                                 continue;"}, {"sha": "46da7cfa372f059d291e570d084e903c01036fba", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -133,7 +133,7 @@ fn add_function_impl(\n     func: hir::Function,\n     impl_def: hir::Impl,\n ) {\n-    let fn_name = func.name(ctx.db).to_string();\n+    let fn_name = func.name(ctx.db).to_smol_str();\n \n     let label = if func.assoc_fn_params(ctx.db).is_empty() {\n         format!(\"fn {}()\", fn_name)\n@@ -205,12 +205,12 @@ fn add_type_alias_impl(\n     ctx: &CompletionContext,\n     type_alias: hir::TypeAlias,\n ) {\n-    let alias_name = type_alias.name(ctx.db).to_string();\n+    let alias_name = type_alias.name(ctx.db).to_smol_str();\n \n     let snippet = format!(\"type {} = \", alias_name);\n \n     let range = replacement_range(ctx, type_def_node);\n-    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), snippet.clone());\n+    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), &snippet);\n     item.text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n         .set_documentation(type_alias.docs(ctx.db));\n@@ -224,7 +224,7 @@ fn add_const_impl(\n     const_: hir::Const,\n     impl_def: hir::Impl,\n ) {\n-    let const_name = const_.name(ctx.db).map(|n| n.to_string());\n+    let const_name = const_.name(ctx.db).map(|n| n.to_smol_str());\n \n     if let Some(const_name) = const_name {\n         if let Some(source) = const_.source(ctx.db) {\n@@ -238,8 +238,7 @@ fn add_const_impl(\n                 let snippet = make_const_compl_syntax(&transformed_const);\n \n                 let range = replacement_range(ctx, const_def_node);\n-                let mut item =\n-                    CompletionItem::new(SymbolKind::Const, ctx.source_range(), snippet.clone());\n+                let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), &snippet);\n                 item.text_edit(TextEdit::replace(range, snippet))\n                     .lookup_by(const_name)\n                     .set_documentation(const_.docs(ctx.db));"}, {"sha": "ebe227d260a7bc8523a41967a3960f54e0ded818", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -12,8 +12,8 @@ use ide_db::{\n     SymbolKind,\n };\n use smallvec::SmallVec;\n-use stdx::{format_to, impl_from, never};\n-use syntax::{algo, TextRange};\n+use stdx::{impl_from, never};\n+use syntax::{algo, SmolStr, TextRange};\n use text_edit::TextEdit;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n@@ -22,7 +22,7 @@ use text_edit::TextEdit;\n #[derive(Clone)]\n pub struct CompletionItem {\n     /// Label in the completion pop up which identifies completion.\n-    label: String,\n+    label: SmolStr,\n     /// Range of identifier that is being completed.\n     ///\n     /// It should be used primarily for UI, but we also use this to convert\n@@ -46,7 +46,7 @@ pub struct CompletionItem {\n     ///\n     /// That is, in `foo.bar$0` lookup of `abracadabra` will be accepted (it\n     /// contains `bar` sub sequence), and `quux` will rejected.\n-    lookup: Option<String>,\n+    lookup: Option<SmolStr>,\n \n     /// Additional info to show in the UI pop up.\n     detail: Option<String>,\n@@ -268,7 +268,7 @@ impl CompletionItem {\n     pub(crate) fn new(\n         kind: impl Into<CompletionItemKind>,\n         source_range: TextRange,\n-        label: impl Into<String>,\n+        label: impl Into<SmolStr>,\n     ) -> Builder {\n         let label = label.into();\n         Builder {\n@@ -379,13 +379,13 @@ impl ImportEdit {\n pub(crate) struct Builder {\n     source_range: TextRange,\n     imports_to_add: SmallVec<[ImportEdit; 1]>,\n-    trait_name: Option<String>,\n-    label: String,\n+    trait_name: Option<SmolStr>,\n+    label: SmolStr,\n     insert_text: Option<String>,\n     is_snippet: bool,\n     detail: Option<String>,\n     documentation: Option<Documentation>,\n-    lookup: Option<String>,\n+    lookup: Option<SmolStr>,\n     kind: CompletionItemKind,\n     text_edit: Option<TextEdit>,\n     deprecated: bool,\n@@ -400,25 +400,21 @@ impl Builder {\n \n         let mut label = self.label;\n         let mut lookup = self.lookup;\n-        let mut insert_text = self.insert_text;\n+        let insert_text = self.insert_text.unwrap_or_else(|| label.to_string());\n \n         if let [import_edit] = &*self.imports_to_add {\n             // snippets can have multiple imports, but normal completions only have up to one\n             if let Some(original_path) = import_edit.import.original_path.as_ref() {\n                 lookup = lookup.or_else(|| Some(label.clone()));\n-                insert_text = insert_text.or_else(|| Some(label.clone()));\n-                format_to!(label, \" (use {})\", original_path)\n+                label = SmolStr::from(format!(\"{} (use {})\", label, original_path));\n             }\n         } else if let Some(trait_name) = self.trait_name {\n-            insert_text = insert_text.or_else(|| Some(label.clone()));\n-            format_to!(label, \" (as {})\", trait_name)\n+            label = SmolStr::from(format!(\"{} (as {})\", label, trait_name));\n         }\n \n         let text_edit = match self.text_edit {\n             Some(it) => it,\n-            None => {\n-                TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n-            }\n+            None => TextEdit::replace(self.source_range, insert_text),\n         };\n \n         CompletionItem {\n@@ -437,16 +433,16 @@ impl Builder {\n             import_to_add: self.imports_to_add,\n         }\n     }\n-    pub(crate) fn lookup_by(&mut self, lookup: impl Into<String>) -> &mut Builder {\n+    pub(crate) fn lookup_by(&mut self, lookup: impl Into<SmolStr>) -> &mut Builder {\n         self.lookup = Some(lookup.into());\n         self\n     }\n-    pub(crate) fn label(&mut self, label: impl Into<String>) -> &mut Builder {\n+    pub(crate) fn label(&mut self, label: impl Into<SmolStr>) -> &mut Builder {\n         self.label = label.into();\n         self\n     }\n-    pub(crate) fn trait_name(&mut self, trait_name: impl Into<String>) -> &mut Builder {\n-        self.trait_name = Some(trait_name.into());\n+    pub(crate) fn trait_name(&mut self, trait_name: SmolStr) -> &mut Builder {\n+        self.trait_name = Some(trait_name);\n         self\n     }\n     pub(crate) fn insert_text(&mut self, insert_text: impl Into<String>) -> &mut Builder {"}, {"sha": "5ae52f3cc9149df71e41c5175e28fd77b86a4464", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -83,11 +83,11 @@ pub(crate) fn render_field(\n     ty: &hir::Type,\n ) -> CompletionItem {\n     let is_deprecated = ctx.is_deprecated(field);\n-    let name = field.name(ctx.db()).to_string();\n+    let name = field.name(ctx.db()).to_smol_str();\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n-        receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name)),\n+        receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name).into()),\n     );\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(ctx.completion, ty),\n@@ -97,7 +97,7 @@ pub(crate) fn render_field(\n     item.detail(ty.display(ctx.db()).to_string())\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n-        .lookup_by(name.as_str());\n+        .lookup_by(name.clone());\n     let is_keyword = SyntaxKind::from_keyword(name.as_str()).is_some();\n     if is_keyword && !matches!(name.as_str(), \"self\" | \"crate\" | \"super\" | \"Self\") {\n         item.insert_text(format!(\"r#{}\", name));\n@@ -199,7 +199,7 @@ fn render_resolution_(\n             let mut item = CompletionItem::new(\n                 CompletionItemKind::UnresolvedReference,\n                 ctx.source_range(),\n-                local_name.to_string(),\n+                local_name.to_smol_str(),\n             );\n             if let Some(import_to_add) = import_to_add {\n                 item.add_import(import_to_add);\n@@ -208,7 +208,7 @@ fn render_resolution_(\n         }\n     };\n \n-    let local_name = local_name.to_string();\n+    let local_name = local_name.to_smol_str();\n     let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.clone());\n     if let hir::ScopeDef::Local(local) = resolution {\n         let ty = local.ty(ctx.db());"}, {"sha": "707b6533b5423e6a6556c5a07d377da56e97c2e9", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -2,10 +2,7 @@\n \n use hir::{AsAssocItem, HasSource};\n use ide_db::SymbolKind;\n-use syntax::{\n-    ast::{Const, HasName},\n-    display::const_label,\n-};\n+use syntax::{ast::Const, display::const_label};\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n@@ -27,7 +24,7 @@ impl<'a> ConstRender<'a> {\n     }\n \n     fn render(self) -> Option<CompletionItem> {\n-        let name = self.name()?;\n+        let name = self.const_.name(self.ctx.db())?.to_smol_str();\n         let detail = self.detail();\n \n         let mut item =\n@@ -42,18 +39,14 @@ impl<'a> ConstRender<'a> {\n         let db = self.ctx.db();\n         if let Some(actm) = self.const_.as_assoc_item(db) {\n             if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                item.trait_name(trt.name(db).to_string());\n+                item.trait_name(trt.name(db).to_smol_str());\n                 item.insert_text(name);\n             }\n         }\n \n         Some(item.build())\n     }\n \n-    fn name(&self) -> Option<String> {\n-        self.ast_node.name().map(|name| name.text().to_string())\n-    }\n-\n     fn detail(&self) -> String {\n         const_label(&self.ast_node)\n     }"}, {"sha": "f598b414a73b4238b11c9974bec2a5d1698b0083", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn render_method(\n #[derive(Debug)]\n struct FunctionRender<'a> {\n     ctx: RenderContext<'a>,\n-    name: String,\n+    name: hir::Name,\n     receiver: Option<hir::Name>,\n     func: hir::Function,\n     /// NB: having `ast::Fn` here might or might not be a good idea. The problem\n@@ -67,7 +67,7 @@ impl<'a> FunctionRender<'a> {\n         fn_: hir::Function,\n         is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n-        let name = local_name.unwrap_or_else(|| fn_.name(ctx.db())).to_string();\n+        let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()));\n         let ast_node = fn_.source(ctx.db())?.value;\n \n         Some(FunctionRender { ctx, name, receiver, func: fn_, ast_node, is_method })\n@@ -77,7 +77,7 @@ impl<'a> FunctionRender<'a> {\n         let params = self.params();\n         let call = match &self.receiver {\n             Some(receiver) => format!(\"{}.{}\", receiver, &self.name),\n-            None => self.name.clone(),\n+            None => self.name.to_string(),\n         };\n         let mut item = CompletionItem::new(self.kind(), self.ctx.source_range(), call.clone());\n         item.set_documentation(self.ctx.docs(self.func))\n@@ -91,15 +91,15 @@ impl<'a> FunctionRender<'a> {\n             let db = self.ctx.db();\n             if let Some(actm) = self.func.as_assoc_item(db) {\n                 if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                    item.trait_name(trt.name(db).to_string());\n+                    item.trait_name(trt.name(db).to_smol_str());\n                 }\n             }\n         }\n \n         if let Some(import_to_add) = import_to_add {\n             item.add_import(import_to_add);\n         }\n-        item.lookup_by(self.name);\n+        item.lookup_by(self.name.to_smol_str());\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {"}, {"sha": "1f76583adbbf081f2b74010855f6f1bea13171c1", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -2,7 +2,7 @@\n \n use hir::HasSource;\n use ide_db::SymbolKind;\n-use syntax::display::macro_label;\n+use syntax::{display::macro_label, SmolStr};\n \n use crate::{\n     context::CallKind,\n@@ -23,7 +23,7 @@ pub(crate) fn render_macro(\n #[derive(Debug)]\n struct MacroRender<'a> {\n     ctx: RenderContext<'a>,\n-    name: String,\n+    name: SmolStr,\n     macro_: hir::MacroDef,\n     docs: Option<hir::Documentation>,\n     bra: &'static str,\n@@ -32,7 +32,7 @@ struct MacroRender<'a> {\n \n impl<'a> MacroRender<'a> {\n     fn new(ctx: RenderContext<'a>, name: hir::Name, macro_: hir::MacroDef) -> MacroRender<'a> {\n-        let name = name.to_string();\n+        let name = name.to_smol_str();\n         let docs = ctx.docs(macro_);\n         let docs_str = docs.as_ref().map_or(\"\", |s| s.as_str());\n         let (bra, ket) = guess_macro_braces(&name, docs_str);\n@@ -47,7 +47,7 @@ impl<'a> MacroRender<'a> {\n         } else {\n             Some(self.ctx.source_range())\n         }?;\n-        let mut item = CompletionItem::new(SymbolKind::Macro, source_range, &self.label());\n+        let mut item = CompletionItem::new(SymbolKind::Macro, source_range, self.label());\n         item.set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n             .set_detail(self.detail());\n@@ -72,7 +72,7 @@ impl<'a> MacroRender<'a> {\n             }\n             _ => {\n                 cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n-                item.insert_text(&self.name);\n+                item.insert_text(&*self.name);\n             }\n         };\n \n@@ -84,18 +84,18 @@ impl<'a> MacroRender<'a> {\n             && !matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac))\n     }\n \n-    fn label(&self) -> String {\n+    fn label(&self) -> SmolStr {\n         if self.needs_bang() && self.ctx.snippet_cap().is_some() {\n-            format!(\"{}!{}\u2026{}\", self.name, self.bra, self.ket)\n+            SmolStr::from_iter([&*self.name, \"!\", self.bra, \"\u2026\", self.ket])\n         } else if self.macro_.kind() == hir::MacroKind::Derive {\n-            self.name.to_string()\n+            self.name.clone()\n         } else {\n             self.banged_name()\n         }\n     }\n \n-    fn banged_name(&self) -> String {\n-        format!(\"{}!\", self.name)\n+    fn banged_name(&self) -> SmolStr {\n+        SmolStr::from_iter([&*self.name, \"!\"])\n     }\n \n     fn detail(&self) -> Option<String> {"}, {"sha": "e553ec8f860d8544e9ef216492284d4fa5accb75", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -3,6 +3,7 @@\n use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n+use syntax::SmolStr;\n \n use crate::{\n     context::{ParamKind, PatternContext},\n@@ -25,7 +26,7 @@ pub(crate) fn render_struct_pat(\n         return None;\n     }\n \n-    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n+    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n     let pat = render_pat(&ctx, &name, strukt.kind(ctx.db()), &visible_fields, fields_omitted)?;\n \n     Some(build_completion(ctx, name, pat, strukt))\n@@ -43,8 +44,8 @@ pub(crate) fn render_variant_pat(\n     let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, variant)?;\n \n     let name = match &path {\n-        Some(path) => path.to_string(),\n-        None => local_name.unwrap_or_else(|| variant.name(ctx.db())).to_string(),\n+        Some(path) => path.to_string().into(),\n+        None => local_name.unwrap_or_else(|| variant.name(ctx.db())).to_smol_str(),\n     };\n     let pat = render_pat(&ctx, &name, variant.kind(ctx.db()), &visible_fields, fields_omitted)?;\n \n@@ -53,7 +54,7 @@ pub(crate) fn render_variant_pat(\n \n fn build_completion(\n     ctx: RenderContext<'_>,\n-    name: String,\n+    name: SmolStr,\n     pat: String,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {"}, {"sha": "a70015dcaf6ac91be2b1a302a2206f42835166b3", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -3,6 +3,7 @@\n use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n+use syntax::SmolStr;\n \n use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n \n@@ -21,20 +22,23 @@ pub(crate) fn render_struct_literal(\n         return None;\n     }\n \n-    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n+    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n     let literal = render_literal(&ctx, &name, strukt.kind(ctx.db()), &visible_fields)?;\n \n     Some(build_completion(ctx, name, literal, strukt))\n }\n \n fn build_completion(\n     ctx: RenderContext<'_>,\n-    name: String,\n+    name: SmolStr,\n     literal: String,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let mut item =\n-        CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), name + \" {\u2026}\");\n+    let mut item = CompletionItem::new(\n+        CompletionItemKind::Snippet,\n+        ctx.source_range(),\n+        SmolStr::from_iter([&name, \" {\u2026}\"]),\n+    );\n     item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&literal);\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),"}, {"sha": "6e6c1204b2becfd279449fd28f9faeab0b896c31", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -58,7 +58,7 @@ impl<'a> TypeAliasRender<'a> {\n         let db = self.ctx.db();\n         if let Some(actm) = self.type_alias.as_assoc_item(db) {\n             if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                item.trait_name(trt.name(db).to_string());\n+                item.trait_name(trt.name(db).to_smol_str());\n                 item.insert_text(name);\n             }\n         }"}, {"sha": "c3d08acb271d941a87df166e9dc8a64331a245e5", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f433fd2e838ae181f87019b6f1fefe33c6f54/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "patch": "@@ -18,7 +18,7 @@ rustc_lexer = { version = \"725.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n once_cell = \"1.3.1\"\n indexmap = \"1.4.0\"\n-smol_str = \"0.1.15\"\n+smol_str = \"0.1.21\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }"}]}