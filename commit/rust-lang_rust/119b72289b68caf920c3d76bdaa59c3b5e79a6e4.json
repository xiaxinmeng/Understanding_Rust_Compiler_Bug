{"sha": "119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "node_id": "C_kwDOAAsO6NoAKDExOWI3MjI4OWI2OGNhZjkyMGMzZDc2YmRhYTU5YzNiNWU3OWE2ZTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T15:12:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T15:12:46Z"}, "message": "Rollup merge of #111584 - nnethercote:number-lexing-tweaks, r=matklad\n\nNumber lexing tweaks\n\nA couple of improvements to things that puzzled me when I was looking at this code.\n\nr? `@matklad`", "tree": {"sha": "92b19280b6777e9a6160883589b0ec87b039eb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b19280b6777e9a6160883589b0ec87b039eb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYkvuCRBK7hj4Ov3rIwAAZNEIADeci2/i1ZTDIq9goHyL2LuJ\nCR636MNzhRUFUFHqAHNOmpaw77JuM7ZPr6zpUZLP+wFw3ZAjVhOAJ8R3ZT1U5lH/\ndm4Bev4iK4t7NB5NOztf2DlwyElGKPGHzITmAh1Za8hvwbC9ot+hzmkw/1CdhsGJ\nt945SaR8MOryJIMuMfWffhFZKWtyJTb8VnymiYf6QnjrwDVLo4bAUm4EG1xJKwkP\n9DQaK9OSMtlrBQcwuhm6NjYZGaR9rWCs+WW8e+6Yx95FxKMNz4q3QhV0m5M1OQN/\nG8m1VyqYj57hyi3qed7LVBaA76iZNijQEwwFHhOu4NbQRtnLg6HHZNU0d0Z9hFo=\n=4kYs\n-----END PGP SIGNATURE-----\n", "payload": "tree 92b19280b6777e9a6160883589b0ec87b039eb64\nparent 2f0b456903c314601815685e56a3e83cf4444f36\nparent e52794decda5e55d730436bb38c06958a117e2c8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684163566 +0200\ncommitter GitHub <noreply@github.com> 1684163566 +0200\n\nRollup merge of #111584 - nnethercote:number-lexing-tweaks, r=matklad\n\nNumber lexing tweaks\n\nA couple of improvements to things that puzzled me when I was looking at this code.\n\nr? `@matklad`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "html_url": "https://github.com/rust-lang/rust/commit/119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119b72289b68caf920c3d76bdaa59c3b5e79a6e4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0b456903c314601815685e56a3e83cf4444f36", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0b456903c314601815685e56a3e83cf4444f36", "html_url": "https://github.com/rust-lang/rust/commit/2f0b456903c314601815685e56a3e83cf4444f36"}, {"sha": "e52794decda5e55d730436bb38c06958a117e2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52794decda5e55d730436bb38c06958a117e2c8", "html_url": "https://github.com/rust-lang/rust/commit/e52794decda5e55d730436bb38c06958a117e2c8"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "d511d2b1280d986c83460e46029f003b8bb8e704", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/119b72289b68caf920c3d76bdaa59c3b5e79a6e4/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119b72289b68caf920c3d76bdaa59c3b5e79a6e4/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "patch": "@@ -582,34 +582,38 @@ impl Cursor<'_> {\n         let mut base = Base::Decimal;\n         if first_digit == '0' {\n             // Attempt to parse encoding base.\n-            let has_digits = match self.first() {\n+            match self.first() {\n                 'b' => {\n                     base = Base::Binary;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'o' => {\n                     base = Base::Octal;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'x' => {\n                     base = Base::Hexadecimal;\n                     self.bump();\n-                    self.eat_hexadecimal_digits()\n+                    if !self.eat_hexadecimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n-                // Not a base prefix.\n-                '0'..='9' | '_' | '.' | 'e' | 'E' => {\n+                // Not a base prefix; consume additional digits.\n+                '0'..='9' | '_' => {\n                     self.eat_decimal_digits();\n-                    true\n                 }\n+\n+                // Also not a base prefix; nothing more to do here.\n+                '.' | 'e' | 'E' => {}\n+\n                 // Just a 0.\n                 _ => return Int { base, empty_int: false },\n-            };\n-            // Base prefix was provided, but there were no digits\n-            // after it, e.g. \"0x\".\n-            if !has_digits {\n-                return Int { base, empty_int: true };\n             }\n         } else {\n             // No base prefix, parse number in the usual way."}]}