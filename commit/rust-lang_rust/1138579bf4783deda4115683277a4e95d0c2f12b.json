{"sha": "1138579bf4783deda4115683277a4e95d0c2f12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzg1NzliZjQ3ODNkZWRhNDExNTY4MzI3N2E0ZTk1ZDBjMmYxMmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-16T22:19:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-16T22:19:41Z"}, "message": "Add regression test for #20797. Fixes #20797.", "tree": {"sha": "3ae107afd18f5734b83e92f74a3c4bfb0b4add0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae107afd18f5734b83e92f74a3c4bfb0b4add0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1138579bf4783deda4115683277a4e95d0c2f12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1138579bf4783deda4115683277a4e95d0c2f12b", "html_url": "https://github.com/rust-lang/rust/commit/1138579bf4783deda4115683277a4e95d0c2f12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1138579bf4783deda4115683277a4e95d0c2f12b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ef34d0982ee28797fff346de899ea40de718b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ef34d0982ee28797fff346de899ea40de718b8", "html_url": "https://github.com/rust-lang/rust/commit/b7ef34d0982ee28797fff346de899ea40de718b8"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "c4f3c33f2698305191c244626b910873f7565a95", "filename": "src/test/run-pass/issue-20797.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1138579bf4783deda4115683277a4e95d0c2f12b/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1138579bf4783deda4115683277a4e95d0c2f12b/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=1138579bf4783deda4115683277a4e95d0c2f12b", "patch": "@@ -0,0 +1,91 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #20797.\n+\n+use std::default::Default;\n+use std::io::IoResult;\n+use std::io::fs;\n+use std::io::fs::PathExtensions;\n+\n+/// A strategy for acquiring more subpaths to walk.\n+pub trait Strategy {\n+  type P: PathExtensions;\n+  /// Get additional subpaths from a given path.\n+  fn get_more(&self, item: &Self::P) -> IoResult<Vec<Self::P>>;\n+  /// Determine whether a path should be walked further.\n+  /// This is run against each item from `get_more()`.\n+  fn prune(&self, p: &Self::P) -> bool;\n+}\n+\n+/// The basic fully-recursive strategy. Nothing is pruned.\n+#[derive(Copy, Default)]\n+pub struct Recursive;\n+\n+impl Strategy for Recursive {\n+  type P = Path;\n+  fn get_more(&self, p: &Path) -> IoResult<Vec<Path>> { fs::readdir(p) }\n+\n+  fn prune(&self, _: &Path) -> bool { false }\n+}\n+\n+/// A directory walker of `P` using strategy `S`.\n+pub struct Subpaths<S: Strategy> {\n+    stack: Vec<S::P>,\n+    strategy: S,\n+}\n+\n+impl<S: Strategy> Subpaths<S> {\n+  /// Create a directory walker with a root path and strategy.\n+  pub fn new(p: &S::P, strategy: S) -> IoResult<Subpaths<S>> {\n+    let stack = try!(strategy.get_more(p));\n+    Ok(Subpaths { stack: stack, strategy: strategy })\n+  }\n+}\n+\n+impl<S: Default + Strategy> Subpaths<S> {\n+  /// Create a directory walker with a root path and a default strategy.\n+  pub fn walk(p: &S::P) -> IoResult<Subpaths<S>> {\n+      Subpaths::new(p, Default::default())\n+  }\n+}\n+\n+impl<S: Default + Strategy> Default for Subpaths<S> {\n+  fn default() -> Subpaths<S> {\n+    Subpaths { stack: Vec::new(), strategy: Default::default() }\n+  }\n+}\n+\n+impl<S: Strategy> Iterator for Subpaths<S> {\n+  type Item = S::P;\n+  fn next (&mut self) -> Option<S::P> {\n+    let mut opt_path = self.stack.pop();\n+    while opt_path.is_some() && self.strategy.prune(opt_path.as_ref().unwrap()) {\n+      opt_path = self.stack.pop();\n+    }\n+    match opt_path {\n+      Some(path) => {\n+        if PathExtensions::is_dir(&path) {\n+          let result = self.strategy.get_more(&path);\n+          match result {\n+            Ok(dirs) => { self.stack.extend(dirs.into_iter()); },\n+            Err(..) => { }\n+          }\n+        }\n+        Some(path)\n+      }\n+      None => None,\n+    }\n+  }\n+}\n+\n+fn main() {\n+  let mut walker: Subpaths<Recursive> = Subpaths::walk(&Path::new(\"/home\")).unwrap();\n+}"}]}