{"sha": "169facfc288586b7635652abace56d56da2a6f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OWZhY2ZjMjg4NTg2Yjc2MzU2NTJhYmFjZTU2ZDU2ZGEyYTZmOTk=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-25T16:11:08Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T12:35:12Z"}, "message": "added missing links in std::net TCP docs\n\npart of #29363", "tree": {"sha": "30beee50c9aca1694a67923aa468b09ee8fbe3f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30beee50c9aca1694a67923aa468b09ee8fbe3f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/169facfc288586b7635652abace56d56da2a6f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/169facfc288586b7635652abace56d56da2a6f99", "html_url": "https://github.com/rust-lang/rust/commit/169facfc288586b7635652abace56d56da2a6f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/169facfc288586b7635652abace56d56da2a6f99/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd4e2db785c8ec360a989f69891b1e97dd4d369", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4e2db785c8ec360a989f69891b1e97dd4d369", "html_url": "https://github.com/rust-lang/rust/commit/7dd4e2db785c8ec360a989f69891b1e97dd4d369"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "8a21f17dc49fbe64ec8f36b6bfa660f28e335f1a", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/169facfc288586b7635652abace56d56da2a6f99/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/169facfc288586b7635652abace56d56da2a6f99/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=169facfc288586b7635652abace56d56da2a6f99", "patch": "@@ -83,11 +83,15 @@ impl TcpStream {\n     /// Opens a TCP connection to a remote host.\n     ///\n     /// `addr` is an address of the remote host. Anything which implements\n-    /// `ToSocketAddrs` trait can be supplied for the address; see this trait\n+    /// [`ToSocketAddrs`] trait can be supplied for the address; see this trait\n     /// documentation for concrete examples.\n-    /// In case `ToSocketAddrs::to_socket_addrs()` returns more than one entry,\n+    /// In case [`ToSocketAddrs::to_socket_addrs()`] returns more than one entry,\n     /// then the first valid and reachable address is used.\n     ///\n+    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n+    /// [`ToSocketAddrs::to_socket_addrs()`]:\n+    /// ../../std/net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -494,11 +498,14 @@ impl TcpListener {\n     ///\n     /// Binding with a port number of 0 will request that the OS assigns a port\n     /// to this listener. The port allocated can be queried via the\n-    /// `local_addr` method.\n+    /// [`local_addr`] method.\n     ///\n-    /// The address type can be any implementor of `ToSocketAddrs` trait. See\n+    /// The address type can be any implementor of [`ToSocketAddrs`] trait. See\n     /// its documentation for concrete examples.\n     ///\n+    /// [`local_addr`]: #method.local_addr\n+    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -529,10 +536,12 @@ impl TcpListener {\n \n     /// Creates a new independently owned handle to the underlying socket.\n     ///\n-    /// The returned `TcpListener` is a reference to the same socket that this\n+    /// The returned [`TcpListener`] is a reference to the same socket that this\n     /// object references. Both handles can be used to accept incoming\n     /// connections and options set on one listener will affect the other.\n     ///\n+    /// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -549,9 +558,11 @@ impl TcpListener {\n     /// Accept a new incoming connection from this listener.\n     ///\n     /// This function will block the calling thread until a new TCP connection\n-    /// is established. When established, the corresponding `TcpStream` and the\n+    /// is established. When established, the corresponding [`TcpStream`] and the\n     /// remote peer's address will be returned.\n     ///\n+    /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}]}