{"sha": "15b58fedcacba7d10a9f7d460a83da645a09ad3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YjU4ZmVkY2FjYmE3ZDEwYTlmN2Q0NjBhODNkYTY0NWEwOWFkM2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T21:51:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:21:42Z"}, "message": "Fallout in libsyntax/librustc: use newtype'd options for linked lists,\nsince `Option` is not fundamental and hence the old impls run afoul of\nthe orphan rules.", "tree": {"sha": "f248a0ab5e535332c5f6c5beb6465fd8b221ebed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f248a0ab5e535332c5f6c5beb6465fd8b221ebed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b58fedcacba7d10a9f7d460a83da645a09ad3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b58fedcacba7d10a9f7d460a83da645a09ad3e", "html_url": "https://github.com/rust-lang/rust/commit/15b58fedcacba7d10a9f7d460a83da645a09ad3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b58fedcacba7d10a9f7d460a83da645a09ad3e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b2d9e7643de3a267029c2763edb0b44ff2396e", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b2d9e7643de3a267029c2763edb0b44ff2396e", "html_url": "https://github.com/rust-lang/rust/commit/30b2d9e7643de3a267029c2763edb0b44ff2396e"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "862ced78c082c5056322e6ec8db9e6f4c2777e9f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b58fedcacba7d10a9f7d460a83da645a09ad3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b58fedcacba7d10a9f7d460a83da645a09ad3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=15b58fedcacba7d10a9f7d460a83da645a09ad3e", "patch": "@@ -34,8 +34,7 @@ use std::io::prelude::*;\n use std::io::{Cursor, SeekFrom};\n use syntax::abi;\n use syntax::ast::{self, DefId, NodeId};\n-use syntax::ast_map::{PathElem, PathElems};\n-use syntax::ast_map;\n+use syntax::ast_map::{self, LinkedPath, PathElem, PathElems};\n use syntax::ast_util::*;\n use syntax::ast_util;\n use syntax::attr;\n@@ -1513,7 +1512,7 @@ fn encode_info_for_items(ecx: &EncodeContext,\n                         &krate.module,\n                         &[],\n                         ast::CRATE_NODE_ID,\n-                        [].iter().cloned().chain(None),\n+                        [].iter().cloned().chain(LinkedPath::empty()),\n                         syntax::parse::token::special_idents::invalid,\n                         ast::Public);\n \n@@ -1874,7 +1873,7 @@ fn encode_misc_info(ecx: &EncodeContext,\n     }\n \n     // Encode reexports for the root module.\n-    encode_reexports(ecx, rbml_w, 0, [].iter().cloned().chain(None));\n+    encode_reexports(ecx, rbml_w, 0, [].iter().cloned().chain(LinkedPath::empty()));\n \n     rbml_w.end_tag();\n     rbml_w.end_tag();"}, {"sha": "2b5cb7076f463c8e4da518d5a5dcf17f32e9fd06", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15b58fedcacba7d10a9f7d460a83da645a09ad3e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b58fedcacba7d10a9f7d460a83da645a09ad3e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=15b58fedcacba7d10a9f7d460a83da645a09ad3e", "patch": "@@ -53,18 +53,29 @@ impl fmt::Display for PathElem {\n }\n \n #[derive(Clone)]\n-struct LinkedPathNode<'a> {\n+pub struct LinkedPathNode<'a> {\n     node: PathElem,\n     next: LinkedPath<'a>,\n }\n \n-type LinkedPath<'a> = Option<&'a LinkedPathNode<'a>>;\n+#[derive(Copy, Clone)]\n+pub struct LinkedPath<'a>(Option<&'a LinkedPathNode<'a>>);\n+\n+impl<'a> LinkedPath<'a> {\n+    pub fn empty() -> LinkedPath<'a> {\n+        LinkedPath(None)\n+    }\n+\n+    pub fn from(node: &'a LinkedPathNode) -> LinkedPath<'a> {\n+        LinkedPath(Some(node))\n+    }\n+}\n \n impl<'a> Iterator for LinkedPath<'a> {\n     type Item = PathElem;\n \n     fn next(&mut self) -> Option<PathElem> {\n-        match *self {\n+        match self.0 {\n             Some(node) => {\n                 *self = node.next;\n                 Some(node.node)\n@@ -384,7 +395,7 @@ impl<'ast> Map<'ast> {\n     pub fn with_path<T, F>(&self, id: NodeId, f: F) -> T where\n         F: FnOnce(PathElems) -> T,\n     {\n-        self.with_path_next(id, None, f)\n+        self.with_path_next(id, LinkedPath::empty(), f)\n     }\n \n     pub fn path_to_string(&self, id: NodeId) -> String {\n@@ -422,7 +433,7 @@ impl<'ast> Map<'ast> {\n                 _ => f([].iter().cloned().chain(next))\n             }\n         } else {\n-            self.with_path_next(parent, Some(&LinkedPathNode {\n+            self.with_path_next(parent, LinkedPath::from(&LinkedPathNode {\n                 node: self.get_path_elem(id),\n                 next: next\n             }), f)"}]}