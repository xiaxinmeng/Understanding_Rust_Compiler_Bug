{"sha": "37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "node_id": "C_kwDOAAsO6NoAKDM3ZWQzY2ViYmMyNGM5OTUzYWUwYzJhMTdkZDc0YWUxMjY4Yjg2NTA", "commit": {"author": {"name": "jofas", "email": "jonas@fc-web.de", "date": "2023-03-29T09:14:23Z"}, "committer": {"name": "jofas", "email": "jonas@fc-web.de", "date": "2023-03-29T09:14:23Z"}, "message": "enhanced documentation of binary search methods for slice and VecDeque for unsorted instances", "tree": {"sha": "0ba87cc697a939f8a454fc9e2752240de8284840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba87cc697a939f8a454fc9e2752240de8284840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "html_url": "https://github.com/rust-lang/rust/commit/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650/comments", "author": {"login": "jofas", "id": 20799702, "node_id": "MDQ6VXNlcjIwNzk5NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/20799702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jofas", "html_url": "https://github.com/jofas", "followers_url": "https://api.github.com/users/jofas/followers", "following_url": "https://api.github.com/users/jofas/following{/other_user}", "gists_url": "https://api.github.com/users/jofas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jofas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jofas/subscriptions", "organizations_url": "https://api.github.com/users/jofas/orgs", "repos_url": "https://api.github.com/users/jofas/repos", "events_url": "https://api.github.com/users/jofas/events{/privacy}", "received_events_url": "https://api.github.com/users/jofas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jofas", "id": 20799702, "node_id": "MDQ6VXNlcjIwNzk5NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/20799702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jofas", "html_url": "https://github.com/jofas", "followers_url": "https://api.github.com/users/jofas/followers", "following_url": "https://api.github.com/users/jofas/following{/other_user}", "gists_url": "https://api.github.com/users/jofas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jofas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jofas/subscriptions", "organizations_url": "https://api.github.com/users/jofas/orgs", "repos_url": "https://api.github.com/users/jofas/repos", "events_url": "https://api.github.com/users/jofas/events{/privacy}", "received_events_url": "https://api.github.com/users/jofas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159ba8a92c9e2fa4121f106176309521f4af87e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/159ba8a92c9e2fa4121f106176309521f4af87e9", "html_url": "https://github.com/rust-lang/rust/commit/159ba8a92c9e2fa4121f106176309521f4af87e9"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "1ae72b715cda26f41de899c0daff40735bce1a00", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "patch": "@@ -2378,7 +2378,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` for a given element.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n+    /// If the `VecDeque` is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2434,12 +2435,13 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a comparator function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the deque, returning an order code that\n-    /// indicates whether its argument is `Less`, `Equal` or `Greater`\n-    /// than the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the `VecDeque` is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// `VecDeque`, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2489,10 +2491,11 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// Assumes that the deque is sorted by the key, for instance with\n     /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n+    /// If the deque is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any"}, {"sha": "eb571824065b281682090c2343073847b16f0d07", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ed3cebbc24c9953ae0c2a17dd74ae1268b8650/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=37ed3cebbc24c9953ae0c2a17dd74ae1268b8650", "patch": "@@ -2343,7 +2343,8 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice for a given element.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n+    /// If the slice is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2418,12 +2419,13 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a comparator function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the underlying slice, returning an\n-    /// order code that indicates whether its argument is `Less`,\n-    /// `Equal` or `Greater` the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the slice is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// slice, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2504,10 +2506,11 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n+    /// If the slice is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any"}]}