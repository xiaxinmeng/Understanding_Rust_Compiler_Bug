{"sha": "0bdfd0f4c76fa29a4be774937bc72165390b06d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGZkMGY0Yzc2ZmEyOWE0YmU3NzQ5MzdiYzcyMTY1MzkwYjA2ZDY=", "commit": {"author": {"name": "Douglas Young", "email": "rcxdude@gmail.com", "date": "2014-02-18T16:14:12Z"}, "committer": {"name": "Douglas Young", "email": "rcxdude@gmail.com", "date": "2014-02-18T16:17:51Z"}, "message": "Avoid returning original macro if expansion fails.\n\nCloses #11692. Instead of returning the original expression, a dummy expression\n(with identical span) is returned. This prevents infinite loops of failed\nexpansions as well as odd double error messages in certain situations.", "tree": {"sha": "e595de26e0a25bd8b8258a82ef653553c499d42e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e595de26e0a25bd8b8258a82ef653553c499d42e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bdfd0f4c76fa29a4be774937bc72165390b06d6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bdfd0f4c76fa29a4be774937bc72165390b06d6", "html_url": "https://github.com/rust-lang/rust/commit/0bdfd0f4c76fa29a4be774937bc72165390b06d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bdfd0f4c76fa29a4be774937bc72165390b06d6/comments", "author": {"login": "rcxdude", "id": 316786, "node_id": "MDQ6VXNlcjMxNjc4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/316786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcxdude", "html_url": "https://github.com/rcxdude", "followers_url": "https://api.github.com/users/rcxdude/followers", "following_url": "https://api.github.com/users/rcxdude/following{/other_user}", "gists_url": "https://api.github.com/users/rcxdude/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcxdude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcxdude/subscriptions", "organizations_url": "https://api.github.com/users/rcxdude/orgs", "repos_url": "https://api.github.com/users/rcxdude/repos", "events_url": "https://api.github.com/users/rcxdude/events{/privacy}", "received_events_url": "https://api.github.com/users/rcxdude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcxdude", "id": 316786, "node_id": "MDQ6VXNlcjMxNjc4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/316786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcxdude", "html_url": "https://github.com/rcxdude", "followers_url": "https://api.github.com/users/rcxdude/followers", "following_url": "https://api.github.com/users/rcxdude/following{/other_user}", "gists_url": "https://api.github.com/users/rcxdude/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcxdude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcxdude/subscriptions", "organizations_url": "https://api.github.com/users/rcxdude/orgs", "repos_url": "https://api.github.com/users/rcxdude/repos", "events_url": "https://api.github.com/users/rcxdude/events{/privacy}", "received_events_url": "https://api.github.com/users/rcxdude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517e38997db9f60612676c9f83dab6ed35c1b5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/517e38997db9f60612676c9f83dab6ed35c1b5df", "html_url": "https://github.com/rust-lang/rust/commit/517e38997db9f60612676c9f83dab6ed35c1b5df"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "1bf82573c494909b7b2b8455b327f703d65ca791", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -64,7 +64,7 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                                                    \"inline assembly must be a string literal.\") {\n                     Some((s, st)) => (s, st),\n                     // let compilation continue\n-                    None => return MacResult::dummy_expr(),\n+                    None => return MacResult::dummy_expr(sp),\n                 };\n                 asm = s;\n                 asm_str_style = Some(style);"}, {"sha": "e6fffe8b53f4817c11992b72d635f64c935da510", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -101,6 +101,7 @@ pub trait AnyMacro {\n     fn make_stmt(&self) -> @ast::Stmt;\n }\n \n+\n pub enum MacResult {\n     MRExpr(@ast::Expr),\n     MRItem(@ast::Item),\n@@ -112,10 +113,15 @@ impl MacResult {\n     /// type signatures after emitting a non-fatal error (which stop\n     /// compilation well before the validity (or otherwise)) of the\n     /// expression are checked.\n-    pub fn dummy_expr() -> MacResult {\n-        MRExpr(@ast::Expr {\n-                id: ast::DUMMY_NODE_ID, node: ast::ExprLogLevel, span: codemap::DUMMY_SP\n-            })\n+    pub fn raw_dummy_expr(sp: codemap::Span) -> @ast::Expr {\n+        @ast::Expr {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::ExprLogLevel,\n+            span: sp\n+        }\n+    }\n+    pub fn dummy_expr(sp: codemap::Span) -> MacResult {\n+        MRExpr(MacResult::raw_dummy_expr(sp))\n     }\n }\n "}, {"sha": "68aa757c524fb3f9b32aecc12e36938fafa9188f", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -21,7 +21,7 @@ use std::char;\n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) -> base::MacResult {\n     // Gather all argument expressions\n     let exprs = match get_exprs_from_tts(cx, sp, tts) {\n-        None => return MacResult::dummy_expr(),\n+        None => return MacResult::dummy_expr(sp),\n         Some(e) => e,\n     };\n     let mut bytes = ~[];"}, {"sha": "5316b8f721248d3a10613360cc477ade984edf97", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -21,7 +21,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                          tts: &[ast::TokenTree]) -> base::MacResult {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,\n-        None => return base::MacResult::dummy_expr()\n+        None => return base::MacResult::dummy_expr(sp)\n     };\n     let mut accumulator = ~\"\";\n     for e in es.move_iter() {"}, {"sha": "85cfd4f61e414fc6f53a7ec23343d9c7769f32da", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -25,7 +25,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                 ast::TTTok(_, token::COMMA) => (),\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! expecting comma.\");\n-                    return MacResult::dummy_expr();\n+                    return MacResult::dummy_expr(sp);\n                 }\n             }\n         } else {\n@@ -35,7 +35,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                 }\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! requires ident args.\");\n-                    return MacResult::dummy_expr();\n+                    return MacResult::dummy_expr(sp);\n                 }\n             }\n         }"}, {"sha": "fec1e70af0735719cc8a8dcf8ac9acd9186229de", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -26,7 +26,7 @@ use std::os;\n pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n-        None => return MacResult::dummy_expr(),\n+        None => return MacResult::dummy_expr(sp),\n         Some(v) => v\n     };\n \n@@ -42,14 +42,14 @@ pub fn expand_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some([]) => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-            return MacResult::dummy_expr();\n+            return MacResult::dummy_expr(sp);\n         }\n-        None => return MacResult::dummy_expr(),\n+        None => return MacResult::dummy_expr(sp),\n         Some(exprs) => exprs\n     };\n \n     let var = match expr_to_str(cx, exprs[0], \"expected string literal\") {\n-        None => return MacResult::dummy_expr(),\n+        None => return MacResult::dummy_expr(sp),\n         Some((v, _style)) => v\n     };\n     let msg = match exprs.len() {\n@@ -60,13 +60,13 @@ pub fn expand_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         2 => {\n             match expr_to_str(cx, exprs[1], \"expected string literal\") {\n-                None => return MacResult::dummy_expr(),\n+                None => return MacResult::dummy_expr(sp),\n                 Some((s, _style)) => s\n             }\n         }\n         _ => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-            return MacResult::dummy_expr();\n+            return MacResult::dummy_expr(sp);\n         }\n     };\n "}, {"sha": "4b81713f7d0c9a4b4cb22b97ab5b579d63894689", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -51,7 +51,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                             format!(\"expected macro name without module \\\n                                   separators\"));\n                         // let compilation continue\n-                        return e;\n+                        return MacResult::raw_dummy_expr(e.span);\n                     }\n                     let extname = pth.segments[0].identifier;\n                     let extnamestr = token::get_ident(extname);\n@@ -64,7 +64,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                         extnamestr.get()));\n \n                             // let compilation continue\n-                            return e;\n+                            return MacResult::raw_dummy_expr(e.span);\n                         }\n                         Some(&NormalTT(ref expandfun, exp_span)) => {\n                             fld.cx.bt_push(ExpnInfo {\n@@ -98,7 +98,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                             extnamestr.get()\n                                         )\n                                     );\n-                                    return e;\n+                                    return MacResult::raw_dummy_expr(e.span);\n                                 }\n                             };\n \n@@ -111,7 +111,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                 format!(\"'{}' is not a tt-style macro\",\n                                         extnamestr.get())\n                             );\n-                            return e;\n+                            return MacResult::raw_dummy_expr(e.span);\n                         }\n                     };\n "}, {"sha": "13b1afb4c007c8cb2cfc9fa6c4bc1021a22c00ad", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -811,7 +811,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                 expr,\n                                 \"format argument must be a string literal.\") {\n         Some((fmt, _)) => fmt,\n-        None => return efmt\n+        None => return MacResult::raw_dummy_expr(sp)\n     };\n \n     let mut parser = parse::Parser::new(fmt.get());\n@@ -829,7 +829,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n     match parser.errors.shift() {\n         Some(error) => {\n             cx.ecx.span_err(efmt.span, \"invalid format string: \" + error);\n-            return efmt;\n+            return MacResult::raw_dummy_expr(sp);\n         }\n         None => {}\n     }"}, {"sha": "c81ee55c23768aa75d1ec0eaf8a5f27432ee17fc", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -83,7 +83,7 @@ pub fn expand_include(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n-        None => return MacResult::dummy_expr(),\n+        None => return MacResult::dummy_expr(sp),\n     };\n     // The file will be added to the code map by the parser\n     let mut p =\n@@ -101,13 +101,13 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n-        None => return MacResult::dummy_expr()\n+        None => return MacResult::dummy_expr(sp)\n     };\n     let file = res_rel_file(cx, sp, &Path::new(file));\n     let bytes = match File::open(&file).read_to_end() {\n         Err(e) => {\n             cx.span_err(sp, format!(\"couldn't read {}: {}\", file.display(), e));\n-            return MacResult::dummy_expr();\n+            return MacResult::dummy_expr(sp);\n         }\n         Ok(bytes) => bytes,\n     };\n@@ -123,7 +123,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         None => {\n             cx.span_err(sp, format!(\"{} wasn't a utf-8 file\", file.display()));\n-            return MacResult::dummy_expr();\n+            return MacResult::dummy_expr(sp);\n         }\n     }\n }\n@@ -133,13 +133,13 @@ pub fn expand_include_bin(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bin!\") {\n         Some(f) => f,\n-        None => return MacResult::dummy_expr()\n+        None => return MacResult::dummy_expr(sp)\n     };\n     let file = res_rel_file(cx, sp, &Path::new(file));\n     match File::open(&file).read_to_end() {\n         Err(e) => {\n             cx.span_err(sp, format!(\"couldn't read {}: {}\", file.display(), e));\n-            return MacResult::dummy_expr();\n+            return MacResult::dummy_expr(sp);\n         }\n         Ok(bytes) => {\n             base::MRExpr(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))"}, {"sha": "db2c9dcddb6dcdee3c439dc839c082a5d0ccc60f", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -33,7 +33,7 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n         cx.set_trace_macros(false);\n     } else {\n         cx.span_err(sp, \"trace_macros! only accepts `true` or `false`\");\n-        return base::MacResult::dummy_expr();\n+        return base::MacResult::dummy_expr(sp);\n     }\n \n     rust_parser.bump();"}, {"sha": "aed2c4d579a3d34e3dfcee4d7333b9bede67d6eb", "filename": "src/test/compile-fail/issue-11692.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdfd0f4c76fa29a4be774937bc72165390b06d6/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs?ref=0bdfd0f4c76fa29a4be774937bc72165390b06d6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    print!(test!());\n+    //~^ ERROR: macro undefined: 'test'\n+    //~^^ ERROR: format argument must be a string literal\n+\n+    concat!(test!());\n+    //~^ ERROR: macro undefined: 'test'\n+    //~^^ ERROR: expected a literal\n+}"}]}