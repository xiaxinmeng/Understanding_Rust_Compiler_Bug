{"sha": "e5363881a9f1bdcc497e1758d817bac3fe97d68b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzYzODgxYTlmMWJkY2M0OTdlMTc1OGQ4MTdiYWMzZmU5N2Q2OGI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-14T20:13:12Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-15T18:56:55Z"}, "message": "Stabilize std::sync::atomic::Atomic*::{get_mut, into_inner}", "tree": {"sha": "07f47d7ce2d2bf73787af4c57b0de277f4b4f8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f47d7ce2d2bf73787af4c57b0de277f4b4f8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5363881a9f1bdcc497e1758d817bac3fe97d68b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5363881a9f1bdcc497e1758d817bac3fe97d68b", "html_url": "https://github.com/rust-lang/rust/commit/e5363881a9f1bdcc497e1758d817bac3fe97d68b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5363881a9f1bdcc497e1758d817bac3fe97d68b/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df26a5a9587c5fd922163d2b7625588fa97912cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/df26a5a9587c5fd922163d2b7625588fa97912cc", "html_url": "https://github.com/rust-lang/rust/commit/df26a5a9587c5fd922163d2b7625588fa97912cc"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "198db0e7c0aac46f6642960da8dbf22c1b1c4a84", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5363881a9f1bdcc497e1758d817bac3fe97d68b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5363881a9f1bdcc497e1758d817bac3fe97d68b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=e5363881a9f1bdcc497e1758d817bac3fe97d68b", "patch": "@@ -203,7 +203,6 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bool = AtomicBool::new(true);\n@@ -212,7 +211,7 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.load(Ordering::SeqCst), false);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn get_mut(&mut self) -> &mut bool {\n         unsafe { &mut *(self.v.get() as *mut bool) }\n     }\n@@ -225,14 +224,13 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::AtomicBool;\n     ///\n     /// let some_bool = AtomicBool::new(true);\n     /// assert_eq!(some_bool.into_inner(), true);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> bool {\n         unsafe { self.v.into_inner() != 0 }\n     }\n@@ -588,15 +586,14 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let mut atomic_ptr = AtomicPtr::new(&mut 10);\n     /// *atomic_ptr.get_mut() = &mut 5;\n     /// assert_eq!(unsafe { *atomic_ptr.load(Ordering::SeqCst) }, 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn get_mut(&mut self) -> &mut *mut T {\n         unsafe { &mut *self.p.get() }\n     }\n@@ -609,14 +606,13 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_access)]\n     /// use std::sync::atomic::AtomicPtr;\n     ///\n     /// let atomic_ptr = AtomicPtr::new(&mut 5);\n     /// assert_eq!(unsafe { *atomic_ptr.into_inner() }, 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> *mut T {\n         unsafe { self.p.into_inner() }\n     }\n@@ -883,7 +879,6 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_access)]\n             /// use std::sync::atomic::{AtomicIsize, Ordering};\n             ///\n             /// let mut some_isize = AtomicIsize::new(10);\n@@ -905,7 +900,6 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_access)]\n             /// use std::sync::atomic::AtomicIsize;\n             ///\n             /// let some_isize = AtomicIsize::new(5);\n@@ -1261,15 +1255,15 @@ atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n-    unstable(feature = \"atomic_access\", issue = \"35603\"),\n+    stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n-    unstable(feature = \"atomic_access\", issue = \"35603\"),\n+    stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}]}