{"sha": "f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2ZkN2IwZTY5MmM1OTA3NWRiNThhYzJlN2NhM2FjMmQ1ZTE5YmQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-15T00:00:34Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-15T00:00:34Z"}, "message": "Add some doc comments regarding PathSet.", "tree": {"sha": "197667bc174fd7d5e59194fbae75849be6c5f396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197667bc174fd7d5e59194fbae75849be6c5f396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "html_url": "https://github.com/rust-lang/rust/commit/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b920fab328201a2b5507b9a484c8c09752af93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b920fab328201a2b5507b9a484c8c09752af93", "html_url": "https://github.com/rust-lang/rust/commit/c2b920fab328201a2b5507b9a484c8c09752af93"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "c2f748f161f1807fa96fea4950007d4b05a2fbe4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "patch": "@@ -97,9 +97,21 @@ struct StepDescription {\n     name: &'static str,\n }\n \n+/// Collection of paths used to match a task rule.\n #[derive(Debug, Clone, PartialOrd, Ord, PartialEq, Eq)]\n pub enum PathSet {\n+    /// A collection of individual paths.\n+    ///\n+    /// These are generally matched as a path suffix. For example, a\n+    /// command-line value of `libstd` will match if `src/libstd` is in the\n+    /// set.\n     Set(BTreeSet<PathBuf>),\n+    /// A \"suite\" of paths.\n+    ///\n+    /// These can match as a path suffix (like `Set`), or as a prefix. For\n+    /// example, a command-line value of `src/test/ui/abi/variadic-ffi.rs`\n+    /// will match `src/test/ui`. A command-line value of `ui` would also\n+    /// match `src/test/ui`.\n     Suite(PathBuf),\n }\n \n@@ -249,9 +261,15 @@ impl<'a> ShouldRun<'a> {\n         self\n     }\n \n-    // Unlike `krate` this will create just one pathset. As such, it probably shouldn't actually\n-    // ever be used, but as we transition to having all rules properly handle passing krate(...) by\n-    // actually doing something different for every crate passed.\n+    /// Indicates it should run if the command-line selects the given crate or\n+    /// any of its (local) dependencies.\n+    ///\n+    /// Compared to `krate`, this treats the dependencies as aliases for the\n+    /// same job. Generally it is preferred to use `krate`, and treat each\n+    /// individual path separately. For example `./x.py test src/liballoc`\n+    /// (which uses `krate`) will test just `liballoc`. However, `./x.py check\n+    /// src/liballoc` (which uses `all_krates`) will check all of `libtest`.\n+    /// `all_krates` should probably be removed at some point.\n     pub fn all_krates(mut self, name: &str) -> Self {\n         let mut set = BTreeSet::new();\n         for krate in self.builder.in_tree_crates(name) {\n@@ -262,6 +280,10 @@ impl<'a> ShouldRun<'a> {\n         self\n     }\n \n+    /// Indicates it should run if the command-line selects the given crate or\n+    /// any of its (local) dependencies.\n+    ///\n+    /// `make_run` will be called separately for each matching command-line path.\n     pub fn krate(mut self, name: &str) -> Self {\n         for krate in self.builder.in_tree_crates(name) {\n             let path = krate.local_path(self.builder);"}]}