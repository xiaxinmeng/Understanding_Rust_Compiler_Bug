{"sha": "9b1abf5c65d4019542ff3cf5daa15c0e22e7e012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMWFiZjVjNjVkNDAxOTU0MmZmM2NmNWRhYTE1YzBlMjJlN2UwMTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-07T13:26:23Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T21:38:38Z"}, "message": "remove residual slice pattern junk from mem_categorization", "tree": {"sha": "18cceb7e64b2179a77751f763ec084bd9f9ea09b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18cceb7e64b2179a77751f763ec084bd9f9ea09b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012", "html_url": "https://github.com/rust-lang/rust/commit/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcabfa97356c73cbb7c3301358013614000731d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcabfa97356c73cbb7c3301358013614000731d8", "html_url": "https://github.com/rust-lang/rust/commit/fcabfa97356c73cbb7c3301358013614000731d8"}], "stats": {"total": 86, "additions": 10, "deletions": 76}, "files": [{"sha": "1ea3a469d9c953103607872a3a5018eff87057cf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 76, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1abf5c65d4019542ff3cf5daa15c0e22e7e012/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9b1abf5c65d4019542ff3cf5daa15c0e22e7e012", "patch": "@@ -228,10 +228,10 @@ fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> {\n             Ok(deref_interior(InteriorField(PositionalField(0))))\n         }\n \n-        ty::TyArray(_, _) | ty::TySlice(_) | ty::TyStr => {\n+        ty::TyArray(_, _) | ty::TySlice(_) => {\n             // no deref of indexed content without supplying InteriorOffsetKind\n             if let Some(context) = context {\n-                Ok(deref_interior(InteriorElement(context, element_kind(t))))\n+                Ok(deref_interior(InteriorElement(context, ElementKind::VecElement)))\n             } else {\n                 Err(())\n             }\n@@ -981,84 +981,31 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let method_call = ty::MethodCall::expr(elt.id());\n         let method_ty = self.infcx.node_method_ty(method_call);\n \n-        let element_ty = match method_ty {\n+        let (element_ty, element_kind) = match method_ty {\n             Some(method_ty) => {\n                 let ref_ty = self.overloaded_method_return_ty(method_ty);\n                 base_cmt = self.cat_rvalue_node(elt.id(), elt.span(), ref_ty);\n \n                 // FIXME(#20649) -- why are we using the `self_ty` as the element type...?\n                 let self_ty = method_ty.fn_sig().input(0);\n-                self.tcx().no_late_bound_regions(&self_ty).unwrap()\n+                (self.tcx().no_late_bound_regions(&self_ty).unwrap(),\n+                 ElementKind::OtherElement)\n             }\n             None => {\n                 match base_cmt.ty.builtin_index() {\n-                    Some(ty) => ty,\n+                    Some(ty) => (ty, ElementKind::VecElement),\n                     None => {\n                         return Err(());\n                     }\n                 }\n             }\n         };\n \n-        let m = base_cmt.mutbl.inherit();\n-        let ret = interior(elt, base_cmt.clone(), base_cmt.ty,\n-                           m, context, element_ty);\n+        let interior_elem = InteriorElement(context, element_kind);\n+        let ret =\n+            self.cat_imm_interior(elt, base_cmt.clone(), element_ty, interior_elem);\n         debug!(\"cat_index ret {:?}\", ret);\n         return Ok(ret);\n-\n-        fn interior<'tcx, N: ast_node>(elt: &N,\n-                                       of_cmt: cmt<'tcx>,\n-                                       vec_ty: Ty<'tcx>,\n-                                       mutbl: MutabilityCategory,\n-                                       context: InteriorOffsetKind,\n-                                       element_ty: Ty<'tcx>) -> cmt<'tcx>\n-        {\n-            let interior_elem = InteriorElement(context, element_kind(vec_ty));\n-            Rc::new(cmt_ {\n-                id:elt.id(),\n-                span:elt.span(),\n-                cat:Categorization::Interior(of_cmt, interior_elem),\n-                mutbl:mutbl,\n-                ty:element_ty,\n-                note: NoteNone\n-            })\n-        }\n-    }\n-\n-    // Takes either a vec or a reference to a vec and returns the cmt for the\n-    // underlying vec.\n-    fn deref_vec<N:ast_node>(&self,\n-                             elt: &N,\n-                             base_cmt: cmt<'tcx>,\n-                             context: InteriorOffsetKind)\n-                             -> McResult<cmt<'tcx>>\n-    {\n-        let ret = match deref_kind(base_cmt.ty, Some(context))? {\n-            deref_ptr(ptr) => {\n-                // for unique ptrs, we inherit mutability from the\n-                // owning reference.\n-                let m = MutabilityCategory::from_pointer_kind(base_cmt.mutbl, ptr);\n-\n-                // the deref is explicit in the resulting cmt\n-                Rc::new(cmt_ {\n-                    id:elt.id(),\n-                    span:elt.span(),\n-                    cat:Categorization::Deref(base_cmt.clone(), 0, ptr),\n-                    mutbl:m,\n-                    ty: match base_cmt.ty.builtin_deref(false, ty::NoPreference) {\n-                        Some(mt) => mt.ty,\n-                        None => bug!(\"Found non-derefable type\")\n-                    },\n-                    note: NoteNone\n-                })\n-            }\n-\n-            deref_interior(_) => {\n-                base_cmt\n-            }\n-        };\n-        debug!(\"deref_vec ret {:?}\", ret);\n-        Ok(ret)\n     }\n \n     pub fn cat_imm_interior<N:ast_node>(&self,\n@@ -1282,8 +1229,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n           PatKind::Vec(ref before, ref slice, ref after) => {\n               let context = InteriorOffsetKind::Pattern;\n-              let vec_cmt = self.deref_vec(pat, cmt, context)?;\n-              let elt_cmt = self.cat_index(pat, vec_cmt, context)?;\n+              let elt_cmt = self.cat_index(pat, cmt, context)?;\n               for before_pat in before {\n                   self.cat_pattern_(elt_cmt.clone(), &before_pat, op)?;\n               }\n@@ -1581,18 +1527,6 @@ impl fmt::Debug for InteriorKind {\n     }\n }\n \n-fn element_kind(t: Ty) -> ElementKind {\n-    match t.sty {\n-        ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n-        ty::TyBox(ty) => match ty.sty {\n-            ty::TySlice(_) => VecElement,\n-            _ => OtherElement\n-        },\n-        ty::TyArray(..) | ty::TySlice(_) => VecElement,\n-        _ => OtherElement\n-    }\n-}\n-\n impl fmt::Debug for Upvar {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}/{:?}\", self.id, self.kind)"}]}