{"sha": "d1d9626e7577546585f216f8ee11be824b374f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDk2MjZlNzU3NzU0NjU4NWYyMTZmOGVlMTFiZTgyNGIzNzRmNzg=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-03-15T16:13:55Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-03-20T14:10:16Z"}, "message": "Fix up various links\n\nThe unstable book, libstd, libcore, and liballoc all needed some\nadjustment.", "tree": {"sha": "0dae348bce2a4a3b88de5f5192084d99f25b15e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dae348bce2a4a3b88de5f5192084d99f25b15e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d9626e7577546585f216f8ee11be824b374f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9626e7577546585f216f8ee11be824b374f78", "html_url": "https://github.com/rust-lang/rust/commit/d1d9626e7577546585f216f8ee11be824b374f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9626e7577546585f216f8ee11be824b374f78/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e7b16f61e159cb1d4ed9be6e0dc822a02a0a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e7b16f61e159cb1d4ed9be6e0dc822a02a0a56", "html_url": "https://github.com/rust-lang/rust/commit/c0e7b16f61e159cb1d4ed9be6e0dc822a02a0a56"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "3a1872e18ddb8a6968594016964fa4f8a5569522", "filename": "src/doc/unstable-book/src/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -137,7 +137,7 @@ of extensions.  See `Registry::register_syntax_extension` and the\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](../book/macros.html#debugging-macro-code) are applicable.\n+Some of the [macro debugging tips](../book/first-edition/macros.html#debugging-macro-code) are applicable.\n \n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:"}, {"sha": "28f6d97756f2c4c0f2808d49de7b461edf7ec876", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -102,7 +102,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/method-syntax.html#associated-functions\n+/// [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n ///\n /// # Examples\n ///"}, {"sha": "561ccaa5ef5ca6c0c8f4e78c58591b7bdd4cfc4b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -215,7 +215,7 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/method-syntax.html#associated-functions\n+//! [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "19e69ca296d8f4ea5221c0d9a6b45fb5e7f0c4f8", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -94,7 +94,7 @@ pub const MAX: char = '\\u{10ffff}';\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/casting-between-types.html#as\n+/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked`].\n@@ -146,7 +146,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/casting-between-types.html#as\n+/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// # Safety\n ///"}, {"sha": "fb98e43aa614b302f0ddf9707ebbaecde04585f1", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -409,7 +409,7 @@ pub trait Iterator {\n     /// If you're doing some sort of looping for a side effect, it's considered\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n-    /// [`for`]: ../../book/loops.html#for\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n     ///\n     /// # Examples\n     ///\n@@ -1306,7 +1306,7 @@ pub trait Iterator {\n     /// use a `for` loop with a list of things to build up a result. Those\n     /// can be turned into `fold()`s:\n     ///\n-    /// [`for`]: ../../book/loops.html#for\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n     ///\n     /// ```\n     /// let numbers = [1, 2, 3, 4, 5];"}, {"sha": "f5cf3724d0711d8183e685a02d08878f37ad3e95", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -164,7 +164,7 @@ pub use intrinsics::transmute;\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n@@ -199,7 +199,7 @@ pub fn size_of<T>() -> usize {\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n /// [slice]: ../../std/primitive.slice.html\n-/// [trait object]: ../../book/trait-objects.html\n+/// [trait object]: ../../book/first-edition/trait-objects.html\n ///\n /// # Examples\n ///\n@@ -317,7 +317,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// many of the same caveats.\n ///\n /// [uninit]: fn.uninitialized.html\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n@@ -343,7 +343,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// This is useful for [FFI] functions and initializing arrays sometimes,\n /// but should generally be avoided.\n ///\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n ///\n /// # Undefined behavior\n ///\n@@ -525,7 +525,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n /// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/ownership.html#copy-types),\n+/// [types which implement `Copy`](../../book/first-edition/ownership.html#copy-types),\n /// e.g. integers. Such values are copied and _then_ moved into the function,\n /// so the value persists after this function call.\n ///"}, {"sha": "a95f05227fb8b1b38ef596cdacaae5744569c1f7", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -25,7 +25,7 @@\n /// Book][moreinfo] contains more details about the precise nature of\n /// these internals.\n ///\n-/// [moreinfo]: ../../book/trait-objects.html#representation\n+/// [moreinfo]: ../../book/first-edition/trait-objects.html#representation\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "3da5d4b94dd08ce8c2fca1a39aff6be3eb49cb5f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -174,7 +174,7 @@\n //! [slice]: primitive.slice.html\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n-//! [`for`]: ../book/loops.html#for\n+//! [`for`]: ../book/first-edition/loops.html#for\n //! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n@@ -189,14 +189,14 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/crates-and-modules.html#importing-modules-with-use\n-//! [crate root]: ../book/crates-and-modules.html#basic-terminology-crates-and-modules\n+//! [`use`]: ../book/first-edition/crates-and-modules.html#importing-modules-with-use\n+//! [crate root]: ../book/first-edition/crates-and-modules.html#basic-terminology-crates-and-modules\n //! [crates.io]: https://crates.io\n-//! [deref coercions]: ../book/deref-coercions.html\n+//! [deref coercions]: ../book/first-edition/deref-coercions.html\n //! [files]: fs/struct.File.html\n //! [multithreading]: thread/index.html\n //! [other]: #what-is-in-the-standard-library-documentation\n-//! [primitive types]: ../book/primitive-types.html\n+//! [primitive types]: ../book/first-edition/primitive-types.html\n \n #![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c738dc9440614d02fff181fd47ee83df8fd6f44c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9626e7577546585f216f8ee11be824b374f78/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=d1d9626e7577546585f216f8ee11be824b374f78", "patch": "@@ -29,7 +29,7 @@\n /// ```\n ///\n /// [`assert!`]: macro.assert.html\n-/// [`if`]: ../book/if.html\n+/// [`if`]: ../book/first-edition/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html\n /// [`Not`]: ops/trait.Not.html\n@@ -490,7 +490,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/first-edition/primitive-types.html#tuples).\n ///\n /// # Trait implementations\n ///"}]}