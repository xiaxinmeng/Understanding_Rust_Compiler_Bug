{"sha": "36340ba994a8e5b12df70f0889eeb7d58e2705fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MzQwYmE5OTRhOGU1YjEyZGY3MGYwODg5ZWViN2Q1OGUyNzA1ZmU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-19T20:50:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-28T07:37:24Z"}, "message": "rustc: move mir::repr::* to mir.", "tree": {"sha": "3723d82492dd417d175a9f8a258ee010f51bff83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3723d82492dd417d175a9f8a258ee010f51bff83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36340ba994a8e5b12df70f0889eeb7d58e2705fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36340ba994a8e5b12df70f0889eeb7d58e2705fe", "html_url": "https://github.com/rust-lang/rust/commit/36340ba994a8e5b12df70f0889eeb7d58e2705fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36340ba994a8e5b12df70f0889eeb7d58e2705fe/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5530030420d09588f32d6317cdd868e755621302", "url": "https://api.github.com/repos/rust-lang/rust/commits/5530030420d09588f32d6317cdd868e755621302", "html_url": "https://github.com/rust-lang/rust/commit/5530030420d09588f32d6317cdd868e755621302"}], "stats": {"total": 325, "additions": 155, "deletions": 170}, "files": [{"sha": "5f2ba9e68d74d104efa9f2a722e5190041e1ec46", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -105,16 +105,7 @@ pub mod middle {\n     pub mod weak_lang_items;\n }\n \n-pub mod mir {\n-    mod cache;\n-    pub mod repr;\n-    pub mod tcx;\n-    pub mod visit;\n-    pub mod transform;\n-    pub mod traversal;\n-    pub mod mir_map;\n-}\n-\n+pub mod mir;\n pub mod session;\n pub mod traits;\n pub mod ty;"}, {"sha": "43b0491758dda2987be561215d281d92565af95d", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -29,7 +29,7 @@ use hir::map::definitions::{Definitions, DefKey};\n use hir::svh::Svh;\n use middle::lang_items;\n use ty::{self, Ty, TyCtxt};\n-use mir::repr::Mir;\n+use mir::Mir;\n use mir::mir_map::MirMap;\n use session::Session;\n use session::search_paths::PathKind;"}, {"sha": "bc9bbebb1796a83627c3fe418ce934e395df3335", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n use std::cell::{Ref, RefCell};\n use rustc_data_structures::indexed_vec::IndexVec;\n \n-use mir::repr::{Mir, BasicBlock};\n+use mir::{Mir, BasicBlock};\n \n use rustc_serialize as serialize;\n "}, {"sha": "56355941b57063d0d4a22f39a53b21913d774486", "filename": "src/librustc/mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use hir::def_id::DefId;\n-use mir::repr::Mir;\n+use mir::Mir;\n use std::marker::PhantomData;\n \n pub struct MirMap<'tcx> {"}, {"sha": "cda71ac225c589c34bbc054e580c4d0ba03dd286", "filename": "src/librustc/mir/mod.rs", "status": "renamed", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -32,7 +32,12 @@ use std::vec::IntoIter;\n use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n-use super::cache::Cache;\n+mod cache;\n+pub mod tcx;\n+pub mod visit;\n+pub mod transform;\n+pub mod traversal;\n+pub mod mir_map;\n \n macro_rules! newtype_index {\n     ($name:ident, $debug_name:expr) => (\n@@ -106,7 +111,7 @@ pub struct Mir<'tcx> {\n     pub span: Span,\n \n     /// A cache for various calculations\n-    cache: Cache\n+    cache: cache::Cache\n }\n \n /// where execution begins\n@@ -137,7 +142,7 @@ impl<'tcx> Mir<'tcx> {\n             upvar_decls: upvar_decls,\n             spread_arg: None,\n             span: span,\n-            cache: Cache::new()\n+            cache: cache::Cache::new()\n         }\n     }\n ", "previous_filename": "src/librustc/mir/repr.rs"}, {"sha": "f9afbaf104a663048df411e654afc08bc50d9936", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n  * building is complete.\n  */\n \n-use mir::repr::*;\n+use mir::*;\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};"}, {"sha": "c6a719abe54b637d551c413997271bcea355a7f0", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@ use dep_graph::DepNode;\n use hir;\n use hir::map::DefPathData;\n use mir::mir_map::MirMap;\n-use mir::repr::{Mir, Promoted};\n+use mir::{Mir, Promoted};\n use ty::TyCtxt;\n use syntax::ast::NodeId;\n use util::common::time;"}, {"sha": "6057e7ec7e0f5164c2606941eb4a47331a01d12d", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@ use std::vec;\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::repr::*;\n+use super::*;\n \n /// Preorder traversal of a graph.\n ///"}, {"sha": "db7267ca0d4b888f340c46f85a369988fa3bc2d8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@ use middle::const_val::ConstVal;\n use hir::def_id::DefId;\n use ty::subst::Substs;\n use ty::{ClosureSubsts, Region, Ty};\n-use mir::repr::*;\n+use mir::*;\n use rustc_const_math::ConstUsize;\n use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "dc450433ad9fa4c010570c266834624cf3493b75", "filename": "src/librustc_borrowck/borrowck/mir/abs_domain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -21,8 +21,8 @@\n //! `a[x]` would still overlap them both. But that is not this\n //! representation does today.)\n \n-use rustc::mir::repr::{Lvalue, LvalueElem};\n-use rustc::mir::repr::{Operand, Projection, ProjectionElem};\n+use rustc::mir::{Lvalue, LvalueElem};\n+use rustc::mir::{Operand, Projection, ProjectionElem};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct AbstractOperand;"}, {"sha": "28f58723862cbdcd7d79fa804f7dae8709f9bf62", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n //! Hook into libgraphviz for rendering dataflow graphs for MIR.\n \n use syntax::ast::NodeId;\n-use rustc::mir::repr::{BasicBlock, Mir};\n+use rustc::mir::{BasicBlock, Mir};\n use rustc_data_structures::bitslice::bits_to_string;\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "fcb453d81aa770c98a9fefca31bfddcc7280b42c", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::{self, Mir, Location};\n+use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bitslice::BitSlice; // adds set_bit/get_bit to &[usize] bitvector rep.\n use rustc_data_structures::bitslice::{BitwiseOperator};\n use rustc_data_structures::indexed_set::{IdxSet};\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     fn statement_effect(&self,\n                         ctxt: &Self::Ctxt,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: repr::BasicBlock,\n+                        bb: mir::BasicBlock,\n                         idx: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -258,7 +258,7 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     fn terminator_effect(&self,\n                          ctxt: &Self::Ctxt,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: repr::BasicBlock,\n+                         bb: mir::BasicBlock,\n                          statements_len: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -271,9 +271,9 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     fn propagate_call_return(&self,\n                              ctxt: &Self::Ctxt,\n                              in_out: &mut IdxSet<MovePathIndex>,\n-                             _call_bb: repr::BasicBlock,\n-                             _dest_bb: repr::BasicBlock,\n-                             dest_lval: &repr::Lvalue) {\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             dest_lval: &mir::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, &ctxt.move_data,\n@@ -306,7 +306,7 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n     fn statement_effect(&self,\n                         ctxt: &Self::Ctxt,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: repr::BasicBlock,\n+                        bb: mir::BasicBlock,\n                         idx: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n     fn terminator_effect(&self,\n                          ctxt: &Self::Ctxt,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: repr::BasicBlock,\n+                         bb: mir::BasicBlock,\n                          statements_len: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -332,9 +332,9 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n     fn propagate_call_return(&self,\n                              ctxt: &Self::Ctxt,\n                              in_out: &mut IdxSet<MovePathIndex>,\n-                             _call_bb: repr::BasicBlock,\n-                             _dest_bb: repr::BasicBlock,\n-                             dest_lval: &repr::Lvalue) {\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             dest_lval: &mir::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 0 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, &ctxt.move_data,\n@@ -366,7 +366,7 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n     fn statement_effect(&self,\n                         ctxt: &Self::Ctxt,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: repr::BasicBlock,\n+                        bb: mir::BasicBlock,\n                         idx: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -379,7 +379,7 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n     fn terminator_effect(&self,\n                          ctxt: &Self::Ctxt,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: repr::BasicBlock,\n+                         bb: mir::BasicBlock,\n                          statements_len: usize)\n     {\n         drop_flag_effects_for_location(\n@@ -392,9 +392,9 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n     fn propagate_call_return(&self,\n                              ctxt: &Self::Ctxt,\n                              in_out: &mut IdxSet<MovePathIndex>,\n-                             _call_bb: repr::BasicBlock,\n-                             _dest_bb: repr::BasicBlock,\n-                             dest_lval: &repr::Lvalue) {\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             dest_lval: &mir::Lvalue) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_lval to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, &ctxt.move_data,\n@@ -418,7 +418,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n     fn statement_effect(&self,\n                         ctxt: &Self::Ctxt,\n                         sets: &mut BlockSets<MoveOutIndex>,\n-                        bb: repr::BasicBlock,\n+                        bb: mir::BasicBlock,\n                         idx: usize) {\n         let (tcx, mir, move_data) = (self.tcx, self.mir, &ctxt.move_data);\n         let stmt = &mir[bb].statements[idx];\n@@ -437,10 +437,10 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n         }\n         let bits_per_block = self.bits_per_block(ctxt);\n         match stmt.kind {\n-            repr::StatementKind::SetDiscriminant { .. } => {\n+            mir::StatementKind::SetDiscriminant { .. } => {\n                 span_bug!(stmt.source_info.span, \"SetDiscriminant should not exist in borrowck\");\n             }\n-            repr::StatementKind::Assign(ref lvalue, _) => {\n+            mir::StatementKind::Assign(ref lvalue, _) => {\n                 // assigning into this `lvalue` kills all\n                 // MoveOuts from it, and *also* all MoveOuts\n                 // for children and associated fragment sets.\n@@ -453,16 +453,16 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n                                          sets.kill_set.add(&moi);\n                                      });\n             }\n-            repr::StatementKind::StorageLive(_) |\n-            repr::StatementKind::StorageDead(_) |\n-            repr::StatementKind::Nop => {}\n+            mir::StatementKind::StorageLive(_) |\n+            mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::Nop => {}\n         }\n     }\n \n     fn terminator_effect(&self,\n                          ctxt: &Self::Ctxt,\n                          sets: &mut BlockSets<MoveOutIndex>,\n-                         bb: repr::BasicBlock,\n+                         bb: mir::BasicBlock,\n                          statements_len: usize)\n     {\n         let (mir, move_data) = (self.mir, &ctxt.move_data);\n@@ -481,9 +481,9 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n     fn propagate_call_return(&self,\n                              ctxt: &Self::Ctxt,\n                              in_out: &mut IdxSet<MoveOutIndex>,\n-                             _call_bb: repr::BasicBlock,\n-                             _dest_bb: repr::BasicBlock,\n-                             dest_lval: &repr::Lvalue) {\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             dest_lval: &mir::Lvalue) {\n         let move_data = &ctxt.move_data;\n         let bits_per_block = self.bits_per_block(ctxt);\n "}, {"sha": "51817afbfeafdd53a7b24bc15f08a1d8dbc801ba", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::{self, Mir};\n+use rustc::mir::{self, Mir};\n \n use std::fmt::Debug;\n use std::io;\n@@ -78,14 +78,12 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n         // the kill-sets.\n \n         {\n-            let sets = &mut self.flow_state.sets.for_block(repr::START_BLOCK.index());\n+            let sets = &mut self.flow_state.sets.for_block(mir::START_BLOCK.index());\n             self.flow_state.operator.start_block_effect(&self.ctxt, sets);\n         }\n \n         for (bb, data) in self.mir.basic_blocks().iter_enumerated() {\n-            let &repr::BasicBlockData { ref statements,\n-                                        ref terminator,\n-                                        is_cleanup: _ } = data;\n+            let &mir::BasicBlockData { ref statements, ref terminator, is_cleanup: _ } = data;\n \n             let sets = &mut self.flow_state.sets.for_block(bb.index());\n             for j_stmt in 0..statements.len() {\n@@ -122,7 +120,7 @@ impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n                 in_out.subtract(sets.kill_set);\n             }\n             builder.propagate_bits_into_graph_successors_of(\n-                in_out, &mut self.changed, (repr::BasicBlock::new(bb_idx), bb_data));\n+                in_out, &mut self.changed, (mir::BasicBlock::new(bb_idx), bb_data));\n         }\n     }\n }\n@@ -336,7 +334,7 @@ pub trait BitDenotation {\n     fn statement_effect(&self,\n                         ctxt: &Self::Ctxt,\n                         sets: &mut BlockSets<Self::Idx>,\n-                        bb: repr::BasicBlock,\n+                        bb: mir::BasicBlock,\n                         idx_stmt: usize);\n \n     /// Mutates the block-sets (the flow sets for the given\n@@ -352,7 +350,7 @@ pub trait BitDenotation {\n     fn terminator_effect(&self,\n                          ctxt: &Self::Ctxt,\n                          sets: &mut BlockSets<Self::Idx>,\n-                         bb: repr::BasicBlock,\n+                         bb: mir::BasicBlock,\n                          idx_term: usize);\n \n     /// Mutates the block-sets according to the (flow-dependent)\n@@ -377,9 +375,9 @@ pub trait BitDenotation {\n     fn propagate_call_return(&self,\n                              ctxt: &Self::Ctxt,\n                              in_out: &mut IdxSet<Self::Idx>,\n-                             call_bb: repr::BasicBlock,\n-                             dest_bb: repr::BasicBlock,\n-                             dest_lval: &repr::Lvalue);\n+                             call_bb: mir::BasicBlock,\n+                             dest_bb: mir::BasicBlock,\n+                             dest_lval: &mir::Lvalue);\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n@@ -444,39 +442,39 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n         &mut self,\n         in_out: &mut IdxSet<D::Idx>,\n         changed: &mut bool,\n-        (bb, bb_data): (repr::BasicBlock, &repr::BasicBlockData))\n+        (bb, bb_data): (mir::BasicBlock, &mir::BasicBlockData))\n     {\n         match bb_data.terminator().kind {\n-            repr::TerminatorKind::Return |\n-            repr::TerminatorKind::Resume |\n-            repr::TerminatorKind::Unreachable => {}\n-            repr::TerminatorKind::Goto { ref target } |\n-            repr::TerminatorKind::Assert { ref target, cleanup: None, .. } |\n-            repr::TerminatorKind::Drop { ref target, location: _, unwind: None } |\n-            repr::TerminatorKind::DropAndReplace {\n+            mir::TerminatorKind::Return |\n+            mir::TerminatorKind::Resume |\n+            mir::TerminatorKind::Unreachable => {}\n+            mir::TerminatorKind::Goto { ref target } |\n+            mir::TerminatorKind::Assert { ref target, cleanup: None, .. } |\n+            mir::TerminatorKind::Drop { ref target, location: _, unwind: None } |\n+            mir::TerminatorKind::DropAndReplace {\n                 ref target, value: _, location: _, unwind: None\n             } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n             }\n-            repr::TerminatorKind::Assert { ref target, cleanup: Some(ref unwind), .. } |\n-            repr::TerminatorKind::Drop { ref target, location: _, unwind: Some(ref unwind) } |\n-            repr::TerminatorKind::DropAndReplace {\n+            mir::TerminatorKind::Assert { ref target, cleanup: Some(ref unwind), .. } |\n+            mir::TerminatorKind::Drop { ref target, location: _, unwind: Some(ref unwind) } |\n+            mir::TerminatorKind::DropAndReplace {\n                 ref target, value: _, location: _, unwind: Some(ref unwind)\n             } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n             }\n-            repr::TerminatorKind::If { ref targets, .. } => {\n+            mir::TerminatorKind::If { ref targets, .. } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, &targets.0);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, &targets.1);\n             }\n-            repr::TerminatorKind::Switch { ref targets, .. } |\n-            repr::TerminatorKind::SwitchInt { ref targets, .. } => {\n+            mir::TerminatorKind::Switch { ref targets, .. } |\n+            mir::TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {\n                     self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 }\n             }\n-            repr::TerminatorKind::Call { ref cleanup, ref destination, func: _, args: _ } => {\n+            mir::TerminatorKind::Call { ref cleanup, ref destination, func: _, args: _ } => {\n                 if let Some(ref unwind) = *cleanup {\n                     self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n                 }\n@@ -494,7 +492,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n     fn propagate_bits_into_entry_set_for(&mut self,\n                                          in_out: &IdxSet<D::Idx>,\n                                          changed: &mut bool,\n-                                         bb: &repr::BasicBlock) {\n+                                         bb: &mir::BasicBlock) {\n         let entry_set = self.flow_state.sets.for_block(bb.index()).on_entry;\n         let set_changed = bitwise(entry_set.words_mut(),\n                                   in_out.words(),"}, {"sha": "b8c26a0512ff8e835d79c78c3e819e8892b12640", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::repr::{self, Mir};\n+use rustc::mir::{self, Mir};\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::super::gather_moves::{MovePathIndex, LookupResult};\n@@ -59,21 +59,19 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            mir: &Mir<'tcx>,\n                            ctxt: &O::Ctxt,\n                            results: &DataflowResults<O>,\n-                           bb: repr::BasicBlock) where\n+                           bb: mir::BasicBlock) where\n     O: BitDenotation<Ctxt=MoveDataParamEnv<'tcx>, Idx=MovePathIndex>\n {\n     let move_data = &ctxt.move_data;\n-    let repr::BasicBlockData { ref statements,\n-                               ref terminator,\n-                               is_cleanup: _ } = mir[bb];\n+    let mir::BasicBlockData { ref statements, ref terminator, is_cleanup: _ } = mir[bb];\n \n     let (args, span) = match is_rustc_peek(tcx, terminator) {\n         Some(args_and_span) => args_and_span,\n         None => return,\n     };\n     assert!(args.len() == 1);\n     let peek_arg_lval = match args[0] {\n-        repr::Operand::Consume(ref lval @ repr::Lvalue::Local(_)) => Some(lval),\n+        mir::Operand::Consume(ref lval @ mir::Lvalue::Local(_)) => Some(lval),\n         _ => None,\n     };\n \n@@ -103,21 +101,19 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for (j, stmt) in statements.iter().enumerate() {\n         debug!(\"rustc_peek: ({:?},{}) {:?}\", bb, j, stmt);\n         let (lvalue, rvalue) = match stmt.kind {\n-            repr::StatementKind::Assign(ref lvalue, ref rvalue) => {\n+            mir::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 (lvalue, rvalue)\n             }\n-            repr::StatementKind::StorageLive(_) |\n-            repr::StatementKind::StorageDead(_) |\n-            repr::StatementKind::Nop => continue,\n-            repr::StatementKind::SetDiscriminant{ .. } =>\n+            mir::StatementKind::StorageLive(_) |\n+            mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::Nop => continue,\n+            mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,\n                           \"sanity_check should run before Deaggregator inserts SetDiscriminant\"),\n         };\n \n         if lvalue == peek_arg_lval {\n-            if let repr::Rvalue::Ref(_,\n-                                     repr::BorrowKind::Shared,\n-                                     ref peeking_at_lval) = *rvalue {\n+            if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_lval) = *rvalue {\n                 // Okay, our search is over.\n                 match move_data.rev_lookup.find(peeking_at_lval) {\n                     LookupResult::Exact(peek_mpi) => {\n@@ -162,12 +158,12 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           terminator: &'a Option<repr::Terminator<'tcx>>)\n-                           -> Option<(&'a [repr::Operand<'tcx>], Span)> {\n-    if let Some(repr::Terminator { ref kind, source_info, .. }) = *terminator {\n-        if let repr::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind\n+                           terminator: &'a Option<mir::Terminator<'tcx>>)\n+                           -> Option<(&'a [mir::Operand<'tcx>], Span)> {\n+    if let Some(mir::Terminator { ref kind, source_info, .. }) = *terminator {\n+        if let mir::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind\n         {\n-            if let repr::Operand::Constant(ref func) = *oper\n+            if let mir::Operand::Constant(ref func) = *oper\n             {\n                 if let ty::TyFnDef(def_id, _, &ty::BareFnTy { abi, .. }) = func.ty.sty\n                 {"}, {"sha": "191cd981b61ebffe62533f1f70aa46cec46b501c", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -17,7 +17,7 @@ use super::{DropFlagState, MoveDataParamEnv};\n use super::patch::MirPatch;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::{Pass, MirPass, MirSource};\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items;"}, {"sha": "1dc5769e63cf8e1518cef6aa70c27b9399ceb9e0", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n \n use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::util::nodemap::FnvHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n "}, {"sha": "02f31af0941338d7c0c2275bc42a9476fc4d9aab", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -17,8 +17,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir;\n use rustc::hir::intravisit::{FnKind};\n \n-use rustc::mir::repr;\n-use rustc::mir::repr::{BasicBlock, BasicBlockData, Mir, Statement, Terminator, Location};\n+use rustc::mir::{self, BasicBlock, BasicBlockData, Mir, Statement, Terminator, Location};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n \n@@ -214,12 +213,12 @@ fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n                                         path: MovePathIndex,\n                                         mut cond: F)\n                                         -> Option<MovePathIndex>\n-    where F: FnMut(&repr::LvalueProjection<'tcx>) -> bool\n+    where F: FnMut(&mir::LvalueProjection<'tcx>) -> bool\n {\n     let mut next_child = move_data.move_paths[path].first_child;\n     while let Some(child_index) = next_child {\n         match move_data.move_paths[child_index].lvalue {\n-            repr::Lvalue::Projection(ref proj) => {\n+            mir::Lvalue::Projection(ref proj) => {\n                 if cond(proj) {\n                     return Some(child_index)\n                 }\n@@ -252,7 +251,7 @@ fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n /// FIXME: we have to do something for moving slice patterns.\n fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                       mir: &Mir<'tcx>,\n-                                                      lv: &repr::Lvalue<'tcx>) -> bool {\n+                                                      lv: &mir::Lvalue<'tcx>) -> bool {\n     let ty = lv.ty(mir, tcx).to_ty(tcx);\n     match ty.sty {\n         ty::TyArray(..) | ty::TySlice(..) | ty::TyRef(..) | ty::TyRawPtr(..) => {\n@@ -339,7 +338,7 @@ fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n {\n     let move_data = &ctxt.move_data;\n     for arg in mir.args_iter() {\n-        let lvalue = repr::Lvalue::Local(arg);\n+        let lvalue = mir::Lvalue::Local(arg);\n         let lookup_result = move_data.rev_lookup.find(&lvalue);\n         on_lookup_result_bits(tcx, mir, move_data,\n                               lookup_result,\n@@ -379,23 +378,23 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n     let block = &mir[loc.block];\n     match block.statements.get(loc.statement_index) {\n         Some(stmt) => match stmt.kind {\n-            repr::StatementKind::SetDiscriminant{ .. } => {\n+            mir::StatementKind::SetDiscriminant{ .. } => {\n                 span_bug!(stmt.source_info.span, \"SetDiscrimant should not exist during borrowck\");\n             }\n-            repr::StatementKind::Assign(ref lvalue, _) => {\n+            mir::StatementKind::Assign(ref lvalue, _) => {\n                 debug!(\"drop_flag_effects: assignment {:?}\", stmt);\n                  on_lookup_result_bits(tcx, mir, move_data,\n                                        move_data.rev_lookup.find(lvalue),\n                                        |moi| callback(moi, DropFlagState::Present))\n             }\n-            repr::StatementKind::StorageLive(_) |\n-            repr::StatementKind::StorageDead(_) |\n-            repr::StatementKind::Nop => {}\n+            mir::StatementKind::StorageLive(_) |\n+            mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::Nop => {}\n         },\n         None => {\n             debug!(\"drop_flag_effects: replace {:?}\", block.terminator());\n             match block.terminator().kind {\n-                repr::TerminatorKind::DropAndReplace { ref location, .. } => {\n+                mir::TerminatorKind::DropAndReplace { ref location, .. } => {\n                     on_lookup_result_bits(tcx, mir, move_data,\n                                           move_data.rev_lookup.find(location),\n                                           |moi| callback(moi, DropFlagState::Present))"}, {"sha": "19f240da73059d498b543a087c967581cc98b695", "filename": "src/librustc_borrowck/borrowck/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fpatch.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::Ty;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n /// This struct represents a patch to MIR, which can add"}, {"sha": "946a3974747654d2ce00afd36532fe4d494b8e51", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n use eval;\n \n use rustc::middle::const_val::ConstVal;\n-use rustc::mir::repr::{Field, BorrowKind, Mutability};\n+use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::Def;"}, {"sha": "e45a372147f39ad59d63b359d063426440eb5fd6", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::DefKey;\n-use rustc::mir::repr::Mir;\n+use rustc::mir::Mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;"}, {"sha": "895de00159b364d1815ee73e0155cddb54a614f2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::subst::Substs;\n \n use rustc_const_math::ConstInt;\n \n-use rustc::mir::repr::Mir;\n+use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;"}, {"sha": "561cd3ab91411a89f018b13510f2c0ea33c7f12c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -605,7 +605,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }))\n     }\n \n-    fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::repr::Mir<'tcx>>> {\n+    fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n         self.mir_map.map.get(&def_id).map(|mir| self.lazy(mir))\n     }\n "}, {"sha": "3d1bd77d8bc287f998112101f9f86f6d28a341ff", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -221,7 +221,7 @@ pub struct Entry<'tcx> {\n     pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     pub ast: Option<Lazy<astencode::Ast<'tcx>>>,\n-    pub mir: Option<Lazy<mir::repr::Mir<'tcx>>>,\n+    pub mir: Option<Lazy<mir::Mir<'tcx>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "b53f8c4da86f224ea50cae87980eb9c3c4842af0", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::hir;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "9f612175e5da7ca6a4c86237679cce5ab707d26b", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -14,7 +14,7 @@\n //! Routines for manipulating the control-flow graph.\n \n use build::CFG;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n impl<'tcx> CFG<'tcx> {\n     pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {"}, {"sha": "6230123a9ca17d04adca22ff7b29cf3de2314ee9", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@\n \n use build::Builder;\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that"}, {"sha": "58abaa0c484f2c914dae3618c9ce05d2ee45d348", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::Category;\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n use rustc_data_structures::indexed_vec::Idx;\n "}, {"sha": "09cdcc74ef63e7f9ae78d48f0a2fbc79c9b5a81b", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::Category;\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr` into a value that can be used as an operand."}, {"sha": "490f675c3d5e3595907d6d0b2d0c7698aade2f42", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -22,7 +22,7 @@ use hair::*;\n use rustc_const_math::{ConstInt, ConstIsize};\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "fb12e08affd2d04f2612633a43f90620170851f1", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::Category;\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building"}, {"sha": "5fa08442221001cce28bbcab1d6f6ab93121d010", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -14,7 +14,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::{Category, RvalueFunc};\n use hair::*;\n use rustc::ty;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which"}, {"sha": "4a1926e7c57d4ec59886a4b4fcfb1503ccac540b", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::scope::LoopScope;\n use hair::*;\n use rustc::middle::region::CodeExtent;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "5c133780e433b53b922ed0e1a8a644deec08715d", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -16,7 +16,7 @@\n \n use build::{BlockAnd, Builder};\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n pub trait EvalInto<'tcx> {\n     fn eval_into<'a, 'gcx>(self,"}, {"sha": "727e634ef92db2051817ae03911fb73cbf9a6029", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fnv::FnvHashMap;\n use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{AdtDef, Ty};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use hair::*;\n use syntax::ast::{Name, NodeId};\n use syntax_pos::Span;"}, {"sha": "71282dcf0ba0770e8cc6b0ef99e3ae6af918dc27", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -25,7 +25,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::matches::{Binding, MatchPair, Candidate};\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n use std::mem;\n "}, {"sha": "5984b0f7893cdf856f8d22f9e83b11ad4743c38a", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::fnv::FnvHashMap;\n use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use syntax_pos::Span;\n use std::cmp::Ordering;\n "}, {"sha": "a013875b3110b9a713a2d8bd0d914184d59482a1", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n use build::Builder;\n use build::matches::MatchPair;\n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use std::u32;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "a5f51ef35b7419655b161ab9072da7ad9114e6b8", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -17,7 +17,7 @@ use rustc_const_math::{ConstInt, ConstUsize, ConstIsize};\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n \n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "d6fcc79a9a2134bc9ad0b997f3ac16140ddb19ba", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@ use hair::Pattern;\n \n use rustc::middle::region::{CodeExtent, CodeExtentData, ROOT_CODE_EXTENT};\n use rustc::ty::{self, Ty};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::util::nodemap::NodeMap;\n use rustc::hir;\n use syntax::abi::Abi;"}, {"sha": "af8170a1b8f5504076d74df520e5e6a1c387c899", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -91,7 +91,7 @@ use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use syntax_pos::Span;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fnv::FnvHashMap;"}, {"sha": "d20d50c561140a3f6cf526c13a554c7737f5e48c", "filename": "src/librustc_mir/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdef_use.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n //! Def-use analysis.\n \n-use rustc::mir::repr::{Local, Location, Lvalue, Mir};\n+use rustc::mir::{Local, Location, Lvalue, Mir};\n use rustc::mir::visit::{LvalueContext, MutVisitor, Visitor};\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::marker::PhantomData;"}, {"sha": "deacdb7d95b0928e1ab9164474777f52259c39d8", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n use dot;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::mir_map::MirMap;\n use rustc::ty::TyCtxt;\n use std::fmt::Debug;"}, {"sha": "1b324ac3132fcac6743fa1df9d3d578d12b5eb78", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -21,7 +21,7 @@ use rustc_const_eval as const_eval;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::cast::CastKind as TyCastKind;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::hir;\n use syntax::ptr::P;\n "}, {"sha": "678db1e544cb017ed900d5c226590099083fa382", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -16,7 +16,7 @@\n  */\n \n use hair::*;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n \n use rustc::middle::const_val::ConstVal;"}, {"sha": "e211334e5473ae5e43616916de6a189dc64f724e", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -14,7 +14,7 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::repr::{BinOp, BorrowKind, Field, Literal, UnOp, TypedConstVal};\n+use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp, TypedConstVal};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::Substs;"}, {"sha": "f5e1eaae82310a1493240052fef982a9749dc2bb", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -19,7 +19,7 @@\n use build;\n use rustc::dep_graph::DepNode;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::repr::Mir;\n+use rustc::mir::Mir;\n use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n use pretty;"}, {"sha": "c8c34d6e377e4c9a94629e590a48fda8e6287f9b", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n use build::{ScopeAuxiliaryVec, ScopeId};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::transform::MirSource;\n use rustc::ty::TyCtxt;"}, {"sha": "89e644e4fb077d5398d94c61f1add1bd0e981f8a", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n "}, {"sha": "8c8c42a1c7687bd9d19f6a9222646867b799aac1", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -30,7 +30,7 @@\n //! future.\n \n use def_use::DefUseAnalysis;\n-use rustc::mir::repr::{Constant, Local, Location, Lvalue, Mir, Operand, Rvalue, StatementKind};\n+use rustc::mir::{Constant, Local, Location, Lvalue, Mir, Operand, Rvalue, StatementKind};\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;"}, {"sha": "fcdeae6d6c080187124464aa9799b20a23e0dd2b", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc_data_structures::indexed_vec::Idx;\n "}, {"sha": "b8fd9fb12ab01ee8477b693f877563c8bc177a9d", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n use std::fmt;\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::{Pass, MirPass, MirPassHook, MirSource};\n use pretty;\n "}, {"sha": "cebd9dd9668e331404a3dced86cdb03369fe5889", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -14,7 +14,7 @@\n \n use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n "}, {"sha": "a01724d6d0e9bf9bfc862d93856533602c31e250", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n //! Performs various peephole optimizations.\n \n-use rustc::mir::repr::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n+use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::TyCtxt;"}, {"sha": "6ef5720b330c967fba092d67891f39ad8f622fb3", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@\n //! specified.\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{Pass, MirPass, MirSource};\n "}, {"sha": "41698574e0f1fa9233d7914cd1e8be8e41bc8124", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -22,7 +22,7 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n use rustc::ty::TyCtxt;"}, {"sha": "102f6ac1154b970ec943d753c2266962e8a7824f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -25,9 +25,9 @@ use rustc::hir::map::blocks::FnLikeNode;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::cast::CastTy;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::mir_map::MirMap;\n-use rustc::mir::traversal::{self, ReversePostorder};\n+use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::transform::{Pass, MirMapPass, MirPassHook, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::util::nodemap::DefIdMap;"}, {"sha": "8759a340d7e3c6e033330d982f56f1a0bb86d0cb", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,7 +13,7 @@\n use rustc::ty::TyCtxt;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n \n use std::fmt;\n "}, {"sha": "1a8a5fa18cf593916ec5b21513553c07531af56b", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -35,9 +35,8 @@\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n-use rustc::mir::traversal;\n use std::fmt;\n \n pub struct SimplifyCfg<'a> { label: &'a str }"}, {"sha": "9d3afe541cca8ce0e55714586e00ad952951ecd2", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -15,10 +15,10 @@ use rustc::infer::{self, InferCtxt, InferOk};\n use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n-use rustc::mir::repr::*;\n+use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n-use rustc::mir::visit::{self, Visitor};\n+use rustc::mir::visit::Visitor;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "e7dd6adb8cf681948c52fa83020c1bb03cfcac7b", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -198,10 +198,9 @@ use rustc::traits;\n use rustc::ty::subst::{Substs, Subst};\n use rustc::ty::{self, TypeFoldable, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::mir::repr as mir;\n+use rustc::mir::{self, Location};\n use rustc::mir::visit as mir_visit;\n use rustc::mir::visit::Visitor as MirVisitor;\n-use rustc::mir::repr::Location;\n \n use rustc_const_eval as const_eval;\n "}, {"sha": "d243c534ee1020cbb1dfc3a7b3622942bfab5ca7", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n use rustc::mir::mir_map::MirMap;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use base;\n use builder::Builder;\n use common::BuilderRef_res;"}, {"sha": "4f3ff2fbaee415632f1b568d364346db2cf5e322", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -15,7 +15,7 @@ use super::utils::{DIB, span_start};\n use llvm;\n use llvm::debuginfo::{DIScope, DISubprogram};\n use common::{CrateContext, FunctionContext};\n-use rustc::mir::repr::{Mir, VisibilityScope};\n+use rustc::mir::{Mir, VisibilityScope};\n \n use libc::c_uint;\n use std::ptr;"}, {"sha": "3bc5f4f3dbc4ba9e4dedc0ba6009d334ef677dc8", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -32,7 +32,7 @@ use abi::Abi;\n use common::{CrateContext, FunctionContext, Block, BlockAndBuilder};\n use monomorphize::{self, Instance};\n use rustc::ty::{self, Ty};\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, FnvHashMap, FnvHashSet};\n "}, {"sha": "a934da12b9e365f095a2cd46985cafe147e01f16", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -13,9 +13,7 @@\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc::mir::repr as mir;\n-use rustc::mir::repr::TerminatorKind;\n-use rustc::mir::repr::Location;\n+use rustc::mir::{self, Location, TerminatorKind};\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n use common::{self, Block, BlockAndBuilder};"}, {"sha": "6d4b01b1d693dc8148eb9cdcd1e41e1c16f88882", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@ use llvm::{self, ValueRef};\n use rustc_const_eval::{ErrKind, ConstEvalErr, note_const_eval_err};\n use rustc::middle::lang_items;\n use rustc::ty;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use abi::{Abi, FnType, ArgType};\n use adt;\n use base;"}, {"sha": "587a9c8df3a2954dd6353a2fddf7f5281aef7d18", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -16,7 +16,7 @@ use rustc_const_math::ConstFloat::*;\n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstMathErr};\n use rustc::hir::def_id::DefId;\n use rustc::infer::TransNormalize;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};"}, {"sha": "d28c466e230bab664971e4702f71acf6eba0a9e2", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n use llvm::ValueRef;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc_data_structures::indexed_vec::Idx;\n use adt;"}, {"sha": "d6caef81445c201c50a054994f30c2fa044e1714", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -11,7 +11,7 @@\n use libc::c_uint;\n use llvm::{self, ValueRef};\n use rustc::ty;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use session::config::FullDebugInfo;\n use base;"}, {"sha": "62eda56e2e1ba33c1bfd01f6651945227a9850ec", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -10,7 +10,7 @@\n \n use llvm::ValueRef;\n use rustc::ty::Ty;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n \n use base;"}, {"sha": "f25877b1de12d1d398797227e6e3b85ea4243cdf", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -12,7 +12,7 @@ use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::Layout;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n \n use asm;\n use base;"}, {"sha": "296a0e8049e080377904cddbcc23e514861af116", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::repr as mir;\n+use rustc::mir;\n \n use base;\n use common::{self, BlockAndBuilder};"}, {"sha": "3bc4a40a39c99a144c1bafe11752527bd9708ef3", "filename": "src/test/run-pass-fulldeps/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36340ba994a8e5b12df70f0889eeb7d58e2705fe/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs?ref=36340ba994a8e5b12df70f0889eeb7d58e2705fe", "patch": "@@ -19,7 +19,7 @@ extern crate rustc_const_math;\n extern crate syntax;\n \n use rustc::mir::transform::{self, MirPass, MirSource};\n-use rustc::mir::repr::{Mir, Literal, Location};\n+use rustc::mir::{Mir, Literal, Location};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n use rustc::middle::const_val::ConstVal;"}]}