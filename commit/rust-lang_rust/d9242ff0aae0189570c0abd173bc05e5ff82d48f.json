{"sha": "d9242ff0aae0189570c0abd173bc05e5ff82d48f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjQyZmYwYWFlMDE4OTU3MGMwYWJkMTczYmMwNWU1ZmY4MmQ0OGY=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-09T23:26:13Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-23T21:45:04Z"}, "message": "When checking associated type bounds, use bound vars for GAT params in param_env", "tree": {"sha": "4fe57c35268434a7871d0dbcd9e08b394672b62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe57c35268434a7871d0dbcd9e08b394672b62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9242ff0aae0189570c0abd173bc05e5ff82d48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9242ff0aae0189570c0abd173bc05e5ff82d48f", "html_url": "https://github.com/rust-lang/rust/commit/d9242ff0aae0189570c0abd173bc05e5ff82d48f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9242ff0aae0189570c0abd173bc05e5ff82d48f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "html_url": "https://github.com/rust-lang/rust/commit/9583fd1bdd0127328e25e5b8c24dff575ec2c86b"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "cb8a24351373a4b7b2f3a58e98358404f7973c9d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9242ff0aae0189570c0abd173bc05e5ff82d48f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9242ff0aae0189570c0abd173bc05e5ff82d48f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=d9242ff0aae0189570c0abd173bc05e5ff82d48f", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         })\n     }\n \n-    fn fill_item<F>(\n+    pub fn fill_item<F>(\n         substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,\n         tcx: TyCtxt<'tcx>,\n         defs: &ty::Generics,\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         Self::fill_single(substs, defs, mk_kind)\n     }\n \n-    fn fill_single<F>(\n+    pub fn fill_single<F>(\n         substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,\n         defs: &ty::Generics,\n         mk_kind: &mut F,"}, {"sha": "b95cbd9025c42e83e9bc5f39f6260f238bd62749", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d9242ff0aae0189570c0abd173bc05e5ff82d48f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9242ff0aae0189570c0abd173bc05e5ff82d48f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d9242ff0aae0189570c0abd173bc05e5ff82d48f", "patch": "@@ -1225,6 +1225,7 @@ fn compare_type_predicate_entailment<'tcx>(\n /// For default associated types the normalization is not possible (the value\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n+#[tracing::instrument(level = \"debug\", skip(tcx))]\n pub fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,\n@@ -1238,10 +1239,57 @@ pub fn check_type_bounds<'tcx>(\n     //     type Bar<C> =...\n     // }\n     //\n-    // - `impl_substs` would be `[A, B, C]`\n-    // - `rebased_substs` would be `[(A, B), u32, C]`, combining the substs from\n-    //    the *trait* with the generic associated type parameters.\n-    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    // - `impl_trait_ref` would be `<(A, B) as Foo<u32>>\n+    // - `impl_ty_substs` would be `[A, B, ^0.0]`\n+    // - `rebased_substs` would be `[(A, B), u32, ^0.0]`, combining the substs from\n+    //    the *trait* with the generic associated type parameters (as bound vars).\n+    let defs: &ty::Generics = tcx.generics_of(impl_ty.def_id);\n+    let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n+    if let Some(def_id) = defs.parent {\n+        let parent_defs = tcx.generics_of(def_id);\n+        InternalSubsts::fill_item(&mut substs, tcx, parent_defs, &mut |param, _| {\n+            tcx.mk_param_from_def(param)\n+        });\n+    }\n+    let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n+        smallvec::SmallVec::with_capacity(defs.count());\n+    InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param.kind {\n+        GenericParamDefKind::Type { .. } => {\n+            let kind = ty::BoundTyKind::Param(param.name);\n+            let bound_var = ty::BoundVariableKind::Ty(kind);\n+            bound_vars.push(bound_var);\n+            tcx.mk_ty(ty::Bound(\n+                ty::INNERMOST,\n+                ty::BoundTy { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n+            ))\n+            .into()\n+        }\n+        GenericParamDefKind::Lifetime => {\n+            let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n+            let bound_var = ty::BoundVariableKind::Region(kind);\n+            bound_vars.push(bound_var);\n+            tcx.mk_region(ty::ReLateBound(\n+                ty::INNERMOST,\n+                ty::BoundRegion { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n+            ))\n+            .into()\n+        }\n+        GenericParamDefKind::Const { .. } => {\n+            let bound_var = ty::BoundVariableKind::Const;\n+            bound_vars.push(bound_var);\n+            tcx.mk_const(ty::Const {\n+                ty: tcx.type_of(param.def_id),\n+                val: ty::ConstKind::Bound(\n+                    ty::INNERMOST,\n+                    ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                ),\n+            })\n+            .into()\n+        }\n+    });\n+    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+    let impl_ty_substs = tcx.intern_substs(&substs);\n+\n     let rebased_substs =\n         impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n     let impl_ty_value = tcx.type_of(impl_ty.def_id);\n@@ -1270,18 +1318,26 @@ pub fn check_type_bounds<'tcx>(\n                 // impl<T> X for T where T: X { type Y = <T as X>::Y; }\n             }\n             _ => predicates.push(\n-                ty::Binder::dummy(ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy {\n-                        item_def_id: trait_ty.def_id,\n-                        substs: rebased_substs,\n+                ty::Binder::bind_with_vars(\n+                    ty::ProjectionPredicate {\n+                        projection_ty: ty::ProjectionTy {\n+                            item_def_id: trait_ty.def_id,\n+                            substs: rebased_substs,\n+                        },\n+                        ty: impl_ty_value,\n                     },\n-                    ty: impl_ty_value,\n-                })\n+                    bound_vars,\n+                )\n                 .to_predicate(tcx),\n             ),\n         };\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n     };\n+    debug!(?normalize_param_env);\n+\n+    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    let rebased_substs =\n+        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n \n     tcx.infer_ctxt().enter(move |infcx| {\n         let constness = impl_ty\n@@ -1308,6 +1364,7 @@ pub fn check_type_bounds<'tcx>(\n             .explicit_item_bounds(trait_ty.def_id)\n             .iter()\n             .map(|&(bound, span)| {\n+                debug!(?bound);\n                 let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n "}, {"sha": "f905348ae32a30fdba2868b575b9782ac7311e9c", "filename": "src/test/ui/generic-associated-types/issue-87429.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9242ff0aae0189570c0abd173bc05e5ff82d48f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9242ff0aae0189570c0abd173bc05e5ff82d48f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs?ref=d9242ff0aae0189570c0abd173bc05e5ff82d48f", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n+}\n+\n+struct I32;\n+\n+impl Family for I32 {\n+    type Member<'a> = i32;\n+}\n+\n+fn main() {}"}]}