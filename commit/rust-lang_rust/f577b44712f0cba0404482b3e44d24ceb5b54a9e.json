{"sha": "f577b44712f0cba0404482b3e44d24ceb5b54a9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzdiNDQ3MTJmMGNiYTA0MDQ0ODJiM2U0NGQyNGNlYjViNTRhOWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T04:20:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T06:42:26Z"}, "message": "move LintSource to levels", "tree": {"sha": "e266c59e5b19792b56bbc96b291f4ddc2bb72726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e266c59e5b19792b56bbc96b291f4ddc2bb72726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f577b44712f0cba0404482b3e44d24ceb5b54a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f577b44712f0cba0404482b3e44d24ceb5b54a9e", "html_url": "https://github.com/rust-lang/rust/commit/f577b44712f0cba0404482b3e44d24ceb5b54a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f577b44712f0cba0404482b3e44d24ceb5b54a9e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "html_url": "https://github.com/rust-lang/rust/commit/03bdfe9db3c7814e474413c4238f3eca7c2bf39a"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "d43bc57ea7a605bac88a983dfce277ddc2cdfc7b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=f577b44712f0cba0404482b3e44d24ceb5b54a9e", "patch": "@@ -1,8 +1,8 @@\n use std::cmp;\n \n use crate::ich::StableHashingContext;\n+use crate::lint;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n-use crate::lint::{self, LintSource};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n@@ -11,13 +11,30 @@ use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::attr;\n use syntax::print::pprust;\n use syntax::sess::feature_err;\n \n use rustc_error_codes::*;\n \n+/// How a lint level was set.\n+#[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n+pub enum LintSource {\n+    /// Lint is at the default level as declared\n+    /// in rustc or a plugin.\n+    Default,\n+\n+    /// Lint level was set by an attribute.\n+    Node(Symbol, Span, Option<Symbol> /* RFC 2383 reason */),\n+\n+    /// Lint level was set by a command-line flag.\n+    CommandLine(Symbol),\n+}\n+\n+pub type LevelSource = (Level, LintSource);\n+\n pub struct LintLevelSets {\n     list: Vec<LintSet>,\n     lint_cap: Level,\n@@ -27,27 +44,27 @@ enum LintSet {\n     CommandLine {\n         // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n         // flag.\n-        specs: FxHashMap<LintId, (Level, LintSource)>,\n+        specs: FxHashMap<LintId, LevelSource>,\n     },\n \n     Node {\n-        specs: FxHashMap<LintId, (Level, LintSource)>,\n+        specs: FxHashMap<LintId, LevelSource>,\n         parent: u32,\n     },\n }\n \n impl LintLevelSets {\n-    fn new() -> Self {\n+    pub fn new() -> Self {\n         LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n     }\n \n-    fn get_lint_level(\n+    pub fn get_lint_level(\n         &self,\n         lint: &'static Lint,\n         idx: u32,\n-        aux: Option<&FxHashMap<LintId, (Level, LintSource)>>,\n+        aux: Option<&FxHashMap<LintId, LevelSource>>,\n         sess: &Session,\n-    ) -> (Level, LintSource) {\n+    ) -> LevelSource {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -59,7 +76,7 @@ impl LintLevelSets {\n         // `allow(warnings)` in scope then we want to respect that instead.\n         if level == Level::Warn {\n             let (warnings_level, warnings_src) =\n-                self.get_lint_id_level(LintId::of(lint::builtin::WARNINGS), idx, aux);\n+                self.get_lint_id_level(LintId::of(builtin::WARNINGS), idx, aux);\n             if let Some(configured_warning_level) = warnings_level {\n                 if configured_warning_level != Level::Warn {\n                     level = configured_warning_level;\n@@ -79,11 +96,11 @@ impl LintLevelSets {\n         return (level, src);\n     }\n \n-    fn get_lint_id_level(\n+    pub fn get_lint_id_level(\n         &self,\n         id: LintId,\n         mut idx: u32,\n-        aux: Option<&FxHashMap<LintId, (Level, LintSource)>>,\n+        aux: Option<&FxHashMap<LintId, LevelSource>>,\n     ) -> (Option<Level>, LintSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n@@ -499,7 +516,7 @@ impl LintLevelMap {\n         lint: &'static Lint,\n         id: HirId,\n         session: &Session,\n-    ) -> Option<(Level, LintSource)> {\n+    ) -> Option<LevelSource> {\n         self.id_to_set.get(&id).map(|idx| self.sets.get_lint_level(lint, *idx, None, session))\n     }\n }"}, {"sha": "eefcb670d0e835ca5c672e56ffeb1d42e1492797", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f577b44712f0cba0404482b3e44d24ceb5b54a9e", "patch": "@@ -18,8 +18,8 @@\n //! example) requires more effort. See `emit_lint` and `GatherNodeLevels`\n //! in `context.rs`.\n \n+pub use self::levels::LintSource::{self, *};\n pub use self::Level::*;\n-pub use self::LintSource::*;\n \n use crate::ty::TyCtxt;\n use rustc_data_structures::sync;\n@@ -29,7 +29,6 @@ use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n-use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -38,9 +37,8 @@ pub use crate::lint::context::{\n     LintContext, LintStore,\n };\n \n-pub use rustc_session::lint::builtin;\n+pub use rustc_session::lint::{builtin, LintArray, LintPass};\n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Level, Lint, LintId};\n-pub use rustc_session::lint::{LintArray, LintPass};\n \n #[macro_export]\n macro_rules! late_lint_methods {\n@@ -316,22 +314,6 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject =\n     Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send + sync::Sync + 'static>;\n \n-/// How a lint level was set.\n-#[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n-pub enum LintSource {\n-    /// Lint is at the default level as declared\n-    /// in rustc or a plugin.\n-    Default,\n-\n-    /// Lint level was set by an attribute.\n-    Node(ast::Name, Span, Option<Symbol> /* RFC 2383 reason */),\n-\n-    /// Lint level was set by a command-line flag.\n-    CommandLine(Symbol),\n-}\n-\n-pub type LevelSource = (Level, LintSource);\n-\n mod context;\n pub mod internal;\n mod levels;"}, {"sha": "86f82c1304c4895f0af4f70747d51b92a5ad448c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f577b44712f0cba0404482b3e44d24ceb5b54a9e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f577b44712f0cba0404482b3e44d24ceb5b54a9e", "patch": "@@ -20,9 +20,6 @@ use crate::mir::interpret::{Allocation, ConstValue, Scalar};\n use crate::mir::{\n     interpret, BodyAndCache, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n };\n-use crate::session::config::CrateType;\n-use crate::session::config::{BorrowckMode, OutputFilenames};\n-use crate::session::Session;\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n use crate::ty::free_region_map::FreeRegionMap;\n@@ -49,6 +46,9 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n+use rustc_session::config::CrateType;\n+use rustc_session::config::{BorrowckMode, OutputFilenames};\n+use rustc_session::Session;\n \n use arena::SyncDroplessArena;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}]}