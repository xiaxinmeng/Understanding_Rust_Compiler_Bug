{"sha": "1700f359bc5d6b8086194e3cc0f3698666dd41a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDBmMzU5YmM1ZDZiODA4NjE5NGUzY2MwZjM2OTg2NjZkZDQxYTQ=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2014-04-07T16:24:06Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2014-04-07T23:21:37Z"}, "message": "libglob: only return dirs for globs ending in /\n\n`foo.txt/` should not return `foo.txt` if `foo.txt` is in fact a text\nfile and not a directory.", "tree": {"sha": "1b13a272ce86db854784afb66d615a4f8aa92efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b13a272ce86db854784afb66d615a4f8aa92efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1700f359bc5d6b8086194e3cc0f3698666dd41a4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1700f359bc5d6b8086194e3cc0f3698666dd41a4", "html_url": "https://github.com/rust-lang/rust/commit/1700f359bc5d6b8086194e3cc0f3698666dd41a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1700f359bc5d6b8086194e3cc0f3698666dd41a4/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4051bd900abbb47557dd8928532eedbc2bca0563", "url": "https://api.github.com/repos/rust-lang/rust/commits/4051bd900abbb47557dd8928532eedbc2bca0563", "html_url": "https://github.com/rust-lang/rust/commit/4051bd900abbb47557dd8928532eedbc2bca0563"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "d19924da5bedab10143ea74a56218e92152d7522", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1700f359bc5d6b8086194e3cc0f3698666dd41a4/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1700f359bc5d6b8086194e3cc0f3698666dd41a4/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=1700f359bc5d6b8086194e3cc0f3698666dd41a4", "patch": "@@ -43,6 +43,7 @@ use std::path::is_sep;\n pub struct Paths {\n     root: Path,\n     dir_patterns: Vec<Pattern>,\n+    require_dir: bool,\n     options: MatchOptions,\n     todo: Vec<(Path,uint)>,\n }\n@@ -106,6 +107,7 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n             return Paths {\n                 root: root,\n                 dir_patterns: Vec::new(),\n+                require_dir: false,\n                 options: options,\n                 todo: Vec::new(),\n             };\n@@ -118,6 +120,7 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n                        .split_terminator(is_sep)\n                        .map(|s| Pattern::new(s))\n                        .collect::<Vec<Pattern>>();\n+    let require_dir = pattern.chars().next_back().map(is_sep) == Some(true);\n \n     let mut todo = Vec::new();\n     if dir_patterns.len() > 0 {\n@@ -130,6 +133,7 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n     Paths {\n         root: root,\n         dir_patterns: dir_patterns,\n+        require_dir: require_dir,\n         options: options,\n         todo: todo,\n     }\n@@ -146,7 +150,10 @@ impl Iterator<Path> for Paths {\n             let (path,idx) = self.todo.pop().unwrap();\n             // idx -1: was already checked by fill_todo, maybe path was '.' or\n             // '..' that we can't match here because of normalization.\n-            if idx == -1 as uint { return Some(path); }\n+            if idx == -1 as uint {\n+                if self.require_dir && !path.is_dir() { continue; }\n+                return Some(path);\n+            }\n             let ref pattern = *self.dir_patterns.get(idx);\n \n             if pattern.matches_with(match path.filename_str() {\n@@ -161,7 +168,10 @@ impl Iterator<Path> for Paths {\n                 if idx == self.dir_patterns.len() - 1 {\n                     // it is not possible for a pattern to match a directory *AND* its children\n                     // so we don't need to check the children\n-                    return Some(path);\n+\n+                    if !self.require_dir || path.is_dir() {\n+                        return Some(path);\n+                    }\n                 } else {\n                     fill_todo(&mut self.todo, self.dir_patterns.as_slice(),\n                               idx + 1, &path, self.options);"}, {"sha": "bd6161dd31a18def3ebf4c6adf65f84b21f78622", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1700f359bc5d6b8086194e3cc0f3698666dd41a4/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1700f359bc5d6b8086194e3cc0f3698666dd41a4/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=1700f359bc5d6b8086194e3cc0f3698666dd41a4", "patch": "@@ -138,6 +138,8 @@ pub fn main() {\n     assert_eq!(glob_vec(\"nonexistent/../bbb\"), Vec::new());\n     assert_eq!(glob_vec(\"aaa/tomato/tomato.txt/..\"), Vec::new());\n \n+    assert_eq!(glob_vec(\"aaa/tomato/tomato.txt/\"), Vec::new());\n+\n     assert_eq!(glob_vec(\"aa[a]\"), vec!(abs_path(\"aaa\")));\n     assert_eq!(glob_vec(\"aa[abc]\"), vec!(abs_path(\"aaa\")));\n     assert_eq!(glob_vec(\"a[bca]a\"), vec!(abs_path(\"aaa\")));"}]}