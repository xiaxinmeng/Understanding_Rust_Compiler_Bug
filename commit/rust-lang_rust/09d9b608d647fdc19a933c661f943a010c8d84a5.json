{"sha": "09d9b608d647fdc19a933c661f943a010c8d84a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDliNjA4ZDY0N2ZkYzE5YTkzM2M2NjFmOTQzYTAxMGM4ZDg0YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T05:09:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T05:09:35Z"}, "message": "Auto merge of #86282 - camelid:macro_rules-matchers, r=jyn514\n\nPretty-print macro matchers instead of using source code\n\nFixes #86208.", "tree": {"sha": "7359a589e6c9ddae2b858fb1ef13b9c5ede1f697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7359a589e6c9ddae2b858fb1ef13b9c5ede1f697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d9b608d647fdc19a933c661f943a010c8d84a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d9b608d647fdc19a933c661f943a010c8d84a5", "html_url": "https://github.com/rust-lang/rust/commit/09d9b608d647fdc19a933c661f943a010c8d84a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d9b608d647fdc19a933c661f943a010c8d84a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44860d13fa866d002a5f29a4684dad29ff268af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44860d13fa866d002a5f29a4684dad29ff268af9", "html_url": "https://github.com/rust-lang/rust/commit/44860d13fa866d002a5f29a4684dad29ff268af9"}, {"sha": "7ffec7028a54aeed6076f7043734b682fdf68f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffec7028a54aeed6076f7043734b682fdf68f6e", "html_url": "https://github.com/rust-lang/rust/commit/7ffec7028a54aeed6076f7043734b682fdf68f6e"}], "stats": {"total": 177, "additions": 107, "deletions": 70}, "files": [{"sha": "8b7b306a54dd2bd3c003486ac15a1ec6e905e3b5", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -136,11 +136,11 @@ pub fn print_crate<'a>(\n     s.s.eof()\n }\n \n-// This makes printed token streams look slightly nicer,\n-// and also addresses some specific regressions described in #63896 and #73345.\n+/// This makes printed token streams look slightly nicer,\n+/// and also addresses some specific regressions described in #63896 and #73345.\n fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     if let TokenTree::Token(token) = prev {\n-        if matches!(token.kind, token::Dot) {\n+        if matches!(token.kind, token::Dot | token::Dollar) {\n             return false;\n         }\n         if let token::DocComment(comment_kind, ..) = token.kind {"}, {"sha": "7b1b23ff8e6d37ad0aea986455e395b196e31b58", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -13,10 +13,9 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n \n use crate::clean::{\n-    self, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, ToSource, Type,\n+    self, utils, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, Type,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -547,23 +546,20 @@ fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::Item\n     let imported_from = cx.tcx.crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n-            let matchers: Vec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n+            if let ast::ItemKind::MacroDef(ref def) = def.kind {\n                 let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n-                tts.chunks(4).map(|arm| arm[0].span()).collect()\n-            } else {\n-                unreachable!()\n-            };\n+                let matchers = tts.chunks(4).map(|arm| &arm[0]);\n \n-            let source = format!(\n-                \"macro_rules! {} {{\\n{}}}\",\n-                name.clean(cx),\n-                matchers\n-                    .iter()\n-                    .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                    .collect::<String>()\n-            );\n+                let source = format!(\n+                    \"macro_rules! {} {{\\n{}}}\",\n+                    name.clean(cx),\n+                    utils::render_macro_arms(matchers, \";\")\n+                );\n \n-            clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+                clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+            } else {\n+                unreachable!()\n+            }\n         }\n         LoadedMacro::ProcMacro(ext) => clean::ProcMacroItem(clean::ProcMacro {\n             kind: ext.macro_kind(),"}, {"sha": "b0e75493aa4dcbbcbf797d69bf327739930ef71b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -2172,17 +2172,11 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n         let (item, renamed) = self;\n         let name = renamed.unwrap_or(item.ident.name);\n         let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();\n+        // Extract the macro's matchers. They represent the \"interface\" of the macro.\n+        let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+\n         let source = if item.ast.macro_rules {\n-            format!(\n-                \"macro_rules! {} {{\\n{}}}\",\n-                name,\n-                matchers\n-                    .iter()\n-                    .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                    .collect::<String>(),\n-            )\n+            format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n         } else {\n             let vis = item.vis.clean(cx);\n             let def_id = item.def_id.to_def_id();\n@@ -2192,17 +2186,14 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n                     \"{}macro {}{} {{\\n    ...\\n}}\",\n                     vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n-                    matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n+                    matchers.map(render_macro_matcher).collect::<String>(),\n                 )\n             } else {\n                 format!(\n                     \"{}macro {} {{\\n{}}}\",\n                     vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n-                    matchers\n-                        .iter()\n-                        .map(|span| { format!(\"    {} => {{ ... }},\\n\", span.to_src(cx)) })\n-                        .collect::<String>(),\n+                    render_macro_arms(matchers, \",\"),\n                 )\n             }\n         };"}, {"sha": "fb46b81102caaf0e3b024cb56a4c150a53a1f397", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -7,13 +7,15 @@ use crate::clean::{\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n+use rustc_ast::tokenstream::TokenTree;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use std::fmt::Write as _;\n use std::mem;\n \n #[cfg(test)]\n@@ -248,22 +250,6 @@ crate fn build_deref_target_impls(cx: &mut DocContext<'_>, items: &[Item], ret:\n     }\n }\n \n-crate trait ToSource {\n-    fn to_src(&self, cx: &DocContext<'_>) -> String;\n-}\n-\n-impl ToSource for rustc_span::Span {\n-    fn to_src(&self, cx: &DocContext<'_>) -> String {\n-        debug!(\"converting span {:?} to snippet\", self);\n-        let sn = match cx.sess().source_map().span_to_snippet(*self) {\n-            Ok(x) => x,\n-            Err(_) => String::new(),\n-        };\n-        debug!(\"got snippet {}\", sn);\n-        sn\n-    }\n-}\n-\n crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     use rustc_hir::*;\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n@@ -572,3 +558,22 @@ crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n ///\n /// Set by `bootstrap::Builder::doc_rust_lang_org_channel` in order to keep tests passing on beta/stable.\n crate const DOC_RUST_LANG_ORG_CHANNEL: &'static str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");\n+\n+/// Render a sequence of macro arms in a format suitable for displaying to the user\n+/// as part of an item declaration.\n+pub(super) fn render_macro_arms<'a>(\n+    matchers: impl Iterator<Item = &'a TokenTree>,\n+    arm_delim: &str,\n+) -> String {\n+    let mut out = String::new();\n+    for matcher in matchers {\n+        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(matcher), arm_delim).unwrap();\n+    }\n+    out\n+}\n+\n+/// Render a macro matcher in a format suitable for displaying to the user\n+/// as part of an item declaration.\n+pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n+    rustc_ast_pretty::pprust::tt_to_string(matcher)\n+}"}, {"sha": "e6c4d195691ca0d2abf06982908e9745cd2e5629", "filename": "src/test/pretty/cast-lt.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -8,6 +8,6 @@\n // pretty-mode:expanded\n // pp-exact:cast-lt.pp\n \n-macro_rules! negative { ($ e : expr) => { $ e < 0 } }\n+macro_rules! negative { ($e : expr) => { $e < 0 } }\n \n fn main() { (1 as i32) < 0; }"}, {"sha": "257c032b536da2356a97dba71cddea90560b49f4", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(rustc_attrs)]\n \n-macro_rules! mac { ($ ($ tt : tt) *) => () }\n+macro_rules! mac { ($($tt : tt) *) => () }\n \n mac! {\n     struct S { field1 : u8, field2 : u16, } impl Clone for S"}, {"sha": "d3865d93a30d8ca0949c0808a39f0aeded46aa11", "filename": "src/test/pretty/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -2,6 +2,6 @@\n \n #![feature(decl_macro)]\n \n-pub(crate) macro mac { ($ arg : expr) => { $ arg + $ arg } }\n+pub(crate) macro mac { ($arg : expr) => { $arg + $arg } }\n \n fn main() { }"}, {"sha": "3b13f2530dd9276f2009948de758835e9c6bd63c", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -11,9 +11,9 @@ macro_rules! matcher_brackets {\n }\n \n macro_rules! all_fragments {\n-    ($ b : block, $ e : expr, $ i : ident, $ it : item, $ l : lifetime, $ lit\n-     : literal, $ m : meta, $ p : pat, $ pth : path, $ s : stmt, $ tt : tt, $\n-     ty : ty, $ vis : vis) => { } ;\n+    ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n+     literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n+     $vis : vis) => { } ;\n }\n \n fn main() { }"}, {"sha": "fe19dadbe0243113ffde82585b78e34123115ef8", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -9,7 +9,7 @@ pub macro my_macro() {\n \n }\n \n-// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok:tt)*) {'\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok : tt) *) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro my_macro_2($($tok:tt)*) {\n@@ -18,8 +18,8 @@ pub macro my_macro_2($($tok:tt)*) {\n \n // @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n // @has - //pre '(_) => { ... },'\n-// @has - //pre '($foo:ident . $bar:expr) => { ... },'\n-// @has - //pre '($($foo:literal),+) => { ... }'\n+// @has - //pre '($foo : ident.$bar : expr) => { ... },'\n+// @has - //pre '($($foo : literal), +) => { ... },'\n // @has - //pre '}'\n pub macro my_macro_multi {\n     (_) => {\n@@ -33,7 +33,7 @@ pub macro my_macro_multi {\n     }\n }\n \n-// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo:expr) {'\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo : expr) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro by_example_single {\n@@ -42,12 +42,12 @@ pub macro by_example_single {\n \n mod a {\n     mod b {\n-        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo:expr) {'\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo : expr) {'\n         pub(in super) macro by_example_vis {\n             ($foo:expr) => {}\n         }\n         mod c {\n-            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo:expr) {'\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo : expr) {'\n             pub(in a) macro by_example_vis_named {\n                 ($foo:expr) => {}\n             }"}, {"sha": "5f8340e7312a0ec03cfaf69c3797e3614f3e4d74", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -0,0 +1,45 @@\n+// This is a regression test for issue #86208.\n+// It is also a general test of macro_rules! display.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/macro.todo.html'\n+// @has - '//span[@class=\"macro\"]' 'macro_rules!'\n+// @has - '//span[@class=\"ident\"]' 'todo'\n+// Note: count = 2 * ('=' + '>') + '+' = 2 * (1 + 1) + 1 = 5\n+// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 5\n+\n+// @has - '{ ()'\n+// @has - '//span[@class=\"op\"]' '='\n+// @has - '//span[@class=\"op\"]' '>'\n+// @has - '{ ... };'\n+\n+// @has - '($('\n+// @has - '//span[@class=\"macro-nonterminal\"]' '$'\n+// @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n+// @has - ':'\n+// @has - '//span[@class=\"ident\"]' 'tt'\n+// @has - '),'\n+// @has - '//span[@class=\"op\"]' '+'\n+// @has - ')'\n+pub use std::todo;\n+\n+mod mod1 {\n+    // @has 'foo/macro.macro1.html'\n+    // @has - 'macro_rules!'\n+    // @has - 'macro1'\n+    // @has - '{ ()'\n+    // @has - '($('\n+    // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n+    // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n+    // @has - ':'\n+    // @has - 'expr'\n+    // @has - '),'\n+    // @has - '+'\n+    // @has - ')'\n+    #[macro_export]\n+    macro_rules! macro1 {\n+        () => {};\n+        ($($arg:expr),+) => { stringify!($($arg),+) };\n+    }\n+}"}, {"sha": "1cd454720e7d14250bc3fc07cb0e0be25f4dbcc9", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -1,7 +1,7 @@\n // @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a:tt) => { ... };'\n-// @has - //pre '($e:expr) => { ... };'\n+// @has - //pre '($a : tt) => { ... };'\n+// @has - //pre '($e : expr) => { ... };'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];\n@@ -12,8 +12,8 @@ macro_rules! my_macro {\n // Check that exported macro defined in a module are shown at crate root.\n // @has macros/macro.my_sub_macro.html //pre 'macro_rules! my_sub_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a:tt) => { ... };'\n-// @has - //pre '($e:expr) => { ... };'\n+// @has - //pre '($a : tt) => { ... };'\n+// @has - //pre '($e : expr) => { ... };'\n mod sub {\n     #[macro_export]\n     macro_rules! my_sub_macro {"}, {"sha": "ae2857d505e6028c29cefad9abf6e87cae4f4c92", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -8,7 +8,7 @@\n #![feature /* 0#0 */(no_core)]\n #![no_core /* 0#0 */]\n \n-macro_rules! foo /* 0#0 */ { ($ x : ident) => { y + $ x } }\n+macro_rules! foo /* 0#0 */ { ($x : ident) => { y + $x } }\n \n fn bar /* 0#0 */() {\n     let x /* 0#0 */ = 1;"}, {"sha": "368326e02166e573038f528482e8faf5615c4fd8", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -30,7 +30,7 @@ macro_rules! produce_it\n     */ {\n     () =>\n     {\n-        meta_macro :: print_def_site! ($ crate :: dummy! ()) ;\n+        meta_macro :: print_def_site! ($crate :: dummy! ()) ;\n         // `print_def_site!` will respan the `$crate` identifier\n         // with `Span::def_site()`. This should cause it to resolve\n         // relative to `meta_macro`, *not* `make_macro` (despite"}, {"sha": "2911707fdb03e60d7f95308ce5895ea8d86952d7", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/09d9b608d647fdc19a933c661f943a010c8d84a5/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=09d9b608d647fdc19a933c661f943a010c8d84a5", "patch": "@@ -50,9 +50,9 @@ macro_rules! outer\n     /*\n     0#0\n     */ {\n-    ($ item : item) =>\n+    ($item : item) =>\n     {\n-        macro inner() { print_bang! { $ item } } inner! () ;\n+        macro inner() { print_bang! { $item } } inner! () ;\n \n     } ;\n }"}]}