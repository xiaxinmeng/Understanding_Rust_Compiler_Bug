{"sha": "0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "node_id": "C_kwDOAAsO6NoAKDBkN2VkM2JhODQ0NTQ1MjAxM2RkODczZGM5YWJjYWQ0MWEzZDgyYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T04:50:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T04:50:01Z"}, "message": "Auto merge of #110214 - compiler-errors:rollup-mkig4t6, r=compiler-errors\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #96971 (Initial support for loongarch64-unknown-linux-gnu)\n - #109894 (Remove Errors section from var_os docs)\n - #110000 (Rename tests/ui/unique to tests/ui/box/unit)\n - #110018 (Pass host linker to compiletest.)\n - #110104 ( Reword the docstring in todo! macro definition, fixing a typo)\n - #110113 (Fix `x test ui --target foo` when download-rustc is enabled)\n - #110126 (Support safe transmute in new solver)\n - #110155 (Fix typos in librustdoc, tools and config files)\n - #110162 (rustdoc: remove redundant expandSection code from main.js)\n - #110173 (kmc-solid: Implement `Socket::read_buf`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e4cae5e26f0f39289e47916af466cc1c74c96c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cae5e26f0f39289e47916af466cc1c74c96c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "html_url": "https://github.com/rust-lang/rust/commit/0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d1802b8882452f7d9d1bf514a096c5c8a22303", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d1802b8882452f7d9d1bf514a096c5c8a22303", "html_url": "https://github.com/rust-lang/rust/commit/13d1802b8882452f7d9d1bf514a096c5c8a22303"}, {"sha": "4c9cd9e739c0b746db1c5912290cb8a9a83089a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9cd9e739c0b746db1c5912290cb8a9a83089a2", "html_url": "https://github.com/rust-lang/rust/commit/4c9cd9e739c0b746db1c5912290cb8a9a83089a2"}], "stats": {"total": 1703, "additions": 1460, "deletions": 243}, "files": [{"sha": "046903fe5aca4b045062377a3f6c670fc9c227c7", "filename": "compiler/rustc_codegen_gcc/example/alloc_system.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -15,6 +15,7 @@\n const MIN_ALIGN: usize = 8;\n #[cfg(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n+              target_arch = \"loongarch64\",\n               target_arch = \"mips64\",\n               target_arch = \"s390x\",\n               target_arch = \"sparc64\"))]"}, {"sha": "d5d843702c0031e086df18f16600840acee1a20f", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -127,6 +127,7 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n         \"msp430\" => Architecture::Msp430,\n         \"hexagon\" => Architecture::Hexagon,\n         \"bpf\" => Architecture::Bpf,\n+        \"loongarch64\" => Architecture::LoongArch64,\n         // Unsupported architecture.\n         _ => return None,\n     };\n@@ -190,6 +191,10 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n             }\n             e_flags\n         }\n+        Architecture::LoongArch64 => {\n+            // Source: https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_e_flags_identifies_abi_type_and_version\n+            elf::EF_LARCH_OBJABI_V1 | elf::EF_LARCH_ABI_DOUBLE_FLOAT\n+        }\n         _ => 0,\n     };\n     // adapted from LLVM's `MCELFObjectTargetWriter::getOSABI`"}, {"sha": "b0783d75d4756156696775ca2950742929aff0be", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -10,6 +10,7 @@ const OPTIONAL_COMPONENTS: &[&str] = &[\n     \"aarch64\",\n     \"amdgpu\",\n     \"avr\",\n+    \"loongarch\",\n     \"m68k\",\n     \"mips\",\n     \"powerpc\","}, {"sha": "08e38b0c9d59e3ed505ad1e3982668ca9854ee13", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -146,6 +146,12 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n #define SUBTARGET_HEXAGON\n #endif\n \n+#ifdef LLVM_COMPONENT_LOONGARCH\n+#define SUBTARGET_LOONGARCH SUBTARGET(LoongArch)\n+#else\n+#define SUBTARGET_LOONGARCH\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n@@ -159,6 +165,7 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n   SUBTARGET_SPARC                                                              \\\n   SUBTARGET_HEXAGON                                                            \\\n   SUBTARGET_RISCV                                                              \\\n+  SUBTARGET_LOONGARCH                                                          \\\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}, {"sha": "a49ded4fd7baa53f23f2d4a54f16f44b6b6e27a1", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -102,6 +102,14 @@ pub fn initialize_available_targets() {\n         LLVMInitializeM68kAsmPrinter,\n         LLVMInitializeM68kAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"loongarch\",\n+        LLVMInitializeLoongArchTargetInfo,\n+        LLVMInitializeLoongArchTarget,\n+        LLVMInitializeLoongArchTargetMC,\n+        LLVMInitializeLoongArchAsmPrinter,\n+        LLVMInitializeLoongArchAsmParser\n+    );\n     init_target!(\n         llvm_component = \"mips\",\n         LLVMInitializeMipsTargetInfo,"}, {"sha": "08a62c900f972f00594c4a0c6952717c3e32e295", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -83,6 +83,9 @@ pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n                 | TypeFlags::HAS_CT_PLACEHOLDER,\n         )\n     }\n+    fn has_non_region_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_PLACEHOLDER | TypeFlags::HAS_CT_PLACEHOLDER)\n+    }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }"}, {"sha": "db8b9c70e67023fdb2a2427e473e2ef144a14889", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_linux_gnu.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,17 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-linux-gnu\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"+f,+d\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            ..super::linux_gnu_base::opts()\n+        },\n+    }\n+}"}, {"sha": "192b2ab0ca2753cad5344f9c5bf0bd1cb8462d62", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1021,6 +1021,7 @@ supported_targets! {\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n     (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n+    (\"loongarch64-unknown-linux-gnu\", loongarch64_unknown_linux_gnu),\n     (\"m68k-unknown-linux-gnu\", m68k_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n     (\"mips64-unknown-linux-gnuabi64\", mips64_unknown_linux_gnuabi64),"}, {"sha": "a33e8ef4b4a3c22306a09c64a02912e06e29cbb6", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -225,6 +225,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<TyCtxt<'tcx>> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_transmute_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -373,6 +378,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_discriminant_kind_candidate(self, goal)\n         } else if lang_items.destruct_trait() == Some(trait_def_id) {\n             G::consider_builtin_destruct_candidate(self, goal)\n+        } else if lang_items.transmute_trait() == Some(trait_def_id) {\n+            G::consider_builtin_transmute_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "c29b5b04e000a5f10f266512fd035dec8054424a", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -639,4 +639,25 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         crate::traits::wf::unnormalized_obligations(self.infcx, param_env, arg)\n             .map(|obligations| obligations.into_iter().map(|obligation| obligation.into()))\n     }\n+\n+    pub(super) fn is_transmutable(\n+        &self,\n+        src_and_dst: rustc_transmute::Types<'tcx>,\n+        scope: Ty<'tcx>,\n+        assume: rustc_transmute::Assume,\n+    ) -> Result<Certainty, NoSolution> {\n+        // FIXME(transmutability): This really should be returning nested goals for `Answer::If*`\n+        match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n+            ObligationCause::dummy(),\n+            ty::Binder::dummy(src_and_dst),\n+            scope,\n+            assume,\n+        ) {\n+            rustc_transmute::Answer::Yes => Ok(Certainty::Yes),\n+            rustc_transmute::Answer::No(_)\n+            | rustc_transmute::Answer::IfTransmutable { .. }\n+            | rustc_transmute::Answer::IfAll(_)\n+            | rustc_transmute::Answer::IfAny(_) => Err(NoSolution),\n+        }\n+    }\n }"}, {"sha": "14cb43b89c3aa66144042100e60755407a03302c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -524,6 +524,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         bug!(\"`Destruct` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_transmute_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`BikeshedIntrinsicFrom` does not have an associated type: {:?}\", goal)\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "716d5acb324a21e2800948ad0b1e1cd89b0be0dc", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -598,6 +598,35 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn consider_builtin_transmute_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        // `rustc_transmute` does not have support for type or const params\n+        if goal.has_non_region_placeholders() {\n+            return Err(NoSolution);\n+        }\n+\n+        // Erase regions because we compute layouts in `rustc_transmute`,\n+        // which will ICE for region vars.\n+        let substs = ecx.tcx().erase_regions(goal.predicate.trait_ref.substs);\n+\n+        let Some(assume) = rustc_transmute::Assume::from_const(\n+            ecx.tcx(),\n+            goal.param_env,\n+            substs.const_at(3),\n+        ) else {\n+            return Err(NoSolution);\n+        };\n+\n+        let certainty = ecx.is_transmutable(\n+            rustc_transmute::Types { dst: substs.type_at(0), src: substs.type_at(1) },\n+            substs.type_at(2),\n+            assume,\n+        )?;\n+        ecx.evaluate_added_goals_and_make_canonical_response(certainty)\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "6d9c762ceca1ef62d3fdef87dedcedd34f457103", "filename": "config.example.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -88,7 +88,7 @@ changelog-seen = 2\n # the resulting rustc being unable to compile for the disabled architectures.\n #\n # To add support for new targets, see https://rustc-dev-guide.rust-lang.org/building/new-target.html.\n-#targets = \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n+#targets = \"AArch64;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are\n@@ -257,7 +257,7 @@ changelog-seen = 2\n #python = \"python\"\n \n # The path to the REUSE executable to use. Note that REUSE is not required in\n-# most cases, as our tooling relies on a cached (and shrinked) copy of the\n+# most cases, as our tooling relies on a cached (and shrunk) copy of the\n # REUSE output present in the git repository and in our source tarballs.\n #\n # REUSE is only needed if your changes caused the overall licensing of the"}, {"sha": "7c93c93b4a0199de1473dc2ab6a7196e70fa0a60", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -712,8 +712,8 @@ macro_rules! unimplemented {\n \n /// Indicates unfinished code.\n ///\n-/// This can be useful if you are prototyping and are just looking to have your\n-/// code typecheck.\n+/// This can be useful if you are prototyping and just\n+/// want a placeholder to let your code pass type analysis.\n ///\n /// The difference between [`unimplemented!`] and `todo!` is that while `todo!` conveys\n /// an intent of implementing the functionality later and the message is \"not yet"}, {"sha": "d372fa64065f5b4a62c8434f90cf6f9742a338fe", "filename": "library/std/src/env.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -236,21 +236,14 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// [`None`] if the variable isn't set or there's another error.\n+/// [`None`] if the variable isn't set or if there is another error.\n ///\n-/// Note that the method will not check if the environment variable\n-/// is valid Unicode. If you want to have an error on invalid UTF-8,\n-/// use the [`var`] function instead.\n-///\n-/// # Errors\n-///\n-/// This function returns an error if the environment variable isn't set.\n-///\n-/// This function may return an error if the environment variable's name contains\n+/// It may return `None` if the environment variable's name contains\n /// the equal sign character (`=`) or the NUL character.\n ///\n-/// This function may return an error if the environment variable's value contains\n-/// the NUL character.\n+/// Note that this function will not check if the environment variable\n+/// is valid Unicode. If you want to have an error on invalid UTF-8,\n+/// use the [`var`] function instead.\n ///\n /// # Examples\n ///\n@@ -895,6 +888,7 @@ pub mod consts {\n     /// - x86_64\n     /// - arm\n     /// - aarch64\n+    /// - loongarch64\n     /// - m68k\n     /// - mips\n     /// - mips64"}, {"sha": "c55ca8ba26e2f21fe0709c6e9b2b2e4168e5b3fe", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -231,6 +231,7 @@ mod arch {\n }\n \n #[cfg(any(\n+    target_arch = \"loongarch64\",\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\","}, {"sha": "0421b47be024e39b35eeace7aad34d30064d695c", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -77,6 +77,9 @@ const UNWIND_DATA_REG: (i32, i32) = (0, 1); // R0, R1\n #[cfg(any(target_arch = \"riscv64\", target_arch = \"riscv32\"))]\n const UNWIND_DATA_REG: (i32, i32) = (10, 11); // x10, x11\n \n+#[cfg(target_arch = \"loongarch64\")]\n+const UNWIND_DATA_REG: (i32, i32) = (4, 5); // a0, a1\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "a5fcbdf39c6c685805841a93e9dbe862ed0e707f", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -22,6 +22,7 @@ pub const MIN_ALIGN: usize = 8;\n #[cfg(any(\n     target_arch = \"x86_64\",\n     target_arch = \"aarch64\",\n+    target_arch = \"loongarch64\",\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\","}, {"sha": "7d7bfae14329a601d700810511dd635f8e11ebc4", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -2,7 +2,7 @@ use super::abi;\n use crate::{\n     cmp,\n     ffi::CStr,\n-    io::{self, ErrorKind, IoSlice, IoSliceMut},\n+    io::{self, BorrowedBuf, BorrowedCursor, ErrorKind, IoSlice, IoSliceMut},\n     mem,\n     net::{Shutdown, SocketAddr},\n     ptr, str,\n@@ -294,19 +294,30 @@ impl Socket {\n         self.0.duplicate().map(Socket)\n     }\n \n-    fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {\n+    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {\n         let ret = cvt(unsafe {\n-            netc::recv(self.0.raw(), buf.as_mut_ptr() as *mut c_void, buf.len(), flags)\n+            netc::recv(self.0.raw(), buf.as_mut().as_mut_ptr().cast(), buf.capacity(), flags)\n         })?;\n-        Ok(ret as usize)\n+        unsafe {\n+            buf.advance(ret as usize);\n+        }\n+        Ok(())\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.recv_with_flags(buf, 0)\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), 0)?;\n+        Ok(buf.len())\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.recv_with_flags(buf, MSG_PEEK)\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), MSG_PEEK)?;\n+        Ok(buf.len())\n+    }\n+\n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.recv_with_flags(buf, 0)\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {"}, {"sha": "f6a68073b2f7e60e002d787a276b37e0974f32dd", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -75,6 +75,9 @@ pub const unwinder_private_data_size: usize = 20;\n #[cfg(all(target_arch = \"hexagon\", target_os = \"linux\"))]\n pub const unwinder_private_data_size: usize = 35;\n \n+#[cfg(target_arch = \"loongarch64\")]\n+pub const unwinder_private_data_size: usize = 2;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "025145244c491bebd09e8db5de8362bdf18a76c5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -304,6 +304,7 @@ def default_build_triple(verbose):\n         'i486': 'i686',\n         'i686': 'i686',\n         'i786': 'i686',\n+        'loongarch64': 'loongarch64',\n         'm68k': 'm68k',\n         'powerpc': 'powerpc',\n         'powerpc64': 'powerpc64',"}, {"sha": "c3e3fa009a677311ff129b95b0d5f8f680def0ba", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -139,7 +139,7 @@ pub fn read_commit_info_file(root: &Path) -> Option<Info> {\n                 sha: sha.to_owned(),\n                 short_sha: short_sha.to_owned(),\n             },\n-            _ => panic!(\"the `git-comit-info` file is malformed\"),\n+            _ => panic!(\"the `git-commit-info` file is malformed\"),\n         };\n         Some(info)\n     } else {"}, {"sha": "85d1c12cc6a09d936144b3b4eb70fbc42ce09b01", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -83,11 +83,11 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        // These artifacts were already copied (in `impl Step for Sysroot`).\n-        // Don't recompile them.\n+        // When using `download-rustc`, we already have artifacts for the host available\n+        // (they were copied in `impl Step for Sysroot`). Don't recompile them.\n         // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n         // so its artifacts can't be reused.\n-        if builder.download_rustc() && compiler.stage != 0 {\n+        if builder.download_rustc() && compiler.stage != 0 && target == builder.build.build {\n             return;\n         }\n "}, {"sha": "eaa3afa4b7b2088e3d1279642baf52316480d581", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -129,7 +129,8 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),\n     // (Some(Mode::Std), \"target_os\", Some(&[])),\n-    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\"])),\n+    // #[cfg(bootstrap)] loongarch64\n+    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\", \"loongarch64\"])),\n     /* Extra names used by dependencies */\n     // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),"}, {"sha": "d123deec3545475f317c24512b96b586609dae4c", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -291,7 +291,7 @@ impl Step for Llvm {\n         let llvm_targets = match &builder.config.llvm_targets {\n             Some(s) => s,\n             None => {\n-                \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n+                \"AArch64;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n                      Sparc;SystemZ;WebAssembly;X86\"\n             }\n         };"}, {"sha": "f9c5837b7d61365b7de80934400ee2495e202811", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1535,7 +1535,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         flags.extend(builder.config.cmd.rustc_args().iter().map(|s| s.to_string()));\n \n         if let Some(linker) = builder.linker(target) {\n-            cmd.arg(\"--linker\").arg(linker);\n+            cmd.arg(\"--target-linker\").arg(linker);\n+        }\n+        if let Some(linker) = builder.linker(compiler.host) {\n+            cmd.arg(\"--host-linker\").arg(linker);\n         }\n \n         let mut hostflags = flags.clone();"}, {"sha": "8ded2ee59dd2033b20a8a6a4511bd3cc0e51838f", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -29,6 +29,7 @@\n     - [\\*-linux-ohos](platform-support/openharmony.md)\n     - [\\*-unknown-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n+    - [loongarch\\*-unknown-linux-\\*](platform-support/loongarch-linux.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n     - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)"}, {"sha": "c378532dbf6c34953c246ea14de66a1e235596f8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -266,6 +266,7 @@ target | std | host | notes\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n+[`loongarch64-unknown-linux-gnu`](platform-support/loongarch-linux.md) | ? |  | LoongArch64 Linux (LP64D ABI)\n [`m68k-unknown-linux-gnu`](platform-support/m68k-unknown-linux-gnu.md) | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL"}, {"sha": "e046ec244ece98073a1227ddb30871f1344fb3df", "filename": "src/doc/rustc/src/platform-support/loongarch-linux.md", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,92 @@\n+# loongarch\\*-unknown-linux-\\*\n+\n+**Tier: 3**\n+\n+[LoongArch] is a new RISC ISA developed by Loongson Technology Corporation Limited.\n+\n+[LoongArch]: https://loongson.github.io/LoongArch-Documentation/README-EN.html\n+\n+The target name follow this format: `<machine>-<vendor>-<os><fabi_suffix>, where `<machine>` specifies the CPU family/model, `<vendor>` specifies the vendor and `<os>` the operating system name.\n+While the integer base ABI is\u00a0implied by the\u2002machine\u2002field, the floating point base ABI type is encoded into the os field of the specifier using the string suffix `<fabi-suffix>`.\n+\n+|    `<fabi-suffix>`     |                           `Description`                            |\n+|------------------------|--------------------------------------------------------------------|\n+|          f64           | The base ABI use 64-bits FPRs for parameter passing.(lp64d)|\n+|          f32           | The base ABI uses 32-bit FPRs for parameter passing. (lp64f)|\n+|          sf            | The base ABI uses no FPR for parameter passing. (lp64s)     |\n+\n+|`ABI type(Base ABI/ABI extension)`| `C library` | `kernel` |          `target tuple`          |\n+|----------------------------------|-------------|----------|----------------------------------|\n+|           lp64d/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnu |\n+|           lp64f/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnuf32 |\n+|           lp64s/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnusf  |\n+|           lp64d/base             |  musl libc  |  linux   | loongarch64-unknown-linux-musl|\n+|           lp64f/base             |  musl libc  |  linux   | loongarch64-unknown-linux-muslf32|\n+|           lp64s/base             |  musl libc  |  linux   | loongarch64-unknown-linux-muslsf |\n+\n+## Target maintainers\n+\n+- [ZHAI xiaojuan](https://github.com/zhaixiaojuan) `zhaixiaojuan@loongson.cn`\n+- [WANG rui](https://github.com/heiher) `wangrui@loongson.cn`\n+- [ZHAI xiang](https://github.com/xiangzhai) `zhaixiang@loongson.cn`\n+- [WANG Xuerui](https://github.com/xen0n) `git@xen0n.name`\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+A GNU toolchain for LoongArch target is required.  It can be downloaded from https://github.com/loongson/build-tools/releases, or built from the source code of GCC (12.1.0 or later) and Binutils (2.40 or later).\n+\n+## Building the target\n+\n+The target can be built by enabling it for a `rustc` build.\n+\n+```toml\n+[build]\n+target = [\"loongarch64-unknown-linux-gnu\"]\n+```\n+\n+Make sure `loongarch64-unknown-linux-gnu-gcc` can be searched from the directories specified in`$PATH`. Alternatively, you can use GNU LoongArch Toolchain by adding the following to `config.toml`:\n+\n+```toml\n+[target.loongarch64-unknown-linux-gnu]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc\"\n+cxx = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-g++\"\n+ar = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ar\"\n+ranlib = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ranlib\"\n+linker = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc\"\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled on a `x86_64-unknown-linux-gnu` host. Cross-compilation on other hosts may work but is not tested.\n+\n+## Testing\n+To test a cross-compiled binary on your build system, install the qemu binary that supports the LoongArch architecture and execute the following commands.\n+```text\n+CC_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc \\\n+CXX_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-g++ \\\n+AR_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc-ar \\\n+CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNUN_LINKER=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc \\\n+# SET TARGET SYSTEM LIBRARY PATH\n+CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNUN_RUNNER=\"qemu-loongarch64 -L /TOOLCHAIN_PATH/TARGET_LIBRAY_PATH\" \\\n+cargo run --target loongarch64-unknown-linux-gnu --release\n+```\n+Tested on x86 architecture, other architectures not tested.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for this target, you will either need to build Rust with the target enabled (see \"Building the target\" above), or build your own copy of `std` by using `build-std` or similar.\n+\n+If `rustc` has support for that target and the library artifacts are available, then Rust static libraries can be built for that target:\n+\n+```shell\n+$ rustc --target loongarch64-unknown-linux-gnu your-code.rs --crate-type staticlib\n+$ ls libyour_code.a\n+```\n+\n+On Rust Nightly it's possible to build without the target artifacts available:\n+\n+```text\n+cargo build -Z build-std --target loongarch64-unknown-linux-gnu\n+```"}, {"sha": "96f66c89c259f69fd7bcd274c3d5c4274fe5c01c", "filename": "src/doc/style-guide/src/expressions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fexpressions.md?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -643,7 +643,7 @@ Examples:\n ```rust\n match foo {\n     foo => bar,\n-    a_very_long_patten | another_pattern if an_expression() => {\n+    a_very_long_pattern | another_pattern if an_expression() => {\n         no_room_for_this_expression()\n     }\n     foo => {"}, {"sha": "05ffdcf201c82d85e415aff89bd51e1473aa749f", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats-format.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -3,4 +3,4 @@\n --------------------\n \n The `-Z dump-mono-stats-format` compiler flag controls what file format to use for `-Z dump-mono-stats`.\n-The default is markdown; currently JSON is also supported. JSON can be useful for programatically manipulating the results (e.g. to find the item that took the longest to compile).\n+The default is markdown; currently JSON is also supported. JSON can be useful for programmatically manipulating the results (e.g. to find the item that took the longest to compile)."}, {"sha": "f29e1e4d27a27d284576b9c156fa897596ed6a6a", "filename": "src/etc/installer/msi/rust.wxs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -119,7 +119,7 @@\n         <SetProperty Sequence=\"ui\" Before=\"CostFinalize\"\n             Id=\"WixAppFolder\" Value=\"WixPerUserFolder\">NOT ALLUSERS</SetProperty>\n \n-        <!-- UI sets ALLUSERS per user selection; progagate this choice to MSIINSTALLPERUSER before executing installation actions -->\n+        <!-- UI sets ALLUSERS per user selection; propagate this choice to MSIINSTALLPERUSER before executing installation actions -->\n         <SetProperty Sequence=\"ui\" Before=\"ExecuteAction\"\n             Id=\"MSIINSTALLPERUSER\" Value=\"1\">NOT ALLUSERS</SetProperty>\n "}, {"sha": "5177cffe6bae4ef8c52269dd0e6e6a8868d9d1ba", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -517,6 +517,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n                         \"asmjs\" => \"JavaScript\",\n+                        \"loongarch64\" => \"LoongArch LA64\",\n                         \"m68k\" => \"M68k\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\","}, {"sha": "c848089dad6b9d5046a2e4aaf5b57e92a422acbf", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -230,7 +230,7 @@ pub(crate) struct RenderOptions {\n     pub(crate) extension_css: Option<PathBuf>,\n     /// A map of crate names to the URL to use instead of querying the crate's `html_root_url`.\n     pub(crate) extern_html_root_urls: BTreeMap<String, String>,\n-    /// Whether to give precedence to `html_root_url` or `--exten-html-root-url`.\n+    /// Whether to give precedence to `html_root_url` or `--extern-html-root-url`.\n     pub(crate) extern_html_root_takes_precedence: bool,\n     /// A map of the default settings (values are as for DOM storage API). Keys should lack the\n     /// `rustdoc-` prefix."}, {"sha": "1b445b8981e1a7dbc8a9e7912e08cd311e290a3e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -349,10 +349,10 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             let mut br_with_padding = String::with_capacity(6 * indent + 28);\n             br_with_padding.push_str(\"\\n\");\n \n-            let padding_amout =\n+            let padding_amount =\n                 if ending == Ending::Newline { indent + 4 } else { indent + \"fn where \".len() };\n \n-            for _ in 0..padding_amout {\n+            for _ in 0..padding_amount {\n                 br_with_padding.push_str(\" \");\n             }\n             let where_preds = where_preds.to_string().replace('\\n', &br_with_padding);"}, {"sha": "9a968e48b272f69b94c925771d7c17f1aa34d21e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1796,10 +1796,11 @@ fn render_struct(\n     }\n     match ty {\n         None => {\n-            let where_diplayed = g.map(|g| print_where_clause_and_check(w, g, cx)).unwrap_or(false);\n+            let where_displayed =\n+                g.map(|g| print_where_clause_and_check(w, g, cx)).unwrap_or(false);\n \n             // If there wasn't a `where` clause, we add a whitespace.\n-            if !where_diplayed {\n+            if !where_displayed {\n                 w.write_str(\" {\");\n             } else {\n                 w.write_str(\"{\");"}, {"sha": "a6655663b82f7f3dc01dfdbb5934dc91c6d2b0a7", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -331,10 +331,6 @@ function preLoadCss(cssUrl) {\n         },\n     };\n \n-    function getPageId() {\n-        return window.location.hash.replace(/^#/, \"\");\n-    }\n-\n     const toggleAllDocsId = \"toggle-all-docs\";\n     let savedHash = \"\";\n \n@@ -355,12 +351,12 @@ function preLoadCss(cssUrl) {\n             }\n         }\n         // This part is used in case an element is not visible.\n-        if (savedHash !== window.location.hash) {\n-            savedHash = window.location.hash;\n-            if (savedHash.length === 0) {\n-                return;\n+        const pageId = window.location.hash.replace(/^#/, \"\");\n+        if (savedHash !== pageId) {\n+            savedHash = pageId;\n+            if (pageId !== \"\") {\n+                expandSection(pageId);\n             }\n-            expandSection(savedHash.slice(1)); // we remove the '#'\n         }\n     }\n \n@@ -699,11 +695,6 @@ function preLoadCss(cssUrl) {\n             }\n \n         });\n-\n-        const pageId = getPageId();\n-        if (pageId !== \"\") {\n-            expandSection(pageId);\n-        }\n     }());\n \n     window.rustdoc_add_line_numbers_to_examples = () => {"}, {"sha": "3cf8ceed62036997246c072979ffc832a6be6f0e", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -550,7 +550,7 @@ pub enum Type {\n     DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n-    /// Built in numberic (i*, u*, f*) types, bool, and char\n+    /// Built in numeric (i*, u*, f*) types, bool, and char\n     Primitive(String),\n     /// `extern \"ABI\" fn`\n     FunctionPointer(Box<FunctionPointer>),"}, {"sha": "68b6cef6432723803824691471c2957a4dcc2b99", "filename": "src/tools/collect-license-metadata/src/path_tree.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcollect-license-metadata%2Fsrc%2Fpath_tree.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -10,8 +10,8 @@ use std::path::{Path, PathBuf};\n #[derive(serde::Serialize)]\n #[serde(rename_all = \"kebab-case\", tag = \"type\")]\n pub(crate) enum Node<L> {\n-    Root { childs: Vec<Node<L>> },\n-    Directory { name: PathBuf, childs: Vec<Node<L>>, license: Option<L> },\n+    Root { children: Vec<Node<L>> },\n+    Directory { name: PathBuf, children: Vec<Node<L>>, license: Option<L> },\n     File { name: PathBuf, license: L },\n     Group { files: Vec<PathBuf>, directories: Vec<PathBuf>, license: L },\n     Empty,\n@@ -48,14 +48,14 @@ impl Node<LicenseId> {\n     /// ```\n     fn merge_directories(&mut self) {\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, license: None, .. } => {\n+            Node::Root { children } | Node::Directory { children, license: None, .. } => {\n                 let mut directories = BTreeMap::new();\n                 let mut files = Vec::new();\n \n-                for child in childs.drain(..) {\n+                for child in children.drain(..) {\n                     match child {\n-                        Node::Directory { name, mut childs, license: None } => {\n-                            directories.entry(name).or_insert_with(Vec::new).append(&mut childs);\n+                        Node::Directory { name, mut children, license: None } => {\n+                            directories.entry(name).or_insert_with(Vec::new).append(&mut children);\n                         }\n                         file @ Node::File { .. } => {\n                             files.push(file);\n@@ -73,14 +73,14 @@ impl Node<LicenseId> {\n                     }\n                 }\n \n-                childs.extend(directories.into_iter().map(|(name, childs)| Node::Directory {\n+                children.extend(directories.into_iter().map(|(name, children)| Node::Directory {\n                     name,\n-                    childs,\n+                    children,\n                     license: None,\n                 }));\n-                childs.append(&mut files);\n+                children.append(&mut files);\n \n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_directories();\n                 }\n             }\n@@ -105,13 +105,13 @@ impl Node<LicenseId> {\n     /// our inclusion of LLVM.\n     fn collapse_in_licensed_directories(&mut self) {\n         match self {\n-            Node::Directory { childs, license, .. } => {\n-                for child in &mut *childs {\n+            Node::Directory { children, license, .. } => {\n+                for child in &mut *children {\n                     child.collapse_in_licensed_directories();\n                 }\n \n                 let mut licenses_count = BTreeMap::new();\n-                for child in &*childs {\n+                for child in &*children {\n                     let Some(license) = child.license() else { continue };\n                     *licenses_count.entry(license).or_insert(0) += 1;\n                 }\n@@ -122,12 +122,12 @@ impl Node<LicenseId> {\n                     .map(|(license, _)| license);\n \n                 if let Some(most_popular_license) = most_popular_license {\n-                    childs.retain(|child| child.license() != Some(most_popular_license));\n+                    children.retain(|child| child.license() != Some(most_popular_license));\n                     *license = Some(most_popular_license);\n                 }\n             }\n-            Node::Root { childs } => {\n-                for child in &mut *childs {\n+            Node::Root { children } => {\n+                for child in &mut *children {\n                     child.collapse_in_licensed_directories();\n                 }\n             }\n@@ -138,29 +138,29 @@ impl Node<LicenseId> {\n     }\n \n     /// Reduce the depth of the tree by merging subdirectories with the same license as their\n-    /// parent directory into their parent, and adjusting the paths of the childs accordingly.\n+    /// parent directory into their parent, and adjusting the paths of the children accordingly.\n     fn merge_directory_licenses(&mut self) {\n         match self {\n-            Node::Root { childs } => {\n-                for child in &mut *childs {\n+            Node::Root { children } => {\n+                for child in &mut *children {\n                     child.merge_directory_licenses();\n                 }\n             }\n-            Node::Directory { childs, license, .. } => {\n+            Node::Directory { children, license, .. } => {\n                 let mut to_add = Vec::new();\n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_directory_licenses();\n \n                     let Node::Directory {\n                         name: child_name,\n-                        childs: child_childs,\n+                        children: child_children,\n                         license: child_license,\n                     } = child else { continue };\n \n                     if child_license != license {\n                         continue;\n                     }\n-                    for mut child_child in child_childs.drain(..) {\n+                    for mut child_child in child_children.drain(..) {\n                         match &mut child_child {\n                             Node::Root { .. } => {\n                                 panic!(\"can't have a root inside another element\");\n@@ -181,7 +181,7 @@ impl Node<LicenseId> {\n \n                     *child = Node::Empty;\n                 }\n-                childs.append(&mut to_add);\n+                children.append(&mut to_add);\n             }\n             Node::Empty => {}\n             Node::File { .. } => {}\n@@ -203,14 +203,14 @@ impl Node<LicenseId> {\n             directories: Vec<PathBuf>,\n         }\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, .. } => {\n+            Node::Root { children } | Node::Directory { children, .. } => {\n                 let mut grouped: BTreeMap<LicenseId, Grouped> = BTreeMap::new();\n \n-                for child in &mut *childs {\n+                for child in &mut *children {\n                     child.merge_groups();\n                     match child {\n-                        Node::Directory { name, childs, license: Some(license) } => {\n-                            if childs.is_empty() {\n+                        Node::Directory { name, children, license: Some(license) } => {\n+                            if children.is_empty() {\n                                 grouped\n                                     .entry(*license)\n                                     .or_insert_with(Grouped::default)\n@@ -234,16 +234,16 @@ impl Node<LicenseId> {\n                 for (license, mut grouped) in grouped.into_iter() {\n                     if grouped.files.len() + grouped.directories.len() <= 1 {\n                         if let Some(name) = grouped.files.pop() {\n-                            childs.push(Node::File { license, name });\n+                            children.push(Node::File { license, name });\n                         } else if let Some(name) = grouped.directories.pop() {\n-                            childs.push(Node::Directory {\n+                            children.push(Node::Directory {\n                                 name,\n-                                childs: Vec::new(),\n+                                children: Vec::new(),\n                                 license: Some(license),\n                             });\n                         }\n                     } else {\n-                        childs.push(Node::Group {\n+                        children.push(Node::Group {\n                             license,\n                             files: grouped.files,\n                             directories: grouped.directories,\n@@ -261,11 +261,11 @@ impl Node<LicenseId> {\n     /// sure to remove them from the tree.\n     fn remove_empty(&mut self) {\n         match self {\n-            Node::Root { childs } | Node::Directory { childs, .. } => {\n-                for child in &mut *childs {\n+            Node::Root { children } | Node::Directory { children, .. } => {\n+                for child in &mut *children {\n                     child.remove_empty();\n                 }\n-                childs.retain(|child| !matches!(child, Node::Empty));\n+                children.retain(|child| !matches!(child, Node::Empty));\n             }\n             Node::Group { .. } => {}\n             Node::File { .. } => {}\n@@ -275,7 +275,7 @@ impl Node<LicenseId> {\n \n     fn license(&self) -> Option<LicenseId> {\n         match self {\n-            Node::Directory { childs, license: Some(license), .. } if childs.is_empty() => {\n+            Node::Directory { children, license: Some(license), .. } if children.is_empty() => {\n                 Some(*license)\n             }\n             Node::File { license, .. } => Some(*license),\n@@ -285,7 +285,7 @@ impl Node<LicenseId> {\n }\n \n pub(crate) fn build(mut input: Vec<(PathBuf, LicenseId)>) -> Node<LicenseId> {\n-    let mut childs = Vec::new();\n+    let mut children = Vec::new();\n \n     // Ensure reproducibility of all future steps.\n     input.sort();\n@@ -295,15 +295,15 @@ pub(crate) fn build(mut input: Vec<(PathBuf, LicenseId)>) -> Node<LicenseId> {\n         for component in path.parent().unwrap_or_else(|| Path::new(\".\")).components().rev() {\n             node = Node::Directory {\n                 name: component.as_os_str().into(),\n-                childs: vec![node],\n+                children: vec![node],\n                 license: None,\n             };\n         }\n \n-        childs.push(node);\n+        children.push(node);\n     }\n \n-    Node::Root { childs }\n+    Node::Root { children }\n }\n \n /// Convert a `Node<LicenseId>` into a `Node<&License>`, expanding all interned license IDs with a\n@@ -313,14 +313,14 @@ pub(crate) fn expand_interned_licenses(\n     interner: &LicensesInterner,\n ) -> Node<&License> {\n     match node {\n-        Node::Root { childs } => Node::Root {\n-            childs: childs\n+        Node::Root { children } => Node::Root {\n+            children: children\n                 .into_iter()\n                 .map(|child| expand_interned_licenses(child, interner))\n                 .collect(),\n         },\n-        Node::Directory { name, childs, license } => Node::Directory {\n-            childs: childs\n+        Node::Directory { name, children, license } => Node::Directory {\n+            children: children\n                 .into_iter()\n                 .map(|child| expand_interned_licenses(child, interner))\n                 .collect(),"}, {"sha": "d2f494942cf9bdf8b2d61c517f08a2eea88ab16c", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -313,7 +313,8 @@ pub struct Config {\n     pub cflags: String,\n     pub cxxflags: String,\n     pub ar: String,\n-    pub linker: Option<String>,\n+    pub target_linker: Option<String>,\n+    pub host_linker: Option<String>,\n     pub llvm_components: String,\n \n     /// Path to a NodeJS executable. Used for JS doctests, emscripten and WASM tests"}, {"sha": "6a91d25a82436cbc55fe86dfaca9d003d74b8d7d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -134,7 +134,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n         .reqopt(\"\", \"cxxflags\", \"flags for the CXX compiler\", \"FLAGS\")\n         .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n-        .optopt(\"\", \"linker\", \"path to a linker\", \"PATH\")\n+        .optopt(\"\", \"target-linker\", \"path to a linker for the target\", \"PATH\")\n+        .optopt(\"\", \"host-linker\", \"path to a linker for the host\", \"PATH\")\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n         .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n@@ -307,7 +308,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         cflags: matches.opt_str(\"cflags\").unwrap(),\n         cxxflags: matches.opt_str(\"cxxflags\").unwrap(),\n         ar: matches.opt_str(\"ar\").unwrap_or_else(|| String::from(\"ar\")),\n-        linker: matches.opt_str(\"linker\"),\n+        target_linker: matches.opt_str(\"target-linker\"),\n+        host_linker: matches.opt_str(\"host-linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n         npm: matches.opt_str(\"npm\"),\n@@ -350,7 +352,8 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"adb_test_dir: {:?}\", config.adb_test_dir));\n     logv(c, format!(\"adb_device_status: {}\", config.adb_device_status));\n     logv(c, format!(\"ar: {}\", config.ar));\n-    logv(c, format!(\"linker: {:?}\", config.linker));\n+    logv(c, format!(\"target-linker: {:?}\", config.target_linker));\n+    logv(c, format!(\"host-linker: {:?}\", config.host_linker));\n     logv(c, format!(\"verbose: {}\", config.verbose));\n     logv(c, format!(\"format: {:?}\", config.format));\n     logv(c, \"\\n\".to_string());"}, {"sha": "0fa5c54ae8e68deb69905cdc6128b2d31ad45e71", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1570,7 +1570,7 @@ impl<'test> TestCx<'test> {\n             rustdoc.arg(\"--output-format\").arg(\"json\").arg(\"-Zunstable-options\");\n         }\n \n-        if let Some(ref linker) = self.config.linker {\n+        if let Some(ref linker) = self.config.target_linker {\n             rustdoc.arg(format!(\"-Clinker={}\", linker));\n         }\n \n@@ -2083,10 +2083,15 @@ impl<'test> TestCx<'test> {\n \n         if self.props.force_host {\n             self.maybe_add_external_args(&mut rustc, &self.config.host_rustcflags);\n+            if !is_rustdoc {\n+                if let Some(ref linker) = self.config.host_linker {\n+                    rustc.arg(format!(\"-Clinker={}\", linker));\n+                }\n+            }\n         } else {\n             self.maybe_add_external_args(&mut rustc, &self.config.target_rustcflags);\n             if !is_rustdoc {\n-                if let Some(ref linker) = self.config.linker {\n+                if let Some(ref linker) = self.config.target_linker {\n                     rustc.arg(format!(\"-Clinker={}\", linker));\n                 }\n             }\n@@ -3039,7 +3044,7 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"NODE\", node);\n         }\n \n-        if let Some(ref linker) = self.config.linker {\n+        if let Some(ref linker) = self.config.target_linker {\n             cmd.env(\"RUSTC_LINKER\", linker);\n         }\n "}, {"sha": "60c77167613db45da67fe05cb29fab3331a71a4f", "filename": "src/tools/generate-copyright/src/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -20,17 +20,17 @@ fn render_recursive(node: &Node, buffer: &mut Vec<u8>, depth: usize) -> Result<(\n     let prefix = std::iter::repeat(\"> \").take(depth + 1).collect::<String>();\n \n     match node {\n-        Node::Root { childs } => {\n-            for child in childs {\n+        Node::Root { children } => {\n+            for child in children {\n                 render_recursive(child, buffer, depth)?;\n             }\n         }\n-        Node::Directory { name, childs, license } => {\n+        Node::Directory { name, children, license } => {\n             render_license(&prefix, std::iter::once(name), license, buffer)?;\n-            if !childs.is_empty() {\n+            if !children.is_empty() {\n                 writeln!(buffer, \"{prefix}\")?;\n                 writeln!(buffer, \"{prefix}*Exceptions:*\")?;\n-                for child in childs {\n+                for child in children {\n                     writeln!(buffer, \"{prefix}\")?;\n                     render_recursive(child, buffer, depth + 1)?;\n                 }\n@@ -73,8 +73,8 @@ struct Metadata {\n #[derive(serde::Deserialize)]\n #[serde(rename_all = \"kebab-case\", tag = \"type\")]\n pub(crate) enum Node {\n-    Root { childs: Vec<Node> },\n-    Directory { name: String, childs: Vec<Node>, license: License },\n+    Root { children: Vec<Node> },\n+    Directory { name: String, children: Vec<Node>, license: License },\n     File { name: String, license: License },\n     Group { files: Vec<String>, directories: Vec<String>, license: License },\n }"}, {"sha": "e3d05ec83159d6385fd08b376fb94ab269718726", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -237,7 +237,7 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n             // Serde json doesn't implement Ord or Hash for Value, so we must\n             // use a Vec here. While in theory that makes setwize equality\n-            // O(n^2), in practice n will never be large enought to matter.\n+            // O(n^2), in practice n will never be large enough to matter.\n             let expected_values =\n                 values.iter().map(|v| string_to_value(v, cache)).collect::<Vec<_>>();\n             if expected_values.len() != got_values.len() {"}, {"sha": "45a9c93ee0b546640033a668fd2bb3d5852614a8", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,6 +1,6 @@\n use rustdoc_json_types::{Item, ItemEnum, ItemKind, ItemSummary};\n \n-/// A univeral way to represent an [`ItemEnum`] or [`ItemKind`]\n+/// A universal way to represent an [`ItemEnum`] or [`ItemKind`]\n #[derive(Debug, Clone, Copy)]\n pub(crate) enum Kind {\n     Module,\n@@ -53,7 +53,7 @@ impl Kind {\n             Primitive => true,\n             ForeignType => true,\n \n-            // FIXME(adotinthevoid): I'm not sure if these are corrent\n+            // FIXME(adotinthevoid): I'm not sure if these are correct\n             Keyword => false,\n             OpaqueTy => false,\n             ProcAttribute => false,"}, {"sha": "ee163ddfdd9a8714bcb9fe5919796040e8bea614", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -72,7 +72,7 @@ fn main() -> Result<()> {\n                         )\n                     }\n                     [sel] => eprintln!(\n-                        \"{} not in index or paths, but refered to at '{}'\",\n+                        \"{} not in index or paths, but referred to at '{}'\",\n                         err.id.0,\n                         json_find::to_jsonpath(&sel)\n                     ),\n@@ -85,12 +85,12 @@ fn main() -> Result<()> {\n                                 .collect::<Vec<_>>()\n                                 .join(\", \");\n                             eprintln!(\n-                                \"{} not in index or paths, but refered to at {sels}\",\n+                                \"{} not in index or paths, but referred to at {sels}\",\n                                 err.id.0\n                             );\n                         } else {\n                             eprintln!(\n-                                \"{} not in index or paths, but refered to at '{}' and {} more\",\n+                                \"{} not in index or paths, but referred to at '{}' and {} more\",\n                                 err.id.0,\n                                 json_find::to_jsonpath(&sel),\n                                 sels.len() - 1,"}, {"sha": "2018c239ba06803155352f9aa6689f36baf6795c", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -86,7 +86,7 @@ def gh_url():\n     return os.environ['TOOLSTATE_ISSUES_API_URL']\n \n \n-def maybe_delink(message):\n+def maybe_remove_mention(message):\n     # type: (str) -> str\n     if os.environ.get('TOOLSTATE_SKIP_MENTIONS') is not None:\n         return message.replace(\"@\", \"\")\n@@ -109,7 +109,7 @@ def issue(\n     else:\n         status_description = 'no longer builds'\n     request = json.dumps({\n-        'body': maybe_delink(textwrap.dedent('''\\\n+        'body': maybe_remove_mention(textwrap.dedent('''\\\n         Hello, this is your friendly neighborhood mergebot.\n         After merging PR {}, I observed that the tool {} {}.\n         A follow-up PR to the repository {} is needed to fix the fallout.\n@@ -285,7 +285,7 @@ def update_latest(\n     issue_url = gh_url() + '/{}/comments'.format(number)\n     response = urllib2.urlopen(urllib2.Request(\n         issue_url,\n-        json.dumps({'body': maybe_delink(message)}).encode(),\n+        json.dumps({'body': maybe_remove_mention(message)}).encode(),\n         {\n             'Authorization': 'token ' + github_token,\n             'Content-Type': 'application/json',"}, {"sha": "14603a2c71fc4e6e47d9d93ac5cf9b4de6952411", "filename": "tests/ui/box/unit/expr-block-generic-unique1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique1.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/expr-block-generic-unique1.rs"}, {"sha": "7879c144b10923aa9bbf9c1d474afdf76784ee50", "filename": "tests/ui/box/unit/expr-block-generic-unique2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Fexpr-block-generic-unique2.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/expr-block-generic-unique2.rs"}, {"sha": "86232683549b602463f200038968229346827a86", "filename": "tests/ui/box/unit/expr-if-unique.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Fexpr-if-unique.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/expr-if-unique.rs"}, {"sha": "b742973ce327d856d309a56819a3e5ec1ab28e15", "filename": "tests/ui/box/unit/unique-assign-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-assign-copy.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-assign-copy.rs"}, {"sha": "e7685b589ca8ee770e6bd7a9e075e513a7bdf44c", "filename": "tests/ui/box/unit/unique-assign-drop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-assign-drop.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-assign-drop.rs"}, {"sha": "d4932d8333ab7d3c4a9365208e8777182ca73124", "filename": "tests/ui/box/unit/unique-assign-generic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-assign-generic.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-assign-generic.rs"}, {"sha": "d598744f145b2a08bbc9b4d4d527dd7b82b62fa7", "filename": "tests/ui/box/unit/unique-assign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-assign.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-assign.rs"}, {"sha": "64147e11f1c0c90a82336791eeaf38822c18767d", "filename": "tests/ui/box/unit/unique-autoderef-field.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-field.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-autoderef-field.rs"}, {"sha": "ea6598a7f6b351518f14366724a0c48f016f6b2e", "filename": "tests/ui/box/unit/unique-autoderef-index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-autoderef-index.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-autoderef-index.rs"}, {"sha": "ee05dd5a31d5b5b268f2b014dff5b264e942aa49", "filename": "tests/ui/box/unit/unique-cmp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-cmp.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-cmp.rs"}, {"sha": "6c31ae99b8eefa492ad0db8482c88c3c2daad373", "filename": "tests/ui/box/unit/unique-containing-tag.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-containing-tag.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-containing-tag.rs"}, {"sha": "c566e79620a95f0f6beb4e9a590d5d39de5ac827", "filename": "tests/ui/box/unit/unique-create.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-create.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-create.rs"}, {"sha": "5b9576fcc7a5b65c57badca295471b7c89eeea7d", "filename": "tests/ui/box/unit/unique-decl-init-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-decl-init-copy.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-decl-init-copy.rs"}, {"sha": "1d70860c7cec0b213ca04cd74dc0671a25595f78", "filename": "tests/ui/box/unit/unique-decl-init.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-decl-init.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-decl-init.rs"}, {"sha": "21187510ff0c5942719eddceda66a1cd0fab20d2", "filename": "tests/ui/box/unit/unique-decl-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-decl-move.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-decl-move.rs"}, {"sha": "84a1b2a5b83fc16f0757511d25693ca58aa4269f", "filename": "tests/ui/box/unit/unique-decl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-decl.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-decl.rs"}, {"sha": "33a1e9932b5d1beb07eef6cdbcd2fcfc56f67e00", "filename": "tests/ui/box/unit/unique-deref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-deref.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-deref.rs"}, {"sha": "7207ac962953ebc53ac3764c4348dc76dcc11917", "filename": "tests/ui/box/unit/unique-destructure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-destructure.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-destructure.rs"}, {"sha": "2324f1e1a652f5c66100c462c578c2347a4a0d9a", "filename": "tests/ui/box/unit/unique-drop-complex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-drop-complex.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-drop-complex.rs"}, {"sha": "77b5ead26337a72ece43747368f55d7e2ed743a9", "filename": "tests/ui/box/unit/unique-ffi-symbols.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-ffi-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-ffi-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-ffi-symbols.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-ffi-symbols.rs"}, {"sha": "6d42df218fbfd03cde2deec15d7458e1065443b8", "filename": "tests/ui/box/unit/unique-fn-arg-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-move.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-fn-arg-move.rs"}, {"sha": "01510200b11b793d48d717c63cfb008fc9d57775", "filename": "tests/ui/box/unit/unique-fn-arg-mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg-mut.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-fn-arg-mut.rs"}, {"sha": "b4f3bc4b294bace6a97a54305c61e2595858011b", "filename": "tests/ui/box/unit/unique-fn-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-fn-arg.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-fn-arg.rs"}, {"sha": "773a9bce1adb04e010d9eb8214283cb3b54365f1", "filename": "tests/ui/box/unit/unique-fn-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-fn-ret.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-fn-ret.rs"}, {"sha": "9c4405aa8ac2a408cc2704497b4393b9506acd2e", "filename": "tests/ui/box/unit/unique-generic-assign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-generic-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-generic-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-generic-assign.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-generic-assign.rs"}, {"sha": "6daa06fb12de6407c1f6376962ef25a7103e9214", "filename": "tests/ui/box/unit/unique-in-tag.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-in-tag.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-in-tag.rs"}, {"sha": "ce52d15ef1acb7ee7bf1e10cb0ea14b5fceafa57", "filename": "tests/ui/box/unit/unique-in-vec-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-in-vec-copy.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-in-vec-copy.rs"}, {"sha": "1e8d05e3d269f9f10ae58c7be2193658a980eaaa", "filename": "tests/ui/box/unit/unique-in-vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-in-vec.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-in-vec.rs"}, {"sha": "d19605046e1bc349e49fa67283ef00f17fcc3af3", "filename": "tests/ui/box/unit/unique-init.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-init.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-init.rs"}, {"sha": "f02d0b50764ae9f0b9c061ebaeab0b3f2b87c903", "filename": "tests/ui/box/unit/unique-kinds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-kinds.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-kinds.rs"}, {"sha": "0715d16628f87cb991ecf52cb0bde7c03258d1cf", "filename": "tests/ui/box/unit/unique-log.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-log.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-log.rs"}, {"sha": "6e6d7432277d989da2f430158f7485c0bc0da23b", "filename": "tests/ui/box/unit/unique-match-discrim.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-match-discrim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-match-discrim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-match-discrim.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-match-discrim.rs"}, {"sha": "c0f5d8f90532dfcbc6b9a383b80179d5738cb09d", "filename": "tests/ui/box/unit/unique-move-drop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-move-drop.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-move-drop.rs"}, {"sha": "103af8e1f1e02bd4f481f872a60577473277743e", "filename": "tests/ui/box/unit/unique-move-temp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-move-temp.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-move-temp.rs"}, {"sha": "40a2718e4e5f68ed2335b907b980b1427e15bdc2", "filename": "tests/ui/box/unit/unique-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-move.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-move.rs"}, {"sha": "0367c08099a8326b61123ae4b6d1f151529ac765", "filename": "tests/ui/box/unit/unique-mutable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-mutable.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-mutable.rs"}, {"sha": "bb35a9b2d73e2cd55ac0e0a3e88e24419590b64a", "filename": "tests/ui/box/unit/unique-object-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-object-move.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-object-move.rs"}, {"sha": "2c40dfc7a4b257bad296477b99662c271447e1bd", "filename": "tests/ui/box/unit/unique-object-noncopyable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-object-noncopyable.rs"}, {"sha": "db42ed9baf1ed4e3fe6d1655866f02847c37b4d1", "filename": "tests/ui/box/unit/unique-object-noncopyable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-object-noncopyable.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-object-noncopyable.stderr"}, {"sha": "9c73fd2204c382ed6f9c8b8c58f6adf8df66e0f0", "filename": "tests/ui/box/unit/unique-pat-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pat-2.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-pat-2.rs"}, {"sha": "2e81f898d0c98e04b619f6deb2e8350917d2b501", "filename": "tests/ui/box/unit/unique-pat-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pat-3.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-pat-3.rs"}, {"sha": "c2474d0e77214dca8b16898dd7c39343a4ae51aa", "filename": "tests/ui/box/unit/unique-pat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pat.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-pat.rs"}, {"sha": "8edaeef51e06190fc91d8e73fd8ceee05449be09", "filename": "tests/ui/box/unit/unique-pinned-nocopy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-pinned-nocopy.rs"}, {"sha": "de6611324cac137c006a4ff24f9ad56470c9c13b", "filename": "tests/ui/box/unit/unique-pinned-nocopy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-pinned-nocopy.stderr"}, {"sha": "9f8ad9bb050430542106a076aa97abdf4c51fcee", "filename": "tests/ui/box/unit/unique-rec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-rec.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-rec.rs"}, {"sha": "23ddd2cdca25d0f333943ad8a3279e5427eef0f8", "filename": "tests/ui/box/unit/unique-send-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-send-2.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-send-2.rs"}, {"sha": "431cc2be5d20e3d458af8403b7539d7453f40245", "filename": "tests/ui/box/unit/unique-send.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-send.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-send.rs"}, {"sha": "4f33ff9a8a35e7fdb1a2364a3908e4dbd115f2d5", "filename": "tests/ui/box/unit/unique-swap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-swap.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unique-swap.rs"}, {"sha": "50ecf751a86dbe18590117c16dac5677e3bee88b", "filename": "tests/ui/box/unit/unwind-unique.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fbox%2Funit%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funwind-unique.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "previous_filename": "tests/ui/unique/unwind-unique.rs"}, {"sha": "5ca4d3b3de741a2b7d01e522cc3c65501ea33929", "filename": "tests/ui/check-cfg/compact-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n    |                            ^^^^^^^^^^\n    |\n-   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, loongarch64, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "999302224eebf071313310d4dc73c71556a9255d", "filename": "tests/ui/transmutability/primitives/bool.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n-  --> $DIR/bool.rs:22:35\n+  --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n    |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/bool.rs:12:14\n+  --> $DIR/bool.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/bool.stderr"}, {"sha": "999302224eebf071313310d4dc73c71556a9255d", "filename": "tests/ui/transmutability/primitives/bool.next.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+  --> $DIR/bool.rs:24:35\n+   |\n+LL |     assert::is_transmutable::<u8, bool>();\n+   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/bool.rs:14:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "de77cfc78aa8976af9cfa1a9f0336cbd11cefa2f", "filename": "tests/ui/transmutability/primitives/bool.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,8 +1,10 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![crate_type = \"lib\"]\n #![feature(transmutability)]\n #![allow(dead_code)]\n #![allow(incomplete_features)]\n-\n mod assert {\n     use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;"}, {"sha": "bbf1f1669995e40f2674b421729b2d2e749335fc", "filename": "tests/ui/transmutability/primitives/numbers.current.stderr", "status": "renamed", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:62:40\n+  --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -15,14 +15,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:63:40\n+  --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -31,14 +31,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:64:40\n+  --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -47,14 +47,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:65:40\n+  --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -63,14 +63,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:66:40\n+  --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -79,14 +79,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:67:40\n+  --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -95,14 +95,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:68:40\n+  --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -111,14 +111,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:69:40\n+  --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -127,14 +127,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:70:39\n+  --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -143,14 +143,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:71:39\n+  --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -159,14 +159,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:73:40\n+  --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -175,14 +175,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:74:40\n+  --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -191,14 +191,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:75:40\n+  --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -207,14 +207,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:76:40\n+  --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -223,14 +223,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:77:40\n+  --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -239,14 +239,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:78:40\n+  --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -255,14 +255,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:79:40\n+  --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -271,14 +271,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:80:40\n+  --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -287,14 +287,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:81:39\n+  --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -303,14 +303,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:82:39\n+  --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -319,14 +319,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:84:40\n+  --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -335,14 +335,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:85:40\n+  --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -351,14 +351,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:86:40\n+  --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -367,14 +367,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:87:40\n+  --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -383,14 +383,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:88:40\n+  --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -399,14 +399,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:89:40\n+  --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -415,14 +415,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:90:39\n+  --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -431,14 +431,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:91:39\n+  --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -447,14 +447,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:93:40\n+  --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -463,14 +463,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:94:40\n+  --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -479,14 +479,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:95:40\n+  --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -495,14 +495,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:96:40\n+  --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -511,14 +511,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:97:40\n+  --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -527,14 +527,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:98:40\n+  --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -543,14 +543,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:99:39\n+  --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -559,14 +559,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:100:39\n+  --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -575,14 +575,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:102:40\n+  --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -591,14 +591,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:103:40\n+  --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -607,14 +607,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:104:40\n+  --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -623,14 +623,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:105:39\n+  --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -639,14 +639,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:106:39\n+  --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -655,14 +655,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:108:40\n+  --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -671,14 +671,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:109:40\n+  --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -687,14 +687,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:110:40\n+  --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -703,14 +703,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:111:39\n+  --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -719,14 +719,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:112:39\n+  --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -735,14 +735,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:114:40\n+  --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -751,14 +751,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:115:40\n+  --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -767,14 +767,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:116:40\n+  --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -783,14 +783,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:117:39\n+  --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -799,14 +799,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:118:39\n+  --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -815,14 +815,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:120:39\n+  --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -831,14 +831,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:121:39\n+  --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -847,14 +847,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:123:39\n+  --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -863,14 +863,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:124:39\n+  --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -879,14 +879,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:126:39\n+  --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -895,14 +895,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:127:39\n+  --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/numbers.stderr"}, {"sha": "bbf1f1669995e40f2674b421729b2d2e749335fc", "filename": "tests/ui/transmutability/primitives/numbers.next.stderr", "status": "added", "additions": 915, "deletions": 0, "changes": 915, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,915 @@\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:65:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i16>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:66:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u16>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:67:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:68:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   f32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:69:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:70:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:71:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:72:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   f64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:73:39\n+   |\n+LL |     assert::is_transmutable::<   i8,  u128>();\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:74:39\n+   |\n+LL |     assert::is_transmutable::<   i8,  i128>();\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:76:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i16>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:77:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u16>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:78:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:79:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   f32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:80:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:81:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:82:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:83:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   f64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:84:39\n+   |\n+LL |     assert::is_transmutable::<   u8,  u128>();\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:85:39\n+   |\n+LL |     assert::is_transmutable::<   u8,  i128>();\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:87:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   i32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:88:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   f32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:89:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   u32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:90:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   u64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:91:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   i64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:92:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   f64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:93:39\n+   |\n+LL |     assert::is_transmutable::<  i16,  u128>();\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:94:39\n+   |\n+LL |     assert::is_transmutable::<  i16,  i128>();\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:96:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   i32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:97:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   f32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:98:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   u32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:99:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   u64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:100:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   i64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:101:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   f64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:102:39\n+   |\n+LL |     assert::is_transmutable::<  u16,  u128>();\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:103:39\n+   |\n+LL |     assert::is_transmutable::<  u16,  i128>();\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:105:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   u64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:106:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   i64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:107:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   f64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:108:39\n+   |\n+LL |     assert::is_transmutable::<  i32,  u128>();\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:109:39\n+   |\n+LL |     assert::is_transmutable::<  i32,  i128>();\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:111:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   u64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:112:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   i64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:113:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   f64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:114:39\n+   |\n+LL |     assert::is_transmutable::<  f32,  u128>();\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:115:39\n+   |\n+LL |     assert::is_transmutable::<  f32,  i128>();\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:117:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   u64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:118:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   i64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:119:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   f64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:120:39\n+   |\n+LL |     assert::is_transmutable::<  u32,  u128>();\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:121:39\n+   |\n+LL |     assert::is_transmutable::<  u32,  i128>();\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:123:39\n+   |\n+LL |     assert::is_transmutable::<  u64,  u128>();\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:124:39\n+   |\n+LL |     assert::is_transmutable::<  u64,  i128>();\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:126:39\n+   |\n+LL |     assert::is_transmutable::<  i64,  u128>();\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:127:39\n+   |\n+LL |     assert::is_transmutable::<  i64,  i128>();\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:129:39\n+   |\n+LL |     assert::is_transmutable::<  f64,  u128>();\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:130:39\n+   |\n+LL |     assert::is_transmutable::<  f64,  i128>();\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error: aborting due to 57 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e980e91ed06a61b7e43979dcf6217a58da3a22f7", "filename": "tests/ui/transmutability/primitives/numbers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![crate_type = \"lib\"]\n #![feature(transmutability)]\n #![allow(dead_code)]"}, {"sha": "c20355e16f5f4c8db6589115949a452771df3e36", "filename": "tests/ui/transmutability/primitives/unit.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n-  --> $DIR/unit.rs:28:35\n+  --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n    |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/unit.rs:12:14\n+  --> $DIR/unit.rs:15:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n    |              --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/unit.stderr"}, {"sha": "c20355e16f5f4c8db6589115949a452771df3e36", "filename": "tests/ui/transmutability/primitives/unit.next.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+  --> $DIR/unit.rs:31:35\n+   |\n+LL |     assert::is_transmutable::<(), u8, Context>();\n+   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/unit.rs:15:14\n+   |\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this function\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "12eac175106e66e18c6414865ea0e0d88762637c", "filename": "tests/ui/transmutability/primitives/unit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n //! The unit type, `()`, should be one byte.\n \n #![crate_type = \"lib\"]"}, {"sha": "39d42cc4fa6c82bf9372a63b60f7164df13dcca6", "filename": "tests/ui/transmutability/references.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:26:52\n+  --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n    |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n-  --> $DIR/references.rs:13:14\n+  --> $DIR/references.rs:16:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n    |              --------------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/references.stderr"}, {"sha": "39d42cc4fa6c82bf9372a63b60f7164df13dcca6", "filename": "tests/ui/transmutability/references.next.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+  --> $DIR/references.rs:29:52\n+   |\n+LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n+note: required by a bound in `is_maybe_transmutable`\n+  --> $DIR/references.rs:16:14\n+   |\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this function\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8c2b25ebba1e3ab5c12edd7305a2694cdcd8c791", "filename": "tests/ui/transmutability/references.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/tests%2Fui%2Ftransmutability%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.rs?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n //! Transmutations involving references are not yet supported.\n \n #![crate_type = \"lib\"]"}, {"sha": "58f51959e1f810474db7aede60df320d348be582", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d7ed3ba8445452013dd873dc9abcad41a3d82b2/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "patch": "@@ -344,11 +344,11 @@ message = \"Some changes occurred in `const_evaluatable.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_middle/src/ty/abstract_const.rs\"]\n-message = \"Some changes occured in `abstract_const.rs`\"\n+message = \"Some changes occurred in `abstract_const.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_ty_utils/src/consts.rs\"]\n-message = \"Some changes occured in `rustc_ty_utils::consts.rs`\"\n+message = \"Some changes occurred in `rustc_ty_utils::consts.rs`\"\n cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/solve/\"]"}]}