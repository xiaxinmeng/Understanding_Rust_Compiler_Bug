{"sha": "7803c8d688b87e3d13f42d543a553201005db783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDNjOGQ2ODhiODdlM2QxM2Y0MmQ1NDNhNTUzMjAxMDA1ZGI3ODM=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-01-28T00:46:45Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-03T05:42:11Z"}, "message": "refactoring get_stack to be cleaner", "tree": {"sha": "930ab4e911230f27ce7bbf974c3cc031011714af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930ab4e911230f27ce7bbf974c3cc031011714af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7803c8d688b87e3d13f42d543a553201005db783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7803c8d688b87e3d13f42d543a553201005db783", "html_url": "https://github.com/rust-lang/rust/commit/7803c8d688b87e3d13f42d543a553201005db783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7803c8d688b87e3d13f42d543a553201005db783/comments", "author": null, "committer": null, "parents": [{"sha": "c83128eb6064887cbc675e6fcda06161ec573802", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83128eb6064887cbc675e6fcda06161ec573802", "html_url": "https://github.com/rust-lang/rust/commit/c83128eb6064887cbc675e6fcda06161ec573802"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "f5353895c9dbafdc059b5194756c7791dc330400", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7803c8d688b87e3d13f42d543a553201005db783/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7803c8d688b87e3d13f42d543a553201005db783/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=7803c8d688b87e3d13f42d543a553201005db783", "patch": "@@ -140,46 +140,39 @@ mod imp {\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\"))]\n-    unsafe fn get_stack() -> *mut libc::c_void {\n-        let stack = mmap(ptr::null_mut(),\n-                         SIGSTKSZ,\n-                         PROT_READ | PROT_WRITE,\n-                         MAP_PRIVATE | MAP_ANON,\n-                         -1,\n-                         0);\n-        if stack == MAP_FAILED {\n+    unsafe fn get_stack() -> libc::stack_t {\n+        let stackp = mmap(ptr::null_mut(),\n+                          SIGSTKSZ,\n+                          PROT_READ | PROT_WRITE,\n+                          MAP_PRIVATE | MAP_ANON,\n+                          -1,\n+                          0);\n+        if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n-        stack\n+        libc::stack_t { ss_sp: stackp, ss_flags: 0, ss_size: SIGSTKSZ }\n     }\n \n     #[cfg(any(target_os = \"dragonfly\",\n               target_os = \"freebsd\"))]\n-    unsafe fn get_stack() -> *mut i8 {\n-        let stack = mmap(ptr::null_mut(),\n-                         SIGSTKSZ,\n-                         PROT_READ | PROT_WRITE,\n-                         MAP_PRIVATE | MAP_ANON,\n-                         -1,\n-                         0);\n-        if stack == MAP_FAILED {\n+    unsafe fn get_stack() -> libc::stack_t {\n+        let stackp = mmap(ptr::null_mut(),\n+                          SIGSTKSZ,\n+                          PROT_READ | PROT_WRITE,\n+                          MAP_PRIVATE | MAP_ANON,\n+                          -1,\n+                          0);\n+        if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n-        stack as *mut i8\n+        libc::stack_t { ss_sp: stackp as *mut i8, ss_flags: 0, ss_size: SIGSTKSZ }\n     }\n \n \n     pub unsafe fn make_handler() -> Handler {\n-        let alt_stack = get_stack();\n-        let mut stack: libc::stack_t = mem::zeroed();\n-\n-        stack.ss_sp = alt_stack;\n-        stack.ss_flags = 0;\n-        stack.ss_size = SIGSTKSZ;\n-\n+        let stack = get_stack();\n         sigaltstack(&stack, ptr::null_mut());\n-\n-        Handler { _data: alt_stack as *mut libc::c_void }\n+        Handler { _data: stack.ss_sp as *mut libc::c_void }\n     }\n \n     pub unsafe fn drop_handler(handler: &mut Handler) {"}]}