{"sha": "d9e841e756eab869ea3dcbe468c1ad95f80ae24b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTg0MWU3NTZlYWI4NjllYTNkY2JlNDY4YzFhZDk1ZjgwYWUyNGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-07T09:31:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:47Z"}, "message": "region_infer: improved debug logging", "tree": {"sha": "1aba84819cee4da7bf81a409f9df2aec5c479348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aba84819cee4da7bf81a409f9df2aec5c479348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e841e756eab869ea3dcbe468c1ad95f80ae24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e841e756eab869ea3dcbe468c1ad95f80ae24b", "html_url": "https://github.com/rust-lang/rust/commit/d9e841e756eab869ea3dcbe468c1ad95f80ae24b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e841e756eab869ea3dcbe468c1ad95f80ae24b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f964cc98dbd7a5a1f978fdb510bf38f7fe9a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f964cc98dbd7a5a1f978fdb510bf38f7fe9a4b", "html_url": "https://github.com/rust-lang/rust/commit/32f964cc98dbd7a5a1f978fdb510bf38f7fe9a4b"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "566a3b23ff13869e3dca5cd3488c1f1d965016b7", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d9e841e756eab869ea3dcbe468c1ad95f80ae24b/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e841e756eab869ea3dcbe468c1ad95f80ae24b/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=d9e841e756eab869ea3dcbe468c1ad95f80ae24b", "patch": "@@ -89,10 +89,12 @@ impl Region {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Constraint {\n-    /// Where did this constraint arise?\n-    span: Span,\n+    // NB. The ordering here is not significant for correctness, but\n+    // it is for conenience. Before we dump the constraints in the\n+    // debugging logs, we sort them, and we'd like the \"super region\"\n+    // to be first, etc. (In particular, span should remain last.)\n \n     /// The region SUP must outlive SUB...\n     sup: RegionVid,\n@@ -102,6 +104,9 @@ pub struct Constraint {\n \n     /// At this location.\n     point: Location,\n+\n+    /// Where did this constraint arise?\n+    span: Span,\n }\n \n impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n@@ -269,15 +274,23 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n         let mut dfs = Dfs::new(mir);\n         let mut error_regions = FxHashSet();\n         let mut errors = vec![];\n+\n+        debug!(\"propagate_constraints()\");\n+        debug!(\"propagate_constraints: constraints={:#?}\", {\n+            let mut constraints: Vec<_> = self.constraints.iter().collect();\n+            constraints.sort();\n+            constraints\n+        });\n+\n         while changed {\n             changed = false;\n             for constraint in &self.constraints {\n-                debug!(\"constraint: {:?}\", constraint);\n+                debug!(\"propagate_constraints: constraint={:?}\", constraint);\n                 let sub = &self.definitions[constraint.sub].value.clone();\n                 let sup_def = &mut self.definitions[constraint.sup];\n \n-                debug!(\"    sub (before): {:?}\", sub);\n-                debug!(\"    sup (before): {:?}\", sup_def.value);\n+                debug!(\"propagate_constraints:    sub (before): {:?}\", sub);\n+                debug!(\"propagate_constraints:    sup (before): {:?}\", sup_def.value);\n \n                 if !sup_def.constant {\n                     // If this is not a constant, then grow the value as needed to\n@@ -287,8 +300,8 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n                         changed = true;\n                     }\n \n-                    debug!(\"    sup (after) : {:?}\", sup_def.value);\n-                    debug!(\"    changed     : {:?}\", changed);\n+                    debug!(\"propagate_constraints:    sup (after) : {:?}\", sup_def.value);\n+                    debug!(\"propagate_constraints:    changed     : {:?}\", changed);\n                 } else {\n                     // If this is a constant, check whether it *would\n                     // have* to grow in order for the constraint to be\n@@ -304,7 +317,7 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n                             .difference(&sup_def.value.free_regions)\n                             .next()\n                             .unwrap();\n-                        debug!(\"    new_region : {:?}\", new_region);\n+                        debug!(\"propagate_constraints:    new_region : {:?}\", new_region);\n                         if error_regions.insert(constraint.sup) {\n                             errors.push((constraint.sup, constraint.span, new_region));\n                         }\n@@ -406,3 +419,16 @@ impl<'tcx> RegionDefinition<'tcx> {\n         }\n     }\n }\n+\n+impl fmt::Debug for Constraint {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        write!(\n+            formatter,\n+            \"({:?}: {:?} @ {:?}) due to {:?}\",\n+            self.sup,\n+            self.sub,\n+            self.point,\n+            self.span\n+        )\n+    }\n+}"}]}