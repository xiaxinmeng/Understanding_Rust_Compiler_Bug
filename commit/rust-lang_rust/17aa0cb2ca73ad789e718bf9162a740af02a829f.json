{"sha": "17aa0cb2ca73ad789e718bf9162a740af02a829f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YWEwY2IyY2E3M2FkNzg5ZTcxOGJmOTE2MmE3NDBhZjAyYTgyOWY=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-25T20:44:19Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-12-19T02:19:05Z"}, "message": "Remove a const-if-hack in RawVec", "tree": {"sha": "598f7bf295befe800fe02a59941e4e0f206ffbf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598f7bf295befe800fe02a59941e4e0f206ffbf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17aa0cb2ca73ad789e718bf9162a740af02a829f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17aa0cb2ca73ad789e718bf9162a740af02a829f", "html_url": "https://github.com/rust-lang/rust/commit/17aa0cb2ca73ad789e718bf9162a740af02a829f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17aa0cb2ca73ad789e718bf9162a740af02a829f/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c605199e89572e586a5f37bc698c48b6a10896fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c605199e89572e586a5f37bc698c48b6a10896fb", "html_url": "https://github.com/rust-lang/rust/commit/c605199e89572e586a5f37bc698c48b6a10896fb"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "dec990a117bf8fc71d93d08a5edfa75fe16c29c5", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/17aa0cb2ca73ad789e718bf9162a740af02a829f/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aa0cb2ca73ad789e718bf9162a740af02a829f/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=17aa0cb2ca73ad789e718bf9162a740af02a829f", "patch": "@@ -1,6 +1,8 @@\n #![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n #![doc(hidden)]\n \n+#![feature(const_if_match)]\n+\n use core::cmp;\n use core::mem;\n use core::ops::Drop;\n@@ -51,15 +53,24 @@ pub struct RawVec<T, A: Alloc = Global> {\n impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n+    #[cfg(not(bootstrap))]\n     pub const fn new_in(a: A) -> Self {\n-        // `!0` is `usize::MAX`. This branch should be stripped at compile time.\n-        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`:\n-        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n         // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n         RawVec {\n             ptr: Unique::empty(),\n-            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap,\n+            a,\n+        }\n+    }\n+\n+    /// Like `new`, but parameterized over the choice of allocator for\n+    /// the returned `RawVec`.\n+    #[cfg(bootstrap)]\n+    pub const fn new_in(a: A) -> Self {\n+        RawVec {\n+            ptr: Unique::empty(),\n             cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n             a,\n         }\n@@ -131,17 +142,30 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n+    #[cfg(not(bootstrap))]\n     pub const fn new() -> Self {\n         // FIXME(Centril): Reintegrate this with `fn new_in` when we can.\n \n-        // `!0` is `usize::MAX`. This branch should be stripped at compile time.\n-        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`:\n-        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n         // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n         RawVec {\n             ptr: Unique::empty(),\n-            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap,\n+            a: Global,\n+        }\n+    }\n+\n+    /// Creates the biggest possible `RawVec` (on the system heap)\n+    /// without allocating. If `T` has positive size, then this makes a\n+    /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n+    /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n+    /// delayed allocation.\n+    #[cfg(bootstrap)]\n+    pub const fn new() -> Self {\n+        // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n+        RawVec {\n+            ptr: Unique::empty(),\n             cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n             a: Global,\n         }"}]}