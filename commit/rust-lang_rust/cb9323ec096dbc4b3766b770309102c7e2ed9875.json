{"sha": "cb9323ec096dbc4b3766b770309102c7e2ed9875", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTMyM2VjMDk2ZGJjNGIzNzY2Yjc3MDMwOTEwMmM3ZTJlZDk4NzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T19:34:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T19:34:21Z"}, "message": "Auto merge of #28130 - alexcrichton:fix-msvc-static-tls-dtor, r=brson\n\nRunning TLS destructors for a MSVC Windows binary requires the linker doesn't\r\nelide the `_tls_used` or `__tls_used` symbols (depending on the architecture).\r\nThis is currently achieved via a `#[link_args]` hack but this only works for\r\ndynamically linked binaries because the link arguments aren't propagated to\r\nstatically linked binaries.\r\n\r\nThis commit alters the strategy to instead emit a volatile load from those\r\nsymbols so LLVM can't elide it, forcing the reference to the symbol to stay\r\nalive as long as the callback function stays alive (which we've made sure of\r\nwith the `#[linkage]` attribute).\r\n\r\nCloses #28111", "tree": {"sha": "74bbd80f6571a845afb07055fe59498b7bbd1fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74bbd80f6571a845afb07055fe59498b7bbd1fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9323ec096dbc4b3766b770309102c7e2ed9875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9323ec096dbc4b3766b770309102c7e2ed9875", "html_url": "https://github.com/rust-lang/rust/commit/cb9323ec096dbc4b3766b770309102c7e2ed9875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9323ec096dbc4b3766b770309102c7e2ed9875/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c7c5bb1e1e33bb5b59585054f7f5526be7ee565", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7c5bb1e1e33bb5b59585054f7f5526be7ee565", "html_url": "https://github.com/rust-lang/rust/commit/5c7c5bb1e1e33bb5b59585054f7f5526be7ee565"}, {"sha": "9a3acece30414a2d306102ec4e6faac0b6f3c482", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3acece30414a2d306102ec4e6faac0b6f3c482", "html_url": "https://github.com/rust-lang/rust/commit/9a3acece30414a2d306102ec4e6faac0b6f3c482"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "d9b7a59712b0cba62084dd91788d721464fdb5b5", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=cb9323ec096dbc4b3766b770309102c7e2ed9875", "patch": "@@ -221,8 +221,24 @@ unsafe fn unregister_dtor(key: Key) -> bool {\n //\n // # The article mentions crazy stuff about \"/INCLUDE\"?\n //\n-// It sure does! We include it below for MSVC targets, but it look like for GNU\n-// targets we don't require it.\n+// It sure does! Specifically we're talking about this quote:\n+//\n+//      The Microsoft run-time library facilitates this process by defining a\n+//      memory image of the TLS Directory and giving it the special name\n+//      \u201c__tls_used\u201d (Intel x86 platforms) or \u201c_tls_used\u201d (other platforms). The\n+//      linker looks for this memory image and uses the data there to create the\n+//      TLS Directory. Other compilers that support TLS and work with the\n+//      Microsoft linker must use this same technique.\n+//\n+// Basically what this means is that if we want support for our TLS\n+// destructors/our hook being called then we need to make sure the linker does\n+// not omit this symbol. Otherwise it will omit it and our callback won't be\n+// wired up.\n+//\n+// We don't actually use the `/INCLUDE` linker flag here like the article\n+// mentions because the Rust compiler doesn't propagate linker flags, but\n+// instead we use a shim function which performs a volatile 1-byte load from\n+// the address of the symbol to ensure it sticks around.\n \n #[link_section = \".CRT$XLB\"]\n #[linkage = \"external\"]\n@@ -231,13 +247,6 @@ pub static p_thread_callback: unsafe extern \"system\" fn(LPVOID, DWORD,\n                                                         LPVOID) =\n         on_tls_callback;\n \n-#[cfg(all(target_env = \"msvc\", target_pointer_width = \"64\"))]\n-#[link_args = \"/INCLUDE:_tls_used\"]\n-extern {}\n-#[cfg(all(target_env = \"msvc\", target_pointer_width = \"32\"))]\n-#[link_args = \"/INCLUDE:__tls_used\"]\n-extern {}\n-\n #[allow(warnings)]\n unsafe extern \"system\" fn on_tls_callback(h: LPVOID,\n                                           dwReason: DWORD,\n@@ -247,6 +256,17 @@ unsafe extern \"system\" fn on_tls_callback(h: LPVOID,\n     if dwReason == DLL_THREAD_DETACH || dwReason == DLL_PROCESS_DETACH {\n         run_dtors();\n     }\n+\n+    // See comments above for what this is doing. Note that we don't need this\n+    // trickery on GNU windows, just on MSVC.\n+    reference_tls_used();\n+    #[cfg(target_env = \"msvc\")]\n+    unsafe fn reference_tls_used() {\n+        extern { static _tls_used: u8; }\n+        ::intrinsics::volatile_load(&_tls_used);\n+    }\n+    #[cfg(not(target_env = \"msvc\"))]\n+    unsafe fn reference_tls_used() {}\n }\n \n #[allow(dead_code)] // actually called above"}, {"sha": "5c449d511d53bf01c672a8720287bb81db462d79", "filename": "src/test/run-pass/down-with-thread-dtors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs?ref=cb9323ec096dbc4b3766b770309102c7e2ed9875", "patch": "@@ -12,6 +12,8 @@ thread_local!(static FOO: Foo = Foo);\n thread_local!(static BAR: Bar = Bar(1));\n thread_local!(static BAZ: Baz = Baz);\n \n+static mut HIT: bool = false;\n+\n struct Foo;\n struct Bar(i32);\n struct Baz;\n@@ -31,8 +33,15 @@ impl Drop for Bar {\n     }\n }\n \n+impl Drop for Baz {\n+    fn drop(&mut self) {\n+        unsafe { HIT = true; }\n+    }\n+}\n+\n fn main() {\n     std::thread::spawn(|| {\n         FOO.with(|_| {});\n     }).join().unwrap();\n+    assert!(unsafe { HIT });\n }"}, {"sha": "da30100f67ff9a421ea981e066b59942c23c920b", "filename": "src/test/run-pass/tls-dtors-are-run-in-a-static-binary.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Ftest%2Frun-pass%2Ftls-dtors-are-run-in-a-static-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9323ec096dbc4b3766b770309102c7e2ed9875/src%2Ftest%2Frun-pass%2Ftls-dtors-are-run-in-a-static-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-dtors-are-run-in-a-static-binary.rs?ref=cb9323ec096dbc4b3766b770309102c7e2ed9875", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+static mut HIT: bool = false;\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        unsafe { HIT = true; }\n+    }\n+}\n+\n+thread_local!(static FOO: Foo = Foo);\n+\n+fn main() {\n+    std::thread::spawn(|| {\n+        FOO.with(|_| {});\n+    }).join().unwrap();\n+    assert!(unsafe { HIT });\n+}"}]}