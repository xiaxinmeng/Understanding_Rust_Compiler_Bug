{"sha": "d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "node_id": "C_kwDOAAsO6NoAKGQzYWNiOWQwMGU2NGQ2OGQ4YzkxYzlkOTkyNWI5MmNkNzliMzMzNzk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-29T09:05:54Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-12T08:24:43Z"}, "message": "Handle Fn family trait call errror", "tree": {"sha": "44891fbd41e701febd1ffab7efb41a9a3891d870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44891fbd41e701febd1ffab7efb41a9a3891d870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIHbssACgkQbQF6ltjm\nwvlt1g/+LkcKPa8dQlb34f00on7lJruPUl9Dk+5k81FKY4dzvJMEow8mTFVdE91m\nJ84os/o8x8C1EWlWGHyCuXprz3N5aMJfdbicdI7Rcwvwgmul5d700t8xWe3ATnAh\nRHTXDnTaFI6tXFQ1A/RmEJoRr8qTOwVw2q+4oj/HZ3VhC9Okkj7dWpAJJFnw+p5R\ny8wj5UDXI4ViPeX7I8bHd+hcbDHou9tJFqB3zoH1dKnT1hIrYmJ8QAy2DDttNPRA\nzHn196/yqa19fP0CMfcFMi6jAnbCMqPwY3ra8Mr8yM758OGS/WMgFxvDq/TSVsv6\nrE4kR2kpStGexldD51SIRiybizu1Jy6cMIS7Ya0SmJmZWlny73Bynwdi6Mt77eQD\nwxOrIuhbndkGLLr9Hs7lN+Hx45aNrJwUywdZoxx2/QWPZY55H1GNSXloqYiKKaeM\nsO3JLPBzbC/rmIu35WitEqQj010L7W66QjKDBTlf0wWxJEsSC7oD/h/jMsq2Fb4D\nnSllrEEfw02wsoyLX/vOj6oCIc5BUE/VYY8dbJjQelxBFjE4OEj7fNxw7bslAPU4\n80PAyyjMrTys5+48glyVf4/mbnBL8eOn1wsrij4LXhQahw/4qUukq2AfhAYTXhiq\nshlbgQhl0A7wAxmTz2bKq7KOJUGuKVhALXeXu8TiaQBHurpeZps=\n=dBPB\n-----END PGP SIGNATURE-----", "payload": "tree 44891fbd41e701febd1ffab7efb41a9a3891d870\nparent 6d6314f878bf489e15293498ecb4af082c8d53d8\nauthor Deadbeef <ent3rm4n@gmail.com> 1640768754 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1644654283 +1100\n\nHandle Fn family trait call errror\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "html_url": "https://github.com/rust-lang/rust/commit/d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6314f878bf489e15293498ecb4af082c8d53d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6314f878bf489e15293498ecb4af082c8d53d8", "html_url": "https://github.com/rust-lang/rust/commit/6d6314f878bf489e15293498ecb4af082c8d53d8"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "f6d21f879ff5868e75e09ddd00c9ba47bb9b7cf2", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -196,8 +196,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         .map(|n| format!(\"`{}`\", n))\n                         .unwrap_or_else(|| \"value\".to_owned());\n                     match kind {\n-                        CallKind::FnCall(once_did)\n-                            if Some(once_did) == self.infcx.tcx.lang_items().fn_once_trait() =>\n+                        CallKind::FnCall { fn_trait_id, .. }\n+                            if Some(fn_trait_id) == self.infcx.tcx.lang_items().fn_once_trait() =>\n                         {\n                             err.span_label(\n                                 fn_call_span,"}, {"sha": "519b4c02b61e6bd75f17241eda852620430526d4", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -8,7 +8,9 @@ use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{suggest_constraining_type_param, Adt, Param, TraitPredicate, Ty};\n+use rustc_middle::ty::{\n+    suggest_constraining_type_param, Adt, Closure, FnDef, FnPtr, Param, TraitPredicate, Ty,\n+};\n use rustc_middle::ty::{Binder, BoundConstness, ImplPolarity, TraitRef};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n@@ -155,7 +157,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n             CallKind::Normal { desugaring: Some((kind, self_ty)), .. } => {\n                 macro_rules! error {\n                     ($fmt:literal) => {\n-                        struct_span_err!(tcx.sess, span, E0015, $fmt, self_ty, ccx.const_kind(),)\n+                        struct_span_err!(tcx.sess, span, E0015, $fmt, self_ty, ccx.const_kind())\n                     };\n                 }\n \n@@ -176,6 +178,41 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n \n                 diag_trait(err, self_ty, kind.trait_def_id(tcx))\n             }\n+            CallKind::FnCall { fn_trait_id, self_ty } => {\n+                let mut err = struct_span_err!(\n+                    tcx.sess,\n+                    span,\n+                    E0015,\n+                    \"cannot call non-const closure in {}s\",\n+                    ccx.const_kind(),\n+                );\n+\n+                match self_ty.kind() {\n+                    FnDef(def_id, ..) => {\n+                        let span = tcx.sess.source_map().guess_head_span(tcx.def_span(*def_id));\n+                        if ccx.tcx.is_const_fn_raw(*def_id) {\n+                            span_bug!(span, \"calling const FnDef errored when it shouldn't\");\n+                        }\n+\n+                        err.span_note(span, \"function defined here, but it is not `const`\");\n+                    }\n+                    FnPtr(..) => {\n+                        err.note(&format!(\n+                            \"function pointers need an RFC before allowed to be called in {}s\",\n+                            ccx.const_kind()\n+                        ));\n+                    }\n+                    Closure(..) => {\n+                        err.note(&format!(\n+                            \"closures need an RFC before allowed to be called in {}s\",\n+                            ccx.const_kind()\n+                        ));\n+                    }\n+                    _ => {}\n+                }\n+\n+                diag_trait(err, self_ty, fn_trait_id)\n+            }\n             CallKind::Operator { trait_id, self_ty, .. } => {\n                 let mut err = struct_span_err!(\n                     tcx.sess,"}, {"sha": "11bb9508a1f8626ac347f33f45d7fb9ab9232630", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -44,7 +44,7 @@ pub enum CallKind<'tcx> {\n         is_option_or_result: bool,\n     },\n     /// A call to `Fn(..)::call(..)`, desugared from `my_closure(a, b, c)`\n-    FnCall(DefId),\n+    FnCall { fn_trait_id: DefId, self_ty: Ty<'tcx> },\n     /// A call to an operator trait, desuraged from operator syntax (e.g. `a << b`)\n     Operator { self_arg: Option<Ident>, trait_id: DefId, self_ty: Ty<'tcx> },\n     DerefCoercion {\n@@ -85,7 +85,7 @@ pub fn call_kind<'tcx>(\n     // an FnOnce call, an operator (e.g. `<<`), or a\n     // deref coercion.\n     let kind = if let Some(&trait_id) = fn_call {\n-        Some(CallKind::FnCall(trait_id))\n+        Some(CallKind::FnCall { fn_trait_id: trait_id, self_ty: method_substs.type_at(0) })\n     } else if let Some(&trait_id) = operator {\n         Some(CallKind::Operator { self_arg, trait_id, self_ty: method_substs.type_at(0) })\n     } else if is_deref {"}, {"sha": "f8131c9f3b717107d5d2530b29490d79adfdc163", "filename": "src/test/ui/consts/issue-28113.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -2,7 +2,7 @@\n \n const X: u8 =\n     || -> u8 { 5 }()\n-    //~^ ERROR cannot call non-const fn\n+    //~^ ERROR cannot call non-const closure\n ;\n \n fn main() {}"}, {"sha": "7ad1f752eb085fd56dececf014f75d64e81fc0fe", "filename": "src/test/ui/consts/issue-28113.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -1,9 +1,10 @@\n-error[E0015]: cannot call non-const fn `<[closure@$DIR/issue-28113.rs:4:5: 4:19] as Fn<()>>::call` in constants\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-28113.rs:4:5\n    |\n LL |     || -> u8 { 5 }()\n    |     ^^^^^^^^^^^^^^^^\n    |\n+   = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error"}, {"sha": "9c673d20b2a9565549532cd4ac1df0d0cab8cfba", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -1,7 +1,7 @@\n #![feature(const_fn_fn_ptr_basics)]\n \n const fn foo() { (||{})() }\n-//~^ ERROR cannot call non-const fn\n+//~^ ERROR cannot call non-const closure\n \n const fn bad(input: fn()) {\n     input()"}, {"sha": "62a7c7db6b83ae0311894706e2ec70bcb2f69f3a", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -1,9 +1,10 @@\n-error[E0015]: cannot call non-const fn `<[closure@$DIR/issue-56164.rs:3:18: 3:24] as Fn<()>>::call` in constant functions\n+error[E0015]: cannot call non-const closure in constant functions\n   --> $DIR/issue-56164.rs:3:18\n    |\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^^^\n    |\n+   = note: closures need an RFC before allowed to be called in constant functions\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error: function pointers are not allowed in const fn"}, {"sha": "37958e7919d64890ddfd2df5d5c9e1ec8949d513", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -3,7 +3,7 @@\n // in the length part of an array.\n \n struct Bug {\n-    a: [(); (|| { 0 })()] //~ ERROR cannot call non-const fn\n+    a: [(); (|| { 0 })()] //~ ERROR cannot call non-const closure\n }\n \n fn main() {}"}, {"sha": "74fbbc680f7e413ad6f6a07fdc759260e554e253", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -1,9 +1,10 @@\n-error[E0015]: cannot call non-const fn `<[closure@$DIR/issue-68542-closure-in-array-len.rs:6:13: 6:23] as Fn<()>>::call` in constants\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n LL |     a: [(); (|| { 0 })()]\n    |             ^^^^^^^^^^^^\n    |\n+   = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error"}, {"sha": "4ef25bd1334f3b30a85d5a086f270d0435a9acf7", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3acb9d00e64d68d8c91c9d9925b92cd79b33379/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=d3acb9d00e64d68d8c91c9d9925b92cd79b33379", "patch": "@@ -1,10 +1,14 @@\n-error[E0015]: cannot call non-const fn `<F as FnOnce<()>>::call_once` in constant functions\n+error[E0015]: cannot call non-const closure in constant functions\n   --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n    |\n LL |             Opt::None => f(),\n    |                          ^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+help: consider further restricting this bound\n+   |\n+LL |     const fn unwrap_or_else<F: FnOnce() -> T + ~const std::ops::FnOnce<()>>(self, f: F) -> T {\n+   |                                              +++++++++++++++++++++++++++++\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/unstable-const-fn-in-libcore.rs:19:53"}]}