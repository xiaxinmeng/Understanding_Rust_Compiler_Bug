{"sha": "c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTQxYThhODU5ZTg5Y2ZlYmQ0ZTg1ZjhmOTU4MWM2YjkxZTRmMTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-26T22:34:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Refactor mod/check (part v)", "tree": {"sha": "b8ca2e87eb89698cbb6938e5986c46221261f1db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ca2e87eb89698cbb6938e5986c46221261f1db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "html_url": "https://github.com/rust-lang/rust/commit/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e812b55d8f627146d352cfb640c1b21c0975ca28", "url": "https://api.github.com/repos/rust-lang/rust/commits/e812b55d8f627146d352cfb640c1b21c0975ca28", "html_url": "https://github.com/rust-lang/rust/commit/e812b55d8f627146d352cfb640c1b21c0975ca28"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "d7d81b605c08dcae2b287e8226798226b3c778d9", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "patch": "@@ -315,8 +315,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n-        let fn_segment = Some((segment, method_generics));\n-        let supress_mismatch = self.fcx.check_impl_trait(self.span, fn_segment);\n+        let supress_mismatch = self.fcx.check_impl_trait(self.span, segment, &method_generics);\n         self.fcx.check_generic_arg_count(self.span, &segment, &method_generics, true, supress_mismatch);\n \n         // Create subst for early-bound lifetime parameters, combining"}, {"sha": "331e6df8539cd9dc653a9b16c9f349955fce3284", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "patch": "@@ -4984,10 +4984,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n         let mut infer_lifetimes = FxHashMap();\n-        let supress_mismatch = self.check_impl_trait(span, fn_segment);\n         for &PathSeg(def_id, index) in &path_segs {\n-            let generics = self.tcx.generics_of(def_id);\n             let seg = &segments[index];\n+            let generics = self.tcx.generics_of(def_id);\n+            let supress_mismatch = self.check_impl_trait(span, seg, &generics);\n             self.check_generic_arg_count(span, seg, &generics, false, supress_mismatch);\n             infer_lifetimes.insert(index, if let Some(ref data) = seg.args {\n                 !data.args.iter().any(|arg| match arg {\n@@ -5284,33 +5284,30 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Report error if there is an explicit type parameter when using `impl Trait`.\n     fn check_impl_trait(&self,\n                         span: Span,\n-                        segment: Option<(&hir::PathSegment, &ty::Generics)>)\n+                        seg: &hir::PathSegment,\n+                        generics: &ty::Generics)\n                         -> bool {\n-        let segment = segment.map(|(path_segment, generics)| {\n-            let explicit = !path_segment.infer_types;\n-            let impl_trait = generics.params.iter().any(|param| match param.kind {\n-                ty::GenericParamDefKind::Type {\n-                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n-                } => true,\n-                _ => false,\n-            });\n-\n-            if explicit && impl_trait {\n-                let mut err = struct_span_err! {\n-                    self.tcx.sess,\n-                    span,\n-                    E0632,\n-                    \"cannot provide explicit type parameters when `impl Trait` is \\\n-                    used in argument position.\"\n-                };\n+        let explicit = !seg.infer_types;\n+        let impl_trait = generics.params.iter().any(|param| match param.kind {\n+            ty::GenericParamDefKind::Type {\n+                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+            } => true,\n+            _ => false,\n+        });\n \n-                err.emit();\n-            }\n+        if explicit && impl_trait {\n+            let mut err = struct_span_err! {\n+                self.tcx.sess,\n+                span,\n+                E0632,\n+                \"cannot provide explicit type parameters when `impl Trait` is \\\n+                used in argument position.\"\n+            };\n \n-            impl_trait\n-        });\n+            err.emit();\n+        }\n \n-        segment.unwrap_or(false)\n+        impl_trait\n     }\n \n     // Resolves `typ` by a single level if `typ` is a type variable."}]}