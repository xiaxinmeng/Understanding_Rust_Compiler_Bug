{"sha": "3d5108630371932b05d4e650d20536910434c947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTEwODYzMDM3MTkzMmIwNWQ0ZTY1MGQyMDUzNjkxMDQzNGM5NDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T06:52:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T06:52:48Z"}, "message": "Auto merge of #52394 - estebank:println, r=oli-obk\n\nImprove suggestion for missing fmt str in println\n\nAvoid using `concat!(fmt, \"\\n\")` to improve the diagnostics being\nemitted when the first `println!()` argument isn't a formatting string\nliteral.\n\nFix #52347.", "tree": {"sha": "a3cdf0d3c6863f06f653a992aa299682547ff095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3cdf0d3c6863f06f653a992aa299682547ff095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d5108630371932b05d4e650d20536910434c947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5108630371932b05d4e650d20536910434c947", "html_url": "https://github.com/rust-lang/rust/commit/3d5108630371932b05d4e650d20536910434c947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d5108630371932b05d4e650d20536910434c947/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57d5d7b25d471c902608223793d9b3bb8c4643c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57d5d7b25d471c902608223793d9b3bb8c4643c", "html_url": "https://github.com/rust-lang/rust/commit/a57d5d7b25d471c902608223793d9b3bb8c4643c"}, {"sha": "dc563d950017fedaa4690165d2d8b9b3e6cbd982", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc563d950017fedaa4690165d2d8b9b3e6cbd982", "html_url": "https://github.com/rust-lang/rust/commit/dc563d950017fedaa4690165d2d8b9b3e6cbd982"}], "stats": {"total": 474, "additions": 351, "deletions": 123}, "files": [{"sha": "9952e5f64d6ab2f59e9ca303e99b69577aaa5689", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -150,12 +150,17 @@ pub struct Parser<'a> {\n     pub errors: Vec<ParseError>,\n     /// Current position of implicit positional argument pointer\n     curarg: usize,\n+    /// `Some(raw count)` when the string is \"raw\", used to position spans correctly\n+    style: Option<usize>,\n+    /// How many newlines have been seen in the string so far, to adjust the error spans\n+    seen_newlines: usize,\n }\n \n impl<'a> Iterator for Parser<'a> {\n     type Item = Piece<'a>;\n \n     fn next(&mut self) -> Option<Piece<'a>> {\n+        let raw = self.style.map(|raw| raw + self.seen_newlines).unwrap_or(0);\n         if let Some(&(pos, c)) = self.cur.peek() {\n             match c {\n                 '{' => {\n@@ -170,20 +175,24 @@ impl<'a> Iterator for Parser<'a> {\n                 }\n                 '}' => {\n                     self.cur.next();\n-                    let pos = pos + 1;\n                     if self.consume('}') {\n-                        Some(String(self.string(pos)))\n+                        Some(String(self.string(pos + 1)))\n                     } else {\n+                        let err_pos = pos + raw + 1;\n                         self.err_with_note(\n                             \"unmatched `}` found\",\n                             \"unmatched `}`\",\n                             \"if you intended to print `}`, you can escape it using `}}`\",\n-                            pos,\n-                            pos,\n+                            err_pos,\n+                            err_pos,\n                         );\n                         None\n                     }\n                 }\n+                '\\n' => {\n+                    self.seen_newlines += 1;\n+                    Some(String(self.string(pos)))\n+                }\n                 _ => Some(String(self.string(pos))),\n             }\n         } else {\n@@ -194,12 +203,14 @@ impl<'a> Iterator for Parser<'a> {\n \n impl<'a> Parser<'a> {\n     /// Creates a new parser for the given format string\n-    pub fn new(s: &'a str) -> Parser<'a> {\n+    pub fn new(s: &'a str, style: Option<usize>) -> Parser<'a> {\n         Parser {\n             input: s,\n             cur: s.char_indices().peekable(),\n             errors: vec![],\n             curarg: 0,\n+            style,\n+            seen_newlines: 0,\n         }\n     }\n \n@@ -262,24 +273,32 @@ impl<'a> Parser<'a> {\n     /// found, an error is emitted.\n     fn must_consume(&mut self, c: char) {\n         self.ws();\n+        let raw = self.style.unwrap_or(0);\n+\n+        let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n             } else {\n+                let pos = pos + padding + 1;\n                 self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n                          format!(\"expected `{}`\", c),\n-                         pos + 1,\n-                         pos + 1);\n+                         pos,\n+                         pos);\n             }\n         } else {\n             let msg = format!(\"expected `{:?}` but string was terminated\", c);\n-            let pos = self.input.len() + 1; // point at closing `\"`\n+            // point at closing `\"`, unless the last char is `\\n` to account for `println`\n+            let pos = match self.input.chars().last() {\n+                Some('\\n') => self.input.len(),\n+                _ => self.input.len() + 1,\n+            };\n             if c == '}' {\n                 self.err_with_note(msg,\n                                    format!(\"expected `{:?}`\", c),\n                                    \"if you intended to print `{`, you can escape it using `{{`\",\n-                                   pos,\n-                                   pos);\n+                                   pos + padding,\n+                                   pos + padding);\n             } else {\n                 self.err(msg, format!(\"expected `{:?}`\", c), pos, pos);\n             }\n@@ -536,7 +555,7 @@ mod tests {\n     use super::*;\n \n     fn same(fmt: &'static str, p: &[Piece<'static>]) {\n-        let parser = Parser::new(fmt);\n+        let parser = Parser::new(fmt, None);\n         assert!(parser.collect::<Vec<Piece<'static>>>() == p);\n     }\n \n@@ -552,7 +571,7 @@ mod tests {\n     }\n \n     fn musterr(s: &str) {\n-        let mut p = Parser::new(s);\n+        let mut p = Parser::new(s, None);\n         p.next();\n         assert!(!p.errors.is_empty());\n     }"}, {"sha": "925d3504f75fc120c2a44f1c7d2ea0ca82fc7107", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0);\n+        let parser = Parser::new(&self.0, None);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n             Some((name, value))\n         }).collect::<FxHashMap<String, String>>();\n \n-        let parser = Parser::new(&self.0);\n+        let parser = Parser::new(&self.0, None);\n         parser.map(|p| {\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "76f38646308d8f24931377b2078bdd645e8d8329", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -153,10 +153,17 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! println {\n     () => (print!(\"\\n\"));\n-    ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n-    ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n+    ($($arg:tt)*) => ({\n+        #[cfg(not(stage0))] {\n+            ($crate::io::_print(format_args_nl!($($arg)*)));\n+        }\n+        #[cfg(stage0)] {\n+            print!(\"{}\\n\", format_args!($($arg)*))\n+        }\n+    })\n }\n \n /// Macro for printing to the standard error.\n@@ -210,10 +217,17 @@ macro_rules! eprint {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n+#[allow_internal_unstable]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n-    ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));\n-    ($fmt:expr, $($arg:tt)*) => (eprint!(concat!($fmt, \"\\n\"), $($arg)*));\n+    ($($arg:tt)*) => ({\n+        #[cfg(all(not(stage0), not(stage1)))] {\n+            ($crate::io::_eprint(format_args_nl!($($arg)*)));\n+        }\n+        #[cfg(any(stage0, stage1))] {\n+            eprint!(\"{}\\n\", format_args!($($arg)*))\n+        }\n+    })\n }\n \n #[macro_export]"}, {"sha": "b55c4f99206c4204858092501e30d0c39d6e579e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -959,29 +959,34 @@ impl<'a> ExtCtxt<'a> {\n /// Extract a string literal from the macro expanded version of `expr`,\n /// emitting `err_msg` if `expr` is not a string literal. This does not stop\n /// compilation on error, merely emits a non-fatal error and returns None.\n-pub fn expr_to_spanned_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n-                              -> Option<Spanned<(Symbol, ast::StrStyle)>> {\n+pub fn expr_to_spanned_string<'a>(\n+    cx: &'a mut ExtCtxt,\n+    expr: P<ast::Expr>,\n+    err_msg: &str,\n+) -> Result<Spanned<(Symbol, ast::StrStyle)>, DiagnosticBuilder<'a>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     let expr = expr.map(|mut expr| {\n         expr.span = expr.span.apply_mark(cx.current_expansion.mark);\n         expr\n     });\n \n-    // we want to be able to handle e.g. concat(\"foo\", \"bar\")\n+    // we want to be able to handle e.g. `concat!(\"foo\", \"bar\")`\n     let expr = cx.expander().fold_expr(expr);\n-    match expr.node {\n+    Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitKind::Str(s, style) => return Some(respan(expr.span, (s, style))),\n-            _ => cx.span_err(l.span, err_msg)\n+            ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n+            _ => cx.struct_span_err(l.span, err_msg)\n         },\n-        _ => cx.span_err(expr.span, err_msg)\n-    }\n-    None\n+        _ => cx.struct_span_err(expr.span, err_msg)\n+    })\n }\n \n pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n                       -> Option<(Symbol, ast::StrStyle)> {\n-    expr_to_spanned_string(cx, expr, err_msg).map(|s| s.node)\n+    expr_to_spanned_string(cx, expr, err_msg)\n+        .map_err(|mut err| err.emit())\n+        .ok()\n+        .map(|s| s.node)\n }\n \n /// Non-fatally assert that `tts` is empty. Note that this function"}, {"sha": "dc461d0a15d4b150f7b623a84dc6c999e8f92323", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1609,6 +1609,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_trace_macros = trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n+        fn enable_format_args_nl = format_args_nl,\n         fn use_extern_macros_enabled = use_extern_macros,\n         fn macros_in_extern_enabled = macros_in_extern,\n         fn proc_macro_mod = proc_macro_mod,"}, {"sha": "143d0d4df7105dd4345d2fc7a31632911bea050b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -129,6 +129,7 @@ declare_features! (\n     // rustc internal, for now:\n     (active, intrinsics, \"1.0.0\", None, None),\n     (active, lang_items, \"1.0.0\", None, None),\n+    (active, format_args_nl, \"1.29.0\", None, None),\n \n     (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n     (active, linkage, \"1.0.0\", Some(29603), None),\n@@ -1320,6 +1321,9 @@ pub const EXPLAIN_LOG_SYNTAX: &'static str =\n pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n     \"`concat_idents` is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_FORMAT_ARGS_NL: &'static str =\n+    \"`format_args_nl` is only for internal language use and is subject to change\";\n+\n pub const EXPLAIN_TRACE_MACROS: &'static str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str ="}, {"sha": "99dba8af754fabe67af08317ff40f65e0ccb4060", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -27,6 +27,7 @@ pub fn expand_syntax_ext(\n         None => return base::DummyResult::expr(sp),\n     };\n     let mut accumulator = String::new();\n+    let mut missing_literal = vec![];\n     for e in es {\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n@@ -51,17 +52,15 @@ pub fn expand_syntax_ext(\n                 }\n             },\n             _ => {\n-                let mut err = cx.struct_span_err(e.span, \"expected a literal\");\n-                let snippet = cx.codemap().span_to_snippet(e.span).unwrap();\n-                err.span_suggestion(\n-                    e.span,\n-                    \"you might be missing a string literal to format with\",\n-                    format!(\"\\\"{{}}\\\", {}\", snippet),\n-                );\n-                err.emit();\n+                missing_literal.push(e.span);\n             }\n         }\n     }\n+    if missing_literal.len() > 0 {\n+        let mut err = cx.struct_span_err(missing_literal, \"expected a literal\");\n+        err.note(\"only literals (like `\\\"foo\\\"`, `42` and `3.14`) can be passed to `concat!()`\");\n+        err.emit();\n+    }\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))\n }"}, {"sha": "755d2b476b7167ae33b94f195aabc075d8b52ebb", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -17,6 +17,7 @@ use syntax::ast;\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n+use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -683,7 +684,34 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names))\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, false))\n+        }\n+        None => DummyResult::expr(sp),\n+    }\n+}\n+\n+pub fn expand_format_args_nl<'cx>(ecx: &'cx mut ExtCtxt,\n+                                  mut sp: Span,\n+                                  tts: &[tokenstream::TokenTree])\n+                                  -> Box<dyn base::MacResult + 'cx> {\n+    //if !ecx.ecfg.enable_allow_internal_unstable() {\n+\n+    // For some reason, the only one that actually works for `println` is the first check\n+    if !sp.allows_unstable()   // the enclosing span is marked as `#[allow_insternal_unsable]`\n+        && !ecx.ecfg.enable_allow_internal_unstable()  // NOTE: when is this enabled?\n+        && !ecx.ecfg.enable_format_args_nl()  // enabled using `#[feature(format_args_nl]`\n+    {\n+        feature_gate::emit_feature_err(&ecx.parse_sess,\n+                                       \"format_args_nl\",\n+                                       sp,\n+                                       feature_gate::GateIssue::Language,\n+                                       feature_gate::EXPLAIN_FORMAT_ARGS_NL);\n+        return base::DummyResult::expr(sp);\n+    }\n+    sp = sp.apply_mark(ecx.current_expansion.mark);\n+    match parse_args(ecx, sp, tts) {\n+        Some((efmt, args, names)) => {\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, true))\n         }\n         None => DummyResult::expr(sp),\n     }\n@@ -695,18 +723,37 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                                     sp: Span,\n                                     efmt: P<ast::Expr>,\n                                     args: Vec<P<ast::Expr>>,\n-                                    names: HashMap<String, usize>)\n+                                    names: HashMap<String, usize>,\n+                                    append_newline: bool)\n                                     -> P<ast::Expr> {\n     // NOTE: this verbose way of initializing `Vec<Vec<ArgumentType>>` is because\n     // `ArgumentType` does not derive `Clone`.\n     let arg_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let arg_unique_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let mut macsp = ecx.call_site();\n     macsp = macsp.apply_mark(ecx.current_expansion.mark);\n-    let msg = \"format argument must be a string literal.\";\n+    let msg = \"format argument must be a string literal\";\n+    let fmt_sp = efmt.span;\n     let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n-        Some(fmt) => fmt,\n-        None => return DummyResult::raw_expr(sp),\n+        Ok(mut fmt) if append_newline => {\n+            fmt.node.0 = Symbol::intern(&format!(\"{}\\n\", fmt.node.0));\n+            fmt\n+        }\n+        Ok(fmt) => fmt,\n+        Err(mut err) => {\n+            let sugg_fmt = match args.len() {\n+                0 => \"{}\".to_string(),\n+                _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n+\n+            };\n+            err.span_suggestion(\n+                fmt_sp.shrink_to_lo(),\n+                \"you might be missing a string literal to format with\",\n+                format!(\"\\\"{}\\\", \", sugg_fmt),\n+            );\n+            err.emit();\n+            return DummyResult::raw_expr(sp);\n+        },\n     };\n \n     let mut cx = Context {\n@@ -731,7 +778,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();\n-    let mut parser = parse::Parser::new(fmt_str);\n+    let str_style = match fmt.node.1 {\n+        ast::StrStyle::Cooked => None,\n+        ast::StrStyle::Raw(raw) => Some(raw as usize),\n+    };\n+    let mut parser = parse::Parser::new(fmt_str, str_style);\n     let mut pieces = vec![];\n \n     while let Some(mut piece) = parser.next() {\n@@ -818,7 +869,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     errs.iter().map(|&(sp, _)| sp).collect::<Vec<Span>>(),\n                     \"multiple unused formatting arguments\"\n                 );\n-                diag.span_label(cx.fmtsp, \"multiple unused arguments in this statement\");\n+                diag.span_label(cx.fmtsp, \"multiple missing formatting arguments\");\n                 diag\n             }\n         };\n@@ -861,8 +912,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     }\n \n                     if show_doc_note {\n-                        diag.note(concat!(stringify!($kind), \" formatting not supported; see \\\n-                                the documentation for `std::fmt`\"));\n+                        diag.note(concat!(\n+                            stringify!($kind),\n+                            \" formatting not supported; see the documentation for `std::fmt`\",\n+                        ));\n                     }\n                 }};\n             }"}, {"sha": "ff76e788b3c291311b24afa70ca9267126a85d55", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -139,6 +139,16 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                 unstable_feature: None,\n                 edition: hygiene::default_edition(),\n             });\n+    register(Symbol::intern(\"format_args_nl\"),\n+             NormalTT {\n+                 expander: Box::new(format::expand_format_args_nl),\n+                 def_info: None,\n+                 allow_internal_unstable: true,\n+                 allow_internal_unsafe: false,\n+                 local_inner_macros: false,\n+                 unstable_feature: None,\n+                 edition: hygiene::default_edition(),\n+             });\n \n     for (name, ext) in user_exts {\n         register(name, ext);"}, {"sha": "3f82311d469ae4ad221e2ae2c953bdf447c71a6e", "filename": "src/test/ui/const-eval/conditional_array_execution.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -28,25 +28,19 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/conditional_array_execution.rs:19:5\n+  --> $DIR/conditional_array_execution.rs:19:14\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n ...\n LL |     println!(\"{}\", FOO);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:19:5\n+  --> $DIR/conditional_array_execution.rs:19:14\n    |\n LL |     println!(\"{}\", FOO);\n-   |     ^^^^^^^^^^^^^^^---^^\n-   |                    |\n-   |                    referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^  --- referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/conditional_array_execution.rs:19:20"}, {"sha": "e25cb29c114752b170199a29d02c28dc94c05da9", "filename": "src/test/ui/const-eval/issue-43197.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -51,25 +51,19 @@ LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:24:5\n+  --> $DIR/issue-43197.rs:24:14\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n ...\n LL |     println!(\"{} {}\", X, Y);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:24:5\n+  --> $DIR/issue-43197.rs:24:14\n    |\n LL |     println!(\"{} {}\", X, Y);\n-   |     ^^^^^^^^^^^^^^^^^^-^^^^^\n-   |                       |\n-   |                       referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^^^^  - referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/issue-43197.rs:24:26"}, {"sha": "da040747991a418fd619964fb25b49f3638439d0", "filename": "src/test/ui/const-eval/issue-44578.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1,23 +1,17 @@\n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-44578.rs:35:5\n+  --> $DIR/issue-44578.rs:35:14\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n    |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n ...\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-44578.rs:35:5\n+  --> $DIR/issue-44578.rs:35:14\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |     ^^^^^^^^^^^^^^^--------------------------^^\n-   |                    |\n-   |                    referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^  -------------------------- referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/issue-44578.rs:35:20"}, {"sha": "b976d57f9c179deec993843d4220ef6610967da2", "filename": "src/test/ui/feature-gate-format_args_nl.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    format_args_nl!(\"\"); //~ ERROR `format_args_nl` is only for internal language use\n+}"}, {"sha": "a79535641a62749738975aa2c959a7782de239a8", "filename": "src/test/ui/feature-gate-format_args_nl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-format_args_nl.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `format_args_nl` is only for internal language use and is subject to change\n+  --> $DIR/feature-gate-format_args_nl.rs:12:5\n+   |\n+LL |     format_args_nl!(\"\"); //~ ERROR `format_args_nl` is only for internal language use\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(format_args_nl)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f39110ebc5dccde63cf613e2be403f801bb0b02d", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-tab\n+\n fn main() {\n     println!(\"{\");\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n     println!(\"{{}}\");\n     println!(\"}\");\n+    //~^ ERROR invalid format string: unmatched `}` found\n     let _ = format!(\"{_foo}\", _foo = 6usize);\n     //~^ ERROR invalid format string: invalid argument name `_foo`\n     let _ = format!(\"{_}\", _ = 6usize);\n@@ -22,4 +26,36 @@ fn main() {\n     //~^ ERROR invalid format string: unmatched `}` found\n     let _ = format!(\"{\\\\}\");\n     //~^ ERROR invalid format string: expected `'}'`, found `'\\\\'`\n+    let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n+    //~^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t{\"###);\n+    //~^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t{\n+\n+\"###);\n+    //~^^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t}\n+\n+\"###);\n+    //~^^^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+        }\n+\n+\"###);\n+    //~^^^ ERROR invalid format string: unmatched `}` found\n }"}, {"sha": "9c84fd2521891bcbfa31da14157a4e3a8bd9fcd2", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1,58 +1,96 @@\n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:12:5\n+  --> $DIR/format-string-error.rs:14:16\n    |\n LL |     println!(\"{\");\n-   |     ^^^^^^^^^^^^^^ expected `'}'` in format string\n+   |                ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:14:5\n+  --> $DIR/format-string-error.rs:17:15\n    |\n LL |     println!(\"}\");\n-   |     ^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: invalid argument name `_foo`\n-  --> $DIR/format-string-error.rs:15:23\n+  --> $DIR/format-string-error.rs:19:23\n    |\n LL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n    |                       ^^^^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: invalid argument name `_`\n-  --> $DIR/format-string-error.rs:17:23\n+  --> $DIR/format-string-error.rs:21:23\n    |\n LL |     let _ = format!(\"{_}\", _ = 6usize);\n    |                       ^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:19:23\n+  --> $DIR/format-string-error.rs:23:23\n    |\n LL |     let _ = format!(\"{\");\n    |                       ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:21:22\n+  --> $DIR/format-string-error.rs:25:22\n    |\n LL |     let _ = format!(\"}\");\n    |                      ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: expected `'}'`, found `'/'`\n-  --> $DIR/format-string-error.rs:23:23\n+  --> $DIR/format-string-error.rs:27:23\n    |\n LL |     let _ = format!(\"{/}\");\n    |                       ^ expected `}` in format string\n \n-error: aborting due to 7 previous errors\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:29:29\n+   |\n+LL |     let _ = format!(\"/n/n/n{/n/n/n\");\n+   |                             ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:35:3\n+   |\n+LL |     {\"###);\n+   |      ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:42:1\n+   |\n+LL | \n+   | ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:49:2\n+   |\n+LL |     }\n+   |     ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:57:9\n+   |\n+LL |         }\n+   |         ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "bee73e9f568b60e0e508cb3244a69d9cf16b52e0", "filename": "src/test/ui/issue-11692-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fissue-11692-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fissue-11692-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-1.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1,8 +1,12 @@\n-error: format argument must be a string literal.\n+error: format argument must be a string literal\n   --> $DIR/issue-11692-1.rs:12:12\n    |\n LL |     print!(test!());\n    |            ^^^^^^^\n+help: you might be missing a string literal to format with\n+   |\n+LL |     print!(\"{}\", test!());\n+   |            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e7adee8ce8597a6653fe5f18f986341696e7dc73", "filename": "src/test/ui/macros/bad-concat.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x: u32 = 42;\n+    let y: f64 = 3.14;\n+    let z = \"foo\";\n+    let _ = concat!(x, y, z, \"bar\");\n+    //~^ ERROR expected a literal\n+    //~| NOTE only literals\n+}"}, {"sha": "b97e4f268241ced6d067bf87d730d757bbed12cf", "filename": "src/test/ui/macros/bad-concat.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad-concat.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -0,0 +1,10 @@\n+error: expected a literal\n+  --> $DIR/bad-concat.rs:15:21\n+   |\n+LL |     let _ = concat!(x, y, z, \"bar\");\n+   |                     ^  ^  ^\n+   |\n+   = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cccaf7998c98b45240da6f9659eb65504239b17f", "filename": "src/test/ui/macros/bad_hello.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -9,5 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    println!(3 + 4); //~ ERROR expected a literal\n+    println!(3 + 4);\n+    //~^ ERROR format argument must be a string literal\n+    println!(3, 4);\n+    //~^ ERROR format argument must be a string literal\n }"}, {"sha": "c675eede2152bc5d9053755b943d45c992d0dfbd", "filename": "src/test/ui/macros/bad_hello.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1,12 +1,22 @@\n-error: expected a literal\n+error: format argument must be a string literal\n   --> $DIR/bad_hello.rs:12:14\n    |\n-LL |     println!(3 + 4); //~ ERROR expected a literal\n+LL |     println!(3 + 4);\n    |              ^^^^^\n help: you might be missing a string literal to format with\n    |\n-LL |     println!(\"{}\", 3 + 4); //~ ERROR expected a literal\n-   |              ^^^^^^^^^^^\n+LL |     println!(\"{}\", 3 + 4);\n+   |              ^^^^^\n+\n+error: format argument must be a string literal\n+  --> $DIR/bad_hello.rs:14:14\n+   |\n+LL |     println!(3, 4);\n+   |              ^\n+help: you might be missing a string literal to format with\n+   |\n+LL |     println!(\"{} {}\", 3, 4);\n+   |              ^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "401b2f6d67e399c8d52f2328f45dfb966af0ccb1", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -2,12 +2,13 @@ error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:12:30\n    |\n LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n-   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n+   |              --------------  ^^^^^^^^  ^^^^^^^  ^\n+   |              |\n+   |              multiple missing formatting arguments\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29"}, {"sha": "f764190438f3355c54e38f3b11cfb2a5fb349fe4", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -2,24 +2,21 @@ error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:12:22\n    |\n LL |     println!(\"Test\", 123, 456, 789);\n-   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ------  ^^^  ^^^  ^^^\n+   |              |\n+   |              multiple missing formatting arguments\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:16:9\n    |\n-LL | /     println!(\"Test2\",\n-LL | |         123,  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^\n-LL | |         456,\n-   | |         ^^^\n-LL | |         789\n-   | |         ^^^\n-LL | |     );\n-   | |______- multiple unused arguments in this statement\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     println!(\"Test2\",\n+   |              ------- multiple missing formatting arguments\n+LL |         123,  //~ ERROR multiple unused formatting arguments\n+   |         ^^^\n+LL |         456,\n+   |         ^^^\n+LL |         789\n+   |         ^^^\n \n error: named argument never used\n   --> $DIR/format-unused-lables.rs:21:35\n@@ -30,18 +27,18 @@ LL |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never u\n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:24:9\n    |\n-LL | /     println!(\"Some more $STUFF\",\n-LL | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^^^^\n-LL | |             STUFF=\n-LL | |        \"things\"\n-   | |        ^^^^^^^^\n-LL | |              , UNUSED=\"args\");\n-   | |_______________________^^^^^^_- multiple unused arguments in this statement\n+LL |     println!(\"Some more $STUFF\",\n+   |              ------------------ multiple missing formatting arguments\n+LL |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n+   |         ^^^^^^\n+LL |             STUFF=\n+LL |        \"things\"\n+   |        ^^^^^^^^\n+LL |              , UNUSED=\"args\");\n+   |                       ^^^^^^\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2a30d9837517e2dcd42f805328e4b8683246afb7", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -5,8 +5,8 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `print ! ( concat ! ( \"Hello, World!\" , \"/n\" ) )`\n-   = note: expanding `print! { concat ! ( \"Hello, World!\" , \"/n\" ) }`\n-   = note: to `$crate :: io :: _print ( format_args ! ( concat ! ( \"Hello, World!\" , \"/n\" ) )\n-           )`\n+   = note: to `{\n+           # [ cfg ( not ( stage0 ) ) ] {\n+           ( $crate :: io :: _print ( format_args_nl ! ( \"Hello, World!\" ) ) ) ; } # [\n+           cfg ( stage0 ) ] { print ! ( \"{}/n\" , format_args ! ( \"Hello, World!\" ) ) } }`\n "}]}