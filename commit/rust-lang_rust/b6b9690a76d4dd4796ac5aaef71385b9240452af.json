{"sha": "b6b9690a76d4dd4796ac5aaef71385b9240452af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Yjk2OTBhNzZkNGRkNDc5NmFjNWFhZWY3MTM4NWI5MjQwNDUyYWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-15T03:12:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-15T03:12:13Z"}, "message": "Fix merge conflicts with `gen` branch", "tree": {"sha": "a9419fd59e4c4e35b0de1547666e97bcd763aca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9419fd59e4c4e35b0de1547666e97bcd763aca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b9690a76d4dd4796ac5aaef71385b9240452af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b9690a76d4dd4796ac5aaef71385b9240452af", "html_url": "https://github.com/rust-lang/rust/commit/b6b9690a76d4dd4796ac5aaef71385b9240452af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b9690a76d4dd4796ac5aaef71385b9240452af/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ebcaca168dd929f8d99a66fb9d348f615c6cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ebcaca168dd929f8d99a66fb9d348f615c6cc1", "html_url": "https://github.com/rust-lang/rust/commit/22ebcaca168dd929f8d99a66fb9d348f615c6cc1"}], "stats": {"total": 97, "additions": 76, "deletions": 21}, "files": [{"sha": "f09dc8a67c82b8df97a6150320552bbe67872a71", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -1367,7 +1367,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn generator_sig(&self, def_id: DefId) -> Option<ty::PolyGenSig<'tcx>> {\n         if let Some(tables) = self.in_progress_tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                if let Some(&ty) = tables.borrow().generator_sigs.get(&id) {\n+                let hir_id = self.tcx.hir.node_to_hir_id(id);\n+                if let Some(&ty) = tables.borrow().generator_sigs().get(hir_id) {\n                     return ty.map(|t| ty::Binder(t));\n                 }\n             }"}, {"sha": "00ad0678e0d37d3d0c563c3d40d5d7b847d162b4", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -728,7 +728,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let kind = match self.tables.closure_kinds().get(fn_hir_id) {\n             Some(&(kind, _)) => kind,\n             None => {\n-                let ty = self.node_ty(fn_node_id)?;\n+                let ty = self.node_ty(fn_hir_id)?;\n                 match ty.sty {\n                     ty::TyGenerator(..) => ty::ClosureKind::FnOnce,\n                     _ => span_bug!(span, \"missing closure kind\"),"}, {"sha": "3efc696f2a50a4877ac2e8884c7e9518d3582b71", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ImplItemKind::Type(_) => {}\n                 }\n             }\n-            hir_map::NodeExpr(&hir::Expr { node: hir::ExprClosure(.., body, _), .. }) => {\n+            hir_map::NodeExpr(&hir::Expr { node: hir::ExprClosure(.., body, _, _), .. }) => {\n                 self.visit_nested_body(body);\n             }\n             // Nothing to recurse on for these"}, {"sha": "51269534dcfea296ec9f96f2a6a45a9bb3f8fcc1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -340,9 +340,9 @@ pub struct TypeckTables<'tcx> {\n     /// that caused the closure to be this kind.\n     closure_kinds: ItemLocalMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n \n-    pub generator_sigs: ItemLocalMap<Option<ty::GenSig<'tcx>>>,\n+    generator_sigs: ItemLocalMap<Option<ty::GenSig<'tcx>>>,\n \n-    pub generator_interiors: ItemLocalMap<ty::GeneratorInterior<'tcx>>,\n+    generator_interiors: ItemLocalMap<ty::GeneratorInterior<'tcx>>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions\n@@ -640,6 +640,42 @@ impl<'tcx> TypeckTables<'tcx> {\n             data: &mut self.cast_kinds\n         }\n     }\n+\n+    pub fn generator_sigs(&self)\n+        -> LocalTableInContext<Option<ty::GenSig<'tcx>>>\n+    {\n+        LocalTableInContext {\n+            local_id_root: self.local_id_root,\n+            data: &self.generator_sigs,\n+        }\n+    }\n+\n+    pub fn generator_sigs_mut(&mut self)\n+        -> LocalTableInContextMut<Option<ty::GenSig<'tcx>>>\n+    {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.generator_sigs,\n+        }\n+    }\n+\n+    pub fn generator_interiors(&self)\n+        -> LocalTableInContext<ty::GeneratorInterior<'tcx>>\n+    {\n+        LocalTableInContext {\n+            local_id_root: self.local_id_root,\n+            data: &self.generator_interiors,\n+        }\n+    }\n+\n+    pub fn generator_interiors_mut(&mut self)\n+        -> LocalTableInContextMut<ty::GeneratorInterior<'tcx>>\n+    {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.generator_interiors,\n+        }\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for TypeckTables<'gcx> {\n@@ -664,6 +700,8 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n             ref used_trait_imports,\n             tainted_by_errors,\n             ref free_region_map,\n+            ref generator_sigs,\n+            ref generator_interiors,\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -697,6 +735,8 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n             ich::hash_stable_itemlocalmap(hcx, hasher, liberated_fn_sigs);\n             ich::hash_stable_itemlocalmap(hcx, hasher, fru_field_types);\n             ich::hash_stable_itemlocalmap(hcx, hasher, cast_kinds);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, generator_sigs);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, generator_interiors);\n \n             ich::hash_stable_hashset(hcx, hasher, used_trait_imports, |hcx, def_id| {\n                 hcx.def_path_hash(*def_id)"}, {"sha": "afede7e89c068dd4967693030b5ddb009d27aad1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -103,7 +103,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     Some((closure_self_ty(tcx, id, body_id), None))\n                 }\n                 ty::TyGenerator(..) => {\n-                    let gen_ty =  tcx.body_tables(body_id).node_id_to_type(id);\n+                    let gen_ty =  tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n                     Some((gen_ty, None))\n                 }\n                 _ => None,\n@@ -121,7 +121,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n             let (yield_ty, return_ty) = if body.is_generator {\n-                let gen_sig = cx.tables().generator_sigs[&id].clone().unwrap();\n+                let gen_sig = cx.tables().generator_sigs()[fn_hir_id].clone().unwrap();\n                 (Some(gen_sig.yield_ty), gen_sig.return_ty)\n             } else {\n                 (None, fn_sig.output())"}, {"sha": "b4d6bb09a157efc4a0fd17ce757db4c63dae88ef", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -636,9 +636,10 @@ impl MirPass for StateTransform {\n \n         let node_id = source.item_id();\n         let def_id = tcx.hir.local_def_id(source.item_id());\n+        let hir_id = tcx.hir.node_to_hir_id(node_id);\n \n         // Get the interior types which typeck computed\n-        let interior = *tcx.typeck_tables_of(def_id).generator_interiors.get(&node_id).unwrap();\n+        let interior = *tcx.typeck_tables_of(def_id).generator_interiors().get(hir_id).unwrap();\n \n         // The first argument is the generator type passed by value\n         let gen_ty = mir.local_decls.raw[1].ty;"}, {"sha": "bdacf4f343547b9a9a45ec5223faa4c6e067d24d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -750,7 +750,8 @@ fn generator_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           def_id: DefId)\n                           -> Option<ty::PolyGenSig<'tcx>> {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    tcx.typeck_tables_of(def_id).generator_sigs[&node_id].map(|s| ty::Binder(s))\n+    let hir_id = tcx.hir.node_to_hir_id(node_id);\n+    tcx.typeck_tables_of(def_id).generator_sigs()[hir_id].map(|s| ty::Binder(s))\n }\n \n fn closure_kind<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1050,25 +1051,26 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.write_ty(arg.hir_id, arg_ty);\n     }\n \n+    let fn_hir_id = fcx.tcx.hir.node_to_hir_id(fn_id);\n     let gen_ty = if can_be_generator && body.is_generator {\n         let gen_sig = ty::GenSig {\n             yield_ty: fcx.yield_ty.unwrap(),\n             return_ty: ret_ty,\n         };\n-        inherited.tables.borrow_mut().generator_sigs.insert(fn_hir_id, Some(gen_sig));\n+        inherited.tables.borrow_mut().generator_sigs_mut().insert(fn_hir_id, Some(gen_sig));\n \n         let witness = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), witness));\n         let interior = ty::GeneratorInterior::new(witness);\n \n-        inherited.tables.borrow_mut().generator_interiors.insert(fn_hir_id, interior);\n+        inherited.tables.borrow_mut().generator_interiors_mut().insert(fn_hir_id, interior);\n \n         Some(interior)\n     } else {\n-        inherited.tables.borrow_mut().generator_sigs.insert(fn_hir_id, None);\n+        inherited.tables.borrow_mut().generator_sigs_mut().insert(fn_hir_id, None);\n         None\n     };\n-    inherited.tables.borrow_mut().liberated_fn_sigs.insert(fn_hir_id, fn_sig);\n+    inherited.tables.borrow_mut().liberated_fn_sigs_mut().insert(fn_hir_id, fn_sig);\n \n     fcx.check_return_expr(&body.value);\n "}, {"sha": "8ebf55258ad68a1b3398f9ecf914a8f9fcfaab39", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -361,19 +361,29 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     }\n \n     fn visit_generator_interiors(&mut self) {\n-        for (&node_id, interior) in self.fcx.tables.borrow().generator_interiors.iter() {\n-            let interior = self.resolve(interior, &node_id);\n-            self.tables.generator_interiors.insert(node_id, interior);\n+        let common_local_id_root = self.fcx.tables.borrow().local_id_root.unwrap();\n+        for (&id, interior) in self.fcx.tables.borrow().generator_interiors().iter() {\n+            let hir_id = hir::HirId {\n+                owner: common_local_id_root.index,\n+                local_id: id,\n+            };\n+            let interior = self.resolve(interior, &hir_id);\n+            self.tables.generator_interiors_mut().insert(hir_id, interior);\n         }\n     }\n \n     fn visit_generator_sigs(&mut self) {\n-        for (&node_id, gen_sig) in self.fcx.tables.borrow().generator_sigs.iter() {\n+        let common_local_id_root = self.fcx.tables.borrow().local_id_root.unwrap();\n+        for (&id, gen_sig) in self.fcx.tables.borrow().generator_sigs().iter() {\n+            let hir_id = hir::HirId {\n+                owner: common_local_id_root.index,\n+                local_id: id,\n+            };\n             let gen_sig = gen_sig.map(|s| ty::GenSig {\n-                yield_ty: self.resolve(&s.yield_ty, &node_id),\n-                return_ty: self.resolve(&s.return_ty, &node_id),\n+                yield_ty: self.resolve(&s.yield_ty, &hir_id),\n+                return_ty: self.resolve(&s.return_ty, &hir_id),\n             });\n-            self.tables.generator_sigs.insert(node_id, gen_sig);\n+            self.tables.generator_sigs_mut().insert(hir_id, gen_sig);\n         }\n     }\n "}, {"sha": "75bdfde229308e3baec3855fb05e58d900ccc855", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b9690a76d4dd4796ac5aaef71385b9240452af/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b6b9690a76d4dd4796ac5aaef71385b9240452af", "patch": "@@ -1155,7 +1155,8 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeExpr(&hir::Expr { node: hir::ExprClosure(.., is_generator), .. }) => {\n             if is_generator {\n-                return tcx.typeck_tables_of(def_id).node_id_to_type(node_id);\n+                let hir_id = tcx.hir.node_to_hir_id(node_id);\n+                return tcx.typeck_tables_of(def_id).node_id_to_type(hir_id);\n             }\n \n             tcx.mk_closure(def_id, Substs::for_item("}]}