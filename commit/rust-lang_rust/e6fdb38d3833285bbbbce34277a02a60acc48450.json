{"sha": "e6fdb38d3833285bbbbce34277a02a60acc48450", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZmRiMzhkMzgzMzI4NWJiYmJjZTM0Mjc3YTAyYTYwYWNjNDg0NTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-01T18:45:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-01T18:45:47Z"}, "message": "Use `as_tuple()`", "tree": {"sha": "17368bbb6d4d8d3bb54e8d6b837c4ea82bfecb60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17368bbb6d4d8d3bb54e8d6b837c4ea82bfecb60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6fdb38d3833285bbbbce34277a02a60acc48450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fdb38d3833285bbbbce34277a02a60acc48450", "html_url": "https://github.com/rust-lang/rust/commit/e6fdb38d3833285bbbbce34277a02a60acc48450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6fdb38d3833285bbbbce34277a02a60acc48450/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a2289676718122d96ab081d579a7a0d2af49d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a2289676718122d96ab081d579a7a0d2af49d8", "html_url": "https://github.com/rust-lang/rust/commit/b5a2289676718122d96ab081d579a7a0d2af49d8"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "1db2da3f7c452fef61c3eb8ab5ac61375e23397f", "filename": "crates/hir_ty/src/infer/closure.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e6fdb38d3833285bbbbce34277a02a60acc48450/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fdb38d3833285bbbbce34277a02a60acc48450/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs?ref=e6fdb38d3833285bbbbce34277a02a60acc48450", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n \n use crate::{\n     to_chalk_trait_id, utils, ChalkTraitId, DynTy, FnPointer, FnSig, Interner, Substitution, Ty,\n-    TyKind,\n+    TyExt, TyKind,\n };\n \n use super::{Expectation, InferenceContext};\n@@ -58,30 +58,27 @@ impl InferenceContext<'_> {\n \n                         // Skip `Self`, get the type argument.\n                         let arg = projection.substitution.as_slice(&Interner).get(1)?;\n-                        match arg.ty(&Interner)?.kind(&Interner) {\n-                            TyKind::Tuple(_, subst) => {\n-                                let generic_args = subst.as_slice(&Interner);\n-                                let mut sig_tys = Vec::new();\n-                                for arg in generic_args {\n-                                    sig_tys.push(arg.ty(&Interner)?.clone());\n-                                }\n-                                sig_tys.push(eq.ty.clone());\n-\n-                                cov_mark::hit!(dyn_fn_param_informs_call_site_closure_signature);\n-                                return Some(FnPointer {\n-                                    num_binders: 0,\n-                                    sig: FnSig {\n-                                        abi: (),\n-                                        safety: chalk_ir::Safety::Safe,\n-                                        variadic: false,\n-                                    },\n-                                    substitution: FnSubst(Substitution::from_iter(\n-                                        &Interner,\n-                                        sig_tys.clone(),\n-                                    )),\n-                                });\n+                        if let Some(subst) = arg.ty(&Interner)?.as_tuple() {\n+                            let generic_args = subst.as_slice(&Interner);\n+                            let mut sig_tys = Vec::new();\n+                            for arg in generic_args {\n+                                sig_tys.push(arg.ty(&Interner)?.clone());\n                             }\n-                            _ => {}\n+                            sig_tys.push(eq.ty.clone());\n+\n+                            cov_mark::hit!(dyn_fn_param_informs_call_site_closure_signature);\n+                            return Some(FnPointer {\n+                                num_binders: 0,\n+                                sig: FnSig {\n+                                    abi: (),\n+                                    safety: chalk_ir::Safety::Safe,\n+                                    variadic: false,\n+                                },\n+                                substitution: FnSubst(Substitution::from_iter(\n+                                    &Interner,\n+                                    sig_tys.clone(),\n+                                )),\n+                            });\n                         }\n                     }\n                     AliasTy::Opaque(_) => {}"}]}