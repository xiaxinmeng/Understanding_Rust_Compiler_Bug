{"sha": "671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "node_id": "C_kwDOAAsO6NoAKDY3MWRlNmQ2MmEyMWRlNjAwNzNkMmU0ZDBmOGNjZmNkNWVhODI2YmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-16T21:16:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-26T05:19:50Z"}, "message": "Remove unused `TypeFoldable`/`TypeVisitable` impls.", "tree": {"sha": "84031c7b0df030062e5e08c26c9d4feb6b765a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84031c7b0df030062e5e08c26c9d4feb6b765a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "html_url": "https://github.com/rust-lang/rust/commit/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458d4dae845ec155b285681a5b88305641abb868", "url": "https://api.github.com/repos/rust-lang/rust/commits/458d4dae845ec155b285681a5b88305641abb868", "html_url": "https://github.com/rust-lang/rust/commit/458d4dae845ec155b285681a5b88305641abb868"}], "stats": {"total": 71, "additions": 12, "deletions": 59}, "files": [{"sha": "e375d611936ea9288f785a6e6319c1e404868781", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -20,7 +20,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::error::TypeError<'tcx>,\n }\n \n-#[derive(Clone, TypeFoldable, TypeVisitable)]\n+#[derive(Clone)]\n pub struct Normalized<'tcx, T> {\n     pub value: T,\n     pub obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "8a22de931c35b2577e91498d9dd61d64aeabefac", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -66,7 +66,6 @@ pub struct Place<'tcx> {\n ///\n /// This is an HIR version of [`rustc_middle::mir::Place`].\n #[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n-#[derive(TypeFoldable, TypeVisitable)]\n pub struct PlaceWithHirId<'tcx> {\n     /// `HirId` of the expression or pattern producing this value.\n     pub hir_id: HirId,"}, {"sha": "813e109c41e14b8a2a76aba94fd39b240dc912eb", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -234,7 +234,6 @@ pub enum StmtKind<'tcx> {\n }\n \n #[derive(Clone, Debug, Copy, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n-#[derive(TypeFoldable, TypeVisitable)]\n pub struct LocalVarId(pub hir::HirId);\n \n /// A THIR expression."}, {"sha": "02433026266a3420b0afa0b356e5e69a42b54175", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -569,7 +569,7 @@ pub struct DerivedObligationCause<'tcx> {\n     pub parent_code: InternedObligationCauseCode<'tcx>,\n }\n \n-#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Clone, Debug, TypeVisitable, Lift)]\n pub enum SelectionError<'tcx> {\n     /// The trait is not implemented.\n     Unimplemented,"}, {"sha": "f2dda003b99c5d60462456309c4907e69ebdc50e", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -103,7 +103,7 @@ pub type EvaluationCache<'tcx> = Cache<\n /// required for associated types to work in default impls, as the bounds\n /// are visible both as projection bounds and as where-clauses from the\n /// parameter environment.\n-#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable, TypeVisitable)]\n+#[derive(PartialEq, Eq, Debug, Clone, TypeVisitable)]\n pub enum SelectionCandidate<'tcx> {\n     /// A builtin implementation for some specific traits, used in cases\n     /// where we cannot rely an ordinary library implementations."}, {"sha": "6b7b910a59bf90392dfb0b8b1694a2bb07408796", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -120,7 +120,7 @@ impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n }\n \n /// Additional constraints returned on success.\n-#[derive(Debug, PartialEq, Eq, Clone, Hash, Default, TypeFoldable, TypeVisitable)]\n+#[derive(Debug, PartialEq, Eq, Clone, Hash, Default)]\n pub struct ExternalConstraintsData<'tcx> {\n     // FIXME: implement this.\n     pub region_constraints: QueryRegionConstraints<'tcx>,"}, {"sha": "1be61e16dbed8a3662386896c87134f9e7088f13", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -28,7 +28,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, TypeVisitable, Lift, PartialEq, Eq)]\n #[rustc_pass_by_value]\n pub enum TypeError<'tcx> {\n     Mismatch,"}, {"sha": "2aced27f7bbdca2585bf515d7f32f5e18222b8b1", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -2690,7 +2690,7 @@ impl<'tcx> ty::PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Debug, Copy, Clone, Lift)]\n pub struct PrintClosureAsImpl<'tcx> {\n     pub closure: ty::ClosureSubsts<'tcx>,\n }"}, {"sha": "d4116a763e13bad5502d8a185574cea0c8836131", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -4,7 +4,6 @@\n //! to help with the tedium.\n \n use crate::mir::interpret;\n-use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -373,16 +372,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n ///////////////////////////////////////////////////////////////////////////\n // Traversal implementations.\n \n-/// AdtDefs are basically the same as a DefId.\n-impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n-        self,\n-        _folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}\n-\n impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n         &self,\n@@ -445,15 +434,6 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n-    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_projs(v))\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,"}, {"sha": "aa658fc5e45fbcbd643bb4fc0c70f223f1b6c111", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -631,7 +631,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n /// type of the constant. The reason that `R` is represented as an extra type parameter\n /// is the same reason that [`ClosureSubsts`] have `CS` and `U` as type parameters:\n /// inline const can reference lifetimes that are internal to the creating function.\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n+#[derive(Copy, Clone, Debug)]\n pub struct InlineConstSubsts<'tcx> {\n     /// Generic parameters from the enclosing item,\n     /// concatenated with the inferred type of the constant."}, {"sha": "77c0526e3aabec179085eff193039b1360d0292c", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -62,15 +62,15 @@ mod rustc {\n \n     use rustc_hir::lang_items::LangItem;\n     use rustc_infer::infer::InferCtxt;\n-    use rustc_macros::{TypeFoldable, TypeVisitable};\n+    use rustc_macros::TypeVisitable;\n     use rustc_middle::traits::ObligationCause;\n     use rustc_middle::ty::Const;\n     use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::Ty;\n     use rustc_middle::ty::TyCtxt;\n \n     /// The source and destination types of a transmutation.\n-    #[derive(TypeFoldable, TypeVisitable, Debug, Clone, Copy)]\n+    #[derive(TypeVisitable, Debug, Clone, Copy)]\n     pub struct Types<'tcx> {\n         /// The source type.\n         pub src: Ty<'tcx>,"}, {"sha": "c513bde6ecfc2937988c082460b5ca1a7a17d7e2", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "patch": "@@ -6,11 +6,10 @@ use crate::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::visit::{TypeVisitable, TypeVisitor};\n use crate::Interner;\n use rustc_data_structures::functor::IdFunctor;\n+use rustc_data_structures::sync::Lrc;\n use rustc_index::{Idx, IndexVec};\n \n use std::ops::ControlFlow;\n-use std::rc::Rc;\n-use std::sync::Arc;\n \n ///////////////////////////////////////////////////////////////////////////\n // Atomic structs\n@@ -106,25 +105,13 @@ impl<I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>> TypeVisitable<I> for\n     }\n }\n \n-impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Rc<T> {\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Lrc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n }\n \n-impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Rc<T> {\n-    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Arc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|value| value.try_fold_with(folder))\n-    }\n-}\n-\n-impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Arc<T> {\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Lrc<T> {\n     fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -160,18 +147,6 @@ impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for &[T] {\n     }\n }\n \n-impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Box<[T]> {\n-    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|t| t.try_fold_with(folder))\n-    }\n-}\n-\n-impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Box<[T]> {\n-    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n impl<I: Interner, T: TypeFoldable<I>, Ix: Idx> TypeFoldable<I> for IndexVec<Ix, T> {\n     fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))"}]}