{"sha": "d9ddb6446dd2bc1591698754e5bd096a78b55595", "node_id": "C_kwDOAAsO6NoAKGQ5ZGRiNjQ0NmRkMmJjMTU5MTY5ODc1NGU1YmQwOTZhNzhiNTU1OTU", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-01T12:38:22Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-01T12:38:22Z"}, "message": "re-name stuff", "tree": {"sha": "a06319c2c61f54c18d7bf1845fdd96f23cec5906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06319c2c61f54c18d7bf1845fdd96f23cec5906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ddb6446dd2bc1591698754e5bd096a78b55595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddb6446dd2bc1591698754e5bd096a78b55595", "html_url": "https://github.com/rust-lang/rust/commit/d9ddb6446dd2bc1591698754e5bd096a78b55595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddb6446dd2bc1591698754e5bd096a78b55595/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4b0f140fe4ec77cbee3cf86520630d954981e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4b0f140fe4ec77cbee3cf86520630d954981e8", "html_url": "https://github.com/rust-lang/rust/commit/4d4b0f140fe4ec77cbee3cf86520630d954981e8"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "990efa7d09df705e2f09c083c7d29f550d12c068", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d9ddb6446dd2bc1591698754e5bd096a78b55595", "patch": "@@ -1080,7 +1080,7 @@ pub enum LocalInfo<'tcx> {\n     /// (e.g. a temporary for `foo` in `MyStruct { my_field: foo }`)\n     AggregateTemp,\n     /// A temporary created during the pass `Derefer` to avoid it's retagging\n-    Temp,\n+    DerefTemp,\n }\n \n impl<'tcx> LocalDecl<'tcx> {"}, {"sha": "d03f9235efd587e621d95e8a1ca09565e8f22585", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=d9ddb6446dd2bc1591698754e5bd096a78b55595", "patch": "@@ -78,20 +78,22 @@ impl<'tcx> MirPatch<'tcx> {\n         Location { block: bb, statement_index: offset }\n     }\n \n-    pub fn new_local_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n+    pub fn new_local_with_info(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        local_info: Option<Box<LocalInfo<'tcx>>>,\n+    ) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         let mut new_decl = LocalDecl::new(ty, span);\n-        new_decl.local_info = Some(Box::new(LocalInfo::Temp));\n+        new_decl.local_info = local_info;\n         self.new_locals.push(new_decl);\n         Local::new(index as usize)\n     }\n \n     pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n-        let index = self.next_local;\n-        self.next_local += 1;\n-        self.new_locals.push(LocalDecl::new(ty, span));\n-        Local::new(index as usize)\n+        self.new_local_with_info(ty, span, None)\n     }\n \n     pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {"}, {"sha": "a245da658b9753b3fff83e77f130cfe9b50b3a0c", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=d9ddb6446dd2bc1591698754e5bd096a78b55595", "patch": "@@ -61,7 +61,7 @@ fn may_be_reference(ty: Ty<'_>) -> bool {\n fn is_not_temp<'tcx>(local_decl: &LocalDecl<'tcx>) -> bool {\n     if let Some(local_info) = &local_decl.local_info {\n         match local_info.as_ref() {\n-            LocalInfo::Temp => return false,\n+            LocalInfo::DerefTemp => return false,\n             _ => (),\n         };\n     }"}, {"sha": "57a95a67df70c94aade44db653832f7c30677d3a", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddb6446dd2bc1591698754e5bd096a78b55595/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=d9ddb6446dd2bc1591698754e5bd096a78b55595", "patch": "@@ -33,8 +33,11 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n         for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n             if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n                 let ty = p_ref.ty(&self.local_decls, self.tcx).ty;\n-                let temp =\n-                    self.patcher.new_local_temp(ty, self.local_decls[p_ref.local].source_info.span);\n+                let temp = self.patcher.new_local_with_info(\n+                    ty,\n+                    self.local_decls[p_ref.local].source_info.span,\n+                    Some(Box::new(LocalInfo::DerefTemp)),\n+                );\n \n                 self.patcher.add_statement(loc, StatementKind::StorageLive(temp));\n "}]}