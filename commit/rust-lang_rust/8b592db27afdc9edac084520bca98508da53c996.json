{"sha": "8b592db27afdc9edac084520bca98508da53c996", "node_id": "C_kwDOAAsO6NoAKDhiNTkyZGIyN2FmZGM5ZWRhYzA4NDUyMGJjYTk4NTA4ZGE1M2M5OTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T22:00:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T01:14:28Z"}, "message": "Add `(..)` syntax for RTN", "tree": {"sha": "3a2638e8dd3656cfdb5aeed9b68e349efb2c2183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a2638e8dd3656cfdb5aeed9b68e349efb2c2183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b592db27afdc9edac084520bca98508da53c996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b592db27afdc9edac084520bca98508da53c996", "html_url": "https://github.com/rust-lang/rust/commit/8b592db27afdc9edac084520bca98508da53c996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b592db27afdc9edac084520bca98508da53c996/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104aacb49fb37265fb923e3b779de3c388abd92c", "url": "https://api.github.com/repos/rust-lang/rust/commits/104aacb49fb37265fb923e3b779de3c388abd92c", "html_url": "https://github.com/rust-lang/rust/commit/104aacb49fb37265fb923e3b779de3c388abd92c"}], "stats": {"total": 556, "additions": 355, "deletions": 201}, "files": [{"sha": "f8f639d982f6082fef58b95523eaa93d9286d849", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -167,21 +167,21 @@ pub enum GenericArgs {\n     AngleBracketed(AngleBracketedArgs),\n     /// The `(A, B)` and `C` in `Foo(A, B) -> C`.\n     Parenthesized(ParenthesizedArgs),\n+    /// Associated return type bounds, like `T: Trait<method(..): Send>`\n+    /// which applies the `Send` bound to the return-type of `method`.\n+    ReturnTypeNotation(Span),\n }\n \n impl GenericArgs {\n     pub fn is_angle_bracketed(&self) -> bool {\n         matches!(self, AngleBracketed(..))\n     }\n \n-    pub fn is_parenthesized(&self) -> bool {\n-        matches!(self, Parenthesized(..))\n-    }\n-\n     pub fn span(&self) -> Span {\n         match self {\n             AngleBracketed(data) => data.span,\n             Parenthesized(data) => data.span,\n+            ReturnTypeNotation(span) => *span,\n         }\n     }\n }\n@@ -235,15 +235,15 @@ impl AngleBracketedArg {\n     }\n }\n \n-impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {\n-    fn into(self) -> Option<P<GenericArgs>> {\n-        Some(P(GenericArgs::AngleBracketed(self)))\n+impl Into<P<GenericArgs>> for AngleBracketedArgs {\n+    fn into(self) -> P<GenericArgs> {\n+        P(GenericArgs::AngleBracketed(self))\n     }\n }\n \n-impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {\n-    fn into(self) -> Option<P<GenericArgs>> {\n-        Some(P(GenericArgs::Parenthesized(self)))\n+impl Into<P<GenericArgs>> for ParenthesizedArgs {\n+    fn into(self) -> P<GenericArgs> {\n+        P(GenericArgs::Parenthesized(self))\n     }\n }\n "}, {"sha": "514978f5569a76fe48d3234c44fa384a5bc382de", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -561,6 +561,7 @@ pub fn noop_visit_generic_args<T: MutVisitor>(generic_args: &mut GenericArgs, vi\n     match generic_args {\n         GenericArgs::AngleBracketed(data) => vis.visit_angle_bracketed_parameter_data(data),\n         GenericArgs::Parenthesized(data) => vis.visit_parenthesized_parameter_data(data),\n+        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "e5a0ad1f1e48186e5aaf553aece374d60ee18767", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -481,6 +481,7 @@ where\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_fn_ret_ty(visitor, &data.output);\n         }\n+        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "21b2a3c22fa10eb7eb53b8c2c59c073eff23bc88", "filename": "compiler/rustc_ast_lowering/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fmessages.ftl?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -144,6 +144,10 @@ ast_lowering_bad_return_type_notation_inputs =\n     argument types not allowed with return type notation\n     .suggestion = remove the input types\n \n+ast_lowering_bad_return_type_notation_needs_dots =\n+    return type notation arguments must be elided with `..`\n+    .suggestion = add `..`\n+\n ast_lowering_bad_return_type_notation_output =\n     return type not allowed with return type notation\n     .suggestion = remove the return type"}, {"sha": "f4e55619ebb189e1f38062091dbd46ba8b0af406", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -353,7 +353,13 @@ pub enum BadReturnTypeNotation {\n     #[diag(ast_lowering_bad_return_type_notation_inputs)]\n     Inputs {\n         #[primary_span]\n-        #[suggestion(code = \"()\", applicability = \"maybe-incorrect\")]\n+        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+    #[diag(ast_lowering_bad_return_type_notation_needs_dots)]\n+    NeedsDots {\n+        #[primary_span]\n+        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n         span: Span,\n     },\n     #[diag(ast_lowering_bad_return_type_notation_output)]"}, {"sha": "c5d39634c44b7fb7060dd625594c86b84aaa57bc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -66,7 +66,7 @@ use rustc_middle::{\n     span_bug,\n     ty::{ResolverAstLowering, TyCtxt},\n };\n-use rustc_session::parse::feature_err;\n+use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -987,33 +987,56 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 GenericArgs::AngleBracketed(data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n-                GenericArgs::Parenthesized(data) if self.tcx.features().return_type_notation => {\n-                    if !data.inputs.is_empty() {\n-                        self.tcx.sess.emit_err(errors::BadReturnTypeNotation::Inputs {\n-                            span: data.inputs_span,\n-                        });\n-                    } else if let FnRetTy::Ty(ty) = &data.output {\n-                        self.tcx.sess.emit_err(errors::BadReturnTypeNotation::Output {\n-                            span: data.inputs_span.shrink_to_hi().to(ty.span),\n-                        });\n-                    }\n-                    GenericArgsCtor {\n-                        args: Default::default(),\n-                        bindings: &[],\n-                        parenthesized: true,\n-                        span: data.span,\n-                    }\n-                }\n+                &GenericArgs::ReturnTypeNotation(span) => GenericArgsCtor {\n+                    args: Default::default(),\n+                    bindings: &[],\n+                    parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n+                    span,\n+                },\n                 GenericArgs::Parenthesized(data) => {\n-                    self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    // FIXME(return_type_notation): we could issue a feature error\n-                    // if the parens are empty and there's no return type.\n-                    self.lower_angle_bracketed_parameter_data(\n-                        &data.as_angle_bracketed_args(),\n-                        ParamMode::Explicit,\n-                        itctx,\n-                    )\n-                    .0\n+                    if let Some(start_char) = constraint.ident.as_str().chars().next()\n+                        && start_char.is_ascii_lowercase()\n+                    {\n+                        let mut err = if !data.inputs.is_empty() {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::Inputs {\n+                                span: data.inputs_span,\n+                            })\n+                        } else if let FnRetTy::Ty(ty) = &data.output {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::Output {\n+                                span: data.inputs_span.shrink_to_hi().to(ty.span),\n+                            })\n+                        } else {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::NeedsDots {\n+                                span: data.inputs_span,\n+                            })\n+                        };\n+                        if !self.tcx.features().return_type_notation\n+                            && self.tcx.sess.is_nightly_build()\n+                        {\n+                            add_feature_diagnostics(\n+                                &mut err,\n+                                &self.tcx.sess.parse_sess,\n+                                sym::return_type_notation,\n+                            );\n+                        }\n+                        err.emit();\n+                        GenericArgsCtor {\n+                            args: Default::default(),\n+                            bindings: &[],\n+                            parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n+                            span: data.span,\n+                        }\n+                    } else {\n+                        self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n+                        // FIXME(return_type_notation): we could issue a feature error\n+                        // if the parens are empty and there's no return type.\n+                        self.lower_angle_bracketed_parameter_data(\n+                            &data.as_angle_bracketed_args(),\n+                            ParamMode::Explicit,\n+                            itctx,\n+                        )\n+                        .0\n+                    }\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -2094,7 +2117,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let future_args = self.arena.alloc(hir::GenericArgs {\n             args: &[],\n             bindings: arena_vec![self; self.output_ty_binding(span, output_ty)],\n-            parenthesized: false,\n+            parenthesized: hir::GenericArgsParentheses::No,\n             span_ext: DUMMY_SP,\n         });\n \n@@ -2614,13 +2637,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n struct GenericArgsCtor<'hir> {\n     args: SmallVec<[hir::GenericArg<'hir>; 4]>,\n     bindings: &'hir [hir::TypeBinding<'hir>],\n-    parenthesized: bool,\n+    parenthesized: hir::GenericArgsParentheses,\n     span: Span,\n }\n \n impl<'hir> GenericArgsCtor<'hir> {\n     fn is_empty(&self) -> bool {\n-        self.args.is_empty() && self.bindings.is_empty() && !self.parenthesized\n+        self.args.is_empty()\n+            && self.bindings.is_empty()\n+            && self.parenthesized == hir::GenericArgsParentheses::No\n     }\n \n     fn into_generic_args(self, this: &LoweringContext<'_, 'hir>) -> &'hir hir::GenericArgs<'hir> {"}, {"sha": "1c47a969696d76695fbd45da7991db252339e8dc", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -13,6 +13,7 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n+use thin_vec::ThinVec;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]\n@@ -218,13 +219,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                 },\n+                &GenericArgs::ReturnTypeNotation(span) => {\n+                    self.tcx.sess.emit_err(GenericTypeWithParentheses { span, sub: None });\n+                    (\n+                        self.lower_angle_bracketed_parameter_data(\n+                            &AngleBracketedArgs { span, args: ThinVec::default() },\n+                            param_mode,\n+                            itctx,\n+                        )\n+                        .0,\n+                        false,\n+                    )\n+                }\n             }\n         } else {\n             (\n                 GenericArgsCtor {\n                     args: Default::default(),\n                     bindings: &[],\n-                    parenthesized: false,\n+                    parenthesized: hir::GenericArgsParentheses::No,\n                     span: path_span.shrink_to_hi(),\n                 },\n                 param_mode == ParamMode::Optional,\n@@ -233,7 +246,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let has_lifetimes =\n             generic_args.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)));\n-        if !generic_args.parenthesized && !has_lifetimes {\n+\n+        // FIXME(return_type_notation): Is this correct? I think so.\n+        if generic_args.parenthesized != hir::GenericArgsParentheses::ParenSugar && !has_lifetimes {\n             self.maybe_insert_elided_lifetimes_in_path(\n                 path_span,\n                 segment.id,\n@@ -328,7 +343,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             AngleBracketedArg::Constraint(c) => Some(self.lower_assoc_ty_constraint(c, itctx)),\n             AngleBracketedArg::Arg(_) => None,\n         }));\n-        let ctor = GenericArgsCtor { args, bindings, parenthesized: false, span: data.span };\n+        let ctor = GenericArgsCtor {\n+            args,\n+            bindings,\n+            parenthesized: hir::GenericArgsParentheses::No,\n+            span: data.span,\n+        };\n         (ctor, !has_non_lt_args && param_mode == ParamMode::Optional)\n     }\n \n@@ -376,7 +396,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericArgsCtor {\n                 args,\n                 bindings: arena_vec![self; binding],\n-                parenthesized: true,\n+                parenthesized: hir::GenericArgsParentheses::ParenSugar,\n                 span: data.inputs_span,\n             },\n             false,\n@@ -396,7 +416,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let gen_args = self.arena.alloc(hir::GenericArgs {\n             args,\n             bindings,\n-            parenthesized: false,\n+            parenthesized: hir::GenericArgsParentheses::No,\n             span_ext: DUMMY_SP,\n         });\n         hir::TypeBinding {"}, {"sha": "44b6c77fc4195b18e9f028a28722d94114e41430", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1075,6 +1075,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.with_impl_trait(None, |this| this.visit_ty(ty));\n                 }\n             }\n+            GenericArgs::ReturnTypeNotation(_span) => {}\n         }\n     }\n \n@@ -1387,16 +1388,19 @@ fn deny_equality_constraints(\n                                     match &mut assoc_path.segments[len].args {\n                                         Some(args) => match args.deref_mut() {\n                                             GenericArgs::Parenthesized(_) => continue,\n+                                            GenericArgs::ReturnTypeNotation(_span) => continue,\n                                             GenericArgs::AngleBracketed(args) => {\n                                                 args.args.push(arg);\n                                             }\n                                         },\n                                         empty_args => {\n-                                            *empty_args = AngleBracketedArgs {\n-                                                span: ident.span,\n-                                                args: thin_vec![arg],\n-                                            }\n-                                            .into();\n+                                            *empty_args = Some(\n+                                                AngleBracketedArgs {\n+                                                    span: ident.span,\n+                                                    args: thin_vec![arg],\n+                                                }\n+                                                .into(),\n+                                            );\n                                         }\n                                     }\n                                     err.assoc = Some(errors::AssociatedSuggestion {"}, {"sha": "de94c1bc47794e06f13c2537fcebb6376f8a1a77", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -482,13 +482,20 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n         if let AssocConstraintKind::Bound { .. } = constraint.kind {\n-            if constraint.gen_args.as_ref().map_or(false, |args| args.is_parenthesized()) {\n-                gate_feature_post!(\n-                    &self,\n-                    return_type_notation,\n-                    constraint.span,\n-                    \"return type notation is unstable\"\n+            if let Some(args) = constraint.gen_args.as_ref()\n+                && matches!(\n+                    args,\n+                    ast::GenericArgs::ReturnTypeNotation(..) | ast::GenericArgs::Parenthesized(..)\n                 )\n+            {\n+                // RTN is gated elsewhere, and parenthesized args will turn into\n+                // another error.\n+                if matches!(args, ast::GenericArgs::Parenthesized(..)) {\n+                    self.sess.delay_span_bug(\n+                        constraint.span,\n+                        \"should have emitted a parenthesized generics error\",\n+                    );\n+                }\n             } else {\n                 gate_feature_post!(\n                     &self,\n@@ -586,6 +593,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n+    gate_all!(return_type_notation, \"return type notation is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "80c451d675355564d4b42c3c95739a85d58e50d5", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -936,6 +936,10 @@ impl<'a> PrintState<'a> for State<'a> {\n                 self.word(\")\");\n                 self.print_fn_ret_ty(&data.output);\n             }\n+\n+            ast::GenericArgs::ReturnTypeNotation(_span) => {\n+                self.word(\"(..)\");\n+            }\n         }\n     }\n }"}, {"sha": "8a16143311b8f7a0497dede556f616254cf53ba3", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -36,7 +36,7 @@ impl<'a> ExtCtxt<'a> {\n         );\n         let args = if !args.is_empty() {\n             let args = args.into_iter().map(ast::AngleBracketedArg::Arg).collect();\n-            ast::AngleBracketedArgs { args, span }.into()\n+            Some(ast::AngleBracketedArgs { args, span }.into())\n         } else {\n             None\n         };"}, {"sha": "35a72f868fbcc31df0f616b1094a3d2c9ca23335", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -328,7 +328,7 @@ pub struct GenericArgs<'hir> {\n     /// Were arguments written in parenthesized form `Fn(T) -> U`?\n     /// This is required mostly for pretty-printing and diagnostics,\n     /// but also for changing lifetime elision rules to be \"function-like\".\n-    pub parenthesized: bool,\n+    pub parenthesized: GenericArgsParentheses,\n     /// The span encompassing arguments and the surrounding brackets `<>` or `()`\n     ///       Foo<A, B, AssocTy = D>           Fn(T, U, V) -> W\n     ///          ^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^\n@@ -340,11 +340,16 @@ pub struct GenericArgs<'hir> {\n \n impl<'hir> GenericArgs<'hir> {\n     pub const fn none() -> Self {\n-        Self { args: &[], bindings: &[], parenthesized: false, span_ext: DUMMY_SP }\n+        Self {\n+            args: &[],\n+            bindings: &[],\n+            parenthesized: GenericArgsParentheses::No,\n+            span_ext: DUMMY_SP,\n+        }\n     }\n \n     pub fn inputs(&self) -> &[Ty<'hir>] {\n-        if self.parenthesized {\n+        if self.parenthesized == GenericArgsParentheses::ParenSugar {\n             for arg in self.args {\n                 match arg {\n                     GenericArg::Lifetime(_) => {}\n@@ -417,6 +422,17 @@ impl<'hir> GenericArgs<'hir> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n+pub enum GenericArgsParentheses {\n+    No,\n+    /// Bounds for `feature(return_type_notation)`, like `T: Trait<method(..): Send>`,\n+    /// where the args are explicitly elided with `..`\n+    ReturnTypeNotation,\n+    /// parenthesized function-family traits, like `T: Fn(u32) -> i32`\n+    ParenSugar,\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]"}, {"sha": "672e7176fde09661d75d9fb194bf33dbff61ed84", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -55,7 +55,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let trait_def = self.tcx().trait_def(trait_def_id);\n         if !trait_def.paren_sugar {\n-            if trait_segment.args().parenthesized {\n+            if trait_segment.args().parenthesized == hir::GenericArgsParentheses::ParenSugar {\n                 // For now, require that parenthetical notation be used only with `Fn()` etc.\n                 let mut err = feature_err(\n                     &self.tcx().sess.parse_sess,\n@@ -71,7 +71,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let sess = self.tcx().sess;\n \n-        if !trait_segment.args().parenthesized {\n+        if trait_segment.args().parenthesized != hir::GenericArgsParentheses::ParenSugar {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n             let mut err = feature_err(\n                 &sess.parse_sess,\n@@ -607,11 +607,19 @@ pub fn prohibit_assoc_ty_binding(\n     span: Span,\n     segment: Option<(&hir::PathSegment<'_>, Span)>,\n ) {\n-    tcx.sess.emit_err(AssocTypeBindingNotAllowed { span, fn_trait_expansion: if let Some((segment, span)) = segment && segment.args().parenthesized {\n-        Some(ParenthesizedFnTraitExpansion { span, expanded_type: fn_trait_to_string(tcx, segment, false) })\n-    } else {\n-        None\n-    }});\n+    tcx.sess.emit_err(AssocTypeBindingNotAllowed {\n+        span,\n+        fn_trait_expansion: if let Some((segment, span)) = segment\n+            && segment.args().parenthesized == hir::GenericArgsParentheses::ParenSugar\n+        {\n+            Some(ParenthesizedFnTraitExpansion {\n+                span,\n+                expanded_type: fn_trait_to_string(tcx, segment, false),\n+            })\n+        } else {\n+            None\n+        },\n+    });\n }\n \n pub(crate) fn fn_trait_to_string("}, {"sha": "e25b07d93922ebbf5b532c53d53dfe88e6d52fe6", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1087,7 +1087,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n \n         let return_type_notation =\n-            binding.gen_args.parenthesized && tcx.features().return_type_notation;\n+            binding.gen_args.parenthesized == hir::GenericArgsParentheses::ReturnTypeNotation;\n \n         let candidate = if return_type_notation {\n             if self.trait_defines_associated_item_named("}, {"sha": "5e4f377a1e7eae72908d505fdd844d8aea6fb9ab", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1461,7 +1461,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n         depth: usize,\n         generic_args: &'tcx hir::GenericArgs<'tcx>,\n     ) {\n-        if generic_args.parenthesized {\n+        if generic_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n             self.visit_fn_like_elision(\n                 generic_args.inputs(),\n                 Some(generic_args.bindings[0].ty()),\n@@ -1653,7 +1653,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             //    `for<'a> T::Trait<'a, x(): for<'b> Other<'b>>`\n             // this is going to expand to something like:\n             //    `for<'a> for<'r, T> <T as Trait<'a>>::x::<'r, T>::{opaque#0}: for<'b> Other<'b>`.\n-            if binding.gen_args.parenthesized {\n+            if binding.gen_args.parenthesized == hir::GenericArgsParentheses::ReturnTypeNotation {\n                 let bound_vars = if let Some(type_def_id) = type_def_id\n                     && self.tcx.def_kind(type_def_id) == DefKind::Trait\n                     // FIXME(return_type_notation): We could bound supertrait methods."}, {"sha": "8f4d81ec3a935a13128d70597081a5938be46b15", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// type Map = HashMap<String>;\n     /// ```\n     fn suggest_adding_args(&self, err: &mut Diagnostic) {\n-        if self.gen_args.parenthesized {\n+        if self.gen_args.parenthesized != hir::GenericArgsParentheses::No {\n             return;\n         }\n \n@@ -962,7 +962,11 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             let msg = format!(\n                 \"remove these {}generics\",\n-                if self.gen_args.parenthesized { \"parenthetical \" } else { \"\" },\n+                if self.gen_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n+                    \"parenthetical \"\n+                } else {\n+                    \"\"\n+                },\n             );\n \n             err.span_suggestion(span, &msg, \"\", Applicability::MaybeIncorrect);"}, {"sha": "4f27c01fad2c9d2d3794f18bc2126fbf9c4529e7", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1652,61 +1652,65 @@ impl<'a> State<'a> {\n         generic_args: &hir::GenericArgs<'_>,\n         colons_before_params: bool,\n     ) {\n-        if generic_args.parenthesized {\n-            self.word(\"(\");\n-            self.commasep(Inconsistent, generic_args.inputs(), |s, ty| s.print_type(ty));\n-            self.word(\")\");\n+        match generic_args.parenthesized {\n+            hir::GenericArgsParentheses::No => {\n+                let start = if colons_before_params { \"::<\" } else { \"<\" };\n+                let empty = Cell::new(true);\n+                let start_or_comma = |this: &mut Self| {\n+                    if empty.get() {\n+                        empty.set(false);\n+                        this.word(start)\n+                    } else {\n+                        this.word_space(\",\")\n+                    }\n+                };\n+\n+                let mut nonelided_generic_args: bool = false;\n+                let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n+                    GenericArg::Lifetime(lt) if lt.is_elided() => true,\n+                    GenericArg::Lifetime(_) => {\n+                        nonelided_generic_args = true;\n+                        false\n+                    }\n+                    _ => {\n+                        nonelided_generic_args = true;\n+                        true\n+                    }\n+                });\n \n-            self.space_if_not_bol();\n-            self.word_space(\"->\");\n-            self.print_type(generic_args.bindings[0].ty());\n-        } else {\n-            let start = if colons_before_params { \"::<\" } else { \"<\" };\n-            let empty = Cell::new(true);\n-            let start_or_comma = |this: &mut Self| {\n-                if empty.get() {\n-                    empty.set(false);\n-                    this.word(start)\n-                } else {\n-                    this.word_space(\",\")\n+                if nonelided_generic_args {\n+                    start_or_comma(self);\n+                    self.commasep(Inconsistent, generic_args.args, |s, generic_arg| {\n+                        match generic_arg {\n+                            GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n+                            GenericArg::Lifetime(_) => {}\n+                            GenericArg::Type(ty) => s.print_type(ty),\n+                            GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n+                            GenericArg::Infer(_inf) => s.word(\"_\"),\n+                        }\n+                    });\n                 }\n-            };\n \n-            let mut nonelided_generic_args: bool = false;\n-            let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n-                GenericArg::Lifetime(lt) if lt.is_elided() => true,\n-                GenericArg::Lifetime(_) => {\n-                    nonelided_generic_args = true;\n-                    false\n+                for binding in generic_args.bindings {\n+                    start_or_comma(self);\n+                    self.print_type_binding(binding);\n                 }\n-                _ => {\n-                    nonelided_generic_args = true;\n-                    true\n-                }\n-            });\n-\n-            if nonelided_generic_args {\n-                start_or_comma(self);\n-                self.commasep(\n-                    Inconsistent,\n-                    generic_args.args,\n-                    |s, generic_arg| match generic_arg {\n-                        GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n-                        GenericArg::Lifetime(_) => {}\n-                        GenericArg::Type(ty) => s.print_type(ty),\n-                        GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n-                        GenericArg::Infer(_inf) => s.word(\"_\"),\n-                    },\n-                );\n-            }\n \n-            for binding in generic_args.bindings {\n-                start_or_comma(self);\n-                self.print_type_binding(binding);\n+                if !empty.get() {\n+                    self.word(\">\")\n+                }\n             }\n+            hir::GenericArgsParentheses::ParenSugar => {\n+                self.word(\"(\");\n+                self.commasep(Inconsistent, generic_args.inputs(), |s, ty| s.print_type(ty));\n+                self.word(\")\");\n \n-            if !empty.get() {\n-                self.word(\">\")\n+                self.space_if_not_bol();\n+                self.word_space(\"->\");\n+                self.print_type(generic_args.bindings[0].ty());\n+            }\n+            hir::GenericArgsParentheses::ReturnTypeNotation => {\n+                self.word(\"(..)\");\n             }\n         }\n     }"}, {"sha": "e21bbd0217bd5c849a50d4a7c6f9966c0ce56594", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -734,3 +734,7 @@ parse_unknown_start_of_token = unknown start of token: {$escaped}\n \n parse_box_syntax_removed = `box_syntax` has been removed\n     .suggestion = use `Box::new()` instead\n+\n+parse_bad_return_type_notation_output =\n+    return type not allowed with return type notation\n+    .suggestion = remove the return type"}, {"sha": "aead216b61cd6c626c6adea665c7b3232dab00d8", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -2316,3 +2316,11 @@ pub struct BoxSyntaxRemoved<'a> {\n     pub span: Span,\n     pub code: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_bad_return_type_notation_output)]\n+pub(crate) struct BadReturnTypeNotationOutput {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub span: Span,\n+}"}, {"sha": "5210b8fe69d6e4e7510171b63201f2b22dbab687", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -989,8 +989,7 @@ impl<'a> Parser<'a> {\n                     }\n                     if self.token.kind == token::OpenDelim(Delimiter::Parenthesis) {\n                         // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n-                        let args = AngleBracketedArgs { args, span }.into();\n-                        segment.args = args;\n+                        segment.args = Some(AngleBracketedArgs { args, span }.into());\n \n                         self.sess.emit_err(GenericParamsWithoutAngleBrackets {\n                             span,"}, {"sha": "f1c9f0109f82f4bafa7083ebd0ef788b2cca027c", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1,6 +1,6 @@\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, Restrictions, TokenType};\n-use crate::maybe_whole;\n+use crate::{errors, maybe_whole};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::{\n@@ -290,6 +290,25 @@ impl<'a> Parser<'a> {\n                     })?;\n                     let span = lo.to(self.prev_token.span);\n                     AngleBracketedArgs { args, span }.into()\n+                } else if self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n+                    // FIXME(return_type_notation): Could also recover `...` here.\n+                    && self.look_ahead(1, |tok| tok.kind == token::DotDot)\n+                {\n+                    let lo = self.token.span;\n+                    self.bump();\n+                    self.bump();\n+                    self.expect(&token::CloseDelim(Delimiter::Parenthesis))?;\n+                    let span = lo.to(self.prev_token.span);\n+                    self.sess.gated_spans.gate(sym::return_type_notation, span);\n+\n+                    if self.eat_noexpect(&token::RArrow) {\n+                        let lo = self.prev_token.span;\n+                        let ty = self.parse_ty()?;\n+                        self.sess\n+                            .emit_err(errors::BadReturnTypeNotationOutput { span: lo.to(ty.span) });\n+                    }\n+\n+                    P(GenericArgs::ReturnTypeNotation(span))\n                 } else {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n@@ -300,7 +319,7 @@ impl<'a> Parser<'a> {\n                     ParenthesizedArgs { span, inputs, inputs_span, output }.into()\n                 };\n \n-                PathSegment { ident, args, id: ast::DUMMY_NODE_ID }\n+                PathSegment { ident, args: Some(args), id: ast::DUMMY_NODE_ID }\n             } else {\n                 // Generic arguments are not found.\n                 PathSegment::from_ident(ident)\n@@ -550,8 +569,10 @@ impl<'a> Parser<'a> {\n \n                     // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n                     if let AssocConstraintKind::Bound { .. } = kind {\n-                        if gen_args.as_ref().map_or(false, |args| args.is_parenthesized()) {\n-                            self.sess.gated_spans.gate(sym::return_type_notation, span);\n+                        if gen_args.as_ref().map_or(false, |args| {\n+                            matches!(args, GenericArgs::ReturnTypeNotation(..))\n+                        }) {\n+                            // This is already gated in `parse_path_segment`\n                         } else {\n                             self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n                         }"}, {"sha": "400c8dbe9bc6b83d85a307cb78dc0acf655dc227", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1059,8 +1059,11 @@ impl<'a> Parser<'a> {\n             output,\n         }\n         .into();\n-        *fn_path_segment =\n-            ast::PathSegment { ident: fn_path_segment.ident, args, id: ast::DUMMY_NODE_ID };\n+        *fn_path_segment = ast::PathSegment {\n+            ident: fn_path_segment.ident,\n+            args: Some(args),\n+            id: ast::DUMMY_NODE_ID,\n+        };\n \n         // Convert parsed `<'a>` in `Fn<'a>` into `for<'a>`.\n         let mut generic_params = lifetimes"}, {"sha": "ce44f709f3b7c09c4b2ed87e681de0816789c371", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -666,7 +666,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n-            [AngleBracketed, Parenthesized]\n+            [AngleBracketed, Parenthesized, ReturnTypeNotation]\n         );\n         ast_visit::walk_generic_args(self, g)\n     }"}, {"sha": "f66bad1d429a9cdd4120eb0c8d8cec4615e0c82e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1110,6 +1110,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                         }\n                     }\n                 }\n+                GenericArgs::ReturnTypeNotation(_span) => {}\n             }\n         }\n     }"}, {"sha": "99fad22d4a12d9d1d8c05141e1a7ae6e0b2022b8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -312,6 +312,7 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n                     (args.span, found_lifetimes)\n                 }\n                 GenericArgs::Parenthesized(args) => (args.span, true),\n+                GenericArgs::ReturnTypeNotation(span) => (*span, false),\n             }\n         } else {\n             (DUMMY_SP, false)"}, {"sha": "a25210d265a1700ce0d1dd0dd49b2c9af158b808", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -2013,7 +2013,8 @@ fn clean_generic_args<'tcx>(\n     generic_args: &hir::GenericArgs<'tcx>,\n     cx: &mut DocContext<'tcx>,\n ) -> GenericArgs {\n-    if generic_args.parenthesized {\n+    // FIXME(return_type_notation): Fix RTN parens rendering\n+    if generic_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n         let output = clean_ty(generic_args.bindings[0].ty(), cx);\n         let output = if output != Type::Tuple(Vec::new()) { Some(Box::new(output)) } else { None };\n         let inputs ="}, {"sha": "c984a8286eb88ab1bc7ab3bc0a766c8499a09b09", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n-            if !params.parenthesized;\n+            if params.parenthesized == GenericArgsParentheses::No;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,"}, {"sha": "acdf54710691e5dbab98131cc679421f8ead050e", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                 if let QPath::Resolved(None, path) = *qpath;\n                 if let [ref bx] = *path.segments;\n                 if let Some(params) = bx.args;\n-                if !params.parenthesized;\n+                if params.parenthesized == hir::GenericArgsParentheses::No;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n                     _ => None,"}, {"sha": "a30748db88fc94cce03a884e1dff2e43821dcd98", "filename": "src/tools/clippy/clippy_lints/src/types/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::last_path_segment;\n use if_chain::if_chain;\n-use rustc_hir::{GenericArg, QPath, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(params) = last.args;\n-        if !params.parenthesized;\n+        if params.parenthesized == GenericArgsParentheses::No;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,"}, {"sha": "7dfb0956077e4e7b6b0152263023f48cf2eef3fd", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericArgsParentheses, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n     ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n@@ -100,7 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n-                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+                params.parenthesized  == GenericArgsParentheses::No\n+                    && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check"}, {"sha": "3ee7147828bd5f9010fc3056d92fc39a32987f4f", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -401,14 +401,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n-        if !(left.parenthesized || right.parenthesized) {\n+        if left.parenthesized == right.parenthesized {\n             over(left.args, right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(left.bindings, right.bindings, |l, r| self.eq_type_binding(l, r))\n-        } else if left.parenthesized && right.parenthesized {\n-            over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))\n-                && both(&Some(&left.bindings[0].ty()), &Some(&right.bindings[0].ty()), |l, r| {\n-                    self.eq_ty(l, r)\n-                })\n         } else {\n             false\n         }"}, {"sha": "75aa25906aa0fa2c28ba9d9f97c3cf9d97efe42d", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -11,7 +11,10 @@ trait Trait {\n fn foo<T: Trait<method(i32): Send>>() {}\n //~^ ERROR argument types not allowed with return type notation\n \n-fn bar<T: Trait<method() -> (): Send>>() {}\n+fn bar<T: Trait<method(..) -> (): Send>>() {}\n //~^ ERROR return type not allowed with return type notation\n \n+fn baz<T: Trait<method(): Send>>() {}\n+//~^ ERROR return type notation arguments must be elided with `..`\n+\n fn main() {}"}, {"sha": "5b075a0fa2921c47edf4b40e6ede1a73bbdf1eb7", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1,3 +1,9 @@\n+error: return type not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:14:28\n+   |\n+LL | fn bar<T: Trait<method(..) -> (): Send>>() {}\n+   |                            ^^^^^ help: remove the return type\n+\n warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bad-inputs-and-output.rs:3:12\n    |\n@@ -19,13 +25,13 @@ error: argument types not allowed with return type notation\n   --> $DIR/bad-inputs-and-output.rs:11:23\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n-   |                       ^^^^^ help: remove the input types: `()`\n+   |                       ^^^^^ help: remove the input types: `(..)`\n \n-error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:14:25\n+error: return type notation arguments must be elided with `..`\n+  --> $DIR/bad-inputs-and-output.rs:17:23\n    |\n-LL | fn bar<T: Trait<method() -> (): Send>>() {}\n-   |                         ^^^^^^ help: remove the return type\n+LL | fn baz<T: Trait<method(): Send>>() {}\n+   |                       ^^ help: add `..`: `(..)`\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to 3 previous errors; 2 warnings emitted\n "}, {"sha": "75d1dc745d1d56bc8ef6374444c693f2cbf6df3b", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -18,7 +18,7 @@ async fn foo<T: Foo>() -> Result<(), ()> {\n fn is_send(_: impl Send) {}\n \n fn test<\n-    #[cfg(with)] T: Foo<method(): Send>,\n+    #[cfg(with)] T: Foo<method(..): Send>,\n     #[cfg(without)] T: Foo,\n >() {\n     is_send(foo::<T>());"}, {"sha": "c8fc980974ed707a6182675237092d2529bf8488", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -10,7 +10,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n+fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n //~^ ERROR return type notation is not allowed to use type equality\n \n fn main() {}"}, {"sha": "cd50ff3869460890f18512bf924f66d5a72ac9d0", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: return type notation is not allowed to use type equality\n   --> $DIR/equality.rs:13:18\n    |\n-LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "1263cae44775e97dde456204999de731d3bffc5a", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -8,7 +8,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn bar<T: Trait<methid(): Send>>() {}\n+fn bar<T: Trait<methid(..): Send>>() {}\n //~^ ERROR cannot find associated function `methid` in trait `Trait`\n \n fn main() {}"}, {"sha": "93111b5c36b13f399f0b3849949e4e4019b9e911", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: cannot find associated function `methid` in trait `Trait`\n   --> $DIR/missing.rs:11:17\n    |\n-LL | fn bar<T: Trait<methid(): Send>>() {}\n-   |                 ^^^^^^^^^^^^^^\n+LL | fn bar<T: Trait<methid(..): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "d283c6eab370d6b2d93bc52ada5d9c3921bc5b43", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -5,7 +5,7 @@ trait Trait {\n     fn method() {}\n }\n \n-fn test<T: Trait<method(): Send>>() {}\n+fn test<T: Trait<method(..): Send>>() {}\n //~^ ERROR  return type notation used on function that is not `async` and does not return `impl Trait`\n \n fn main() {}"}, {"sha": "38c498bc2fbf91c98d2576611549608f4b5e7ecb", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -13,8 +13,8 @@ error: return type notation used on function that is not `async` and does not re\n LL |     fn method() {}\n    |     ----------- this function must be `async` or return `impl Trait`\n ...\n-LL | fn test<T: Trait<method(): Send>>() {}\n-   |                  ^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method(..): Send>>() {}\n+   |                  ^^^^^^^^^^^^^^^^\n    |\n    = note: function returns `()`, which is not compatible with associated type return bounds\n "}, {"sha": "85728f8e1ad4da02483be4987e14bc14fa7ce307", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+   |\n+LL | fn foo<T: Trait<m(..): Send>>() {}\n+   |                  ^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "85728f8e1ad4da02483be4987e14bc14fa7ce307", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+   |\n+LL | fn foo<T: Trait<m(..): Send>>() {}\n+   |                  ^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b75feb130a63e229f83a7ffad06fdbd64a8d1483", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b592db27afdc9edac084520bca98508da53c996/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=8b592db27afdc9edac084520bca98508da53c996", "patch": "@@ -1,4 +1,5 @@\n // edition: 2021\n+// revisions: cfg no\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete\n@@ -7,9 +8,8 @@ trait Trait {\n     async fn m();\n }\n \n-fn foo<T: Trait<m(): Send>>() {}\n-//~^ ERROR parenthesized generic arguments cannot be used in associated type constraints\n-//~| ERROR associated type `m` not found for `Trait`\n-//~| ERROR return type notation is unstable\n+#[cfg(cfg)]\n+fn foo<T: Trait<m(..): Send>>() {}\n+//~^ ERROR return type notation is experimental\n \n fn main() {}"}, {"sha": "a9373482e5ac4862767ffc760f28cd9d1bea17ba", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104aacb49fb37265fb923e3b779de3c388abd92c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr?ref=104aacb49fb37265fb923e3b779de3c388abd92c", "patch": "@@ -1,36 +0,0 @@\n-error[E0658]: return type notation is unstable\n-  --> $DIR/feature-gate-return_type_notation.rs:10:17\n-   |\n-LL | fn foo<T: Trait<m(): Send>>() {}\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n-   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n-\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:3:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/feature-gate-return_type_notation.rs:10:17\n-   |\n-LL | fn foo<T: Trait<m(): Send>>() {}\n-   |                 ^--\n-   |                  |\n-   |                  help: remove these parentheses\n-\n-error[E0220]: associated type `m` not found for `Trait`\n-  --> $DIR/feature-gate-return_type_notation.rs:10:17\n-   |\n-LL | fn foo<T: Trait<m(): Send>>() {}\n-   |                 ^ associated type `m` not found\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0220, E0658.\n-For more information about an error, try `rustc --explain E0220`."}]}