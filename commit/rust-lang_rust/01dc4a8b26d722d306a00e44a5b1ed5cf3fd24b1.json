{"sha": "01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZGM0YThiMjZkNzIyZDMwNmEwMGU0NGE1YjFlZDVjZjNmZDI0YjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-07T00:03:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-08T02:56:41Z"}, "message": "core: Add priv::weaken_task", "tree": {"sha": "7bebe6c918cd108943cd8d07b0203b25256d063f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bebe6c918cd108943cd8d07b0203b25256d063f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "html_url": "https://github.com/rust-lang/rust/commit/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6e748a1d9795f59f9ca954dbf1ad82d238c3990", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e748a1d9795f59f9ca954dbf1ad82d238c3990", "html_url": "https://github.com/rust-lang/rust/commit/a6e748a1d9795f59f9ca954dbf1ad82d238c3990"}], "stats": {"total": 218, "additions": 199, "deletions": 19}, "files": [{"sha": "1a86ccf367151fbfc2d7d41015bec3493bae43f1", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -37,8 +37,7 @@ enum rust_port {}\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn rust_port_id_send<T: send>(t: *sys::type_desc,\n-                                  target_port: port_id,\n+    fn rust_port_id_send<T: send>(target_port: port_id,\n                                   data: T) -> libc::uintptr_t;\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n@@ -114,7 +113,7 @@ whereupon the caller loses access to it.\n \"]\n fn send<T: send>(ch: chan<T>, -data: T) {\n     let chan_t(p) = ch;\n-    let res = rustrt::rust_port_id_send(sys::get_type_desc::<T>(), p, data);\n+    let res = rustrt::rust_port_id_send(p, data);\n     if res != 0u unsafe {\n         // Data sent successfully\n         unsafe::forget(data);"}, {"sha": "b8e0848dc8753c380a40db22450b4635b6923dac", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -4,10 +4,14 @@ export chan_from_global_ptr;\n \n import compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n \n+type rust_port_id = uint;\n+\n native mod rustrt {\n     fn rust_compare_and_swap_ptr(address: *libc::uintptr_t,\n                                  oldval: libc::uintptr_t,\n                                  newval: libc::uintptr_t) -> bool;\n+    fn rust_task_weaken(ch: rust_port_id);\n+    fn rust_task_unweaken(ch: rust_port_id);\n }\n \n type global_ptr<T: send> = *libc::uintptr_t;\n@@ -143,3 +147,83 @@ fn test_from_global_chan2() unsafe {\n         assert winners == 1u;\n     }\n }\n+\n+#[doc = \"\n+Convert the current task to a 'weak' task temporarily\n+\n+As a weak task it will not be counted towards the runtime's set\n+of live tasks. When there are no more outstanding live (non-weak) tasks\n+the runtime will send an exit message on the provided channel.\n+\n+This function is super-unsafe. Do not use.\n+\n+# Safety notes\n+\n+* Weak tasks must either die on their own or exit upon receipt of\n+  the exit message. Failure to do so will cause the runtime to never\n+  exit\n+* Tasks must not call `weaken_task` multiple times. This will\n+  break the kernel's accounting of live tasks.\n+* Weak tasks must not be supervised. A supervised task keeps\n+  a reference to its parent, so the parent will not die.\n+\"]\n+unsafe fn weaken_task(f: fn(comm::port<()>)) unsafe {\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+    rustrt::rust_task_weaken(unsafe::reinterpret_cast(ch));\n+    let _unweaken = unweaken(ch);\n+    f(po);\n+\n+    resource unweaken(ch: comm::chan<()>) unsafe {\n+        rustrt::rust_task_unweaken(unsafe::reinterpret_cast(ch));\n+    }\n+}\n+\n+#[test]\n+fn test_weaken_task_then_unweaken() unsafe {\n+    task::try {||\n+        weaken_task {|_po|\n+        }\n+    };\n+}\n+\n+#[test]\n+fn test_weaken_task_wait() unsafe {\n+    let builder = task::builder();\n+    task::unsupervise(builder);\n+    task::run(builder) {||\n+        weaken_task {|po|\n+            comm::recv(po);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_weaken_task_stress() unsafe {\n+    // Create a bunch of weak tasks\n+    iter::repeat(100u) {||\n+        task::spawn {||\n+            weaken_task {|_po|\n+            }\n+        }\n+        let builder = task::builder();\n+        task::unsupervise(builder);\n+        task::run(builder) {||\n+            weaken_task {|po|\n+                // Wait for it to tell us to die\n+                comm::recv(po);\n+            }\n+        }\n+    }\n+}\n+\n+#[test]\n+#[ignore(cfg(target_os = \"win32\"))]\n+fn test_weaken_task_fail() unsafe {\n+    let res = task::try {||\n+        weaken_task {|_po|\n+            fail;\n+        }\n+    };\n+    assert result::is_failure(res);\n+}\n\\ No newline at end of file"}, {"sha": "f2714c4d7c332acc9db0ba6becf34bc1d623ec74", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -669,22 +669,9 @@ get_port_id(rust_port *port) {\n }\n \n extern \"C\" CDECL uintptr_t\n-rust_port_id_send(type_desc *t, rust_port_id target_port_id, void *sptr) {\n-    bool sent = false;\n+rust_port_id_send(rust_port_id target_port_id, void *sptr) {\n     rust_task *task = rust_get_current_task();\n-\n-    LOG(task, comm, \"rust_port_id*_send port: 0x%\" PRIxPTR,\n-        (uintptr_t) target_port_id);\n-\n-    rust_port *port = task->kernel->get_port_by_id(target_port_id);\n-    if(port) {\n-        port->send(sptr);\n-        port->deref();\n-        sent = true;\n-    } else {\n-        LOG(task, comm, \"didn't get the port\");\n-    }\n-    return (uintptr_t)sent;\n+    return (uintptr_t)task->kernel->send_to_port(target_port_id, sptr);\n }\n \n // This is called by an intrinsic on the Rust stack and must run\n@@ -782,6 +769,18 @@ rust_compare_and_swap_ptr(intptr_t *address,\n     return sync::compare_and_swap(address, oldval, newval);\n }\n \n+extern \"C\" CDECL void\n+rust_task_weaken(rust_port_id chan) {\n+    rust_task *task = rust_get_current_task();\n+    task->kernel->weaken_task(chan);\n+}\n+\n+extern \"C\" CDECL void\n+rust_task_unweaken(rust_port_id chan) {\n+    rust_task *task = rust_get_current_task();\n+    task->kernel->unweaken_task(chan);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "21422646f0d2d071a4fbaea703242310ebf5d6f6", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -1,11 +1,11 @@\n \n \n-\n #include \"rust_kernel.h\"\n #include \"rust_port.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n #include \"rust_sched_launcher.h\"\n+#include <algorithm>\n \n #define KLOG_(...)                              \\\n     KLOG(this, kern, __VA_ARGS__)\n@@ -21,6 +21,7 @@ rust_kernel::rust_kernel(rust_env *env) :\n     max_sched_id(0),\n     sched_reaper(this),\n     osmain_driver(NULL),\n+    non_weak_tasks(0),\n     env(env)\n {\n     // Create the single threaded scheduler that will run on the platform's\n@@ -286,6 +287,84 @@ rust_kernel::set_exit_status(int code) {\n     }\n }\n \n+void\n+rust_kernel::register_task() {\n+    KLOG_(\"Registering task\");\n+    uintptr_t new_non_weak_tasks = sync::increment(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+}\n+\n+void\n+rust_kernel::unregister_task() {\n+    KLOG_(\"Unregistering task\");\n+    uintptr_t new_non_weak_tasks = sync::decrement(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+    if (new_non_weak_tasks == 0) {\n+        end_weak_tasks();\n+    }\n+}\n+\n+void\n+rust_kernel::weaken_task(rust_port_id chan) {\n+    {\n+        scoped_lock with(weak_task_lock);\n+        KLOG_(\"Weakening task with channel %\" PRIdPTR, chan);\n+        weak_task_chans.push_back(chan);\n+    }\n+    uintptr_t new_non_weak_tasks = sync::decrement(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+    if (new_non_weak_tasks == 0) {\n+        end_weak_tasks();\n+    }\n+}\n+\n+void\n+rust_kernel::unweaken_task(rust_port_id chan) {\n+    uintptr_t new_non_weak_tasks = sync::increment(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+    {\n+        scoped_lock with(weak_task_lock);\n+        KLOG_(\"Unweakening task with channel %\" PRIdPTR, chan);\n+        std::vector<rust_port_id>::iterator iter =\n+            std::find(weak_task_chans.begin(), weak_task_chans.end(), chan);\n+        if (iter != weak_task_chans.end()) {\n+            weak_task_chans.erase(iter);\n+        }\n+    }\n+}\n+\n+void\n+rust_kernel::end_weak_tasks() {\n+    std::vector<rust_port_id> chancopies;\n+    {\n+        //scoped_lock with(weak_task_lock);\n+        chancopies = weak_task_chans;\n+        weak_task_chans.clear();\n+    }\n+    while (!chancopies.empty()) {\n+        rust_port_id chan = chancopies.back();\n+        chancopies.pop_back();\n+        KLOG_(\"Notifying weak task \" PRIdPTR, chan);\n+        uintptr_t token = 0;\n+        send_to_port(chan, &token);\n+    }\n+}\n+\n+bool\n+rust_kernel::send_to_port(rust_port_id chan, void *sptr) {\n+    KLOG_(\"rust_port_id*_send port: 0x%\" PRIxPTR, (uintptr_t) chan);\n+\n+    rust_port *port = get_port_by_id(chan);\n+    if(port) {\n+        port->send(sptr);\n+        port->deref();\n+        return true;\n+    } else {\n+        KLOG_(\"didn't get the port\");\n+        return false;\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1ccd423928d9a33264fab27695bd683264ead154", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -63,7 +63,15 @@ class rust_kernel {\n     // on the main thread\n     rust_sched_driver *osmain_driver;\n \n+    // An atomically updated count of the live, 'non-weak' tasks\n+    uintptr_t non_weak_tasks;\n+    // Protects weak_task_chans\n+    lock_and_signal weak_task_lock;\n+    // A list of weak tasks that need to be told when to exit\n+    std::vector<rust_port_id> weak_task_chans;\n+\n     rust_scheduler* get_scheduler_by_id_nolock(rust_sched_id id);\n+    void end_weak_tasks();\n \n public:\n     struct rust_env *env;\n@@ -102,6 +110,13 @@ class rust_kernel {\n     void set_exit_status(int code);\n \n     rust_sched_id osmain_sched_id() { return osmain_scheduler; }\n+\n+    void register_task();\n+    void unregister_task();\n+    void weaken_task(rust_port_id chan);\n+    void unweaken_task(rust_port_id chan);\n+\n+    bool send_to_port(rust_port_id chan, void *sptr);\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "1f0b16a1d58d9520b7088ad2e3301109ef91b118", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -92,6 +92,7 @@ rust_scheduler::create_task(rust_task *spawner, const char *name) {\n         if (cur_thread >= num_threads)\n             cur_thread = 0;\n     }\n+    kernel->register_task();\n     rust_sched_launcher *thread = threads[thread_no];\n     return thread->get_loop()->create_task(spawner, name);\n }\n@@ -106,6 +107,7 @@ rust_scheduler::release_task() {\n             need_exit = true;\n         }\n     }\n+    kernel->unregister_task();\n     if (need_exit) {\n         exit();\n     }"}, {"sha": "171718b64f23be6e531f809d5ba9a6cdac85df54", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=01dc4a8b26d722d306a00e44a5b1ed5cf3fd24b1", "patch": "@@ -54,6 +54,8 @@ rust_task_yield\n rust_task_is_unwinding\n rust_get_task\n rust_task_config_notify\n+rust_task_weaken\n+rust_task_unweaken\n sched_threads\n shape_log_str\n start_task"}]}