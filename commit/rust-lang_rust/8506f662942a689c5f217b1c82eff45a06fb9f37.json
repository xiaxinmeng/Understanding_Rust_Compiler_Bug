{"sha": "8506f662942a689c5f217b1c82eff45a06fb9f37", "node_id": "C_kwDOAAsO6NoAKDg1MDZmNjYyOTQyYTY4OWM1ZjIxN2IxYzgyZWZmNDVhMDZmYjlmMzc", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-17T15:36:13Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-11-17T15:36:13Z"}, "message": "Minor simplification to `manual_map`", "tree": {"sha": "b32ebdb6d4cc91fe4c519c074d9399c0d8236a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32ebdb6d4cc91fe4c519c074d9399c0d8236a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8506f662942a689c5f217b1c82eff45a06fb9f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8506f662942a689c5f217b1c82eff45a06fb9f37", "html_url": "https://github.com/rust-lang/rust/commit/8506f662942a689c5f217b1c82eff45a06fb9f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8506f662942a689c5f217b1c82eff45a06fb9f37/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a263d4693a3108cb70ec567e9618f02d2d332b", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a263d4693a3108cb70ec567e9618f02d2d332b", "html_url": "https://github.com/rust-lang/rust/commit/80a263d4693a3108cb70ec567e9618f02d2d332b"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "4d8ad566e6b1d84f6131560c29ead691ec55b99b", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8506f662942a689c5f217b1c82eff45a06fb9f37/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8506f662942a689c5f217b1c82eff45a06fb9f37/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=8506f662942a689c5f217b1c82eff45a06fb9f37", "patch": "@@ -179,37 +179,22 @@ impl LateLintPass<'_> for ManualMap {\n                     } else {\n                         \"\"\n                     };\n+                    let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n                     if some_expr.needs_unsafe_block {\n-                        format!(\n-                            \"|{}{}| unsafe {{ {} }}\",\n-                            annotation,\n-                            some_binding,\n-                            snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0\n-                        )\n+                        format!(\"|{}{}| unsafe {{ {} }}\", annotation, some_binding, expr_snip)\n                     } else {\n-                        format!(\n-                            \"|{}{}| {}\",\n-                            annotation,\n-                            some_binding,\n-                            snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0\n-                        )\n+                        format!(\"|{}{}| {}\", annotation, some_binding, expr_snip)\n                     }\n                 }\n             }\n         } else if !is_wild_none && explicit_ref.is_none() {\n             // TODO: handle explicit reference annotations.\n+            let pat_snip = snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0;\n+            let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n             if some_expr.needs_unsafe_block {\n-                format!(\n-                    \"|{}| unsafe {{ {} }}\",\n-                    snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0,\n-                    snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0\n-                )\n+                format!(\"|{}| unsafe {{ {} }}\", pat_snip, expr_snip)\n             } else {\n-                format!(\n-                    \"|{}| {}\",\n-                    snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0,\n-                    snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0\n-                )\n+                format!(\"|{}| {}\", pat_snip, expr_snip)\n             }\n         } else {\n             // Refutable bindings and mixed reference annotations can't be handled by `map`."}]}