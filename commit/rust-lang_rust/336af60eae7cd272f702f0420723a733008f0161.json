{"sha": "336af60eae7cd272f702f0420723a733008f0161", "node_id": "C_kwDOAAsO6NoAKDMzNmFmNjBlYWU3Y2QyNzJmNzAyZjA0MjA3MjNhNzMzMDA4ZjAxNjE", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-04-29T04:50:27Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:51:42Z"}, "message": "write to a temporary file in Decodable for EncodedMetadata", "tree": {"sha": "c80653cdddf9f3c06327ba3397e463224c7fe428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80653cdddf9f3c06327ba3397e463224c7fe428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336af60eae7cd272f702f0420723a733008f0161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336af60eae7cd272f702f0420723a733008f0161", "html_url": "https://github.com/rust-lang/rust/commit/336af60eae7cd272f702f0420723a733008f0161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336af60eae7cd272f702f0420723a733008f0161/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cfa7caac9bba5b83995040ebf313559e4e2186c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfa7caac9bba5b83995040ebf313559e4e2186c", "html_url": "https://github.com/rust-lang/rust/commit/8cfa7caac9bba5b83995040ebf313559e4e2186c"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "f63734384910f3c289caf2dcbc225ac8bc505639", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/336af60eae7cd272f702f0420723a733008f0161/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336af60eae7cd272f702f0420723a733008f0161/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=336af60eae7cd272f702f0420723a733008f0161", "patch": "@@ -80,7 +80,7 @@ pub fn encode_and_write_metadata(\n     let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n \n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n-    let metadata_filename = if need_metadata_file {\n+    let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n         if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n@@ -90,14 +90,14 @@ pub fn encode_and_write_metadata(\n                 .span_diagnostic\n                 .emit_artifact_notification(&out_filename, \"metadata\");\n         }\n-        out_filename\n+        (out_filename, None)\n     } else {\n-        metadata_filename\n+        (metadata_filename, Some(metadata_tmpdir))\n     };\n-    let file = std::fs::File::open(metadata_filename).unwrap();\n-    let metadata = EncodedMetadata::from_file(file).unwrap_or_else(|e| {\n-        tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n-    });\n+    let metadata =\n+        EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n+            tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n+        });\n \n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n "}, {"sha": "68da815dc30659d9b5934c022b56e188e793c6f6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/336af60eae7cd272f702f0420723a733008f0161/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336af60eae7cd272f702f0420723a733008f0161/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=336af60eae7cd272f702f0420723a733008f0161", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{\n@@ -39,9 +40,11 @@ use rustc_span::{\n use rustc_target::abi::VariantIdx;\n use std::borrow::Borrow;\n use std::hash::Hash;\n+use std::io::Write;\n use std::iter;\n use std::num::NonZeroUsize;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n+use tempfile::Builder as TempFileBuilder;\n use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n@@ -2138,25 +2141,25 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n \n pub struct EncodedMetadata {\n     mmap: Option<Mmap>,\n-    decoded: Vec<u8>,\n+    // We need to carry MaybeTempDir to avoid deleting the temporary\n+    // directory while accessing the Mmap.\n+    _temp_dir: Option<MaybeTempDir>,\n }\n \n impl EncodedMetadata {\n     #[inline]\n-    pub fn from_file(file: std::fs::File) -> std::io::Result<Self> {\n+    pub fn from_path(path: PathBuf, temp_dir: Option<MaybeTempDir>) -> std::io::Result<Self> {\n+        let file = std::fs::File::open(&path)?;\n         let file_metadata = file.metadata()?;\n         if file_metadata.len() == 0 {\n-            return Ok(Self { mmap: None, decoded: Vec::new() });\n+            return Ok(Self { mmap: None, _temp_dir: temp_dir });\n         }\n         let mmap = unsafe { Some(Mmap::map(file)?) };\n-        Ok(Self { mmap, decoded: Vec::new() })\n+        Ok(Self { mmap, _temp_dir: temp_dir })\n     }\n \n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n-        if !self.decoded.is_empty() {\n-            return &self.decoded;\n-        }\n         self.mmap.as_ref().map(|mmap| mmap.as_ref()).unwrap_or_default()\n     }\n }\n@@ -2170,9 +2173,19 @@ impl<S: Encoder> Encodable<S> for EncodedMetadata {\n \n impl<D: Decoder> Decodable<D> for EncodedMetadata {\n     fn decode(d: &mut D) -> Self {\n-        // FIXME: Write decorded data to a file and map to Mmap.\n-        let decoded = Decodable::decode(d);\n-        EncodedMetadata { mmap: None, decoded }\n+        let temp_dir = TempFileBuilder::new().prefix(\"decoded\").tempdir().unwrap();\n+        let temp_dir = MaybeTempDir::new(temp_dir, false);\n+        let filename = temp_dir.as_ref().join(\"decoded\");\n+        let file = std::fs::File::create(&filename).unwrap();\n+        let mut file = std::io::BufWriter::new(file);\n+\n+        let len = d.read_usize();\n+        for _ in 0..len {\n+            file.write(&[d.read_u8()]).unwrap();\n+        }\n+        file.flush().unwrap();\n+\n+        Self::from_path(filename, Some(temp_dir)).unwrap()\n     }\n }\n \n@@ -2269,5 +2282,5 @@ pub fn provide(providers: &mut Providers) {\n         },\n \n         ..*providers\n-    };\n+    }\n }"}]}