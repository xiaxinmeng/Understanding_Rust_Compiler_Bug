{"sha": "d17eb78cf836610d8571806744785f1cbcbb6481", "node_id": "C_kwDOAAsO6NoAKGQxN2ViNzhjZjgzNjYxMGQ4NTcxODA2NzQ0Nzg1ZjFjYmNiYjY0ODE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-28T17:58:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-28T17:58:27Z"}, "message": "Separate hir_owner query into two queries to avoid using extensive data on incr comp most of the time", "tree": {"sha": "f49c33ed8338e4da1711facb101e73b565ed9311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f49c33ed8338e4da1711facb101e73b565ed9311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17eb78cf836610d8571806744785f1cbcbb6481", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmH0LsMACgkQgTGiTgx5\n769JzQ/9GpcVEJ3pRFZ61LyKlOTJzHlUAcKArJvCXvtjduYl7sM9bCagcU9bizE/\ntwUTP8IR03qJyo/n/n7BH8HjeYF6dVyrPfnfA4VU1t6mMjmsWBpZEtUkq6uj17ZI\n+J2RP6z1qMu1H1PH1hmhFq7B9Gvnymn0mJYYaCAlDU9Lsa3caHSZDme3h6VMT/yR\n9F/DzC31NoTqUAhX+dsiVaSNCP+tXWuaOBq50vH6mpv4IGVRYWKuNlb0q/8ifJYe\nBz2CHqxCBny9cGh8U4Yx7wnpvNhtF4It6x2fDJNj6RrRc/lpXenrh0swJ/xHnCLS\np/5yFCZhgi2KU5IusLv+1St6R8GGH7aFpmDWnmnYSXzrWxEuSPUVoIuuJwgPQSgd\nh/JHS08J/l188V85WbloxOXIhmEGL3DvCAAaZeILHwmm3DbxvahDGtCO4O8TqEcw\nCFXq4MUsR8d9xB7jCs7rU/Z6ORKXIXludm9Hhp6MGQjWHlqd8UQ/e8Ad9eN/in88\nX8YWKFQIDz/lBxrXDk5UTgMthL8rJ1YgJ29Abjr1UN7xWwiN15WZvtBizepmEt1l\nL6OkwhO3URQRIc0v0PwpJQ0Oz1JEmoXgrq58esYPnLOPkWePCeW186i34Zshaita\n0C1GKZxtm/ouEdhqcn8ID3k5rLAlmqH6i2slimulE1ykSn5dJ1Y=\n=3NgC\n-----END PGP SIGNATURE-----", "payload": "tree f49c33ed8338e4da1711facb101e73b565ed9311\nparent a0bcce4884683cd3cb968f6cf6dd0d7720e9a6db\nauthor Santiago Pastorino <spastorino@gmail.com> 1643392707 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1643392707 -0300\n\nSeparate hir_owner query into two queries to avoid using extensive data on incr comp most of the time\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17eb78cf836610d8571806744785f1cbcbb6481", "html_url": "https://github.com/rust-lang/rust/commit/d17eb78cf836610d8571806744785f1cbcbb6481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17eb78cf836610d8571806744785f1cbcbb6481/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0bcce4884683cd3cb968f6cf6dd0d7720e9a6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0bcce4884683cd3cb968f6cf6dd0d7720e9a6db", "html_url": "https://github.com/rust-lang/rust/commit/a0bcce4884683cd3cb968f6cf6dd0d7720e9a6db"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "a83f027595dcefe06be341820216f379d19526c8", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d17eb78cf836610d8571806744785f1cbcbb6481", "patch": "@@ -123,7 +123,7 @@ impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n     fn next(&mut self) -> Option<Self::Item> {\n         if self.current_id.local_id.index() != 0 {\n             self.current_id.local_id = ItemLocalId::new(0);\n-            if let MaybeOwner::Owner(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n+            if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n                 return Some((self.current_id.owner, node.node));\n             }\n         }\n@@ -141,7 +141,7 @@ impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n             self.current_id = HirId::make_owner(parent_id);\n \n             // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.\n-            if let MaybeOwner::Owner(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n+            if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n                 return Some((self.current_id.owner, node.node));\n             }\n         }\n@@ -155,7 +155,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn root_module(&self) -> &'hir Mod<'hir> {\n         match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {\n-            MaybeOwner::Owner(OwnerNode::Crate(item)) => item,\n+            Some(OwnerNode::Crate(item)) => item,\n             _ => bug!(),\n         }\n     }\n@@ -215,7 +215,7 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        let owner = self.tcx.hir_owner(def_id);\n+        let owner = self.tcx.local_def_id_to_hir_id(def_id);\n         match owner {\n             MaybeOwner::Owner(_) => HirId::make_owner(def_id),\n             MaybeOwner::Phantom => bug!(\"No HirId for {:?}\", def_id),\n@@ -340,7 +340,7 @@ impl<'hir> Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, id: HirId) -> Option<Node<'hir>> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n-            let owner = self.tcx.hir_owner(id.owner).as_owner()?;\n+            let owner = self.tcx.hir_owner(id.owner)?;\n             Some(owner.node.into())\n         } else {\n             let owner = self.tcx.hir_owner_nodes(id.owner).as_owner()?;\n@@ -371,7 +371,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {\n-        let node = self.tcx.hir_owner(id).as_owner()?;\n+        let node = self.tcx.hir_owner(id)?;\n         match node.node {\n             OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),\n             OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),\n@@ -588,10 +588,10 @@ impl<'hir> Map<'hir> {\n     pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = HirId::make_owner(module);\n         match self.tcx.hir_owner(module).map(|o| o.node) {\n-            MaybeOwner::Owner(OwnerNode::Item(&Item {\n-                span, kind: ItemKind::Mod(ref m), ..\n-            })) => (m, span, hir_id),\n-            MaybeOwner::Owner(OwnerNode::Crate(item)) => (item, item.inner, hir_id),\n+            Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {\n+                (m, span, hir_id)\n+            }\n+            Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -885,7 +885,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {\n         let parent = self.get_parent_item(hir_id);\n-        if let MaybeOwner::Owner(node) = self.tcx.hir_owner(parent) {\n+        if let Some(node) = self.tcx.hir_owner(parent) {\n             if let OwnerNode::Item(Item { kind: ItemKind::ForeignMod { abi, .. }, .. }) = node.node\n             {\n                 return *abi;\n@@ -899,21 +899,21 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {\n         match self.tcx.hir_owner(id) {\n-            MaybeOwner::Owner(Owner { node: OwnerNode::Item(item), .. }) => item,\n+            Some(Owner { node: OwnerNode::Item(item), .. }) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n \n     pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {\n         match self.tcx.hir_owner(id) {\n-            MaybeOwner::Owner(Owner { node: OwnerNode::ImplItem(item), .. }) => item,\n+            Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,\n             _ => bug!(\"expected impl item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {\n         match self.tcx.hir_owner(id) {\n-            MaybeOwner::Owner(Owner { node: OwnerNode::TraitItem(item), .. }) => item,\n+            Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,\n             _ => bug!(\"expected trait item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n@@ -927,7 +927,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_foreign_item(&self, id: LocalDefId) -> &'hir ForeignItem<'hir> {\n         match self.tcx.hir_owner(id) {\n-            MaybeOwner::Owner(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,\n+            Some(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,\n             _ => {\n                 bug!(\"expected foreign item, found {}\", self.node_to_string(HirId::make_owner(id)))\n             }"}, {"sha": "16b41c8f9d1b40660fe9618bac12cca4df5f3cdd", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=d17eb78cf836610d8571806744785f1cbcbb6481", "patch": "@@ -65,6 +65,11 @@ pub fn provide(providers: &mut Providers) {\n     providers.crate_hash = map::crate_hash;\n     providers.hir_module_items = map::hir_module_items;\n     providers.hir_owner = |tcx, id| {\n+        let owner = tcx.hir_crate(()).owners.get(id)?.as_owner()?;\n+        let node = owner.node();\n+        Some(Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies })\n+    };\n+    providers.local_def_id_to_hir_id = |tcx, id| {\n         tcx.hir_crate(()).owners[id].map(|owner| {\n             let node = owner.nodes.node();\n             Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies }"}, {"sha": "2eadcc6c1d3f922d622acb49441020613e1afcae", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17eb78cf836610d8571806744785f1cbcbb6481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d17eb78cf836610d8571806744785f1cbcbb6481", "patch": "@@ -52,10 +52,18 @@ rustc_queries! {\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n-    query hir_owner(key: LocalDefId) -> hir::MaybeOwner<crate::hir::Owner<'tcx>> {\n+    query hir_owner(key: LocalDefId) -> Option<crate::hir::Owner<'tcx>> {\n         desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n+    /// Gives access to the HIR ID for the given `LocalDefId` owner `key`.\n+    ///\n+    /// This can be conveniently accessed by methods on `tcx.hir()`.\n+    /// Avoid calling this query directly.\n+    query local_def_id_to_hir_id(key: LocalDefId) -> hir::MaybeOwner<crate::hir::Owner<'tcx>> {\n+        desc { |tcx| \"HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+    }\n+\n     /// Gives access to the HIR node's parent for the HIR owner `key`.\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`."}]}