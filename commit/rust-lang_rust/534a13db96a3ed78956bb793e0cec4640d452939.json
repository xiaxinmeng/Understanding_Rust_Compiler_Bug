{"sha": "534a13db96a3ed78956bb793e0cec4640d452939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNGExM2RiOTZhM2VkNzg5NTZiYjc5M2UwY2VjNDY0MGQ0NTI5Mzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T16:10:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T16:10:33Z"}, "message": "Auto merge of #6884 - matthiaskrgr:lintcheck_crate, r=Manishearth\n\nmove lintcheck into its own crate\n\nThis pr:\n* moves lintcheck out of `clippy dev` and into its own crate (`lintcheck`)  (I should have done this earlier :D)\n* makes lintcheck terminate if it is not launched from the repo root (to prevent problems with wrong paths when using `cargo run` in the crate root)\n* fixes json lint messages leaking the runners `$HOME` when a lint messages comes from a proc macro that originates from a crate inside the `$CARGO_CACHE`\n* adds more documentation to lintchecks `README.md` and mentions lintcheck in `docs/basics.md`\n\nchangelog: none", "tree": {"sha": "c38f545691e46490d49bcf5c9974ef5516fde783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38f545691e46490d49bcf5c9974ef5516fde783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/534a13db96a3ed78956bb793e0cec4640d452939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/534a13db96a3ed78956bb793e0cec4640d452939", "html_url": "https://github.com/rust-lang/rust/commit/534a13db96a3ed78956bb793e0cec4640d452939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/534a13db96a3ed78956bb793e0cec4640d452939/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99afc6e6ac2ce874c4fed32c083f1e160f533015", "url": "https://api.github.com/repos/rust-lang/rust/commits/99afc6e6ac2ce874c4fed32c083f1e160f533015", "html_url": "https://github.com/rust-lang/rust/commit/99afc6e6ac2ce874c4fed32c083f1e160f533015"}, {"sha": "0af90fd15a48352232d03d7f68bc4f2f2b194f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af90fd15a48352232d03d7f68bc4f2f2b194f5c", "html_url": "https://github.com/rust-lang/rust/commit/0af90fd15a48352232d03d7f68bc4f2f2b194f5c"}], "stats": {"total": 709, "additions": 475, "deletions": 234}, "files": [{"sha": "9b5add4df1c12291566125daaeebbf27956dfa30", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -1,7 +1,7 @@\n [alias]\n uitest = \"test --test compile-test\"\n dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n-dev-lintcheck = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\"\n+lintcheck = \"run --target-dir lintcheck/target --package lintcheck --bin lintcheck --manifest-path lintcheck/Cargo.toml  -- \"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "376528e30853ad9ff166b8ad2094940b7e9cea09", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -21,6 +21,7 @@ out\n /clippy_utils/target\n /clippy_workspace_tests/target\n /clippy_dev/target\n+/lintcheck/target\n /rustc_tools_util/target\n \n # Generated by dogfood"}, {"sha": "b1844e29b3273fa3e41a1a65fe070f4db1ffe73f", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -7,20 +7,11 @@ edition = \"2018\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n-flate2 = { version = \"1.0.19\", optional = true }\n-fs_extra = { version = \"1.2.0\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n-serde = { version = \"1.0\", features = [\"derive\"], optional = true }\n-serde_json = { version = \"1.0\", optional = true }\n shell-escape = \"0.1\"\n-tar = { version = \"0.4.30\", optional = true }\n-toml = { version = \"0.5\", optional = true }\n-ureq = { version = \"2.0.0-rc3\", optional = true }\n-rayon = { version = \"1.5.0\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\", \"rayon\"]\n deny-warnings = []"}, {"sha": "a26d6aba10d20ed5beb03e9e49d038524e0c4387", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -54,6 +54,7 @@ pub fn run(check: bool, verbose: bool) {\n         success &= cargo_fmt(context, project_root.as_path())?;\n         success &= cargo_fmt(context, &project_root.join(\"clippy_dev\"))?;\n         success &= cargo_fmt(context, &project_root.join(\"rustc_tools_util\"))?;\n+        success &= cargo_fmt(context, &project_root.join(\"lintcheck\"))?;\n \n         for entry in WalkDir::new(project_root.join(\"tests\")) {\n             let entry = entry?;"}, {"sha": "a95abfaceaae026af80e2d84dc628982d18d2ee6", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -12,7 +12,6 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n-pub mod lintcheck;\n pub mod new_lint;\n pub mod ra_setup;\n pub mod serve;"}, {"sha": "2a9f3e5348c4156c7ac5e0c7e473595ccf35d6e1", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -2,21 +2,13 @@\n \n use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n-\n-#[cfg(feature = \"lintcheck\")]\n-use clippy_dev::lintcheck;\n-\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         (\"bless\", Some(matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n-        #[cfg(feature = \"lintcheck\")]\n-        (\"lintcheck\", Some(matches)) => {\n-            lintcheck::run(&matches);\n-        },\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n@@ -53,34 +45,7 @@ fn main() {\n }\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    #[cfg(feature = \"lintcheck\")]\n-    let lintcheck_sbcmd = SubCommand::with_name(\"lintcheck\")\n-        .about(\"run clippy on a set of crates and check output\")\n-        .arg(\n-            Arg::with_name(\"only\")\n-                .takes_value(true)\n-                .value_name(\"CRATE\")\n-                .long(\"only\")\n-                .help(\"only process a single crate of the list\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"crates-toml\")\n-                .takes_value(true)\n-                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n-                .long(\"crates-toml\")\n-                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"threads\")\n-                .takes_value(true)\n-                .value_name(\"N\")\n-                .short(\"j\")\n-                .long(\"jobs\")\n-                .help(\"number of threads to use, 0 automatic choice\"),\n-        )\n-        .arg(Arg::with_name(\"fix\").help(\"runs cargo clippy --fix and checks if all suggestions apply\"));\n-\n-    let app = App::new(\"Clippy developer tooling\")\n+    App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n@@ -197,10 +162,6 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .validator_os(serve::validate_port),\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        );\n-\n-    #[cfg(feature = \"lintcheck\")]\n-    let app = app.subcommand(lintcheck_sbcmd);\n-\n-    app.get_matches()\n+        )\n+        .get_matches()\n }"}, {"sha": "c56e84e2e32a22569c954c869506e56a0787b71d", "filename": "doc/basics.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -11,8 +11,9 @@ the codebase take a look at [Adding Lints] or [Common Tools].\n   - [Get the Code](#get-the-code)\n   - [Building and Testing](#building-and-testing)\n   - [`cargo dev`](#cargo-dev)\n-  - [Common Abbreviations](#common-abbreviations)\n+  - [lintcheck](#lintcheck)\n   - [PR](#pr)\n+  - [Common Abbreviations](#common-abbreviations)\n \n ## Get the Code\n \n@@ -91,6 +92,16 @@ cargo dev new_lint\n cargo dev ra_setup\n ```\n \n+## lintcheck\n+`cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n+You can `git diff` the updated log against its previous version and \n+see what impact your lint made on a small set of crates.  \n+If you add a new lint, please audit the resulting warnings and make sure \n+there are no false positives and that the suggestions are valid.\n+\n+Refer to the tools [README] for more details.\n+\n+[README]: https://github.com/rust-lang/rust-clippy/blob/master/lintcheck/README.md\n ## PR\n \n We follow a rustc no merge-commit policy."}, {"sha": "3439b1e2c43d4fb7f188ca9db44fb3bdaf117da4", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "modified", "additions": 306, "deletions": 143, "changes": 449, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=534a13db96a3ed78956bb793e0cec4640d452939"}, {"sha": "8db6d28e5acae1d4865fd6982179c743f645bc83", "filename": "lintcheck/Cargo.toml", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -0,0 +1,25 @@\n+[package]\n+name = \"lintcheck\"\n+version = \"0.0.1\"\n+authors = [\"The Rust Clippy Developers\"]\n+description = \"tool to monitor impact of changes in Clippys lints on a part of the ecosystem\"\n+readme = \"README.md\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust-clippy\"\n+categories = [\"development-tools\"]\n+edition = \"2018\"\n+publish = false\n+\n+[dependencies]\n+clap = \"2.33\"\n+flate2 = {version = \"1.0.19\"}\n+fs_extra = {version = \"1.2.0\"}\n+rayon = {version = \"1.5.0\"}\n+serde = {version = \"1.0\", features = [\"derive\"]}\n+serde_json = {version = \"1.0\"}\n+tar = {version = \"0.4.30\"}\n+toml = {version = \"0.5\"}\n+ureq = {version = \"2.0.0-rc3\"}\n+\n+[features]\n+deny-warnings = []"}, {"sha": "52bbcc0a8317dd47e2afbe4ccd2e854deaac7d10", "filename": "lintcheck/README.md", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -1,27 +1,19 @@\n-# Clippy Dev Tool\n-\n-The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s\n-`x.py`.\n-\n-Functionalities (incomplete):\n-\n-## `lintcheck`\n+## `cargo lintcheck`\n \n Runs clippy on a fixed set of crates read from\n-`clippy_dev/lintcheck_crates.toml` and saves logs of the lint warnings into the\n+`lintcheck/lintcheck_crates.toml` and saves logs of the lint warnings into the\n repo.  We can then check the diff and spot new or disappearing warnings.\n \n From the repo root, run:\n \n ```\n-cargo run --target-dir clippy_dev/target --package clippy_dev \\\n---bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\n+cargo run --target-dir lintcheck/target --manifest-path lintcheck/Cargo.toml\n ```\n \n or\n \n ```\n-cargo dev-lintcheck\n+cargo lintcheck\n ```\n \n By default the logs will be saved into\n@@ -75,3 +67,11 @@ is checked.\n \n **Note:** `-Wclippy::all` is always enabled by default, unless `-Aclippy::all`\n is explicitly specified in the options.\n+\n+### Fix mode\n+You can run `./lintcheck/target/debug/lintcheck --fix` which will run Clippy with `-Zunstable-options --fix` and\n+print a warning if Clippys suggestions fail to apply (if the resulting code does not build).  \n+This lets us spot bad suggestions or false positives automatically in some cases.  \n+\n+Please note that the target dir should be cleaned afterwards since clippy will modify \n+the downloaded sources which can lead to unexpected results when running lintcheck again afterwards.", "previous_filename": "clippy_dev/README.md"}, {"sha": "dfee28f1a87128e0e4ef92472e72ba5968e55a7d", "filename": "lintcheck/lintcheck_crates.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Flintcheck_crates.toml?ref=534a13db96a3ed78956bb793e0cec4640d452939", "previous_filename": "clippy_dev/lintcheck_crates.toml"}, {"sha": "581b47647eb189c9f1164a1c6cf789f1fd519e6a", "filename": "lintcheck/src/main.rs", "status": "renamed", "additions": 114, "deletions": 25, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=534a13db96a3ed78956bb793e0cec4640d452939", "patch": "@@ -1,14 +1,13 @@\n // Run clippy on a fixed set of crates and collect the warnings.\n-// This helps observing the impact clippy changs have on a set of real-world code.\n+// This helps observing the impact clippy changes have on a set of real-world code (and not just our\n+// testsuite).\n //\n // When a new lint is introduced, we can search the results for new warnings and check for false\n // positives.\n \n-#![cfg(feature = \"lintcheck\")]\n #![allow(clippy::filter_map, clippy::collapsible_else_if)]\n \n-use crate::clippy_project_root;\n-\n+use std::ffi::OsStr;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{collections::HashMap, io::ErrorKind};\n@@ -18,7 +17,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use clap::ArgMatches;\n+use clap::{App, Arg, ArgMatches};\n use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n@@ -339,12 +338,12 @@ impl LintcheckConfig {\n     fn from_clap(clap_config: &ArgMatches) -> Self {\n         // first, check if we got anything passed via the LINTCHECK_TOML env var,\n         // if not, ask clap if we got any value for --crates-toml  <foo>\n-        // if not, use the default \"clippy_dev/lintcheck_crates.toml\"\n+        // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n         let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n             clap_config\n                 .value_of(\"crates-toml\")\n                 .clone()\n-                .unwrap_or(\"clippy_dev/lintcheck_crates.toml\")\n+                .unwrap_or(\"lintcheck/lintcheck_crates.toml\")\n                 .to_string()\n         });\n \n@@ -488,13 +487,32 @@ fn read_crates(toml_path: &Path) -> Vec<CrateSource> {\n fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n     let jmsg: Value = serde_json::from_str(&json_message).unwrap_or_else(|e| panic!(\"Failed to parse json:\\n{:?}\", e));\n \n+    let file: String = jmsg[\"message\"][\"spans\"][0][\"file_name\"]\n+        .to_string()\n+        .trim_matches('\"')\n+        .into();\n+\n+    let file = if file.contains(\".cargo\") {\n+        // if we deal with macros, a filename may show the origin of a macro which can be inside a dep from\n+        // the registry.\n+        // don't show the full path in that case.\n+\n+        // /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.63/src/custom_keyword.rs\n+        let path = PathBuf::from(file);\n+        let mut piter = path.iter();\n+        // consume all elements until we find \".cargo\", so that \"/home/matthias\" is skipped\n+        let _: Option<&OsStr> = piter.find(|x| x == &std::ffi::OsString::from(\".cargo\"));\n+        // collect the remaining segments\n+        let file = piter.collect::<PathBuf>();\n+        format!(\"{}\", file.display())\n+    } else {\n+        file\n+    };\n+\n     ClippyWarning {\n         crate_name: krate.name.to_string(),\n         crate_version: krate.version.to_string(),\n-        file: jmsg[\"message\"][\"spans\"][0][\"file_name\"]\n-            .to_string()\n-            .trim_matches('\"')\n-            .into(),\n+        file,\n         line: jmsg[\"message\"][\"spans\"][0][\"line_start\"]\n             .to_string()\n             .trim_matches('\"')\n@@ -559,12 +577,31 @@ fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n     logs_modified < clippy_modified\n }\n \n+fn is_in_clippy_root() -> bool {\n+    if let Ok(pb) = std::env::current_dir() {\n+        if let Some(file) = pb.file_name() {\n+            return file == PathBuf::from(\"rust-clippy\");\n+        }\n+    }\n+\n+    false\n+}\n+\n /// lintchecks `main()` function\n ///\n /// # Panics\n ///\n-/// This function panics if the clippy binaries don't exist.\n-pub fn run(clap_config: &ArgMatches) {\n+/// This function panics if the clippy binaries don't exist\n+/// or if lintcheck is executed from the wrong directory (aka none-repo-root)\n+pub fn main() {\n+    // assert that we launch lintcheck from the repo root (via cargo lintcheck)\n+    if !is_in_clippy_root() {\n+        eprintln!(\"lintcheck needs to be run from clippys repo root!\\nUse `cargo lintcheck` alternatively.\");\n+        std::process::exit(3);\n+    }\n+\n+    let clap_config = &get_clap_config();\n+\n     let config = LintcheckConfig::from_clap(clap_config);\n \n     println!(\"Compiling clippy...\");\n@@ -621,7 +658,7 @@ pub fn run(clap_config: &ArgMatches) {\n             name == only_one_crate\n         }) {\n             eprintln!(\n-                \"ERROR: could not find crate '{}' in clippy_dev/lintcheck_crates.toml\",\n+                \"ERROR: could not find crate '{}' in lintcheck/lintcheck_crates.toml\",\n                 only_one_crate\n             );\n             std::process::exit(1);\n@@ -800,29 +837,81 @@ fn create_dirs(krate_download_dir: &Path, extract_dir: &Path) {\n     });\n }\n \n+fn get_clap_config<'a>() -> ArgMatches<'a> {\n+    App::new(\"lintcheck\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"only process a single crate of the list\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"crates-toml\")\n+                .takes_value(true)\n+                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n+                .long(\"crates-toml\")\n+                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"threads\")\n+                .takes_value(true)\n+                .value_name(\"N\")\n+                .short(\"j\")\n+                .long(\"jobs\")\n+                .help(\"number of threads to use, 0 automatic choice\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"fix\")\n+                .long(\"--fix\")\n+                .help(\"runs cargo clippy --fix and checks if all suggestions apply\"),\n+        )\n+        .get_matches()\n+}\n+\n+/// Returns the path to the Clippy project directory\n+///\n+/// # Panics\n+///\n+/// Panics if the current directory could not be retrieved, there was an error reading any of the\n+/// Cargo.toml files or ancestor directory is the clippy root directory\n+#[must_use]\n+pub fn clippy_project_root() -> PathBuf {\n+    let current_dir = std::env::current_dir().unwrap();\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == std::io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result.unwrap();\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return path.to_path_buf();\n+        }\n+    }\n+    panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+}\n+\n #[test]\n fn lintcheck_test() {\n     let args = [\n         \"run\",\n         \"--target-dir\",\n-        \"clippy_dev/target\",\n-        \"--package\",\n-        \"clippy_dev\",\n-        \"--bin\",\n-        \"clippy_dev\",\n+        \"lintcheck/target\",\n         \"--manifest-path\",\n-        \"clippy_dev/Cargo.toml\",\n-        \"--features\",\n-        \"lintcheck\",\n+        \"./lintcheck/Cargo.toml\",\n         \"--\",\n-        \"lintcheck\",\n         \"--crates-toml\",\n-        \"clippy_dev/test_sources.toml\",\n+        \"lintcheck/test_sources.toml\",\n     ];\n     let status = std::process::Command::new(\"cargo\")\n         .args(&args)\n-        .current_dir(\"../\" /* repo root */)\n+        .current_dir(\"..\") // repo root\n         .status();\n+    //.output();\n \n     assert!(status.unwrap().success());\n }", "previous_filename": "clippy_dev/src/lintcheck.rs"}, {"sha": "4b0eb71ef4bfe1fa01c103e0c3e8be283ba18b1e", "filename": "lintcheck/test_sources.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Ftest_sources.toml", "raw_url": "https://github.com/rust-lang/rust/raw/534a13db96a3ed78956bb793e0cec4640d452939/lintcheck%2Ftest_sources.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Ftest_sources.toml?ref=534a13db96a3ed78956bb793e0cec4640d452939", "previous_filename": "clippy_dev/test_sources.toml"}]}