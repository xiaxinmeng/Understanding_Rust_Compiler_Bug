{"sha": "dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzJkOTExZDZhMmFhZjNjZmFkMzVjYTk4Y2QwNTcxYmFlNGYzOWU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-27T22:29:09Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-27T22:37:06Z"}, "message": "Remove `CheckOpResult`", "tree": {"sha": "ca5cb98394192aa3113072f2242f4f50807d0561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5cb98394192aa3113072f2242f4f50807d0561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e", "html_url": "https://github.com/rust-lang/rust/commit/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511740706c0930630b896d8abb9b4f709c1faa1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/511740706c0930630b896d8abb9b4f709c1faa1b", "html_url": "https://github.com/rust-lang/rust/commit/511740706c0930630b896d8abb9b4f709c1faa1b"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "4d8f9720af085ce86a2c671c64bfec5ef0c035da", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=dd32d911d6a2aaf3cfad35ca98cd0571bae4f39e", "patch": "@@ -23,13 +23,6 @@ use super::qualifs::{self, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{ConstKind, Item, Qualif, is_lang_panic_fn};\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum CheckOpResult {\n-    Forbidden,\n-    Unleashed,\n-    Allowed,\n-}\n-\n pub type IndirectlyMutableResults<'mir, 'tcx> =\n     old_dataflow::DataflowResultsCursor<'mir, 'tcx, IndirectlyMutableLocals<'mir, 'tcx>>;\n \n@@ -246,15 +239,15 @@ impl Validator<'a, 'mir, 'tcx> {\n     }\n \n     /// Emits an error at the given `span` if an expression cannot be evaluated in the current\n-    /// context. Returns `Forbidden` if an error was emitted.\n-    pub fn check_op_spanned<O>(&mut self, op: O, span: Span) -> CheckOpResult\n+    /// context.\n+    pub fn check_op_spanned<O>(&mut self, op: O, span: Span)\n     where\n         O: NonConstOp\n     {\n         trace!(\"check_op: op={:?}\", op);\n \n         if op.is_allowed_in_item(self) {\n-            return CheckOpResult::Allowed;\n+            return;\n         }\n \n         // If an operation is supported in miri (and is not already controlled by a feature gate) it\n@@ -264,20 +257,19 @@ impl Validator<'a, 'mir, 'tcx> {\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.span_warn(span, \"skipping const checks\");\n-            return CheckOpResult::Unleashed;\n+            return;\n         }\n \n         op.emit_error(self, span);\n-        CheckOpResult::Forbidden\n     }\n \n     /// Emits an error if an expression cannot be evaluated in the current context.\n-    pub fn check_op(&mut self, op: impl NonConstOp) -> CheckOpResult {\n+    pub fn check_op(&mut self, op: impl NonConstOp) {\n         let span = self.span;\n         self.check_op_spanned(op, span)\n     }\n \n-    fn check_static(&mut self, def_id: DefId, span: Span) -> CheckOpResult {\n+    fn check_static(&mut self, def_id: DefId, span: Span) {\n         let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n         if is_thread_local {\n             self.check_op_spanned(ops::ThreadLocalAccess, span)"}]}