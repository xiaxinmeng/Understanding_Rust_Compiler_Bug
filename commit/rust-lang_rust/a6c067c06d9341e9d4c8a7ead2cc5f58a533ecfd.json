{"sha": "a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "node_id": "C_kwDOAAsO6NoAKGE2YzA2N2MwNmQ5MzQxZTlkNGM4YTdlYWQyY2M1ZjU4YTUzM2VjZmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-19T15:31:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-19T15:31:08Z"}, "message": "Simplify", "tree": {"sha": "a5d642c232ecf701f574a1bbd9fd956a298621c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d642c232ecf701f574a1bbd9fd956a298621c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "html_url": "https://github.com/rust-lang/rust/commit/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f570960980a98a1cde705ca38bf957231a53e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f570960980a98a1cde705ca38bf957231a53e6", "html_url": "https://github.com/rust-lang/rust/commit/d9f570960980a98a1cde705ca38bf957231a53e6"}], "stats": {"total": 177, "additions": 89, "deletions": 88}, "files": [{"sha": "bd2bbadea239b3cd17710a0043e11fd235834c9c", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -272,8 +272,8 @@ impl CargoWorkspace {\n         let target = config\n             .target\n             .clone()\n-            .or_else(|| cargo_config_build_target(cargo_toml, config))\n-            .or_else(|| rustc_discover_host_triple(cargo_toml, config));\n+            .or_else(|| cargo_config_build_target(cargo_toml, &config.extra_env))\n+            .or_else(|| rustc_discover_host_triple(cargo_toml, &config.extra_env));\n \n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n@@ -304,12 +304,9 @@ impl CargoWorkspace {\n         // unclear whether cargo itself supports it.\n         progress(\"metadata\".to_string());\n \n-        fn exec_with_env(\n-            command: &cargo_metadata::MetadataCommand,\n-            extra_env: &FxHashMap<String, String>,\n-        ) -> Result<cargo_metadata::Metadata, cargo_metadata::Error> {\n-            let mut command = command.cargo_command();\n-            command.envs(extra_env);\n+        (|| -> Result<cargo_metadata::Metadata, cargo_metadata::Error> {\n+            let mut command = meta.cargo_command();\n+            command.envs(&config.extra_env);\n             let output = command.output()?;\n             if !output.status.success() {\n                 return Err(cargo_metadata::Error::CargoMetadata {\n@@ -321,12 +318,8 @@ impl CargoWorkspace {\n                 .find(|line| line.starts_with('{'))\n                 .ok_or(cargo_metadata::Error::NoJson)?;\n             cargo_metadata::MetadataCommand::parse(stdout)\n-        }\n-\n-        let meta = exec_with_env(&meta, &config.extra_env)\n-            .with_context(|| format!(\"Failed to run `{:?}`\", meta.cargo_command()))?;\n-\n-        Ok(meta)\n+        })()\n+        .with_context(|| format!(\"Failed to run `{:?}`\", meta.cargo_command()))\n     }\n \n     pub fn new(mut meta: cargo_metadata::Metadata) -> CargoWorkspace {\n@@ -395,32 +388,14 @@ impl CargoWorkspace {\n         }\n         let resolve = meta.resolve.expect(\"metadata executed with deps\");\n         for mut node in resolve.nodes {\n-            let source = match pkg_by_id.get(&node.id) {\n-                Some(&src) => src,\n-                // FIXME: replace this and a similar branch below with `.unwrap`, once\n-                // https://github.com/rust-lang/cargo/issues/7841\n-                // is fixed and hits stable (around 1.43-is probably?).\n-                None => {\n-                    tracing::error!(\"Node id do not match in cargo metadata, ignoring {}\", node.id);\n-                    continue;\n-                }\n-            };\n+            let &source = pkg_by_id.get(&node.id).unwrap();\n             node.deps.sort_by(|a, b| a.pkg.cmp(&b.pkg));\n-            for (dep_node, kind) in node\n+            let dependencies = node\n                 .deps\n                 .iter()\n-                .flat_map(|dep| DepKind::iter(&dep.dep_kinds).map(move |kind| (dep, kind)))\n-            {\n-                let pkg = match pkg_by_id.get(&dep_node.pkg) {\n-                    Some(&pkg) => pkg,\n-                    None => {\n-                        tracing::error!(\n-                            \"Dep node id do not match in cargo metadata, ignoring {}\",\n-                            dep_node.pkg\n-                        );\n-                        continue;\n-                    }\n-                };\n+                .flat_map(|dep| DepKind::iter(&dep.dep_kinds).map(move |kind| (dep, kind)));\n+            for (dep_node, kind) in dependencies {\n+                let &pkg = pkg_by_id.get(&dep_node.pkg).unwrap();\n                 let dep = PackageDependency { name: dep_node.name.clone(), pkg, kind };\n                 packages[source].dependencies.push(dep);\n             }\n@@ -465,10 +440,7 @@ impl CargoWorkspace {\n                     found = true\n                 }\n                 self[pkg].dependencies.iter().find_map(|dep| {\n-                    if &self[dep.pkg].manifest == manifest_path {\n-                        return Some(self[pkg].manifest.clone());\n-                    }\n-                    None\n+                    (&self[dep.pkg].manifest == manifest_path).then(|| self[pkg].manifest.clone())\n                 })\n             })\n             .collect::<Vec<ManifestPath>>();\n@@ -494,9 +466,12 @@ impl CargoWorkspace {\n     }\n }\n \n-fn rustc_discover_host_triple(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<String> {\n+fn rustc_discover_host_triple(\n+    cargo_toml: &ManifestPath,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Option<String> {\n     let mut rustc = Command::new(toolchain::rustc());\n-    rustc.envs(&config.extra_env);\n+    rustc.envs(extra_env);\n     rustc.current_dir(cargo_toml.parent()).arg(\"-vV\");\n     tracing::debug!(\"Discovering host platform by {:?}\", rustc);\n     match utf8_stdout(rustc) {\n@@ -518,9 +493,12 @@ fn rustc_discover_host_triple(cargo_toml: &ManifestPath, config: &CargoConfig) -\n     }\n }\n \n-fn cargo_config_build_target(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<String> {\n+fn cargo_config_build_target(\n+    cargo_toml: &ManifestPath,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Option<String> {\n     let mut cargo_config = Command::new(toolchain::cargo());\n-    cargo_config.envs(&config.extra_env);\n+    cargo_config.envs(extra_env);\n     cargo_config\n         .current_dir(cargo_toml.parent())\n         .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])"}, {"sha": "5133a14d532bb2467934d058678a5dae6bb5bfaf", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -110,14 +110,17 @@ impl ProjectJson {\n                 .collect::<Vec<_>>(),\n         }\n     }\n+\n     /// Returns the number of crates in the project.\n     pub fn n_crates(&self) -> usize {\n         self.crates.len()\n     }\n+\n     /// Returns an iterator over the crates in the project.\n     pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n         self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n     }\n+\n     /// Returns the path to the project's root folder.\n     pub fn path(&self) -> &AbsPath {\n         &self.project_root"}, {"sha": "3231361836634a179171a9367722ecad23da9510", "filename": "crates/project-model/src/rustc_cfg.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -3,13 +3,14 @@\n use std::process::Command;\n \n use anyhow::Result;\n+use rustc_hash::FxHashMap;\n \n-use crate::{cfg_flag::CfgFlag, utf8_stdout, CargoConfig, ManifestPath};\n+use crate::{cfg_flag::CfgFlag, utf8_stdout, ManifestPath};\n \n pub(crate) fn get(\n     cargo_toml: Option<&ManifestPath>,\n     target: Option<&str>,\n-    config: &CargoConfig,\n+    extra_env: &FxHashMap<String, String>,\n ) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n     let mut res = Vec::with_capacity(6 * 2 + 1);\n@@ -22,7 +23,7 @@ pub(crate) fn get(\n         }\n     }\n \n-    match get_rust_cfgs(cargo_toml, target, config) {\n+    match get_rust_cfgs(cargo_toml, target, extra_env) {\n         Ok(rustc_cfgs) => {\n             tracing::debug!(\n                 \"rustc cfgs found: {:?}\",\n@@ -42,11 +43,11 @@ pub(crate) fn get(\n fn get_rust_cfgs(\n     cargo_toml: Option<&ManifestPath>,\n     target: Option<&str>,\n-    config: &CargoConfig,\n+    extra_env: &FxHashMap<String, String>,\n ) -> Result<String> {\n     if let Some(cargo_toml) = cargo_toml {\n         let mut cargo_config = Command::new(toolchain::cargo());\n-        cargo_config.envs(&config.extra_env);\n+        cargo_config.envs(extra_env);\n         cargo_config\n             .current_dir(cargo_toml.parent())\n             .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n@@ -61,7 +62,7 @@ fn get_rust_cfgs(\n     }\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = Command::new(toolchain::rustc());\n-    cmd.envs(&config.extra_env);\n+    cmd.envs(extra_env);\n     cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n     if let Some(target) = target {\n         cmd.args(&[\"--target\", target]);"}, {"sha": "f0d76aa922f709257bffae441f7f1bd6d17295fc", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -9,8 +9,9 @@ use std::{env, fs, iter, ops, path::PathBuf, process::Command};\n use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n+use rustc_hash::FxHashMap;\n \n-use crate::{utf8_stdout, CargoConfig, ManifestPath};\n+use crate::{utf8_stdout, ManifestPath};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n@@ -67,18 +68,21 @@ impl Sysroot {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub fn discover(dir: &AbsPath, config: &CargoConfig) -> Result<Sysroot> {\n+    pub fn discover(dir: &AbsPath, extra_env: &FxHashMap<String, String>) -> Result<Sysroot> {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n-        let sysroot_dir = discover_sysroot_dir(dir, config)?;\n-        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir, config)?;\n+        let sysroot_dir = discover_sysroot_dir(dir, extra_env)?;\n+        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir, extra_env)?;\n         let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n \n-    pub fn discover_rustc(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<ManifestPath> {\n+    pub fn discover_rustc(\n+        cargo_toml: &ManifestPath,\n+        extra_env: &FxHashMap<String, String>,\n+    ) -> Option<ManifestPath> {\n         tracing::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n         let current_dir = cargo_toml.parent();\n-        discover_sysroot_dir(current_dir, config)\n+        discover_sysroot_dir(current_dir, extra_env)\n             .ok()\n             .and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n@@ -146,9 +150,12 @@ impl Sysroot {\n     }\n }\n \n-fn discover_sysroot_dir(current_dir: &AbsPath, config: &CargoConfig) -> Result<AbsPathBuf> {\n+fn discover_sysroot_dir(\n+    current_dir: &AbsPath,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Result<AbsPathBuf> {\n     let mut rustc = Command::new(toolchain::rustc());\n-    rustc.envs(&config.extra_env);\n+    rustc.envs(extra_env);\n     rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n     tracing::debug!(\"Discovering sysroot by {:?}\", rustc);\n     let stdout = utf8_stdout(rustc)?;\n@@ -158,7 +165,7 @@ fn discover_sysroot_dir(current_dir: &AbsPath, config: &CargoConfig) -> Result<A\n fn discover_sysroot_src_dir(\n     sysroot_path: &AbsPathBuf,\n     current_dir: &AbsPath,\n-    config: &CargoConfig,\n+    extra_env: &FxHashMap<String, String>,\n ) -> Result<AbsPathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         let path = AbsPathBuf::try_from(path.as_str())\n@@ -174,7 +181,7 @@ fn discover_sysroot_src_dir(\n     get_rust_src(sysroot_path)\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n-            rustup.envs(&config.extra_env);\n+            rustup.envs(extra_env);\n             rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n             utf8_stdout(rustup).ok()?;\n             get_rust_src(sysroot_path)"}, {"sha": "813f0a7ce9f1ddcb3afec28aad7906b54f213bb9", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -10,8 +10,8 @@ use paths::{AbsPath, AbsPathBuf};\n use serde::de::DeserializeOwned;\n \n use crate::{\n-    CargoConfig, CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace,\n-    Sysroot, WorkspaceBuildScripts,\n+    CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace, Sysroot,\n+    WorkspaceBuildScripts,\n };\n \n fn load_cargo(file: &str) -> CrateGraph {\n@@ -101,7 +101,7 @@ fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n                 Some(FileId(counter))\n             }\n         },\n-        &CargoConfig::default(),\n+        &Default::default(),\n     )\n }\n "}, {"sha": "c749a3b6566fda25cdf78013bbecfcf34e4bd3c8", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -156,7 +156,11 @@ impl ProjectWorkspace {\n                 })?;\n                 let project_location = project_json.parent().to_path_buf();\n                 let project_json = ProjectJson::new(&project_location, data);\n-                ProjectWorkspace::load_inline(project_json, config.target.as_deref(), config)?\n+                ProjectWorkspace::load_inline(\n+                    project_json,\n+                    config.target.as_deref(),\n+                    &config.extra_env,\n+                )?\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -187,17 +191,21 @@ impl ProjectWorkspace {\n                 let sysroot = if config.no_sysroot {\n                     None\n                 } else {\n-                    Some(Sysroot::discover(cargo_toml.parent(), config).with_context(|| {\n-                        format!(\n+                    Some(Sysroot::discover(cargo_toml.parent(), &config.extra_env).with_context(\n+                        || {\n+                            format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n                         )\n-                    })?)\n+                        },\n+                    )?)\n                 };\n \n                 let rustc_dir = match &config.rustc_source {\n                     Some(RustcSource::Path(path)) => ManifestPath::try_from(path.clone()).ok(),\n-                    Some(RustcSource::Discover) => Sysroot::discover_rustc(&cargo_toml, config),\n+                    Some(RustcSource::Discover) => {\n+                        Sysroot::discover_rustc(&cargo_toml, &config.extra_env)\n+                    }\n                     None => None,\n                 };\n \n@@ -217,7 +225,8 @@ impl ProjectWorkspace {\n                     None => None,\n                 };\n \n-                let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), config);\n+                let rustc_cfg =\n+                    rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n \n                 let cfg_overrides = config.cfg_overrides();\n                 ProjectWorkspace::Cargo {\n@@ -238,7 +247,7 @@ impl ProjectWorkspace {\n     pub fn load_inline(\n         project_json: ProjectJson,\n         target: Option<&str>,\n-        config: &CargoConfig,\n+        extra_env: &FxHashMap<String, String>,\n     ) -> Result<ProjectWorkspace> {\n         let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n             (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)?),\n@@ -260,7 +269,7 @@ impl ProjectWorkspace {\n             (None, None) => None,\n         };\n \n-        let rustc_cfg = rustc_cfg::get(None, target, config);\n+        let rustc_cfg = rustc_cfg::get(None, target, extra_env);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n@@ -270,9 +279,9 @@ impl ProjectWorkspace {\n                 .first()\n                 .and_then(|it| it.parent())\n                 .ok_or_else(|| format_err!(\"No detached files to load\"))?,\n-            &CargoConfig::default(),\n+            &Default::default(),\n         )?;\n-        let rustc_cfg = rustc_cfg::get(None, None, &CargoConfig::default());\n+        let rustc_cfg = rustc_cfg::get(None, None, &Default::default());\n         Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n     }\n \n@@ -419,7 +428,7 @@ impl ProjectWorkspace {\n         &self,\n         load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-        config: &CargoConfig,\n+        extra_env: &FxHashMap<String, String>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n@@ -430,7 +439,7 @@ impl ProjectWorkspace {\n                 load,\n                 project,\n                 sysroot,\n-                config,\n+                extra_env,\n             ),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -469,7 +478,7 @@ fn project_json_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n-    config: &CargoConfig,\n+    extra_env: &FxHashMap<String, String>,\n ) -> CrateGraph {\n     let mut crate_graph = CrateGraph::default();\n     let sysroot_deps = sysroot\n@@ -497,7 +506,7 @@ fn project_json_to_crate_graph(\n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => cfg_cache\n                     .entry(target)\n-                    .or_insert_with(|| rustc_cfg::get(None, Some(target), config)),\n+                    .or_insert_with(|| rustc_cfg::get(None, Some(target), extra_env)),\n                 None => &rustc_cfg,\n             };\n "}, {"sha": "81c393abdb3473c369ba727d8968328e327e105d", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -81,7 +81,7 @@ impl flags::AnalysisStats {\n         };\n \n         let (host, vfs, _proc_macro) =\n-            load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n+            load_workspace(workspace, &cargo_config.extra_env, &load_cargo_config)?;\n         let db = host.raw_database();\n         eprint!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n         eprint!(\" (metadata {}\", metadata_time);"}, {"sha": "e07d905423739a896143494df4599c77b2f22040", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -6,7 +6,7 @@ use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n-use ide_db::base_db::CrateGraph;\n+use ide_db::{base_db::CrateGraph, FxHashMap};\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n@@ -38,7 +38,7 @@ pub fn load_workspace_at(\n         workspace.set_build_scripts(build_scripts)\n     }\n \n-    load_workspace(workspace, cargo_config, load_config)\n+    load_workspace(workspace, &cargo_config.extra_env, load_config)\n }\n \n // Note: Since this function is used by external tools that use rust-analyzer as a library\n@@ -48,7 +48,7 @@ pub fn load_workspace_at(\n // these tools need access to `ProjectWorkspace`, too, which `load_workspace_at` hides.\n pub fn load_workspace(\n     ws: ProjectWorkspace,\n-    cargo_config: &CargoConfig,\n+    extra_env: &FxHashMap<String, String>,\n     load_config: &LoadCargoConfig,\n ) -> Result<(AnalysisHost, vfs::Vfs, Option<ProcMacroServer>)> {\n     let (sender, receiver) = unbounded();\n@@ -76,7 +76,7 @@ pub fn load_workspace(\n             vfs.set_file_contents(path.clone(), contents);\n             vfs.file_id(&path)\n         },\n-        cargo_config,\n+        extra_env,\n     );\n \n     let project_folders = ProjectFolders::new(&[ws], &[]);"}, {"sha": "748306ea57d4ee25babc020925925e1a624b8fcf", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -300,7 +300,7 @@ impl flags::Lsif {\n         let workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n \n         let (host, vfs, _proc_macro) =\n-            load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n+            load_workspace(workspace, &cargo_config.extra_env, &load_cargo_config)?;\n         let db = host.raw_database();\n         let analysis = host.analysis();\n "}, {"sha": "2c29b3ee3a6f7d82e76892855c48ef70b56a5206", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -40,7 +40,8 @@ impl flags::Scip {\n \n         let workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n \n-        let (host, vfs, _) = load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n+        let (host, vfs, _) =\n+            load_workspace(workspace, &cargo_config.extra_env, &load_cargo_config)?;\n         let db = host.raw_database();\n         let analysis = host.analysis();\n "}, {"sha": "5d99d2fb1193d11acc71a410fd9b20a91161440b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -110,6 +110,7 @@ config_data! {\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// Extra environment variables that will be set when running `cargo check`.\n+        /// Extends `#rust-analyzer.cargo.extraEnv#`.\n         checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`."}, {"sha": "e7f7972e9abb1db45cf0669a1f799a1be8eb5ed0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -143,7 +143,7 @@ impl GlobalState {\n                             project_model::ProjectWorkspace::load_inline(\n                                 it.clone(),\n                                 cargo_config.target.as_deref(),\n-                                &cargo_config,\n+                                &cargo_config.extra_env,\n                             )\n                         }\n                     })\n@@ -402,7 +402,7 @@ impl GlobalState {\n                 crate_graph.extend(ws.to_crate_graph(\n                     &mut load_proc_macro,\n                     &mut load,\n-                    &self.config.cargo(),\n+                    &self.config.cargo().extra_env,\n                 ));\n             }\n             crate_graph"}, {"sha": "a34f4d5093e3e5690de9982ea19334e334e7ab37", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -103,6 +103,7 @@ Extra arguments for `cargo check`.\n +\n --\n Extra environment variables that will be set when running `cargo check`.\n+Extends `#rust-analyzer.cargo.extraEnv#`.\n --\n [[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n +"}, {"sha": "f8eec9f62e5295defec563d50ee76dd3e01bac51", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a6c067c06d9341e9d4c8a7ead2cc5f58a533ecfd", "patch": "@@ -515,7 +515,7 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.extraEnv\": {\n-                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\",\n+                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n                     \"default\": {},\n                     \"type\": \"object\"\n                 },"}]}