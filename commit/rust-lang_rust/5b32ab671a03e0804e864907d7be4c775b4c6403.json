{"sha": "5b32ab671a03e0804e864907d7be4c775b4c6403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzJhYjY3MWEwM2UwODA0ZTg2NDkwN2Q3YmU0Yzc3NWI0YzY0MDM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-23T03:37:23Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-23T03:42:23Z"}, "message": "Update and improve `rustc_codegen_{llvm,ssa}` docs\n\nThese docs were very out of date and misleading. They even said that\nthey codegen'd the *AST*!\n\nFor some reason, the `rustc_codegen_ssa::base` docs were exactly\nidentical to the `rustc_codegen_llvm::base` docs. They didn't really\nmake sense, because they had LLVM-specific information even though\n`rustc_codegen_ssa` is supposed to be somewhat generic. So I removed\nthem as they were misleading.", "tree": {"sha": "5640c28dcba5bb7b20ea2dd8a5990cded498969d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5640c28dcba5bb7b20ea2dd8a5990cded498969d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b32ab671a03e0804e864907d7be4c775b4c6403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b32ab671a03e0804e864907d7be4c775b4c6403", "html_url": "https://github.com/rust-lang/rust/commit/5b32ab671a03e0804e864907d7be4c775b4c6403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b32ab671a03e0804e864907d7be4c775b4c6403/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "html_url": "https://github.com/rust-lang/rust/commit/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf"}], "stats": {"total": 34, "additions": 9, "deletions": 25}, "files": [{"sha": "d5be3132dee10fbe29f8e8667cd82dfe447b8dd7", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=5b32ab671a03e0804e864907d7be4c775b4c6403", "patch": "@@ -1,17 +1,15 @@\n-//! Codegen the completed AST to the LLVM IR.\n-//!\n-//! Some functions here, such as codegen_block and codegen_expr, return a value --\n-//! the result of the codegen to LLVM -- while others, such as codegen_fn\n-//! and mono_item, are called only for the side effect of adding a\n-//! particular definition to the LLVM IR output we're producing.\n+//! Codegen the MIR to the LLVM IR.\n //!\n //! Hopefully useful general knowledge about codegen:\n //!\n-//! * There's no way to find out the `Ty` type of a Value. Doing so\n+//! * There's no way to find out the [`Ty`] type of a [`Value`]. Doing so\n //!   would be \"trying to get the eggs out of an omelette\" (credit:\n-//!   pcwalton). You can, instead, find out its `llvm::Type` by calling `val_ty`,\n-//!   but one `llvm::Type` corresponds to many `Ty`s; for instance, `tup(int, int,\n-//!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n+//!   pcwalton). You can, instead, find out its [`llvm::Type`] by calling [`val_ty`],\n+//!   but one [`llvm::Type`] corresponds to many [`Ty`]s; for instance, `tup(int, int,\n+//!   int)` and `rec(x=int, y=int, z=int)` will have the same [`llvm::Type`].\n+//!\n+//! [`Ty`]: rustc_middle::ty::Ty\n+//! [`val_ty`]: common::val_ty\n \n use super::ModuleLlvm;\n "}, {"sha": "58af9d4cd04a9d116a1b9e1a91f9123fbb5382de", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=5b32ab671a03e0804e864907d7be4c775b4c6403", "patch": "@@ -314,6 +314,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n+/// Get the [LLVM type][Type] of a [`Value`].\n pub fn val_ty(v: &Value) -> &Type {\n     unsafe { llvm::LLVMTypeOf(v) }\n }"}, {"sha": "a10e35e02f3c8f50a9dec232cb62513b756ac15f", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b32ab671a03e0804e864907d7be4c775b4c6403/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=5b32ab671a03e0804e864907d7be4c775b4c6403", "patch": "@@ -1,18 +1,3 @@\n-//! Codegen the completed AST to the LLVM IR.\n-//!\n-//! Some functions here, such as `codegen_block` and `codegen_expr`, return a value --\n-//! the result of the codegen to LLVM -- while others, such as `codegen_fn`\n-//! and `mono_item`, are called only for the side effect of adding a\n-//! particular definition to the LLVM IR output we're producing.\n-//!\n-//! Hopefully useful general knowledge about codegen:\n-//!\n-//! * There's no way to find out the `Ty` type of a `Value`. Doing so\n-//!   would be \"trying to get the eggs out of an omelette\" (credit:\n-//!   pcwalton). You can, instead, find out its `llvm::Type` by calling `val_ty`,\n-//!   but one `llvm::Type` corresponds to many `Ty`s; for instance, `tup(int, int,\n-//!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n-\n use crate::back::write::{\n     compute_per_cgu_lto_type, start_async_codegen, submit_codegened_module_to_llvm,\n     submit_post_lto_module_to_llvm, submit_pre_lto_module_to_llvm, ComputedLtoType, OngoingCodegen,"}]}