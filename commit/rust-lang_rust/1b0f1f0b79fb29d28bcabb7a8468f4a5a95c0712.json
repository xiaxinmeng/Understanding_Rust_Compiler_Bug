{"sha": "1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGYxZjBiNzlmYjI5ZDI4YmNhYmI3YTg0NjhmNGE1YTk1YzA3MTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-10T22:13:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-11T17:51:10Z"}, "message": "Remove the environment argument from bare functions\n\nIssue #1022", "tree": {"sha": "4d4b037736bab0464006c31d2bf40a438473fa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4b037736bab0464006c31d2bf40a438473fa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712", "html_url": "https://github.com/rust-lang/rust/commit/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e98f4f652c8b33b89c238e12052b8b0d9246d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e98f4f652c8b33b89c238e12052b8b0d9246d2", "html_url": "https://github.com/rust-lang/rust/commit/84e98f4f652c8b33b89c238e12052b8b0d9246d2"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "77dfde48c43ab74f1b6fbb42d07ef784db5e30af", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712", "patch": "@@ -98,7 +98,16 @@ fn type_of_fn(cx: @crate_ctxt, sp: span, proto: ast::proto,\n     // Arg 2: Env (closure-bindings / self-obj)\n     if is_method {\n         atys += [T_ptr(cx.rust_object_type)];\n-    } else { atys += [T_opaque_closure_ptr(*cx)]; }\n+    } else {\n+        alt proto {\n+          ast::proto_bare. {\n+            // Bare functions have no environment\n+          }\n+          _ {\n+            atys += [T_opaque_closure_ptr(*cx)];\n+          }\n+        }\n+    }\n \n     // Args >3: ty params, if not acquired via capture...\n     if !is_method {\n@@ -3559,7 +3568,15 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n     }\n \n     // Set up the three implicit arguments to the thunk.\n-    let llargs: [ValueRef] = [llretptr, fcx.lltaskptr, lltargetenv];\n+    let llargs: [ValueRef] = alt ty::ty_fn_proto(ccx.tcx, outgoing_fty) {\n+      ast::proto_bare. {\n+        // Bare functions don't take an environment\n+        [llretptr, fcx.lltaskptr]\n+      }\n+      _ {\n+        [llretptr, fcx.lltaskptr, lltargetenv]\n+      }\n+    };\n \n     // Copy in the type parameters.\n     let i: uint = 0u;\n@@ -3845,7 +3862,12 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n     llargs += [bcx.fcx.lltaskptr];\n \n     // Arg 2: Env (closure-bindings / self-obj)\n-    llargs += [llenv];\n+    alt ty::ty_fn_proto(tcx, fn_ty) {\n+      ast::proto_bare. { }\n+      _ {\n+        llargs += [llenv];\n+      }\n+    }\n \n     // Args >3: ty_params ...\n     llargs += lltydescs;\n@@ -5098,6 +5120,7 @@ fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: span, llfndecl: ValueRef,\n                     id: ast::node_id, rstyle: ast::ret_style)\n     -> @fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n+    // FIXME: llenv is not correct for bare functions\n     ret @{llfn: llfndecl,\n           lltaskptr: llvm::LLVMGetParam(llfndecl, 1u),\n           llenv: llvm::LLVMGetParam(llfndecl, 2u),\n@@ -5128,6 +5151,13 @@ fn new_fn_ctxt(cx: @local_ctxt, sp: span, llfndecl: ValueRef) -> @fn_ctxt {\n     ret new_fn_ctxt_w_id(cx, sp, llfndecl, -1, ast::return_val);\n }\n \n+fn implicit_args_for_fn(proto: ast::proto) -> uint {\n+    alt proto {\n+      ast::proto_bare. { 2u }\n+      _ { 3u }\n+    }\n+}\n+\n // NB: must keep 4 fns in sync:\n //\n //  - type_of_fn\n@@ -5145,10 +5175,8 @@ fn new_fn_ctxt(cx: @local_ctxt, sp: span, llfndecl: ValueRef) -> @fn_ctxt {\n fn create_llargs_for_fn_args(cx: @fn_ctxt, proto: ast::proto,\n                              ty_self: option::t<ty::t>, ret_ty: ty::t,\n                              args: [ast::arg], ty_params: [ast::ty_param]) {\n-    // Skip the implicit arguments 0, 1, and 2.  TODO: Pull out 3u and define\n-    // it as a constant, since we're using it in several places in trans this\n-    // way.\n-    let arg_n = 3u;\n+    // Skip the implicit arguments\n+    let arg_n = implicit_args_for_fn(proto);\n     alt ty_self {\n       some(tt) { cx.llself = some::<val_self_pair>({v: cx.llenv, t: tt}); }\n       none. {"}]}