{"sha": "791beb7a5c7b36a61d9820943c9566425ec91377", "node_id": "C_kwDOAAsO6NoAKDc5MWJlYjdhNWM3YjM2YTYxZDk4MjA5NDNjOTU2NjQyNWVjOTEzNzc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:16:51Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:33:10Z"}, "message": "rustdoc: remove Clean trait impl for ProjectionPredicate", "tree": {"sha": "511037d849b786fee338bfb1d0b6b601fae58e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511037d849b786fee338bfb1d0b6b601fae58e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791beb7a5c7b36a61d9820943c9566425ec91377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791beb7a5c7b36a61d9820943c9566425ec91377", "html_url": "https://github.com/rust-lang/rust/commit/791beb7a5c7b36a61d9820943c9566425ec91377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791beb7a5c7b36a61d9820943c9566425ec91377/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4443fd5d76c6c28bb5954463ee35daf4ee508d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/4443fd5d76c6c28bb5954463ee35daf4ee508d81", "html_url": "https://github.com/rust-lang/rust/commit/4443fd5d76c6c28bb5954463ee35daf4ee508d81"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "63908e167e3e09065bbce381f600f5801f4ac0c5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/791beb7a5c7b36a61d9820943c9566425ec91377/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791beb7a5c7b36a61d9820943c9566425ec91377/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=791beb7a5c7b36a61d9820943c9566425ec91377", "patch": "@@ -330,7 +330,7 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n             ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n             ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n+            ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n             ty::PredicateKind::WellFormed(..) => None,\n \n@@ -418,13 +418,14 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, WherePredicate> for ty::ProjectionPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, term } = self;\n-        WherePredicate::EqPredicate {\n-            lhs: clean_projection(*projection_ty, cx, None),\n-            rhs: term.clean(cx),\n-        }\n+fn clean_projection_predicate<'tcx>(\n+    pred: ty::ProjectionPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> WherePredicate {\n+    let ty::ProjectionPredicate { projection_ty, term } = pred;\n+    WherePredicate::EqPredicate {\n+        lhs: clean_projection(projection_ty, cx, None),\n+        rhs: term.clean(cx),\n     }\n }\n "}]}