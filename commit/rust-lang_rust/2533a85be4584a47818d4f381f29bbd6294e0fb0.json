{"sha": "2533a85be4584a47818d4f381f29bbd6294e0fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzNhODViZTQ1ODRhNDc4MThkNGYzODFmMjliYmQ2Mjk0ZTBmYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T20:42:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T20:42:55Z"}, "message": "Auto merge of #26993 - michaelwoerister:msvc-debuginfo, r=alexcrichton\n\nThis PR will enable RUSTC to generate PDB debuginfo files when targeting the MSVC toolchain. Mind that these are not full featured PDB files -- they just contain line tables, so you can get proper backtraces and step through your code, but variable values can't be inspected. We are just levering (LLVM's current support)[http://clang.llvm.org/docs/MSVCCompatibility.html] for creating Windows debuginfo. When LLVM's support gets better, we should benefit from that too without much effort.\r\n\r\nI also wanted to include some kind of auto test with this PR but I could not get the `rmake` tests to work properly when targeting MSVC.\r\n\r\nEDIT:\r\nCloses #19533", "tree": {"sha": "0ec96b4808e5010ccad8c3aa53c4cad4722d21c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ec96b4808e5010ccad8c3aa53c4cad4722d21c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2533a85be4584a47818d4f381f29bbd6294e0fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2533a85be4584a47818d4f381f29bbd6294e0fb0", "html_url": "https://github.com/rust-lang/rust/commit/2533a85be4584a47818d4f381f29bbd6294e0fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2533a85be4584a47818d4f381f29bbd6294e0fb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680053848928a94f933c5a453c031b458e9766e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/680053848928a94f933c5a453c031b458e9766e0", "html_url": "https://github.com/rust-lang/rust/commit/680053848928a94f933c5a453c031b458e9766e0"}, {"sha": "6c701275b3a4583ccc43d23cdaea607ab2786217", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c701275b3a4583ccc43d23cdaea607ab2786217", "html_url": "https://github.com/rust-lang/rust/commit/6c701275b3a4583ccc43d23cdaea607ab2786217"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "d7849e8f555ba7539a49deef252e5d2cde6d385c", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2533a85be4584a47818d4f381f29bbd6294e0fb0/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2533a85be4584a47818d4f381f29bbd6294e0fb0/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=2533a85be4584a47818d4f381f29bbd6294e0fb0", "patch": "@@ -954,6 +954,9 @@ fn link_args(cmd: &mut Linker,\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n \n+    // Pass debuginfo flags down to the linker.\n+    cmd.debuginfo();\n+\n     // We want to prevent the compiler from accidentally leaking in any system\n     // libraries, so we explicitly ask gcc to not link to any libraries by\n     // default. Note that this does not happen for windows because windows pulls"}, {"sha": "3a709955098c3db0622899741ac4e0fe3917fa38", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2533a85be4584a47818d4f381f29bbd6294e0fb0/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2533a85be4584a47818d4f381f29bbd6294e0fb0/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=2533a85be4584a47818d4f381f29bbd6294e0fb0", "patch": "@@ -16,6 +16,7 @@ use std::fs;\n use back::archive;\n use session::Session;\n use session::config;\n+use session::config::DebugInfoLevel::{NoDebugInfo, LimitedDebugInfo, FullDebugInfo};\n \n /// Linker abstraction used by back::link to build up the command to invoke a\n /// linker.\n@@ -39,6 +40,7 @@ pub trait Linker {\n     fn gc_sections(&mut self, is_dylib: bool);\n     fn position_independent_executable(&mut self);\n     fn optimize(&mut self);\n+    fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n     fn args(&mut self, args: &[String]);\n@@ -143,6 +145,10 @@ impl<'a> Linker for GnuLinker<'a> {\n         }\n     }\n \n+    fn debuginfo(&mut self) {\n+        // Don't do anything special here for GNU-style linkers.\n+    }\n+\n     fn no_default_libraries(&mut self) {\n         // Unfortunately right now passing -nodefaultlibs to gcc on windows\n         // doesn't work so hot (in terms of native dependencies). This if\n@@ -265,6 +271,21 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn optimize(&mut self) {\n         // Needs more investigation of `/OPT` arguments\n     }\n+\n+    fn debuginfo(&mut self) {\n+        match self.sess.opts.debuginfo {\n+            NoDebugInfo => {\n+                // Do nothing if debuginfo is disabled\n+            },\n+            LimitedDebugInfo |\n+            FullDebugInfo    => {\n+                // This will cause the Microsoft linker to generate a PDB file\n+                // from the CodeView line tables in the object files.\n+                self.cmd.arg(\"/DEBUG\");\n+            }\n+        }\n+    }\n+\n     fn whole_archives(&mut self) {\n         // hints not supported?\n     }"}]}