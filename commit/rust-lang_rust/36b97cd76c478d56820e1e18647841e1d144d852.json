{"sha": "36b97cd76c478d56820e1e18647841e1d144d852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Yjk3Y2Q3NmM0NzhkNTY4MjBlMWUxODY0Nzg0MWUxZDE0NGQ4NTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T13:25:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-16T10:24:01Z"}, "message": "Factor out common top-level code from escape-to-raw and retag", "tree": {"sha": "9e3918d9b45d13a2c515650340cf43c2763e68aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3918d9b45d13a2c515650340cf43c2763e68aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b97cd76c478d56820e1e18647841e1d144d852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b97cd76c478d56820e1e18647841e1d144d852", "html_url": "https://github.com/rust-lang/rust/commit/36b97cd76c478d56820e1e18647841e1d144d852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b97cd76c478d56820e1e18647841e1d144d852/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54dcf59aed7f44260df41a800e7855436a205eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54dcf59aed7f44260df41a800e7855436a205eb", "html_url": "https://github.com/rust-lang/rust/commit/c54dcf59aed7f44260df41a800e7855436a205eb"}], "stats": {"total": 79, "additions": 50, "deletions": 29}, "files": [{"sha": "b088a6e845f54a9b875ad1db45262acfb79a9b6c", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/36b97cd76c478d56820e1e18647841e1d144d852/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b97cd76c478d56820e1e18647841e1d144d852/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=36b97cd76c478d56820e1e18647841e1d144d852", "patch": "@@ -303,6 +303,9 @@ impl<'tcx> Stacks {\n         trace!(\"{} access of tag {:?}: {:?}, size {}\",\n             if is_write { \"read\" } else { \"write\" },\n             ptr.tag, ptr, size.bytes());\n+        // Even reads can have a side-effect, by invalidating other references.\n+        // This is fundamentally necessary since `&mut` asserts that there\n+        // are no accesses through other references, not even reads.\n         let mut stacks = self.stacks.borrow_mut();\n         for stack in stacks.iter_mut(ptr.offset, size) {\n             stack.access(ptr.tag, is_write)?;\n@@ -311,6 +314,7 @@ impl<'tcx> Stacks {\n     }\n \n     /// Reborrow the given pointer to the new tag for the given kind of reference.\n+    /// This works on `&self` because we might encounter references to constant memory.\n     fn reborrow(\n         &self,\n         ptr: Pointer<Borrow>,\n@@ -414,8 +418,16 @@ pub trait EvalContextExt<'tcx> {\n         kind: MemoryKind<MiriMemoryKind>,\n     ) -> Borrow;\n \n-    /// Retag an indidual pointer, returning the retagged version.\n+    /// Reborrow the given place, returning the newly tagged ptr to it.\n     fn reborrow(\n+        &mut self,\n+        place: MPlaceTy<'tcx, Borrow>,\n+        size: Size,\n+        new_bor: Borrow\n+    ) -> EvalResult<'tcx, Pointer<Borrow>>;\n+\n+    /// Retag an indidual pointer, returning the retagged version.\n+    fn retag_reference(\n         &mut self,\n         ptr: ImmTy<'tcx, Borrow>,\n         mutbl: Mutability,\n@@ -536,22 +548,46 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n     }\n \n     /// The given place may henceforth be accessed through raw pointers.\n+    #[inline(always)]\n     fn escape_to_raw(\n         &mut self,\n         place: MPlaceTy<'tcx, Borrow>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"escape_to_raw: {:?} is now accessible by raw pointers\", *place);\n-        // Get the allocation\n+        self.reborrow(place, size, Borrow::default())?;\n+        Ok(())\n+    }\n+\n+    fn reborrow(\n+        &mut self,\n+        place: MPlaceTy<'tcx, Borrow>,\n+        size: Size,\n+        new_bor: Borrow\n+    ) -> EvalResult<'tcx, Pointer<Borrow>> {\n         let ptr = place.ptr.to_ptr()?;\n-        self.memory().check_bounds(ptr, size, false)?; // `ptr_dereference` wouldn't do any checks if this is a raw ptr\n+        let new_ptr = Pointer::new_with_tag(ptr.alloc_id, ptr.offset, new_bor);\n+        trace!(\"reborrow: Creating new reference for {:?} (pointee {}): {:?}\",\n+            ptr, place.layout.ty, new_bor);\n+\n+        // Get the allocation.  It might not be mutable, so we cannot use `get_mut`.\n+        self.memory().check_bounds(ptr, size, false)?;\n         let alloc = self.memory().get(ptr.alloc_id).expect(\"We checked that the ptr is fine!\");\n-        // Re-borrow to raw.  This is a NOP for shared borrows, but we do not know the borrow\n-        // type here and that's also okay.  Freezing does not matter here.\n-        alloc.extra.reborrow(ptr, size, Borrow::default(), RefKind::Raw)\n+        // Update the stacks.\n+        if let Borrow::Shr(Some(_)) = new_bor {\n+            // Reference that cares about freezing. We need a frozen-sensitive reborrow.\n+            self.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {\n+                let kind = if frozen { RefKind::Frozen } else { RefKind::Raw };\n+                alloc.extra.reborrow(cur_ptr, size, new_bor, kind)\n+            })?;\n+        } else {\n+            // Just treat this as one big chunk.\n+            let kind = if new_bor.is_unique() { RefKind::Unique } else { RefKind::Raw };\n+            alloc.extra.reborrow(ptr, size, new_bor, kind)?;\n+        }\n+        Ok(new_ptr)\n     }\n \n-    fn reborrow(\n+    fn retag_reference(\n         &mut self,\n         val: ImmTy<'tcx, Borrow>,\n         mutbl: Mutability,\n@@ -566,33 +602,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             return Ok(*val);\n         }\n \n-        // Prepare to re-borrow this place.\n-        let ptr = place.ptr.to_ptr()?;\n+        // Compute new borrow.\n         let time = self.machine.stacked_borrows.increment_clock();\n         let new_bor = match mutbl {\n             MutMutable => Borrow::Uniq(time),\n             MutImmutable => Borrow::Shr(Some(time)),\n         };\n-        trace!(\"reborrow: Creating new {:?} reference for {:?} (pointee {}): {:?}\",\n-            mutbl, ptr, place.layout.ty, new_bor);\n \n-        // Get the allocation.  It might not be mutable, so we cannot use `get_mut`.\n-        self.memory().check_bounds(ptr, size, false)?;\n-        let alloc = self.memory().get(ptr.alloc_id).expect(\"We checked that the ptr is fine!\");\n-        // Update the stacks.\n-        if mutbl == MutImmutable {\n-            // Shared reference. We need a frozen-sensitive reborrow.\n-            self.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {\n-                let kind = if frozen { RefKind::Frozen } else { RefKind::Raw };\n-                alloc.extra.reborrow(cur_ptr, size, new_bor, kind)\n-            })?;\n-        } else {\n-            // Mutable reference. Just treat this as one big chunk.\n-            alloc.extra.reborrow(ptr, size, new_bor, RefKind::Unique)?;\n-        }\n+        // Reborrow.\n+        let new_ptr = self.reborrow(place, size, new_bor)?;\n \n         // Return new ptr\n-        let new_ptr = Pointer::new_with_tag(ptr.alloc_id, ptr.offset, new_bor);\n         let new_place = MemPlace { ptr: Scalar::Ptr(new_ptr), ..*place };\n         Ok(new_place.to_ref())\n     }\n@@ -611,8 +631,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             ty::Ref(_, _, mutbl) => {\n                 // fast path\n                 let val = self.read_immediate(self.place_to_op(place)?)?;\n-                let val = self.reborrow(val, mutbl)?;\n+                let val = self.retag_reference(val, mutbl)?;\n                 self.write_immediate(val, place)?;\n+                return Ok(());\n             }\n             _ => {}, // handled with the general case below\n         };\n@@ -643,7 +664,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n                 match place.layout.ty.sty {\n                     ty::Ref(_, _, mutbl) => {\n                         let val = self.ecx.read_immediate(place.into())?;\n-                        let val = self.ecx.reborrow(val, mutbl)?;\n+                        let val = self.ecx.retag_reference(val, mutbl)?;\n                         self.ecx.write_immediate(val, place.into())?;\n                     }\n                     _ => {}, // nothing to do"}]}