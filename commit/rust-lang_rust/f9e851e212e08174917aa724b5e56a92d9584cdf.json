{"sha": "f9e851e212e08174917aa724b5e56a92d9584cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZTg1MWUyMTJlMDgxNzQ5MTdhYTcyNGI1ZTU2YTkyZDk1ODRjZGY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T14:42:42Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-13T09:36:39Z"}, "message": "pulled strings passes together, added more tests", "tree": {"sha": "ff63360dc6b42e8a9532005cb86bc3ecf8991252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff63360dc6b42e8a9532005cb86bc3ecf8991252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e851e212e08174917aa724b5e56a92d9584cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e851e212e08174917aa724b5e56a92d9584cdf", "html_url": "https://github.com/rust-lang/rust/commit/f9e851e212e08174917aa724b5e56a92d9584cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e851e212e08174917aa724b5e56a92d9584cdf/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c0cf5a9d4076dfe827f33f409e0a4da5069b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c0cf5a9d4076dfe827f33f409e0a4da5069b8b", "html_url": "https://github.com/rust-lang/rust/commit/52c0cf5a9d4076dfe827f33f409e0a4da5069b8b"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "f788c72db3c61cef06c7f2baf524079db88665be", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9e851e212e08174917aa724b5e56a92d9584cdf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e851e212e08174917aa724b5e56a92d9584cdf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f9e851e212e08174917aa724b5e56a92d9584cdf", "patch": "@@ -58,7 +58,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::ModuloOne as LintPassObject);\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n-    reg.register_lint_pass(box strings::StringAddAssign as LintPassObject);\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n     reg.register_lint_pass(box types::LetPass as LintPassObject);"}, {"sha": "85e6501d33628a7ff492f165f9584dc6b702106a", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9e851e212e08174917aa724b5e56a92d9584cdf/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e851e212e08174917aa724b5e56a92d9584cdf/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=f9e851e212e08174917aa724b5e56a92d9584cdf", "patch": "@@ -28,7 +28,7 @@ pub struct StringAdd;\n \n impl LintPass for StringAdd {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(STRING_ADD)\n+        lint_array!(STRING_ADD, STRING_ADD_ASSIGN)\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n@@ -50,21 +50,7 @@ impl LintPass for StringAdd {\n                         \"you add something to a string. \\\n                         Consider using `String::push_str()` instead.\")\n             }\n-        }\n-    }\n-}\n-            \n-\n-#[derive(Copy, Clone)]\n-pub struct StringAddAssign;\n-\n-impl LintPass for StringAddAssign {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(STRING_ADD_ASSIGN)\n-    }\n-\n-    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n-        if let &ExprAssign(ref target, ref  src) = &e.node {\n+        } else if let &ExprAssign(ref target, ref  src) = &e.node {\n             if is_string(cx, target) && is_add(src, target) {\n                 span_lint(cx, STRING_ADD_ASSIGN, e.span,\n                     \"you assign the result of adding something to this string. \\"}, {"sha": "02ebca2fe07a3ac2110b8d85711a9261cf4d44b7", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f9e851e212e08174917aa724b5e56a92d9584cdf/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e851e212e08174917aa724b5e56a92d9584cdf/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=f9e851e212e08174917aa724b5e56a92d9584cdf", "patch": "@@ -1,9 +1,37 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![deny(string_add_assign)]\n-#![deny(string_add)]\n-fn main() {\n+#[deny(string_add)]\n+#[allow(string_add_assign)]\n+fn add_only() { // ignores assignment distinction\n+\tlet mut x = \"\".to_owned();\n+\n+    for _ in (1..3) {\n+        x = x + \".\"; //~ERROR you add something to a string.\n+    }\n+    \n+    let y = \"\".to_owned();\n+    let z = y + \"...\"; //~ERROR you add something to a string.\n+    \n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add_assign)]\n+fn add_assign_only() {\n+\tlet mut x = \"\".to_owned();\n+\n+    for _ in (1..3) {\n+        x = x + \".\"; //~ERROR you assign the result of adding something to this string.\n+    }\n+    \n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+    \n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add, string_add_assign)]\n+fn both() {\n     let mut x = \"\".to_owned();\n \n     for _ in (1..3) {\n@@ -15,3 +43,14 @@ fn main() {\n     \n     assert_eq!(&x, &z);\n }\n+\n+fn main() {\n+\tadd_only();\n+\tadd_assign_only();\n+\tboth();\n+\t\n+\t// the add is only caught for String\n+\tlet mut x = 1;\n+\tx = x + 1;\n+\tassert_eq!(2, x);\n+}"}]}