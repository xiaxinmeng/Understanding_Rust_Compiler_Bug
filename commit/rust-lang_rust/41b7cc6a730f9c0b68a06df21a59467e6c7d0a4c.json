{"sha": "41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYjdjYzZhNzMwZjljMGI2OGEwNmRmMjFhNTk0NjdlNmM3ZDBhNGM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-05T06:31:44Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-05T06:31:44Z"}, "message": "Set combine_control_expr to false by default and true in rfc-rustfmt", "tree": {"sha": "2786f7d15585cece2001feddacecd5eb77871759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2786f7d15585cece2001feddacecd5eb77871759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "html_url": "https://github.com/rust-lang/rust/commit/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0292640e147f0e9debb83f396b4304a2eb3bb4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0292640e147f0e9debb83f396b4304a2eb3bb4c2", "html_url": "https://github.com/rust-lang/rust/commit/0292640e147f0e9debb83f396b4304a2eb3bb4c2"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "e286dcb4b7fbc3a1b05b49de60a555f30541282b", "filename": "rfc-rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/rfc-rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/rfc-rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc-rustfmt.toml?ref=41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "patch": "@@ -4,3 +4,4 @@ control_style = \"Rfc\"\n where_style = \"Rfc\"\n generics_indent = \"Block\"\n fn_call_style = \"Block\"\n+combine_control_expr = true"}, {"sha": "c61b03b88d7911afca92db136456c555a5bb11a4", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "patch": "@@ -576,7 +576,7 @@ create_config! {\n         \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";\n     condense_wildcard_suffixes: bool, false, \"Replace strings of _ wildcards by a single .. in \\\n                                               tuple patterns\";\n-    combine_control_expr: bool, true, \"Combine control expressions with funciton calls.\"\n+    combine_control_expr: bool, false, \"Combine control expressions with funciton calls.\"\n }\n \n #[cfg(test)]"}, {"sha": "0d9ab24a6edc18baf92eb5d25351905e44c20397", "filename": "tests/target/configs-combine_control_expr-false.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/tests%2Ftarget%2Fconfigs-combine_control_expr-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/tests%2Ftarget%2Fconfigs-combine_control_expr-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-combine_control_expr-false.rs?ref=41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "patch": "@@ -0,0 +1,133 @@\n+// rustfmt-fn_call_style: Block\n+// rustfmt-combine_control_expr: false\n+// Combining openings and closings. See https://github.com/rust-lang-nursery/fmt-rfcs/issues/61.\n+\n+fn main() {\n+    // Call\n+    foo(bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Mac\n+    foo(foo!(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // MethodCall\n+    foo(x.foo::<Bar, Baz>(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Block\n+    foo!({\n+        foo();\n+        bar();\n+    });\n+\n+    // Closure\n+    foo(|x| {\n+        let y = x + 1;\n+        y\n+    });\n+\n+    // Match\n+    foo(match opt {\n+        Some(x) => x,\n+        None => y,\n+    });\n+\n+    // Struct\n+    foo(Bar {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    });\n+\n+    // If\n+    foo!(\n+        if x {\n+            foo();\n+        } else {\n+            bar();\n+        }\n+    );\n+\n+    // IfLet\n+    foo!(\n+        if let Some(..) = x {\n+            foo();\n+        } else {\n+            bar();\n+        }\n+    );\n+\n+    // While\n+    foo!(\n+        while x {\n+            foo();\n+            bar();\n+        }\n+    );\n+\n+    // WhileLet\n+    foo!(\n+        while let Some(..) = x {\n+            foo();\n+            bar();\n+        }\n+    );\n+\n+    // ForLoop\n+    foo!(\n+        for x in y {\n+            foo();\n+            bar();\n+        }\n+    );\n+\n+    // Loop\n+    foo!(\n+        loop {\n+            foo();\n+            bar();\n+        }\n+    );\n+\n+    // Tuple\n+    foo((\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // AddrOf\n+    foo(&bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Box\n+    foo(box Bar {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    });\n+\n+    // Unary\n+    foo(!bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Try\n+    foo(bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    )?);\n+\n+    // Cast\n+    foo(Bar {\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+    } as i64);\n+}"}, {"sha": "925d223353903ed26a4dd90cd8e7e1b4b52d2df7", "filename": "tests/target/configs-combine_control_expr-true.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/tests%2Ftarget%2Fconfigs-combine_control_expr-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c/tests%2Ftarget%2Fconfigs-combine_control_expr-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-combine_control_expr-true.rs?ref=41b7cc6a730f9c0b68a06df21a59467e6c7d0a4c", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-fn_call_style: Block\n+// rustfmt-combine_control_expr: true\n // Combining openings and closings. See https://github.com/rust-lang-nursery/fmt-rfcs/issues/61.\n \n fn main() {", "previous_filename": "tests/target/combining.rs"}]}