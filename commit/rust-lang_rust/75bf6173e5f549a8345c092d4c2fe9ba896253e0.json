{"sha": "75bf6173e5f549a8345c092d4c2fe9ba896253e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YmY2MTczZTVmNTQ5YTgzNDVjMDkyZDRjMmZlOWJhODk2MjUzZTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-06T05:23:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-09T20:17:00Z"}, "message": "trans: Make glue::get_drop_glue_type() independent of CrateContext.", "tree": {"sha": "b99012b7a26b75fd522e5ab69ec6352a2de3e807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99012b7a26b75fd522e5ab69ec6352a2de3e807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75bf6173e5f549a8345c092d4c2fe9ba896253e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75bf6173e5f549a8345c092d4c2fe9ba896253e0", "html_url": "https://github.com/rust-lang/rust/commit/75bf6173e5f549a8345c092d4c2fe9ba896253e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75bf6173e5f549a8345c092d4c2fe9ba896253e0/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f74c6afe0821778047ec46f29b815fc30f7ec1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f74c6afe0821778047ec46f29b815fc30f7ec1f", "html_url": "https://github.com/rust-lang/rust/commit/3f74c6afe0821778047ec46f29b815fc30f7ec1f"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "ac42eb0ee623df805d0f0cc93dfef9222a762b83", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=75bf6173e5f549a8345c092d4c2fe9ba896253e0", "patch": "@@ -390,7 +390,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n         TransItem::Static(node_id) => {\n             let def_id = ccx.tcx().map.local_def_id(node_id);\n             let ty = ccx.tcx().lookup_item_type(def_id).ty;\n-            let ty = glue::get_drop_glue_type(ccx, ty);\n+            let ty = glue::get_drop_glue_type(ccx.tcx(), ty);\n             neighbors.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n             recursion_depth_reset = None;\n         }\n@@ -554,7 +554,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                       self.param_substs,\n                                                       &ty);\n             let ty = self.ccx.tcx().erase_regions(&ty);\n-            let ty = glue::get_drop_glue_type(self.ccx, ty);\n+            let ty = glue::get_drop_glue_type(self.ccx.tcx(), ty);\n             self.output.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n         }\n \n@@ -740,7 +740,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 let field_type = monomorphize::apply_param_substs(ccx.tcx(),\n                                                                   substs,\n                                                                   &field.unsubst_ty());\n-                let field_type = glue::get_drop_glue_type(ccx, field_type);\n+                let field_type = glue::get_drop_glue_type(ccx.tcx(), field_type);\n \n                 if glue::type_needs_drop(ccx.tcx(), field_type) {\n                     output.push(TransItem::DropGlue(DropGlueKind::Ty(field_type)));\n@@ -749,22 +749,22 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyClosure(_, ref substs) => {\n             for upvar_ty in &substs.upvar_tys {\n-                let upvar_ty = glue::get_drop_glue_type(ccx, upvar_ty);\n+                let upvar_ty = glue::get_drop_glue_type(ccx.tcx(), upvar_ty);\n                 if glue::type_needs_drop(ccx.tcx(), upvar_ty) {\n                     output.push(TransItem::DropGlue(DropGlueKind::Ty(upvar_ty)));\n                 }\n             }\n         }\n         ty::TyBox(inner_type)      |\n         ty::TyArray(inner_type, _) => {\n-            let inner_type = glue::get_drop_glue_type(ccx, inner_type);\n+            let inner_type = glue::get_drop_glue_type(ccx.tcx(), inner_type);\n             if glue::type_needs_drop(ccx.tcx(), inner_type) {\n                 output.push(TransItem::DropGlue(DropGlueKind::Ty(inner_type)));\n             }\n         }\n         ty::TyTuple(ref args) => {\n             for arg in args {\n-                let arg = glue::get_drop_glue_type(ccx, arg);\n+                let arg = glue::get_drop_glue_type(ccx.tcx(), arg);\n                 if glue::type_needs_drop(ccx.tcx(), arg) {\n                     output.push(TransItem::DropGlue(DropGlueKind::Ty(arg)));\n                 }\n@@ -1079,7 +1079,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                                def_id_to_string(self.ccx.tcx(),\n                                                 self.ccx.tcx().map.local_def_id(item.id)));\n \n-                        let ty = glue::get_drop_glue_type(self.ccx, ty);\n+                        let ty = glue::get_drop_glue_type(self.ccx.tcx(), ty);\n                         self.output.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n                     }\n                 }"}, {"sha": "e83580b95bcc4fd7e5b6a9b1ac84ef8f3dab90ba", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=75bf6173e5f549a8345c092d4c2fe9ba896253e0", "patch": "@@ -19,7 +19,7 @@ use llvm;\n use llvm::{ValueRef, get_param};\n use middle::lang_items::ExchangeFreeFnLangItem;\n use rustc::ty::subst::{Substs};\n-use rustc::traits;\n+use rustc::{infer, traits};\n use rustc::ty::{self, Ty, TyCtxt};\n use abi::{Abi, FnType};\n use adt;\n@@ -92,13 +92,12 @@ pub fn type_needs_drop<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     tcx.type_needs_drop_given_env(ty, &tcx.empty_parameter_environment())\n }\n \n-pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                    t: Ty<'tcx>) -> Ty<'tcx> {\n-    let tcx = ccx.tcx();\n+pub fn get_drop_glue_type<'tcx>(tcx: &TyCtxt<'tcx>,\n+                                t: Ty<'tcx>) -> Ty<'tcx> {\n     // Even if there is no dtor for t, there might be one deeper down and we\n     // might need to pass in the vtable ptr.\n     if !type_is_sized(tcx, t) {\n-        return ccx.tcx().erase_regions(&t);\n+        return tcx.erase_regions(&t);\n     }\n \n     // FIXME (#22815): note that type_needs_drop conservatively\n@@ -116,15 +115,18 @@ pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     match t.sty {\n         ty::TyBox(typ) if !type_needs_drop(&tcx, typ)\n                          && type_is_sized(tcx, typ) => {\n-            let llty = sizing_type_of(ccx, typ);\n-            // `Box<ZeroSizeType>` does not allocate.\n-            if llsize_of_alloc(ccx, llty) == 0 {\n+            let infcx = infer::normalizing_infer_ctxt(tcx,\n+                                                      &tcx.tables,\n+                                                      traits::ProjectionMode::Any);\n+            let layout = t.layout(&infcx).unwrap();\n+            if layout.size(&tcx.data_layout).bytes() == 0 {\n+                // `Box<ZeroSizeType>` does not allocate.\n                 tcx.types.i8\n             } else {\n-                ccx.tcx().erase_regions(&t)\n+                tcx.erase_regions(&t)\n             }\n         }\n-        _ => ccx.tcx().erase_regions(&t)\n+        _ => tcx.erase_regions(&t)\n     }\n }\n \n@@ -154,7 +156,7 @@ pub fn drop_ty_core<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             DropGlueKind::Ty(t)\n         };\n         let glue = get_drop_glue_core(ccx, g);\n-        let glue_type = get_drop_glue_type(ccx, t);\n+        let glue_type = get_drop_glue_type(ccx.tcx(), t);\n         let ptr = if glue_type != t {\n             PointerCast(bcx, v, type_of(ccx, glue_type).ptr_to())\n         } else {\n@@ -231,7 +233,7 @@ impl<'tcx> DropGlueKind<'tcx> {\n fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 g: DropGlueKind<'tcx>) -> ValueRef {\n     debug!(\"make drop glue for {:?}\", g);\n-    let g = g.map_ty(|t| get_drop_glue_type(ccx, t));\n+    let g = g.map_ty(|t| get_drop_glue_type(ccx.tcx(), t));\n     debug!(\"drop glue type {:?}\", g);\n     match ccx.drop_glues().borrow().get(&g) {\n         Some(&glue) => return glue,"}, {"sha": "39bf0da5cf957236075448c1757bb67c65ca514b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf6173e5f549a8345c092d4c2fe9ba896253e0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=75bf6173e5f549a8345c092d4c2fe9ba896253e0", "patch": "@@ -136,7 +136,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     return;\n                 }\n                 let drop_fn = glue::get_drop_glue(bcx.ccx(), ty);\n-                let drop_ty = glue::get_drop_glue_type(bcx.ccx(), ty);\n+                let drop_ty = glue::get_drop_glue_type(bcx.tcx(), ty);\n                 let llvalue = if drop_ty != ty {\n                     bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n                 } else {"}]}