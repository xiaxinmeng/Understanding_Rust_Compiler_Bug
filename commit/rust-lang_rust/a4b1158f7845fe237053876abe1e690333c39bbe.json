{"sha": "a4b1158f7845fe237053876abe1e690333c39bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YjExNThmNzg0NWZlMjM3MDUzODc2YWJlMWU2OTAzMzNjMzliYmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-18T18:02:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:55Z"}, "message": "Move handle_deadlock where it is used.", "tree": {"sha": "f722261758d6560deaeefe444504858e04325e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f722261758d6560deaeefe444504858e04325e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b1158f7845fe237053876abe1e690333c39bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b1158f7845fe237053876abe1e690333c39bbe", "html_url": "https://github.com/rust-lang/rust/commit/a4b1158f7845fe237053876abe1e690333c39bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b1158f7845fe237053876abe1e690333c39bbe/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "html_url": "https://github.com/rust-lang/rust/commit/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "b78bf583205c9fdfef256936c8cace5fb2646586", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1158f7845fe237053876abe1e690333c39bbe/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1158f7845fe237053876abe1e690333c39bbe/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a4b1158f7845fe237053876abe1e690333c39bbe", "patch": "@@ -3878,6 +3878,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n  \"rustc-rayon\",\n+ \"rustc-rayon-core\",\n  \"rustc_ast\",\n  \"rustc_ast_lowering\",\n  \"rustc_ast_passes\","}, {"sha": "a1ac155d57a33a47774e12892714ec96870f078e", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=a4b1158f7845fe237053876abe1e690333c39bbe", "patch": "@@ -10,6 +10,7 @@ doctest = false\n [dependencies]\n libc = \"0.2\"\n tracing = \"0.1\"\n+rustc-rayon-core = \"0.3.0\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "798996263c7007d57cfd14e741ac1b0281a6fb15", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=a4b1158f7845fe237053876abe1e690333c39bbe", "patch": "@@ -10,6 +10,8 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n+#[cfg(parallel_compiler)]\n+use rustc_middle::ty::tls;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{self, CrateType};\n@@ -29,11 +31,12 @@ use std::io;\n use std::lazy::SyncOnceCell;\n use std::mem;\n use std::ops::DerefMut;\n+#[cfg(not(parallel_compiler))]\n+use std::panic;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::{Arc, Mutex, Once};\n-#[cfg(not(parallel_compiler))]\n-use std::{panic, thread};\n+use std::thread;\n use tracing::info;\n \n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n@@ -156,22 +159,43 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n     scoped_thread(cfg, main_handler)\n }\n \n+/// Creates a new thread and forwards information in thread locals to it.\n+/// The new thread runs the deadlock handler.\n+/// Must only be called when a deadlock is about to happen.\n+#[cfg(parallel_compiler)]\n+unsafe fn handle_deadlock() {\n+    let registry = rustc_rayon_core::Registry::current();\n+\n+    let context = tls::get_tlv();\n+    assert!(context != 0);\n+    rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n+    let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n+\n+    let session_globals = rustc_span::SESSION_GLOBALS.with(|sg| sg as *const _);\n+    let session_globals = &*session_globals;\n+    thread::spawn(move || {\n+        tls::enter_context(icx, |_| {\n+            rustc_span::SESSION_GLOBALS\n+                .set(session_globals, || tls::with(|tcx| tcx.queries.deadlock(tcx, &registry)))\n+        });\n+    });\n+}\n+\n #[cfg(parallel_compiler)]\n pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n-    use rustc_middle::ty;\n     crate::callbacks::setup_callbacks();\n \n     let mut config = rayon::ThreadPoolBuilder::new()\n         .thread_name(|_| \"rustc\".to_string())\n         .acquire_thread_handler(jobserver::acquire_thread)\n         .release_thread_handler(jobserver::release_thread)\n         .num_threads(threads)\n-        .deadlock_handler(|| unsafe { ty::query::handle_deadlock() });\n+        .deadlock_handler(|| unsafe { handle_deadlock() });\n \n     if let Some(size) = get_stack_size() {\n         config = config.stack_size(size);"}, {"sha": "668109693a8b4fd10c342804df5145eb7d3cceae", "filename": "compiler/rustc_middle/src/ty/query/job.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -1,24 +0,0 @@\n-use crate::ty::tls;\n-use rustc_rayon_core as rayon_core;\n-use std::thread;\n-\n-/// Creates a new thread and forwards information in thread locals to it.\n-/// The new thread runs the deadlock handler.\n-/// Must only be called when a deadlock is about to happen.\n-pub unsafe fn handle_deadlock() {\n-    let registry = rayon_core::Registry::current();\n-\n-    let context = tls::get_tlv();\n-    assert!(context != 0);\n-    rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n-    let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n-\n-    let session_globals = rustc_span::SESSION_GLOBALS.with(|sg| sg as *const _);\n-    let session_globals = &*session_globals;\n-    thread::spawn(move || {\n-        tls::enter_context(icx, |_| {\n-            rustc_span::SESSION_GLOBALS\n-                .set(session_globals, || tls::with(|tcx| tcx.queries.deadlock(tcx, &registry)))\n-        });\n-    });\n-}"}, {"sha": "5a2c51f88cdfa279aca27990a124969f5493b69f", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=a4b1158f7845fe237053876abe1e690333c39bbe", "patch": "@@ -68,10 +68,6 @@ use rustc_query_system::query::*;\n mod stats;\n pub use self::stats::print_stats;\n \n-#[cfg(parallel_compiler)]\n-mod job;\n-#[cfg(parallel_compiler)]\n-pub use self::job::handle_deadlock;\n pub use rustc_query_system::query::{QueryInfo, QueryJob, QueryJobId};\n \n mod keys;"}, {"sha": "8d006ad656423a9fcf2d1584d8e9cc5a4b8c8bb2", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1158f7845fe237053876abe1e690333c39bbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=a4b1158f7845fe237053876abe1e690333c39bbe", "patch": "@@ -592,7 +592,7 @@ macro_rules! define_queries_struct {\n             }\n \n             #[cfg(parallel_compiler)]\n-            unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry) {\n+            pub unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry) {\n                 let tcx = QueryCtxt { tcx, queries: self };\n                 rustc_query_system::query::deadlock(tcx, registry)\n             }"}]}