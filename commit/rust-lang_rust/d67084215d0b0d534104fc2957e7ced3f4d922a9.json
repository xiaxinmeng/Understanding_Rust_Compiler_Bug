{"sha": "d67084215d0b0d534104fc2957e7ced3f4d922a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzA4NDIxNWQwYjBkNTM0MTA0ZmMyOTU3ZTdjZWQzZjRkOTIyYTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T09:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-22T09:51:16Z"}, "message": "Rollup merge of #48759 - QuietMisdreavus:simd-feature-docs, r=GuillaumeGomez\n\nrustdoc: expose #[target_feature] attributes as doc(cfg) flags\n\nThis change exposes `#[target_feature(enable = \"feat\")]` attributes on an item as if they were also `#[doc(cfg(target_feature = \"feat\"))]` attributes. This gives them a banner on their documentation listing which feature is required to use the item. It also modifies the rendering code for doc(cfg) tags to handle `target_feature` tags. I made it print just the feature name on \"short\" printings (as in the function listing on a module page), and use \"target feature `feat`\" in the full banner on the item page itself.\n\nThis way, the function listing in `std::arch` shows which feature is required for each function:\n\n![image](https://user-images.githubusercontent.com/5217170/37003222-f41b9d66-2091-11e8-9656-8719e5b34832.png)\n\n![image](https://user-images.githubusercontent.com/5217170/37003234-feb1a7a2-2091-11e8-94de-6d1d76a2d3ee.png)", "tree": {"sha": "0707b271d68a805fca497b94c511175920d23869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0707b271d68a805fca497b94c511175920d23869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d67084215d0b0d534104fc2957e7ced3f4d922a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJas3yUCRBK7hj4Ov3rIwAAdHIIAJDUJheH8y0kYszQ0dn+MlYX\nEBj3J+oO8srZy5atZJjVAfFtWJR1awmMOOzUs4WgsqV7On89uXzjZRs+XO8y70eJ\nNEGVvvhmn5yahc5bVY7B3oyNkmsHAlVWSbaNopF1mPBM29N5FDE5a1l+HYNbgLXV\nbc9QbpkOC3whrpGhyVYcJBH18zVkFUVfpg2yN4lW0CkmhgIYgTcN+EzxQ+Fm0FkZ\npJmmD0esReY7p+5eZHyscKqZEsevhA9lDF9EzDfLq5/VJx+73aTSwg2kUqxGs16l\nEz/JX9Qwf4PQsyWFGA+P0wFk8gXaEWslG/q41k/OQbhSlw1C+xuwK87zagcyuqQ=\n=gfir\n-----END PGP SIGNATURE-----\n", "payload": "tree 0707b271d68a805fca497b94c511175920d23869\nparent a848336a316e0c19c010644d9942bd5ac8794834\nparent b3fb0d10f03fe7d8f2eaa705a972b0f45e1723db\nauthor kennytm <kennytm@gmail.com> 1521712276 +0800\ncommitter GitHub <noreply@github.com> 1521712276 +0800\n\nRollup merge of #48759 - QuietMisdreavus:simd-feature-docs, r=GuillaumeGomez\n\nrustdoc: expose #[target_feature] attributes as doc(cfg) flags\n\nThis change exposes `#[target_feature(enable = \"feat\")]` attributes on an item as if they were also `#[doc(cfg(target_feature = \"feat\"))]` attributes. This gives them a banner on their documentation listing which feature is required to use the item. It also modifies the rendering code for doc(cfg) tags to handle `target_feature` tags. I made it print just the feature name on \"short\" printings (as in the function listing on a module page), and use \"target feature `feat`\" in the full banner on the item page itself.\n\nThis way, the function listing in `std::arch` shows which feature is required for each function:\n\n![image](https://user-images.githubusercontent.com/5217170/37003222-f41b9d66-2091-11e8-9656-8719e5b34832.png)\n\n![image](https://user-images.githubusercontent.com/5217170/37003234-feb1a7a2-2091-11e8-94de-6d1d76a2d3ee.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d67084215d0b0d534104fc2957e7ced3f4d922a9", "html_url": "https://github.com/rust-lang/rust/commit/d67084215d0b0d534104fc2957e7ced3f4d922a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d67084215d0b0d534104fc2957e7ced3f4d922a9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a848336a316e0c19c010644d9942bd5ac8794834", "url": "https://api.github.com/repos/rust-lang/rust/commits/a848336a316e0c19c010644d9942bd5ac8794834", "html_url": "https://github.com/rust-lang/rust/commit/a848336a316e0c19c010644d9942bd5ac8794834"}, {"sha": "b3fb0d10f03fe7d8f2eaa705a972b0f45e1723db", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3fb0d10f03fe7d8f2eaa705a972b0f45e1723db", "html_url": "https://github.com/rust-lang/rust/commit/b3fb0d10f03fe7d8f2eaa705a972b0f45e1723db"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "c228f54217d34c7f583dff93ef4744cf867d942d", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=d67084215d0b0d534104fc2957e7ced3f4d922a9", "patch": "@@ -138,7 +138,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = Html(self).to_string();\n+        let mut msg = ShortHtml(self).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i .. i+1].make_ascii_uppercase();\n@@ -149,7 +149,13 @@ impl Cfg {\n \n     /// Renders the configuration for long display, as a long HTML description.\n     pub(crate) fn render_long_html(&self) -> String {\n-        let mut msg = format!(\"This is supported on <strong>{}</strong>\", Html(self));\n+        let on = if self.should_use_with_in_description() {\n+            \"with\"\n+        } else {\n+            \"on\"\n+        };\n+\n+        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -180,6 +186,13 @@ impl Cfg {\n             }\n         }\n     }\n+\n+    fn should_use_with_in_description(&self) -> bool {\n+        match *self {\n+            Cfg::Cfg(ref name, _) if name == &\"target_feature\" => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl ops::Not for Cfg {\n@@ -376,6 +389,8 @@ impl<'a> fmt::Display for Html<'a> {\n                     },\n                     (\"target_endian\", Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (\"target_pointer_width\", Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n+                    (\"target_feature\", Some(feat)) =>\n+                        return write!(fmt, \"target feature <code>{}</code>\", feat),\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n@@ -390,6 +405,19 @@ impl<'a> fmt::Display for Html<'a> {\n     }\n }\n \n+struct ShortHtml<'a>(&'a Cfg);\n+\n+impl<'a> fmt::Display for ShortHtml<'a> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        match *self.0 {\n+            Cfg::Cfg(ref name, Some(ref vendor)) if name == &\"target_feature\" => {\n+                write!(fmt, \"<code>{}</code>\", vendor)\n+            },\n+            ref cfg => write!(fmt, \"{}\", Html(cfg)),\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::Cfg;\n@@ -824,6 +852,10 @@ mod test {\n                 ).render_short_html(),\n                 \"(Debug-assertions enabled or Windows) and Unix\"\n             );\n+            assert_eq!(\n+                name_value_cfg(\"target_feature\", \"sse2\").render_short_html(),\n+                \"<code>sse2</code>\"\n+            );\n         })\n     }\n \n@@ -898,6 +930,10 @@ mod test {\n                 \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n                 </strong> only.\"\n             );\n+            assert_eq!(\n+                name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n+                \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n+            );\n         })\n     }\n }"}, {"sha": "b3ee685fb84c0d0bce035151c66177db34281f01", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d67084215d0b0d534104fc2957e7ced3f4d922a9", "patch": "@@ -828,6 +828,19 @@ impl Attributes {\n             })\n         }).collect();\n \n+        // treat #[target_feature(enable = \"feat\")] attributes as if they were\n+        // #[doc(cfg(target_feature = \"feat\"))] attributes as well\n+        for attr in attrs.lists(\"target_feature\") {\n+            if attr.check_name(\"enable\") {\n+                if let Some(feat) = attr.value_str() {\n+                    let meta = attr::mk_name_value_item_str(\"target_feature\".into(), feat);\n+                    if let Ok(feat_cfg) = Cfg::parse(&meta) {\n+                        cfg &= feat_cfg;\n+                    }\n+                }\n+            }\n+        }\n+\n         Attributes {\n             doc_strings,\n             other_attrs,"}, {"sha": "ea8a13b034beb244eaf4a716864f1317ec70f07d", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d67084215d0b0d534104fc2957e7ced3f4d922a9/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=d67084215d0b0d534104fc2957e7ced3f4d922a9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(doc_cfg)]\n+#![feature(target_feature, cfg_target_feature)]\n \n // @has doc_cfg/struct.Portable.html\n // @!has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' ''\n@@ -45,3 +46,26 @@ pub mod unix_only {\n         fn unix_and_arm_only_function() {}\n     }\n }\n+\n+// tagging a function with `#[target_feature]` creates a doc(cfg(target_feature)) node for that\n+// item as well\n+\n+// the portability header is different on the module view versus the full view\n+// @has doc_cfg/index.html\n+// @matches - '//*[@class=\" module-item\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n+\n+// @has doc_cfg/fn.uses_target_feature.html\n+// @has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+//        'This is supported with target feature avx only.'\n+#[target_feature(enable = \"avx\")]\n+pub unsafe fn uses_target_feature() {\n+    content::should::be::irrelevant();\n+}\n+\n+// @has doc_cfg/fn.uses_cfg_target_feature.html\n+// @has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+//        'This is supported with target feature avx only.'\n+#[doc(cfg(target_feature = \"avx\"))]\n+pub fn uses_cfg_target_feature() {\n+    uses_target_feature();\n+}"}]}