{"sha": "37a0e52a1ed5077ab587f5524a9ac623cc71b223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTBlNTJhMWVkNTA3N2FiNTg3ZjU1MjRhOWFjNjIzY2M3MWIyMjM=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-02-08T20:07:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T20:07:19Z"}, "message": "Merge pull request #1520 from Manishearth/rustup\n\nrustup and compile-fail -> ui test move", "tree": {"sha": "7735fe6882393d24a221c1ad481b8fe50776d30f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7735fe6882393d24a221c1ad481b8fe50776d30f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a0e52a1ed5077ab587f5524a9ac623cc71b223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a0e52a1ed5077ab587f5524a9ac623cc71b223", "html_url": "https://github.com/rust-lang/rust/commit/37a0e52a1ed5077ab587f5524a9ac623cc71b223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a0e52a1ed5077ab587f5524a9ac623cc71b223/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96290df9f228b63db145a7aa9add800223bfc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96290df9f228b63db145a7aa9add800223bfc27", "html_url": "https://github.com/rust-lang/rust/commit/d96290df9f228b63db145a7aa9add800223bfc27"}, {"sha": "ebb68c870716e25fe5da5fa64b3ad79a5fc1dca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb68c870716e25fe5da5fa64b3ad79a5fc1dca3", "html_url": "https://github.com/rust-lang/rust/commit/ebb68c870716e25fe5da5fa64b3ad79a5fc1dca3"}], "stats": {"total": 18012, "additions": 15013, "deletions": 2999}, "files": [{"sha": "b72387f0d71883a7caef12c32edcff38756c3584", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.114 \u2014 2017-02-08\n+* Rustup to rustc 1.17.0-nightly (c49d10207 2017-02-07)\n+* Tests are now ui tests (testing the exact output of rustc)\n+\n ## 0.0.113 \u2014 2017-02-04\n * Rustup to *rustc 1.16.0-nightly (eedaa94e3 2017-02-02)*\n * New lint: [`large_enum_variant`]"}, {"sha": "d481cfe0fa90c17dca679b01c87b5b5b74b9e1f8", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -40,6 +40,11 @@ contains some questionable code itself! Also before making a pull request, pleas\n `util/update_lints.py`, which will update `lib.rs` and `README.md` with the lint declarations. Our\n travis build actually checks for this.\n \n+Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected.\n+Of course there's little sense in writing the output yourself or copying it around.\n+Therefore you can simply run `tests/ui/update-all-references.sh` and check whether\n+the output looks as you expect with `git diff`. Commit all `*.stderr` files, too.\n+\n Also please document your lint with a doc comment akin to the following:\n ```rust\n /// **What it does:** Checks for ... (describe what the lint matches)."}, {"sha": "a45a7edf0fe29361561e19b56743cbd9f47a5d2d", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.113\"\n+version = \"0.0.114\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -30,7 +30,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.113\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.114\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.1.1\"\n "}, {"sha": "3f3ed135e0cea2781a196c7e5ac06c37c9f78f38", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 185 lints included in this crate:\n+There are 186 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------"}, {"sha": "d7a95ba04dd4c179b89920c5f30930bc56ec1d0a", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.113\"\n+version = \"0.0.114\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "951dd51dec44f6d8b25281898326ce2abf7eb30a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -158,7 +158,7 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                             TypeVariants::TyFnPtr(..) => {\n                                 return;\n                             },\n-                            TypeVariants::TyTuple(tys) if tys.len() > 12 => {\n+                            TypeVariants::TyTuple(tys, _) if tys.len() > 12 => {\n                                 return;\n                             },\n                             _ => (),"}, {"sha": "b1581127c3250333b3fc8c6afe71e8be86b1370e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -197,7 +197,7 @@ fn check_let_unit(cx: &LateContext, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n         let bindtype = &cx.tables.pat_ty(&local.pat).sty;\n         match *bindtype {\n-            ty::TyTuple(slice) if slice.is_empty() => {\n+            ty::TyTuple(slice, _) if slice.is_empty() => {\n                 if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n                     return;\n                 }\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n             if op.is_comparison() {\n                 let sty = &cx.tables.expr_ty(left).sty;\n                 match *sty {\n-                    ty::TyTuple(slice) if slice.is_empty() => {\n+                    ty::TyTuple(slice, _) if slice.is_empty() => {\n                         let result = match op {\n                             BiEq | BiLe | BiGe => \"true\",\n                             _ => \"false\","}, {"sha": "cf69473bbe5f6ffd2acea28d222a0458dc9b2e31", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,93 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n-\n-fn main() {\n-    const Z: u32 = 0;\n-\n-    let u: u32 = 42;\n-\n-    u <= 0;\n-    //~^ ERROR this comparison involving the minimum or maximum element for this type contains a\n-    //~| HELP using u == 0 instead\n-    u <= Z;\n-    //~^ ERROR this comparison involving\n-    //~| HELP using u == Z instead\n-    u < Z;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-    Z >= u;\n-    //~^ ERROR this comparison involving\n-    //~| HELP using Z == u instead\n-    Z > u;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-    u > std::u32::MAX;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-    u >= std::u32::MAX;\n-    //~^ ERROR this comparison involving\n-    //~| HELP using u == std::u32::MAX instead\n-    std::u32::MAX < u;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-    std::u32::MAX <= u;\n-    //~^ ERROR this comparison involving\n-    //~| HELP using std::u32::MAX == u instead\n-\n-    1-1 > u;\n-        //~^ ERROR this comparison involving\n-        //~| HELP because 1-1 is the minimum value for this type, this comparison is always false\n-    u >= !0;\n-        //~^ ERROR this comparison involving\n-        //~| HELP consider using u == !0 instead\n-    u <= 12 - 2*6;\n-        //~^ ERROR this comparison involving\n-        //~| HELP consider using u == 12 - 2*6 instead\n-\n-    let i: i8 = 0;\n-    i < -127 - 1;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-    std::i8::MAX >= i;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always true\n-    3-7 < std::i32::MIN;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-\n-    let b = false;\n-    b >= true;\n-    //~^ ERROR this comparison involving\n-    //~| HELP using b == true instead\n-    false > b;\n-    //~^ ERROR this comparison involving\n-    //~| HELP comparison is always false\n-\n-    u > 0; // ok\n-\n-    // this is handled by unit_cmp\n-    () < {}; //~WARNING <-comparison of unit values detected.\n-}\n-\n-use std::cmp::{Ordering, PartialEq, PartialOrd};\n-\n-#[derive(PartialEq, PartialOrd)]\n-pub struct U(u64);\n-\n-impl PartialEq<u32> for U {\n-    fn eq(&self, other: &u32) -> bool {\n-        self.eq(&U(*other as u64))\n-    }\n-}\n-impl PartialOrd<u32> for U {\n-    fn partial_cmp(&self, other: &u32) -> Option<Ordering> {\n-        self.partial_cmp(&U(*other as u64))\n-    }\n-}\n-\n-pub fn foo(val: U) -> bool {\n-    val > std::u32::MAX\n-}"}, {"sha": "2240c3799a3c91e1ff141d61a92b35be9f73a15f", "filename": "tests/compile-fail/approx_const.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fapprox_const.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,57 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(approx_constant)]\n-#[allow(unused, shadow_unrelated, similar_names)]\n-fn main() {\n-    let my_e = 2.7182; //~ERROR approximate value of `f{32, 64}::consts::E` found\n-    let almost_e = 2.718; //~ERROR approximate value of `f{32, 64}::consts::E` found\n-    let no_e = 2.71;\n-\n-    let my_1_frac_pi = 0.3183; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_PI` found\n-    let no_1_frac_pi = 0.31;\n-\n-    let my_frac_1_sqrt_2 = 0.70710678; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n-    let almost_frac_1_sqrt_2 = 0.70711; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n-    let my_frac_1_sqrt_2 = 0.707;\n-\n-    let my_frac_2_pi = 0.63661977; //~ERROR approximate value of `f{32, 64}::consts::FRAC_2_PI` found\n-    let no_frac_2_pi = 0.636;\n-\n-    let my_frac_2_sq_pi = 1.128379; //~ERROR approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found\n-    let no_frac_2_sq_pi = 1.128;\n-\n-    let my_frac_pi_2 = 1.57079632679; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_2` found\n-    let no_frac_pi_2 = 1.5705;\n-\n-    let my_frac_pi_3 = 1.04719755119; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_3` found\n-    let no_frac_pi_3 = 1.047;\n-\n-    let my_frac_pi_4 = 0.785398163397; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_4` found\n-    let no_frac_pi_4 = 0.785;\n-\n-    let my_frac_pi_6 = 0.523598775598; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_6` found\n-    let no_frac_pi_6 = 0.523;\n-\n-    let my_frac_pi_8 = 0.3926990816987; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_8` found\n-    let no_frac_pi_8 = 0.392;\n-\n-    let my_ln_10 = 2.302585092994046; //~ERROR approximate value of `f{32, 64}::consts::LN_10` found\n-    let no_ln_10 = 2.303;\n-\n-    let my_ln_2 = 0.6931471805599453; //~ERROR approximate value of `f{32, 64}::consts::LN_2` found\n-    let no_ln_2 = 0.693;\n-\n-    let my_log10_e = 0.43429448190325182; //~ERROR approximate value of `f{32, 64}::consts::LOG10_E` found\n-    let no_log10_e = 0.434;\n-\n-    let my_log2_e = 1.4426950408889634; //~ERROR approximate value of `f{32, 64}::consts::LOG2_E` found\n-    let no_log2_e = 1.442;\n-\n-    let my_pi = 3.1415; //~ERROR approximate value of `f{32, 64}::consts::PI` found\n-    let almost_pi = 3.14; //~ERROR approximate value of `f{32, 64}::consts::PI` found\n-    let no_pi = 3.15;\n-\n-    let my_sq2 = 1.4142; //~ERROR approximate value of `f{32, 64}::consts::SQRT_2` found\n-    let no_sq2 = 1.414;\n-}"}, {"sha": "5479c55e11e030ae824155757a22b023746dd6ec", "filename": "tests/compile-fail/arithmetic.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farithmetic.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,30 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(integer_arithmetic, float_arithmetic)]\n-#![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]\n-fn main() {\n-    let i = 1i32;\n-    1 + i; //~ERROR integer arithmetic detected\n-    i * 2; //~ERROR integer arithmetic detected\n-    1 % //~ERROR integer arithmetic detected\n-    i / 2; // no error, this is part of the expression in the preceding line\n-    i - 2 + 2 - i; //~ERROR integer arithmetic detected\n-    -i; //~ERROR integer arithmetic detected\n-\n-    i & 1; // no wrapping\n-    i | 1;\n-    i ^ 1;\n-    i >> 1;\n-    i << 1;\n-\n-    let f = 1.0f32;\n-\n-    f * 2.0; //~ERROR floating-point arithmetic detected\n-\n-    1.0 + f; //~ERROR floating-point arithmetic detected\n-    f * 2.0; //~ERROR floating-point arithmetic detected\n-    f / 2.0; //~ERROR floating-point arithmetic detected\n-    f - 2.0 * 4.2; //~ERROR floating-point arithmetic detected\n-    -f; //~ERROR floating-point arithmetic detected\n-}"}, {"sha": "c69144fe292045106ba9c8f6c7296839840768aa", "filename": "tests/compile-fail/array_indexing.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,45 +0,0 @@\n-#![feature(inclusive_range_syntax, plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(indexing_slicing)]\n-#![deny(out_of_bounds_indexing)]\n-#![allow(no_effect, unnecessary_operation)]\n-\n-fn main() {\n-    let x = [1,2,3,4];\n-    x[0];\n-    x[3];\n-    x[4]; //~ERROR: const index is out of bounds\n-    x[1 << 3]; //~ERROR: const index is out of bounds\n-    &x[1..5]; //~ERROR: range is out of bounds\n-    &x[0..3];\n-    &x[0...4]; //~ERROR: range is out of bounds\n-    &x[...4]; //~ERROR: range is out of bounds\n-    &x[..];\n-    &x[1..];\n-    &x[4..];\n-    &x[5..]; //~ERROR: range is out of bounds\n-    &x[..4];\n-    &x[..5]; //~ERROR: range is out of bounds\n-\n-    let y = &x;\n-    y[0]; //~ERROR: indexing may panic\n-    &y[1..2]; //~ERROR: slicing may panic\n-    &y[..];\n-    &y[0...4]; //~ERROR: slicing may panic\n-    &y[...4]; //~ERROR: slicing may panic\n-\n-    let empty: [i8; 0] = [];\n-    empty[0]; //~ERROR: const index is out of bounds\n-    &empty[1..5]; //~ERROR: range is out of bounds\n-    &empty[0...4]; //~ERROR: range is out of bounds\n-    &empty[...4]; //~ERROR: range is out of bounds\n-    &empty[..];\n-    &empty[0..];\n-    &empty[0..0];\n-    &empty[0...0]; //~ERROR: range is out of bounds\n-    &empty[...0]; //~ERROR: range is out of bounds\n-    &empty[..0];\n-    &empty[1..]; //~ERROR: range is out of bounds\n-    &empty[..4]; //~ERROR: range is out of bounds\n-}"}, {"sha": "2b69e110f43d7749dc9e3d93d5c4053051428c81", "filename": "tests/compile-fail/assign_ops.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassign_ops.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,85 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(assign_ops)]\n-#[allow(unused_assignments)]\n-fn main() {\n-    let mut i = 1i32;\n-    i += 2; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i + 2\n-    i += 2 + 17; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i + 2 + 17\n-    i -= 6; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i - 6\n-    i -= 2 - 1;\n-    //~^ ERROR assign operation detected\n-    //~| HELP replace it with\n-    //~| SUGGESTION i = i - (2 - 1)\n-    i *= 5; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i * 5\n-    i *= 1+5; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i * (1+5)\n-    i /= 32; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i / 32\n-    i /= 32 | 5; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i / (32 | 5)\n-    i /= 32 / 5; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i / (32 / 5)\n-    i %= 42; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i % 42\n-    i >>= i; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i >> i\n-    i <<= 9 + 6 - 7; //~ ERROR assign operation detected\n-    //~^ HELP replace it with\n-    //~| SUGGESTION i = i << (9 + 6 - 7)\n-    i += 1 << 5;\n-    //~^ ERROR assign operation detected\n-    //~| HELP replace it with\n-    //~| SUGGESTION i = i + (1 << 5)\n-}\n-\n-#[allow(dead_code, unused_assignments)]\n-#[deny(assign_op_pattern)]\n-fn bla() {\n-    let mut a = 5;\n-    a = a + 1; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a += 1\n-    a = 1 + a; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a += 1\n-    a = a - 1; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a -= 1\n-    a = a * 99; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a *= 99\n-    a = 42 * a; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a *= 42\n-    a = a / 2; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a /= 2\n-    a = a % 5; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a %= 5\n-    a = a & 1; //~ ERROR manual implementation of an assign operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a &= 1\n-    a = 1 - a;\n-    a = 5 / a;\n-    a = 42 % a;\n-    a = 6 << a;\n-    let mut s = String::new();\n-    s = s + \"bla\";\n-}"}, {"sha": "e8549c01bc93268c7d4ff431a017150f3b14249b", "filename": "tests/compile-fail/assign_ops2.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassign_ops2.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,57 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[allow(unused_assignments)]\n-#[deny(misrefactored_assign_op)]\n-fn main() {\n-    let mut a = 5;\n-    a += a + 1; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a += 1\n-    a += 1 + a; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a += 1\n-    a -= a - 1; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a -= 1\n-    a *= a * 99; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a *= 99\n-    a *= 42 * a; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a *= 42\n-    a /= a / 2; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a /= 2\n-    a %= a % 5; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a %= 5\n-    a &= a & 1; //~ ERROR variable appears on both sides of an assignment operation\n-    //~^ HELP replace it with\n-    //~| SUGGESTION a &= 1\n-    a -= 1 - a;\n-    a /= 5 / a;\n-    a %= 42 % a;\n-    a <<= 6 << a;\n-}\n-\n-// check that we don't lint on op assign impls, because that's just the way to impl them\n-\n-use std::ops::{Mul, MulAssign};\n-\n-#[derive(Copy, Clone, Debug, PartialEq)]\n-pub struct Wrap(i64);\n-\n-impl Mul<i64> for Wrap {\n-    type Output = Self;\n-\n-    fn mul(self, rhs: i64) -> Self {\n-        Wrap(self.0 * rhs)\n-    }\n-}\n-\n-impl MulAssign<i64> for Wrap {\n-    fn mul_assign(&mut self, rhs: i64) {\n-        *self = *self * rhs\n-    }\n-}"}, {"sha": "1afcd94a0b1d43a75e69561b7d096887a2bb5021", "filename": "tests/compile-fail/blacklisted_name.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblacklisted_name.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,26 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![allow(dead_code)]\n-#![allow(single_match)]\n-#![allow(unused_variables, similar_names)]\n-#![deny(blacklisted_name)]\n-\n-fn test(foo: ()) {} //~ERROR use of a blacklisted/placeholder name `foo`\n-\n-fn main() {\n-    let foo = 42; //~ERROR use of a blacklisted/placeholder name `foo`\n-    let bar = 42; //~ERROR use of a blacklisted/placeholder name `bar`\n-    let baz = 42; //~ERROR use of a blacklisted/placeholder name `baz`\n-\n-    let barb = 42;\n-    let barbaric = 42;\n-\n-    match (42, Some(1337), Some(0)) {\n-        (foo, Some(bar), baz @ Some(_)) => (),\n-        //~^ ERROR use of a blacklisted/placeholder name `foo`\n-        //~| ERROR use of a blacklisted/placeholder name `bar`\n-        //~| ERROR use of a blacklisted/placeholder name `baz`\n-        _ => (),\n-    }\n-}"}, {"sha": "836759455197f08d427d15e67b270f6c212902dd", "filename": "tests/compile-fail/bool_comparison.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,23 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(bool_comparison)]\n-fn main() {\n-    let x = true;\n-    if x == true { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecessary\n-    //~| HELP try simplifying it as shown:\n-    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n-    if x == false { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against false can be replaced by a negation\n-    //~| HELP try simplifying it as shown:\n-    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n-    if true == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecessary\n-    //~| HELP try simplifying it as shown:\n-    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n-    if false == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against false can be replaced by a negation\n-    //~| HELP try simplifying it as shown:\n-    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n-}"}, {"sha": "193edebf3c4ffb8f37f5067a01120404bd43d9d1", "filename": "tests/compile-fail/booleans.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,90 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(nonminimal_bool, logic_bug)]\n-\n-#[allow(unused, many_single_char_names)]\n-fn main() {\n-    let a: bool = unimplemented!();\n-    let b: bool = unimplemented!();\n-    let c: bool = unimplemented!();\n-    let d: bool = unimplemented!();\n-    let e: bool = unimplemented!();\n-    let _ = a && b || a; //~ ERROR this boolean expression contains a logic bug\n-    //~| HELP this expression can be optimized out\n-    //~| HELP it would look like the following\n-    //~| SUGGESTION let _ = a;\n-    let _ = !(a && b);\n-    let _ = !true; //~ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = false;\n-    let _ = !false; //~ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = true;\n-    let _ = !!a; //~ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = a;\n-\n-    let _ = false && a; //~ ERROR this boolean expression contains a logic bug\n-    //~| HELP this expression can be optimized out\n-    //~| HELP it would look like the following\n-    //~| SUGGESTION let _ = false;\n-\n-    let _ = false || a; //~ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = a;\n-\n-    // don't lint on cfgs\n-    let _ = cfg!(you_shall_not_not_pass) && a;\n-\n-    let _ = a || !b || !c || !d || !e;\n-\n-    let _ = !(a && b || c);\n-\n-    let _ = !(!a && b); //~ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = !b || a;\n-}\n-\n-#[allow(unused, many_single_char_names)]\n-fn equality_stuff() {\n-    let a: i32 = unimplemented!();\n-    let b: i32 = unimplemented!();\n-    let c: i32 = unimplemented!();\n-    let d: i32 = unimplemented!();\n-    let e: i32 = unimplemented!();\n-    let _ = a == b && a != b;\n-    //~^ ERROR this boolean expression contains a logic bug\n-    //~| HELP this expression can be optimized out\n-    //~| HELP it would look like the following\n-    //~| SUGGESTION let _ = false;\n-    let _ = a == b && c == 5 && a == b;\n-    //~^ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = a == b && c == 5;\n-    //~| HELP try\n-    //~| SUGGESTION let _ = !(c != 5 || a != b);\n-    let _ = a == b && c == 5 && b == a;\n-    //~^ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = a == b && c == 5;\n-    //~| HELP try\n-    //~| SUGGESTION let _ = !(c != 5 || a != b);\n-    let _ = a < b && a >= b;\n-    //~^ ERROR this boolean expression contains a logic bug\n-    //~| HELP this expression can be optimized out\n-    //~| HELP it would look like the following\n-    //~| SUGGESTION let _ = false;\n-    let _ = a > b && a <= b;\n-    //~^ ERROR this boolean expression contains a logic bug\n-    //~| HELP this expression can be optimized out\n-    //~| HELP it would look like the following\n-    //~| SUGGESTION let _ = false;\n-    let _ = a > b && a == b;\n-\n-    let _ = a != b || !(a != b || c == d);\n-    //~^ ERROR this boolean expression can be simplified\n-    //~| HELP try\n-    //~| SUGGESTION let _ = c != d || a != b;\n-    //~| HELP try\n-    //~| SUGGESTION let _ = !(a == b && c == d);\n-}"}, {"sha": "d0ea5f40789d934167a6131c8eddd7445910e1ec", "filename": "tests/compile-fail/cast.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,64 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n-#[allow(no_effect, unnecessary_operation)]\n-fn main() {\n-    // Test cast_precision_loss\n-    1i32 as f32; //~ERROR casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-    1i64 as f32; //~ERROR casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    1i64 as f64; //~ERROR casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    1u32 as f32; //~ERROR casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-    1u64 as f32; //~ERROR casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    1u64 as f64; //~ERROR casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    1i32 as f64; // Should not trigger the lint\n-    1u32 as f64; // Should not trigger the lint\n-\n-    // Test cast_possible_truncation\n-    1f32 as i32;   //~ERROR casting f32 to i32 may truncate the value\n-    1f32 as u32;   //~ERROR casting f32 to u32 may truncate the value\n-                  //~^ERROR casting f32 to u32 may lose the sign of the value\n-    1f64 as f32;   //~ERROR casting f64 to f32 may truncate the value\n-    1i32 as i8;    //~ERROR casting i32 to i8 may truncate the value\n-    1i32 as u8;    //~ERROR casting i32 to u8 may truncate the value\n-                  //~^ERROR casting i32 to u8 may lose the sign of the value\n-    1f64 as isize; //~ERROR casting f64 to isize may truncate the value\n-    1f64 as usize; //~ERROR casting f64 to usize may truncate the value\n-                  //~^ERROR casting f64 to usize may lose the sign of the value\n-\n-    // Test cast_possible_wrap\n-    1u8 as i8;       //~ERROR casting u8 to i8 may wrap around the value\n-    1u16 as i16;     //~ERROR casting u16 to i16 may wrap around the value\n-    1u32 as i32;     //~ERROR casting u32 to i32 may wrap around the value\n-    1u64 as i64;     //~ERROR casting u64 to i64 may wrap around the value\n-    1usize as isize; //~ERROR casting usize to isize may wrap around the value\n-\n-    // Test cast_sign_loss\n-    1i32 as u32;     //~ERROR casting i32 to u32 may lose the sign of the value\n-    1isize as usize; //~ERROR casting isize to usize may lose the sign of the value\n-\n-    // Extra checks for *size\n-    // Casting from *size\n-    1isize as i8;  //~ERROR casting isize to i8 may truncate the value\n-    1isize as f64; //~ERROR casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    1usize as f64; //~ERROR casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-    1isize as f32; //~ERROR casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    1usize as f32; //~ERROR casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-    1isize as i32; //~ERROR casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-    1isize as u32; //~ERROR casting isize to u32 may lose the sign of the value\n-                  //~^ERROR casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-    1usize as u32; //~ERROR casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-    1usize as i32; //~ERROR casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-                  //~^ERROR casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-    // Casting to *size\n-    1i64 as isize; //~ERROR casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-    1i64 as usize; //~ERROR casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-                  //~^ERROR casting i64 to usize may lose the sign of the value\n-    1u64 as isize; //~ERROR casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-                  //~^ERROR casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-    1u64 as usize; //~ERROR casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-    1u32 as isize; //~ERROR casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-    1u32 as usize; // Should not trigger any lint\n-    1i32 as isize; // Neither should this\n-    1i32 as usize; //~ERROR casting i32 to usize may lose the sign of the value\n-}"}, {"sha": "8d173665a2429fb241ebe4159063fefb112049fb", "filename": "tests/compile-fail/cmp_nan.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_nan.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,22 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(cmp_nan)]\n-#[allow(float_cmp, no_effect, unnecessary_operation)]\n-fn main() {\n-    let x = 5f32;\n-    x == std::f32::NAN; //~ERROR doomed comparison with NAN\n-    x != std::f32::NAN; //~ERROR doomed comparison with NAN\n-    x < std::f32::NAN;  //~ERROR doomed comparison with NAN\n-    x > std::f32::NAN;  //~ERROR doomed comparison with NAN\n-    x <= std::f32::NAN; //~ERROR doomed comparison with NAN\n-    x >= std::f32::NAN; //~ERROR doomed comparison with NAN\n-\n-    let y = 0f64;\n-    y == std::f64::NAN; //~ERROR doomed comparison with NAN\n-    y != std::f64::NAN; //~ERROR doomed comparison with NAN\n-    y < std::f64::NAN;  //~ERROR doomed comparison with NAN\n-    y > std::f64::NAN;  //~ERROR doomed comparison with NAN\n-    y <= std::f64::NAN; //~ERROR doomed comparison with NAN\n-    y >= std::f64::NAN; //~ERROR doomed comparison with NAN\n-}"}, {"sha": "f7c7824e9d1cddb1c326c9f3a6028ddc521bd08f", "filename": "tests/compile-fail/cmp_owned.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,27 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(cmp_owned)]\n-#[allow(unnecessary_operation)]\n-fn main() {\n-    fn with_to_string(x : &str) {\n-        x != \"foo\".to_string();\n-        //~^ ERROR this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n-\n-        \"foo\".to_string() != x;\n-        //~^ ERROR this creates an owned instance just for comparison. Consider using `\"foo\" != x` to compare without allocation\n-    }\n-\n-    let x = \"oh\";\n-\n-    with_to_string(x);\n-\n-    x != \"foo\".to_owned(); //~ERROR this creates an owned instance\n-\n-    // removed String::from_str(..), as it has finally been removed in 1.4.0\n-    // as of 2015-08-14\n-\n-    x != String::from(\"foo\"); //~ERROR this creates an owned instance\n-\n-    42.to_string() == \"42\";\n-}"}, {"sha": "ad01e4fadd5f80d581eedaf61585f6fe871ed87a", "filename": "tests/compile-fail/complex_types.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcomplex_types.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,44 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-#![allow(unused)]\n-#![feature(associated_consts, associated_type_defaults)]\n-\n-type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here\n-\n-const CST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n-static ST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n-\n-struct S {\n-    f: Vec<Vec<Box<(u32, u32, u32, u32)>>>, //~ERROR very complex type\n-}\n-\n-struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>); //~ERROR very complex type\n-\n-enum E {\n-    Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>), //~ERROR very complex type\n-    Struct { f: Vec<Vec<Box<(u32, u32, u32, u32)>>> }, //~ERROR very complex type\n-}\n-\n-impl S {\n-    const A: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n-    fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n-}\n-\n-trait T {\n-    const A: Vec<Vec<Box<(u32, u32, u32, u32)>>>; //~ERROR very complex type\n-    type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>; //~ERROR very complex type\n-    fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>); //~ERROR very complex type\n-    fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n-}\n-\n-fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> { vec![] } //~ERROR very complex type\n-\n-fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n-\n-fn test3() {\n-    let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![]; //~ERROR very complex type\n-}\n-\n-fn main() {\n-}"}, {"sha": "4c306a98b2014497cc9be1cc8db2643148ed608a", "filename": "tests/compile-fail/conf_french_blacklisted_name.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,26 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n-\n-#![allow(dead_code)]\n-#![allow(single_match)]\n-#![allow(unused_variables)]\n-#![deny(blacklisted_name)]\n-\n-fn test(toto: ()) {} //~ERROR use of a blacklisted/placeholder name `toto`\n-\n-fn main() {\n-    let toto = 42; //~ERROR use of a blacklisted/placeholder name `toto`\n-    let tata = 42; //~ERROR use of a blacklisted/placeholder name `tata`\n-    let titi = 42; //~ERROR use of a blacklisted/placeholder name `titi`\n-\n-    let tatab = 42;\n-    let tatatataic = 42;\n-\n-    match (42, Some(1337), Some(0)) {\n-        (toto, Some(tata), titi @ Some(_)) => (),\n-        //~^ ERROR use of a blacklisted/placeholder name `toto`\n-        //~| ERROR use of a blacklisted/placeholder name `tata`\n-        //~| ERROR use of a blacklisted/placeholder name `titi`\n-        _ => (),\n-    }\n-}"}, {"sha": "55cfe63dac4c947b6894f89161b7b62330f07f4a", "filename": "tests/compile-fail/drop_forget_ref.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_forget_ref.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,60 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names)]\n-\n-use std::mem::{drop, forget};\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-    forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n-\n-    let mut owned1 = SomeStruct;\n-    drop(&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&mut owned1); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(owned1); //OK\n-    let mut owned2 = SomeStruct;\n-    forget(&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n-    forget(&&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n-    forget(&mut owned2); //~ERROR call to `std::mem::forget` with a reference argument\n-    forget(owned2); //OK\n-\n-    let reference1 = &SomeStruct;\n-    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n-    forget(&*reference1); //~ERROR call to `std::mem::forget` with a reference argument\n-\n-    let reference2 = &mut SomeStruct;\n-    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n-    let reference3 = &mut SomeStruct;\n-    forget(reference3); //~ERROR call to `std::mem::forget` with a reference argument\n-\n-    let ref reference4 = SomeStruct;\n-    drop(reference4); //~ERROR call to `std::mem::drop` with a reference argument\n-    forget(reference4); //~ERROR call to `std::mem::forget` with a reference argument\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_drop<T>(val: T) {\n-    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_forget<T>(val: T) {\n-    forget(&val); //~ERROR call to `std::mem::forget` with a reference argument\n-    forget(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn drop<T>(_val: T) {}\n-    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-    fn forget<T>(_val: T) {}\n-    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n-}"}, {"sha": "ac9b314c00a69e2a6c3e00c493001a996bc19aaf", "filename": "tests/compile-fail/empty_enum.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fempty_enum.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,11 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![allow(dead_code)]\n-#![deny(empty_enum)]\n-\n-enum Empty {} //~ ERROR enum with no variants\n-    //~^ HELP consider using the uninhabited type `!` or a wrapper around it\n-\n-fn main() {\n-}"}, {"sha": "c342bf8f332b3f694dca74f34878591b9628d1d1", "filename": "tests/compile-fail/enums_clike.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenums_clike.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,54 +0,0 @@\n-// ignore-x86\n-#![feature(plugin, associated_consts)]\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-\n-#![allow(unused)]\n-\n-#[repr(usize)]\n-enum NonPortable {\n-    X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-    Y = 0,\n-    Z = 0x7FFF_FFFF,\n-    A = 0xFFFF_FFFF,\n-}\n-\n-enum NonPortableNoHint {\n-    X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-    Y = 0,\n-    Z = 0x7FFF_FFFF,\n-    A = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-}\n-\n-#[repr(isize)]\n-enum NonPortableSigned {\n-    X = -1,\n-    Y = 0x7FFF_FFFF,\n-    Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-    A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-    B = std::i32::MIN as isize,\n-    C = (std::i32::MIN as isize) - 1, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-}\n-\n-enum NonPortableSignedNoHint {\n-    X = -1,\n-    Y = 0x7FFF_FFFF,\n-    Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-    A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n-}\n-\n-/*\n-FIXME: uncomment once https://github.com/rust-lang/rust/issues/31910 is fixed\n-#[repr(usize)]\n-enum NonPortable2<T: Trait> {\n-    X = Trait::Number,\n-    Y = 0,\n-}\n-\n-trait Trait {\n-    const Number: usize = 0x1_0000_0000;\n-}\n-*/\n-\n-fn main() {\n-}"}, {"sha": "c133f42277767405e9dd5bf354489c493f0c6ef7", "filename": "tests/compile-fail/eq_op.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,62 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(eq_op)]\n-#[allow(identity_op, double_parens)]\n-#[allow(no_effect, unused_variables, unnecessary_operation, short_circuit_statement)]\n-#[deny(nonminimal_bool)]\n-fn main() {\n-    // simple values and comparisons\n-    1 == 1; //~ERROR equal expressions\n-    \"no\" == \"no\"; //~ERROR equal expressions\n-    // even though I agree that no means no ;-)\n-    false != false; //~ERROR equal expressions\n-    1.5 < 1.5; //~ERROR equal expressions\n-    1u64 >= 1u64; //~ERROR equal expressions\n-\n-    // casts, methods, parentheses\n-    (1 as u64) & (1 as u64); //~ERROR equal expressions\n-    1 ^ ((((((1)))))); //~ERROR equal expressions\n-\n-    // unary and binary operators\n-    (-(2) < -(2));  //~ERROR equal expressions\n-    ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n-          //~^ ERROR equal expressions as operands to `==`\n-                    //~^^ ERROR equal expressions as operands to `&`\n-                               //~^^^ ERROR equal expressions as operands to `&`\n-    (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR equal expressions\n-\n-    // various other things\n-    ([1] != [1]); //~ERROR equal expressions\n-    ((1, 2) != (1, 2)); //~ERROR equal expressions\n-    vec![1, 2, 3] == vec![1, 2, 3]; //no error yet, as we don't match macros\n-\n-    // const folding\n-    1 + 1 == 2; //~ERROR equal expressions\n-    1 - 1 == 0; //~ERROR equal expressions as operands to `==`\n-                //~^ ERROR equal expressions as operands to `-`\n-\n-    1 - 1; //~ERROR equal expressions\n-    1 / 1; //~ERROR equal expressions\n-    true && true; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-    true || true; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-\n-    let a: u32 = 0;\n-    let b: u32 = 0;\n-\n-    a == b && b == a; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-    a != b && b != a; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-    a < b && b > a; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-    a <= b && b >= a; //~ERROR equal expressions\n-    //~|ERROR this boolean expression can be simplified\n-\n-    let mut a = vec![1];\n-    a == a; //~ERROR equal expressions\n-    2*a.len() == 2*a.len(); // ok, functions\n-    a.pop() == a.pop(); // ok, functions\n-}"}, {"sha": "24a3864b0133326fe55365f7a37193a2686f506e", "filename": "tests/compile-fail/if_let_redundant_pattern_matching.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fif_let_redundant_pattern_matching.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,53 +0,0 @@\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-#![deny(if_let_redundant_pattern_matching)]\n-\n-\n-fn main() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-    //~^ERROR redundant pattern matching, consider using `is_ok()`\n-    //~| HELP try this\n-    //~| SUGGESTION if Ok::<i32, i32>(42).is_ok() {\n-\n-    if let Err(_) = Err::<i32, i32>(42) {\n-    //~^ERROR redundant pattern matching, consider using `is_err()`\n-    //~| HELP try this\n-    //~| SUGGESTION if Err::<i32, i32>(42).is_err() {\n-    }\n-\n-    if let None = None::<()> {\n-    //~^ERROR redundant pattern matching, consider using `is_none()`\n-    //~| HELP try this\n-    //~| SUGGESTION if None::<()>.is_none() {\n-    }\n-\n-    if let Some(_) = Some(42) {\n-    //~^ERROR redundant pattern matching, consider using `is_some()`\n-    //~| HELP try this\n-    //~| SUGGESTION if Some(42).is_some() {\n-    }\n-\n-    if Ok::<i32, i32>(42).is_ok() {\n-\n-    }\n-\n-    if Err::<i32, i32>(42).is_err() {\n-\n-    }\n-\n-    if None::<i32>.is_none() {\n-\n-    }\n-\n-    if Some(42).is_some() {\n-\n-    }\n-\n-    if let Ok(x) = Ok::<i32,i32>(42) {\n-        println!(\"{}\", x);\n-    }\n-}\n-\n-"}, {"sha": "9635f3afede968a3eeee3d3f000123d2b1232e92", "filename": "tests/compile-fail/invalid_upcast_comparisons.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,35 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(invalid_upcast_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n-fn main() {\n-    let zero: u32 = 0;\n-    let u8_max: u8 = 255;\n-\n-    (u8_max as u32) > 300; //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n-    (u8_max as u32) > 20;\n-\n-    (zero as i32) < -5; //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n-    (zero as i32) < 10;\n-\n-    -5 < (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always true\n-    0 <= (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always true\n-    0 < (zero as i32);\n-\n-    -5 > (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n-    -5 >= (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n-    1337 == (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n-\n-    -5 == (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n-    -5 != (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n-\n-    // Those are Ok:\n-    42 == (u8_max as i32);\n-    42 != (u8_max as i32);\n-    42 > (u8_max as i32);\n-    (u8_max as i32) == 42;\n-    (u8_max as i32) != 42;\n-    (u8_max as i32) > 42;\n-    (u8_max as i32) < 42;\n-}"}, {"sha": "8d289a3283246977168a4feb71dc08b133b10996", "filename": "tests/compile-fail/large_enum_variant.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flarge_enum_variant.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,53 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-#![deny(large_enum_variant)]\n-\n-enum LargeEnum {\n-    A(i32),\n-    B([i32; 8000]), //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    //~| SUGGESTION Box<[i32; 8000]>\n-}\n-\n-enum GenericEnum<T> {\n-    A(i32),\n-    B([i32; 8000]), //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    //~| SUGGESTION Box<[i32; 8000]>\n-    C([T; 8000]),\n-    D(T, [i32; 8000]), //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-}\n-\n-trait SomeTrait {\n-    type Item;\n-}\n-\n-enum LargeEnumGeneric<A: SomeTrait> {\n-    Var(A::Item), // regression test, this used to ICE\n-}\n-\n-enum AnotherLargeEnum {\n-    VariantOk(i32, u32),\n-    ContainingLargeEnum(LargeEnum), //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    //~| SUGGESTION Box<LargeEnum>\n-    ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    VoidVariant,\n-    StructLikeLittle { x: i32, y: i32 },\n-    StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found\n-    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    StructLikeLarge2 { //~ ERROR large enum variant found\n-        x:\n-        [i32; 8000] //~ SUGGESTION Box<[i32; 8000]>\n-        //~^ HELP consider boxing the large fields to reduce the total size of the enum\n-    },\n-}\n-\n-fn main() {\n-\n-}"}, {"sha": "6c8a27c2ed4a2d85347479ae774dc9d9bcb43ba4", "filename": "tests/compile-fail/literals.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fliterals.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,38 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(mixed_case_hex_literals)]\n-#![deny(unseparated_literal_suffix)]\n-#![deny(zero_prefixed_literal)]\n-#![allow(dead_code)]\n-\n-fn main() {\n-    let ok1 = 0xABCD;\n-    let ok3 = 0xab_cd;\n-    let ok4 = 0xab_cd_i32;\n-    let ok5 = 0xAB_CD_u32;\n-    let ok5 = 0xAB_CD_isize;\n-    let fail1 = 0xabCD;       //~ERROR inconsistent casing in hexadecimal literal\n-    let fail2 = 0xabCD_u32;   //~ERROR inconsistent casing in hexadecimal literal\n-    let fail2 = 0xabCD_isize; //~ERROR inconsistent casing in hexadecimal literal\n-\n-    let ok6 = 1234_i32;\n-    let ok7 = 1234_f32;\n-    let ok8 = 1234_isize;\n-    let fail3 = 1234i32;      //~ERROR integer type suffix should be separated\n-    let fail4 = 1234u32;      //~ERROR integer type suffix should be separated\n-    let fail5 = 1234isize;    //~ERROR integer type suffix should be separated\n-    let fail6 = 1234usize;    //~ERROR integer type suffix should be separated\n-    let fail7 = 1.5f32;       //~ERROR float type suffix should be separated\n-\n-    let ok9 = 0;\n-    let ok10 = 0_i64;\n-    let fail8 = 0123;\n-    //~^ERROR decimal constant\n-    //~|HELP remove the `0`\n-    //~|SUGGESTION = 123;\n-    //~|HELP use `0o`\n-    //~|SUGGESTION = 0o123;\n-\n-    let ok11 = 0o123;\n-    let ok12 = 0b101010;\n-}"}, {"sha": "34a0773df27f6e52fba7e4eacbfa54ff1d51cc08", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 191, "deletions": 193, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -15,21 +15,19 @@ use std::iter::FromIterator;\n struct T;\n \n impl T {\n-    fn add(self, other: T) -> T { self } //~ERROR defining a method called `add`\n-    fn drop(&mut self) { } //~ERROR defining a method called `drop`\n+    fn add(self, other: T) -> T { self }\n+    fn drop(&mut self) { }\n \n     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n     fn div(self) -> T { self } // no error, different #arguments\n     fn rem(self, other: T) { } // no error, wrong return type\n \n     fn into_u32(self) -> u32 { 0 } // fine\n-    fn into_u16(&self) -> u16 { 0 } //~ERROR methods called `into_*` usually take self by value\n+    fn into_u16(&self) -> u16 { 0 }\n \n-    fn to_something(self) -> u32 { 0 } //~ERROR methods called `to_*` usually take self by reference\n+    fn to_something(self) -> u32 { 0 }\n \n     fn new(self) {}\n-    //~^ ERROR methods called `new` usually take no self\n-    //~| ERROR methods called `new` usually return `Self`\n }\n \n struct Lt<'a> {\n@@ -96,15 +94,15 @@ fn option_methods() {\n \n     // Check OPTION_MAP_UNWRAP_OR\n     // single line case\n-    let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or(a)`\n-                               //~| NOTE replace `map(|x| x + 1).unwrap_or(0)`\n+    let _ = opt.map(|x| x + 1)\n+\n                .unwrap_or(0); // should lint even though this call is on a separate line\n     // multi line cases\n-    let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or(a)`\n+    let _ = opt.map(|x| {\n                         x + 1\n                     }\n               ).unwrap_or(0);\n-    let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or(a)`\n+    let _ = opt.map(|x| x + 1)\n                .unwrap_or({\n                     0\n                 });\n@@ -113,15 +111,15 @@ fn option_methods() {\n \n     // Check OPTION_MAP_UNWRAP_OR_ELSE\n     // single line case\n-    let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or_else(g)`\n-                               //~| NOTE replace `map(|x| x + 1).unwrap_or_else(|| 0)`\n+    let _ = opt.map(|x| x + 1)\n+\n                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     // multi line cases\n-    let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or_else(g)`\n+    let _ = opt.map(|x| {\n                         x + 1\n                     }\n               ).unwrap_or_else(|| 0);\n-    let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or_else(g)`\n+    let _ = opt.map(|x| x + 1)\n                .unwrap_or_else(||\n                     0\n                 );\n@@ -194,11 +192,11 @@ fn filter_next() {\n \n     // check single-line case\n     let _ = v.iter().filter(|&x| *x < 0).next();\n-    //~^ ERROR called `filter(p).next()` on an `Iterator`.\n-    //~| NOTE replace `filter(|&x| *x < 0).next()`\n+\n+\n \n     // check multi-line case\n-    let _ = v.iter().filter(|&x| { //~ERROR called `filter(p).next()` on an `Iterator`.\n+    let _ = v.iter().filter(|&x| {\n                                 *x < 0\n                             }\n                    ).next();\n@@ -214,33 +212,33 @@ fn search_is_some() {\n \n     // check `find().is_some()`, single-line\n     let _ = v.iter().find(|&x| *x < 0).is_some();\n-    //~^ ERROR called `is_some()` after searching\n-    //~| NOTE replace `find(|&x| *x < 0).is_some()`\n+\n+\n \n     // check `find().is_some()`, multi-line\n-    let _ = v.iter().find(|&x| { //~ERROR called `is_some()` after searching\n+    let _ = v.iter().find(|&x| {\n                               *x < 0\n                           }\n                    ).is_some();\n \n     // check `position().is_some()`, single-line\n     let _ = v.iter().position(|&x| x < 0).is_some();\n-    //~^ ERROR called `is_some()` after searching\n-    //~| NOTE replace `position(|&x| x < 0).is_some()`\n+\n+\n \n     // check `position().is_some()`, multi-line\n-    let _ = v.iter().position(|&x| { //~ERROR called `is_some()` after searching\n+    let _ = v.iter().position(|&x| {\n                                   x < 0\n                               }\n                    ).is_some();\n \n     // check `rposition().is_some()`, single-line\n     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-    //~^ ERROR called `is_some()` after searching\n-    //~| NOTE replace `rposition(|&x| x < 0).is_some()`\n+\n+\n \n     // check `rposition().is_some()`, multi-line\n-    let _ = v.iter().rposition(|&x| { //~ERROR called `is_some()` after searching\n+    let _ = v.iter().rposition(|&x| {\n                                    x < 0\n                                }\n                    ).is_some();\n@@ -276,75 +274,75 @@ fn or_fun_call() {\n \n     let with_constructor = Some(vec![1]);\n     with_constructor.unwrap_or(make());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_constructor.unwrap_or_else(make)\n+\n+\n+\n \n     let with_new = Some(vec![1]);\n     with_new.unwrap_or(Vec::new());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_new.unwrap_or_default();\n+\n+\n+\n \n     let with_const_args = Some(vec![1]);\n     with_const_args.unwrap_or(Vec::with_capacity(12));\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+\n+\n \n     let with_err : Result<_, ()> = Ok(vec![1]);\n     with_err.unwrap_or(make());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_err.unwrap_or_else(|_| make());\n+\n+\n+\n \n     let with_err_args : Result<_, ()> = Ok(vec![1]);\n     with_err_args.unwrap_or(Vec::with_capacity(12));\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+\n+\n \n     let with_default_trait = Some(1);\n     with_default_trait.unwrap_or(Default::default());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_default_trait.unwrap_or_default();\n+\n+\n+\n \n     let with_default_type = Some(1);\n     with_default_type.unwrap_or(u64::default());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION with_default_type.unwrap_or_default();\n+\n+\n+\n \n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n+\n+\n     // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION without_default.unwrap_or_else(Foo::new);\n+\n+\n+\n \n     let mut map = HashMap::<u64, String>::new();\n     map.entry(42).or_insert(String::new());\n-    //~^ERROR use of `or_insert` followed by a function call\n-    //~|HELP try this\n-    //~|SUGGESTION map.entry(42).or_insert_with(String::new);\n+\n+\n+\n \n     let mut btree = BTreeMap::<u64, String>::new();\n     btree.entry(42).or_insert(String::new());\n-    //~^ERROR use of `or_insert` followed by a function call\n-    //~|HELP try this\n-    //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n+\n+\n+\n \n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n-    //~^ERROR use of `unwrap_or`\n-    //~|HELP try this\n-    //~|SUGGESTION stringy.unwrap_or_else(|| \"\".to_owned());\n+\n+\n+\n }\n \n /// Checks implementation of `ITER_NTH` lint\n@@ -356,27 +354,27 @@ fn iter_nth() {\n     {\n         // Make sure we lint `.iter()` for relevant types\n         let bad_vec = some_vec.iter().nth(3);\n-        //~^ERROR called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+\n         let bad_slice = &some_vec[..].iter().nth(3);\n-        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+\n         let bad_boxed_slice = boxed_slice.iter().nth(3);\n-        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+\n         let bad_vec_deque = some_vec_deque.iter().nth(3);\n-        //~^ERROR called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+\n     }\n \n     {\n         // Make sure we lint `.iter_mut()` for relevant types\n         let bad_vec = some_vec.iter_mut().nth(3);\n-        //~^ERROR called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+\n     }\n     {\n         let bad_slice = &some_vec[..].iter_mut().nth(3);\n-        //~^ERROR called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+\n     }\n     {\n         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-        //~^ERROR called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+\n     }\n \n     // Make sure we don't lint for non-relevant types\n@@ -390,16 +388,16 @@ fn iter_skip_next() {\n     let mut some_vec = vec![0, 1, 2, 3];\n \n     let _ = some_vec.iter().skip(42).next();\n-    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n \n     let _ = some_vec.iter().cycle().skip(42).next();\n-    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n \n     let _ = (1..10).skip(10).next();\n-    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n \n     let _ = &some_vec[..].iter().skip(3).next();\n-    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n \n     let foo = IteratorFalsePositives { foo : 0 };\n     let _ = foo.skip(42).next();\n@@ -427,50 +425,50 @@ fn get_unwrap() {\n \n     { // Test `get().unwrap()`\n         let _ = boxed_slice.get(1).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION boxed_slice[1]\n+\n+\n+\n         let _ = some_slice.get(0).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION some_slice[0]\n+\n+\n+\n         let _ = some_vec.get(0).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION some_vec[0]\n+\n+\n+\n         let _ = some_vecdeque.get(0).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION some_vecdeque[0]\n+\n+\n+\n         let _ = some_hashmap.get(&1).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION some_hashmap[&1]\n+\n+\n+\n         let _ = some_btreemap.get(&1).unwrap();\n-        //~^ERROR called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION some_btreemap[&1]\n+\n+\n+\n \n         let _ = false_positive.get(0).unwrap();\n     }\n \n     { // Test `get_mut().unwrap()`\n         *boxed_slice.get_mut(0).unwrap() = 1;\n-        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION &mut boxed_slice[0]\n+\n+\n+\n         *some_slice.get_mut(0).unwrap() = 1;\n-        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION &mut some_slice[0]\n+\n+\n+\n         *some_vec.get_mut(0).unwrap() = 1;\n-        //~^ERROR called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION &mut some_vec[0]\n+\n+\n+\n         *some_vecdeque.get_mut(0).unwrap() = 1;\n-        //~^ERROR called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-        //~|HELP try this\n-        //~|SUGGESTION &mut some_vecdeque[0]\n+\n+\n+\n \n         // Check false positives\n         *some_hashmap.get_mut(&1).unwrap() = 'b';\n@@ -485,24 +483,24 @@ fn main() {\n     use std::io;\n \n     let opt = Some(0);\n-    let _ = opt.unwrap();  //~ERROR used unwrap() on an Option\n+    let _ = opt.unwrap();\n \n     let res: Result<i32, ()> = Ok(0);\n-    let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n+    let _ = res.unwrap();\n \n-    res.ok().expect(\"disaster!\"); //~ERROR called `ok().expect()`\n+    res.ok().expect(\"disaster!\");\n     // the following should not warn, since `expect` isn't implemented unless\n     // the error type implements `Debug`\n     let res2: Result<i32, MyError> = Ok(0);\n     res2.ok().expect(\"oh noes!\");\n     let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n-    res3.ok().expect(\"whoof\"); //~ERROR called `ok().expect()`\n+    res3.ok().expect(\"whoof\");\n     let res4: Result<u32, io::Error> = Ok(0);\n-    res4.ok().expect(\"argh\"); //~ERROR called `ok().expect()`\n+    res4.ok().expect(\"argh\");\n     let res5: io::Result<u32> = Ok(0);\n-    res5.ok().expect(\"oops\"); //~ERROR called `ok().expect()`\n+    res5.ok().expect(\"oops\");\n     let res6: Result<u32, &str> = Ok(0);\n-    res6.ok().expect(\"meh\"); //~ERROR called `ok().expect()`\n+    res6.ok().expect(\"meh\");\n }\n \n struct MyError(()); // doesn't implement Debug\n@@ -515,14 +513,14 @@ struct MyErrorWithParam<T> {\n #[allow(unnecessary_operation)]\n fn starts_with() {\n     \"\".chars().next() == Some(' ');\n-    //~^ ERROR starts_with\n-    //~| HELP like this\n-    //~| SUGGESTION \"\".starts_with(' ')\n+\n+\n+\n \n     Some(' ') != \"\".chars().next();\n-    //~^ ERROR starts_with\n-    //~| HELP like this\n-    //~| SUGGESTION !\"\".starts_with(' ')\n+\n+\n+\n }\n \n fn str_extend_chars() {\n@@ -532,21 +530,21 @@ fn str_extend_chars() {\n \n     s.push_str(abc);\n     s.extend(abc.chars());\n-    //~^ERROR calling `.extend(_.chars())`\n-    //~|HELP try this\n-    //~|SUGGESTION s.push_str(abc)\n+\n+\n+\n \n     s.push_str(\"abc\");\n     s.extend(\"abc\".chars());\n-    //~^ERROR calling `.extend(_.chars())`\n-    //~|HELP try this\n-    //~|SUGGESTION s.push_str(\"abc\")\n+\n+\n+\n \n     s.push_str(&def);\n     s.extend(def.chars());\n-    //~^ERROR calling `.extend(_.chars())`\n-    //~|HELP try this\n-    //~|SUGGESTION s.push_str(&def)\n+\n+\n+\n \n     s.extend(abc.chars().skip(1));\n     s.extend(\"abc\".chars().skip(1));\n@@ -557,40 +555,40 @@ fn str_extend_chars() {\n }\n \n fn clone_on_copy() {\n-    42.clone(); //~ERROR using `clone` on a `Copy` type\n-                //~| HELP try removing the `clone` call\n-                //~| SUGGESTION 42\n+    42.clone();\n+\n+\n     vec![1].clone(); // ok, not a Copy type\n     Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone(); //~ERROR using `clone` on a `Copy` type\n-                   //~| HELP try dereferencing it\n-                   //~| SUGGESTION *(&42)\n+    (&42).clone();\n+\n+\n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {\n-    t.clone(); //~ERROR using `clone` on a `Copy` type\n-               //~| HELP try removing the `clone` call\n-               //~| SUGGESTION t\n-    Some(t).clone(); //~ERROR using `clone` on a `Copy` type\n-                     //~| HELP try removing the `clone` call\n-                     //~| SUGGESTION Some(t)\n+    t.clone();\n+\n+\n+    Some(t).clone();\n+\n+\n }\n \n fn clone_on_double_ref() {\n     let x = vec![1];\n     let y = &&x;\n-    let z: &Vec<_> = y.clone(); //~ERROR using `clone` on a double\n-                                //~| HELP try dereferencing it\n-                                //~| SUGGESTION let z: &Vec<_> = (*y).clone();\n+    let z: &Vec<_> = y.clone();\n+\n+\n     println!(\"{:p} {:p}\",*y, z);\n }\n \n fn single_char_pattern() {\n     let x = \"foo\";\n     x.split(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.split('x');\n+\n+\n+\n \n     x.split(\"xx\");\n \n@@ -612,69 +610,69 @@ fn single_char_pattern() {\n     x.split(\"\u2764\ufe0f\");\n \n     x.contains(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.contains('x');\n+\n+\n+\n     x.starts_with(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.starts_with('x');\n+\n+\n+\n     x.ends_with(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.ends_with('x');\n+\n+\n+\n     x.find(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.find('x');\n+\n+\n+\n     x.rfind(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rfind('x');\n+\n+\n+\n     x.rsplit(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rsplit('x');\n+\n+\n+\n     x.split_terminator(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.split_terminator('x');\n+\n+\n+\n     x.rsplit_terminator(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rsplit_terminator('x');\n+\n+\n+\n     x.splitn(0, \"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.splitn(0, 'x');\n+\n+\n+\n     x.rsplitn(0, \"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rsplitn(0, 'x');\n+\n+\n+\n     x.matches(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.matches('x');\n+\n+\n+\n     x.rmatches(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rmatches('x');\n+\n+\n+\n     x.match_indices(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.match_indices('x');\n+\n+\n+\n     x.rmatch_indices(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.rmatch_indices('x');\n+\n+\n+\n     x.trim_left_matches(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.trim_left_matches('x');\n+\n+\n+\n     x.trim_right_matches(\"x\");\n-    //~^ ERROR single-character string constant used as pattern\n-    //~| HELP try using a char instead:\n-    //~| SUGGESTION x.trim_right_matches('x');\n+\n+\n+\n \n     let h = HashSet::<String>::new();\n     h.contains(\"X\"); // should not warn\n@@ -685,7 +683,7 @@ fn temporary_cstring() {\n     use std::ffi::CString;\n \n     CString::new(\"foo\").unwrap().as_ptr();\n-    //~^ ERROR you are getting the inner pointer of a temporary `CString`\n-    //~| NOTE that pointer will be invalid outside this expression\n-    //~| HELP assign the `CString` to a variable to extend its lifetime\n+\n+\n+\n }"}, {"sha": "9a6794afebf1bf9931e647c8522859ba649b60fa", "filename": "tests/compile-fail/min_max.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmin_max.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,33 +0,0 @@\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-\n-use std::cmp::{min, max};\n-use std::cmp::min as my_min;\n-use std::cmp::max as my_max;\n-\n-const LARGE : usize = 3;\n-\n-fn main() {\n-    let x;\n-    x = 2usize;\n-    min(1, max(3, x)); //~ERROR this min/max combination leads to constant result\n-    min(max(3, x), 1); //~ERROR this min/max combination leads to constant result\n-    max(min(x, 1), 3); //~ERROR this min/max combination leads to constant result\n-    max(3, min(x, 1)); //~ERROR this min/max combination leads to constant result\n-\n-    my_max(3, my_min(x, 1)); //~ERROR this min/max combination leads to constant result\n-\n-    min(3, max(1, x)); // ok, could be 1, 2 or 3 depending on x\n-\n-    min(1, max(LARGE, x)); // no error, we don't lookup consts here\n-\n-    let s;\n-    s = \"Hello\";\n-\n-    min(\"Apple\", max(\"Zoo\", s)); //~ERROR this min/max combination leads to constant result\n-    max(min(s, \"Apple\"), \"Zoo\"); //~ERROR this min/max combination leads to constant result\n-\n-    max(\"Apple\", min(s, \"Zoo\")); // ok\n-}"}, {"sha": "edcc6906f082827a702f9583479e40198ef92bfc", "filename": "tests/compile-fail/mut_mut.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,64 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![allow(unused, no_effect, unnecessary_operation)]\n-#![deny(mut_mut)]\n-\n-//#![plugin(regex_macros)]\n-//extern crate regex;\n-\n-fn fun(x : &mut &mut u32) -> bool { //~ERROR generally you want to avoid `&mut &mut\n-    **x > 0\n-}\n-\n-fn less_fun(x : *mut *mut u32) {\n-  let y = x;\n-}\n-\n-macro_rules! mut_ptr {\n-    ($p:expr) => { &mut $p }\n-    //~^ ERROR generally you want to avoid `&mut &mut\n-}\n-\n-#[allow(unused_mut, unused_variables)]\n-fn main() {\n-    let mut x = &mut &mut 1u32; //~ERROR generally you want to avoid `&mut &mut\n-    {\n-        let mut y = &mut x; //~ERROR this expression mutably borrows a mutable reference\n-    }\n-\n-    if fun(x) {\n-        let y : &mut &mut u32 = &mut &mut 2;\n-        //~^ ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        **y + **x;\n-    }\n-\n-    if fun(x) {\n-        let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-        //~^ ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        //~| ERROR generally you want to avoid `&mut &mut\n-        ***y + **x;\n-    }\n-\n-    let mut z = mut_ptr!(&mut 3u32);\n-    //~^ NOTE in this expansion of mut_ptr!\n-}\n-\n-fn issue939() {\n-    let array = [5, 6, 7, 8, 9];\n-    let mut args = array.iter().skip(2);\n-    for &arg in &mut args {\n-        println!(\"{}\", arg);\n-    }\n-\n-    let args = &mut args;\n-    for arg in args {\n-        println!(\":{}\", arg);\n-    }\n-}"}, {"sha": "20a34ba5547c3a6e5c2d7311e6796a7d273dc23c", "filename": "tests/compile-fail/mutex_atomic.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmutex_atomic.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,18 +0,0 @@\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-#![deny(mutex_integer)]\n-\n-fn main() {\n-    use std::sync::Mutex;\n-    Mutex::new(true); //~ERROR Consider using an AtomicBool instead of a Mutex here.\n-    Mutex::new(5usize); //~ERROR Consider using an AtomicUsize instead of a Mutex here.\n-    Mutex::new(9isize); //~ERROR Consider using an AtomicIsize instead of a Mutex here.\n-    let mut x = 4u32;\n-    Mutex::new(&x as *const u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n-    Mutex::new(&mut x as *mut u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n-    Mutex::new(0u32); //~ERROR Consider using an AtomicUsize instead of a Mutex here.\n-    Mutex::new(0i32); //~ERROR Consider using an AtomicIsize instead of a Mutex here.\n-    Mutex::new(0f32); // there are no float atomics, so this should not lint\n-}"}, {"sha": "fb81d44308a0e8f08e9dc9f02f99f6813bbe0609", "filename": "tests/compile-fail/needless_bool.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,74 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(needless_bool)]\n-\n-#[allow(if_same_then_else)]\n-fn main() {\n-    let x = true;\n-    let y = false;\n-    if x { true } else { true }; //~ERROR this if-then-else expression will always return true\n-    if x { false } else { false }; //~ERROR this if-then-else expression will always return false\n-    if x { true } else { false };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION x\n-    if x { false } else { true };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION !x\n-    if x && y { false } else { true };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION !(x && y)\n-    if x { x } else { false }; // would also be questionable, but we don't catch this yet\n-    bool_ret(x);\n-    bool_ret2(x);\n-    bool_ret3(x);\n-    bool_ret5(x, x);\n-    bool_ret4(x);\n-    bool_ret6(x, x);\n-}\n-\n-#[allow(if_same_then_else, needless_return)]\n-fn bool_ret(x: bool) -> bool {\n-    if x { return true } else { return true };\n-    //~^ ERROR this if-then-else expression will always return true\n-}\n-\n-#[allow(if_same_then_else, needless_return)]\n-fn bool_ret2(x: bool) -> bool {\n-    if x { return false } else { return false };\n-    //~^ ERROR this if-then-else expression will always return false\n-}\n-\n-#[allow(needless_return)]\n-fn bool_ret3(x: bool) -> bool {\n-    if x { return true } else { return false };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION return x\n-}\n-\n-#[allow(needless_return)]\n-fn bool_ret5(x: bool, y: bool) -> bool {\n-    if x && y { return true } else { return false };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION return x && y\n-}\n-\n-#[allow(needless_return)]\n-fn bool_ret4(x: bool) -> bool {\n-    if x { return false } else { return true };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION return !x\n-}\n-\n-#[allow(needless_return)]\n-fn bool_ret6(x: bool, y: bool) -> bool {\n-    if x && y { return false } else { return true };\n-    //~^ ERROR this if-then-else expression returns a bool literal\n-    //~| HELP you can reduce it to\n-    //~| SUGGESTION return !(x && y)\n-}"}, {"sha": "442a0b925cbfbab1f47e7e6c27055adce731ba94", "filename": "tests/compile-fail/needless_return.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,73 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(needless_return)]\n-\n-fn test_end_of_fn() -> bool {\n-    if true {\n-        // no error!\n-        return true;\n-    }\n-    return true;\n-    //~^ ERROR unneeded return statement\n-    //~| HELP remove `return` as shown\n-    //~| SUGGESTION true\n-}\n-\n-fn test_no_semicolon() -> bool {\n-    return true\n-    //~^ ERROR unneeded return statement\n-    //~| HELP remove `return` as shown\n-    //~| SUGGESTION true\n-}\n-\n-fn test_if_block() -> bool {\n-    if true {\n-        return true;\n-        //~^ ERROR unneeded return statement\n-        //~| HELP remove `return` as shown\n-        //~| SUGGESTION true\n-    } else {\n-        return false;\n-        //~^ ERROR unneeded return statement\n-        //~| HELP remove `return` as shown\n-        //~| SUGGESTION false\n-    }\n-}\n-\n-fn test_match(x: bool) -> bool {\n-    match x {\n-        true => return false,\n-        //~^ ERROR unneeded return statement\n-        //~| HELP remove `return` as shown\n-        //~| SUGGESTION false\n-\n-        false => {\n-            return true;\n-            //~^ ERROR unneeded return statement\n-            //~| HELP remove `return` as shown\n-            //~| SUGGESTION true\n-        }\n-    }\n-}\n-\n-fn test_closure() {\n-    let _ = || {\n-        return true;\n-        //~^ ERROR unneeded return statement\n-        //~| HELP remove `return` as shown\n-        //~| SUGGESTION true\n-    };\n-    let _ = || return true;\n-    //~^ ERROR unneeded return statement\n-    //~| HELP remove `return` as shown\n-    //~| SUGGESTION true\n-}\n-\n-fn main() {\n-    let _ = test_end_of_fn();\n-    let _ = test_no_semicolon();\n-    let _ = test_if_block();\n-    let _ = test_match(true);\n-    test_closure();\n-}"}, {"sha": "30a66a715f2000ed5d1650b77dc66a449ff1887d", "filename": "tests/compile-fail/no_effect.rs", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,122 +0,0 @@\n-#![feature(plugin, box_syntax, inclusive_range_syntax)]\n-#![plugin(clippy)]\n-\n-#![deny(no_effect, unnecessary_operation)]\n-#![allow(dead_code)]\n-#![allow(path_statements)]\n-#![allow(deref_addrof)]\n-#![feature(untagged_unions)]\n-\n-struct Unit;\n-struct Tuple(i32);\n-struct Struct {\n-    field: i32\n-}\n-enum Enum {\n-    Tuple(i32),\n-    Struct { field: i32 },\n-}\n-\n-union Union {\n-    a: u8,\n-    b: f64,\n-}\n-\n-fn get_number() -> i32 { 0 }\n-fn get_struct() -> Struct { Struct { field: 0 } }\n-\n-unsafe fn unsafe_fn() -> i32 { 0 }\n-\n-fn main() {\n-    let s = get_struct();\n-    let s2 = get_struct();\n-\n-    0; //~ERROR statement with no effect\n-    s2; //~ERROR statement with no effect\n-    Unit; //~ERROR statement with no effect\n-    Tuple(0); //~ERROR statement with no effect\n-    Struct { field: 0 }; //~ERROR statement with no effect\n-    Struct { ..s }; //~ERROR statement with no effect\n-    Union { a: 0 }; //~ERROR statement with no effect\n-    Enum::Tuple(0); //~ERROR statement with no effect\n-    Enum::Struct { field: 0 }; //~ERROR statement with no effect\n-    5 + 6; //~ERROR statement with no effect\n-    *&42; //~ERROR statement with no effect\n-    &6; //~ERROR statement with no effect\n-    (5, 6, 7); //~ERROR statement with no effect\n-    box 42; //~ERROR statement with no effect\n-    ..; //~ERROR statement with no effect\n-    5..; //~ERROR statement with no effect\n-    ..5; //~ERROR statement with no effect\n-    5..6; //~ERROR statement with no effect\n-    5...6; //~ERROR statement with no effect\n-    [42, 55]; //~ERROR statement with no effect\n-    [42, 55][1]; //~ERROR statement with no effect\n-    (42, 55).1; //~ERROR statement with no effect\n-    [42; 55]; //~ERROR statement with no effect\n-    [42; 55][13]; //~ERROR statement with no effect\n-    let mut x = 0;\n-    || x += 5; //~ERROR statement with no effect\n-\n-    // Do not warn\n-    get_number();\n-    unsafe { unsafe_fn() };\n-\n-    Tuple(get_number()); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    Struct { field: get_number() }; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    Struct { ..get_struct() }; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_struct();\n-    Enum::Tuple(get_number()); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    Enum::Struct { field: get_number() }; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    5 + get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION 5;get_number();\n-    *&get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    &get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    (5, 6, get_number()); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION 5;6;get_number();\n-    box get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    get_number()..; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    ..get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    5..get_number(); //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION 5;get_number();\n-    [42, get_number()]; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION 42;get_number();\n-    [42, 55][get_number() as usize]; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION [42, 55];get_number() as usize;\n-    (42, get_number()).1; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION 42;get_number();\n-    [get_number(); 55]; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-    [42; 55][get_number() as usize]; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION [42; 55];get_number() as usize;\n-    {get_number()}; //~ERROR statement can be reduced\n-    //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n-}"}, {"sha": "649a5ecb812d95ab830855d55389b31d756fa6dc", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,17 +1,17 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy,similar_names)]\n-//~^ NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n-//~| NOTE: lint level defined here\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n #![allow(unused)]\n \n \n@@ -24,12 +24,12 @@ fn main() {\n     let specter: i32;\n     let spectre: i32;\n \n-    let apple: i32; //~ NOTE: existing binding defined here\n-    //~^ NOTE: existing binding defined here\n-    let bpple: i32; //~ ERROR: name is too similar\n-    //~| HELP: separate the discriminating character by an underscore like: `b_pple`\n-    let cpple: i32; //~ ERROR: name is too similar\n-    //~| HELP: separate the discriminating character by an underscore like: `c_pple`\n+    let apple: i32;\n+\n+    let bpple: i32;\n+\n+    let cpple: i32;\n+\n \n     let a_bar: i32;\n     let b_bar: i32;\n@@ -52,13 +52,13 @@ fn main() {\n     let blubrhs: i32;\n     let blublhs: i32;\n \n-    let blubx: i32; //~ NOTE: existing binding defined here\n-    let bluby: i32; //~ ERROR: name is too similar\n-    //~| HELP: separate the discriminating character by an underscore like: `blub_y`\n+    let blubx: i32;\n+    let bluby: i32;\n+\n \n-    let cake: i32; //~ NOTE: existing binding defined here\n+    let cake: i32;\n     let cakes: i32;\n-    let coke: i32; //~ ERROR: name is too similar\n+    let coke: i32;\n \n     match 5 {\n         cheese @ 1 => {},\n@@ -74,14 +74,14 @@ fn main() {\n     let ipv6: i32;\n     let abcd1: i32;\n     let abdc2: i32;\n-    let xyz1abc: i32; //~ NOTE: existing binding defined here\n+    let xyz1abc: i32;\n     let xyz2abc: i32;\n-    let xyzeabc: i32; //~ ERROR: name is too similar\n+    let xyzeabc: i32;\n \n-    let parser: i32; //~ NOTE: existing binding defined here\n+    let parser: i32;\n     let parsed: i32;\n-    let parsee: i32; //~ ERROR: name is too similar\n-    //~| HELP: separate the discriminating character by an underscore like: `parse_e`\n+    let parsee: i32;\n+\n \n     let setter: i32;\n     let getter: i32;\n@@ -93,8 +93,8 @@ fn main() {\n \n fn foo() {\n     let Foo { apple, bpple } = unimplemented!();\n-    let Foo { apple: spring, //~NOTE existing binding defined here\n-        bpple: sprang } = unimplemented!(); //~ ERROR: name is too similar\n+    let Foo { apple: spring,\n+        bpple: sprang } = unimplemented!();\n }\n \n #[derive(Clone, Debug)]\n@@ -128,15 +128,19 @@ fn bla() {\n             let blar: i32;\n         }\n         {\n-            let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            let e: i32;\n+\n         }\n         {\n-            let e: i32; //~ ERROR: 5th binding whose name is just one char\n-            let f: i32; //~ ERROR: 6th binding whose name is just one char\n+            let e: i32;\n+\n+            let f: i32;\n+\n         }\n         match 5 {\n             1 => println!(\"\"),\n-            e => panic!(), //~ ERROR: 5th binding whose name is just one char\n+            e => panic!(),\n+\n         }\n         match 5 {\n             1 => println!(\"\"),"}, {"sha": "24310eb81dae057e88f909f11748f67b3a79d970", "filename": "tests/compile-fail/overflow_check_conditional.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflow_check_conditional.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,61 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![allow(many_single_char_names)]\n-#![deny(overflow_check_conditional)]\n-\n-fn main() {\n-\tlet a: u32 = 1;\n-\tlet b: u32 = 2;\n-\tlet c: u32 = 3;\n-\tif a + b < a { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a + b < b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n-\n-\t}\n-\tif b > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a - b > b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n-\n-\t}\n-\tif b < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a - b > a { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n-\n-\t}\n-\tif a + b < c {\n-\n-\t}\n-\tif c > a + b {\n-\n-\t}\n-\tif a - b < c {\n-\n-\t}\n-\tif c > a - b {\n-\n-\t}\n-\tlet i = 1.1;\n-\tlet j = 2.2;\n-\tif i + j < i {\n-\n-\t}\n-\tif i - j < i {\n-\n-\t}\n-\tif i > i + j {\n-\n-\t}\n-\tif i - j < i {\n-\n-\t}\n-}"}, {"sha": "28cc9e643c040bfef6a154aba0a26458ee5a0cdd", "filename": "tests/compile-fail/precedence.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,44 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(precedence)]\n-#[allow(identity_op)]\n-#[allow(eq_op)]\n-fn main() {\n-    1 << 2 + 3;\n-    //~^ ERROR operator precedence can trip\n-    //~| SUGGESTION 1 << (2 + 3)\n-    1 + 2 << 3;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION (1 + 2) << 3\n-    4 >> 1 + 1;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION 4 >> (1 + 1)\n-    1 + 3 >> 2;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION (1 + 3) >> 2\n-    1 ^ 1 - 1;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION 1 ^ (1 - 1)\n-    3 | 2 - 1;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION 3 | (2 - 1)\n-    3 & 5 - 2;\n-    //~^ERROR operator precedence can trip\n-    //~| SUGGESTION 3 & (5 - 2)\n-\n-    -1i32.abs();\n-    //~^ERROR unary minus has lower precedence\n-    //~| SUGGESTION -(1i32.abs())\n-    -1f32.abs();\n-    //~^ERROR unary minus has lower precedence\n-    //~| SUGGESTION -(1f32.abs())\n-\n-    // These should not trigger an error\n-    let _ = (-1i32).abs();\n-    let _ = (-1f32).abs();\n-    let _ = -(1i32).abs();\n-    let _ = -(1f32).abs();\n-    let _ = -(1i32.abs());\n-    let _ = -(1f32.abs());\n-}"}, {"sha": "4c1ebd9fe503c1f9822427f9c7a597a70f0ec542", "filename": "tests/compile-fail/print_with_newline.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint_with_newline.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,20 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(print_with_newline)]\n-\n-fn main() {\n-    print!(\"Hello\\n\"); //~ERROR using `print!()` with a format string\n-    print!(\"Hello {}\\n\", \"world\"); //~ERROR using `print!()` with a format string\n-    print!(\"Hello {} {}\\n\\n\", \"world\", \"#2\"); //~ERROR using `print!()` with a format string\n-    print!(\"{}\\n\", 1265); //~ERROR using `print!()` with a format string\n-\n-    // these are all fine\n-    print!(\"\");\n-    print!(\"Hello\");\n-    println!(\"Hello\");\n-    println!(\"Hello\\n\");\n-    println!(\"Hello {}\\n\", \"world\");\n-    print!(\"Issue\\n{}\", 1265);\n-    print!(\"{}\", 1265);\n-    print!(\"\\n{}\", 1275);\n-}"}, {"sha": "73830ecc9f16427ce74fdfa4ce42d90e23a57c40", "filename": "tests/compile-fail/redundant_closure_call.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fredundant_closure_call.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,25 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(redundant_closure_call)]\n-\n-fn main() {\n-\tlet a = (|| 42)();\n-\t//~^ ERROR Try not to call a closure in the expression where it is declared.\n-\t//~| HELP Try doing something like:\n-\t//~| SUGGESTION let a = 42;\n-\n-\tlet mut i = 1;\n-\tlet k = (|m| m+1)(i); //~ERROR Try not to call a closure in the expression where it is declared.\n-\n-\tk = (|a,b| a*b)(1,5); //~ERROR Try not to call a closure in the expression where it is declared.\n-\n-\tlet closure = || 32;\n-\ti = closure(); //~ERROR Closure called just once immediately after it was declared\n-\n-\tlet closure = |i| i+1;\n-\ti = closure(3); //~ERROR Closure called just once immediately after it was declared\n-\n-\ti = closure(4);\n-}\n-"}, {"sha": "789425e71fe41ed56dfc998043bd511f2111620f", "filename": "tests/compile-fail/reference.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,88 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-fn get_number() -> usize {\n-    10\n-}\n-\n-fn get_reference(n : &usize) -> &usize {\n-    n\n-}\n-\n-#[allow(many_single_char_names, double_parens)]\n-#[allow(unused_variables)]\n-#[deny(deref_addrof)]\n-fn main() {\n-    let a = 10;\n-    let aref = &a;\n-\n-    let b = *&a;\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = a;\n-\n-    let b = *&get_number();\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = get_number();\n-\n-    let b = *get_reference(&a);\n-\n-    let bytes : Vec<usize> = vec![1, 2, 3, 4];\n-    let b = *&bytes[1..2][0];\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = bytes[1..2][0];\n-\n-    //This produces a suggestion of 'let b = (a);' which\n-    //will trigger the 'unused_parens' lint\n-    let b = *&(a);\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = (a)\n-\n-    let b = *(&a);\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = a;\n-\n-    let b = *((&a));\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = a\n-\n-    let b = *&&a;\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = &a;\n-\n-    let b = **&aref;\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = *aref;\n-\n-    //This produces a suggestion of 'let b = *&a;' which\n-    //will trigger the 'deref_addrof' lint again\n-    let b = **&&a;\n-    //~^ERROR immediately dereferencing a reference\n-    //~|HELP try this\n-    //~|SUGGESTION let b = *&a;\n-\n-    {\n-        let mut x = 10;\n-        let y = *&mut x;\n-        //~^ERROR immediately dereferencing a reference\n-        //~|HELP try this\n-        //~|SUGGESTION let y = x;\n-    }\n-\n-    {\n-        //This produces a suggestion of 'let y = *&mut x' which\n-        //will trigger the 'deref_addrof' lint again\n-        let mut x = 10;\n-        let y = **&mut &mut x;\n-        //~^ERROR immediately dereferencing a reference\n-        //~|HELP try this\n-        //~|SUGGESTION let y = *&mut x;\n-    }\n-}"}, {"sha": "23dfc0ebcaf2993ae49c111d503c66f8e453db84", "filename": "tests/compile-fail/short_circuit_statement.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshort_circuit_statement.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,27 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(short_circuit_statement)]\n-\n-fn main() {\n-    f() && g();\n-    //~^ ERROR boolean short circuit operator\n-    //~| HELP replace it with\n-    //~| SUGGESTION if f() { g(); }\n-    f() || g();\n-    //~^ ERROR boolean short circuit operator\n-    //~| HELP replace it with\n-    //~| SUGGESTION if !f() { g(); }\n-    1 == 2 || g();\n-    //~^ ERROR boolean short circuit operator\n-    //~| HELP replace it with\n-    //~| SUGGESTION if !(1 == 2) { g(); }\n-}\n-\n-fn f() -> bool {\n-    true\n-}\n-\n-fn g() -> bool {\n-    false\n-}"}, {"sha": "f893d99491bee50b7c902c40003ac9e250ca9ead", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -7,11 +7,11 @@ fn add_only() { // ignores assignment distinction\n     let mut x = \"\".to_owned();\n \n     for _ in 1..3 {\n-        x = x + \".\"; //~ERROR you added something to a string.\n+        x = x + \".\";\n     }\n \n     let y = \"\".to_owned();\n-    let z = y + \"...\"; //~ERROR you added something to a string.\n+    let z = y + \"...\";\n \n     assert_eq!(&x, &z);\n }\n@@ -21,7 +21,7 @@ fn add_assign_only() {\n     let mut x = \"\".to_owned();\n \n     for _ in 1..3 {\n-        x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+        x = x + \".\";\n     }\n \n     let y = \"\".to_owned();\n@@ -35,11 +35,11 @@ fn both() {\n     let mut x = \"\".to_owned();\n \n     for _ in 1..3 {\n-        x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+        x = x + \".\";\n     }\n \n     let y = \"\".to_owned();\n-    let z = y + \"...\"; //~ERROR you added something to a string.\n+    let z = y + \"...\";\n \n     assert_eq!(&x, &z);\n }\n@@ -48,9 +48,9 @@ fn both() {\n #[deny(string_lit_as_bytes)]\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n-    //~^ERROR calling `as_bytes()`\n-    //~|HELP byte string literal\n-    //~|SUGGESTION b\"hello there\"\n+\n+\n+\n \n     // no warning, because this cannot be written as a byte string literal:\n     let ubs = \"\u2603\".as_bytes();\n@@ -66,8 +66,8 @@ fn main() {\n     // the add is only caught for `String`\n     let mut x = 1;\n     ; x = x + 1;\n-    //~^ WARN assign_op_pattern\n-    //~| HELP replace\n-    //~| SUGGESTION ; x += 1;\n+\n+\n+\n     assert_eq!(2, x);\n }"}, {"sha": "0c99859c10d8c972b96250612eec2ea7ca25b1ad", "filename": "tests/compile-fail/stutter.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstutter.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,14 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(stutter)]\n-#![allow(dead_code)]\n-\n-mod foo {\n-    pub fn foo() {}\n-    pub fn foo_bar() {} //~ ERROR: item name starts with its containing module's name\n-    pub fn bar_foo() {} //~ ERROR: item name ends with its containing module's name\n-    pub struct FooCake {} //~ ERROR: item name starts with its containing module's name\n-    pub enum CakeFoo {} //~ ERROR: item name ends with its containing module's name\n-}\n-\n-fn main() {}"}, {"sha": "95478dda0d32ea964463b03ef7b1853b4edbbfe8", "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -11,9 +11,9 @@ fn array() {\n     let temp = foo[0];\n     foo[0] = foo[1];\n     foo[1] = temp;\n-    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n-    //~| HELP try\n-    //~| SUGGESTION foo.swap(0, 1);\n+\n+\n+\n \n     foo.swap(0, 1);\n }\n@@ -23,9 +23,9 @@ fn slice() {\n     let temp = foo[0];\n     foo[0] = foo[1];\n     foo[1] = temp;\n-    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n-    //~| HELP try\n-    //~| SUGGESTION foo.swap(0, 1);\n+\n+\n+\n \n     foo.swap(0, 1);\n }\n@@ -35,9 +35,9 @@ fn vec() {\n     let temp = foo[0];\n     foo[0] = foo[1];\n     foo[1] = temp;\n-    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n-    //~| HELP try\n-    //~| SUGGESTION foo.swap(0, 1);\n+\n+\n+\n \n     foo.swap(0, 1);\n }\n@@ -52,33 +52,33 @@ fn main() {\n \n     a = b;\n     b = a;\n-    //~^^ ERROR this looks like you are trying to swap `a` and `b`\n-    //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n-    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+\n+\n+\n \n     ; let t = a;\n     a = b;\n     b = t;\n-    //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n-    //~| HELP try\n-    //~| SUGGESTION ; std::mem::swap(&mut a, &mut b);\n-    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+\n+\n+\n \n     let mut c = Foo(42);\n \n     c.0 = a;\n     a = c.0;\n-    //~^^ ERROR this looks like you are trying to swap `c.0` and `a`\n-    //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n-    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+\n+\n+\n \n     ; let t = c.0;\n     c.0 = a;\n     a = t;\n-    //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually\n-    //~| HELP try\n-    //~| SUGGESTION ; std::mem::swap(&mut c.0, &mut a);\n-    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+\n+\n+\n }"}, {"sha": "86459ea97961793364a48c5a5e0757f56e82def4", "filename": "tests/compile-fail/toplevel_ref_arg.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,40 +0,0 @@\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-#![deny(clippy)]\n-#![allow(unused)]\n-\n-fn the_answer(ref mut x: u8) {  //~ ERROR `ref` directly on a function argument is ignored\n-  *x = 42;\n-}\n-\n-fn main() {\n-  let mut x = 0;\n-  the_answer(x);\n-  // Closures should not warn\n-  let y = |ref x| { println!(\"{:?}\", x) };\n-  y(1u8);\n-\n-  let ref x = 1;\n-  //~^ ERROR `ref` on an entire `let` pattern is discouraged\n-  //~| HELP try\n-  //~| SUGGESTION let x = &1;\n-\n-  let ref y: (&_, u8) = (&1, 2);\n-  //~^ ERROR `ref` on an entire `let` pattern is discouraged\n-  //~| HELP try\n-  //~| SUGGESTION let y: &(&_, u8) = &(&1, 2);\n-\n-  let ref z = 1 + 2;\n-  //~^ ERROR `ref` on an entire `let` pattern is discouraged\n-  //~| HELP try\n-  //~| SUGGESTION let z = &(1 + 2);\n-\n-  let ref mut z = 1 + 2;\n-  //~^ ERROR `ref` on an entire `let` pattern is discouraged\n-  //~| HELP try\n-  //~| SUGGESTION let z = &mut (1 + 2);\n-\n-  let (ref x, _) = (1,2); // okay, not top level\n-  println!(\"The answer is {}.\", x);\n-}"}, {"sha": "d22648c0cdba93c00f6257c36f50e5ca969c3ea2", "filename": "tests/compile-fail/wrong_self_convention.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwrong_self_convention.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,60 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(wrong_self_convention)]\n-#![deny(wrong_pub_self_convention)]\n-#![allow(dead_code)]\n-\n-fn main() {}\n-\n-#[derive(Clone, Copy)]\n-struct Foo;\n-\n-impl Foo {\n-\n-    fn as_i32(self) {}\n-    fn as_u32(&self) {}\n-    fn into_i32(self) {}\n-    fn is_i32(self) {}\n-    fn is_u32(&self) {}\n-    fn to_i32(self) {}\n-    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n-\n-    pub fn as_i64(self) {}\n-    pub fn into_i64(self) {}\n-    pub fn is_i64(self) {}\n-    pub fn to_i64(self) {}\n-    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n-    // check whether the lint can be allowed at the function level\n-    #[allow(wrong_self_convention)]\n-    pub fn from_cake(self) {}\n-\n-}\n-\n-struct Bar;\n-\n-impl Bar {\n-\n-    fn as_i32(self) {} //~ERROR: methods called `as_*` usually take self by reference\n-    fn as_u32(&self) {}\n-    fn into_i32(&self) {} //~ERROR: methods called `into_*` usually take self by value\n-    fn into_u32(self) {}\n-    fn is_i32(self) {} //~ERROR: methods called `is_*` usually take self by reference\n-    fn is_u32(&self) {}\n-    fn to_i32(self) {} //~ERROR: methods called `to_*` usually take self by reference\n-    fn to_u32(&self) {}\n-    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n-\n-    pub fn as_i64(self) {} //~ERROR: methods called `as_*` usually take self by reference\n-    pub fn into_i64(&self) {} //~ERROR: methods called `into_*` usually take self by value\n-    pub fn is_i64(self) {} //~ERROR: methods called `is_*` usually take self by reference\n-    pub fn to_i64(self) {} //~ERROR: methods called `to_*` usually take self by reference\n-    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n-\n-    // test for false positives\n-    fn as_(self) {}\n-    fn into_(&self) {}\n-    fn is_(self) {}\n-    fn to_(self) {}\n-    fn from_(self) {}\n-}"}, {"sha": "c422e83873b09b855f5c515cbc2ce3e552fc619a", "filename": "tests/compile-fail/zero_div_zero.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96290df9f228b63db145a7aa9add800223bfc27/tests%2Fcompile-fail%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzero_div_zero.rs?ref=d96290df9f228b63db145a7aa9add800223bfc27", "patch": "@@ -1,20 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[allow(unused_variables)]\n-#[deny(zero_divided_by_zero)]\n-fn main() {\n-    let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n-                         //~^ equal expressions as operands to `/`\n-    let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n-                         //~^ equal expressions as operands to `/`\n-    let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n-                         //~^ equal expressions as operands to `/`\n-    let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n-                         //~^ equal expressions as operands to `/`\n-    let zero = 0.0;\n-    let other_zero = 0.0;\n-    let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants.\n-    let not_nan = 2.0/0.0; // not an error: 2/0 = inf\n-    let also_not_nan = 0.0/2.0; // not an error: 0/2 = 0\n-}"}, {"sha": "bb60934d443ef31c8e8a70db6fb27afd50a05402", "filename": "tests/compile-test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -14,6 +14,7 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     }\n \n     config.mode = cfg_mode;\n+    config.build_base = PathBuf::from(\"target/debug/test_build_base\");\n     config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n \n     compiletest::run_tests(&config);\n@@ -27,5 +28,5 @@ fn prepare_env() {\n fn compile_test() {\n     prepare_env();\n     run_mode(\"run-pass\", \"run-pass\");\n-    run_mode(\"compile-fail\", \"compile-fail\");\n+    run_mode(\"ui\", \"ui\");\n }"}, {"sha": "e0c856e3d7ccff678a6c1125fa9588d4614e3193", "filename": "tests/run-pass/deprecated.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Frun-pass%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Frun-pass%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdeprecated.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -2,11 +2,11 @@\n #![plugin(clippy)]\n \n #[warn(str_to_string)]\n-//~^WARNING: lint str_to_string has been removed: using `str::to_string`\n+\n #[warn(string_to_string)]\n-//~^WARNING: lint string_to_string has been removed: using `string::to_string`\n+\n #[warn(unstable_as_slice)]\n-//~^WARNING: lint unstable_as_slice has been removed: `Vec::as_slice` has been stabilized\n+\n #[warn(unstable_as_mut_slice)]\n-//~^WARNING: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been stabilized\n+\n fn main() {}"}, {"sha": "495dd27bb2bcfd60ab4273e8942fc25523308e53", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,93 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(absurd_extreme_comparisons)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+\n+fn main() {\n+    const Z: u32 = 0;\n+\n+    let u: u32 = 42;\n+\n+    u <= 0;\n+\n+\n+    u <= Z;\n+\n+\n+    u < Z;\n+\n+\n+    Z >= u;\n+\n+\n+    Z > u;\n+\n+\n+    u > std::u32::MAX;\n+\n+\n+    u >= std::u32::MAX;\n+\n+\n+    std::u32::MAX < u;\n+\n+\n+    std::u32::MAX <= u;\n+\n+\n+\n+    1-1 > u;\n+\n+\n+    u >= !0;\n+\n+\n+    u <= 12 - 2*6;\n+\n+\n+\n+    let i: i8 = 0;\n+    i < -127 - 1;\n+\n+\n+    std::i8::MAX >= i;\n+\n+\n+    3-7 < std::i32::MIN;\n+\n+\n+\n+    let b = false;\n+    b >= true;\n+\n+\n+    false > b;\n+\n+\n+\n+    u > 0; // ok\n+\n+    // this is handled by unit_cmp\n+    () < {};\n+}\n+\n+use std::cmp::{Ordering, PartialEq, PartialOrd};\n+\n+#[derive(PartialEq, PartialOrd)]\n+pub struct U(u64);\n+\n+impl PartialEq<u32> for U {\n+    fn eq(&self, other: &u32) -> bool {\n+        self.eq(&U(*other as u64))\n+    }\n+}\n+impl PartialOrd<u32> for U {\n+    fn partial_cmp(&self, other: &u32) -> Option<Ordering> {\n+        self.partial_cmp(&U(*other as u64))\n+    }\n+}\n+\n+pub fn foo(val: U) -> bool {\n+    val > std::u32::MAX\n+}"}, {"sha": "834bcf03fe1e3a246386e9d8a33884814b5f1513", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,151 @@\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:12:5\n+   |\n+12 |     u <= 0;\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/absurd-extreme-comparisons.rs:4:9\n+   |\n+4  | #![deny(absurd_extreme_comparisons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: because 0 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 0 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:15:5\n+   |\n+15 |     u <= Z;\n+   |     ^^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == Z instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:18:5\n+   |\n+18 |     u < Z;\n+   |     ^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:21:5\n+   |\n+21 |     Z >= u;\n+   |     ^^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using Z == u instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:24:5\n+   |\n+24 |     Z > u;\n+   |     ^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:27:5\n+   |\n+27 |     u > std::u32::MAX;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:30:5\n+   |\n+30 |     u >= std::u32::MAX;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == std::u32::MAX instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:33:5\n+   |\n+33 |     std::u32::MAX < u;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:36:5\n+   |\n+36 |     std::u32::MAX <= u;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using std::u32::MAX == u instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:40:5\n+   |\n+40 |     1-1 > u;\n+   |     ^^^^^^^\n+   |\n+   = help: because 1-1 is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:43:5\n+   |\n+43 |     u >= !0;\n+   |     ^^^^^^^\n+   |\n+   = help: because !0 is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == !0 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:46:5\n+   |\n+46 |     u <= 12 - 2*6;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:51:5\n+   |\n+51 |     i < -127 - 1;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: because -127 - 1 is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:54:5\n+   |\n+54 |     std::i8::MAX >= i;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::i8::MAX is the maximum value for this type, this comparison is always true\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:57:5\n+   |\n+57 |     3-7 < std::i32::MIN;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::i32::MIN is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:62:5\n+   |\n+62 |     b >= true;\n+   |     ^^^^^^^^^\n+   |\n+   = help: because true is the maximum value for this type, the case where the two sides are not equal never occurs, consider using b == true instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:65:5\n+   |\n+65 |     false > b;\n+   |     ^^^^^^^^^\n+   |\n+   = help: because false is the minimum value for this type, this comparison is always false\n+\n+warning: <-comparison of unit values detected. This will always be false\n+  --> $DIR/absurd-extreme-comparisons.rs:72:5\n+   |\n+72 |     () < {};\n+   |     ^^^^^^^\n+   |\n+   = note: #[warn(unit_cmp)] on by default\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "2da762725b158e5e78d7ff8a1fb60153829c727e", "filename": "tests/ui/approx_const.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,57 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(approx_constant)]\n+#[allow(unused, shadow_unrelated, similar_names)]\n+fn main() {\n+    let my_e = 2.7182;\n+    let almost_e = 2.718;\n+    let no_e = 2.71;\n+\n+    let my_1_frac_pi = 0.3183;\n+    let no_1_frac_pi = 0.31;\n+\n+    let my_frac_1_sqrt_2 = 0.70710678;\n+    let almost_frac_1_sqrt_2 = 0.70711;\n+    let my_frac_1_sqrt_2 = 0.707;\n+\n+    let my_frac_2_pi = 0.63661977;\n+    let no_frac_2_pi = 0.636;\n+\n+    let my_frac_2_sq_pi = 1.128379;\n+    let no_frac_2_sq_pi = 1.128;\n+\n+    let my_frac_pi_2 = 1.57079632679;\n+    let no_frac_pi_2 = 1.5705;\n+\n+    let my_frac_pi_3 = 1.04719755119;\n+    let no_frac_pi_3 = 1.047;\n+\n+    let my_frac_pi_4 = 0.785398163397;\n+    let no_frac_pi_4 = 0.785;\n+\n+    let my_frac_pi_6 = 0.523598775598;\n+    let no_frac_pi_6 = 0.523;\n+\n+    let my_frac_pi_8 = 0.3926990816987;\n+    let no_frac_pi_8 = 0.392;\n+\n+    let my_ln_10 = 2.302585092994046;\n+    let no_ln_10 = 2.303;\n+\n+    let my_ln_2 = 0.6931471805599453;\n+    let no_ln_2 = 0.693;\n+\n+    let my_log10_e = 0.43429448190325182;\n+    let no_log10_e = 0.434;\n+\n+    let my_log2_e = 1.4426950408889634;\n+    let no_log2_e = 1.442;\n+\n+    let my_pi = 3.1415;\n+    let almost_pi = 3.14;\n+    let no_pi = 3.15;\n+\n+    let my_sq2 = 1.4142;\n+    let no_sq2 = 1.414;\n+}"}, {"sha": "cc0408fb2d9eb409991ae248664692db51e0acc9", "filename": "tests/ui/approx_const.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,122 @@\n+error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+ --> $DIR/approx_const.rs:7:16\n+  |\n+7 |     let my_e = 2.7182;\n+  |                ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/approx_const.rs:4:8\n+  |\n+4 | #[deny(approx_constant)]\n+  |        ^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+ --> $DIR/approx_const.rs:8:20\n+  |\n+8 |     let almost_e = 2.718;\n+  |                    ^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:11:24\n+   |\n+11 |     let my_1_frac_pi = 0.3183;\n+   |                        ^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:14:28\n+   |\n+14 |     let my_frac_1_sqrt_2 = 0.70710678;\n+   |                            ^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:15:32\n+   |\n+15 |     let almost_frac_1_sqrt_2 = 0.70711;\n+   |                                ^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:18:24\n+   |\n+18 |     let my_frac_2_pi = 0.63661977;\n+   |                        ^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:21:27\n+   |\n+21 |     let my_frac_2_sq_pi = 1.128379;\n+   |                           ^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:24:24\n+   |\n+24 |     let my_frac_pi_2 = 1.57079632679;\n+   |                        ^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found. Consider using it directly\n+  --> $DIR/approx_const.rs:27:24\n+   |\n+27 |     let my_frac_pi_3 = 1.04719755119;\n+   |                        ^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found. Consider using it directly\n+  --> $DIR/approx_const.rs:30:24\n+   |\n+30 |     let my_frac_pi_4 = 0.785398163397;\n+   |                        ^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found. Consider using it directly\n+  --> $DIR/approx_const.rs:33:24\n+   |\n+33 |     let my_frac_pi_6 = 0.523598775598;\n+   |                        ^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found. Consider using it directly\n+  --> $DIR/approx_const.rs:36:24\n+   |\n+36 |     let my_frac_pi_8 = 0.3926990816987;\n+   |                        ^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LN_10` found. Consider using it directly\n+  --> $DIR/approx_const.rs:39:20\n+   |\n+39 |     let my_ln_10 = 2.302585092994046;\n+   |                    ^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LN_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:42:19\n+   |\n+42 |     let my_ln_2 = 0.6931471805599453;\n+   |                   ^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LOG10_E` found. Consider using it directly\n+  --> $DIR/approx_const.rs:45:22\n+   |\n+45 |     let my_log10_e = 0.43429448190325182;\n+   |                      ^^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_E` found. Consider using it directly\n+  --> $DIR/approx_const.rs:48:21\n+   |\n+48 |     let my_log2_e = 1.4426950408889634;\n+   |                     ^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:51:17\n+   |\n+51 |     let my_pi = 3.1415;\n+   |                 ^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:52:21\n+   |\n+52 |     let almost_pi = 3.14;\n+   |                     ^^^^\n+\n+error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:55:18\n+   |\n+55 |     let my_sq2 = 1.4142;\n+   |                  ^^^^^^\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "b4014cc480fc8cb049f5592033b57051aeae3f5c", "filename": "tests/ui/arithmetic.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,30 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(integer_arithmetic, float_arithmetic)]\n+#![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]\n+fn main() {\n+    let i = 1i32;\n+    1 + i;\n+    i * 2;\n+    1 %\n+    i / 2; // no error, this is part of the expression in the preceding line\n+    i - 2 + 2 - i;\n+    -i;\n+\n+    i & 1; // no wrapping\n+    i | 1;\n+    i ^ 1;\n+    i >> 1;\n+    i << 1;\n+\n+    let f = 1.0f32;\n+\n+    f * 2.0;\n+\n+    1.0 + f;\n+    f * 2.0;\n+    f / 2.0;\n+    f - 2.0 * 4.2;\n+    -f;\n+}"}, {"sha": "4f68b50ccbbb9c636a3c6369e4401abaac5dd9c8", "filename": "tests/ui/arithmetic.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,82 @@\n+error: integer arithmetic detected\n+ --> $DIR/arithmetic.rs:8:5\n+  |\n+8 |     1 + i;\n+  |     ^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/arithmetic.rs:4:9\n+  |\n+4 | #![deny(integer_arithmetic, float_arithmetic)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: integer arithmetic detected\n+ --> $DIR/arithmetic.rs:9:5\n+  |\n+9 |     i * 2;\n+  |     ^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:10:5\n+   |\n+10 |       1 %\n+   |  _____^ starting here...\n+11 | |     i / 2; // no error, this is part of the expression in the preceding line\n+   | |_________^ ...ending here\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:12:5\n+   |\n+12 |     i - 2 + 2 - i;\n+   |     ^^^^^^^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:13:5\n+   |\n+13 |     -i;\n+   |     ^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:23:5\n+   |\n+23 |     f * 2.0;\n+   |     ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/arithmetic.rs:4:29\n+   |\n+4  | #![deny(integer_arithmetic, float_arithmetic)]\n+   |                             ^^^^^^^^^^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:25:5\n+   |\n+25 |     1.0 + f;\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:26:5\n+   |\n+26 |     f * 2.0;\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:27:5\n+   |\n+27 |     f / 2.0;\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:28:5\n+   |\n+28 |     f - 2.0 * 4.2;\n+   |     ^^^^^^^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:29:5\n+   |\n+29 |     -f;\n+   |     ^^\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "28b4c78b4448c2bf1c6e4da76bd58dbc589d99f0", "filename": "tests/ui/array_indexing.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,45 @@\n+#![feature(inclusive_range_syntax, plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(indexing_slicing)]\n+#![deny(out_of_bounds_indexing)]\n+#![allow(no_effect, unnecessary_operation)]\n+\n+fn main() {\n+    let x = [1,2,3,4];\n+    x[0];\n+    x[3];\n+    x[4];\n+    x[1 << 3];\n+    &x[1..5];\n+    &x[0..3];\n+    &x[0...4];\n+    &x[...4];\n+    &x[..];\n+    &x[1..];\n+    &x[4..];\n+    &x[5..];\n+    &x[..4];\n+    &x[..5];\n+\n+    let y = &x;\n+    y[0];\n+    &y[1..2];\n+    &y[..];\n+    &y[0...4];\n+    &y[...4];\n+\n+    let empty: [i8; 0] = [];\n+    empty[0];\n+    &empty[1..5];\n+    &empty[0...4];\n+    &empty[...4];\n+    &empty[..];\n+    &empty[0..];\n+    &empty[0..0];\n+    &empty[0...0];\n+    &empty[...0];\n+    &empty[..0];\n+    &empty[1..];\n+    &empty[..4];\n+}"}, {"sha": "0650866ccdb64535f968b93bc68ca54fb1564790", "filename": "tests/ui/array_indexing.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,152 @@\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:12:5\n+   |\n+12 |     x[4];\n+   |     ^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:13:5\n+   |\n+13 |     x[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:14:6\n+   |\n+14 |     &x[1..5];\n+   |      ^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:16:6\n+   |\n+16 |     &x[0...4];\n+   |      ^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:17:6\n+   |\n+17 |     &x[...4];\n+   |      ^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:21:6\n+   |\n+21 |     &x[5..];\n+   |      ^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:23:6\n+   |\n+23 |     &x[..5];\n+   |      ^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: indexing may panic\n+  --> $DIR/array_indexing.rs:26:5\n+   |\n+26 |     y[0];\n+   |     ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/array_indexing.rs:4:9\n+   |\n+4  | #![deny(indexing_slicing)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:27:6\n+   |\n+27 |     &y[1..2];\n+   |      ^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:29:6\n+   |\n+29 |     &y[0...4];\n+   |      ^^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:30:6\n+   |\n+30 |     &y[...4];\n+   |      ^^^^^^^\n+\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:33:5\n+   |\n+33 |     empty[0];\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:34:6\n+   |\n+34 |     &empty[1..5];\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:35:6\n+   |\n+35 |     &empty[0...4];\n+   |      ^^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:36:6\n+   |\n+36 |     &empty[...4];\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:40:6\n+   |\n+40 |     &empty[0...0];\n+   |      ^^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:41:6\n+   |\n+41 |     &empty[...0];\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:43:6\n+   |\n+43 |     &empty[1..];\n+   |      ^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:44:6\n+   |\n+44 |     &empty[..4];\n+   |      ^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "78f9dc0d0344af9a89982779e2c4460398e31e5f", "filename": "tests/ui/assign_ops.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,85 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(assign_ops)]\n+#[allow(unused_assignments)]\n+fn main() {\n+    let mut i = 1i32;\n+    i += 2;\n+\n+\n+    i += 2 + 17;\n+\n+\n+    i -= 6;\n+\n+\n+    i -= 2 - 1;\n+\n+\n+\n+    i *= 5;\n+\n+\n+    i *= 1+5;\n+\n+\n+    i /= 32;\n+\n+\n+    i /= 32 | 5;\n+\n+\n+    i /= 32 / 5;\n+\n+\n+    i %= 42;\n+\n+\n+    i >>= i;\n+\n+\n+    i <<= 9 + 6 - 7;\n+\n+\n+    i += 1 << 5;\n+\n+\n+\n+}\n+\n+#[allow(dead_code, unused_assignments)]\n+#[deny(assign_op_pattern)]\n+fn bla() {\n+    let mut a = 5;\n+    a = a + 1;\n+\n+\n+    a = 1 + a;\n+\n+\n+    a = a - 1;\n+\n+\n+    a = a * 99;\n+\n+\n+    a = 42 * a;\n+\n+\n+    a = a / 2;\n+\n+\n+    a = a % 5;\n+\n+\n+    a = a & 1;\n+\n+\n+    a = 1 - a;\n+    a = 5 / a;\n+    a = 42 % a;\n+    a = 6 << a;\n+    let mut s = String::new();\n+    s = s + \"bla\";\n+}"}, {"sha": "8ce2ae375f362e543c5bc0a05fa392e414446eba", "filename": "tests/ui/assign_ops.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,201 @@\n+error: assign operation detected\n+ --> $DIR/assign_ops.rs:8:5\n+  |\n+8 |     i += 2;\n+  |     ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/assign_ops.rs:4:8\n+  |\n+4 | #[deny(assign_ops)]\n+  |        ^^^^^^^^^^\n+help: replace it with\n+  |     i = i + 2;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:11:5\n+   |\n+11 |     i += 2 + 17;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i + 2 + 17;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:14:5\n+   |\n+14 |     i -= 6;\n+   |     ^^^^^^\n+   |\n+help: replace it with\n+   |     i = i - 6;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:17:5\n+   |\n+17 |     i -= 2 - 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i - (2 - 1);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:21:5\n+   |\n+21 |     i *= 5;\n+   |     ^^^^^^\n+   |\n+help: replace it with\n+   |     i = i * 5;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:24:5\n+   |\n+24 |     i *= 1+5;\n+   |     ^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i * (1+5);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:27:5\n+   |\n+27 |     i /= 32;\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / 32;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:30:5\n+   |\n+30 |     i /= 32 | 5;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / (32 | 5);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:33:5\n+   |\n+33 |     i /= 32 / 5;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / (32 / 5);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:36:5\n+   |\n+36 |     i %= 42;\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i % 42;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:39:5\n+   |\n+39 |     i >>= i;\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i >> i;\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:42:5\n+   |\n+42 |     i <<= 9 + 6 - 7;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i << (9 + 6 - 7);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:45:5\n+   |\n+45 |     i += 1 << 5;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i + (1 << 5);\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:55:5\n+   |\n+55 |     a = a + 1;\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/assign_ops.rs:52:8\n+   |\n+52 | #[deny(assign_op_pattern)]\n+   |        ^^^^^^^^^^^^^^^^^\n+help: replace it with\n+   |     a += 1;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:58:5\n+   |\n+58 |     a = 1 + a;\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a += 1;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:61:5\n+   |\n+61 |     a = a - 1;\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a -= 1;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:64:5\n+   |\n+64 |     a = a * 99;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 99;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:67:5\n+   |\n+67 |     a = 42 * a;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 42;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:70:5\n+   |\n+70 |     a = a / 2;\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a /= 2;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:73:5\n+   |\n+73 |     a = a % 5;\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a %= 5;\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:76:5\n+   |\n+76 |     a = a & 1;\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a &= 1;\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "3071cce161cc73d3fcc66ab602b5383a5c1eb061", "filename": "tests/ui/assign_ops2.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,57 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(unused_assignments)]\n+#[deny(misrefactored_assign_op)]\n+fn main() {\n+    let mut a = 5;\n+    a += a + 1;\n+\n+\n+    a += 1 + a;\n+\n+\n+    a -= a - 1;\n+\n+\n+    a *= a * 99;\n+\n+\n+    a *= 42 * a;\n+\n+\n+    a /= a / 2;\n+\n+\n+    a %= a % 5;\n+\n+\n+    a &= a & 1;\n+\n+\n+    a -= 1 - a;\n+    a /= 5 / a;\n+    a %= 42 % a;\n+    a <<= 6 << a;\n+}\n+\n+// check that we don't lint on op assign impls, because that's just the way to impl them\n+\n+use std::ops::{Mul, MulAssign};\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub struct Wrap(i64);\n+\n+impl Mul<i64> for Wrap {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: i64) -> Self {\n+        Wrap(self.0 * rhs)\n+    }\n+}\n+\n+impl MulAssign<i64> for Wrap {\n+    fn mul_assign(&mut self, rhs: i64) {\n+        *self = *self * rhs\n+    }\n+}"}, {"sha": "ded39d1efc7437cc47f8ae84791e36fb4cdb7ef6", "filename": "tests/ui/assign_ops2.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,79 @@\n+error: variable appears on both sides of an assignment operation\n+ --> $DIR/assign_ops2.rs:8:5\n+  |\n+8 |     a += a + 1;\n+  |     ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/assign_ops2.rs:5:8\n+  |\n+5 | #[deny(misrefactored_assign_op)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+  |     a += 1;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:11:5\n+   |\n+11 |     a += 1 + a;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a += 1;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:14:5\n+   |\n+14 |     a -= a - 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a -= 1;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:17:5\n+   |\n+17 |     a *= a * 99;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 99;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:20:5\n+   |\n+20 |     a *= 42 * a;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 42;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:23:5\n+   |\n+23 |     a /= a / 2;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a /= 2;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:26:5\n+   |\n+26 |     a %= a % 5;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a %= 5;\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:29:5\n+   |\n+29 |     a &= a & 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a &= 1;\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "50dddb83847e2463c627575cd7bc7379e7c9f3d1", "filename": "tests/ui/attrs.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(inline_always, deprecated_semver)]\n \n-#[inline(always)] //~ERROR you have declared `#[inline(always)]` on `test_attr_lint`.\n+#[inline(always)]\n fn test_attr_lint() {\n     assert!(true)\n }\n@@ -24,10 +24,10 @@ fn empty_and_false_positive_stmt() {\n     unreachable!();\n }\n \n-#[deprecated(since = \"forever\")] //~ERROR the since field must contain a semver-compliant version\n+#[deprecated(since = \"forever\")]\n pub const SOME_CONST : u8 = 42;\n \n-#[deprecated(since = \"1\")] //~ERROR the since field must contain a semver-compliant version\n+#[deprecated(since = \"1\")]\n pub const ANOTHER_CONST : u8 = 23;\n \n #[deprecated(since = \"0.1.1\")]", "previous_filename": "tests/compile-fail/attrs.rs"}, {"sha": "4ea0c5eece015da2d33f6a5408a394872bbe3c3b", "filename": "tests/ui/attrs.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,32 @@\n+error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n+ --> $DIR/attrs.rs:6:1\n+  |\n+6 | #[inline(always)]\n+  | ^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/attrs.rs:4:9\n+  |\n+4 | #![deny(inline_always, deprecated_semver)]\n+  |         ^^^^^^^^^^^^^\n+\n+error: the since field must contain a semver-compliant version\n+  --> $DIR/attrs.rs:27:14\n+   |\n+27 | #[deprecated(since = \"forever\")]\n+   |              ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/attrs.rs:4:24\n+   |\n+4  | #![deny(inline_always, deprecated_semver)]\n+   |                        ^^^^^^^^^^^^^^^^^\n+\n+error: the since field must contain a semver-compliant version\n+  --> $DIR/attrs.rs:30:14\n+   |\n+30 | #[deprecated(since = \"1\")]\n+   |              ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e8f2e47b283cdb2ceabe8bad1dcd13102d7b35a4", "filename": "tests/ui/bit_masks.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -9,36 +9,36 @@ const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n fn main() {\n     let x = 5;\n \n-    x & 0 == 0; //~ERROR &-masking with zero\n+    x & 0 == 0;\n     x & 1 == 1; //ok, distinguishes bit 0\n     x & 1 == 0; //ok, compared with zero\n-    x & 2 == 1; //~ERROR incompatible bit mask\n+    x & 2 == 1;\n     x | 0 == 0; //ok, equals x == 0 (maybe warn?)\n     x | 1 == 3; //ok, equals x == 2 || x == 3\n     x | 3 == 3; //ok, equals x <= 3\n-    x | 3 == 2; //~ERROR incompatible bit mask\n+    x | 3 == 2;\n \n-    x & 1 > 1; //~ERROR incompatible bit mask\n+    x & 1 > 1;\n     x & 2 > 1; // ok, distinguishes x & 2 == 2 from x & 2 == 0\n     x & 2 < 1; // ok, distinguishes x & 2 == 2 from x & 2 == 0\n     x | 1 > 1; // ok (if a bit silly), equals x > 1\n-    x | 2 > 1; //~ERROR incompatible bit mask\n+    x | 2 > 1;\n     x | 2 <= 2; // ok (if a bit silly), equals x <= 2\n \n     x & 192 == 128; // ok, tests for bit 7 and not bit 6\n     x & 0xffc0 == 0xfe80; // ok\n \n     // this also now works with constants\n-    x & THREE_BITS == 8; //~ERROR incompatible bit mask\n-    x | EVEN_MORE_REDIRECTION < 7; //~ERROR incompatible bit mask\n+    x & THREE_BITS == 8;\n+    x | EVEN_MORE_REDIRECTION < 7;\n \n-    0 & x == 0; //~ERROR &-masking with zero\n+    0 & x == 0;\n     1 | x > 1;\n \n     // and should now also match uncommon usage\n-    1 < 2 | x; //~ERROR incompatible bit mask\n-    2 == 3 | x; //~ERROR incompatible bit mask\n-    1 == x & 2; //~ERROR incompatible bit mask\n+    1 < 2 | x;\n+    2 == 3 | x;\n+    1 == x & 2;\n \n     x | 1 > 2; // no error, because we allowed ineffective bit masks\n     ineffective();\n@@ -49,10 +49,10 @@ fn main() {\n fn ineffective() {\n     let x = 5;\n \n-    x | 1 > 3; //~ERROR ineffective bit mask\n-    x | 1 < 4; //~ERROR ineffective bit mask\n-    x | 1 <= 3; //~ERROR ineffective bit mask\n-    x | 1 >= 8; //~ERROR ineffective bit mask\n+    x | 1 > 3;\n+    x | 1 < 4;\n+    x | 1 <= 3;\n+    x | 1 >= 8;\n \n     x | 1 > 2; // not an error (yet), better written as x >= 2\n     x | 1 >= 7; // not an error (yet), better written as x >= 6", "previous_filename": "tests/compile-fail/bit_masks.rs"}, {"sha": "cba88f2827bd26aedfa38195225d60f0a6279735", "filename": "tests/ui/bit_masks.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,104 @@\n+error: &-masking with zero\n+  --> $DIR/bit_masks.rs:12:5\n+   |\n+12 |     x & 0 == 0;\n+   |     ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bit_masks.rs:7:8\n+   |\n+7  | #[deny(bad_bit_mask)]\n+   |        ^^^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 2` can never be equal to `1`\n+  --> $DIR/bit_masks.rs:15:5\n+   |\n+15 |     x & 2 == 1;\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 3` can never be equal to `2`\n+  --> $DIR/bit_masks.rs:19:5\n+   |\n+19 |     x | 3 == 2;\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 1` will never be higher than `1`\n+  --> $DIR/bit_masks.rs:21:5\n+   |\n+21 |     x & 1 > 1;\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 2` will always be higher than `1`\n+  --> $DIR/bit_masks.rs:25:5\n+   |\n+25 |     x | 2 > 1;\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 7` can never be equal to `8`\n+  --> $DIR/bit_masks.rs:32:5\n+   |\n+32 |     x & THREE_BITS == 8;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 7` will never be lower than `7`\n+  --> $DIR/bit_masks.rs:33:5\n+   |\n+33 |     x | EVEN_MORE_REDIRECTION < 7;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: &-masking with zero\n+  --> $DIR/bit_masks.rs:35:5\n+   |\n+35 |     0 & x == 0;\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 2` will always be higher than `1`\n+  --> $DIR/bit_masks.rs:39:5\n+   |\n+39 |     1 < 2 | x;\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 3` can never be equal to `2`\n+  --> $DIR/bit_masks.rs:40:5\n+   |\n+40 |     2 == 3 | x;\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 2` can never be equal to `1`\n+  --> $DIR/bit_masks.rs:41:5\n+   |\n+41 |     1 == x & 2;\n+   |     ^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `3`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:52:5\n+   |\n+52 |     x | 1 > 3;\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bit_masks.rs:47:8\n+   |\n+47 | #[deny(ineffective_bit_mask)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `4`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:53:5\n+   |\n+53 |     x | 1 < 4;\n+   |     ^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `3`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:54:5\n+   |\n+54 |     x | 1 <= 3;\n+   |     ^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `8`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:55:5\n+   |\n+55 |     x | 1 >= 8;\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "16b4240fac2d3452a52f45ae311cd15f9d334ebe", "filename": "tests/ui/blacklisted_name.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![allow(single_match)]\n+#![allow(unused_variables, similar_names)]\n+#![deny(blacklisted_name)]\n+\n+fn test(foo: ()) {}\n+\n+fn main() {\n+    let foo = 42;\n+    let bar = 42;\n+    let baz = 42;\n+\n+    let barb = 42;\n+    let barbaric = 42;\n+\n+    match (42, Some(1337), Some(0)) {\n+        (foo, Some(bar), baz @ Some(_)) => (),\n+\n+\n+\n+        _ => (),\n+    }\n+}"}, {"sha": "29e9da2270f6027da161a4362a1e4d5bb2d2fc4e", "filename": "tests/ui/blacklisted_name.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,50 @@\n+error: use of a blacklisted/placeholder name `foo`\n+ --> $DIR/blacklisted_name.rs:9:9\n+  |\n+9 | fn test(foo: ()) {}\n+  |         ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/blacklisted_name.rs:7:9\n+  |\n+7 | #![deny(blacklisted_name)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/blacklisted_name.rs:12:9\n+   |\n+12 |     let foo = 42;\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `bar`\n+  --> $DIR/blacklisted_name.rs:13:9\n+   |\n+13 |     let bar = 42;\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:14:9\n+   |\n+14 |     let baz = 42;\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/blacklisted_name.rs:20:10\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |          ^^^\n+\n+error: use of a blacklisted/placeholder name `bar`\n+  --> $DIR/blacklisted_name.rs:20:20\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |                    ^^^\n+\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:20:26\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |                          ^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "feb28e377970cd71e6f89d7a31b87829450c4232", "filename": "tests/ui/block_in_if_condition.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -27,7 +27,7 @@ fn macro_if() {\n }\n \n fn condition_has_block() -> i32 {\n-    if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n+    if {\n         let x = 3;\n         x == 3\n     } {\n@@ -38,7 +38,7 @@ fn condition_has_block() -> i32 {\n }\n \n fn condition_has_block_with_single_expression() -> i32 {\n-    if { true } { //~ERROR omit braces around single expression condition\n+    if { true } {\n         6\n     } else {\n         10\n@@ -56,18 +56,18 @@ fn pred_test() {\n     // inside a closure that the condition is using.  same principle applies.  add some extra\n     // expressions to make sure linter isn't confused by them.\n     if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) {\n-        //~^ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n+\n     }\n \n     if predicate(|x| { let target = 3; x == target }, v) {\n-        //~^ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n+\n     }\n \n }\n \n fn condition_is_normal() -> i32 {\n     let x = 3;\n-    if true && x == 3 { //~ WARN this boolean expression can be simplified\n+    if true && x == 3 {\n         6\n     } else {\n         10", "previous_filename": "tests/compile-fail/block_in_if_condition.rs"}, {"sha": "d3e869024a7d1f07b9714ce9650517ae7fcfb990", "filename": "tests/ui/block_in_if_condition.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,68 @@\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:30:8\n+   |\n+30 |       if {\n+   |  ________^ starting here...\n+31 | |         let x = 3;\n+32 | |         x == 3\n+33 | |     } {\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:5:9\n+   |\n+5  | #![deny(block_in_if_condition_stmt)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try\n+           let res = {\n+               let x = 3;\n+               x == 3\n+           };\n+           if res {\n+               6\n+           } ... \n+\n+error: omit braces around single expression condition\n+  --> $DIR/block_in_if_condition.rs:41:8\n+   |\n+41 |     if { true } {\n+   |        ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:4:9\n+   |\n+4  | #![deny(block_in_if_condition_expr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try\n+           if true {\n+               6\n+           } ... \n+\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:58:49\n+   |\n+58 |     if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) {\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:62:22\n+   |\n+62 |     if predicate(|x| { let target = 3; x == target }, v) {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: this boolean expression can be simplified\n+  --> $DIR/block_in_if_condition.rs:70:8\n+   |\n+70 |     if true && x == 3 {\n+   |        ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:7:9\n+   |\n+7  | #![warn(nonminimal_bool)]\n+   |         ^^^^^^^^^^^^^^^\n+help: try\n+   |     if x == 3 {\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "3991d04bd2cc62f60701dd974f941332fdfeb9f7", "filename": "tests/ui/bool_comparison.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,23 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(bool_comparison)]\n+fn main() {\n+    let x = true;\n+    if x == true { \"yes\" } else { \"no\" };\n+\n+\n+\n+    if x == false { \"yes\" } else { \"no\" };\n+\n+\n+\n+    if true == x { \"yes\" } else { \"no\" };\n+\n+\n+\n+    if false == x { \"yes\" } else { \"no\" };\n+\n+\n+\n+}"}, {"sha": "9da1c76d07e686a3be82fe8b4870ab31982fb665", "filename": "tests/ui/bool_comparison.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,43 @@\n+error: equality checks against true are unnecessary\n+ --> $DIR/bool_comparison.rs:7:8\n+  |\n+7 |     if x == true { \"yes\" } else { \"no\" };\n+  |        ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/bool_comparison.rs:4:8\n+  |\n+4 | #[deny(bool_comparison)]\n+  |        ^^^^^^^^^^^^^^^\n+help: try simplifying it as shown:\n+  |     if x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:11:8\n+   |\n+11 |     if x == false { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if !x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against true are unnecessary\n+  --> $DIR/bool_comparison.rs:15:8\n+   |\n+15 |     if true == x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:19:8\n+   |\n+19 |     if false == x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if !x { \"yes\" } else { \"no\" };\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fc1791f7f553b1fe8bd27faa21d8f93b74cf0ffc", "filename": "tests/ui/booleans.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,90 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(nonminimal_bool, logic_bug)]\n+\n+#[allow(unused, many_single_char_names)]\n+fn main() {\n+    let a: bool = unimplemented!();\n+    let b: bool = unimplemented!();\n+    let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n+    let _ = a && b || a;\n+\n+\n+\n+    let _ = !(a && b);\n+    let _ = !true;\n+\n+\n+    let _ = !false;\n+\n+\n+    let _ = !!a;\n+\n+\n+\n+    let _ = false && a;\n+\n+\n+\n+\n+    let _ = false || a;\n+\n+\n+\n+    // don't lint on cfgs\n+    let _ = cfg!(you_shall_not_not_pass) && a;\n+\n+    let _ = a || !b || !c || !d || !e;\n+\n+    let _ = !(a && b || c);\n+\n+    let _ = !(!a && b);\n+\n+\n+}\n+\n+#[allow(unused, many_single_char_names)]\n+fn equality_stuff() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    let c: i32 = unimplemented!();\n+    let d: i32 = unimplemented!();\n+    let e: i32 = unimplemented!();\n+    let _ = a == b && a != b;\n+\n+\n+\n+\n+    let _ = a == b && c == 5 && a == b;\n+\n+\n+\n+\n+\n+    let _ = a == b && c == 5 && b == a;\n+\n+\n+\n+\n+\n+    let _ = a < b && a >= b;\n+\n+\n+\n+\n+    let _ = a > b && a <= b;\n+\n+\n+\n+\n+    let _ = a > b && a == b;\n+\n+    let _ = a != b || !(a != b || c == d);\n+\n+\n+\n+\n+\n+}"}, {"sha": "54f6638b938c003d8e5460ca0d115340e8f551a0", "filename": "tests/ui/booleans.stderr", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,160 @@\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:12:13\n+   |\n+12 |     let _ = a && b || a;\n+   |             ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/booleans.rs:3:26\n+   |\n+3  | #![deny(nonminimal_bool, logic_bug)]\n+   |                          ^^^^^^^^^\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:12:18\n+   |\n+12 |     let _ = a && b || a;\n+   |                  ^\n+help: it would look like the following\n+   |     let _ = a;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:17:13\n+   |\n+17 |     let _ = !true;\n+   |             ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/booleans.rs:3:9\n+   |\n+3  | #![deny(nonminimal_bool, logic_bug)]\n+   |         ^^^^^^^^^^^^^^^\n+help: try\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:20:13\n+   |\n+20 |     let _ = !false;\n+   |             ^^^^^^\n+   |\n+help: try\n+   |     let _ = true;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:23:13\n+   |\n+23 |     let _ = !!a;\n+   |             ^^^\n+   |\n+help: try\n+   |     let _ = a;\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:27:13\n+   |\n+27 |     let _ = false && a;\n+   |             ^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:27:22\n+   |\n+27 |     let _ = false && a;\n+   |                      ^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:32:13\n+   |\n+32 |     let _ = false || a;\n+   |             ^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:43:13\n+   |\n+43 |     let _ = !(!a && b);\n+   |             ^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = !b || a;\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:55:13\n+   |\n+55 |     let _ = a == b && a != b;\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:55:13\n+   |\n+55 |     let _ = a == b && a != b;\n+   |             ^^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:60:13\n+   |\n+60 |     let _ = a == b && c == 5 && a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+help: try\n+   |     let _ = !(c != 5 || a != b);\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:66:13\n+   |\n+66 |     let _ = a == b && c == 5 && b == a;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+help: try\n+   |     let _ = !(c != 5 || a != b);\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:72:13\n+   |\n+72 |     let _ = a < b && a >= b;\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:72:13\n+   |\n+72 |     let _ = a < b && a >= b;\n+   |             ^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:77:13\n+   |\n+77 |     let _ = a > b && a <= b;\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:77:13\n+   |\n+77 |     let _ = a > b && a <= b;\n+   |             ^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:84:13\n+   |\n+84 |     let _ = a != b || !(a != b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = c != d || a != b;\n+help: try\n+   |     let _ = !(a == b && c == d);\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "01f1b1d09497985aaa2540d89b45ed2b6dadddf5", "filename": "tests/ui/box_vec.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -14,7 +14,7 @@ macro_rules! boxit {\n fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n-pub fn test(foo: Box<Vec<bool>>) { //~ ERROR you seem to be trying to use `Box<Vec<T>>`\n+pub fn test(foo: Box<Vec<bool>>) {\n     println!(\"{:?}\", foo.get(0))\n }\n ", "previous_filename": "tests/compile-fail/box_vec.rs"}, {"sha": "a7ccf1dcd85e3b3f13d3406848bced2b4ed38819", "filename": "tests/ui/box_vec.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,16 @@\n+error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n+  --> $DIR/box_vec.rs:17:18\n+   |\n+17 | pub fn test(foo: Box<Vec<bool>>) {\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(box_vec)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/box_vec.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n+\n+error: aborting due to previous error\n+"}, {"sha": "bcf8a8dec71e93590597925af880f9f861dc4a8d", "filename": "tests/ui/builtin-type-shadow.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -2,8 +2,8 @@\n #![plugin(clippy)]\n #![deny(builtin_type_shadow)]\n \n-fn foo<u32>(a: u32) -> u32 { //~ERROR shadows the built-in type `u32`\n-    42  //~ERROR E0308\n+fn foo<u32>(a: u32) -> u32 {\n+    42\n     // ^ rustc's type error\n }\n ", "previous_filename": "tests/compile-fail/builtin-type-shadow.rs"}, {"sha": "98cbd436686d0b55638f72501d3e416c03081da4", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,23 @@\n+error: This generic shadows the built-in type `u32`\n+ --> $DIR/builtin-type-shadow.rs:5:8\n+  |\n+5 | fn foo<u32>(a: u32) -> u32 {\n+  |        ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/builtin-type-shadow.rs:3:9\n+  |\n+3 | #![deny(builtin_type_shadow)]\n+  |         ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+ --> $DIR/builtin-type-shadow.rs:6:5\n+  |\n+6 |     42\n+  |     ^^ expected type parameter, found integral variable\n+  |\n+  = note: expected type `u32`\n+             found type `{integer}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca5106102e9cc4255f9d064259fa4942595a8b60", "filename": "tests/ui/cast.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,64 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Test cast_precision_loss\n+    1i32 as f32;\n+    1i64 as f32;\n+    1i64 as f64;\n+    1u32 as f32;\n+    1u64 as f32;\n+    1u64 as f64;\n+    1i32 as f64; // Should not trigger the lint\n+    1u32 as f64; // Should not trigger the lint\n+\n+    // Test cast_possible_truncation\n+    1f32 as i32;\n+    1f32 as u32;\n+\n+    1f64 as f32;\n+    1i32 as i8;\n+    1i32 as u8;\n+\n+    1f64 as isize;\n+    1f64 as usize;\n+\n+\n+    // Test cast_possible_wrap\n+    1u8 as i8;\n+    1u16 as i16;\n+    1u32 as i32;\n+    1u64 as i64;\n+    1usize as isize;\n+\n+    // Test cast_sign_loss\n+    1i32 as u32;\n+    1isize as usize;\n+\n+    // Extra checks for *size\n+    // Casting from *size\n+    1isize as i8;\n+    1isize as f64;\n+    1usize as f64;\n+    1isize as f32;\n+    1usize as f32;\n+    1isize as i32;\n+    1isize as u32;\n+\n+    1usize as u32;\n+    1usize as i32;\n+\n+    // Casting to *size\n+    1i64 as isize;\n+    1i64 as usize;\n+\n+    1u64 as isize;\n+\n+    1u64 as usize;\n+    1u32 as isize;\n+    1u32 as usize; // Should not trigger any lint\n+    1i32 as isize; // Neither should this\n+    1i32 as usize;\n+}"}, {"sha": "f4d8ec21d8d9b3263ad0e7888f9c1d7cef86a314", "filename": "tests/ui/cast.stderr", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,278 @@\n+error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast.rs:8:5\n+  |\n+8 |     1i32 as f32;\n+  |     ^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/cast.rs:4:8\n+  |\n+4 | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+  |        ^^^^^^^^^^^^^^^^^^^\n+\n+error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast.rs:9:5\n+  |\n+9 |     1i64 as f32;\n+  |     ^^^^^^^^^^^\n+\n+error: casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:10:5\n+   |\n+10 |     1i64 as f64;\n+   |     ^^^^^^^^^^^\n+\n+error: casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:11:5\n+   |\n+11 |     1u32 as f32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:12:5\n+   |\n+12 |     1u64 as f32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:13:5\n+   |\n+13 |     1u64 as f64;\n+   |     ^^^^^^^^^^^\n+\n+error: casting f32 to i32 may truncate the value\n+  --> $DIR/cast.rs:18:5\n+   |\n+18 |     1f32 as i32;\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:29\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting f32 to u32 may truncate the value\n+  --> $DIR/cast.rs:19:5\n+   |\n+19 |     1f32 as u32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting f32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:19:5\n+   |\n+19 |     1f32 as u32;\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:55\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                                                       ^^^^^^^^^^^^^^\n+\n+error: casting f64 to f32 may truncate the value\n+  --> $DIR/cast.rs:21:5\n+   |\n+21 |     1f64 as f32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting i32 to i8 may truncate the value\n+  --> $DIR/cast.rs:22:5\n+   |\n+22 |     1i32 as i8;\n+   |     ^^^^^^^^^^\n+\n+error: casting i32 to u8 may lose the sign of the value\n+  --> $DIR/cast.rs:23:5\n+   |\n+23 |     1i32 as u8;\n+   |     ^^^^^^^^^^\n+\n+error: casting i32 to u8 may truncate the value\n+  --> $DIR/cast.rs:23:5\n+   |\n+23 |     1i32 as u8;\n+   |     ^^^^^^^^^^\n+\n+error: casting f64 to isize may truncate the value\n+  --> $DIR/cast.rs:25:5\n+   |\n+25 |     1f64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting f64 to usize may truncate the value\n+  --> $DIR/cast.rs:26:5\n+   |\n+26 |     1f64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting f64 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:26:5\n+   |\n+26 |     1f64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u8 to i8 may wrap around the value\n+  --> $DIR/cast.rs:30:5\n+   |\n+30 |     1u8 as i8;\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:71\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                                                                       ^^^^^^^^^^^^^^^^^^\n+\n+error: casting u16 to i16 may wrap around the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+31 |     1u16 as i16;\n+   |     ^^^^^^^^^^^\n+\n+error: casting u32 to i32 may wrap around the value\n+  --> $DIR/cast.rs:32:5\n+   |\n+32 |     1u32 as i32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to i64 may wrap around the value\n+  --> $DIR/cast.rs:33:5\n+   |\n+33 |     1u64 as i64;\n+   |     ^^^^^^^^^^^\n+\n+error: casting usize to isize may wrap around the value\n+  --> $DIR/cast.rs:34:5\n+   |\n+34 |     1usize as isize;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: casting i32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:37:5\n+   |\n+37 |     1i32 as u32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting isize to usize may lose the sign of the value\n+  --> $DIR/cast.rs:38:5\n+   |\n+38 |     1isize as usize;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: casting isize to i8 may truncate the value\n+  --> $DIR/cast.rs:42:5\n+   |\n+42 |     1isize as i8;\n+   |     ^^^^^^^^^^^^\n+\n+error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:43:5\n+   |\n+43 |     1isize as f64;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:44:5\n+   |\n+44 |     1usize as f64;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:45:5\n+   |\n+45 |     1isize as f32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:46:5\n+   |\n+46 |     1usize as f32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:47:5\n+   |\n+47 |     1isize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:48:5\n+   |\n+48 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:48:5\n+   |\n+48 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:50:5\n+   |\n+50 |     1usize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:51:5\n+   |\n+51 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:51:5\n+   |\n+51 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:54:5\n+   |\n+54 |     1i64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:55:5\n+   |\n+55 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:55:5\n+   |\n+55 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:57:5\n+   |\n+57 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:57:5\n+   |\n+57 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:59:5\n+   |\n+59 |     1u64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:60:5\n+   |\n+60 |     1u32 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i32 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:63:5\n+   |\n+63 |     1i32 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to 42 previous errors\n+"}, {"sha": "84f76fb0131e10cd8865bdf2a40c131c54856558", "filename": "tests/ui/char_lit_as_u8.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,5 +4,5 @@\n #![deny(char_lit_as_u8)]\n #![allow(unused_variables)]\n fn main() {\n-    let c = 'a' as u8; //~ERROR casting character literal\n+    let c = 'a' as u8;\n }", "previous_filename": "tests/compile-fail/char_lit_as_u8.rs"}, {"sha": "95550194a8d2e3cdb63c40d5d550d3d454efd123", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,16 @@\n+error: casting character literal to u8. `char`s are 4 bytes wide in rust, so casting to u8 truncates them\n+ --> $DIR/char_lit_as_u8.rs:7:13\n+  |\n+7 |     let c = 'a' as u8;\n+  |             ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/char_lit_as_u8.rs:4:9\n+  |\n+4 | #![deny(char_lit_as_u8)]\n+  |         ^^^^^^^^^^^^^^\n+  = help: Consider using a byte literal instead:\n+          b'a'\n+\n+error: aborting due to previous error\n+"}, {"sha": "53aaba61787b8045dc76c92a000ccf084bdbb075", "filename": "tests/ui/cmp_nan.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,22 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(cmp_nan)]\n+#[allow(float_cmp, no_effect, unnecessary_operation)]\n+fn main() {\n+    let x = 5f32;\n+    x == std::f32::NAN;\n+    x != std::f32::NAN;\n+    x < std::f32::NAN;\n+    x > std::f32::NAN;\n+    x <= std::f32::NAN;\n+    x >= std::f32::NAN;\n+\n+    let y = 0f64;\n+    y == std::f64::NAN;\n+    y != std::f64::NAN;\n+    y < std::f64::NAN;\n+    y > std::f64::NAN;\n+    y <= std::f64::NAN;\n+    y >= std::f64::NAN;\n+}"}, {"sha": "9015e2fd3b275eab6713a2b70cd1826e8527a07b", "filename": "tests/ui/cmp_nan.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,98 @@\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+ --> $DIR/cmp_nan.rs:8:5\n+  |\n+8 |     x == std::f32::NAN;\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+ --> $DIR/cmp_nan.rs:9:5\n+  |\n+9 |     x != std::f32::NAN;\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:10:5\n+   |\n+10 |     x < std::f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:11:5\n+   |\n+11 |     x > std::f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:12:5\n+   |\n+12 |     x <= std::f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:13:5\n+   |\n+13 |     x >= std::f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:16:5\n+   |\n+16 |     y == std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:17:5\n+   |\n+17 |     y != std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:18:5\n+   |\n+18 |     y < std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:19:5\n+   |\n+19 |     y > std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:20:5\n+   |\n+20 |     y <= std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:21:5\n+   |\n+21 |     y >= std::f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "5449d2d31ac80a8fc6ba6abcbdd4197e83642f40", "filename": "tests/ui/cmp_null.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -8,12 +8,12 @@ use std::ptr;\n fn main() {\n     let x = 0;\n     let p : *const usize = &x;\n-    if p == ptr::null() { //~ERROR:  Comparing with null\n+    if p == ptr::null() {\n         println!(\"This is surprising!\");\n     }\n     let mut y = 0;\n     let mut m : *mut usize = &mut y;\n-    if m == ptr::null_mut() { //~ERROR:  Comparing with null\n+    if m == ptr::null_mut() {\n         println!(\"This is surprising, too!\");\n     }\n }", "previous_filename": "tests/compile-fail/cmp_null.rs"}, {"sha": "f98edeaca46b8fd041620413385963481c5a69dd", "filename": "tests/ui/cmp_null.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: Comparing with null is better expressed by the .is_null() method\n+  --> $DIR/cmp_null.rs:11:8\n+   |\n+11 |     if p == ptr::null() {\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cmp_null.rs:3:9\n+   |\n+3  | #![deny(cmp_null)]\n+   |         ^^^^^^^^\n+\n+error: Comparing with null is better expressed by the .is_null() method\n+  --> $DIR/cmp_null.rs:16:8\n+   |\n+16 |     if m == ptr::null_mut() {\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "30cd502a105704be7e052dadc24c21dae176fc34", "filename": "tests/ui/cmp_owned.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,27 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(cmp_owned)]\n+#[allow(unnecessary_operation)]\n+fn main() {\n+    fn with_to_string(x : &str) {\n+        x != \"foo\".to_string();\n+\n+\n+        \"foo\".to_string() != x;\n+\n+    }\n+\n+    let x = \"oh\";\n+\n+    with_to_string(x);\n+\n+    x != \"foo\".to_owned();\n+\n+    // removed String::from_str(..), as it has finally been removed in 1.4.0\n+    // as of 2015-08-14\n+\n+    x != String::from(\"foo\");\n+\n+    42.to_string() == \"42\";\n+}"}, {"sha": "231e2752c81307cf1497c5aaf5443e9a3a506f4b", "filename": "tests/ui/cmp_owned.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,32 @@\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+ --> $DIR/cmp_owned.rs:8:14\n+  |\n+8 |         x != \"foo\".to_string();\n+  |              ^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/cmp_owned.rs:4:8\n+  |\n+4 | #[deny(cmp_owned)]\n+  |        ^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `\"foo\" != x` to compare without allocation\n+  --> $DIR/cmp_owned.rs:11:9\n+   |\n+11 |         \"foo\".to_string() != x;\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+  --> $DIR/cmp_owned.rs:19:10\n+   |\n+19 |     x != \"foo\".to_owned();\n+   |          ^^^^^^^^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+  --> $DIR/cmp_owned.rs:24:10\n+   |\n+24 |     x != String::from(\"foo\");\n+   |          ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "6034bba848e0bc2bc52984d8d2cac2f00f5de888", "filename": "tests/ui/collapsible_if.rs", "status": "renamed", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,54 +6,54 @@ fn main() {\n     let x = \"hello\";\n     let y = \"world\";\n     if x == \"hello\" {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if x == \"hello\" && y == \"world\" {\n+\n+\n+\n         if y == \"world\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n     if x == \"hello\" || x == \"world\" {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n+\n+\n+\n         if y == \"world\" || y == \"hello\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n     if x == \"hello\" && x == \"world\" {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n+\n+\n+\n         if y == \"world\" || y == \"hello\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n     if x == \"hello\" || x == \"world\" {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n+\n+\n+\n         if y == \"world\" && y == \"hello\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n     if x == \"hello\" && x == \"world\" {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n+\n+\n+\n         if y == \"world\" && y == \"hello\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n     if 42 == 1337 {\n-    //~^ ERROR this if statement can be collapsed\n-    //~| HELP try\n-    //~| SUGGESTION if 42 == 1337 && 'a' != 'A' {\n+\n+\n+\n         if 'a' != 'A' {\n             println!(\"world!\")\n         }\n@@ -63,9 +63,9 @@ fn main() {\n     if x == \"hello\" {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR: this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if y == \"world\"\n+\n+\n+\n         if y == \"world\" {\n             println!(\"world!\")\n         }\n@@ -74,9 +74,9 @@ fn main() {\n     if x == \"hello\" {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR: this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if let Some(42)\n+\n+\n+\n         if let Some(42) = Some(42) {\n             println!(\"world!\")\n         }\n@@ -85,9 +85,9 @@ fn main() {\n     if x == \"hello\" {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if y == \"world\"\n+\n+\n+\n         if y == \"world\" {\n             println!(\"world\")\n         }\n@@ -99,9 +99,9 @@ fn main() {\n     if x == \"hello\" {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if let Some(42)\n+\n+\n+\n         if let Some(42) = Some(42) {\n             println!(\"world\")\n         }\n@@ -113,9 +113,9 @@ fn main() {\n     if let Some(42) = Some(42) {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if let Some(42)\n+\n+\n+\n         if let Some(42) = Some(42) {\n             println!(\"world\")\n         }\n@@ -127,9 +127,9 @@ fn main() {\n     if let Some(42) = Some(42) {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if x == \"hello\"\n+\n+\n+\n         if x == \"hello\" {\n             println!(\"world\")\n         }\n@@ -141,9 +141,9 @@ fn main() {\n     if let Some(42) = Some(42) {\n         print!(\"Hello \");\n     } else {\n-        //~^ ERROR this `else { if .. }`\n-        //~| HELP try\n-        //~| SUGGESTION } else if let Some(42)\n+\n+\n+\n         if let Some(42) = Some(42) {\n             println!(\"world\")\n         }", "previous_filename": "tests/compile-fail/collapsible_if.rs"}, {"sha": "eeac9166ad27228f33d9377955277686f1372391", "filename": "tests/ui/collapsible_if.stderr", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,229 @@\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:8:5\n+   |\n+8  |       if x == \"hello\" {\n+   |  _____^ starting here...\n+9  | |\n+10 | |\n+11 | |\n+12 | |         if y == \"world\" {\n+13 | |             println!(\"Hello world!\");\n+14 | |         }\n+15 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/collapsible_if.rs:4:8\n+   |\n+4  | #[deny(collapsible_if)]\n+   |        ^^^^^^^^^^^^^^\n+help: try\n+   |     if x == \"hello\" && y == \"world\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:17:5\n+   |\n+17 |       if x == \"hello\" || x == \"world\" {\n+   |  _____^ starting here...\n+18 | |\n+19 | |\n+20 | |\n+21 | |         if y == \"world\" || y == \"hello\" {\n+22 | |             println!(\"Hello world!\");\n+23 | |         }\n+24 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:26:5\n+   |\n+26 |       if x == \"hello\" && x == \"world\" {\n+   |  _____^ starting here...\n+27 | |\n+28 | |\n+29 | |\n+30 | |         if y == \"world\" || y == \"hello\" {\n+31 | |             println!(\"Hello world!\");\n+32 | |         }\n+33 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:35:5\n+   |\n+35 |       if x == \"hello\" || x == \"world\" {\n+   |  _____^ starting here...\n+36 | |\n+37 | |\n+38 | |\n+39 | |         if y == \"world\" && y == \"hello\" {\n+40 | |             println!(\"Hello world!\");\n+41 | |         }\n+42 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:44:5\n+   |\n+44 |       if x == \"hello\" && x == \"world\" {\n+   |  _____^ starting here...\n+45 | |\n+46 | |\n+47 | |\n+48 | |         if y == \"world\" && y == \"hello\" {\n+49 | |             println!(\"Hello world!\");\n+50 | |         }\n+51 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:53:5\n+   |\n+53 |       if 42 == 1337 {\n+   |  _____^ starting here...\n+54 | |\n+55 | |\n+56 | |\n+57 | |         if 'a' != 'A' {\n+58 | |             println!(\"world!\")\n+59 | |         }\n+60 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if 42 == 1337 && 'a' != 'A' {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:65:12\n+   |\n+65 |       } else {\n+   |  ____________^ starting here...\n+66 | |\n+67 | |\n+68 | |\n+69 | |         if y == \"world\" {\n+70 | |             println!(\"world!\")\n+71 | |         }\n+72 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     } else if y == \"world\" {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:76:12\n+   |\n+76 |       } else {\n+   |  ____________^ starting here...\n+77 | |\n+78 | |\n+79 | |\n+80 | |         if let Some(42) = Some(42) {\n+81 | |             println!(\"world!\")\n+82 | |         }\n+83 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     } else if let Some(42) = Some(42) {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:87:12\n+   |\n+87 |     } else {\n+   |            ^\n+   |\n+help: try\n+   |     } else if y == \"world\" {\n+   |     println!(\"world\")\n+   | }\n+   | else {\n+   |     println!(\"!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:101:12\n+    |\n+101 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:115:12\n+    |\n+115 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:129:12\n+    |\n+129 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if x == \"hello\" {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:143:12\n+    |\n+143 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "ef5cd68972db2b6628003a58453f4652b1f57b46", "filename": "tests/ui/complex_types.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,44 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+#![allow(unused)]\n+#![feature(associated_consts, associated_type_defaults)]\n+\n+type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here\n+\n+const CST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+static ST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+\n+struct S {\n+    f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n+}\n+\n+struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+\n+enum E {\n+    Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>),\n+    Struct { f: Vec<Vec<Box<(u32, u32, u32, u32)>>> },\n+}\n+\n+impl S {\n+    const A: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+    fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+}\n+\n+trait T {\n+    const A: Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n+    type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n+    fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+    fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+}\n+\n+fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> { vec![] }\n+\n+fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+\n+fn test3() {\n+    let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n+}\n+\n+fn main() {\n+}"}, {"sha": "a2e7f9384d1013979f514b3b267c43cf941c59b4", "filename": "tests/ui/complex_types.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,127 @@\n+error: very complex type used. Consider factoring parts into `type` definitions\n+ --> $DIR/complex_types.rs:9:12\n+  |\n+9 | const CST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/complex_types.rs:3:9\n+  |\n+3 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:10:12\n+   |\n+10 | static ST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:13:8\n+   |\n+13 |     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:16:11\n+   |\n+16 | struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:19:11\n+   |\n+19 |     Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>),\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:20:17\n+   |\n+20 |     Struct { f: Vec<Vec<Box<(u32, u32, u32, u32)>>> },\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:24:14\n+   |\n+24 |     const A: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:25:30\n+   |\n+25 |     fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:29:14\n+   |\n+29 |     const A: Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:30:14\n+   |\n+30 |     type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:31:25\n+   |\n+31 |     fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:32:29\n+   |\n+32 |     fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:35:15\n+   |\n+35 | fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> { vec![] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:37:14\n+   |\n+37 | fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:40:13\n+   |\n+40 |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "68b902719f6e72da3818773877284bcc9f4eeaae", "filename": "tests/ui/conf_bad_arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_bad_arg.rs"}, {"sha": "92b3c82d45831eb04d640d8b3ecb903af85ae300", "filename": "tests/ui/conf_bad_arg.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: `conf_file` must be a named value\n+ --> $DIR/conf_bad_arg.rs:4:18\n+  |\n+4 | #![plugin(clippy(conf_file))]\n+  |                  ^^^^^^^^^\n+  |\n+note: Clippy will use default configuration\n+ --> $DIR/conf_bad_arg.rs:4:18\n+  |\n+4 | #![plugin(clippy(conf_file))]\n+  |                  ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5ea6d96ef58a5be9dafcb54b158bc3b4af272d8", "filename": "tests/ui/conf_bad_toml.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_bad_toml.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_bad_toml.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "823e01a33b96172e13855c6c023599f2852e71f9", "filename": "tests/ui/conf_bad_toml.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_toml.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.toml?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_bad_toml.toml"}, {"sha": "8dc3e4ec2e675c61c5c8bffa38b4521db5cdb4a6", "filename": "tests/ui/conf_bad_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_bad_type.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_bad_type.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "168675394d7f45124940fcfa3433aab378c1fbd8", "filename": "tests/ui/conf_bad_type.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_bad_type.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.toml?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_bad_type.toml"}, {"sha": "20cd6aba369ad40eeb8dab73bf1f50d1b4afee20", "filename": "tests/ui/conf_french_blacklisted_name.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n+\n+#![allow(dead_code)]\n+#![allow(single_match)]\n+#![allow(unused_variables)]\n+#![deny(blacklisted_name)]\n+\n+fn test(toto: ()) {}\n+\n+fn main() {\n+    let toto = 42;\n+    let tata = 42;\n+    let titi = 42;\n+\n+    let tatab = 42;\n+    let tatatataic = 42;\n+\n+    match (42, Some(1337), Some(0)) {\n+        (toto, Some(tata), titi @ Some(_)) => (),\n+\n+\n+\n+        _ => (),\n+    }\n+}"}, {"sha": "b750f4564f6d6319fc2ace5b01dd6fa78d31fc02", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,50 @@\n+error: use of a blacklisted/placeholder name `toto`\n+ --> $DIR/conf_french_blacklisted_name.rs:9:9\n+  |\n+9 | fn test(toto: ()) {}\n+  |         ^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/conf_french_blacklisted_name.rs:7:9\n+  |\n+7 | #![deny(blacklisted_name)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: use of a blacklisted/placeholder name `toto`\n+  --> $DIR/conf_french_blacklisted_name.rs:12:9\n+   |\n+12 |     let toto = 42;\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `tata`\n+  --> $DIR/conf_french_blacklisted_name.rs:13:9\n+   |\n+13 |     let tata = 42;\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `titi`\n+  --> $DIR/conf_french_blacklisted_name.rs:14:9\n+   |\n+14 |     let titi = 42;\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `toto`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:10\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |          ^^^^\n+\n+error: use of a blacklisted/placeholder name `tata`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:21\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                     ^^^^\n+\n+error: use of a blacklisted/placeholder name `titi`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:28\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                            ^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e287f7e02af932cc5f8ba849aaf8f18c89a9fc7b", "filename": "tests/ui/conf_non_existant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_non_existant.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_non_existant.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_non_existant.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_non_existant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_non_existant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_non_existant.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "ba78ccce7159abf7c538ddbd6dba286381b167dd", "filename": "tests/ui/conf_path_non_string.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_path_non_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_path_non_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,6 +1,6 @@\n #![feature(attr_literals)]\n #![feature(plugin)]\n #![plugin(clippy(conf_file=42))]\n-//~^ ERROR `conf_file` value must be a string\n+\n \n fn main() {}", "previous_filename": "tests/compile-fail/conf_path_non_string.rs"}, {"sha": "3bf53f10cce47aae44724247807ae20ca7a44f90", "filename": "tests/ui/conf_path_non_string.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: `conf_file` value must be a string\n+ --> $DIR/conf_path_non_string.rs:3:28\n+  |\n+3 | #![plugin(clippy(conf_file=42))]\n+  |                            ^^\n+  |\n+note: Clippy will use default configuration\n+ --> $DIR/conf_path_non_string.rs:3:28\n+  |\n+3 | #![plugin(clippy(conf_file=42))]\n+  |                            ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5c1b240e4d123cc43e00e6d011a1ea076371a9b", "filename": "tests/ui/conf_unknown_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/conf_unknown_key.rs"}, {"sha": "536950fec31e67640702e3006cf3c10b2013c557", "filename": "tests/ui/conf_unknown_key.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: unknown key `foobar`\n+\n+error: aborting due to previous error\n+"}, {"sha": "15c1491417677fd4d17d084d9f6205a56ee274f7", "filename": "tests/ui/copies.rs", "status": "renamed", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -28,7 +28,7 @@ pub enum Abc {\n #[deny(match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n-        //~^NOTE same as this\n+\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -37,7 +37,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         0...10;\n         foo();\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -78,8 +78,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match 42 {\n         42 => {\n-            //~^ NOTE same as this\n-            //~| NOTE removing\n+\n+\n             foo();\n             let mut a = 42 + [23].len() as i32;\n             if true {\n@@ -88,7 +88,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             a = -31-a;\n             a\n         }\n-        _ => { //~ERROR this `match` has identical arm bodies\n+        _ => {\n             foo();\n             let mut a = 42 + [23].len() as i32;\n             if true {\n@@ -101,26 +101,26 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match Abc::A {\n         Abc::A => 0,\n-        //~^ NOTE same as this\n-        //~| NOTE removing\n+\n+\n         Abc::B => 1,\n-        _ => 0, //~ERROR this `match` has identical arm bodies\n+        _ => 0,\n     };\n \n     if true {\n         foo();\n     }\n \n     let _ = if true {\n-        //~^NOTE same as this\n+\n         42\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         42\n     };\n \n     if true {\n-        //~^NOTE same as this\n+\n         for _ in &[42] {\n             let foo: &Option<_> = &Some::<u8>(42);\n             if true {\n@@ -130,7 +130,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             }\n         }\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         for _ in &[42] {\n             let foo: &Option<_> = &Some::<u8>(42);\n             if true {\n@@ -142,7 +142,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         let bar = if true {\n             42\n         }\n@@ -153,7 +153,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         while foo() { break; }\n         bar + 1;\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         let bar = if true {\n             42\n         }\n@@ -166,7 +166,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -177,7 +177,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     else if false {\n         foo();\n     }\n-    else if foo() { //~ERROR this `if` has identical blocks\n+    else if foo() {\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -187,18 +187,18 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         if let Some(a) = Some(42) {}\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         if let Some(a) = Some(42) {}\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n \n@@ -253,17 +253,17 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match 42 {\n         42 => foo(),\n-        //~^NOTE same as this\n-        //~|NOTE `42 | 51`\n-        51 => foo(), //~ERROR this `match` has identical arm bodies\n+\n+\n+        51 => foo(),\n         _ => true,\n     };\n \n     let _ = match Some(42) {\n         Some(_) => 24,\n-        //~^NOTE same as this\n-        //~|NOTE `Some(_) | None`\n-        None => 24, //~ERROR this `match` has identical arm bodies\n+\n+\n+        None => 24,\n     };\n \n     let _ = match Some(42) {\n@@ -285,39 +285,39 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     match (Some(42), Some(42)) {\n         (Some(a), None) => bar(a),\n-        //~^NOTE same as this\n-        //~|NOTE `(Some(a), None) | (None, Some(a))`\n-        (None, Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n+\n+\n+        (None, Some(a)) => bar(a),\n         _ => (),\n     }\n \n     match (Some(42), Some(42)) {\n         (Some(a), ..) => bar(a),\n-        //~^NOTE same as this\n-        //~|NOTE `(Some(a), ..) | (.., Some(a))`\n-        (.., Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n+\n+\n+        (.., Some(a)) => bar(a),\n         _ => (),\n     }\n \n     match (1, 2, 3) {\n         (1, .., 3) => 42,\n-        //~^NOTE same as this\n-        //~|NOTE `(1, .., 3) | (.., 3)`\n-        (.., 3) => 42, //~ERROR this `match` has identical arm bodies\n+\n+\n+        (.., 3) => 42,\n         _ => 0,\n     };\n \n     let _ = if true {\n-        //~^NOTE same as this\n+\n         0.0\n-    } else { //~ERROR this `if` has identical blocks\n+    } else {\n         0.0\n     };\n \n     let _ = if true {\n-        //~^NOTE same as this\n+\n         -0.0\n-    } else { //~ERROR this `if` has identical blocks\n+    } else {\n         -0.0\n     };\n \n@@ -336,9 +336,9 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     // Same NaNs\n     let _ = if true {\n-        //~^NOTE same as this\n+\n         std::f32::NAN\n-    } else { //~ERROR this `if` has identical blocks\n+    } else {\n         std::f32::NAN\n     };\n \n@@ -354,23 +354,23 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         try!(Ok(\"foo\"));\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         try!(Ok(\"foo\"));\n     }\n \n     if true {\n-        //~^NOTE same as this\n+\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n     else if false {\n         let foo = \"bar\";\n         return Ok(&foo[0..]);\n     }\n-    else { //~ERROR this `if` has identical blocks\n+    else {\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n@@ -383,23 +383,23 @@ fn ifs_same_cond() {\n     let b = false;\n \n     if b {\n-        //~^NOTE same as this\n+\n     }\n-    else if b { //~ERROR this `if` has the same condition as a previous if\n+    else if b {\n     }\n \n     if a == 1 {\n-        //~^NOTE same as this\n+\n     }\n-    else if a == 1 { //~ERROR this `if` has the same condition as a previous if\n+    else if a == 1 {\n     }\n \n     if 2*a == 1 {\n-        //~^NOTE same as this\n+\n     }\n     else if 2*a == 2 {\n     }\n-    else if 2*a == 1 { //~ERROR this `if` has the same condition as a previous if\n+    else if 2*a == 1 {\n     }\n     else if a == 1 {\n     }", "previous_filename": "tests/compile-fail/copies.rs"}, {"sha": "7f5cfe070bf1ea00a71e60d12a0d544afe9c6138", "filename": "tests/ui/copies.stderr", "status": "added", "additions": 409, "deletions": 0, "changes": 409, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,409 @@\n+error: this `if` has identical blocks\n+  --> $DIR/copies.rs:40:10\n+   |\n+40 |       else {\n+   |  __________^ starting here...\n+41 | |         Foo { bar: 42 };\n+42 | |         0..10;\n+43 | |         ..;\n+44 | |         0..;\n+45 | |         ..10;\n+46 | |         0...10;\n+47 | |         foo();\n+48 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/copies.rs:27:8\n+   |\n+27 | #[deny(if_same_then_else)]\n+   |        ^^^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/copies.rs:30:13\n+   |\n+30 |     if true {\n+   |             ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/copies.rs:91:14\n+   |\n+91 |           _ => {\n+   |  ______________^ starting here...\n+92 | |             foo();\n+93 | |             let mut a = 42 + [23].len() as i32;\n+94 | |             if true {\n+95 | |                 a += 7;\n+96 | |             }\n+97 | |             a = -31-a;\n+98 | |             a\n+99 | |         }\n+   | |_________^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/copies.rs:28:8\n+   |\n+28 | #[deny(match_same_arms)]\n+   |        ^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/copies.rs:80:15\n+   |\n+80 |         42 => {\n+   |               ^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/copies.rs:80:15\n+   |\n+80 |         42 => {\n+   |               ^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:107:14\n+    |\n+107 |         _ => 0,\n+    |              ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:103:19\n+    |\n+103 |         Abc::A => 0,\n+    |                   ^\n+note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n+   --> $DIR/copies.rs:103:19\n+    |\n+103 |         Abc::A => 0,\n+    |                   ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:118:10\n+    |\n+118 |       else {\n+    |  __________^ starting here...\n+119 | |         42\n+120 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:114:21\n+    |\n+114 |       let _ = if true {\n+    |  _____________________^ starting here...\n+115 | |\n+116 | |         42\n+117 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:133:10\n+    |\n+133 |     else {\n+    |          ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:122:13\n+    |\n+122 |     if true {\n+    |             ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:156:10\n+    |\n+156 |     else {\n+    |          ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:144:13\n+    |\n+144 |     if true {\n+    |             ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:180:19\n+    |\n+180 |       else if foo() {\n+    |  ___________________^ starting here...\n+181 | |         let _ = match 42 {\n+182 | |             42 => 1,\n+183 | |             a if a > 0 => 2,\n+184 | |             10...15 => 3,\n+185 | |             _ => 4,\n+186 | |         };\n+187 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:168:13\n+    |\n+168 |       if true {\n+    |  _____________^ starting here...\n+169 | |\n+170 | |         let _ = match 42 {\n+171 | |             42 => 1,\n+172 | |             a if a > 0 => 2,\n+173 | |             10...15 => 3,\n+174 | |             _ => 4,\n+175 | |         };\n+176 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:193:10\n+    |\n+193 |       else {\n+    |  __________^ starting here...\n+194 | |         if let Some(a) = Some(42) {}\n+195 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:189:13\n+    |\n+189 |       if true {\n+    |  _____________^ starting here...\n+190 | |\n+191 | |         if let Some(a) = Some(42) {}\n+192 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:201:10\n+    |\n+201 |       else {\n+    |  __________^ starting here...\n+202 | |         if let (1, .., 3) = (1, 2, 3) {}\n+203 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:197:13\n+    |\n+197 |       if true {\n+    |  _____________^ starting here...\n+198 | |\n+199 | |         if let (1, .., 3) = (1, 2, 3) {}\n+200 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:258:15\n+    |\n+258 |         51 => foo(),\n+    |               ^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:255:15\n+    |\n+255 |         42 => foo(),\n+    |               ^^^^^\n+note: consider refactoring into `42 | 51`\n+   --> $DIR/copies.rs:255:15\n+    |\n+255 |         42 => foo(),\n+    |               ^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:266:17\n+    |\n+266 |         None => 24,\n+    |                 ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:263:20\n+    |\n+263 |         Some(_) => 24,\n+    |                    ^^\n+note: consider refactoring into `Some(_) | None`\n+   --> $DIR/copies.rs:263:20\n+    |\n+263 |         Some(_) => 24,\n+    |                    ^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:290:28\n+    |\n+290 |         (None, Some(a)) => bar(a),\n+    |                            ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:287:28\n+    |\n+287 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+   --> $DIR/copies.rs:287:28\n+    |\n+287 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:298:26\n+    |\n+298 |         (.., Some(a)) => bar(a),\n+    |                          ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:295:26\n+    |\n+295 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+   --> $DIR/copies.rs:295:26\n+    |\n+295 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:306:20\n+    |\n+306 |         (.., 3) => 42,\n+    |                    ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:303:23\n+    |\n+303 |         (1, .., 3) => 42,\n+    |                       ^^\n+note: consider refactoring into `(1, .., 3) | (.., 3)`\n+   --> $DIR/copies.rs:303:23\n+    |\n+303 |         (1, .., 3) => 42,\n+    |                       ^^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:313:12\n+    |\n+313 |       } else {\n+    |  ____________^ starting here...\n+314 | |         0.0\n+315 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:310:21\n+    |\n+310 |       let _ = if true {\n+    |  _____________________^ starting here...\n+311 | |\n+312 | |         0.0\n+313 | |     } else {\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:320:12\n+    |\n+320 |       } else {\n+    |  ____________^ starting here...\n+321 | |         -0.0\n+322 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:317:21\n+    |\n+317 |       let _ = if true {\n+    |  _____________________^ starting here...\n+318 | |\n+319 | |         -0.0\n+320 | |     } else {\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:341:12\n+    |\n+341 |       } else {\n+    |  ____________^ starting here...\n+342 | |         std::f32::NAN\n+343 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:338:21\n+    |\n+338 |       let _ = if true {\n+    |  _____________________^ starting here...\n+339 | |\n+340 | |         std::f32::NAN\n+341 | |     } else {\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:360:10\n+    |\n+360 |       else {\n+    |  __________^ starting here...\n+361 | |         try!(Ok(\"foo\"));\n+362 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:356:13\n+    |\n+356 |       if true {\n+    |  _____________^ starting here...\n+357 | |\n+358 | |         try!(Ok(\"foo\"));\n+359 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:373:10\n+    |\n+373 |       else {\n+    |  __________^ starting here...\n+374 | |         let foo = \"\";\n+375 | |         return Ok(&foo[0..]);\n+376 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:364:13\n+    |\n+364 |       if true {\n+    |  _____________^ starting here...\n+365 | |\n+366 | |         let foo = \"\";\n+367 | |         return Ok(&foo[0..]);\n+368 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:388:13\n+    |\n+388 |     else if b {\n+    |             ^\n+    |\n+note: lint level defined here\n+   --> $DIR/copies.rs:379:8\n+    |\n+379 | #[deny(ifs_same_cond)]\n+    |        ^^^^^^^^^^^^^\n+note: same as this\n+   --> $DIR/copies.rs:385:8\n+    |\n+385 |     if b {\n+    |        ^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:394:13\n+    |\n+394 |     else if a == 1 {\n+    |             ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:391:8\n+    |\n+391 |     if a == 1 {\n+    |        ^^^^^^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:402:13\n+    |\n+402 |     else if 2*a == 1 {\n+    |             ^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:397:8\n+    |\n+397 |     if 2*a == 1 {\n+    |        ^^^^^^^^\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "0b02c937be6a6c494cf3539ddae4e93faa776050", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,7 +4,7 @@\n #![deny(cyclomatic_complexity)]\n #![allow(unused)]\n \n-fn main() { //~ERROR the function has a cyclomatic complexity of 28\n+fn main() {\n     if true {\n         println!(\"a\");\n     }\n@@ -89,7 +89,7 @@ fn main() { //~ERROR the function has a cyclomatic complexity of 28\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 7\n+fn kaboom() {\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -135,18 +135,18 @@ fn bloo() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn lots_of_short_circuits() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+fn lots_of_short_circuits() -> bool {\n     true && false && true && false && true && false && true\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn lots_of_short_circuits2() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+fn lots_of_short_circuits2() -> bool {\n     true || false || true || false || true || false || true\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n-    let x = || match 99 { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn baa() {\n+    let x = || match 99 {\n         0 => 0,\n         1 => 1,\n         2 => 2,\n@@ -163,7 +163,7 @@ fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn bar() { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn bar() {\n     match 99 {\n         0 => println!(\"hi\"),\n         _ => println!(\"bye\"),\n@@ -182,7 +182,7 @@ fn dont_warn_on_tests() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn barr() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -192,7 +192,7 @@ fn barr() { //~ ERROR: the function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+fn barr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -208,7 +208,7 @@ fn barr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn barrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -218,7 +218,7 @@ fn barrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+fn barrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -234,7 +234,7 @@ fn barrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn barrrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -244,7 +244,7 @@ fn barrrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+fn barrrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -260,7 +260,7 @@ fn barrrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn cake() { //~ ERROR: the function has a cyclomatic complexity of 2\n+fn cake() {\n     if 4 == 5 {\n         println!(\"yea\");\n     } else {\n@@ -271,7 +271,7 @@ fn cake() { //~ ERROR: the function has a cyclomatic complexity of 2\n \n \n #[cyclomatic_complexity = \"0\"]\n-pub fn read_file(input_path: &str) -> String { //~ ERROR: the function has a cyclomatic complexity of 4\n+pub fn read_file(input_path: &str) -> String {\n     use std::fs::File;\n     use std::io::{Read, Write};\n     use std::path::Path;\n@@ -302,7 +302,7 @@ pub fn read_file(input_path: &str) -> String { //~ ERROR: the function has a cyc\n enum Void {}\n \n #[cyclomatic_complexity = \"0\"]\n-fn void(void: Void) { //~ ERROR: the function has a cyclomatic complexity of 1\n+fn void(void: Void) {\n     if true {\n         match void {\n         }\n@@ -316,15 +316,15 @@ fn mcarton_sees_all() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn try() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+fn try() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n     }\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn try_again() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+fn try_again() -> Result<i32, &'static str> {\n     let _ = try!(Ok(42));\n     let _ = try!(Ok(43));\n     let _ = try!(Ok(44));\n@@ -340,7 +340,7 @@ fn try_again() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity o\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn early() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+fn early() -> Result<i32, &'static str> {\n     return Ok(5);\n     return Ok(5);\n     return Ok(5);\n@@ -353,7 +353,7 @@ fn early() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn early_ret() -> i32 { //~ ERROR: cyclomatic complexity of 8\n+fn early_ret() -> i32 {\n     let a = if true { 42 } else { return 0; };\n     let a = if a < 99 { 42 } else { return 0; };\n     let a = if a < 99 { 42 } else { return 0; };", "previous_filename": "tests/compile-fail/cyclomatic_complexity.rs"}, {"sha": "70eb05e8db6f7e079a3db7ca7bfd921770b0347b", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,232 @@\n+error: the function has a cyclomatic complexity of 28\n+  --> $DIR/cyclomatic_complexity.rs:7:1\n+   |\n+7  | fn main() {\n+   | ^\n+   |\n+note: lint level defined here\n+  --> $DIR/cyclomatic_complexity.rs:4:9\n+   |\n+4  | #![deny(cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 7\n+   --> $DIR/cyclomatic_complexity.rs:92:1\n+    |\n+92  | fn kaboom() {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:138:1\n+    |\n+138 |   fn lots_of_short_circuits() -> bool {\n+    |  _^ starting here...\n+139 | |     true && false && true && false && true && false && true\n+140 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:143:1\n+    |\n+143 |   fn lots_of_short_circuits2() -> bool {\n+    |  _^ starting here...\n+144 | |     true || false || true || false || true || false || true\n+145 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:148:1\n+    |\n+148 | fn baa() {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:149:13\n+    |\n+149 |       let x = || match 99 {\n+    |  _____________^ starting here...\n+150 | |         0 => 0,\n+151 | |         1 => 1,\n+152 | |         2 => 2,\n+153 | |         4 => 4,\n+154 | |         6 => 6,\n+155 | |         9 => 9,\n+156 | |         _ => 42,\n+157 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:166:1\n+    |\n+166 |   fn bar() {\n+    |  _^ starting here...\n+167 | |     match 99 {\n+168 | |         0 => println!(\"hi\"),\n+169 | |         _ => println!(\"bye\"),\n+170 | |     }\n+171 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:185:1\n+    |\n+185 |   fn barr() {\n+    |  _^ starting here...\n+186 | |     match 99 {\n+187 | |         0 => println!(\"hi\"),\n+188 | |         1 => println!(\"bla\"),\n+189 | |         2 | 3 => println!(\"blub\"),\n+190 | |         _ => println!(\"bye\"),\n+191 | |     }\n+192 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:195:1\n+    |\n+195 | fn barr2() {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:211:1\n+    |\n+211 |   fn barrr() {\n+    |  _^ starting here...\n+212 | |     match 99 {\n+213 | |         0 => println!(\"hi\"),\n+214 | |         1 => panic!(\"bla\"),\n+215 | |         2 | 3 => println!(\"blub\"),\n+216 | |         _ => println!(\"bye\"),\n+217 | |     }\n+218 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:221:1\n+    |\n+221 | fn barrr2() {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:237:1\n+    |\n+237 |   fn barrrr() {\n+    |  _^ starting here...\n+238 | |     match 99 {\n+239 | |         0 => println!(\"hi\"),\n+240 | |         1 => println!(\"bla\"),\n+241 | |         2 | 3 => panic!(\"blub\"),\n+242 | |         _ => println!(\"bye\"),\n+243 | |     }\n+244 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:247:1\n+    |\n+247 | fn barrrr2() {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:263:1\n+    |\n+263 |   fn cake() {\n+    |  _^ starting here...\n+264 | |     if 4 == 5 {\n+265 | |         println!(\"yea\");\n+266 | |     } else {\n+267 | |         panic!(\"meh\");\n+268 | |     }\n+269 | |     println!(\"whee\");\n+270 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 4\n+   --> $DIR/cyclomatic_complexity.rs:274:1\n+    |\n+274 | pub fn read_file(input_path: &str) -> String {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:305:1\n+    |\n+305 |   fn void(void: Void) {\n+    |  _^ starting here...\n+306 | |     if true {\n+307 | |         match void {\n+308 | |         }\n+309 | |     }\n+310 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:319:1\n+    |\n+319 |   fn try() -> Result<i32, &'static str> {\n+    |  _^ starting here...\n+320 | |     match 5 {\n+321 | |         5 => Ok(5),\n+322 | |         _ => return Err(\"bla\"),\n+323 | |     }\n+324 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:327:1\n+    |\n+327 | fn try_again() -> Result<i32, &'static str> {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:343:1\n+    |\n+343 | fn early() -> Result<i32, &'static str> {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 8\n+   --> $DIR/cyclomatic_complexity.rs:356:1\n+    |\n+356 | fn early_ret() -> i32 {\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "143888279796b167c040ed63809e18c9da049788", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -8,7 +8,7 @@ fn main() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 3\n+fn kaboom() {\n     if 42 == 43 {\n         panic!();\n     } else if \"cake\" == \"lie\" {", "previous_filename": "tests/compile-fail/cyclomatic_complexity_attr_used.rs"}, {"sha": "f5ee0e7999161e056cb68f19d218f0191c638921", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,22 @@\n+error: the function has a cyclomatic complexity of 3\n+  --> $DIR/cyclomatic_complexity_attr_used.rs:11:1\n+   |\n+11 |   fn kaboom() {\n+   |  _^ starting here...\n+12 | |     if 42 == 43 {\n+13 | |         panic!();\n+14 | |     } else if \"cake\" == \"lie\" {\n+15 | |         println!(\"what?\");\n+16 | |     }\n+17 | | }\n+   | |_^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/cyclomatic_complexity_attr_used.rs:3:9\n+   |\n+3  | #![deny(cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to previous error\n+"}, {"sha": "7274c0fb7ad3c3433a0d3f8d9e86c38c01c0a197", "filename": "tests/ui/derive.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -16,15 +16,15 @@ impl PartialEq<u64> for Foo {\n }\n \n #[derive(Hash)]\n-//~^ ERROR you are deriving `Hash` but have implemented `PartialEq` explicitly\n+\n struct Bar;\n \n impl PartialEq for Bar {\n     fn eq(&self, _: &Bar) -> bool { true }\n }\n \n #[derive(Hash)]\n-//~^ ERROR you are deriving `Hash` but have implemented `PartialEq` explicitly\n+\n struct Baz;\n \n impl PartialEq<Baz> for Baz {\n@@ -35,15 +35,15 @@ impl PartialEq<Baz> for Baz {\n struct Bah;\n \n impl Hash for Bah {\n-//~^ ERROR you are implementing `Hash` explicitly but have derived `PartialEq`\n+\n     fn hash<H: Hasher>(&self, _: &mut H) {}\n }\n \n #[derive(Copy)]\n struct Qux;\n \n impl Clone for Qux {\n-//~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+\n     fn clone(&self) -> Self { Qux }\n }\n \n@@ -68,7 +68,7 @@ struct Lt<'a> {\n }\n \n impl<'a> Clone for Lt<'a> {\n-//~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+\n     fn clone(&self) -> Self { unimplemented!() }\n }\n ", "previous_filename": "tests/compile-fail/derive.rs"}, {"sha": "d435b52db4417be75bfd8628f87b45580f528696", "filename": "tests/ui/derive.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,103 @@\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derive.rs:18:10\n+   |\n+18 | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/derive.rs:6:9\n+   |\n+6  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:22:1\n+   |\n+22 |   impl PartialEq for Bar {\n+   |  _^ starting here...\n+23 | |     fn eq(&self, _: &Bar) -> bool { true }\n+24 | | }\n+   | |_^ ...ending here\n+\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derive.rs:26:10\n+   |\n+26 | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:30:1\n+   |\n+30 |   impl PartialEq<Baz> for Baz {\n+   |  _^ starting here...\n+31 | |     fn eq(&self, _: &Baz) -> bool { true }\n+32 | | }\n+   | |_^ ...ending here\n+\n+error: you are implementing `Hash` explicitly but have derived `PartialEq`\n+  --> $DIR/derive.rs:37:1\n+   |\n+37 |   impl Hash for Bah {\n+   |  _^ starting here...\n+38 | |\n+39 | |     fn hash<H: Hasher>(&self, _: &mut H) {}\n+40 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:34:10\n+   |\n+34 | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:45:1\n+   |\n+45 |   impl Clone for Qux {\n+   |  _^ starting here...\n+46 | |\n+47 | |     fn clone(&self) -> Self { Qux }\n+48 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/derive.rs:6:9\n+   |\n+6  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:45:1\n+   |\n+45 |   impl Clone for Qux {\n+   |  _^ starting here...\n+46 | |\n+47 | |     fn clone(&self) -> Self { Qux }\n+48 | | }\n+   | |_^ ...ending here\n+\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:70:1\n+   |\n+70 |   impl<'a> Clone for Lt<'a> {\n+   |  _^ starting here...\n+71 | |\n+72 | |     fn clone(&self) -> Self { unimplemented!() }\n+73 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:70:1\n+   |\n+70 |   impl<'a> Clone for Lt<'a> {\n+   |  _^ starting here...\n+71 | |\n+72 | |     fn clone(&self) -> Self { unimplemented!() }\n+73 | | }\n+   | |_^ ...ending here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "57e7a545b7c5b8905265241733cd3411c51c9dff", "filename": "tests/ui/diverging_sub_expression.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -15,8 +15,8 @@ impl A {\n #[allow(unused_variables, unnecessary_operation, short_circuit_statement)]\n fn main() {\n     let b = true;\n-    b || diverge(); //~ ERROR sub-expression diverges\n-    b || A.foo(); //~ ERROR sub-expression diverges\n+    b || diverge();\n+    b || A.foo();\n }\n \n #[allow(dead_code, unused_variables)]\n@@ -25,16 +25,16 @@ fn foobar() {\n         let x = match 5 {\n             4 => return,\n             5 => continue,\n-            6 => true || return, //~ ERROR sub-expression diverges\n-            7 => true || continue, //~ ERROR sub-expression diverges\n+            6 => true || return,\n+            7 => true || continue,\n             8 => break,\n             9 => diverge(),\n-            3 => true || diverge(), //~ ERROR sub-expression diverges\n+            3 => true || diverge(),\n             10 => match 42 {\n                 99 => return,\n                 _ => true || panic!(\"boo\"),\n             },\n-            _ => true || break, //~ ERROR sub-expression diverges\n+            _ => true || break,\n         };\n     }\n }", "previous_filename": "tests/compile-fail/diverging_sub_expression.rs"}, {"sha": "108c228fdc9ef36dddb9d9e47fc319f15867a51b", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,44 @@\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:18:10\n+   |\n+18 |     b || diverge();\n+   |          ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/diverging_sub_expression.rs:3:9\n+   |\n+3  | #![deny(diverging_sub_expression)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:19:10\n+   |\n+19 |     b || A.foo();\n+   |          ^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:28:26\n+   |\n+28 |             6 => true || return,\n+   |                          ^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:29:26\n+   |\n+29 |             7 => true || continue,\n+   |                          ^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:32:26\n+   |\n+32 |             3 => true || diverge(),\n+   |                          ^^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:37:26\n+   |\n+37 |             _ => true || break,\n+   |                          ^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "10d0beab8344d2ba2213f22ef38ce71a67b223c3", "filename": "tests/ui/dlist.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,9 +10,9 @@ extern crate collections;\n use collections::linked_list::LinkedList;\n \n trait Foo {\n-    type Baz = LinkedList<u8>; //~ ERROR I see you're using a LinkedList!\n-    fn foo(LinkedList<u8>); //~ ERROR I see you're using a LinkedList!\n-    const BAR : Option<LinkedList<u8>>; //~ ERROR I see you're using a LinkedList!\n+    type Baz = LinkedList<u8>;\n+    fn foo(LinkedList<u8>);\n+    const BAR : Option<LinkedList<u8>>;\n }\n \n // ok, we don\u2019t want to warn for implementations, see #605\n@@ -23,14 +23,14 @@ impl Foo for LinkedList<u8> {\n \n struct Bar;\n impl Bar {\n-    fn foo(_: LinkedList<u8>) {} //~ ERROR I see you're using a LinkedList!\n+    fn foo(_: LinkedList<u8>) {}\n }\n \n-pub fn test(my_favourite_linked_list: LinkedList<u8>) { //~ ERROR I see you're using a LinkedList!\n+pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n     println!(\"{:?}\", my_favourite_linked_list)\n }\n \n-pub fn test_ret() -> Option<LinkedList<u8>> { //~ ERROR I see you're using a LinkedList!\n+pub fn test_ret() -> Option<LinkedList<u8>> {\n     unimplemented!();\n }\n ", "previous_filename": "tests/compile-fail/dlist.rs"}, {"sha": "7af01a32ec0278cf7ed91cf87f305ef657e1c5c3", "filename": "tests/ui/dlist.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,61 @@\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:13:16\n+   |\n+13 |     type Baz = LinkedList<u8>;\n+   |                ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/dlist.rs:6:9\n+   |\n+6  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:14:12\n+   |\n+14 |     fn foo(LinkedList<u8>);\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:15:24\n+   |\n+15 |     const BAR : Option<LinkedList<u8>>;\n+   |                        ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:26:15\n+   |\n+26 |     fn foo(_: LinkedList<u8>) {}\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:29:39\n+   |\n+29 | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n+   |                                       ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:33:29\n+   |\n+33 | pub fn test_ret() -> Option<LinkedList<u8>> {\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "1e34b391915e552df222638fc218ea716039675c", "filename": "tests/ui/doc.rs", "status": "renamed", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -1,23 +1,23 @@\n //! This file tests for the DOC_MARKDOWN lint\n-//~^ ERROR: you should put `DOC_MARKDOWN` between ticks\n+\n \n #![feature(plugin)]\n #![plugin(clippy)]\n \n #![deny(doc_markdown)]\n \n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n-//~^ ERROR: you should put `foo_bar` between ticks\n-//~| ERROR: you should put `foo::bar` between ticks\n+\n+\n /// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n-//~^ ERROR: you should put `Foo::some_fun` between ticks\n+\n /// which should be reported only once despite being __doubly bad__.\n /// Here be ::is::a::global:path.\n-//~^ ERROR: you should put `is::a::global:path` between ticks\n+\n /// That's not code ~NotInCodeBlock~.\n-//~^ ERROR: you should put `NotInCodeBlock` between ticks\n+\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn foo_bar() {\n }\n \n@@ -32,15 +32,15 @@ fn foo_bar() {\n /// _foo bar_\n /// ~~~\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn multiline_codeblock() {\n }\n \n /// This _is a test for\n /// multiline\n /// emphasis_.\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn test_emphasis() {\n }\n \n@@ -55,7 +55,7 @@ fn test_emphasis() {\n /// 32kb 32Mb 32Gb 32Tb 32Pb 32Eb\n /// NaN\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn test_units() {\n }\n \n@@ -65,15 +65,15 @@ fn test_units() {\n /// `\ud83d\udca3`\n /// `\u2764\ufe0f`\n /// \u00df_foo\n-//~^ ERROR: you should put `\u00df_foo` between ticks\n+\n /// \u211d_foo\n-//~^ ERROR: you should put `\u211d_foo` between ticks\n+\n /// \ud83d\udca3_foo\n /// \u2764\ufe0f_foo\n /// foo_\u00df\n-//~^ ERROR: you should put `foo_\u00df` between ticks\n+\n /// foo_\u211d\n-//~^ ERROR: you should put `foo_\u211d` between ticks\n+\n /// foo_\ud83d\udca3\n /// foo_\u2764\ufe0f\n /// [\u00dfdummy text\u00df][foo_1\u00df]\n@@ -89,16 +89,16 @@ fn test_units() {\n /// [foo3_\ud83d\udca3]: dummy text\n /// [foo4_\u2764\ufe0f]: dummy text\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn test_unicode() {\n }\n \n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-//~^ ERROR: you should put `link_with_underscores` between ticks\n+\n /// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n /// It can also be [inline_link2].\n-//~^ ERROR: you should put `inline_link2` between ticks\n+\n ///\n /// [chunked-example]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n /// [inline_link]: https://foobar\n@@ -110,7 +110,7 @@ fn test_unicode() {\n /// expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n /// is one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn main() {\n     foo_bar();\n     multiline_codeblock();\n@@ -124,17 +124,17 @@ fn main() {\n /// # CamelCaseThing\n ///\n /// Not a title #897 CamelCaseThing\n-//~^ ERROR: you should put `CamelCaseThing` between ticks\n+\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn issue897() {\n }\n \n /// I am confused by brackets? (`x_y`)\n /// I am confused by brackets? (foo `x_y`)\n /// I am confused by brackets? (`x_y` foo)\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn issue900() {\n }\n \n@@ -148,7 +148,7 @@ fn issue900() {\n /// [iterator]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html\n /// [helper_types]: ../helper_types/index.html\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn issue883() {\n }\n \n@@ -167,9 +167,9 @@ That's in a code block: `PackedNode`\n And BarQuz too.\n be_sure_we_got_to_the_end_of_it\n */\n-//~^^^^^^^^ ERROR: you should put `FooBar` between ticks\n-//~^^^^ ERROR: you should put `BarQuz` between ticks\n-//~^^^^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n+\n+\n fn issue1073() {\n }\n \n@@ -181,9 +181,9 @@ That's in a code block: PackedNode\n And BarQuz too.\n be_sure_we_got_to_the_end_of_it\n */\n-//~^^^^^^^^ ERROR: you should put `FooBar` between ticks\n-//~^^^^ ERROR: you should put `BarQuz` between ticks\n-//~^^^^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n+\n+\n fn issue1073_alt() {\n }\n \n@@ -194,6 +194,6 @@ fn issue1073_alt() {\n /// StillDont\n /// ````\n /// be_sure_we_got_to_the_end_of_it\n-//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+\n fn four_quotes() {\n }", "previous_filename": "tests/compile-fail/doc.rs"}, {"sha": "90df4766faef4cb6824fbca02dceeadfaf19daa8", "filename": "tests/ui/doc.stderr", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,182 @@\n+error: you should put `DOC_MARKDOWN` between ticks in the documentation\n+ --> $DIR/doc.rs:1:29\n+  |\n+1 | //! This file tests for the DOC_MARKDOWN lint\n+  |                             ^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/doc.rs:7:9\n+  |\n+7 | #![deny(doc_markdown)]\n+  |         ^^^^^^^^^^^^\n+\n+error: you should put `foo_bar` between ticks in the documentation\n+ --> $DIR/doc.rs:9:9\n+  |\n+9 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+  |         ^^^^^^^\n+\n+error: you should put `foo::bar` between ticks in the documentation\n+ --> $DIR/doc.rs:9:51\n+  |\n+9 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+  |                                                   ^^^^^^^^\n+\n+error: you should put `Foo::some_fun` between ticks in the documentation\n+  --> $DIR/doc.rs:12:84\n+   |\n+12 | /// Markdown is _weird_. I mean _really weird_.  This /_ is ok. So is `_`. But not Foo::some_fun\n+   |                                                                                    ^^^^^^^^^^^^^\n+\n+error: you should put `is::a::global:path` between ticks in the documentation\n+  --> $DIR/doc.rs:15:13\n+   |\n+15 | /// Here be ::is::a::global:path.\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `NotInCodeBlock` between ticks in the documentation\n+  --> $DIR/doc.rs:17:21\n+   |\n+17 | /// That's not code ~NotInCodeBlock~.\n+   |                     ^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:19:5\n+   |\n+19 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:34:5\n+   |\n+34 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:42:5\n+   |\n+42 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:57:5\n+   |\n+57 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `\u00df_foo` between ticks in the documentation\n+  --> $DIR/doc.rs:67:5\n+   |\n+67 | /// \u00df_foo\n+   |     ^^^^^\n+\n+error: you should put `\u211d_foo` between ticks in the documentation\n+  --> $DIR/doc.rs:69:5\n+   |\n+69 | /// \u211d_foo\n+   |     ^^^^^\n+\n+error: you should put `foo_\u00df` between ticks in the documentation\n+  --> $DIR/doc.rs:73:5\n+   |\n+73 | /// foo_\u00df\n+   |     ^^^^^\n+\n+error: you should put `foo_\u211d` between ticks in the documentation\n+  --> $DIR/doc.rs:75:5\n+   |\n+75 | /// foo_\u211d\n+   |     ^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:91:5\n+   |\n+91 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `link_with_underscores` between ticks in the documentation\n+  --> $DIR/doc.rs:96:22\n+   |\n+96 | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n+   |                      ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `inline_link2` between ticks in the documentation\n+   --> $DIR/doc.rs:100:21\n+    |\n+100 | /// It can also be [inline_link2].\n+    |                     ^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:112:5\n+    |\n+112 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `CamelCaseThing` between ticks in the documentation\n+   --> $DIR/doc.rs:126:22\n+    |\n+126 | /// Not a title #897 CamelCaseThing\n+    |                      ^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:128:5\n+    |\n+128 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:136:5\n+    |\n+136 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:150:5\n+    |\n+150 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `FooBar` between ticks in the documentation\n+   --> $DIR/doc.rs:162:42\n+    |\n+162 | /** E.g. serialization of an empty list: FooBar\n+    |                                          ^^^^^^\n+\n+error: you should put `BarQuz` between ticks in the documentation\n+   --> $DIR/doc.rs:167:5\n+    |\n+167 | And BarQuz too.\n+    |     ^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:168:1\n+    |\n+168 | be_sure_we_got_to_the_end_of_it\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `FooBar` between ticks in the documentation\n+   --> $DIR/doc.rs:176:42\n+    |\n+176 | /** E.g. serialization of an empty list: FooBar\n+    |                                          ^^^^^^\n+\n+error: you should put `BarQuz` between ticks in the documentation\n+   --> $DIR/doc.rs:181:5\n+    |\n+181 | And BarQuz too.\n+    |     ^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:182:1\n+    |\n+182 | be_sure_we_got_to_the_end_of_it\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:196:5\n+    |\n+196 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 29 previous errors\n+"}, {"sha": "362b3a72dd75d7bef885883560320ee4a887d3b0", "filename": "tests/ui/double_neg.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let x = 1;\n     -x;\n     -(-x);\n-    --x; //~ERROR: `--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\n+    --x;\n }", "previous_filename": "tests/compile-fail/double_neg.rs"}, {"sha": "aeabbc8dfa905a8a18995b06f7615395ffc4d10b", "filename": "tests/ui/double_neg.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: `--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\n+ --> $DIR/double_neg.rs:9:5\n+  |\n+9 |     --x;\n+  |     ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/double_neg.rs:4:8\n+  |\n+4 | #[deny(double_neg)]\n+  |        ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "208482eb6cec3cf9583a5332b9222e73fbb9368c", "filename": "tests/ui/double_parens.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -13,23 +13,23 @@ impl DummyStruct {\n }\n \n fn simple_double_parens() -> i32 {\n-    ((0)) //~ERROR Consider removing unnecessary double parentheses\n+    ((0))\n }\n \n fn fn_double_parens() {\n-    dummy_fn((0)); //~ERROR Consider removing unnecessary double parentheses\n+    dummy_fn((0));\n }\n \n fn method_double_parens(x: DummyStruct) {\n-    x.dummy_method((0)); //~ERROR Consider removing unnecessary double parentheses\n+    x.dummy_method((0));\n }\n \n fn tuple_double_parens() -> (i32, i32) {\n-    ((1, 2)) //~ERROR Consider removing unnecessary double parentheses\n+    ((1, 2))\n }\n \n fn unit_double_parens() {\n-    (()) //~ERROR Consider removing unnecessary double parentheses\n+    (())\n }\n \n fn fn_tuple_ok() {", "previous_filename": "tests/compile-fail/double_parens.rs"}, {"sha": "1011ad1c0141726e7261c70fe881cd228f19a461", "filename": "tests/ui/double_parens.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,38 @@\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:16:5\n+   |\n+16 |     ((0))\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/double_parens.rs:4:9\n+   |\n+4  | #![deny(double_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:20:14\n+   |\n+20 |     dummy_fn((0));\n+   |              ^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:24:20\n+   |\n+24 |     x.dummy_method((0));\n+   |                    ^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:28:5\n+   |\n+28 |     ((1, 2))\n+   |     ^^^^^^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:32:5\n+   |\n+32 |     (())\n+   |     ^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "911d3433e4d887e11b7ebd74b204e79a4533d8f9", "filename": "tests/ui/drop_forget_ref.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,60 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_ref, forget_ref)]\n+#![allow(toplevel_ref_arg, similar_names)]\n+\n+use std::mem::{drop, forget};\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    drop(&SomeStruct);\n+    forget(&SomeStruct);\n+\n+    let mut owned1 = SomeStruct;\n+    drop(&owned1);\n+    drop(&&owned1);\n+    drop(&mut owned1);\n+    drop(owned1); //OK\n+    let mut owned2 = SomeStruct;\n+    forget(&owned2);\n+    forget(&&owned2);\n+    forget(&mut owned2);\n+    forget(owned2); //OK\n+\n+    let reference1 = &SomeStruct;\n+    drop(reference1);\n+    forget(&*reference1);\n+\n+    let reference2 = &mut SomeStruct;\n+    drop(reference2);\n+    let reference3 = &mut SomeStruct;\n+    forget(reference3);\n+\n+    let ref reference4 = SomeStruct;\n+    drop(reference4);\n+    forget(reference4);\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_drop<T>(val: T) {\n+    drop(&val);\n+    drop(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val);\n+    forget(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn drop<T>(_val: T) {}\n+    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::drop(&SomeStruct);\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct);\n+}"}, {"sha": "80c724c19c42426bf924b8418f713a973fc24d43", "filename": "tests/ui/drop_forget_ref.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,228 @@\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:12:5\n+   |\n+12 |     drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_ref.rs:4:9\n+   |\n+4  | #![deny(drop_ref, forget_ref)]\n+   |         ^^^^^^^^\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:12:10\n+   |\n+12 |     drop(&SomeStruct);\n+   |          ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:13:5\n+   |\n+13 |     forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_ref.rs:4:19\n+   |\n+4  | #![deny(drop_ref, forget_ref)]\n+   |                   ^^^^^^^^^^\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:13:12\n+   |\n+13 |     forget(&SomeStruct);\n+   |            ^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:16:5\n+   |\n+16 |     drop(&owned1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:16:10\n+   |\n+16 |     drop(&owned1);\n+   |          ^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:17:5\n+   |\n+17 |     drop(&&owned1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:17:10\n+   |\n+17 |     drop(&&owned1);\n+   |          ^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:18:5\n+   |\n+18 |     drop(&mut owned1);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:18:10\n+   |\n+18 |     drop(&mut owned1);\n+   |          ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:21:5\n+   |\n+21 |     forget(&owned2);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:21:12\n+   |\n+21 |     forget(&owned2);\n+   |            ^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:22:5\n+   |\n+22 |     forget(&&owned2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:22:12\n+   |\n+22 |     forget(&&owned2);\n+   |            ^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:23:5\n+   |\n+23 |     forget(&mut owned2);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:23:12\n+   |\n+23 |     forget(&mut owned2);\n+   |            ^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:27:5\n+   |\n+27 |     drop(reference1);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:27:10\n+   |\n+27 |     drop(reference1);\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:28:5\n+   |\n+28 |     forget(&*reference1);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:28:12\n+   |\n+28 |     forget(&*reference1);\n+   |            ^^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:31:5\n+   |\n+31 |     drop(reference2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:31:10\n+   |\n+31 |     drop(reference2);\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:33:5\n+   |\n+33 |     forget(reference3);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:33:12\n+   |\n+33 |     forget(reference3);\n+   |            ^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:36:5\n+   |\n+36 |     drop(reference4);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:36:10\n+   |\n+36 |     drop(reference4);\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:37:5\n+   |\n+37 |     forget(reference4);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:37:12\n+   |\n+37 |     forget(reference4);\n+   |            ^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:42:5\n+   |\n+42 |     drop(&val);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:42:10\n+   |\n+42 |     drop(&val);\n+   |          ^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:48:5\n+   |\n+48 |     forget(&val);\n+   |     ^^^^^^^^^^^^\n+   |\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:48:12\n+   |\n+48 |     forget(&val);\n+   |            ^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:56:5\n+   |\n+56 |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:56:20\n+   |\n+56 |     std::mem::drop(&SomeStruct);\n+   |                    ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:59:5\n+   |\n+59 |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:59:22\n+   |\n+59 |     std::mem::forget(&SomeStruct);\n+   |                      ^^^^^^^^^^^\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "ca02002bcc02a2777938a9d63c6dc4d0217976b3", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,10 +4,10 @@\n #![deny(duplicate_underscore_argument)]\n #[allow(dead_code, unused)]\n \n-fn join_the_dark_side(darth: i32, _darth: i32) {} //~ERROR `darth` already exists\n+fn join_the_dark_side(darth: i32, _darth: i32) {}\n fn join_the_light_side(knight: i32, _master: i32) {} // the Force is strong with this one\n \n fn main() {\n     join_the_dark_side(0, 0);\n     join_the_light_side(0, 0);\n-}\n\\ No newline at end of file\n+}", "previous_filename": "tests/compile-fail/duplicate_underscore_argument.rs"}, {"sha": "3e507acd98bb386f778e2082feba759075ed3c30", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: `darth` already exists, having another argument having almost the same name makes code comprehension and documentation more difficult\n+ --> $DIR/duplicate_underscore_argument.rs:7:23\n+  |\n+7 | fn join_the_dark_side(darth: i32, _darth: i32) {}\n+  |                       ^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/duplicate_underscore_argument.rs:4:9\n+  |\n+4 | #![deny(duplicate_underscore_argument)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f32b7ede10e777150a58a148b7a275b0b0531ce", "filename": "tests/ui/empty_enum.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,11 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![deny(empty_enum)]\n+\n+enum Empty {}\n+\n+\n+fn main() {\n+}"}, {"sha": "2a5e1165fb374b207cfe8a7cddc6b782ab4d68eb", "filename": "tests/ui/empty_enum.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,19 @@\n+error: enum with no variants\n+ --> $DIR/empty_enum.rs:7:1\n+  |\n+7 | enum Empty {}\n+  | ^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/empty_enum.rs:5:9\n+  |\n+5 | #![deny(empty_enum)]\n+  |         ^^^^^^^^^^\n+help: consider using the uninhabited type `!` or a wrapper around it\n+ --> $DIR/empty_enum.rs:7:1\n+  |\n+7 | enum Empty {}\n+  | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "816da06b956f5aac3dab4f0782ba213c5fb43517", "filename": "tests/ui/entry.rs", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -11,51 +11,51 @@ fn foo() {}\n \n fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v); }\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k).or_insert(v)\n+\n+\n+\n }\n \n fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v); }\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_if_present2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if m.contains_key(&k) { None } else { m.insert(k, v) };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_if_present3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on a `BTreeMap`\n-    //~| HELP consider\n-    //~| SUGGESTION m.entry(k)\n+\n+\n+\n }\n \n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {", "previous_filename": "tests/compile-fail/entry.rs"}, {"sha": "b4e09d2671b8a5ad112c3463293933f20d4f4f8b", "filename": "tests/ui/entry.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,70 @@\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:13:5\n+   |\n+13 |     if !m.contains_key(&k) { m.insert(k, v); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/entry.rs:5:9\n+   |\n+5  | #![deny(map_entry)]\n+   |         ^^^^^^^^^\n+help: consider using\n+   |     m.entry(k).or_insert(v)\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:20:5\n+   |\n+20 |     if !m.contains_key(&k) { foo(); m.insert(k, v); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k)\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:27:5\n+   |\n+27 |     if !m.contains_key(&k) { m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:34:5\n+   |\n+34 |     if m.contains_key(&k) { None } else { m.insert(k, v) };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:41:5\n+   |\n+41 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:48:5\n+   |\n+48 |     if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n+  --> $DIR/entry.rs:55:5\n+   |\n+55 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "6becdb3c9aeb53cd971c94848d0b6452ed99a894", "filename": "tests/ui/enum_glob_use.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -3,13 +3,13 @@\n #![deny(clippy, clippy_pedantic)]\n #![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n \n-use std::cmp::Ordering::*; //~ ERROR: don't use glob imports for enum variants\n+use std::cmp::Ordering::*;\n \n enum Enum {\n     _Foo,\n }\n \n-use self::Enum::*; //~ ERROR: don't use glob imports for enum variants\n+use self::Enum::*;\n \n fn blarg() {\n     use self::Enum::*; // ok, just for a function", "previous_filename": "tests/compile-fail/enum_glob_use.rs"}, {"sha": "657ab13ebbe41160499448777825bd1f916c0239", "filename": "tests/ui/enum_glob_use.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,23 @@\n+error: don't use glob imports for enum variants\n+ --> $DIR/enum_glob_use.rs:6:1\n+  |\n+6 | use std::cmp::Ordering::*;\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(enum_glob_use)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+ --> $DIR/enum_glob_use.rs:3:17\n+  |\n+3 | #![deny(clippy, clippy_pedantic)]\n+  |                 ^^^^^^^^^^^^^^^\n+\n+error: don't use glob imports for enum variants\n+  --> $DIR/enum_glob_use.rs:12:1\n+   |\n+12 | use self::Enum::*;\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_glob_use)] implied by #[deny(clippy_pedantic)]\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8d7a41b986e22ae77d831cf2070654b54ee5d846", "filename": "tests/ui/enum_variants.rs", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -11,7 +11,7 @@ enum FakeCallType2 {\n }\n \n enum Foo {\n-    cFoo, //~ ERROR: Variant name ends with the enum's name\n+    cFoo,\n     cBar,\n     cBaz,\n }\n@@ -21,17 +21,17 @@ enum Fooo {\n     cBar,\n }\n \n-enum Food { //~ ERROR: All variants have the same prefix: `Food`\n-    FoodGood, //~ ERROR: Variant name starts with the enum's name\n-    FoodMiddle, //~ ERROR: Variant name starts with the enum's name\n-    FoodBad, //~ ERROR: Variant name starts with the enum's name\n+enum Food {\n+    FoodGood,\n+    FoodMiddle,\n+    FoodBad,\n }\n \n enum Stuff {\n     StuffBad, // no error\n }\n \n-enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+enum BadCallType {\n     CallTypeCall,\n     CallTypeCreate,\n     CallTypeDestroy,\n@@ -42,7 +42,7 @@ enum TwoCallType { // no error\n     CallTypeCreate,\n }\n \n-enum Consts { //~ ERROR: All variants have the same prefix: `Constant`\n+enum Consts {\n     ConstantInt,\n     ConstantCake,\n     ConstantLie,\n@@ -75,19 +75,19 @@ enum Sealll {\n     WithOut,\n }\n \n-enum Seallll { //~ ERROR: All variants have the same prefix: `With`\n+enum Seallll {\n     WithOutCake,\n     WithOutTea,\n     WithOut,\n }\n \n-enum NonCaps { //~ ERROR: All variants have the same prefix: `Prefix`\n+enum NonCaps {\n     Prefix\u7684,\n     PrefixTea,\n     PrefixCake,\n }\n \n-pub enum PubSeall { //~ ERROR: All variants have the same prefix:\n+pub enum PubSeall {\n     WithOutCake,\n     WithOutTea,\n     WithOut,", "previous_filename": "tests/compile-fail/enum_variants.rs"}, {"sha": "5ff441605302d2918728da3ad1b1c433b7e0ddcf", "filename": "tests/ui/enum_variants.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,127 @@\n+error: Variant name ends with the enum's name\n+  --> $DIR/enum_variants.rs:14:5\n+   |\n+14 |     cFoo,\n+   |     ^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/enum_variants.rs:3:9\n+   |\n+3  | #![deny(clippy, pub_enum_variant_names)]\n+   |         ^^^^^^\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:25:5\n+   |\n+25 |     FoodGood,\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:26:5\n+   |\n+26 |     FoodMiddle,\n+   |     ^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:27:5\n+   |\n+27 |     FoodBad,\n+   |     ^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: All variants have the same prefix: `Food`\n+  --> $DIR/enum_variants.rs:24:1\n+   |\n+24 |   enum Food {\n+   |  _^ starting here...\n+25 | |     FoodGood,\n+26 | |     FoodMiddle,\n+27 | |     FoodBad,\n+28 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `CallType`\n+  --> $DIR/enum_variants.rs:34:1\n+   |\n+34 |   enum BadCallType {\n+   |  _^ starting here...\n+35 | |     CallTypeCall,\n+36 | |     CallTypeCreate,\n+37 | |     CallTypeDestroy,\n+38 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `Constant`\n+  --> $DIR/enum_variants.rs:45:1\n+   |\n+45 |   enum Consts {\n+   |  _^ starting here...\n+46 | |     ConstantInt,\n+47 | |     ConstantCake,\n+48 | |     ConstantLie,\n+49 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `With`\n+  --> $DIR/enum_variants.rs:78:1\n+   |\n+78 |   enum Seallll {\n+   |  _^ starting here...\n+79 | |     WithOutCake,\n+80 | |     WithOutTea,\n+81 | |     WithOut,\n+82 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `Prefix`\n+  --> $DIR/enum_variants.rs:84:1\n+   |\n+84 |   enum NonCaps {\n+   |  _^ starting here...\n+85 | |     Prefix\u7684,\n+86 | |     PrefixTea,\n+87 | |     PrefixCake,\n+88 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `With`\n+  --> $DIR/enum_variants.rs:90:1\n+   |\n+90 |   pub enum PubSeall {\n+   |  _^ starting here...\n+91 | |     WithOutCake,\n+92 | |     WithOutTea,\n+93 | |     WithOut,\n+94 | | }\n+   | |_^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/enum_variants.rs:3:17\n+   |\n+3  | #![deny(clippy, pub_enum_variant_names)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "9b4cdbb56b817a5f667a0e232499b1537cf1d172", "filename": "tests/ui/enums_clike.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,54 @@\n+// ignore-x86\n+#![feature(plugin, associated_consts)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+#![allow(unused)]\n+\n+#[repr(usize)]\n+enum NonPortable {\n+    X = 0x1_0000_0000,\n+    Y = 0,\n+    Z = 0x7FFF_FFFF,\n+    A = 0xFFFF_FFFF,\n+}\n+\n+enum NonPortableNoHint {\n+    X = 0x1_0000_0000,\n+    Y = 0,\n+    Z = 0x7FFF_FFFF,\n+    A = 0xFFFF_FFFF,\n+}\n+\n+#[repr(isize)]\n+enum NonPortableSigned {\n+    X = -1,\n+    Y = 0x7FFF_FFFF,\n+    Z = 0xFFFF_FFFF,\n+    A = 0x1_0000_0000,\n+    B = std::i32::MIN as isize,\n+    C = (std::i32::MIN as isize) - 1,\n+}\n+\n+enum NonPortableSignedNoHint {\n+    X = -1,\n+    Y = 0x7FFF_FFFF,\n+    Z = 0xFFFF_FFFF,\n+    A = 0x1_0000_0000,\n+}\n+\n+/*\n+FIXME: uncomment once https://github.com/rust-lang/rust/issues/31910 is fixed\n+#[repr(usize)]\n+enum NonPortable2<T: Trait> {\n+    X = Trait::Number,\n+    Y = 0,\n+}\n+\n+trait Trait {\n+    const Number: usize = 0x1_0000_0000;\n+}\n+*/\n+\n+fn main() {\n+}"}, {"sha": "0bfb732feb565cb12ecc7de87ff7018ced450fcc", "filename": "tests/ui/enums_clike.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,71 @@\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:10:5\n+   |\n+10 |     X = 0x1_0000_0000,\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/enums_clike.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:17:5\n+   |\n+17 |     X = 0x1_0000_0000,\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:20:5\n+   |\n+20 |     A = 0xFFFF_FFFF,\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:27:5\n+   |\n+27 |     Z = 0xFFFF_FFFF,\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:28:5\n+   |\n+28 |     A = 0x1_0000_0000,\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:30:5\n+   |\n+30 |     C = (std::i32::MIN as isize) - 1,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:36:5\n+   |\n+36 |     Z = 0xFFFF_FFFF,\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:37:5\n+   |\n+37 |     A = 0x1_0000_0000,\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "842e5729fcd8fcb907b4a4645a4570d4f93e845e", "filename": "tests/ui/eq_op.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,62 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(eq_op)]\n+#[allow(identity_op, double_parens)]\n+#[allow(no_effect, unused_variables, unnecessary_operation, short_circuit_statement)]\n+#[deny(nonminimal_bool)]\n+fn main() {\n+    // simple values and comparisons\n+    1 == 1;\n+    \"no\" == \"no\";\n+    // even though I agree that no means no ;-)\n+    false != false;\n+    1.5 < 1.5;\n+    1u64 >= 1u64;\n+\n+    // casts, methods, parentheses\n+    (1 as u64) & (1 as u64);\n+    1 ^ ((((((1))))));\n+\n+    // unary and binary operators\n+    (-(2) < -(2));\n+    ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+\n+\n+\n+    (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n+\n+    // various other things\n+    ([1] != [1]);\n+    ((1, 2) != (1, 2));\n+    vec![1, 2, 3] == vec![1, 2, 3]; //no error yet, as we don't match macros\n+\n+    // const folding\n+    1 + 1 == 2;\n+    1 - 1 == 0;\n+\n+\n+    1 - 1;\n+    1 / 1;\n+    true && true;\n+\n+    true || true;\n+\n+\n+    let a: u32 = 0;\n+    let b: u32 = 0;\n+\n+    a == b && b == a;\n+\n+    a != b && b != a;\n+\n+    a < b && b > a;\n+\n+    a <= b && b >= a;\n+\n+\n+    let mut a = vec![1];\n+    a == a;\n+    2*a.len() == 2*a.len(); // ok, functions\n+    a.pop() == a.pop(); // ok, functions\n+}"}, {"sha": "dc2df524df252bcd9f5f6d13641d026913ec2e03", "filename": "tests/ui/eq_op.stderr", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,223 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:41:5\n+   |\n+41 |     true && true;\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/eq_op.rs:7:8\n+   |\n+7  | #[deny(nonminimal_bool)]\n+   |        ^^^^^^^^^^^^^^^\n+help: try\n+   |     true;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:43:5\n+   |\n+43 |     true || true;\n+   |     ^^^^^^^^^^^^\n+   |\n+help: try\n+   |     true;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:49:5\n+   |\n+49 |     a == b && b == a;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a == b;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:51:5\n+   |\n+51 |     a != b && b != a;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a != b;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:53:5\n+   |\n+53 |     a < b && b > a;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a < b;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:55:5\n+   |\n+55 |     a <= b && b >= a;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a <= b;\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:10:5\n+   |\n+10 |     1 == 1;\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/eq_op.rs:4:8\n+   |\n+4  | #[deny(eq_op)]\n+   |        ^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:11:5\n+   |\n+11 |     \"no\" == \"no\";\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:13:5\n+   |\n+13 |     false != false;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `<`\n+  --> $DIR/eq_op.rs:14:5\n+   |\n+14 |     1.5 < 1.5;\n+   |     ^^^^^^^^^\n+\n+error: equal expressions as operands to `>=`\n+  --> $DIR/eq_op.rs:15:5\n+   |\n+15 |     1u64 >= 1u64;\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:18:5\n+   |\n+18 |     (1 as u64) & (1 as u64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `^`\n+  --> $DIR/eq_op.rs:19:5\n+   |\n+19 |     1 ^ ((((((1))))));\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `<`\n+  --> $DIR/eq_op.rs:22:5\n+   |\n+22 |     (-(2) < -(2));\n+   |     ^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:23:5\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:23:6\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |      ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:23:27\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |                           ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:27:5\n+   |\n+27 |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:30:5\n+   |\n+30 |     ([1] != [1]);\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:31:5\n+   |\n+31 |     ((1, 2) != (1, 2));\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:35:5\n+   |\n+35 |     1 + 1 == 2;\n+   |     ^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:36:5\n+   |\n+36 |     1 - 1 == 0;\n+   |     ^^^^^^^^^^\n+\n+error: equal expressions as operands to `-`\n+  --> $DIR/eq_op.rs:36:5\n+   |\n+36 |     1 - 1 == 0;\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `-`\n+  --> $DIR/eq_op.rs:39:5\n+   |\n+39 |     1 - 1;\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `/`\n+  --> $DIR/eq_op.rs:40:5\n+   |\n+40 |     1 / 1;\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:41:5\n+   |\n+41 |     true && true;\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `||`\n+  --> $DIR/eq_op.rs:43:5\n+   |\n+43 |     true || true;\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:49:5\n+   |\n+49 |     a == b && b == a;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:51:5\n+   |\n+51 |     a != b && b != a;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:53:5\n+   |\n+53 |     a < b && b > a;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:55:5\n+   |\n+55 |     a <= b && b >= a;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:59:5\n+   |\n+59 |     a == a;\n+   |     ^^^^^^\n+\n+error: aborting due to 32 previous errors\n+"}, {"sha": "595857b82df45ac3e6d8b97456fc2c1a49c14b4b", "filename": "tests/ui/escape_analysis.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -30,11 +30,11 @@ fn ok_box_trait(boxed_trait: &Box<Z>) {\n }\n \n fn warn_call() {\n-    let x = box A; //~ ERROR local variable\n+    let x = box A;\n     x.foo();\n }\n \n-fn warn_arg(x: Box<A>) { //~ ERROR local variable\n+fn warn_arg(x: Box<A>) {\n     x.foo();\n }\n \n@@ -46,16 +46,16 @@ fn nowarn_closure_arg() {\n fn warn_rename_call() {\n     let x = box A;\n \n-    let y = x; //~ ERROR local variable\n+    let y = x;\n     y.foo(); // via autoderef\n }\n \n fn warn_notuse() {\n-    let bz = box A; //~ ERROR local variable\n+    let bz = box A;\n }\n \n fn warn_pass() {\n-    let bz = box A; //~ ERROR local variable\n+    let bz = box A;\n     take_ref(&bz); // via deref coercion\n }\n \n@@ -85,7 +85,7 @@ fn take_ref(x: &A) {}\n \n fn nowarn_ref_take() {\n     // false positive, should actually warn\n-    let x = box A; //~ ERROR local variable\n+    let x = box A;\n     let y = &x;\n     take_box(y);\n }\n@@ -98,7 +98,7 @@ fn nowarn_match() {\n }\n \n fn warn_match() {\n-    let x = box A; //~ ERROR local variable\n+    let x = box A;\n     match &x { // not moved\n         ref y => ()\n     }\n@@ -127,5 +127,5 @@ pub struct PeekableSeekable<I: Foo> {\n     _peeked: I::Item,\n }\n \n-pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () { //~ ERROR local variable doesn't need\n+pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {\n }", "previous_filename": "tests/compile-fail/escape_analysis.rs"}, {"sha": "e3898e4b2774d07c52de3d4a18e73ab691975f61", "filename": "tests/ui/escape_analysis.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,56 @@\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:33:9\n+   |\n+33 |     let x = box A;\n+   |         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/escape_analysis.rs:5:9\n+   |\n+5  | #![deny(boxed_local)]\n+   |         ^^^^^^^^^^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:37:13\n+   |\n+37 | fn warn_arg(x: Box<A>) {\n+   |             ^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:49:9\n+   |\n+49 |     let y = x;\n+   |         ^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:54:9\n+   |\n+54 |     let bz = box A;\n+   |         ^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:58:9\n+   |\n+58 |     let bz = box A;\n+   |         ^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:88:9\n+   |\n+88 |     let x = box A;\n+   |         ^\n+\n+error: local variable doesn't need to be boxed here\n+   --> $DIR/escape_analysis.rs:101:9\n+    |\n+101 |     let x = box A;\n+    |         ^\n+\n+error: local variable doesn't need to be boxed here\n+   --> $DIR/escape_analysis.rs:130:12\n+    |\n+130 | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {\n+    |            ^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "90ffa61216fdab8106885bc70c65fab9ab05c12c", "filename": "tests/ui/eta.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,30 +5,30 @@\n \n fn main() {\n     let a = Some(1u8).map(|a| foo(a));\n-    //~^ ERROR redundant closure found\n-    //~| HELP remove closure as shown\n-    //~| SUGGESTION let a = Some(1u8).map(foo);\n+\n+\n+\n     meta(|a| foo(a));\n-    //~^ ERROR redundant closure found\n-    //~| HELP remove closure as shown\n-    //~| SUGGESTION meta(foo);\n+\n+\n+\n     let c = Some(1u8).map(|a| {1+2; foo}(a));\n-    //~^ ERROR redundant closure found\n-    //~| HELP remove closure as shown\n-    //~| SUGGESTION let c = Some(1u8).map({1+2; foo});\n+\n+\n+\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n-    //~^ WARN needless_borrow\n+\n     unsafe {\n         Some(1u8).map(|a| unsafe_fn(a)); // unsafe fn\n     }\n \n     // See #815\n     let e = Some(1u8).map(|a| divergent(a));\n     let e = Some(1u8).map(|a| generic(a));\n-    //~^ ERROR redundant closure found\n-    //~| HELP remove closure as shown\n-    //~| SUGGESTION map(generic);\n+\n+\n+\n     let e = Some(1u8).map(generic);\n \n     // See #515", "previous_filename": "tests/compile-fail/eta.rs"}, {"sha": "4683ae2708f292e407319d497bca7f3b099d7590", "filename": "tests/ui/eta.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,51 @@\n+error: redundant closure found\n+ --> $DIR/eta.rs:7:27\n+  |\n+7 |     let a = Some(1u8).map(|a| foo(a));\n+  |                           ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/eta.rs:4:9\n+  |\n+4 | #![deny(redundant_closure)]\n+  |         ^^^^^^^^^^^^^^^^^\n+help: remove closure as shown:\n+  |     let a = Some(1u8).map(foo);\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:11:10\n+   |\n+11 |     meta(|a| foo(a));\n+   |          ^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     meta(foo);\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:15:27\n+   |\n+15 |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n+   |                           ^^^^^^^^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     let c = Some(1u8).map({1+2; foo});\n+\n+warning: this expression borrows a reference that is immediately dereferenced by the compiler\n+  --> $DIR/eta.rs:20:21\n+   |\n+20 |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n+   |                     ^^^\n+   |\n+   = note: #[warn(needless_borrow)] on by default\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:28:27\n+   |\n+28 |     let e = Some(1u8).map(|a| generic(a));\n+   |                           ^^^^^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     let e = Some(1u8).map(generic);\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "851a199f929f1dec8a303d3e12837fbb27ba17c9", "filename": "tests/ui/eval_order_dependence.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,21 +6,21 @@\n fn main() {\n     let mut x = 0;\n     let a = { x = 1; 1 } + x;\n-                        //~^ ERROR unsequenced read\n+\n \n     // Example from iss#277\n-    x += { x = 20; 2 }; //~ERROR unsequenced read\n+    x += { x = 20; 2 };\n \n     // Does it work in weird places?\n     // ...in the base for a struct expression?\n     struct Foo { a: i32, b: i32 };\n     let base = Foo { a: 4, b: 5 };\n     let foo = Foo { a: x, .. { x = 6; base } };\n-                    //~^ ERROR unsequenced read\n+\n     // ...inside a closure?\n     let closure = || {\n         let mut x = 0;\n-        x += { x = 20; 2 }; //~ERROR unsequenced read\n+        x += { x = 20; 2 };\n     };\n     // ...not across a closure?\n     let mut y = 0;", "previous_filename": "tests/compile-fail/eval_order_dependence.rs"}, {"sha": "ba985dd907a04137eb7bec9d7a5672bcbc66a4ab", "filename": "tests/ui/eval_order_dependence.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,55 @@\n+error: unsequenced read of a variable\n+ --> $DIR/eval_order_dependence.rs:8:28\n+  |\n+8 |     let a = { x = 1; 1 } + x;\n+  |                            ^\n+  |\n+note: lint level defined here\n+ --> $DIR/eval_order_dependence.rs:4:8\n+  |\n+4 | #[deny(eval_order_dependence)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^\n+note: whether read occurs before this write depends on evaluation order\n+ --> $DIR/eval_order_dependence.rs:8:15\n+  |\n+8 |     let a = { x = 1; 1 } + x;\n+  |               ^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:12:5\n+   |\n+12 |     x += { x = 20; 2 };\n+   |     ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:12:12\n+   |\n+12 |     x += { x = 20; 2 };\n+   |            ^^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:18:24\n+   |\n+18 |     let foo = Foo { a: x, .. { x = 6; base } };\n+   |                        ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:18:32\n+   |\n+18 |     let foo = Foo { a: x, .. { x = 6; base } };\n+   |                                ^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:23:9\n+   |\n+23 |         x += { x = 20; 2 };\n+   |         ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:23:16\n+   |\n+23 |         x += { x = 20; 2 };\n+   |                ^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "922f9fba6a86722f523e351036e322c1bd7fae71", "filename": "tests/ui/filter_methods.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,22 +5,22 @@\n #![allow(missing_docs_in_private_items)]\n \n fn main() {\n-    let _: Vec<_> = vec![5; 6].into_iter() //~ERROR called `filter(p).map(q)` on an `Iterator`\n+    let _: Vec<_> = vec![5; 6].into_iter()\n                               .filter(|&x| x == 0)\n                               .map(|x| x * 2)\n                               .collect();\n \n-    let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter(p).flat_map(q)` on an `Iterator`\n+    let _: Vec<_> = vec![5_i8; 6].into_iter()\n                                 .filter(|&x| x == 0)\n                                 .flat_map(|x| x.checked_mul(2))\n                                 .collect();\n \n-    let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter_map(p).flat_map(q)` on an `Iterator`\n+    let _: Vec<_> = vec![5_i8; 6].into_iter()\n                                 .filter_map(|x| x.checked_mul(2))\n                                 .flat_map(|x| x.checked_mul(2))\n                                 .collect();\n \n-    let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter_map(p).map(q)` on an `Iterator`\n+    let _: Vec<_> = vec![5_i8; 6].into_iter()\n                                 .filter_map(|x| x.checked_mul(2))\n                                 .map(|x| x.checked_mul(2))\n                                 .collect();", "previous_filename": "tests/compile-fail/filter_methods.rs"}, {"sha": "8de65e0f4c527f6106704b661ef049d47293d62c", "filename": "tests/ui/filter_methods.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,51 @@\n+error: called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` instead.\n+  --> $DIR/filter_methods.rs:8:21\n+   |\n+8  |       let _: Vec<_> = vec![5; 6].into_iter()\n+   |  _____________________^ starting here...\n+9  | |                               .filter(|&x| x == 0)\n+10 | |                               .map(|x| x * 2)\n+   | |_____________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/filter_methods.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+\n+error: called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+  --> $DIR/filter_methods.rs:13:21\n+   |\n+13 |       let _: Vec<_> = vec![5_i8; 6].into_iter()\n+   |  _____________________^ starting here...\n+14 | |                                 .filter(|&x| x == 0)\n+15 | |                                 .flat_map(|x| x.checked_mul(2))\n+   | |_______________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+  --> $DIR/filter_methods.rs:18:21\n+   |\n+18 |       let _: Vec<_> = vec![5_i8; 6].into_iter()\n+   |  _____________________^ starting here...\n+19 | |                                 .filter_map(|x| x.checked_mul(2))\n+20 | |                                 .flat_map(|x| x.checked_mul(2))\n+   | |_______________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly expressed by only calling `.filter_map(..)` instead.\n+  --> $DIR/filter_methods.rs:23:21\n+   |\n+23 |       let _: Vec<_> = vec![5_i8; 6].into_iter()\n+   |  _____________________^ starting here...\n+24 | |                                 .filter_map(|x| x.checked_mul(2))\n+25 | |                                 .map(|x| x.checked_mul(2))\n+   | |__________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "de897caca08ee46832ca45fe06929e8470755135", "filename": "tests/ui/float_cmp.rs", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -41,46 +41,46 @@ fn main() {\n     ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n \n     ONE == 1f32;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (ONE - 1f32).abs() < error\n+\n+\n+\n     ONE == 1.0 + 0.0;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (ONE - (1.0 + 0.0)).abs() < error\n+\n+\n+\n \n     ONE + ONE == ZERO + ONE + ONE;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (ONE + ONE - (ZERO + ONE + ONE)).abs() < error\n+\n+\n+\n \n     ONE != 2.0;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (ONE - 2.0).abs() < error\n+\n+\n+\n     ONE != 0.0; // no error, comparison with zero is ok\n     twice(ONE) != ONE;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (twice(ONE) - ONE).abs() < error\n+\n+\n+\n     ONE as f64 != 2.0;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (ONE as f64 - 2.0).abs() < error\n+\n+\n+\n     ONE as f64 != 0.0; // no error, comparison with zero is ok\n \n     let x : f64 = 1.0;\n \n     x == 1.0;\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (x - 1.0).abs() < error\n+\n+\n+\n     x != 0f64; // no error, comparison with zero is ok\n \n     twice(x) != twice(ONE as f64);\n-    //~^ ERROR strict comparison of f32 or f64\n-    //~| HELP within some error\n-    //~| SUGGESTION (twice(x) - twice(ONE as f64)).abs() < error\n+\n+\n+\n \n \n     x < 0.0; // no errors, lower or greater comparisons need no fuzzyness", "previous_filename": "tests/compile-fail/float_cmp.rs"}, {"sha": "8c6abadadecd27b63841162340f7ee7ba12688d4", "filename": "tests/ui/float_cmp.stderr", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,119 @@\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:43:5\n+   |\n+43 |     ONE == 1f32;\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/float_cmp.rs:4:9\n+   |\n+4  | #![deny(float_cmp)]\n+   |         ^^^^^^^^^\n+help: consider comparing them within some error\n+   |     (ONE - 1f32).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:43:5\n+   |\n+43 |     ONE == 1f32;\n+   |     ^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:47:5\n+   |\n+47 |     ONE == 1.0 + 0.0;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE - (1.0 + 0.0)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:47:5\n+   |\n+47 |     ONE == 1.0 + 0.0;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:52:5\n+   |\n+52 |     ONE + ONE == ZERO + ONE + ONE;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE + ONE - (ZERO + ONE + ONE)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:52:5\n+   |\n+52 |     ONE + ONE == ZERO + ONE + ONE;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:57:5\n+   |\n+57 |     ONE != 2.0;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE - 2.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:57:5\n+   |\n+57 |     ONE != 2.0;\n+   |     ^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:62:5\n+   |\n+62 |     twice(ONE) != ONE;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (twice(ONE) - ONE).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:62:5\n+   |\n+62 |     twice(ONE) != ONE;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:66:5\n+   |\n+66 |     ONE as f64 != 2.0;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE as f64 - 2.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:66:5\n+   |\n+66 |     ONE as f64 != 2.0;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:74:5\n+   |\n+74 |     x == 1.0;\n+   |     ^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (x - 1.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:74:5\n+   |\n+74 |     x == 1.0;\n+   |     ^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:80:5\n+   |\n+80 |     twice(x) != twice(ONE as f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (twice(x) - twice(ONE as f64)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:80:5\n+   |\n+80 |     twice(x) != twice(ONE as f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "42599f85154113044d442159e1536bec0a7912f3", "filename": "tests/ui/for_loop.rs", "status": "renamed", "additions": 141, "deletions": 141, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -16,43 +16,43 @@ fn for_loop_over_option_and_result() {\n     // check FOR_LOOP_OVER_OPTION lint\n \n     for x in option {\n-        //~^ ERROR for loop over `option`, which is an `Option`.\n-        //~| HELP consider replacing `for x in option` with `if let Some(x) = option`\n+\n+\n         println!(\"{}\", x);\n     }\n \n     // check FOR_LOOP_OVER_RESULT lint\n \n     for x in result {\n-        //~^ ERROR for loop over `result`, which is a `Result`.\n-        //~| HELP consider replacing `for x in result` with `if let Ok(x) = result`\n+\n+\n         println!(\"{}\", x);\n     }\n \n     for x in option.ok_or(\"x not found\") {\n-        //~^ ERROR for loop over `option.ok_or(\"x not found\")`, which is a `Result`.\n-        //~| HELP consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n+\n+\n         println!(\"{}\", x);\n     }\n \n     // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call in the chain\n \n     for x in v.iter().next() {\n-        //~^ ERROR you are iterating over `Iterator::next()` which is an Option\n+\n         println!(\"{}\", x);\n     }\n \n     // make sure we lint when next() is not the last call in the chain\n \n     for x in v.iter().next().and(Some(0)) {\n-        //~^ ERROR for loop over `v.iter().next().and(Some(0))`, which is an `Option`\n-        //~| HELP consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n+\n+\n         println!(\"{}\", x);\n     }\n \n     for x in v.iter().next().ok_or(\"x not found\") {\n-        //~^ ERROR for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`\n-        //~| HELP consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n+\n+\n         println!(\"{}\", x);\n     }\n \n@@ -97,138 +97,138 @@ fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in &vec {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0..vec.len() {\n-        //~^ WARNING unused variable\n+\n         let i = 42; // make a different `i`\n         println!(\"{}\", vec[i]); // ok, not the `i` of the for-loop\n     }\n \n     for i in 0..vec.len() { let _ = vec[i]; }\n-    //~^ ERROR `i` is only used to index `vec`\n-    //~| HELP consider\n-    //~| HELP consider\n-    //~| SUGGESTION for <item> in &vec { let _ = vec[i]; }\n+\n+\n+\n+\n \n     // ICE #746\n     for j in 0..4 {\n-        //~^ ERROR `j` is only used to index `STATIC`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in STATIC.iter().take(4) {\n+\n+\n+\n+\n         println!(\"{:?}\", STATIC[j]);\n     }\n \n     for j in 0..4 {\n-        //~^ ERROR `j` is only used to index `CONST`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in CONST.iter().take(4) {\n+\n+\n+\n+\n         println!(\"{:?}\", CONST[j]);\n     }\n \n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate() {\n+\n+\n+\n+\n         println!(\"{} {}\", vec[i], i);\n     }\n     for i in 0..vec.len() {      // not an error, indexing more than one variable\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n \n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec2`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec2.iter().take(vec.len()) {\n+\n+\n+\n+\n         println!(\"{}\", vec2[i]);\n     }\n \n     for i in 5..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec.iter().skip(5) {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0..MAX_LEN {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN) {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0...MAX_LEN {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN + 1) {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..10 {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec.iter().take(10).skip(5) {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5...10 {\n-        //~^ ERROR `i` is only used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for <item> in vec.iter().take(10 + 1).skip(5) {\n+\n+\n+\n+\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..vec.len() {\n-        //~^ ERROR `i` is used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().skip(5) {\n+\n+\n+\n+\n         println!(\"{} {}\", vec[i], i);\n     }\n \n     for i in 5..10 {\n-        //~^ ERROR `i` is used to index `vec`\n-        //~| HELP consider\n-        //~| HELP consider\n-        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+\n+\n+\n+\n         println!(\"{} {}\", vec[i], i);\n     }\n \n     for i in 10..0 {\n-        //~^ERROR this range is empty so this for loop will never run\n-        //~|HELP consider\n-        //~|SUGGESTION (0..10).rev()\n+\n+\n+\n         println!(\"{}\", i);\n     }\n \n     for i in 10...0 {\n-        //~^ERROR this range is empty so this for loop will never run\n-        //~|HELP consider\n-        //~|SUGGESTION (0...10).rev()\n+\n+\n+\n         println!(\"{}\", i);\n     }\n \n-    for i in MAX_LEN..0 { //~ERROR this range is empty so this for loop will never run\n-        //~|HELP consider\n-        //~|SUGGESTION (0..MAX_LEN).rev()\n+    for i in MAX_LEN..0 {\n+\n+\n         println!(\"{}\", i);\n     }\n \n-    for i in 5..5 { //~ERROR this range is empty so this for loop will never run\n+    for i in 5..5 {\n         println!(\"{}\", i);\n     }\n \n@@ -250,20 +250,20 @@ fn main() {\n \n     // testing that the empty range lint folds constants\n     for i in 10..5+4 {\n-    //~^ ERROR this range is empty so this for loop will never run\n-    //~| HELP if you are attempting to iterate over this range in reverse\n-    //~| SUGGESTION for i in (5+4..10).rev() {\n+\n+\n+\n         println!(\"{}\", i);\n     }\n \n     for i in (5+2)..(3-1) {\n-    //~^ ERROR this range is empty so this for loop will never run\n-    //~| HELP if you are attempting to iterate over this range in reverse\n-    //~| SUGGESTION for i in ((3-1)..(5+2)).rev() {\n+\n+\n+\n         println!(\"{}\", i);\n     }\n \n-    for i in (5+2)..(8-1) { //~ERROR this range is empty so this for loop will never run\n+    for i in (5+2)..(8-1) {\n         println!(\"{}\", i);\n     }\n \n@@ -287,98 +287,98 @@ fn main() {\n     }\n \n     for _v in vec.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&vec`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &vec {\n+\n+\n+\n \n     for _v in vec.iter_mut() { }\n-    //~^ ERROR it is more idiomatic to loop over `&mut vec`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &mut vec {\n+\n+\n+\n \n     let out_vec = vec![1,2,3];\n     for _v in out_vec.into_iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in out_vec {\n+\n+\n+\n \n     for _v in &vec { } // these are fine\n     for _v in &mut vec { } // these are fine\n \n     for _v in [1, 2, 3].iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&[\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &[1, 2, 3] {\n+\n+\n+\n \n     for _v in (&mut [1, 2, 3]).iter() { } // no error\n \n     for _v in [0; 32].iter() {}\n-    //~^ ERROR it is more idiomatic to loop over `&[\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &[0; 32] {\n+\n+\n+\n \n     for _v in [0; 33].iter() {} // no error\n \n     let ll: LinkedList<()> = LinkedList::new();\n     for _v in ll.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&ll`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &ll {\n+\n+\n+\n \n     let vd: VecDeque<()> = VecDeque::new();\n     for _v in vd.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&vd`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &vd {\n+\n+\n+\n \n     let bh: BinaryHeap<()> = BinaryHeap::new();\n     for _v in bh.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&bh`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &bh {\n+\n+\n+\n \n     let hm: HashMap<(), ()> = HashMap::new();\n     for _v in hm.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&hm`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &hm {\n+\n+\n+\n \n     let bt: BTreeMap<(), ()> = BTreeMap::new();\n     for _v in bt.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&bt`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &bt {\n+\n+\n+\n \n     let hs: HashSet<()> = HashSet::new();\n     for _v in hs.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&hs`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &hs {\n+\n+\n+\n \n     let bs: BTreeSet<()> = BTreeSet::new();\n     for _v in bs.iter() { }\n-    //~^ ERROR it is more idiomatic to loop over `&bs`\n-    //~| HELP to write this more concisely, try looping over\n-    //~| SUGGESTION for _v in &bs {\n \n \n-    for _v in vec.iter().next() { } //~ERROR you are iterating over `Iterator::next()`\n+\n+\n+\n+    for _v in vec.iter().next() { }\n \n     let u = Unrelated(vec![]);\n     for _v in u.next() { } // no error\n     for _v in u.iter() { } // no error\n \n     let mut out = vec![];\n-    vec.iter().map(|x| out.push(x)).collect::<Vec<_>>(); //~ERROR you are collect()ing an iterator\n+    vec.iter().map(|x| out.push(x)).collect::<Vec<_>>();\n     let _y = vec.iter().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n \n     // Loop with explicit counter variable\n     let mut _index = 0;\n-    for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n+    for _v in &vec { _index += 1 }\n \n     let mut _index = 1;\n     _index = 0;\n-    for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n+    for _v in &vec { _index += 1 }\n \n     // Potential false positives\n     let mut _index = 0;\n@@ -439,49 +439,49 @@ fn main() {\n \n     let m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &m {\n-        //~^ you seem to want to iterate on a map's values\n-        //~| HELP use the corresponding method\n-        //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in m.values() {\n+\n+\n+\n+\n         let _v = v;\n     }\n \n     let m : Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n     for (_, v) in &*m {\n-        //~^ you seem to want to iterate on a map's values\n-        //~| HELP use the corresponding method\n-        //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in (*m).values() {\n+\n+\n+\n+\n         let _v = v;\n         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n         // `in *m.values()` as we used to\n     }\n \n     let mut m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &mut m {\n-        //~^ you seem to want to iterate on a map's values\n-        //~| HELP use the corresponding method\n-        //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in m.values_mut()\n+\n+\n+\n+\n         let _v = v;\n     }\n \n     let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n     for (_, v) in &mut *m {\n-        //~^ you seem to want to iterate on a map's values\n-        //~| HELP use the corresponding method\n-        //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in (*m).values_mut()\n+\n+\n+\n+\n         let _v = v;\n     }\n \n     let m : HashMap<u64, u64> = HashMap::new();\n     let rm = &m;\n     for (k, _value) in rm {\n-        //~^ you seem to want to iterate on a map's keys\n-        //~| HELP use the corresponding method\n-        //~| HELP use the corresponding method\n-        //~| SUGGESTION for k in rm.keys() {\n+\n+\n+\n+\n         let _k = k;\n     }\n ", "previous_filename": "tests/compile-fail/for_loop.rs"}, {"sha": "2e9e5d1fe376074ade823c159fb38b1fd432192a", "filename": "tests/ui/for_loop.stderr", "status": "added", "additions": 632, "deletions": 0, "changes": 632, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,632 @@\n+error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:18:14\n+   |\n+18 |     for x in option {\n+   |              ^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+   = help: consider replacing `for x in option` with `if let Some(x) = option`\n+\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:26:14\n+   |\n+26 |     for x in result {\n+   |              ^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n+\n+error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:32:14\n+   |\n+32 |     for x in option.ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n+\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+  --> $DIR/for_loop.rs:40:5\n+   |\n+40 |       for x in v.iter().next() {\n+   |  _____^ starting here...\n+41 | |\n+42 | |         println!(\"{}\", x);\n+43 | |     }\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(iter_next_loop)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+\n+error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:47:14\n+   |\n+47 |     for x in v.iter().next().and(Some(0)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n+\n+error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:53:14\n+   |\n+53 |     for x in v.iter().next().ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:99:5\n+    |\n+99  |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+100 | |\n+101 | |\n+102 | |\n+103 | |\n+104 | |         println!(\"{}\", vec[i]);\n+105 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:8\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |        ^^^^^^^^^^^^^^^^^^^\n+help: consider using an iterator\n+    |     for <item> in &vec {\n+\n+warning: unused variable: `i`\n+   --> $DIR/for_loop.rs:107:9\n+    |\n+107 |     for i in 0..vec.len() {\n+    |         ^\n+    |\n+    = note: #[warn(unused_variables)] on by default\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:113:5\n+    |\n+113 |     for i in 0..vec.len() { let _ = vec[i]; }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using an iterator\n+    |     for <item> in &vec { let _ = vec[i]; }\n+\n+error: the loop variable `j` is only used to index `STATIC`.\n+   --> $DIR/for_loop.rs:120:5\n+    |\n+120 |       for j in 0..4 {\n+    |  _____^ starting here...\n+121 | |\n+122 | |\n+123 | |\n+124 | |\n+125 | |         println!(\"{:?}\", STATIC[j]);\n+126 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in STATIC.iter().take(4) {\n+\n+error: the loop variable `j` is only used to index `CONST`.\n+   --> $DIR/for_loop.rs:128:5\n+    |\n+128 |       for j in 0..4 {\n+    |  _____^ starting here...\n+129 | |\n+130 | |\n+131 | |\n+132 | |\n+133 | |         println!(\"{:?}\", CONST[j]);\n+134 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in CONST.iter().take(4) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:136:5\n+    |\n+136 |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+137 | |\n+138 | |\n+139 | |\n+140 | |\n+141 | |         println!(\"{} {}\", vec[i], i);\n+142 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate() {\n+\n+error: the loop variable `i` is only used to index `vec2`.\n+   --> $DIR/for_loop.rs:147:5\n+    |\n+147 |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+148 | |\n+149 | |\n+150 | |\n+151 | |\n+152 | |         println!(\"{}\", vec2[i]);\n+153 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec2.iter().take(vec.len()) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:155:5\n+    |\n+155 |       for i in 5..vec.len() {\n+    |  _____^ starting here...\n+156 | |\n+157 | |\n+158 | |\n+159 | |\n+160 | |         println!(\"{}\", vec[i]);\n+161 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().skip(5) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:163:5\n+    |\n+163 |       for i in 0..MAX_LEN {\n+    |  _____^ starting here...\n+164 | |\n+165 | |\n+166 | |\n+167 | |\n+168 | |         println!(\"{}\", vec[i]);\n+169 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(MAX_LEN) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:171:5\n+    |\n+171 |       for i in 0...MAX_LEN {\n+    |  _____^ starting here...\n+172 | |\n+173 | |\n+174 | |\n+175 | |\n+176 | |         println!(\"{}\", vec[i]);\n+177 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(MAX_LEN + 1) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:179:5\n+    |\n+179 |       for i in 5..10 {\n+    |  _____^ starting here...\n+180 | |\n+181 | |\n+182 | |\n+183 | |\n+184 | |         println!(\"{}\", vec[i]);\n+185 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(10).skip(5) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:187:5\n+    |\n+187 |       for i in 5...10 {\n+    |  _____^ starting here...\n+188 | |\n+189 | |\n+190 | |\n+191 | |\n+192 | |         println!(\"{}\", vec[i]);\n+193 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(10 + 1).skip(5) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:195:5\n+    |\n+195 |       for i in 5..vec.len() {\n+    |  _____^ starting here...\n+196 | |\n+197 | |\n+198 | |\n+199 | |\n+200 | |         println!(\"{} {}\", vec[i], i);\n+201 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:203:5\n+    |\n+203 |       for i in 5..10 {\n+    |  _____^ starting here...\n+204 | |\n+205 | |\n+206 | |\n+207 | |\n+208 | |         println!(\"{} {}\", vec[i], i);\n+209 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:211:5\n+    |\n+211 |       for i in 10..0 {\n+    |  _____^ starting here...\n+212 | |\n+213 | |\n+214 | |\n+215 | |         println!(\"{}\", i);\n+216 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:90\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                          ^^^^^^^^^^^^^^^^^^\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0..10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:218:5\n+    |\n+218 |       for i in 10...0 {\n+    |  _____^ starting here...\n+219 | |\n+220 | |\n+221 | |\n+222 | |         println!(\"{}\", i);\n+223 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0...10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:225:5\n+    |\n+225 |       for i in MAX_LEN..0 {\n+    |  _____^ starting here...\n+226 | |\n+227 | |\n+228 | |         println!(\"{}\", i);\n+229 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0..MAX_LEN).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:231:5\n+    |\n+231 |       for i in 5..5 {\n+    |  _____^ starting here...\n+232 | |         println!(\"{}\", i);\n+233 | |     }\n+    | |_____^ ...ending here\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:252:5\n+    |\n+252 |       for i in 10..5+4 {\n+    |  _____^ starting here...\n+253 | |\n+254 | |\n+255 | |\n+256 | |         println!(\"{}\", i);\n+257 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (5+4..10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:259:5\n+    |\n+259 |       for i in (5+2)..(3-1) {\n+    |  _____^ starting here...\n+260 | |\n+261 | |\n+262 | |\n+263 | |         println!(\"{}\", i);\n+264 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in ((3-1)..(5+2)).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:266:5\n+    |\n+266 |       for i in (5+2)..(8-1) {\n+    |  _____^ starting here...\n+267 | |         println!(\"{}\", i);\n+268 | |     }\n+    | |_____^ ...ending here\n+\n+error: it is more idiomatic to loop over `&vec` instead of `vec.iter()`\n+   --> $DIR/for_loop.rs:289:15\n+    |\n+289 |     for _v in vec.iter() { }\n+    |               ^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:29\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                             ^^^^^^^^^^^^^^^^^^\n+help: to write this more concisely, try looping over\n+    |     for _v in &vec { }\n+\n+error: it is more idiomatic to loop over `&mut vec` instead of `vec.iter_mut()`\n+   --> $DIR/for_loop.rs:294:15\n+    |\n+294 |     for _v in vec.iter_mut() { }\n+    |               ^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &mut vec { }\n+\n+error: it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n+   --> $DIR/for_loop.rs:300:15\n+    |\n+300 |     for _v in out_vec.into_iter() { }\n+    |               ^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:49\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to write this more concisely, try looping over\n+    |     for _v in out_vec { }\n+\n+error: it is more idiomatic to loop over `&[1, 2, 3]` instead of `[1, 2, 3].iter()`\n+   --> $DIR/for_loop.rs:308:15\n+    |\n+308 |     for _v in [1, 2, 3].iter() { }\n+    |               ^^^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &[1, 2, 3] { }\n+\n+error: it is more idiomatic to loop over `&[0; 32]` instead of `[0; 32].iter()`\n+   --> $DIR/for_loop.rs:315:15\n+    |\n+315 |     for _v in [0; 32].iter() {}\n+    |               ^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &[0; 32] {}\n+\n+error: it is more idiomatic to loop over `&ll` instead of `ll.iter()`\n+   --> $DIR/for_loop.rs:323:15\n+    |\n+323 |     for _v in ll.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &ll { }\n+\n+error: it is more idiomatic to loop over `&vd` instead of `vd.iter()`\n+   --> $DIR/for_loop.rs:329:15\n+    |\n+329 |     for _v in vd.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &vd { }\n+\n+error: it is more idiomatic to loop over `&bh` instead of `bh.iter()`\n+   --> $DIR/for_loop.rs:335:15\n+    |\n+335 |     for _v in bh.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bh { }\n+\n+error: it is more idiomatic to loop over `&hm` instead of `hm.iter()`\n+   --> $DIR/for_loop.rs:341:15\n+    |\n+341 |     for _v in hm.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &hm { }\n+\n+error: it is more idiomatic to loop over `&bt` instead of `bt.iter()`\n+   --> $DIR/for_loop.rs:347:15\n+    |\n+347 |     for _v in bt.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bt { }\n+\n+error: it is more idiomatic to loop over `&hs` instead of `hs.iter()`\n+   --> $DIR/for_loop.rs:353:15\n+    |\n+353 |     for _v in hs.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &hs { }\n+\n+error: it is more idiomatic to loop over `&bs` instead of `bs.iter()`\n+   --> $DIR/for_loop.rs:359:15\n+    |\n+359 |     for _v in bs.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bs { }\n+\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+   --> $DIR/for_loop.rs:365:5\n+    |\n+365 |     for _v in vec.iter().next() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:74\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                          ^^^^^^^^^^^^^^\n+\n+error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n+   --> $DIR/for_loop.rs:372:5\n+    |\n+372 |     vec.iter().map(|x| out.push(x)).collect::<Vec<_>>();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:91:8\n+    |\n+91  | #[deny(unused_collect)]\n+    |        ^^^^^^^^^^^^^^\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+   --> $DIR/for_loop.rs:377:5\n+    |\n+377 |     for _v in &vec { _index += 1 }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:110\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                                              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+   --> $DIR/for_loop.rs:381:5\n+    |\n+381 |     for _v in &vec { _index += 1 }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:441:5\n+    |\n+441 |       for (_, v) in &m {\n+    |  _____^ starting here...\n+442 | |\n+443 | |\n+444 | |\n+445 | |\n+446 | |         let _v = v;\n+447 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:133\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                                                                     ^^^^^^^^^^\n+help: use the corresponding method\n+    |     for v in m.values() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:450:5\n+    |\n+450 |       for (_, v) in &*m {\n+    |  _____^ starting here...\n+451 | |\n+452 | |\n+453 | |\n+454 | |\n+455 | |         let _v = v;\n+456 | |         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n+457 | |         // `in *m.values()` as we used to\n+458 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in (*m).values() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:461:5\n+    |\n+461 |       for (_, v) in &mut m {\n+    |  _____^ starting here...\n+462 | |\n+463 | |\n+464 | |\n+465 | |\n+466 | |         let _v = v;\n+467 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in m.values_mut() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:470:5\n+    |\n+470 |       for (_, v) in &mut *m {\n+    |  _____^ starting here...\n+471 | |\n+472 | |\n+473 | |\n+474 | |\n+475 | |         let _v = v;\n+476 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in (*m).values_mut() {\n+\n+error: you seem to want to iterate on a map's keys\n+   --> $DIR/for_loop.rs:480:5\n+    |\n+480 |       for (k, _value) in rm {\n+    |  _____^ starting here...\n+481 | |\n+482 | |\n+483 | |\n+484 | |\n+485 | |         let _k = k;\n+486 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for k in rm.keys() {\n+\n+error: aborting due to 47 previous errors\n+"}, {"sha": "67561dca87d048ce66d3cd152656524504da44a1", "filename": "tests/ui/format.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -3,16 +3,16 @@\n #![deny(useless_format)]\n \n fn main() {\n-    format!(\"foo\"); //~ERROR useless use of `format!`\n+    format!(\"foo\");\n \n-    format!(\"{}\", \"foo\"); //~ERROR useless use of `format!`\n+    format!(\"{}\", \"foo\");\n     format!(\"{:?}\", \"foo\"); // we only want to warn about `{}`\n     format!(\"{:+}\", \"foo\"); // we only want to warn about `{}`\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n     let arg: String = \"\".to_owned();\n-    format!(\"{}\", arg); //~ERROR useless use of `format!`\n+    format!(\"{}\", arg);\n     format!(\"{:?}\", arg); // we only want to warn about `{}`\n     format!(\"{:+}\", arg); // we only want to warn about `{}`\n     format!(\"foo {}\", arg);", "previous_filename": "tests/compile-fail/format.rs"}, {"sha": "51e0c5b6d63349a2efc5916b8ce981cb67f9c6fa", "filename": "tests/ui/format.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: useless use of `format!`\n+ --> $DIR/format.rs:6:5\n+  |\n+6 |     format!(\"foo\");\n+  |     ^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/format.rs:3:9\n+  |\n+3 | #![deny(useless_format)]\n+  |         ^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+ --> $DIR/format.rs:8:5\n+  |\n+8 |     format!(\"{}\", \"foo\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:15:5\n+   |\n+15 |     format!(\"{}\", arg);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8d3c1d938e55da8de6f879f74b02992ee23f2f32", "filename": "tests/ui/formatting.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -13,17 +13,17 @@ fn main() {\n     // weird `else if` formatting:\n     if foo() {\n     } if foo() {\n-    //~^ ERROR this looks like an `else if` but the `else` is missing\n-    //~| NOTE add the missing `else` or\n+\n+\n     }\n \n     let _ = { // if as the last expression\n         let _ = 0;\n \n         if foo() {\n         } if foo() {\n-        //~^ ERROR this looks like an `else if` but the `else` is missing\n-        //~| NOTE add the missing `else` or\n+\n+\n         }\n         else {\n         }\n@@ -32,8 +32,8 @@ fn main() {\n     let _ = { // if in the middle of a block\n         if foo() {\n         } if foo() {\n-        //~^ ERROR this looks like an `else if` but the `else` is missing\n-        //~| NOTE add the missing `else` or\n+\n+\n         }\n         else {\n         }\n@@ -43,15 +43,15 @@ fn main() {\n \n     if foo() {\n     } else\n-    //~^ ERROR this is an `else if` but the formatting might hide it\n-    //~| NOTE remove the `else` or\n+\n+\n     if foo() { // the span of the above error should continue here\n     }\n \n     if foo() {\n     }\n-    //~^ ERROR this is an `else if` but the formatting might hide it\n-    //~| NOTE remove the `else` or\n+\n+\n     else\n     if foo() { // the span of the above error should continue here\n     }\n@@ -81,16 +81,16 @@ fn main() {\n     // weird op_eq formatting:\n     let mut a = 42;\n     a =- 35;\n-    //~^ ERROR this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n-    //~| NOTE to remove this lint, use either `-=` or `= -`\n+\n+\n     a =* &191;\n-    //~^ ERROR this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n-    //~| NOTE to remove this lint, use either `*=` or `= *`\n+\n+\n \n     let mut b = true;\n     b =! false;\n-    //~^ ERROR this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n-    //~| NOTE to remove this lint, use either `!=` or `= !`\n+\n+\n \n     // those are ok:\n     a = -35;\n@@ -100,14 +100,14 @@ fn main() {\n     // possible missing comma in an array\n     let _ = &[\n         -1, -2, -3 // <= no coma here\n-        //~^ ERROR possibly missing a comma here\n-        //~| NOTE to remove this lint, add a comma or write the expr in a single line\n+\n+\n         -4, -5, -6\n     ];\n     let _ = &[\n         -1, -2, -3 // <= no coma here\n-        //~^ ERROR possibly missing a comma here\n-        //~| NOTE to remove this lint, add a comma or write the expr in a single line\n+\n+\n         *4, -5, -6\n     ];\n ", "previous_filename": "tests/compile-fail/formatting.rs"}, {"sha": "68260410fa990108c25334d7bcdfa4511d388b11", "filename": "tests/ui/formatting.stderr", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,116 @@\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:15:6\n+   |\n+15 |     } if foo() {\n+   |      ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/formatting.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:24:10\n+   |\n+24 |         } if foo() {\n+   |          ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:34:10\n+   |\n+34 |         } if foo() {\n+   |          ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:45:6\n+   |\n+45 |       } else\n+   |  ______^ starting here...\n+46 | |\n+47 | |\n+48 | |     if foo() { // the span of the above error should continue here\n+   | |____^ ...ending here\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:52:6\n+   |\n+52 |       }\n+   |  ______^ starting here...\n+53 | |\n+54 | |\n+55 | |     else\n+56 | |     if foo() { // the span of the above error should continue here\n+   | |____^ ...ending here\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n+  --> $DIR/formatting.rs:83:6\n+   |\n+83 |     a =- 35;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/formatting.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = note: to remove this lint, use either `-=` or `= -`\n+\n+error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n+  --> $DIR/formatting.rs:86:6\n+   |\n+86 |     a =* &191;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, use either `*=` or `= *`\n+\n+error: this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n+  --> $DIR/formatting.rs:91:6\n+   |\n+91 |     b =! false;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, use either `!=` or `= !`\n+\n+error: possibly missing a comma here\n+   --> $DIR/formatting.rs:102:19\n+    |\n+102 |         -1, -2, -3 // <= no coma here\n+    |                   ^\n+    |\n+    = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/formatting.rs:4:9\n+    |\n+4   | #![deny(clippy)]\n+    |         ^^^^^^\n+    = note: to remove this lint, add a comma or write the expr in a single line\n+\n+error: possibly missing a comma here\n+   --> $DIR/formatting.rs:108:19\n+    |\n+108 |         -1, -2, -3 // <= no coma here\n+    |                   ^\n+    |\n+    = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]\n+    = note: to remove this lint, add a comma or write the expr in a single line\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "bb09be575fdca5e680490b0ec00bd898a5556b22", "filename": "tests/ui/functions.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -9,7 +9,7 @@\n fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n \n fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n-    //~^ ERROR: this function has too many arguments (8/7)\n+\n }\n \n // don't lint extern fns\n@@ -18,7 +18,7 @@ extern fn extern_fn(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32,\n pub trait Foo {\n     fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool);\n     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n-    //~^ ERROR: this function has too many arguments (8/7)\n+\n \n     fn ptr(p: *const u8);\n }\n@@ -28,7 +28,7 @@ pub struct Bar;\n impl Bar {\n     fn good_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n-    //~^ ERROR: this function has too many arguments (8/7)\n+\n }\n \n // ok, we don\u2019t want to warn implementations\n@@ -38,11 +38,11 @@ impl Foo for Bar {\n \n     fn ptr(p: *const u8) {\n         println!(\"{}\", unsafe { *p });\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n         println!(\"{:?}\", unsafe { p.as_ref() });\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n         unsafe { std::ptr::read(p) };\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n     }\n }\n \n@@ -54,11 +54,11 @@ fn private(p: *const u8) {\n \n pub fn public(p: *const u8) {\n     println!(\"{}\", unsafe { *p });\n-    //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n     println!(\"{:?}\", unsafe { p.as_ref() });\n-    //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n     unsafe { std::ptr::read(p) };\n-    //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n }\n \n impl Bar {\n@@ -68,11 +68,11 @@ impl Bar {\n \n     pub fn public(self, p: *const u8) {\n         println!(\"{}\", unsafe { *p });\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n         println!(\"{:?}\", unsafe { p.as_ref() });\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n         unsafe { std::ptr::read(p) };\n-        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+\n     }\n \n     pub fn public_ok(self, p: *const u8) {", "previous_filename": "tests/compile-fail/functions.rs"}, {"sha": "4a21f9466c995611dc7bb275fcd73e9efbb42564", "filename": "tests/ui/functions.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,111 @@\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:11:1\n+   |\n+11 |   fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n+   |  _^ starting here...\n+12 | |\n+13 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/functions.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:20:5\n+   |\n+20 |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:30:5\n+   |\n+30 |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:40:34\n+   |\n+40 |         println!(\"{}\", unsafe { *p });\n+   |                                  ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/functions.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:42:35\n+   |\n+42 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                                   ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:44:33\n+   |\n+44 |         unsafe { std::ptr::read(p) };\n+   |                                 ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:56:30\n+   |\n+56 |     println!(\"{}\", unsafe { *p });\n+   |                              ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:58:31\n+   |\n+58 |     println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                               ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:60:29\n+   |\n+60 |     unsafe { std::ptr::read(p) };\n+   |                             ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:70:34\n+   |\n+70 |         println!(\"{}\", unsafe { *p });\n+   |                                  ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:72:35\n+   |\n+72 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                                   ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:74:33\n+   |\n+74 |         unsafe { std::ptr::read(p) };\n+   |                                 ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "ea68ec3e1abc06121f97a32b93c498310958f0c3", "filename": "tests/ui/identity_op.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,21 +10,21 @@ const ZERO : i64 = 0;\n fn main() {\n     let x = 0;\n \n-    x + 0;        //~ERROR the operation is ineffective\n-    x + (1 - 1);  //~ERROR the operation is ineffective\n+    x + 0;\n+    x + (1 - 1);\n     x + 1;\n-    0 + x;        //~ERROR the operation is ineffective\n+    0 + x;\n     1 + x;\n     x - ZERO;     //no error, as we skip lookups (for now)\n-    x | (0);      //~ERROR the operation is ineffective\n+    x | (0);\n     ((ZERO)) | x; //no error, as we skip lookups (for now)\n \n-    x * 1;        //~ERROR the operation is ineffective\n-    1 * x;        //~ERROR the operation is ineffective\n+    x * 1;\n+    1 * x;\n     x / ONE;      //no error, as we skip lookups (for now)\n \n     x / 2;        //no false positive\n \n     x & NEG_ONE;  //no error, as we skip lookups (for now)\n-    -1 & x;       //~ERROR the operation is ineffective\n+    -1 & x;\n }", "previous_filename": "tests/compile-fail/identity_op.rs"}, {"sha": "ab455ad15855f933c0a9676b2b5f12d15c2e2291", "filename": "tests/ui/identity_op.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,50 @@\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:13:5\n+   |\n+13 |     x + 0;\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/identity_op.rs:9:8\n+   |\n+9  | #[deny(identity_op)]\n+   |        ^^^^^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:14:5\n+   |\n+14 |     x + (1 - 1);\n+   |     ^^^^^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:16:5\n+   |\n+16 |     0 + x;\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:19:5\n+   |\n+19 |     x | (0);\n+   |     ^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:22:5\n+   |\n+22 |     x * 1;\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:23:5\n+   |\n+23 |     1 * x;\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:29:5\n+   |\n+29 |     -1 & x;\n+   |     ^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "c48518304e2a3ee912cc88be8ce2f0836e053331", "filename": "tests/ui/if_let_redundant_pattern_matching.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,53 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+#![deny(if_let_redundant_pattern_matching)]\n+\n+\n+fn main() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+\n+\n+\n+    if let Err(_) = Err::<i32, i32>(42) {\n+\n+\n+\n+    }\n+\n+    if let None = None::<()> {\n+\n+\n+\n+    }\n+\n+    if let Some(_) = Some(42) {\n+\n+\n+\n+    }\n+\n+    if Ok::<i32, i32>(42).is_ok() {\n+\n+    }\n+\n+    if Err::<i32, i32>(42).is_err() {\n+\n+    }\n+\n+    if None::<i32>.is_none() {\n+\n+    }\n+\n+    if Some(42).is_some() {\n+\n+    }\n+\n+    if let Ok(x) = Ok::<i32,i32>(42) {\n+        println!(\"{}\", x);\n+    }\n+}\n+\n+"}, {"sha": "cc011b4a90c9c9e681f2cf2f2be5494f6cc800da", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,47 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+ --> $DIR/if_let_redundant_pattern_matching.rs:9:12\n+  |\n+9 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+  |            ^^^^^\n+  |\n+  = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/if_let_redundant_pattern_matching.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+help: try this\n+  |     if Ok::<i32, i32>(42).is_ok() {}\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:14:12\n+   |\n+14 |     if let Err(_) = Err::<i32, i32>(42) {\n+   |            ^^^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if Err::<i32, i32>(42).is_err() {\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:20:12\n+   |\n+20 |     if let None = None::<()> {\n+   |            ^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if None::<()>.is_none() {\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:26:12\n+   |\n+26 |     if let Some(_) = Some(42) {\n+   |            ^^^^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if Some(42).is_some() {\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "5cdc6ce8678c20f4544bf6e06ab9b4208cb2d1c2", "filename": "tests/ui/if_not_else.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,12 +6,12 @@\n fn bla() -> bool { unimplemented!() }\n \n fn main() {\n-    if !bla() { //~ ERROR: Unnecessary boolean `not` operation\n+    if !bla() {\n         println!(\"Bugs\");\n     } else {\n         println!(\"Bunny\");\n     }\n-    if 4 != 5 { //~ ERROR: Unnecessary `!=` operation\n+    if 4 != 5 {\n         println!(\"Bugs\");\n     } else {\n         println!(\"Bunny\");", "previous_filename": "tests/compile-fail/if_not_else.rs"}, {"sha": "ecdd7254d70b8ff21a888df22ab8020e967eace7", "filename": "tests/ui/if_not_else.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,33 @@\n+error: Unnecessary boolean `not` operation\n+  --> $DIR/if_not_else.rs:9:5\n+   |\n+9  |       if !bla() {\n+   |  _____^ starting here...\n+10 | |         println!(\"Bugs\");\n+11 | |     } else {\n+12 | |         println!(\"Bunny\");\n+13 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/if_not_else.rs:4:9\n+   |\n+4  | #![deny(if_not_else)]\n+   |         ^^^^^^^^^^^\n+   = help: remove the `!` and swap the blocks of the if/else\n+\n+error: Unnecessary `!=` operation\n+  --> $DIR/if_not_else.rs:14:5\n+   |\n+14 |       if 4 != 5 {\n+   |  _____^ starting here...\n+15 | |         println!(\"Bugs\");\n+16 | |     } else {\n+17 | |         println!(\"Bunny\");\n+18 | |     }\n+   | |_____^ ...ending here\n+   |\n+   = help: change to `==` and swap the blocks of the if/else\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "952cf1e4361c7c37cc4052b983c0424ffcce9c87", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,35 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(invalid_upcast_comparisons)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+fn main() {\n+    let zero: u32 = 0;\n+    let u8_max: u8 = 255;\n+\n+    (u8_max as u32) > 300;\n+    (u8_max as u32) > 20;\n+\n+    (zero as i32) < -5;\n+    (zero as i32) < 10;\n+\n+    -5 < (zero as i32);\n+    0 <= (zero as i32);\n+    0 < (zero as i32);\n+\n+    -5 > (zero as i32);\n+    -5 >= (u8_max as i32);\n+    1337 == (u8_max as i32);\n+\n+    -5 == (zero as i32);\n+    -5 != (u8_max as i32);\n+\n+    // Those are Ok:\n+    42 == (u8_max as i32);\n+    42 != (u8_max as i32);\n+    42 > (u8_max as i32);\n+    (u8_max as i32) == 42;\n+    (u8_max as i32) != 42;\n+    (u8_max as i32) > 42;\n+    (u8_max as i32) < 42;\n+}"}, {"sha": "e7eda752f38801c1417edd5999c89e4dbe906dc5", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,62 @@\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:10:5\n+   |\n+10 |     (u8_max as u32) > 300;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/invalid_upcast_comparisons.rs:4:9\n+   |\n+4  | #![deny(invalid_upcast_comparisons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:13:5\n+   |\n+13 |     (zero as i32) < -5;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:16:5\n+   |\n+16 |     -5 < (zero as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:17:5\n+   |\n+17 |     0 <= (zero as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:20:5\n+   |\n+20 |     -5 > (zero as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:21:5\n+   |\n+21 |     -5 >= (u8_max as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:22:5\n+   |\n+22 |     1337 == (u8_max as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:24:5\n+   |\n+24 |     -5 == (zero as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:25:5\n+   |\n+25 |     -5 != (u8_max as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "09b509673dc363884baced7c1a6eef118e18e633", "filename": "tests/ui/item_after_statement.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -9,11 +9,11 @@ fn ok() {\n \n fn last() {\n     foo();\n-    fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+    fn foo() { println!(\"foo\"); }\n }\n \n fn main() {\n     foo();\n-    fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+    fn foo() { println!(\"foo\"); }\n     foo();\n }", "previous_filename": "tests/compile-fail/item_after_statement.rs"}, {"sha": "318db240ca2b390429dac024efc2564d7387f0c8", "filename": "tests/ui/item_after_statement.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: adding items after statements is confusing, since items exist from the start of the scope\n+  --> $DIR/item_after_statement.rs:12:5\n+   |\n+12 |     fn foo() { println!(\"foo\"); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/item_after_statement.rs:3:9\n+   |\n+3  | #![deny(items_after_statements)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: adding items after statements is confusing, since items exist from the start of the scope\n+  --> $DIR/item_after_statement.rs:17:5\n+   |\n+17 |     fn foo() { println!(\"foo\"); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5bbcb93910b9e8c6a9a70c45e4f3d1abec1ffaab", "filename": "tests/ui/large_enum_variant.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,53 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![deny(large_enum_variant)]\n+\n+enum LargeEnum {\n+    A(i32),\n+    B([i32; 8000]),\n+\n+\n+}\n+\n+enum GenericEnum<T> {\n+    A(i32),\n+    B([i32; 8000]),\n+\n+\n+    C([T; 8000]),\n+    D(T, [i32; 8000]),\n+\n+}\n+\n+trait SomeTrait {\n+    type Item;\n+}\n+\n+enum LargeEnumGeneric<A: SomeTrait> {\n+    Var(A::Item), // regression test, this used to ICE\n+}\n+\n+enum AnotherLargeEnum {\n+    VariantOk(i32, u32),\n+    ContainingLargeEnum(LargeEnum),\n+\n+\n+    ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n+\n+    VoidVariant,\n+    StructLikeLittle { x: i32, y: i32 },\n+    StructLikeLarge { x: [i32; 8000], y: i32 },\n+\n+    StructLikeLarge2 {\n+        x:\n+        [i32; 8000]\n+\n+    },\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "77155b6ab5fedeca6bdecd6628d55e318249ddd1", "filename": "tests/ui/large_enum_variant.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,84 @@\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:10:5\n+   |\n+10 |     B([i32; 8000]),\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/large_enum_variant.rs:6:9\n+   |\n+6  | #![deny(large_enum_variant)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     B(Box<[i32; 8000]>),\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:17:5\n+   |\n+17 |     B([i32; 8000]),\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     B(Box<[i32; 8000]>),\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:21:5\n+   |\n+21 |     D(T, [i32; 8000]),\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:21:5\n+   |\n+21 |     D(T, [i32; 8000]),\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:35:5\n+   |\n+35 |     ContainingLargeEnum(LargeEnum),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     ContainingLargeEnum(Box<LargeEnum>),\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:38:5\n+   |\n+38 |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:38:5\n+   |\n+38 |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:42:5\n+   |\n+42 |     StructLikeLarge { x: [i32; 8000], y: i32 },\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:42:5\n+   |\n+42 |     StructLikeLarge { x: [i32; 8000], y: i32 },\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:44:5\n+   |\n+44 |       StructLikeLarge2 {\n+   |  _____^ starting here...\n+45 | |         x:\n+46 | |         [i32; 8000]\n+47 | |\n+48 | |     },\n+   | |_____^ ...ending here\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |         Box<[i32; 8000]>\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "a310eeef3846df90b8f2ed4490b872b800ab74f0", "filename": "tests/ui/len_zero.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -7,7 +7,7 @@\n pub struct PubOne;\n \n impl PubOne {\n-    pub fn len(self: &Self) -> isize { //~ERROR item `PubOne` has a public `len` method but no corresponding `is_empty`\n+    pub fn len(self: &Self) -> isize {\n         1\n     }\n }\n@@ -29,7 +29,7 @@ impl One {\n }\n \n pub trait PubTraitsToo {\n-    fn len(self: &Self) -> isize; //~ERROR trait `PubTraitsToo` has a `len` method but no `is_empty`\n+    fn len(self: &Self) -> isize;\n }\n \n impl PubTraitsToo for One {\n@@ -63,7 +63,7 @@ impl HasPrivateIsEmpty {\n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize { //~ERROR item `HasIsEmpty` has a public `len` method but a private `is_empty`\n+    pub fn len(self: &Self) -> isize {\n         1\n     }\n \n@@ -92,7 +92,7 @@ impl WithIsEmpty for Wither {\n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize { //~ERROR item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty`\n+    pub fn len(self: &Self) -> isize {\n         1\n     }\n \n@@ -104,16 +104,16 @@ impl HasWrongIsEmpty {\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION x.is_empty()\n+\n+\n+\n         println!(\"This should not happen!\");\n     }\n \n     if \"\".len() == 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION \"\".is_empty()\n+\n+\n+\n     }\n \n     let y = One;\n@@ -128,30 +128,30 @@ fn main() {\n \n     let has_is_empty = HasIsEmpty;\n     if has_is_empty.len() == 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION has_is_empty.is_empty()\n+\n+\n+\n         println!(\"Or this!\");\n     }\n     if has_is_empty.len() != 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION !has_is_empty.is_empty()\n+\n+\n+\n         println!(\"Or this!\");\n     }\n     if has_is_empty.len() > 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION !has_is_empty.is_empty()\n+\n+\n+\n         println!(\"Or this!\");\n     }\n     assert!(!has_is_empty.is_empty());\n \n     let with_is_empty: &WithIsEmpty = &Wither;\n     if with_is_empty.len() == 0 {\n-        //~^ERROR length comparison to zero\n-        //~|HELP consider using `is_empty`\n-        //~|SUGGESTION with_is_empty.is_empty()\n+\n+\n+\n         println!(\"Or this!\");\n     }\n     assert!(!with_is_empty.is_empty());", "previous_filename": "tests/compile-fail/len_zero.rs"}, {"sha": "5aaaecf55cb7352048e7ac3ed74feb2ba562630a", "filename": "tests/ui/len_zero.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,100 @@\n+error: item `PubOne` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_zero.rs:10:5\n+   |\n+10 |       pub fn len(self: &Self) -> isize {\n+   |  _____^ starting here...\n+11 | |         1\n+12 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/len_zero.rs:4:9\n+   |\n+4  | #![deny(len_without_is_empty, len_zero)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait `PubTraitsToo` has a `len` method but no `is_empty` method\n+  --> $DIR/len_zero.rs:32:5\n+   |\n+32 |     fn len(self: &Self) -> isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n+  --> $DIR/len_zero.rs:66:5\n+   |\n+66 |       pub fn len(self: &Self) -> isize {\n+   |  _____^ starting here...\n+67 | |         1\n+68 | |     }\n+   | |_____^ ...ending here\n+\n+error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_zero.rs:95:5\n+   |\n+95 |       pub fn len(self: &Self) -> isize {\n+   |  _____^ starting here...\n+96 | |         1\n+97 | |     }\n+   | |_____^ ...ending here\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:106:8\n+    |\n+106 |     if x.len() == 0 {\n+    |        ^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/len_zero.rs:4:31\n+    |\n+4   | #![deny(len_without_is_empty, len_zero)]\n+    |                               ^^^^^^^^\n+help: consider using `is_empty`\n+    |     if x.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:113:8\n+    |\n+113 |     if \"\".len() == 0 {\n+    |        ^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if \"\".is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:130:8\n+    |\n+130 |     if has_is_empty.len() == 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:136:8\n+    |\n+136 |     if has_is_empty.len() != 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if !has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:142:8\n+    |\n+142 |     if has_is_empty.len() > 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if !has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:151:8\n+    |\n+151 |     if with_is_empty.len() == 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if with_is_empty.is_empty() {\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "9e221cc5bc23b8fa82b686f1771b94b2e0f5fb86", "filename": "tests/ui/let_if_seq.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -55,17 +55,17 @@ fn main() {\n     issue985_alt();\n \n     let mut foo = 0;\n-    //~^ ERROR `if _ { .. } else { .. }` is an expression\n-    //~| HELP more idiomatic\n-    //~| SUGGESTION let <mut> foo = if f() { 42 } else { 0 };\n+\n+\n+\n     if f() {\n         foo = 42;\n     }\n \n     let mut bar = 0;\n-    //~^ ERROR `if _ { .. } else { .. }` is an expression\n-    //~| HELP more idiomatic\n-    //~| SUGGESTION let <mut> bar = if f() { ..; 42 } else { ..; 0 };\n+\n+\n+\n     if f() {\n         f();\n         bar = 42;\n@@ -75,9 +75,9 @@ fn main() {\n     }\n \n     let quz;\n-    //~^ ERROR `if _ { .. } else { .. }` is an expression\n-    //~| HELP more idiomatic\n-    //~| SUGGESTION let quz = if f() { 42 } else { 0 };\n+\n+\n+\n \n     if f() {\n         quz = 42;\n@@ -109,9 +109,9 @@ fn main() {\n \n     // baz needs to be mut\n     let mut baz = 0;\n-    //~^ ERROR `if _ { .. } else { .. }` is an expression\n-    //~| HELP more idiomatic\n-    //~| SUGGESTION let <mut> baz = if f() { 42 } else { 0 };\n+\n+\n+\n     if f() {\n         baz = 42;\n     }", "previous_filename": "tests/compile-fail/let_if_seq.rs"}, {"sha": "fb5ef47ce0f794652bb763827d320fa5db261208", "filename": "tests/ui/let_if_seq.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,60 @@\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:57:5\n+   |\n+57 |       let mut foo = 0;\n+   |  _____^ starting here...\n+58 | |\n+59 | |\n+60 | |\n+61 | |     if f() {\n+62 | |         foo = 42;\n+63 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/let_if_seq.rs:5:9\n+   |\n+5  | #![deny(useless_let_if_seq)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: it is more idiomatic to write\n+   |     let <mut> foo = if f() { 42 } else { 0 };\n+   = note: you might not need `mut` at all\n+\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:65:5\n+   |\n+65 |     let mut bar = 0;\n+   |     ^\n+   |\n+help: it is more idiomatic to write\n+   |     let <mut> bar = if f() { ..; 42 } else { ..; 0 };\n+   = note: you might not need `mut` at all\n+\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:77:5\n+   |\n+77 |     let quz;\n+   |     ^\n+   |\n+help: it is more idiomatic to write\n+   |     let quz = if f() { 42 } else { 0 };\n+\n+error: `if _ { .. } else { .. }` is an expression\n+   --> $DIR/let_if_seq.rs:111:5\n+    |\n+111 |       let mut baz = 0;\n+    |  _____^ starting here...\n+112 | |\n+113 | |\n+114 | |\n+115 | |     if f() {\n+116 | |         baz = 42;\n+117 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: it is more idiomatic to write\n+    |     let <mut> baz = if f() { 42 } else { 0 };\n+    = note: you might not need `mut` at all\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "de0bb9b3cc1c400b680ebeb482cabd8b2f3dabbf", "filename": "tests/ui/let_return.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,14 +6,14 @@\n \n fn test() -> i32 {\n     let _y = 0; // no warning\n-    let x = 5;   //~NOTE this expression can be directly returned\n-    x            //~ERROR returning the result of a let binding\n+    let x = 5;\n+    x\n }\n \n fn test_inner() -> i32 {\n     if true {\n-        let x = 5;   //~NOTE this expression can be directly returned\n-        x            //~ERROR returning the result of a let binding\n+        let x = 5;\n+        x\n     } else {\n         0\n     }", "previous_filename": "tests/compile-fail/let_return.rs"}, {"sha": "8b5cfa6f31d0e70df6d2337c98566f17bc50e156", "filename": "tests/ui/let_return.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,31 @@\n+error: returning the result of a let binding from a block. Consider returning the expression directly.\n+  --> $DIR/let_return.rs:10:5\n+   |\n+10 |     x\n+   |     ^\n+   |\n+note: lint level defined here\n+  --> $DIR/let_return.rs:5:9\n+   |\n+5  | #![deny(let_and_return)]\n+   |         ^^^^^^^^^^^^^^\n+note: this expression can be directly returned\n+  --> $DIR/let_return.rs:9:13\n+   |\n+9  |     let x = 5;\n+   |             ^\n+\n+error: returning the result of a let binding from a block. Consider returning the expression directly.\n+  --> $DIR/let_return.rs:16:9\n+   |\n+16 |         x\n+   |         ^\n+   |\n+note: this expression can be directly returned\n+  --> $DIR/let_return.rs:15:17\n+   |\n+15 |         let x = 5;\n+   |                 ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fe541f3054c184f2978cf7f311f7a1df0f94853c", "filename": "tests/ui/let_unit.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -11,11 +11,11 @@ macro_rules! let_and_return {\n }\n \n fn main() {\n-    let _x = println!(\"x\");  //~ERROR this let-binding has unit value\n+    let _x = println!(\"x\");\n     let _y = 1;   // this is fine\n     let _z = ((), 1);  // this as well\n     if true {\n-        let _a = ();  //~ERROR this let-binding has unit value\n+        let _a = ();\n     }\n \n     let_and_return!(()) // should be fine", "previous_filename": "tests/compile-fail/let_unit.rs"}, {"sha": "abeeb3b3981b0d04acf99bfb3de4f375616104d0", "filename": "tests/ui/let_unit.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: this let-binding has unit value. Consider omitting `let _x =`\n+  --> $DIR/let_unit.rs:14:5\n+   |\n+14 |     let _x = println!(\"x\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/let_unit.rs:4:9\n+   |\n+4  | #![deny(let_unit_value)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: this let-binding has unit value. Consider omitting `let _a =`\n+  --> $DIR/let_unit.rs:18:9\n+   |\n+18 |         let _a = ();\n+   |         ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ade0deeea2caa5dbbbda4be17e786a55f11ed6db", "filename": "tests/ui/lifetimes.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,10 +5,10 @@\n #![allow(dead_code)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n-//~^ERROR explicit lifetimes given\n+\n \n fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { }\n-//~^ERROR explicit lifetimes given\n+\n \n fn same_lifetime_on_input<'a>(_x: &'a u8, _y: &'a u8) { } // no error, same lifetime on two params\n \n@@ -17,7 +17,7 @@ fn only_static_on_input(_x: &u8, _y: &u8, _z: &'static u8) { } // no error, stat\n fn mut_and_static_input(_x: &mut u8, _y: &'static str) { }\n \n fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x }\n-//~^ERROR explicit lifetimes given\n+\n \n fn multiple_in_and_out_1<'a>(x: &'a u8, _y: &'a u8) -> &'a u8 { x } // no error, multiple input refs\n \n@@ -30,18 +30,18 @@ fn deep_reference_1<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> { Ok(x)\n fn deep_reference_2<'a>(x: Result<&'a u8, &'a u8>) -> &'a u8 { x.unwrap() } // no error, two input refs\n \n fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) }\n-//~^ERROR explicit lifetimes given\n+\n \n // where clause, but without lifetimes\n fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> where T: Copy { Ok(x) }\n-//~^ERROR explicit lifetimes given\n+\n \n type Ref<'r> = &'r u8;\n \n fn lifetime_param_1<'a>(_x: Ref<'a>, _y: &'a u8) { } // no error, same lifetime on two params\n \n fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) { }\n-//~^ERROR explicit lifetimes given\n+\n \n fn lifetime_param_3<'a, 'b: 'a>(_x: Ref<'a>, _y: &'b u8) { } // no error, bounded lifetime\n \n@@ -55,7 +55,7 @@ fn fn_bound<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n     where F: Fn(Lt<'a, I>) -> Lt<'a, I>  // no error, fn bound references 'a\n { unreachable!() }\n \n-fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>  //~ERROR explicit lifetimes given\n+fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n     where for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>\n { unreachable!() }\n \n@@ -65,12 +65,12 @@ struct X {\n \n impl X {\n     fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x }\n-    //~^ERROR explicit lifetimes given\n+\n \n     fn self_and_in_out<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 { &self.x } // no error, multiple input refs\n \n     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { }\n-    //~^ERROR explicit lifetimes given\n+\n \n     fn self_and_same_in<'s>(&'s self, _x: &'s u8) { } // no error, same lifetimes on two params\n }\n@@ -86,7 +86,7 @@ fn already_elided<'a>(_: &u8, _: &'a u8) -> &'a u8 {\n     unimplemented!()\n }\n \n-fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() }\n \n // no warning, two input lifetimes (named on the reference, anonymous on Foo)\n fn struct_with_lt2<'a>(_foo: &'a Foo) -> &'a str { unimplemented!() }\n@@ -106,11 +106,11 @@ fn trait_obj_elided<'a>(_arg: &'a WithLifetime) -> &'a str { unimplemented!() }\n \n // this should warn because there is no lifetime on Drop, so this would be\n // unambiguous if we elided the lifetime\n-fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() }\n \n type FooAlias<'a> = Foo<'a>;\n \n-fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() }\n \n // no warning, two input lifetimes (named on the reference, anonymous on Foo)\n fn alias_with_lt2<'a>(_foo: &'a FooAlias) -> &'a str { unimplemented!() }\n@@ -121,11 +121,11 @@ fn alias_with_lt3<'a>(_foo: &FooAlias<'a> ) -> &'a str { unimplemented!() }\n // no warning, two input lifetimes\n fn alias_with_lt4<'a, 'b>(_foo: &'a FooAlias<'b> ) -> &'a str { unimplemented!() }\n \n-fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() } //~ERROR explicit lifetimes given\n+fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() }\n \n fn elided_input_named_output<'a>(_arg: &str) -> &'a str { unimplemented!() }\n \n-fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() } //~ERROR explicit lifetimes given\n+fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n fn trait_bound<'a, T: WithLifetime<'a>>(_: &'a u8, _: T) { unimplemented!() }\n \n fn main() {", "previous_filename": "tests/compile-fail/lifetimes.rs"}, {"sha": "6d213ad45f243a91d4089253caced6bbcd2dfd6e", "filename": "tests/ui/lifetimes.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,95 @@\n+error: explicit lifetimes given in parameter types where they could be elided\n+ --> $DIR/lifetimes.rs:7:1\n+  |\n+7 | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/lifetimes.rs:4:9\n+  |\n+4 | #![deny(needless_lifetimes, unused_lifetimes)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:10:1\n+   |\n+10 | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:19:1\n+   |\n+19 | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:32:1\n+   |\n+32 | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:36:1\n+   |\n+36 | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> where T: Copy { Ok(x) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:43:1\n+   |\n+43 | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:58:1\n+   |\n+58 |   fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n+   |  _^ starting here...\n+59 | |     where for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>\n+60 | | { unreachable!() }\n+   | |__________________^ ...ending here\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:67:5\n+   |\n+67 |     fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:72:5\n+   |\n+72 |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:89:1\n+   |\n+89 | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:109:1\n+    |\n+109 | fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:113:1\n+    |\n+113 | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:124:1\n+    |\n+124 | fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:128:1\n+    |\n+128 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "5b65a5c3a26da34ea6b564f6a9e15af93d127eea", "filename": "tests/ui/lint_pass.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,7 +10,7 @@ use rustc::lint::{LintPass, LintArray};\n \n declare_lint! { GOOD_LINT, Warn, \"good lint\" }\n declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n-//~^ ERROR: the lint `MISSING_LINT` is not added to any `LintPass`\n+\n \n pub struct Pass;\n ", "previous_filename": "tests/compile-fail/lint_pass.rs"}, {"sha": "2439007feace05950a41d6774566641fc67bc9e8", "filename": "tests/ui/lint_pass.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: the lint `MISSING_LINT` is not added to any `LintPass`\n+  --> $DIR/lint_pass.rs:12:1\n+   |\n+12 | declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_pass.rs:5:9\n+   |\n+5  | #![deny(lint_without_lint_pass)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e4cee81d53f0c2ee890a135df9b3d5f5f22b1637", "filename": "tests/ui/literals.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,38 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(mixed_case_hex_literals)]\n+#![deny(unseparated_literal_suffix)]\n+#![deny(zero_prefixed_literal)]\n+#![allow(dead_code)]\n+\n+fn main() {\n+    let ok1 = 0xABCD;\n+    let ok3 = 0xab_cd;\n+    let ok4 = 0xab_cd_i32;\n+    let ok5 = 0xAB_CD_u32;\n+    let ok5 = 0xAB_CD_isize;\n+    let fail1 = 0xabCD;\n+    let fail2 = 0xabCD_u32;\n+    let fail2 = 0xabCD_isize;\n+\n+    let ok6 = 1234_i32;\n+    let ok7 = 1234_f32;\n+    let ok8 = 1234_isize;\n+    let fail3 = 1234i32;\n+    let fail4 = 1234u32;\n+    let fail5 = 1234isize;\n+    let fail6 = 1234usize;\n+    let fail7 = 1.5f32;\n+\n+    let ok9 = 0;\n+    let ok10 = 0_i64;\n+    let fail8 = 0123;\n+\n+\n+\n+\n+\n+\n+    let ok11 = 0o123;\n+    let ok12 = 0b101010;\n+}"}, {"sha": "b9a0fc041811204ededf3e122720b22ae834b671", "filename": "tests/ui/literals.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,78 @@\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:14:17\n+   |\n+14 |     let fail1 = 0xabCD;\n+   |                 ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:3:9\n+   |\n+3  | #![deny(mixed_case_hex_literals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:15:17\n+   |\n+15 |     let fail2 = 0xabCD_u32;\n+   |                 ^^^^^^^^^^\n+\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:16:17\n+   |\n+16 |     let fail2 = 0xabCD_isize;\n+   |                 ^^^^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:21:17\n+   |\n+21 |     let fail3 = 1234i32;\n+   |                 ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:4:9\n+   |\n+4  | #![deny(unseparated_literal_suffix)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:22:17\n+   |\n+22 |     let fail4 = 1234u32;\n+   |                 ^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:23:17\n+   |\n+23 |     let fail5 = 1234isize;\n+   |                 ^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:24:17\n+   |\n+24 |     let fail6 = 1234usize;\n+   |                 ^^^^^^^^^\n+\n+error: float type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:25:17\n+   |\n+25 |     let fail7 = 1.5f32;\n+   |                 ^^^^^^\n+\n+error: this is a decimal constant\n+  --> $DIR/literals.rs:29:17\n+   |\n+29 |     let fail8 = 0123;\n+   |                 ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:5:9\n+   |\n+5  | #![deny(zero_prefixed_literal)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+help: if you mean to use a decimal constant, remove the `0` to remove confusion:\n+   |     let fail8 = 123;\n+help: if you mean to use an octal constant, use `0o`:\n+   |     let fail8 = 0o123;\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "f62d73532dd13a8fec8298ef797d8903690a911a", "filename": "tests/ui/map_clone.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -9,30 +9,30 @@ use std::ops::Deref;\n \n fn map_clone_iter() {\n     let x = [1,2,3];\n-    x.iter().map(|y| y.clone()); //~ ERROR you seem to be using .map()\n-                                 //~^ HELP try\n-    x.iter().map(|&y| y); //~ ERROR you seem to be using .map()\n-                          //~^ HELP try\n-    x.iter().map(|y| *y); //~ ERROR you seem to be using .map()\n-                          //~^ HELP try\n-    x.iter().map(|y| { y.clone() }); //~ ERROR you seem to be using .map()\n-                                 //~^ HELP try\n-    x.iter().map(|&y| { y }); //~ ERROR you seem to be using .map()\n-                          //~^ HELP try\n-    x.iter().map(|y| { *y }); //~ ERROR you seem to be using .map()\n-                          //~^ HELP try\n-    x.iter().map(Clone::clone); //~ ERROR you seem to be using .map()\n-                                //~^ HELP try\n+    x.iter().map(|y| y.clone());\n+\n+    x.iter().map(|&y| y);\n+\n+    x.iter().map(|y| *y);\n+\n+    x.iter().map(|y| { y.clone() });\n+\n+    x.iter().map(|&y| { y });\n+\n+    x.iter().map(|y| { *y });\n+\n+    x.iter().map(Clone::clone);\n+\n }\n \n fn map_clone_option() {\n     let x = Some(4);\n-    x.as_ref().map(|y| y.clone()); //~ ERROR you seem to be using .map()\n-                                   //~^ HELP try\n-    x.as_ref().map(|&y| y); //~ ERROR you seem to be using .map()\n-                            //~^ HELP try\n-    x.as_ref().map(|y| *y); //~ ERROR you seem to be using .map()\n-                            //~^ HELP try\n+    x.as_ref().map(|y| y.clone());\n+\n+    x.as_ref().map(|&y| y);\n+\n+    x.as_ref().map(|y| *y);\n+\n }\n \n fn not_linted_option() {\n@@ -87,8 +87,8 @@ impl Deref for UnusualDeref {\n \n fn map_clone_deref() {\n     let x = Some(UnusualDeref);\n-    let _: Option<UnusualDeref> = x.as_ref().map(|y| *y); //~ ERROR you seem to be using .map()\n-                                                          //~^ HELP try\n+    let _: Option<UnusualDeref> = x.as_ref().map(|y| *y);\n+\n \n     // Not linted: using deref conversion\n     let _: Option<i32> = x.map(|y| *y);", "previous_filename": "tests/compile-fail/map_clone.rs"}, {"sha": "0a8a659d720611064917072b78f0174174ad337c", "filename": "tests/ui/map_clone.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,106 @@\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:12:5\n+   |\n+12 |     x.iter().map(|y| y.clone());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/map_clone.rs:4:9\n+   |\n+4  | #![deny(map_clone)]\n+   |         ^^^^^^^^^\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:14:5\n+   |\n+14 |     x.iter().map(|&y| y);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:16:5\n+   |\n+16 |     x.iter().map(|y| *y);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:18:5\n+   |\n+18 |     x.iter().map(|y| { y.clone() });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:20:5\n+   |\n+20 |     x.iter().map(|&y| { y });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:22:5\n+   |\n+22 |     x.iter().map(|y| { *y });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:24:5\n+   |\n+24 |     x.iter().map(Clone::clone);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:30:5\n+   |\n+30 |     x.as_ref().map(|y| y.clone());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:32:5\n+   |\n+32 |     x.as_ref().map(|&y| y);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:34:5\n+   |\n+34 |     x.as_ref().map(|y| *y);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:90:35\n+   |\n+90 |     let _: Option<UnusualDeref> = x.as_ref().map(|y| *y);\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "00faed26818ae62760a7a829ceee5fb6fe95d324", "filename": "tests/ui/matches.rs", "status": "renamed", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -24,9 +24,9 @@ fn dummy() {\n \n fn unwrap_addr() -> Option<&'static ExprNode> {\n     match ExprNode::Butterflies {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }\n+\n+\n+\n         ExprNode::ExprAddrOf => Some(&NODE),\n         _ => { let x = 5; None },\n     }\n@@ -36,18 +36,18 @@ fn single_match(){\n     let x = Some(1u8);\n \n     match x {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let Some(y) = x { println!(\"{:?}\", y); };\n+\n+\n+\n         Some(y) => { println!(\"{:?}\", y); }\n         _ => ()\n     };\n \n     let z = (1u8,1u8);\n     match z {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let (2...3, 7...9) = z { dummy() };\n+\n+\n+\n         (2...3, 7...9) => dummy(),\n         _ => {}\n     };\n@@ -70,27 +70,27 @@ fn single_match_know_enum() {\n     let y : Result<_, i8> = Ok(1i8);\n \n     match x {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let Some(y) = x { dummy() };\n+\n+\n+\n         Some(y) => dummy(),\n         None => ()\n     };\n \n     match y {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let Ok(y) = y { dummy() };\n+\n+\n+\n         Ok(y) => dummy(),\n         Err(..) => ()\n     };\n \n     let c = Cow::Borrowed(\"\");\n \n     match c {\n-        //~^ ERROR you seem to be trying to use match\n-        //~| HELP try\n-        //~| SUGGESTION if let Cow::Borrowed(..) = c { dummy() };\n+\n+\n+\n         Cow::Borrowed(..) => dummy(),\n         Cow::Owned(..) => (),\n     };\n@@ -112,51 +112,51 @@ fn match_bool() {\n     let test: bool = true;\n \n     match test {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if test { 0 } else { 42 };\n+\n+\n+\n         true => 0,\n         false => 42,\n     };\n \n     let option = 1;\n     match option == 1 {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if option == 1 { 1 } else { 0 };\n+\n+\n+\n         true => 1,\n         false => 0,\n     };\n \n     match test {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n+\n+\n+\n         true => (),\n         false => { println!(\"Noooo!\"); }\n     };\n \n     match test {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n+\n+\n+\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n \n     match test && test {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if !(test && test) { println!(\"Noooo!\"); };\n-    //~| ERROR equal expressions as operands\n+\n+\n+\n+\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n \n     match test {\n-    //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP consider\n-    //~| SUGGESTION if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n+\n+\n+\n         false => { println!(\"Noooo!\"); }\n         true => { println!(\"Yes!\"); }\n     };\n@@ -173,9 +173,9 @@ fn ref_pats() {\n     {\n         let v = &Some(0);\n         match v {\n-            //~^ERROR add `&` to all patterns\n-            //~|HELP instead of\n-            //~|SUGGESTION match *v { .. }\n+\n+\n+\n             &Some(v) => println!(\"{:?}\", v),\n             &None => println!(\"none\"),\n         }\n@@ -186,18 +186,18 @@ fn ref_pats() {\n     }\n     let tup =& (1, 2);\n     match tup {\n-        //~^ERROR add `&` to all patterns\n-        //~|HELP instead of\n-        //~|SUGGESTION match *tup { .. }\n+\n+\n+\n         &(v, 1) => println!(\"{}\", v),\n         _ => println!(\"none\"),\n     }\n     // special case: using & both in expr and pats\n     let w = Some(0);\n     match &w {\n-        //~^ERROR add `&` to both\n-        //~|HELP try\n-        //~|SUGGESTION match w { .. }\n+\n+\n+\n         &Some(v) => println!(\"{:?}\", v),\n         &None => println!(\"none\"),\n     }\n@@ -209,17 +209,17 @@ fn ref_pats() {\n \n     let a = &Some(0);\n     if let &None = a {\n-        //~^ERROR add `&` to all patterns\n-        //~|HELP instead of\n-        //~|SUGGESTION if let .. = *a { .. }\n+\n+\n+\n         println!(\"none\");\n     }\n \n     let b = Some(0);\n     if let &None = &b {\n-        //~^ERROR add `&` to both\n-        //~|HELP try\n-        //~|SUGGESTION if let .. = b { .. }\n+\n+\n+\n         println!(\"none\");\n     }\n }\n@@ -228,27 +228,27 @@ fn overlapping() {\n     const FOO : u64 = 2;\n \n     match 42 {\n-        0 ... 10 => println!(\"0 ... 10\"), //~ERROR: some ranges overlap\n-        0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+        0 ... 10 => println!(\"0 ... 10\"),\n+        0 ... 11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n \n     match 42 {\n-        0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n+        0 ... 5 => println!(\"0 ... 5\"),\n         6 ... 7 => println!(\"6 ... 7\"),\n-        FOO ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+        FOO ... 11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n \n     match 42 {\n-        2 => println!(\"2\"), //~NOTE overlaps with this\n-        0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n+        2 => println!(\"2\"),\n+        0 ... 5 => println!(\"0 ... 5\"),\n         _ => (),\n     }\n \n     match 42 {\n-        2 => println!(\"2\"), //~NOTE overlaps with this\n-        0 ... 2 => println!(\"0 ... 2\"), //~ERROR: some ranges overlap\n+        2 => println!(\"2\"),\n+        0 ... 2 => println!(\"0 ... 2\"),\n         _ => (),\n     }\n \n@@ -271,8 +271,8 @@ fn overlapping() {\n     }\n \n     match 42 {\n-        0 .. 11 => println!(\"0 .. 11\"), //~ERROR: some ranges overlap\n-        0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+        0 .. 11 => println!(\"0 .. 11\"),\n+        0 ... 11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n ", "previous_filename": "tests/compile-fail/matches.rs"}, {"sha": "bc254cb0bcb3dd06adafa0230ab4481bfe2d20e7", "filename": "tests/ui/matches.stderr", "status": "added", "additions": 392, "deletions": 0, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,392 @@\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:26:5\n+   |\n+26 |       match ExprNode::Butterflies {\n+   |  _____^ starting here...\n+27 | |\n+28 | |\n+29 | |\n+30 | |         ExprNode::ExprAddrOf => Some(&NODE),\n+31 | |         _ => { let x = 5; None },\n+32 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/matches.rs:7:9\n+   |\n+7  | #![deny(single_match_else)]\n+   |         ^^^^^^^^^^^^^^^^^\n+help: try this\n+   |     if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:38:5\n+   |\n+38 |       match x {\n+   |  _____^ starting here...\n+39 | |\n+40 | |\n+41 | |\n+42 | |         Some(y) => { println!(\"{:?}\", y); }\n+43 | |         _ => ()\n+44 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/matches.rs:5:9\n+   |\n+5  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try this\n+   |     if let Some(y) = x { println!(\"{:?}\", y); };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:47:5\n+   |\n+47 |       match z {\n+   |  _____^ starting here...\n+48 | |\n+49 | |\n+50 | |\n+51 | |         (2...3, 7...9) => dummy(),\n+52 | |         _ => {}\n+53 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let (2...3, 7...9) = z { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:72:5\n+   |\n+72 |       match x {\n+   |  _____^ starting here...\n+73 | |\n+74 | |\n+75 | |\n+76 | |         Some(y) => dummy(),\n+77 | |         None => ()\n+78 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Some(y) = x { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:80:5\n+   |\n+80 |       match y {\n+   |  _____^ starting here...\n+81 | |\n+82 | |\n+83 | |\n+84 | |         Ok(y) => dummy(),\n+85 | |         Err(..) => ()\n+86 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Ok(y) = y { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:90:5\n+   |\n+90 |       match c {\n+   |  _____^ starting here...\n+91 | |\n+92 | |\n+93 | |\n+94 | |         Cow::Borrowed(..) => dummy(),\n+95 | |         Cow::Owned(..) => (),\n+96 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Cow::Borrowed(..) = c { dummy() };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:114:5\n+    |\n+114 |       match test {\n+    |  _____^ starting here...\n+115 | |\n+116 | |\n+117 | |\n+118 | |         true => 0,\n+119 | |         false => 42,\n+120 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+help: consider using an if/else expression\n+    |     if test { 0 } else { 42 };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:123:5\n+    |\n+123 |       match option == 1 {\n+    |  _____^ starting here...\n+124 | |\n+125 | |\n+126 | |\n+127 | |         true => 1,\n+128 | |         false => 0,\n+129 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if option == 1 { 1 } else { 0 };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:131:5\n+    |\n+131 |       match test {\n+    |  _____^ starting here...\n+132 | |\n+133 | |\n+134 | |\n+135 | |         true => (),\n+136 | |         false => { println!(\"Noooo!\"); }\n+137 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !test { println!(\"Noooo!\"); };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:139:5\n+    |\n+139 |       match test {\n+    |  _____^ starting here...\n+140 | |\n+141 | |\n+142 | |\n+143 | |         false => { println!(\"Noooo!\"); }\n+144 | |         _ => (),\n+145 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !test { println!(\"Noooo!\"); };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:147:5\n+    |\n+147 |       match test && test {\n+    |  _____^ starting here...\n+148 | |\n+149 | |\n+150 | |\n+151 | |\n+152 | |         false => { println!(\"Noooo!\"); }\n+153 | |         _ => (),\n+154 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !(test && test) { println!(\"Noooo!\"); };\n+\n+error: equal expressions as operands to `&&`\n+   --> $DIR/matches.rs:147:11\n+    |\n+147 |     match test && test {\n+    |           ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(eq_op)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:156:5\n+    |\n+156 |       match test {\n+    |  _____^ starting here...\n+157 | |\n+158 | |\n+159 | |\n+160 | |         false => { println!(\"Noooo!\"); }\n+161 | |         true => { println!(\"Yes!\"); }\n+162 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:175:9\n+    |\n+175 |           match v {\n+    |  _________^ starting here...\n+176 | |\n+177 | |\n+178 | |\n+179 | |             &Some(v) => println!(\"{:?}\", v),\n+180 | |             &None => println!(\"none\"),\n+181 | |         }\n+    | |_________^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |         match *v { .. }\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:188:5\n+    |\n+188 |       match tup {\n+    |  _____^ starting here...\n+189 | |\n+190 | |\n+191 | |\n+192 | |         &(v, 1) => println!(\"{}\", v),\n+193 | |         _ => println!(\"none\"),\n+194 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |     match *tup { .. }\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+   --> $DIR/matches.rs:197:5\n+    |\n+197 |       match &w {\n+    |  _____^ starting here...\n+198 | |\n+199 | |\n+200 | |\n+201 | |         &Some(v) => println!(\"{:?}\", v),\n+202 | |         &None => println!(\"none\"),\n+203 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: try\n+    |     match w { .. }\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:211:5\n+    |\n+211 |       if let &None = a {\n+    |  _____^ starting here...\n+212 | |\n+213 | |\n+214 | |\n+215 | |         println!(\"none\");\n+216 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |     if let .. = *a { .. }\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+   --> $DIR/matches.rs:219:5\n+    |\n+219 |       if let &None = &b {\n+    |  _____^ starting here...\n+220 | |\n+221 | |\n+222 | |\n+223 | |         println!(\"none\");\n+224 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: try\n+    |     if let .. = b { .. }\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:231:9\n+    |\n+231 |         0 ... 10 => println!(\"0 ... 10\"),\n+    |         ^^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+note: overlaps with this\n+   --> $DIR/matches.rs:232:9\n+    |\n+232 |         0 ... 11 => println!(\"0 ... 11\"),\n+    |         ^^^^^^^^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:237:9\n+    |\n+237 |         0 ... 5 => println!(\"0 ... 5\"),\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:239:9\n+    |\n+239 |         FOO ... 11 => println!(\"0 ... 11\"),\n+    |         ^^^^^^^^^^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:245:9\n+    |\n+245 |         0 ... 5 => println!(\"0 ... 5\"),\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:244:9\n+    |\n+244 |         2 => println!(\"2\"),\n+    |         ^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:251:9\n+    |\n+251 |         0 ... 2 => println!(\"0 ... 2\"),\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:250:9\n+    |\n+250 |         2 => println!(\"2\"),\n+    |         ^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:274:9\n+    |\n+274 |         0 .. 11 => println!(\"0 .. 11\"),\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:275:9\n+    |\n+275 |         0 ... 11 => println!(\"0 ... 11\"),\n+    |         ^^^^^^^^\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "9832bd992c1c11bf5651726c48d25b9a820cf1d4", "filename": "tests/ui/mem_forget.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -14,15 +14,15 @@ fn main() {\n \n     let six: Arc<i32> = Arc::new(6);\n     memstuff::forget(six);\n-    //~^ ERROR usage of mem::forget on Drop type\n+\n \n     let seven: Rc<i32> = Rc::new(7);\n     std::mem::forget(seven);\n-    //~^ ERROR usage of mem::forget on Drop type\n+\n \n     let eight: Vec<i32> = vec![8];\n     forgetSomething(eight);\n-    //~^ ERROR usage of mem::forget on Drop type\n+\n \n     std::mem::forget(7);\n }", "previous_filename": "tests/compile-fail/mem_forget.rs"}, {"sha": "47c61adfbbf88a4833013d67bc6df60bf170aa87", "filename": "tests/ui/mem_forget.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:16:5\n+   |\n+16 |     memstuff::forget(six);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mem_forget.rs:10:8\n+   |\n+10 | #[deny(mem_forget)]\n+   |        ^^^^^^^^^^\n+\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:20:5\n+   |\n+20 |     std::mem::forget(seven);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:24:5\n+   |\n+24 |     forgetSomething(eight);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "da37ac8f566af7d18c0b773d6292e95143a95657", "filename": "tests/ui/methods.rs", "status": "added", "additions": 691, "deletions": 0, "changes": 691, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,691 @@\n+#![feature(plugin)]\n+#![feature(const_fn)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy, clippy_pedantic)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+use std::ops::Mul;\n+use std::iter::FromIterator;\n+\n+struct T;\n+\n+impl T {\n+    fn add(self, other: T) -> T { self }\n+    fn drop(&mut self) { }\n+\n+    fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+    fn div(self) -> T { self } // no error, different #arguments\n+    fn rem(self, other: T) { } // no error, wrong return type\n+\n+    fn into_u32(self) -> u32 { 0 } // fine\n+    fn into_u16(&self) -> u16 { 0 }\n+\n+    fn to_something(self) -> u32 { 0 }\n+\n+    fn new(self) {}\n+\n+\n+}\n+\n+struct Lt<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    #[allow(needless_lifetimes)]\n+    pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n+}\n+\n+struct Lt2<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt2<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    pub fn new(s: &str) -> Lt2 { unimplemented!() }\n+}\n+\n+struct Lt3<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt3<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    pub fn new() -> Lt3<'static> { unimplemented!() }\n+}\n+\n+#[derive(Clone,Copy)]\n+struct U;\n+\n+impl U {\n+    fn new() -> Self { U }\n+    fn to_something(self) -> u32 { 0 } // ok because U is Copy\n+}\n+\n+struct V<T> {\n+    _dummy: T\n+}\n+\n+impl<T> V<T> {\n+    fn new() -> Option<V<T>> { None }\n+}\n+\n+impl Mul<T> for T {\n+    type Output = T;\n+    fn mul(self, other: T) -> T { self } // no error, obviously\n+}\n+\n+/// Utility macro to test linting behavior in `option_methods()`\n+/// The lints included in `option_methods()` should not lint if the call to map is partially\n+/// within a macro\n+macro_rules! opt_map {\n+    ($opt:expr, $map:expr) => {($opt).map($map)};\n+}\n+\n+/// Checks implementation of the following lints:\n+/// * `OPTION_MAP_UNWRAP_OR`\n+/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n+fn option_methods() {\n+    let opt = Some(1);\n+\n+    // Check OPTION_MAP_UNWRAP_OR\n+    // single line case\n+    let _ = opt.map(|x| x + 1)\n+\n+               .unwrap_or(0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = opt.map(|x| {\n+                        x + 1\n+                    }\n+              ).unwrap_or(0);\n+    let _ = opt.map(|x| x + 1)\n+               .unwrap_or({\n+                    0\n+                });\n+    // macro case\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or(0); // should not lint\n+\n+    // Check OPTION_MAP_UNWRAP_OR_ELSE\n+    // single line case\n+    let _ = opt.map(|x| x + 1)\n+\n+               .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = opt.map(|x| {\n+                        x + 1\n+                    }\n+              ).unwrap_or_else(|| 0);\n+    let _ = opt.map(|x| x + 1)\n+               .unwrap_or_else(||\n+                    0\n+                );\n+    // macro case\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n+}\n+\n+/// Struct to generate false positives for things with .iter()\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+/// Struct to generate false positive for Iterator-based lints\n+#[derive(Copy, Clone)]\n+struct IteratorFalsePositives {\n+    foo: u32,\n+}\n+\n+impl IteratorFalsePositives {\n+    fn filter(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn next(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn find(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn position(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn rposition(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn nth(self, n: usize) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn skip(self, _: usize) -> IteratorFalsePositives {\n+        self\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n+/// Checks implementation of `FILTER_NEXT` lint\n+fn filter_next() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check single-line case\n+    let _ = v.iter().filter(|&x| *x < 0).next();\n+\n+\n+\n+    // check multi-line case\n+    let _ = v.iter().filter(|&x| {\n+                                *x < 0\n+                            }\n+                   ).next();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.filter().next();\n+}\n+\n+/// Checks implementation of `SEARCH_IS_SOME` lint\n+fn search_is_some() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check `find().is_some()`, single-line\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+\n+\n+\n+    // check `find().is_some()`, multi-line\n+    let _ = v.iter().find(|&x| {\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // check `position().is_some()`, single-line\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+\n+\n+\n+    // check `position().is_some()`, multi-line\n+    let _ = v.iter().position(|&x| {\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // check `rposition().is_some()`, single-line\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+\n+\n+\n+    // check `rposition().is_some()`, multi-line\n+    let _ = v.iter().rposition(|&x| {\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.find().is_some();\n+    let _ = foo.position().is_some();\n+    let _ = foo.rposition().is_some();\n+}\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo { Foo }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    const fn make_const(i: i32) -> i32 { i }\n+\n+    fn make<T>() -> T { unimplemented!(); }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(1);\n+    with_const_fn.unwrap_or(make_const(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or(make());\n+\n+\n+\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or(Vec::new());\n+\n+\n+\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or(Vec::with_capacity(12));\n+\n+\n+\n+\n+    let with_err : Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or(make());\n+\n+\n+\n+\n+    let with_err_args : Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or(Vec::with_capacity(12));\n+\n+\n+\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or(Default::default());\n+\n+\n+\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or(u64::default());\n+\n+\n+\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or(vec![]);\n+\n+\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or(Foo::new());\n+\n+\n+\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+\n+\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n+\n+\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+\n+\n+\n+}\n+\n+/// Checks implementation of `ITER_NTH` lint\n+fn iter_nth() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types\n+        let bad_vec = some_vec.iter().nth(3);\n+\n+        let bad_slice = &some_vec[..].iter().nth(3);\n+\n+        let bad_boxed_slice = boxed_slice.iter().nth(3);\n+\n+        let bad_vec_deque = some_vec_deque.iter().nth(3);\n+\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types\n+        let bad_vec = some_vec.iter_mut().nth(3);\n+\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().nth(3);\n+\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+\n+    }\n+\n+    // Make sure we don't lint for non-relevant types\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    let ok_mut = false_positive.iter_mut().nth(3);\n+}\n+\n+/// Checks implementation of `ITER_SKIP_NEXT` lint\n+fn iter_skip_next() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+\n+    let _ = some_vec.iter().skip(42).next();\n+\n+\n+    let _ = some_vec.iter().cycle().skip(42).next();\n+\n+\n+    let _ = (1..10).skip(10).next();\n+\n+\n+    let _ = &some_vec[..].iter().skip(3).next();\n+\n+\n+    let foo = IteratorFalsePositives { foo : 0 };\n+    let _ = foo.skip(42).next();\n+    let _ = foo.filter().skip(42).next();\n+}\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+/// Checks implementation of `GET_UNWRAP` lint\n+fn get_unwrap() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+\n+\n+\n+        let _ = some_slice.get(0).unwrap();\n+\n+\n+\n+        let _ = some_vec.get(0).unwrap();\n+\n+\n+\n+        let _ = some_vecdeque.get(0).unwrap();\n+\n+\n+\n+        let _ = some_hashmap.get(&1).unwrap();\n+\n+\n+\n+        let _ = some_btreemap.get(&1).unwrap();\n+\n+\n+\n+\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+\n+\n+\n+        *some_slice.get_mut(0).unwrap() = 1;\n+\n+\n+\n+        *some_vec.get_mut(0).unwrap() = 1;\n+\n+\n+\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+\n+\n+\n+\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}\n+\n+\n+#[allow(similar_names)]\n+fn main() {\n+    use std::io;\n+\n+    let opt = Some(0);\n+    let _ = opt.unwrap();\n+\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();\n+\n+    res.ok().expect(\"disaster!\");\n+    // the following should not warn, since `expect` isn't implemented unless\n+    // the error type implements `Debug`\n+    let res2: Result<i32, MyError> = Ok(0);\n+    res2.ok().expect(\"oh noes!\");\n+    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n+    res3.ok().expect(\"whoof\");\n+    let res4: Result<u32, io::Error> = Ok(0);\n+    res4.ok().expect(\"argh\");\n+    let res5: io::Result<u32> = Ok(0);\n+    res5.ok().expect(\"oops\");\n+    let res6: Result<u32, &str> = Ok(0);\n+    res6.ok().expect(\"meh\");\n+}\n+\n+struct MyError(()); // doesn't implement Debug\n+\n+#[derive(Debug)]\n+struct MyErrorWithParam<T> {\n+    x: T\n+}\n+\n+#[allow(unnecessary_operation)]\n+fn starts_with() {\n+    \"\".chars().next() == Some(' ');\n+\n+\n+\n+\n+    Some(' ') != \"\".chars().next();\n+\n+\n+\n+}\n+\n+fn str_extend_chars() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.extend(abc.chars());\n+\n+\n+\n+\n+    s.push_str(\"abc\");\n+    s.extend(\"abc\".chars());\n+\n+\n+\n+\n+    s.push_str(&def);\n+    s.extend(def.chars());\n+\n+\n+\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}\n+\n+fn clone_on_copy() {\n+    42.clone();\n+\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone();\n+\n+\n+}\n+\n+fn clone_on_copy_generic<T: Copy>(t: T) {\n+    t.clone();\n+\n+\n+    Some(t).clone();\n+\n+\n+}\n+\n+fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone();\n+\n+\n+    println!(\"{:p} {:p}\",*y, z);\n+}\n+\n+fn single_char_pattern() {\n+    let x = \"foo\";\n+    x.split(\"x\");\n+\n+\n+\n+\n+    x.split(\"xx\");\n+\n+    x.split('x');\n+\n+    let y = \"x\";\n+    x.split(y);\n+\n+    // Not yet testing for multi-byte characters\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n+    // should have done this but produced an ICE\n+    //\n+    // We may not want to suggest changing these anyway\n+    // See: https://github.com/Manishearth/rust-clippy/issues/650#issuecomment-184328984\n+    x.split(\"\u00df\");\n+    x.split(\"\u211d\");\n+    x.split(\"\ud83d\udca3\");\n+    // Can't use this lint for unicode code points which don't fit in a char\n+    x.split(\"\u2764\ufe0f\");\n+\n+    x.contains(\"x\");\n+\n+\n+\n+    x.starts_with(\"x\");\n+\n+\n+\n+    x.ends_with(\"x\");\n+\n+\n+\n+    x.find(\"x\");\n+\n+\n+\n+    x.rfind(\"x\");\n+\n+\n+\n+    x.rsplit(\"x\");\n+\n+\n+\n+    x.split_terminator(\"x\");\n+\n+\n+\n+    x.rsplit_terminator(\"x\");\n+\n+\n+\n+    x.splitn(0, \"x\");\n+\n+\n+\n+    x.rsplitn(0, \"x\");\n+\n+\n+\n+    x.matches(\"x\");\n+\n+\n+\n+    x.rmatches(\"x\");\n+\n+\n+\n+    x.match_indices(\"x\");\n+\n+\n+\n+    x.rmatch_indices(\"x\");\n+\n+\n+\n+    x.trim_left_matches(\"x\");\n+\n+\n+\n+    x.trim_right_matches(\"x\");\n+\n+\n+\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n+}\n+\n+#[allow(result_unwrap_used)]\n+fn temporary_cstring() {\n+    use std::ffi::CString;\n+\n+    CString::new(\"foo\").unwrap().as_ptr();\n+\n+\n+\n+}"}, {"sha": "f4294d8b396b69bf237c87917a695606ba9f819e", "filename": "tests/ui/methods.stderr", "status": "added", "additions": 954, "deletions": 0, "changes": 954, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,954 @@\n+error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n+  --> $DIR/methods.rs:18:5\n+   |\n+18 |     fn add(self, other: T) -> T { self }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(should_implement_trait)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name\n+  --> $DIR/methods.rs:19:5\n+   |\n+19 |     fn drop(&mut self) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(should_implement_trait)] implied by #[deny(clippy)]\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:26:17\n+   |\n+26 |     fn into_u16(&self) -> u16 { 0 }\n+   |                 ^^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:28:21\n+   |\n+28 |     fn to_something(self) -> u32 { 0 }\n+   |                     ^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+\n+error: methods called `new` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:30:12\n+   |\n+30 |     fn new(self) {}\n+   |            ^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/methods.rs:30:5\n+   |\n+30 |     fn new(self) {}\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(new_ret_no_self)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:99:13\n+    |\n+99  |       let _ = opt.map(|x| x + 1)\n+    |  _____________^ starting here...\n+100 | |\n+101 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+    | |____________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:103:13\n+    |\n+103 |       let _ = opt.map(|x| {\n+    |  _____________^ starting here...\n+104 | |                         x + 1\n+105 | |                     }\n+106 | |               ).unwrap_or(0);\n+    | |____________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:107:13\n+    |\n+107 |       let _ = opt.map(|x| x + 1)\n+    |  _____________^ starting here...\n+108 | |                .unwrap_or({\n+109 | |                     0\n+110 | |                 });\n+    | |__________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:116:13\n+    |\n+116 |       let _ = opt.map(|x| x + 1)\n+    |  _____________^ starting here...\n+117 | |\n+118 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+    | |____________________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `with map_or_else(|| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:120:13\n+    |\n+120 |       let _ = opt.map(|x| {\n+    |  _____________^ starting here...\n+121 | |                         x + 1\n+122 | |                     }\n+123 | |               ).unwrap_or_else(|| 0);\n+    | |____________________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:124:13\n+    |\n+124 |       let _ = opt.map(|x| x + 1)\n+    |  _____________^ starting here...\n+125 | |                .unwrap_or_else(||\n+126 | |                     0\n+127 | |                 );\n+    | |_________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+   --> $DIR/methods.rs:196:13\n+    |\n+196 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(filter_next)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n+\n+error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+   --> $DIR/methods.rs:201:13\n+    |\n+201 |       let _ = v.iter().filter(|&x| {\n+    |  _____________^ starting here...\n+202 | |                                 *x < 0\n+203 | |                             }\n+204 | |                    ).next();\n+    | |___________________________^ ...ending here\n+    |\n+    = note: #[deny(filter_next)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:216:13\n+    |\n+216 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:221:13\n+    |\n+221 |       let _ = v.iter().find(|&x| {\n+    |  _____________^ starting here...\n+222 | |                               *x < 0\n+223 | |                           }\n+224 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:227:13\n+    |\n+227 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:232:13\n+    |\n+232 |       let _ = v.iter().position(|&x| {\n+    |  _____________^ starting here...\n+233 | |                                   x < 0\n+234 | |                               }\n+235 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:238:13\n+    |\n+238 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:243:13\n+    |\n+243 |       let _ = v.iter().rposition(|&x| {\n+    |  _____________^ starting here...\n+244 | |                                    x < 0\n+245 | |                                }\n+246 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:278:5\n+    |\n+278 |     with_constructor.unwrap_or(make());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |     with_constructor.unwrap_or_else(make);\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+   --> $DIR/methods.rs:284:5\n+    |\n+284 |     with_new.unwrap_or(Vec::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_new.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:290:5\n+    |\n+290 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:296:5\n+    |\n+296 |     with_err.unwrap_or(make());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_err.unwrap_or_else(|_| make());\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:302:5\n+    |\n+302 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:308:5\n+    |\n+308 |     with_default_trait.unwrap_or(Default::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_default_trait.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:314:5\n+    |\n+314 |     with_default_type.unwrap_or(u64::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_default_type.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:320:5\n+    |\n+320 |     with_vec.unwrap_or(vec![]);\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ));\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:326:5\n+    |\n+326 |     without_default.unwrap_or(Foo::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     without_default.unwrap_or_else(Foo::new);\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:332:5\n+    |\n+332 |     map.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     map.entry(42).or_insert_with(String::new);\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:338:5\n+    |\n+338 |     btree.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     btree.entry(42).or_insert_with(String::new);\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:344:13\n+    |\n+344 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+\n+error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:358:23\n+    |\n+358 |         let bad_vec = some_vec.iter().nth(3);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:360:26\n+    |\n+360 |         let bad_slice = &some_vec[..].iter().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:362:31\n+    |\n+362 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:364:29\n+    |\n+364 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:370:23\n+    |\n+370 |         let bad_vec = some_vec.iter_mut().nth(3);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:374:26\n+    |\n+374 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:378:29\n+    |\n+378 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:392:13\n+    |\n+392 |     let _ = some_vec.iter().skip(42).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:395:13\n+    |\n+395 |     let _ = some_vec.iter().cycle().skip(42).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:398:13\n+    |\n+398 |     let _ = (1..10).skip(10).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:401:14\n+    |\n+401 |     let _ = &some_vec[..].iter().skip(3).next();\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:429:17\n+    |\n+429 |         let _ = boxed_slice.get(1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |         let _ = &boxed_slice[1];\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:433:17\n+    |\n+433 |         let _ = some_slice.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_slice[0];\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:437:17\n+    |\n+437 |         let _ = some_vec.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_vec[0];\n+\n+error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:441:17\n+    |\n+441 |         let _ = some_vecdeque.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_vecdeque[0];\n+\n+error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:445:17\n+    |\n+445 |         let _ = some_hashmap.get(&1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_hashmap[&1];\n+\n+error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:449:17\n+    |\n+449 |         let _ = some_btreemap.get(&1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_btreemap[&1];\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:458:10\n+    |\n+458 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut boxed_slice[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:462:10\n+    |\n+462 |         *some_slice.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_slice[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:466:10\n+    |\n+466 |         *some_vec.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_vec[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:470:10\n+    |\n+470 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_vecdeque[0] = 1;\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:488:13\n+    |\n+488 |     let _ = opt.unwrap();\n+    |             ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(option_unwrap_used)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+\n+error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:491:13\n+    |\n+491 |     let _ = res.unwrap();\n+    |             ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(result_unwrap_used)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:493:5\n+    |\n+493 |     res.ok().expect(\"disaster!\");\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:499:5\n+    |\n+499 |     res3.ok().expect(\"whoof\");\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:501:5\n+    |\n+501 |     res4.ok().expect(\"argh\");\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:503:5\n+    |\n+503 |     res5.ok().expect(\"oops\");\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:505:5\n+    |\n+505 |     res6.ok().expect(\"meh\");\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:517:5\n+    |\n+517 |     \"\".chars().next() == Some(' ');\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: like this\n+    |     \"\".starts_with(' ');\n+\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:522:5\n+    |\n+522 |     Some(' ') != \"\".chars().next();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n+help: like this\n+    |     !\"\".starts_with(' ');\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:534:5\n+    |\n+534 |     s.extend(abc.chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |     s.push_str(abc);\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:540:5\n+    |\n+540 |     s.extend(\"abc\".chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+help: try this\n+    |     s.push_str(\"abc\");\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:546:5\n+    |\n+546 |     s.extend(def.chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+help: try this\n+    |     s.push_str(&def);\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:560:5\n+    |\n+560 |     42.clone();\n+    |     ^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try removing the `clone` call\n+    |     42;\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:565:5\n+    |\n+565 |     (&42).clone();\n+    |     ^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try dereferencing it\n+    |     *(&42);\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:571:5\n+    |\n+571 |     t.clone();\n+    |     ^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try removing the `clone` call\n+    |     t;\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:574:5\n+    |\n+574 |     Some(t).clone();\n+    |     ^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try removing the `clone` call\n+    |     Some(t);\n+\n+error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n+   --> $DIR/methods.rs:582:22\n+    |\n+582 |     let z: &Vec<_> = y.clone();\n+    |                      ^^^^^^^^^\n+    |\n+    = note: #[deny(clone_double_ref)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try dereferencing it\n+    |     let z: &Vec<_> = (*y).clone();\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:590:13\n+    |\n+590 |     x.split(\"x\");\n+    |             ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try using a char instead:\n+    |     x.split('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:614:16\n+    |\n+614 |     x.contains(\"x\");\n+    |                ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.contains('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:618:19\n+    |\n+618 |     x.starts_with(\"x\");\n+    |                   ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.starts_with('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:622:17\n+    |\n+622 |     x.ends_with(\"x\");\n+    |                 ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.ends_with('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:626:12\n+    |\n+626 |     x.find(\"x\");\n+    |            ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.find('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:630:13\n+    |\n+630 |     x.rfind(\"x\");\n+    |             ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rfind('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:634:14\n+    |\n+634 |     x.rsplit(\"x\");\n+    |              ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplit('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:638:24\n+    |\n+638 |     x.split_terminator(\"x\");\n+    |                        ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.split_terminator('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:642:25\n+    |\n+642 |     x.rsplit_terminator(\"x\");\n+    |                         ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplit_terminator('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:646:17\n+    |\n+646 |     x.splitn(0, \"x\");\n+    |                 ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.splitn(0, 'x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:650:18\n+    |\n+650 |     x.rsplitn(0, \"x\");\n+    |                  ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplitn(0, 'x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:654:15\n+    |\n+654 |     x.matches(\"x\");\n+    |               ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.matches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:658:16\n+    |\n+658 |     x.rmatches(\"x\");\n+    |                ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rmatches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:662:21\n+    |\n+662 |     x.match_indices(\"x\");\n+    |                     ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.match_indices('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:666:22\n+    |\n+666 |     x.rmatch_indices(\"x\");\n+    |                      ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rmatch_indices('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:670:25\n+    |\n+670 |     x.trim_left_matches(\"x\");\n+    |                         ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.trim_left_matches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:674:26\n+    |\n+674 |     x.trim_right_matches(\"x\");\n+    |                          ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.trim_right_matches('x');\n+\n+error: you are getting the inner pointer of a temporary `CString`\n+   --> $DIR/methods.rs:687:5\n+    |\n+687 |     CString::new(\"foo\").unwrap().as_ptr();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(temporary_cstring_as_ptr)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+   --> $DIR/methods.rs:687:5\n+    |\n+687 |     CString::new(\"foo\").unwrap().as_ptr();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 88 previous errors\n+"}, {"sha": "d74e52732633b079854165b7c5b7b8fcbc7e1b7f", "filename": "tests/ui/min_max.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,33 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+use std::cmp::{min, max};\n+use std::cmp::min as my_min;\n+use std::cmp::max as my_max;\n+\n+const LARGE : usize = 3;\n+\n+fn main() {\n+    let x;\n+    x = 2usize;\n+    min(1, max(3, x));\n+    min(max(3, x), 1);\n+    max(min(x, 1), 3);\n+    max(3, min(x, 1));\n+\n+    my_max(3, my_min(x, 1));\n+\n+    min(3, max(1, x)); // ok, could be 1, 2 or 3 depending on x\n+\n+    min(1, max(LARGE, x)); // no error, we don't lookup consts here\n+\n+    let s;\n+    s = \"Hello\";\n+\n+    min(\"Apple\", max(\"Zoo\", s));\n+    max(min(s, \"Apple\"), \"Zoo\");\n+\n+    max(\"Apple\", min(s, \"Zoo\")); // ok\n+}"}, {"sha": "1170373ab9855dd4c6470158448eb3e402107047", "filename": "tests/ui/min_max.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,63 @@\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:15:5\n+   |\n+15 |     min(1, max(3, x));\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/min_max.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:16:5\n+   |\n+16 |     min(max(3, x), 1);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:17:5\n+   |\n+17 |     max(min(x, 1), 3);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:18:5\n+   |\n+18 |     max(3, min(x, 1));\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:20:5\n+   |\n+20 |     my_max(3, my_min(x, 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:29:5\n+   |\n+29 |     min(\"Apple\", max(\"Zoo\", s));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:30:5\n+   |\n+30 |     max(min(s, \"Apple\"), \"Zoo\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "cd69ef1b08eca1a47ed747c8ba9e8d7e5a0e9386", "filename": "tests/ui/missing-doc.rs", "status": "renamed", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -23,17 +23,17 @@\n //! Some garbage docs for the crate here\n #![doc=\"More garbage\"]\n \n-type Typedef = String; //~ ERROR: missing documentation for a type alias\n-pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n+type Typedef = String;\n+pub type PubTypedef = String;\n \n-struct Foo { //~ ERROR: missing documentation for a struct\n-    a: isize, //~ ERROR: missing documentation for a struct field\n-    b: isize, //~ ERROR: missing documentation for a struct field\n+struct Foo {\n+    a: isize,\n+    b: isize,\n }\n \n-pub struct PubFoo { //~ ERROR: missing documentation for a struct\n-    pub a: isize,      //~ ERROR: missing documentation for a struct field\n-    b: isize, //~ ERROR: missing documentation for a struct field\n+pub struct PubFoo {\n+    pub a: isize,\n+    b: isize,\n }\n \n #[allow(missing_docs_in_private_items)]\n@@ -42,13 +42,13 @@ pub struct PubFoo2 {\n     pub c: isize,\n }\n \n-mod module_no_dox {} //~ ERROR: missing documentation for a module\n-pub mod pub_module_no_dox {} //~ ERROR: missing documentation for a module\n+mod module_no_dox {}\n+pub mod pub_module_no_dox {}\n \n /// dox\n pub fn foo() {}\n-pub fn foo2() {} //~ ERROR: missing documentation for a function\n-fn foo3() {} //~ ERROR: missing documentation for a function\n+pub fn foo2() {}\n+fn foo3() {}\n #[allow(missing_docs_in_private_items)] pub fn foo4() {}\n \n /// dox\n@@ -65,9 +65,9 @@ trait B {\n     fn foo_with_impl(&self) {}\n }\n \n-pub trait C { //~ ERROR: missing documentation for a trait\n-    fn foo(&self); //~ ERROR: missing documentation for a trait method\n-    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+pub trait C {\n+    fn foo(&self);\n+    fn foo_with_impl(&self) {}\n }\n \n #[allow(missing_docs_in_private_items)]\n@@ -77,8 +77,8 @@ pub trait D {\n \n /// dox\n pub trait E {\n-    type AssociatedType; //~ ERROR: missing documentation for an associated type\n-    type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n+    type AssociatedType;\n+    type AssociatedTypeDef = Self;\n \n     /// dox\n     type DocumentedType;\n@@ -89,15 +89,15 @@ pub trait E {\n }\n \n impl Foo {\n-    pub fn foo() {} //~ ERROR: missing documentation for a method\n-    fn bar() {} //~ ERROR: missing documentation for a method\n+    pub fn foo() {}\n+    fn bar() {}\n }\n \n impl PubFoo {\n-    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    pub fn foo() {}\n     /// dox\n     pub fn foo1() {}\n-    fn foo2() {} //~ ERROR: missing documentation for a method\n+    fn foo2() {}\n     #[allow(missing_docs_in_private_items)] pub fn foo3() {}\n }\n \n@@ -123,17 +123,17 @@ mod a {\n     }\n }\n \n-enum Baz { //~ ERROR: missing documentation for an enum\n-    BazA { //~ ERROR: missing documentation for a variant\n-        a: isize, //~ ERROR: missing documentation for a struct field\n-        b: isize //~ ERROR: missing documentation for a struct field\n+enum Baz {\n+    BazA {\n+        a: isize,\n+        b: isize\n     },\n-    BarB //~ ERROR: missing documentation for a variant\n+    BarB\n }\n \n-pub enum PubBaz { //~ ERROR: missing documentation for an enum\n-    PubBazA { //~ ERROR: missing documentation for a variant\n-        a: isize, //~ ERROR: missing documentation for a struct field\n+pub enum PubBaz {\n+    PubBazA {\n+        a: isize,\n     },\n }\n \n@@ -157,38 +157,38 @@ pub enum PubBaz3 {\n pub fn baz() {}\n \n \n-const FOO: u32 = 0; //~ ERROR: missing documentation for a const\n+const FOO: u32 = 0;\n /// dox\n pub const FOO1: u32 = 0;\n #[allow(missing_docs_in_private_items)]\n pub const FOO2: u32 = 0;\n #[doc(hidden)]\n pub const FOO3: u32 = 0;\n-pub const FOO4: u32 = 0; //~ ERROR: missing documentation for a const\n+pub const FOO4: u32 = 0;\n \n \n-static BAR: u32 = 0; //~ ERROR: missing documentation for a static\n+static BAR: u32 = 0;\n /// dox\n pub static BAR1: u32 = 0;\n #[allow(missing_docs_in_private_items)]\n pub static BAR2: u32 = 0;\n #[doc(hidden)]\n pub static BAR3: u32 = 0;\n-pub static BAR4: u32 = 0; //~ ERROR: missing documentation for a static\n+pub static BAR4: u32 = 0;\n \n \n-mod internal_impl { //~ ERROR: missing documentation for a module\n+mod internal_impl {\n     /// dox\n     pub fn documented() {}\n-    pub fn undocumented1() {} //~ ERROR: missing documentation for a function\n-    pub fn undocumented2() {} //~ ERROR: missing documentation for a function\n-    fn undocumented3() {} //~ ERROR: missing documentation for a function\n+    pub fn undocumented1() {}\n+    pub fn undocumented2() {}\n+    fn undocumented3() {}\n     /// dox\n     pub mod globbed {\n         /// dox\n         pub fn also_documented() {}\n-        pub fn also_undocumented1() {} //~ ERROR: missing documentation for a function\n-        fn also_undocumented2() {} //~ ERROR: missing documentation for a function\n+        pub fn also_undocumented1() {}\n+        fn also_undocumented2() {}\n     }\n }\n /// dox\n@@ -199,4 +199,4 @@ pub mod public_interface {\n     pub use internal_impl::globbed::*;\n }\n \n-fn main() {} //~ ERROR: missing documentation for a function\n+fn main() {}", "previous_filename": "tests/compile-fail/missing-doc.rs"}, {"sha": "6e3a146ee2d34a106f0c6d2ac9dcaf85938f1466", "filename": "tests/ui/missing-doc.stderr", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,279 @@\n+error: missing documentation for a type alias\n+  --> $DIR/missing-doc.rs:26:1\n+   |\n+26 | type Typedef = String;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/missing-doc.rs:16:9\n+   |\n+16 | #![deny(missing_docs_in_private_items)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a type alias\n+  --> $DIR/missing-doc.rs:27:1\n+   |\n+27 | pub type PubTypedef = String;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/missing-doc.rs:29:1\n+   |\n+29 |   struct Foo {\n+   |  _^ starting here...\n+30 | |     a: isize,\n+31 | |     b: isize,\n+32 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:30:5\n+   |\n+30 |     a: isize,\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:31:5\n+   |\n+31 |     b: isize,\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/missing-doc.rs:34:1\n+   |\n+34 |   pub struct PubFoo {\n+   |  _^ starting here...\n+35 | |     pub a: isize,\n+36 | |     b: isize,\n+37 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:35:5\n+   |\n+35 |     pub a: isize,\n+   |     ^^^^^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:36:5\n+   |\n+36 |     b: isize,\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a module\n+  --> $DIR/missing-doc.rs:45:1\n+   |\n+45 | mod module_no_dox {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a module\n+  --> $DIR/missing-doc.rs:46:1\n+   |\n+46 | pub mod pub_module_no_dox {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/missing-doc.rs:50:1\n+   |\n+50 | pub fn foo2() {}\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/missing-doc.rs:51:1\n+   |\n+51 | fn foo3() {}\n+   | ^^^^^^^^^^^^\n+\n+error: missing documentation for a trait\n+  --> $DIR/missing-doc.rs:68:1\n+   |\n+68 |   pub trait C {\n+   |  _^ starting here...\n+69 | |     fn foo(&self);\n+70 | |     fn foo_with_impl(&self) {}\n+71 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a trait method\n+  --> $DIR/missing-doc.rs:69:5\n+   |\n+69 |     fn foo(&self);\n+   |     ^^^^^^^^^^^^^^\n+\n+error: missing documentation for a trait method\n+  --> $DIR/missing-doc.rs:70:5\n+   |\n+70 |     fn foo_with_impl(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated type\n+  --> $DIR/missing-doc.rs:80:5\n+   |\n+80 |     type AssociatedType;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated type\n+  --> $DIR/missing-doc.rs:81:5\n+   |\n+81 |     type AssociatedTypeDef = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:92:5\n+   |\n+92 |     pub fn foo() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:93:5\n+   |\n+93 |     fn bar() {}\n+   |     ^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:97:5\n+   |\n+97 |     pub fn foo() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+   --> $DIR/missing-doc.rs:100:5\n+    |\n+100 |     fn foo2() {}\n+    |     ^^^^^^^^^^^^\n+\n+error: missing documentation for an enum\n+   --> $DIR/missing-doc.rs:126:1\n+    |\n+126 |   enum Baz {\n+    |  _^ starting here...\n+127 | |     BazA {\n+128 | |         a: isize,\n+129 | |         b: isize\n+130 | |     },\n+131 | |     BarB\n+132 | | }\n+    | |_^ ...ending here\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:127:5\n+    |\n+127 |       BazA {\n+    |  _____^ starting here...\n+128 | |         a: isize,\n+129 | |         b: isize\n+130 | |     },\n+    | |_____^ ...ending here\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:128:9\n+    |\n+128 |         a: isize,\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:129:9\n+    |\n+129 |         b: isize\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:131:5\n+    |\n+131 |     BarB\n+    |     ^^^^\n+\n+error: missing documentation for an enum\n+   --> $DIR/missing-doc.rs:134:1\n+    |\n+134 |   pub enum PubBaz {\n+    |  _^ starting here...\n+135 | |     PubBazA {\n+136 | |         a: isize,\n+137 | |     },\n+138 | | }\n+    | |_^ ...ending here\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:135:5\n+    |\n+135 |       PubBazA {\n+    |  _____^ starting here...\n+136 | |         a: isize,\n+137 | |     },\n+    | |_____^ ...ending here\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:136:9\n+    |\n+136 |         a: isize,\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a constant\n+   --> $DIR/missing-doc.rs:160:1\n+    |\n+160 | const FOO: u32 = 0;\n+    | ^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a constant\n+   --> $DIR/missing-doc.rs:167:1\n+    |\n+167 | pub const FOO4: u32 = 0;\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a static\n+   --> $DIR/missing-doc.rs:170:1\n+    |\n+170 | static BAR: u32 = 0;\n+    | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a static\n+   --> $DIR/missing-doc.rs:177:1\n+    |\n+177 | pub static BAR4: u32 = 0;\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a module\n+   --> $DIR/missing-doc.rs:180:1\n+    |\n+180 | mod internal_impl {\n+    | ^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:183:5\n+    |\n+183 |     pub fn undocumented1() {}\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:184:5\n+    |\n+184 |     pub fn undocumented2() {}\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:185:5\n+    |\n+185 |     fn undocumented3() {}\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:190:9\n+    |\n+190 |         pub fn also_undocumented1() {}\n+    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:191:9\n+    |\n+191 |         fn also_undocumented2() {}\n+    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:202:1\n+    |\n+202 | fn main() {}\n+    | ^^^^^^^^^^^^\n+\n+error: aborting due to 40 previous errors\n+"}, {"sha": "f102057c1dafb5ebe7ea0b5b7ee49a161e4a50b8", "filename": "tests/ui/module_inception.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,12 +4,12 @@\n \n mod foo {\n     mod bar {\n-        mod bar { //~ ERROR module has the same name as its containing module\n+        mod bar {\n             mod foo {}\n         }\n         mod foo {}\n     }\n-    mod foo { //~ ERROR module has the same name as its containing module\n+    mod foo {\n         mod bar {}\n     }\n }", "previous_filename": "tests/compile-fail/module_inception.rs"}, {"sha": "b61b8557ac01b6f7bd04d9d8778460253e6af979", "filename": "tests/ui/module_inception.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodule_inception.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodule_inception.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: module has the same name as its containing module\n+ --> $DIR/module_inception.rs:7:9\n+  |\n+7 |           mod bar {\n+  |  _________^ starting here...\n+8 | |             mod foo {}\n+9 | |         }\n+  | |_________^ ...ending here\n+  |\n+note: lint level defined here\n+ --> $DIR/module_inception.rs:3:9\n+  |\n+3 | #![deny(module_inception)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: module has the same name as its containing module\n+  --> $DIR/module_inception.rs:12:5\n+   |\n+12 |       mod foo {\n+   |  _____^ starting here...\n+13 | |         mod bar {}\n+14 | |     }\n+   | |_____^ ...ending here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d9ab7492eadc92577384a99b780adc38550969d7", "filename": "tests/ui/modulo_one.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,6 +4,6 @@\n #![allow(no_effect, unnecessary_operation)]\n \n fn main() {\n-    10 % 1; //~ERROR any number modulo 1 will be 0\n+    10 % 1;\n     10 % 2;\n }", "previous_filename": "tests/compile-fail/modulo_one.rs"}, {"sha": "2e5aef675743574afc0435f8cf9e1c6498a0130d", "filename": "tests/ui/modulo_one.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: any number modulo 1 will be 0\n+ --> $DIR/modulo_one.rs:7:5\n+  |\n+7 |     10 % 1;\n+  |     ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/modulo_one.rs:3:9\n+  |\n+3 | #![deny(modulo_one)]\n+  |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "457a79152efd539ec4c08a581fa1860f470d21e0", "filename": "tests/ui/mut_mut.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,64 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused, no_effect, unnecessary_operation)]\n+#![deny(mut_mut)]\n+\n+//#![plugin(regex_macros)]\n+//extern crate regex;\n+\n+fn fun(x : &mut &mut u32) -> bool {\n+    **x > 0\n+}\n+\n+fn less_fun(x : *mut *mut u32) {\n+  let y = x;\n+}\n+\n+macro_rules! mut_ptr {\n+    ($p:expr) => { &mut $p }\n+\n+}\n+\n+#[allow(unused_mut, unused_variables)]\n+fn main() {\n+    let mut x = &mut &mut 1u32;\n+    {\n+        let mut y = &mut x;\n+    }\n+\n+    if fun(x) {\n+        let y : &mut &mut u32 = &mut &mut 2;\n+\n+\n+\n+        **y + **x;\n+    }\n+\n+    if fun(x) {\n+        let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+\n+\n+\n+\n+\n+\n+        ***y + **x;\n+    }\n+\n+    let mut z = mut_ptr!(&mut 3u32);\n+\n+}\n+\n+fn issue939() {\n+    let array = [5, 6, 7, 8, 9];\n+    let mut args = array.iter().skip(2);\n+    for &arg in &mut args {\n+        println!(\"{}\", arg);\n+    }\n+\n+    let args = &mut args;\n+    for arg in args {\n+        println!(\":{}\", arg);\n+    }\n+}"}, {"sha": "2149d3d88240c35063467c137fdd6d328f880d80", "filename": "tests/ui/mut_mut.stderr", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,89 @@\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:10:12\n+   |\n+10 | fn fun(x : &mut &mut u32) -> bool {\n+   |            ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mut_mut.rs:5:9\n+   |\n+5  | #![deny(mut_mut)]\n+   |         ^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:25:17\n+   |\n+25 |     let mut x = &mut &mut 1u32;\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:19:20\n+   |\n+19 |     ($p:expr) => { &mut $p }\n+   |                    ^^^^^^^\n+...\n+49 |     let mut z = mut_ptr!(&mut 3u32);\n+   |                 ------------------- in this macro invocation\n+\n+error: this expression mutably borrows a mutable reference. Consider reborrowing\n+  --> $DIR/mut_mut.rs:27:21\n+   |\n+27 |         let mut y = &mut x;\n+   |                     ^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:17\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:33\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                                 ^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:17\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:17\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:38\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                                      ^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:17\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "a3b9a965ec4c8214b33ffbe70cd30d1b895d9521", "filename": "tests/ui/mut_reference.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -19,13 +19,13 @@ impl MyStruct {\n #[deny(unnecessary_mut_passed)]\n fn main() {\n     // Functions\n-    takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+    takes_an_immutable_reference(&mut 42);\n     let as_ptr: fn(&i32) = takes_an_immutable_reference;\n-    as_ptr(&mut 42); //~ERROR The function/method \"as_ptr\" doesn't need a mutable reference\n+    as_ptr(&mut 42);\n \n     // Methods\n     let my_struct = MyStruct;\n-    my_struct.takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+    my_struct.takes_an_immutable_reference(&mut 42);\n \n \n     // No error", "previous_filename": "tests/compile-fail/mut_reference.rs"}, {"sha": "f4c2b60746ea7c9819ad3db788ef82c32e4a87d9", "filename": "tests/ui/mut_reference.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:22:34\n+   |\n+22 |     takes_an_immutable_reference(&mut 42);\n+   |                                  ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mut_reference.rs:19:8\n+   |\n+19 | #[deny(unnecessary_mut_passed)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The function/method \"as_ptr\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:24:12\n+   |\n+24 |     as_ptr(&mut 42);\n+   |            ^^^^^^^\n+\n+error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:28:44\n+   |\n+28 |     my_struct.takes_an_immutable_reference(&mut 42);\n+   |                                            ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5a5289c2cf48bf53f03a2879083e6e3c22556a94", "filename": "tests/ui/mutex_atomic.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,18 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+#![deny(mutex_integer)]\n+\n+fn main() {\n+    use std::sync::Mutex;\n+    Mutex::new(true);\n+    Mutex::new(5usize);\n+    Mutex::new(9isize);\n+    let mut x = 4u32;\n+    Mutex::new(&x as *const u32);\n+    Mutex::new(&mut x as *mut u32);\n+    Mutex::new(0u32);\n+    Mutex::new(0i32);\n+    Mutex::new(0f32); // there are no float atomics, so this should not lint\n+}"}, {"sha": "6a61c42cbe2d4a56f17486a863358b9b9f5bb16e", "filename": "tests/ui/mutex_atomic.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,65 @@\n+error: Consider using an AtomicBool instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+ --> $DIR/mutex_atomic.rs:9:5\n+  |\n+9 |     Mutex::new(true);\n+  |     ^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/mutex_atomic.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:10:5\n+   |\n+10 |     Mutex::new(5usize);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:11:5\n+   |\n+11 |     Mutex::new(9isize);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:13:5\n+   |\n+13 |     Mutex::new(&x as *const u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:14:5\n+   |\n+14 |     Mutex::new(&mut x as *mut u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:15:5\n+   |\n+15 |     Mutex::new(0u32);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mutex_atomic.rs:5:9\n+   |\n+5  | #![deny(mutex_integer)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:16:5\n+   |\n+16 |     Mutex::new(0i32);\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "ebbff1454822f23eb7472831bb67f704bf42f81e", "filename": "tests/ui/needless_bool.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,74 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(needless_bool)]\n+\n+#[allow(if_same_then_else)]\n+fn main() {\n+    let x = true;\n+    let y = false;\n+    if x { true } else { true };\n+    if x { false } else { false };\n+    if x { true } else { false };\n+\n+\n+\n+    if x { false } else { true };\n+\n+\n+\n+    if x && y { false } else { true };\n+\n+\n+\n+    if x { x } else { false }; // would also be questionable, but we don't catch this yet\n+    bool_ret(x);\n+    bool_ret2(x);\n+    bool_ret3(x);\n+    bool_ret5(x, x);\n+    bool_ret4(x);\n+    bool_ret6(x, x);\n+}\n+\n+#[allow(if_same_then_else, needless_return)]\n+fn bool_ret(x: bool) -> bool {\n+    if x { return true } else { return true };\n+\n+}\n+\n+#[allow(if_same_then_else, needless_return)]\n+fn bool_ret2(x: bool) -> bool {\n+    if x { return false } else { return false };\n+\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret3(x: bool) -> bool {\n+    if x { return true } else { return false };\n+\n+\n+\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret5(x: bool, y: bool) -> bool {\n+    if x && y { return true } else { return false };\n+\n+\n+\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret4(x: bool) -> bool {\n+    if x { return false } else { return true };\n+\n+\n+\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret6(x: bool, y: bool) -> bool {\n+    if x && y { return false } else { return true };\n+\n+\n+\n+}"}, {"sha": "930a3cba514d5e03228b80ab198bb72fa6c61093", "filename": "tests/ui/needless_bool.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,95 @@\n+error: this if-then-else expression will always return true\n+ --> $DIR/needless_bool.rs:9:5\n+  |\n+9 |     if x { true } else { true };\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/needless_bool.rs:3:9\n+  |\n+3 | #![deny(needless_bool)]\n+  |         ^^^^^^^^^^^^^\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/needless_bool.rs:10:5\n+   |\n+10 |     if x { false } else { false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:11:5\n+   |\n+11 |     if x { true } else { false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:15:5\n+   |\n+15 |     if x { false } else { true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     !x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:19:5\n+   |\n+19 |     if x && y { false } else { true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     !(x && y);\n+\n+error: this if-then-else expression will always return true\n+  --> $DIR/needless_bool.rs:34:5\n+   |\n+34 |     if x { return true } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/needless_bool.rs:40:5\n+   |\n+40 |     if x { return false } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:46:5\n+   |\n+46 |     if x { return true } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:54:5\n+   |\n+54 |     if x && y { return true } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return x && y;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:62:5\n+   |\n+62 |     if x { return false } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return !x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:70:5\n+   |\n+70 |     if x && y { return false } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return !(x && y);\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "1fc36c0be1854ba4ed84bdda7e23d139af6f0d8a", "filename": "tests/ui/needless_borrow.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,14 +10,14 @@ fn x(y: &i32) -> i32 {\n fn main() {\n     let a = 5;\n     let b = x(&a);\n-    let c = x(&&a); //~ ERROR: this expression borrows a reference that is immediately dereferenced by the compiler\n+    let c = x(&&a);\n     let s = &String::from(\"hi\");\n     let s_ident = f(&s); // should not error, because `&String` implements Copy, but `String` does not\n     let g_val = g(&Vec::new()); // should not error, because `&Vec<T>` derefs to `&[T]`\n     let vec = Vec::new();\n     let vec_val = g(&vec); // should not error, because `&Vec<T>` derefs to `&[T]`\n     h(&\"foo\"); // should not error, because the `&&str` is required, due to `&Trait`\n-    if let Some(ref cake) = Some(&5) {} //~ ERROR: this pattern creates a reference to a reference\n+    if let Some(ref cake) = Some(&5) {}\n }\n \n fn f<T:Copy>(y: &T) -> T {\n@@ -39,6 +39,6 @@ fn issue_1432() {\n     let mut v = Vec::<String>::new();\n     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n     let _ = v.iter().filter(|&ref a| a.is_empty());\n-    //~^WARNING this pattern creates a reference to a reference\n+\n     let _ = v.iter().filter(|&a| a.is_empty());\n }", "previous_filename": "tests/compile-fail/needless_borrow.rs"}, {"sha": "a5d549c986b5fb931ed3e9888477ffac846dec9a", "filename": "tests/ui/needless_borrow.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,31 @@\n+error: this expression borrows a reference that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:13:15\n+   |\n+13 |     let c = x(&&a);\n+   |               ^^^\n+   |\n+   = note: #[deny(needless_borrow)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/needless_borrow.rs:8:8\n+   |\n+8  | #[deny(clippy)]\n+   |        ^^^^^^\n+\n+error: this pattern creates a reference to a reference\n+  --> $DIR/needless_borrow.rs:20:17\n+   |\n+20 |     if let Some(ref cake) = Some(&5) {}\n+   |                 ^^^^^^^^\n+   |\n+   = note: #[deny(needless_borrow)] implied by #[deny(clippy)]\n+\n+warning: this pattern creates a reference to a reference\n+  --> $DIR/needless_borrow.rs:41:31\n+   |\n+41 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n+   |                               ^^^^^\n+   |\n+   = note: #[warn(needless_borrow)] on by default\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2751089bddadf118c2b7f527269d7a7ff02f231d", "filename": "tests/ui/needless_return.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,73 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(needless_return)]\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    return true;\n+\n+\n+\n+}\n+\n+fn test_no_semicolon() -> bool {\n+    return true\n+\n+\n+\n+}\n+\n+fn test_if_block() -> bool {\n+    if true {\n+        return true;\n+\n+\n+\n+    } else {\n+        return false;\n+\n+\n+\n+    }\n+}\n+\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => return false,\n+\n+\n+\n+\n+        false => {\n+            return true;\n+\n+\n+\n+        }\n+    }\n+}\n+\n+fn test_closure() {\n+    let _ = || {\n+        return true;\n+\n+\n+\n+    };\n+    let _ = || return true;\n+\n+\n+\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_no_semicolon();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    test_closure();\n+}"}, {"sha": "0d9f5f9a57dafdfe616fd59e871d61d2be19e8ee", "filename": "tests/ui/needless_return.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,79 @@\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:11:5\n+   |\n+11 |     return true;\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/needless_return.rs:4:9\n+   |\n+4  | #![deny(needless_return)]\n+   |         ^^^^^^^^^^^^^^^\n+help: remove `return` as shown:\n+   |     true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:18:5\n+   |\n+18 |     return true\n+   |     ^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |     true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:26:9\n+   |\n+26 |         return true;\n+   |         ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:31:9\n+   |\n+31 |         return false;\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         false\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:40:17\n+   |\n+40 |         true => return false,\n+   |                 ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true => false,\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:46:13\n+   |\n+46 |             return true;\n+   |             ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |             true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:56:9\n+   |\n+56 |         return true;\n+   |         ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:61:16\n+   |\n+61 |     let _ = || return true;\n+   |                ^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |     let _ = || true;\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "a8eb232f0602cef93a0a972b19280adf1d3de216", "filename": "tests/ui/needless_update.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let base = S { a: 0, b: 0 };\n     S { ..base }; // no error\n     S { a: 1, ..base }; // no error\n-    S { a: 1, b: 1, ..base }; //~ERROR struct update has no effect\n+    S { a: 1, b: 1, ..base };\n }", "previous_filename": "tests/compile-fail/needless_update.rs"}, {"sha": "ab1441508d4cca64495d0fec600d9dd5d68daf30", "filename": "tests/ui/needless_update.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneedless_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+error: struct update has no effect, all the fields in the struct have already been specified\n+  --> $DIR/needless_update.rs:16:23\n+   |\n+16 |     S { a: 1, b: 1, ..base };\n+   |                       ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/needless_update.rs:4:9\n+   |\n+4  | #![deny(needless_update)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "748a2e536098044dd37612780cdcf54655976e78", "filename": "tests/ui/neg_multiply.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -28,10 +28,10 @@ fn main() {\n     let x = 0;\n \n     x * -1;\n-    //~^ ERROR Negation by multiplying with -1\n+\n \n     -1 * x;\n-    //~^ ERROR Negation by multiplying with -1\n+\n \n     -1 * -1; // should be ok\n ", "previous_filename": "tests/compile-fail/neg_multiply.rs"}, {"sha": "11460a5583fa972dc680777266584ae44d9bcc2a", "filename": "tests/ui/neg_multiply.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: Negation by multiplying with -1\n+  --> $DIR/neg_multiply.rs:30:5\n+   |\n+30 |     x * -1;\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/neg_multiply.rs:4:9\n+   |\n+4  | #![deny(neg_multiply)]\n+   |         ^^^^^^^^^^^^\n+\n+error: Negation by multiplying with -1\n+  --> $DIR/neg_multiply.rs:33:5\n+   |\n+33 |     -1 * x;\n+   |     ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a5673b622ba19894edaf36122adf3972a1aeae95", "filename": "tests/ui/new_without_default.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,23 +5,23 @@\n #![deny(new_without_default, new_without_default_derive)]\n \n pub struct Foo;\n-//~^HELP try this\n-//~^^SUGGESTION #[derive(Default)]\n-//~^^SUGGESTION pub struct Foo\n+\n+\n+\n \n impl Foo {\n     pub fn new() -> Foo { Foo }\n-    //~^ERROR: you should consider deriving a `Default` implementation for `Foo`\n+\n }\n \n pub struct Bar;\n-//~^HELP try this\n-//~^^SUGGESTION #[derive(Default)]\n-//~^^SUGGESTION pub struct Bar\n+\n+\n+\n \n impl Bar {\n     pub fn new() -> Self { Bar }\n-    //~^ERROR: you should consider deriving a `Default` implementation for `Bar`\n+\n }\n \n pub struct Ok;\n@@ -70,13 +70,13 @@ pub struct LtKo<'a> {\n \n impl<'c> LtKo<'c> {\n     pub fn new() -> LtKo<'c> { unimplemented!() }\n-    //~^ERROR: you should consider adding a `Default` implementation for\n-    //~^^HELP try\n-    //~^^^SUGGESTION impl Default for LtKo<'c> {\n-    //~^^^SUGGESTION     fn default() -> Self {\n-    //~^^^SUGGESTION         Self::new()\n-    //~^^^SUGGESTION     }\n-    //~^^^SUGGESTION }\n+\n+\n+\n+\n+\n+\n+\n     // FIXME: that suggestion is missing lifetimes\n }\n ", "previous_filename": "tests/compile-fail/new_without_default.rs"}, {"sha": "e2b10894af8db084ac8405010c66e2ef360705cd", "filename": "tests/ui/new_without_default.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,47 @@\n+error: you should consider deriving a `Default` implementation for `Foo`\n+  --> $DIR/new_without_default.rs:13:5\n+   |\n+13 |     pub fn new() -> Foo { Foo }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/new_without_default.rs:5:30\n+   |\n+5  | #![deny(new_without_default, new_without_default_derive)]\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try this\n+   | #[derive(Default)]\n+   | pub struct Foo;\n+\n+error: you should consider deriving a `Default` implementation for `Bar`\n+  --> $DIR/new_without_default.rs:23:5\n+   |\n+23 |     pub fn new() -> Self { Bar }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   | #[derive(Default)]\n+   | pub struct Bar;\n+\n+error: you should consider adding a `Default` implementation for `LtKo<'c>`\n+  --> $DIR/new_without_default.rs:72:5\n+   |\n+72 |     pub fn new() -> LtKo<'c> { unimplemented!() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/new_without_default.rs:5:9\n+   |\n+5  | #![deny(new_without_default, new_without_default_derive)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+help: try this\n+   |     impl Default for LtKo<'c> {\n+   |         fn default() -> Self {\n+   |             Self::new()\n+   |         }\n+   |     }\n+   | \n+...\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3759986ae9d390d5f715f9f4b85ebb759ebaf858", "filename": "tests/ui/no_effect.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,122 @@\n+#![feature(plugin, box_syntax, inclusive_range_syntax)]\n+#![plugin(clippy)]\n+\n+#![deny(no_effect, unnecessary_operation)]\n+#![allow(dead_code)]\n+#![allow(path_statements)]\n+#![allow(deref_addrof)]\n+#![feature(untagged_unions)]\n+\n+struct Unit;\n+struct Tuple(i32);\n+struct Struct {\n+    field: i32\n+}\n+enum Enum {\n+    Tuple(i32),\n+    Struct { field: i32 },\n+}\n+\n+union Union {\n+    a: u8,\n+    b: f64,\n+}\n+\n+fn get_number() -> i32 { 0 }\n+fn get_struct() -> Struct { Struct { field: 0 } }\n+\n+unsafe fn unsafe_fn() -> i32 { 0 }\n+\n+fn main() {\n+    let s = get_struct();\n+    let s2 = get_struct();\n+\n+    0;\n+    s2;\n+    Unit;\n+    Tuple(0);\n+    Struct { field: 0 };\n+    Struct { ..s };\n+    Union { a: 0 };\n+    Enum::Tuple(0);\n+    Enum::Struct { field: 0 };\n+    5 + 6;\n+    *&42;\n+    &6;\n+    (5, 6, 7);\n+    box 42;\n+    ..;\n+    5..;\n+    ..5;\n+    5..6;\n+    5...6;\n+    [42, 55];\n+    [42, 55][1];\n+    (42, 55).1;\n+    [42; 55];\n+    [42; 55][13];\n+    let mut x = 0;\n+    || x += 5;\n+\n+    // Do not warn\n+    get_number();\n+    unsafe { unsafe_fn() };\n+\n+    Tuple(get_number());\n+\n+\n+    Struct { field: get_number() };\n+\n+\n+    Struct { ..get_struct() };\n+\n+\n+    Enum::Tuple(get_number());\n+\n+\n+    Enum::Struct { field: get_number() };\n+\n+\n+    5 + get_number();\n+\n+\n+    *&get_number();\n+\n+\n+    &get_number();\n+\n+\n+    (5, 6, get_number());\n+\n+\n+    box get_number();\n+\n+\n+    get_number()..;\n+\n+\n+    ..get_number();\n+\n+\n+    5..get_number();\n+\n+\n+    [42, get_number()];\n+\n+\n+    [42, 55][get_number() as usize];\n+\n+\n+    (42, get_number()).1;\n+\n+\n+    [get_number(); 55];\n+\n+\n+    [42; 55][get_number() as usize];\n+\n+\n+    {get_number()};\n+\n+\n+}"}, {"sha": "5fd1d7c425b71ba0b1425f392a7275e22a0c73b7", "filename": "tests/ui/no_effect.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,334 @@\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:34:5\n+   |\n+34 |     0;\n+   |     ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/no_effect.rs:4:9\n+   |\n+4  | #![deny(no_effect, unnecessary_operation)]\n+   |         ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:35:5\n+   |\n+35 |     s2;\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:36:5\n+   |\n+36 |     Unit;\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:37:5\n+   |\n+37 |     Tuple(0);\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:38:5\n+   |\n+38 |     Struct { field: 0 };\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:39:5\n+   |\n+39 |     Struct { ..s };\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:40:5\n+   |\n+40 |     Union { a: 0 };\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:41:5\n+   |\n+41 |     Enum::Tuple(0);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:42:5\n+   |\n+42 |     Enum::Struct { field: 0 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:43:5\n+   |\n+43 |     5 + 6;\n+   |     ^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:44:5\n+   |\n+44 |     *&42;\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:45:5\n+   |\n+45 |     &6;\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:46:5\n+   |\n+46 |     (5, 6, 7);\n+   |     ^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:47:5\n+   |\n+47 |     box 42;\n+   |     ^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:48:5\n+   |\n+48 |     ..;\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:49:5\n+   |\n+49 |     5..;\n+   |     ^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:50:5\n+   |\n+50 |     ..5;\n+   |     ^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:51:5\n+   |\n+51 |     5..6;\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:52:5\n+   |\n+52 |     5...6;\n+   |     ^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:53:5\n+   |\n+53 |     [42, 55];\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:54:5\n+   |\n+54 |     [42, 55][1];\n+   |     ^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:55:5\n+   |\n+55 |     (42, 55).1;\n+   |     ^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:56:5\n+   |\n+56 |     [42; 55];\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:57:5\n+   |\n+57 |     [42; 55][13];\n+   |     ^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:59:5\n+   |\n+59 |     || x += 5;\n+   |     ^^^^^^^^^^\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:65:5\n+   |\n+65 |     Tuple(get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/no_effect.rs:4:20\n+   |\n+4  | #![deny(no_effect, unnecessary_operation)]\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:68:5\n+   |\n+68 |     Struct { field: get_number() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:71:5\n+   |\n+71 |     Struct { ..get_struct() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_struct();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:74:5\n+   |\n+74 |     Enum::Tuple(get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:77:5\n+   |\n+77 |     Enum::Struct { field: get_number() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:80:5\n+   |\n+80 |     5 + get_number();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     5;get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:83:5\n+   |\n+83 |     *&get_number();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:86:5\n+   |\n+86 |     &get_number();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:89:5\n+   |\n+89 |     (5, 6, get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     5;6;get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:92:5\n+   |\n+92 |     box get_number();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:95:5\n+   |\n+95 |     get_number()..;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:98:5\n+   |\n+98 |     ..get_number();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number();\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:101:5\n+    |\n+101 |     5..get_number();\n+    |     ^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     5;get_number();\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:104:5\n+    |\n+104 |     [42, get_number()];\n+    |     ^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     42;get_number();\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:107:5\n+    |\n+107 |     [42, 55][get_number() as usize];\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     [42, 55];get_number() as usize;\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:110:5\n+    |\n+110 |     (42, get_number()).1;\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     42;get_number();\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:113:5\n+    |\n+113 |     [get_number(); 55];\n+    |     ^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     get_number();\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:116:5\n+    |\n+116 |     [42; 55][get_number() as usize];\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     [42; 55];get_number() as usize;\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:119:5\n+    |\n+119 |     {get_number()};\n+    |     ^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     get_number();\n+\n+error: aborting due to 44 previous errors\n+"}, {"sha": "649a5ecb812d95ab830855d55389b31d756fa6dc", "filename": "tests/ui/non_expressive_names.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,150 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy,similar_names)]\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+#![allow(unused)]\n+\n+\n+struct Foo {\n+    apple: i32,\n+    bpple: i32,\n+}\n+\n+fn main() {\n+    let specter: i32;\n+    let spectre: i32;\n+\n+    let apple: i32;\n+\n+    let bpple: i32;\n+\n+    let cpple: i32;\n+\n+\n+    let a_bar: i32;\n+    let b_bar: i32;\n+    let c_bar: i32;\n+\n+    let items = [5];\n+    for item in &items {\n+        loop {}\n+    }\n+\n+    let foo_x: i32;\n+    let foo_y: i32;\n+\n+    let rhs: i32;\n+    let lhs: i32;\n+\n+    let bla_rhs: i32;\n+    let bla_lhs: i32;\n+\n+    let blubrhs: i32;\n+    let blublhs: i32;\n+\n+    let blubx: i32;\n+    let bluby: i32;\n+\n+\n+    let cake: i32;\n+    let cakes: i32;\n+    let coke: i32;\n+\n+    match 5 {\n+        cheese @ 1 => {},\n+        rabbit => panic!(),\n+    }\n+    let cheese: i32;\n+    match (42, 43) {\n+        (cheese1, 1) => {},\n+        (cheese2, 2) => panic!(),\n+        _ => println!(\"\"),\n+    }\n+    let ipv4: i32;\n+    let ipv6: i32;\n+    let abcd1: i32;\n+    let abdc2: i32;\n+    let xyz1abc: i32;\n+    let xyz2abc: i32;\n+    let xyzeabc: i32;\n+\n+    let parser: i32;\n+    let parsed: i32;\n+    let parsee: i32;\n+\n+\n+    let setter: i32;\n+    let getter: i32;\n+    let tx1: i32;\n+    let rx1: i32;\n+    let tx_cake: i32;\n+    let rx_cake: i32;\n+}\n+\n+fn foo() {\n+    let Foo { apple, bpple } = unimplemented!();\n+    let Foo { apple: spring,\n+        bpple: sprang } = unimplemented!();\n+}\n+\n+#[derive(Clone, Debug)]\n+enum MaybeInst {\n+    Split,\n+    Split1(usize),\n+    Split2(usize),\n+}\n+\n+struct InstSplit {\n+    uiae: usize,\n+}\n+\n+impl MaybeInst {\n+    fn fill(&mut self) {\n+        let filled = match *self {\n+            MaybeInst::Split1(goto1) => panic!(1),\n+            MaybeInst::Split2(goto2) => panic!(2),\n+            _ => unimplemented!(),\n+        };\n+        unimplemented!()\n+    }\n+}\n+\n+fn bla() {\n+    let a: i32;\n+    let (b, c, d): (i32, i64, i16);\n+    {\n+        {\n+            let cdefg: i32;\n+            let blar: i32;\n+        }\n+        {\n+            let e: i32;\n+\n+        }\n+        {\n+            let e: i32;\n+\n+            let f: i32;\n+\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            e => panic!(),\n+\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            _ => panic!(),\n+        }\n+    }\n+}"}, {"sha": "c47f5a449a235046b5be395979d879077b956d7f", "filename": "tests/ui/non_expressive_names.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,148 @@\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:29:9\n+   |\n+29 |     let bpple: i32;\n+   |         ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/non_expressive_names.rs:3:16\n+   |\n+3  | #![deny(clippy,similar_names)]\n+   |                ^^^^^^^^^^^^^\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:27:9\n+   |\n+27 |     let apple: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `b_pple`\n+  --> $DIR/non_expressive_names.rs:29:9\n+   |\n+29 |     let bpple: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:31:9\n+   |\n+31 |     let cpple: i32;\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:27:9\n+   |\n+27 |     let apple: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `c_pple`\n+  --> $DIR/non_expressive_names.rs:31:9\n+   |\n+31 |     let cpple: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:56:9\n+   |\n+56 |     let bluby: i32;\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:55:9\n+   |\n+55 |     let blubx: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `blub_y`\n+  --> $DIR/non_expressive_names.rs:56:9\n+   |\n+56 |     let bluby: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:61:9\n+   |\n+61 |     let coke: i32;\n+   |         ^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:59:9\n+   |\n+59 |     let cake: i32;\n+   |         ^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:79:9\n+   |\n+79 |     let xyzeabc: i32;\n+   |         ^^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:77:9\n+   |\n+77 |     let xyz1abc: i32;\n+   |         ^^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:83:9\n+   |\n+83 |     let parsee: i32;\n+   |         ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:81:9\n+   |\n+81 |     let parser: i32;\n+   |         ^^^^^^\n+help: separate the discriminating character by an underscore like: `parse_e`\n+  --> $DIR/non_expressive_names.rs:83:9\n+   |\n+83 |     let parsee: i32;\n+   |         ^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:97:16\n+   |\n+97 |         bpple: sprang } = unimplemented!();\n+   |                ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:96:22\n+   |\n+96 |     let Foo { apple: spring,\n+   |                      ^^^^^^\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:131:17\n+    |\n+131 |             let e: i32;\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/non_expressive_names.rs:3:9\n+    |\n+3   | #![deny(clippy,similar_names)]\n+    |         ^^^^^^\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:135:17\n+    |\n+135 |             let e: i32;\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: 6th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:137:17\n+    |\n+137 |             let f: i32;\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:142:13\n+    |\n+142 |             e => panic!(),\n+    |             ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "414176f8d1081c52916e03079920c344b29549e3", "filename": "tests/ui/ok_if_let.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,7 +5,7 @@\n \n fn str_to_int(x: &str) -> i32 {\n     if let Some(y) = x.parse().ok() { \n-    //~^ERROR Matching on `Some` with `ok()` is redundant\n+\n         y\n     } else {\n         0", "previous_filename": "tests/compile-fail/ok_if_let.rs"}, {"sha": "d3eaaddaefc8462c2cfe6295dd43ced73cc10564", "filename": "tests/ui/ok_if_let.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,21 @@\n+error: Matching on `Some` with `ok()` is redundant\n+  --> $DIR/ok_if_let.rs:7:5\n+   |\n+7  |       if let Some(y) = x.parse().ok() { \n+   |  _____^ starting here...\n+8  | |\n+9  | |         y\n+10 | |     } else {\n+11 | |         0\n+12 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/ok_if_let.rs:4:9\n+   |\n+4  | #![deny(if_let_some_result)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+   = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1ce69af76e64ed41492702ee05893c0a2d9172c", "filename": "tests/ui/open_options.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,12 +5,12 @@ use std::fs::OpenOptions;\n #[allow(unused_must_use)]\n #[deny(nonsensical_open_options)]\n fn main() {\n-    OpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"truncate\" and \"read\"\n-    OpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"append\" and \"truncate\"\n+    OpenOptions::new().read(true).truncate(true).open(\"foo.txt\");\n+    OpenOptions::new().append(true).truncate(true).open(\"foo.txt\");\n \n-    OpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR the method \"read\" is called more than once\n-    OpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR the method \"create\" is called more than once\n-    OpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR the method \"write\" is called more than once\n-    OpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR the method \"append\" is called more than once\n-    OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR the method \"truncate\" is called more than once\n+    OpenOptions::new().read(true).read(false).open(\"foo.txt\");\n+    OpenOptions::new().create(true).create(false).open(\"foo.txt\");\n+    OpenOptions::new().write(true).write(false).open(\"foo.txt\");\n+    OpenOptions::new().append(true).append(false).open(\"foo.txt\");\n+    OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");\n }", "previous_filename": "tests/compile-fail/open_options.rs"}, {"sha": "0f9779c277823e88e2e29e267d6254c87e926a0d", "filename": "tests/ui/open_options.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,50 @@\n+error: file opened with \"truncate\" and \"read\"\n+ --> $DIR/open_options.rs:8:5\n+  |\n+8 |     OpenOptions::new().read(true).truncate(true).open(\"foo.txt\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/open_options.rs:6:8\n+  |\n+6 | #[deny(nonsensical_open_options)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: file opened with \"append\" and \"truncate\"\n+ --> $DIR/open_options.rs:9:5\n+  |\n+9 |     OpenOptions::new().append(true).truncate(true).open(\"foo.txt\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"read\" is called more than once\n+  --> $DIR/open_options.rs:11:5\n+   |\n+11 |     OpenOptions::new().read(true).read(false).open(\"foo.txt\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"create\" is called more than once\n+  --> $DIR/open_options.rs:12:5\n+   |\n+12 |     OpenOptions::new().create(true).create(false).open(\"foo.txt\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"write\" is called more than once\n+  --> $DIR/open_options.rs:13:5\n+   |\n+13 |     OpenOptions::new().write(true).write(false).open(\"foo.txt\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"append\" is called more than once\n+  --> $DIR/open_options.rs:14:5\n+   |\n+14 |     OpenOptions::new().append(true).append(false).open(\"foo.txt\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"truncate\" is called more than once\n+  --> $DIR/open_options.rs:15:5\n+   |\n+15 |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "51503003be41a652867fad3b2cae30596513aa53", "filename": "tests/ui/overflow_check_conditional.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,61 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(many_single_char_names)]\n+#![deny(overflow_check_conditional)]\n+\n+fn main() {\n+\tlet a: u32 = 1;\n+\tlet b: u32 = 2;\n+\tlet c: u32 = 3;\n+\tif a + b < a {\n+\n+\t}\n+\tif a > a + b {\n+\n+\t}\n+\tif a + b < b {\n+\n+\t}\n+\tif b > a + b {\n+\n+\t}\n+\tif a - b > b {\n+\n+\t}\n+\tif b < a - b {\n+\n+\t}\n+\tif a - b > a {\n+\n+\t}\n+\tif a < a - b {\n+\n+\t}\n+\tif a + b < c {\n+\n+\t}\n+\tif c > a + b {\n+\n+\t}\n+\tif a - b < c {\n+\n+\t}\n+\tif c > a - b {\n+\n+\t}\n+\tlet i = 1.1;\n+\tlet j = 2.2;\n+\tif i + j < i {\n+\n+\t}\n+\tif i - j < i {\n+\n+\t}\n+\tif i > i + j {\n+\n+\t}\n+\tif i - j < i {\n+\n+\t}\n+}"}, {"sha": "8705f3d72038705440e700febb390f927608140d", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,56 @@\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:11:5\n+   |\n+11 | \\tif a + b < a {\n+   | \\t   ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/overflow_check_conditional.rs:5:9\n+   |\n+5  | #![deny(overflow_check_conditional)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:14:5\n+   |\n+14 | \\tif a > a + b {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:17:5\n+   |\n+17 | \\tif a + b < b {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:20:5\n+   |\n+20 | \\tif b > a + b {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:23:5\n+   |\n+23 | \\tif a - b > b {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:26:5\n+   |\n+26 | \\tif b < a - b {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:29:5\n+   |\n+29 | \\tif a - b > a {\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:32:5\n+   |\n+32 | \\tif a < a - b {\n+   | \\t   ^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "741c80903562aea2efffb475d36d2e20824567f4", "filename": "tests/ui/panic.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,11 +5,11 @@\n \n fn missing() {\n     if true {\n-        panic!(\"{}\"); //~ERROR: you probably are missing some parameter\n+        panic!(\"{}\");\n     } else if false {\n-        panic!(\"{:?}\"); //~ERROR: you probably are missing some parameter\n+        panic!(\"{:?}\");\n     } else {\n-        assert!(true, \"here be missing values: {}\"); //~ERROR you probably are missing some parameter\n+        assert!(true, \"here be missing values: {}\");\n     }\n }\n ", "previous_filename": "tests/compile-fail/panic.rs"}, {"sha": "e77add7a32ae5ac3fcfb6c65989a76743f5379ec", "filename": "tests/ui/panic.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: you probably are missing some parameter in your format string\n+ --> $DIR/panic.rs:8:16\n+  |\n+8 |         panic!(\"{}\");\n+  |                ^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/panic.rs:4:9\n+  |\n+4 | #![deny(panic_params)]\n+  |         ^^^^^^^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:10:16\n+   |\n+10 |         panic!(\"{:?}\");\n+   |                ^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:12:23\n+   |\n+12 |         assert!(true, \"here be missing values: {}\");\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9ee1f48b01c59c43999e00adae8ef713cc5c58b2", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -9,7 +9,7 @@ struct Foo;\n impl PartialEq for Foo {\n     fn eq(&self, _: &Foo) -> bool { true }\n     fn ne(&self, _: &Foo) -> bool { false }\n-    //~^ ERROR re-implementing `PartialEq::ne` is unnecessary\n+\n }\n \n fn main() {}", "previous_filename": "tests/compile-fail/partialeq_ne_impl.rs"}, {"sha": "dd1e4099e4ca61fa8e93cb5f76f22dcf7d53d9c9", "filename": "tests/ui/partialeq_ne_impl.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpartialeq_ne_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpartialeq_ne_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,15 @@\n+error: re-implementing `PartialEq::ne` is unnecessary\n+  --> $DIR/partialeq_ne_impl.rs:11:5\n+   |\n+11 |     fn ne(&self, _: &Foo) -> bool { false }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(partialeq_ne_impl)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/partialeq_ne_impl.rs:4:9\n+   |\n+4  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d4aa513ea062bc6bbc14048dd56984f5476cc829", "filename": "tests/ui/patterns.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let v = Some(true);\n     match v {\n         Some(x) => (),\n-        y @ _   => (),  //~ERROR the `y @ _` pattern can be written as just `y`\n+        y @ _   => (),\n     }\n     match v {\n         Some(x)  => (),", "previous_filename": "tests/compile-fail/patterns.rs"}, {"sha": "515ae4cae6ee33e54da51b6404d61f10a40f5d67", "filename": "tests/ui/patterns.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,15 @@\n+error: the `y @ _` pattern can be written as just `y`\n+  --> $DIR/patterns.rs:10:9\n+   |\n+10 |         y @ _   => (),\n+   |         ^^^^^\n+   |\n+   = note: #[deny(redundant_pattern)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/patterns.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c6019fdecf1474a56dee584fd58dc9c1601b45d", "filename": "tests/ui/precedence.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,44 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(precedence)]\n+#[allow(identity_op)]\n+#[allow(eq_op)]\n+fn main() {\n+    1 << 2 + 3;\n+\n+\n+    1 + 2 << 3;\n+\n+\n+    4 >> 1 + 1;\n+\n+\n+    1 + 3 >> 2;\n+\n+\n+    1 ^ 1 - 1;\n+\n+\n+    3 | 2 - 1;\n+\n+\n+    3 & 5 - 2;\n+\n+\n+\n+    -1i32.abs();\n+\n+\n+    -1f32.abs();\n+\n+\n+\n+    // These should not trigger an error\n+    let _ = (-1i32).abs();\n+    let _ = (-1f32).abs();\n+    let _ = -(1i32).abs();\n+    let _ = -(1f32).abs();\n+    let _ = -(1i32.abs());\n+    let _ = -(1f32.abs());\n+}"}, {"sha": "5eb8d91ec21143a0d925f63c30bb17253b5f3057", "filename": "tests/ui/precedence.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,88 @@\n+error: operator precedence can trip the unwary\n+ --> $DIR/precedence.rs:8:5\n+  |\n+8 |     1 << 2 + 3;\n+  |     ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/precedence.rs:4:8\n+  |\n+4 | #[deny(precedence)]\n+  |        ^^^^^^^^^^\n+help: consider parenthesizing your expression\n+  |     1 << (2 + 3);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:11:5\n+   |\n+11 |     1 + 2 << 3;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     (1 + 2) << 3;\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:14:5\n+   |\n+14 |     4 >> 1 + 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     4 >> (1 + 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:17:5\n+   |\n+17 |     1 + 3 >> 2;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     (1 + 3) >> 2;\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:20:5\n+   |\n+20 |     1 ^ 1 - 1;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     1 ^ (1 - 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:23:5\n+   |\n+23 |     3 | 2 - 1;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     3 | (2 - 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:26:5\n+   |\n+26 |     3 & 5 - 2;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     3 & (5 - 2);\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:30:5\n+   |\n+30 |     -1i32.abs();\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider adding parentheses to clarify your intent\n+   |     -(1i32.abs());\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:33:5\n+   |\n+33 |     -1f32.abs();\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider adding parentheses to clarify your intent\n+   |     -(1f32.abs());\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "e6b114b897b8c24a0a0b61224d0a131de9d861dd", "filename": "tests/ui/print.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,7 +10,7 @@ struct Foo;\n impl Display for Foo {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         write!(f, \"{:?}\", 43.1415)\n-        //~^ ERROR use of `Debug`-based formatting\n+\n     }\n }\n \n@@ -22,18 +22,18 @@ impl Debug for Foo {\n }\n \n fn main() {\n-    println!(\"Hello\"); //~ERROR use of `println!`\n-    print!(\"Hello\"); //~ERROR use of `print!`\n+    println!(\"Hello\");\n+    print!(\"Hello\");\n \n-    print!(\"Hello {}\", \"World\"); //~ERROR use of `print!`\n+    print!(\"Hello {}\", \"World\");\n \n     print!(\"Hello {:?}\", \"World\");\n-    //~^ ERROR use of `print!`\n-    //~| ERROR use of `Debug`-based formatting\n+\n+\n \n     print!(\"Hello {:#?}\", \"#orld\");\n-    //~^ ERROR use of `print!`\n-    //~| ERROR use of `Debug`-based formatting\n+\n+\n \n     assert_eq!(42, 1337);\n ", "previous_filename": "tests/compile-fail/print.rs"}, {"sha": "5afb8ae504d4569af576ac26c224330c4d34afc6", "filename": "tests/ui/print.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,62 @@\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:12:27\n+   |\n+12 |         write!(f, \"{:?}\", 43.1415)\n+   |                           ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/print.rs:3:23\n+   |\n+3  | #![deny(print_stdout, use_debug)]\n+   |                       ^^^^^^^^^\n+\n+error: use of `println!`\n+  --> $DIR/print.rs:25:5\n+   |\n+25 |     println!(\"Hello\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/print.rs:3:9\n+   |\n+3  | #![deny(print_stdout, use_debug)]\n+   |         ^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:26:5\n+   |\n+26 |     print!(\"Hello\");\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:28:5\n+   |\n+28 |     print!(\"Hello {}\", \"World\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:30:5\n+   |\n+30 |     print!(\"Hello {:?}\", \"World\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:30:26\n+   |\n+30 |     print!(\"Hello {:?}\", \"World\");\n+   |                          ^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:34:5\n+   |\n+34 |     print!(\"Hello {:#?}\", \"#orld\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:34:27\n+   |\n+34 |     print!(\"Hello {:#?}\", \"#orld\");\n+   |                           ^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "3e2b31a528fd8de6584a92983033f0e4cb4787a9", "filename": "tests/ui/print_with_newline.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(print_with_newline)]\n+\n+fn main() {\n+    print!(\"Hello\\n\");\n+    print!(\"Hello {}\\n\", \"world\");\n+    print!(\"Hello {} {}\\n\\n\", \"world\", \"#2\");\n+    print!(\"{}\\n\", 1265);\n+\n+    // these are all fine\n+    print!(\"\");\n+    print!(\"Hello\");\n+    println!(\"Hello\");\n+    println!(\"Hello\\n\");\n+    println!(\"Hello {}\\n\", \"world\");\n+    print!(\"Issue\\n{}\", 1265);\n+    print!(\"{}\", 1265);\n+    print!(\"\\n{}\", 1275);\n+}"}, {"sha": "44beb530277b4b2183423bba0338bc22d5a8f560", "filename": "tests/ui/print_with_newline.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,32 @@\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:6:5\n+  |\n+6 |     print!(\"Hello/n\");\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/print_with_newline.rs:3:9\n+  |\n+3 | #![deny(print_with_newline)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:7:5\n+  |\n+7 |     print!(\"Hello {}/n\", \"world\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:8:5\n+  |\n+8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:9:5\n+  |\n+9 |     print!(\"{}/n\", 1265);\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f262d2a8dba197540e95d014fa0f7fbffad6cdeb", "filename": "tests/ui/ptr_arg.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -3,15 +3,15 @@\n #![allow(unused)]\n #![deny(ptr_arg)]\n \n-fn do_vec(x: &Vec<i64>) { //~ERROR writing `&Vec<_>` instead of `&[_]`\n+fn do_vec(x: &Vec<i64>) {\n     //Nothing here\n }\n \n fn do_vec_mut(x: &mut Vec<i64>) { // no error here\n     //Nothing here\n }\n \n-fn do_str(x: &String) { //~ERROR writing `&String` instead of `&str`\n+fn do_str(x: &String) {\n     //Nothing here either\n }\n \n@@ -24,7 +24,7 @@ fn main() {\n \n trait Foo {\n     type Item;\n-    fn do_vec(x: &Vec<i64>); //~ERROR writing `&Vec<_>`\n+    fn do_vec(x: &Vec<i64>);\n     fn do_item(x: &Self::Item);\n }\n ", "previous_filename": "tests/compile-fail/ptr_arg.rs"}, {"sha": "ce9c1e856fd63099ad390ec2b946d5a6e2f0a5a5", "filename": "tests/ui/ptr_arg.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,26 @@\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices. Consider changing the type to `&[...]`\n+ --> $DIR/ptr_arg.rs:6:14\n+  |\n+6 | fn do_vec(x: &Vec<i64>) {\n+  |              ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/ptr_arg.rs:4:9\n+  |\n+4 | #![deny(ptr_arg)]\n+  |         ^^^^^^^\n+\n+error: writing `&String` instead of `&str` involves a new object where a slice will do. Consider changing the type to `&str`\n+  --> $DIR/ptr_arg.rs:14:14\n+   |\n+14 | fn do_str(x: &String) {\n+   |              ^^^^^^^\n+\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices. Consider changing the type to `&[...]`\n+  --> $DIR/ptr_arg.rs:27:18\n+   |\n+27 |     fn do_vec(x: &Vec<i64>);\n+   |                  ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8e2bf6a7e69d8ecc8e9ad00b4b5dbfe6d00aab4f", "filename": "tests/ui/range.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,22 +10,22 @@ impl NotARange {\n \n #[deny(range_step_by_zero, range_zip_with_len)]\n fn main() {\n-    (0..1).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+    (0..1).step_by(0);\n     // No warning for non-zero step\n     (0..1).step_by(1);\n \n-    (1..).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n-    (1...2).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+    (1..).step_by(0);\n+    (1...2).step_by(0);\n \n     let x = 0..1;\n-    x.step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+    x.step_by(0);\n \n     // No error, not a range.\n     let y = NotARange;\n     y.step_by(0);\n \n     let v1 = vec![1,2,3];\n     let v2 = vec![4,5];\n-    let _x = v1.iter().zip(0..v1.len()); //~ERROR It is more idiomatic to use v1.iter().enumerate()\n+    let _x = v1.iter().zip(0..v1.len());\n     let _y = v1.iter().zip(0..v2.len()); // No error\n }", "previous_filename": "tests/compile-fail/range.rs"}, {"sha": "09e9f8a475143cecc25648dfeab935a693d5c488", "filename": "tests/ui/range.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,44 @@\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:13:5\n+   |\n+13 |     (0..1).step_by(0);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/range.rs:11:8\n+   |\n+11 | #[deny(range_step_by_zero, range_zip_with_len)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:17:5\n+   |\n+17 |     (1..).step_by(0);\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:18:5\n+   |\n+18 |     (1...2).step_by(0);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:21:5\n+   |\n+21 |     x.step_by(0);\n+   |     ^^^^^^^^^^^^\n+\n+error: It is more idiomatic to use v1.iter().enumerate()\n+  --> $DIR/range.rs:29:14\n+   |\n+29 |     let _x = v1.iter().zip(0..v1.len());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/range.rs:11:28\n+   |\n+11 | #[deny(range_step_by_zero, range_zip_with_len)]\n+   |                            ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "a431e05e72fd030ca09a56d7ce1edaf62f05d3cd", "filename": "tests/ui/redundant_closure_call.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(redundant_closure_call)]\n+\n+fn main() {\n+\tlet a = (|| 42)();\n+\n+\n+\n+\n+\tlet mut i = 1;\n+\tlet k = (|m| m+1)(i);\n+\n+\tk = (|a,b| a*b)(1,5);\n+\n+\tlet closure = || 32;\n+\ti = closure();\n+\n+\tlet closure = |i| i+1;\n+\ti = closure(3);\n+\n+\ti = closure(4);\n+}\n+"}, {"sha": "287f465bb4ad4b95c91adce74c050bef3edcfa78", "filename": "tests/ui/redundant_closure_call.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,41 @@\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call.rs:18:2\n+   |\n+18 | \\ti = closure();\n+   | \\t^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/redundant_closure_call.rs:4:9\n+   |\n+4  | #![deny(redundant_closure_call)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call.rs:21:2\n+   |\n+21 | \\ti = closure(3);\n+   | \\t^^^^^^^^^^^^^^\n+\n+error: Try not to call a closure in the expression where it is declared.\n+ --> $DIR/redundant_closure_call.rs:7:10\n+  |\n+7 | \\tlet a = (|| 42)();\n+  | \\t        ^^^^^^^^^\n+  |\n+help: Try doing something like: \n+  | \\tlet a = 42;\n+\n+error: Try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call.rs:13:10\n+   |\n+13 | \\tlet k = (|m| m+1)(i);\n+   | \\t        ^^^^^^^^^^^^\n+\n+error: Try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call.rs:15:6\n+   |\n+15 | \\tk = (|a,b| a*b)(1,5);\n+   | \\t    ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "d1160df9e128a36752bfb3ff9f9d476dbc474928", "filename": "tests/ui/reference.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,88 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+fn get_number() -> usize {\n+    10\n+}\n+\n+fn get_reference(n : &usize) -> &usize {\n+    n\n+}\n+\n+#[allow(many_single_char_names, double_parens)]\n+#[allow(unused_variables)]\n+#[deny(deref_addrof)]\n+fn main() {\n+    let a = 10;\n+    let aref = &a;\n+\n+    let b = *&a;\n+\n+\n+\n+\n+    let b = *&get_number();\n+\n+\n+\n+\n+    let b = *get_reference(&a);\n+\n+    let bytes : Vec<usize> = vec![1, 2, 3, 4];\n+    let b = *&bytes[1..2][0];\n+\n+\n+\n+\n+    //This produces a suggestion of 'let b = (a);' which\n+    //will trigger the 'unused_parens' lint\n+    let b = *&(a);\n+\n+\n+\n+\n+    let b = *(&a);\n+\n+\n+\n+\n+    let b = *((&a));\n+\n+\n+\n+\n+    let b = *&&a;\n+\n+\n+\n+\n+    let b = **&aref;\n+\n+\n+\n+\n+    //This produces a suggestion of 'let b = *&a;' which\n+    //will trigger the 'deref_addrof' lint again\n+    let b = **&&a;\n+\n+\n+\n+\n+    {\n+        let mut x = 10;\n+        let y = *&mut x;\n+\n+\n+\n+    }\n+\n+    {\n+        //This produces a suggestion of 'let y = *&mut x' which\n+        //will trigger the 'deref_addrof' lint again\n+        let mut x = 10;\n+        let y = **&mut &mut x;\n+\n+\n+\n+    }\n+}"}, {"sha": "6701016b3bedeceb57f8a02670ec32bf49eeb509", "filename": "tests/ui/reference.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,106 @@\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:19:13\n+   |\n+19 |     let b = *&a;\n+   |             ^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/reference.rs:14:8\n+   |\n+14 | #[deny(deref_addrof)]\n+   |        ^^^^^^^^^^^^\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:24:13\n+   |\n+24 |     let b = *&get_number();\n+   |             ^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |     let b = get_number();\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:32:13\n+   |\n+32 |     let b = *&bytes[1..2][0];\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |     let b = bytes[1..2][0];\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:39:13\n+   |\n+39 |     let b = *&(a);\n+   |             ^^^^^\n+   |\n+help: try this\n+   |     let b = (a);\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:44:13\n+   |\n+44 |     let b = *(&a);\n+   |             ^^^^^\n+   |\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:49:13\n+   |\n+49 |     let b = *((&a));\n+   |             ^^^^^^^\n+   |\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:54:13\n+   |\n+54 |     let b = *&&a;\n+   |             ^^^^\n+   |\n+help: try this\n+   |     let b = &a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:59:14\n+   |\n+59 |     let b = **&aref;\n+   |              ^^^^^^\n+   |\n+help: try this\n+   |     let b = *aref;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:66:14\n+   |\n+66 |     let b = **&&a;\n+   |              ^^^^\n+   |\n+help: try this\n+   |     let b = *&a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:73:17\n+   |\n+73 |         let y = *&mut x;\n+   |                 ^^^^^^^\n+   |\n+help: try this\n+   |         let y = x;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:83:18\n+   |\n+83 |         let y = **&mut &mut x;\n+   |                  ^^^^^^^^^^^^\n+   |\n+help: try this\n+   |         let y = *&mut x;\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "245ceb83561761191a4db8b924eafc82f2111fb4", "filename": "tests/ui/regex.rs", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -14,23 +14,23 @@ const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n \n fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n-    //~^ERROR: regex syntax error: empty alternate\n+\n     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n-    //~^ERROR: regex syntax error: empty alternate\n+\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n-    //~^ERROR: regex syntax error: invalid character class range\n+\n     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n-    //~^ERROR: regex syntax error: invalid character class range\n+\n \n     let some_regex = Regex::new(OPENING_PAREN);\n-    //~^ERROR: regex syntax error on position 0: unclosed\n+\n \n     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n-    //~^ERROR: regex syntax error: empty alternate\n+\n     let some_binary_regex = BRegex::new(OPENING_PAREN);\n-    //~^ERROR: regex syntax error on position 0: unclosed\n+\n     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n-    //~^ERROR: regex syntax error on position 0: unclosed\n+\n \n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n@@ -46,61 +46,61 @@ fn syntax_error() {\n \n     let set_error = RegexSet::new(&[\n         OPENING_PAREN,\n-        //~^ERROR: regex syntax error on position 0: unclosed\n+\n         r\"[a-z]+\\.(com|org|net)\",\n     ]);\n     let bset_error = BRegexSet::new(&[\n         OPENING_PAREN,\n-        //~^ERROR: regex syntax error on position 0: unclosed\n+\n         r\"[a-z]+\\.(com|org|net)\",\n     ]);\n }\n \n fn trivial_regex() {\n     let trivial_eq = Regex::new(\"^foobar$\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `==` on `str`s\n+\n+\n \n     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `==` on `str`s\n+\n+\n \n     let trivial_starts_with = Regex::new(\"^foobar\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::starts_with`\n+\n+\n \n     let trivial_ends_with = Regex::new(\"foobar$\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::ends_with`\n+\n+\n \n     let trivial_contains = Regex::new(\"foobar\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::contains`\n+\n+\n \n     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::contains`\n+\n+\n \n     let trivial_backslash = Regex::new(\"a\\\\.b\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::contains`\n+\n+\n \n     // unlikely corner cases\n     let trivial_empty = Regex::new(\"\");\n-    //~^ERROR: trivial regex\n-    //~|HELP the regex is unlikely to be useful\n+\n+\n \n     let trivial_empty = Regex::new(\"^\");\n-    //~^ERROR: trivial regex\n-    //~|HELP the regex is unlikely to be useful\n+\n+\n \n     let trivial_empty = Regex::new(\"^$\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::is_empty`\n+\n+\n \n     let binary_trivial_empty = BRegex::new(\"^$\");\n-    //~^ERROR: trivial regex\n-    //~|HELP consider using `str::is_empty`\n+\n+\n \n     // non-trivial regexes\n     let non_trivial_dot = Regex::new(\"a.b\");", "previous_filename": "tests/compile-fail/regex.rs"}, {"sha": "f59d0c6b5dc7b20ea0b99f7e65f2724c9ce6042d", "filename": "tests/ui/regex.stderr", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,175 @@\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:16:45\n+   |\n+16 |     let pipe_in_wrong_position = Regex::new(\"|\");\n+   |                                             ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:18:60\n+   |\n+18 |     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n+   |                                                            ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: invalid character class range\n+  --> $DIR/regex.rs:20:40\n+   |\n+20 |     let wrong_char_ranice = Regex::new(\"[z-a]\");\n+   |                                        ^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: invalid character class range\n+  --> $DIR/regex.rs:22:35\n+   |\n+22 |     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n+   |                                   ^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:25:33\n+   |\n+25 |     let some_regex = Regex::new(OPENING_PAREN);\n+   |                                 ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:28:53\n+   |\n+28 |     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n+   |                                                     ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:30:41\n+   |\n+30 |     let some_binary_regex = BRegex::new(OPENING_PAREN);\n+   |                                         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:32:56\n+   |\n+32 |     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n+   |                                                        ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:48:9\n+   |\n+48 |         OPENING_PAREN,\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:53:9\n+   |\n+53 |         OPENING_PAREN,\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:60:33\n+   |\n+60 |     let trivial_eq = Regex::new(\"^foobar$\");\n+   |                                 ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/regex.rs:5:24\n+   |\n+5  | #![deny(invalid_regex, trivial_regex, regex_macro)]\n+   |                        ^^^^^^^^^^^^^\n+   = help: consider using consider using `==` on `str`s\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:64:48\n+   |\n+64 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+   |                                                ^^^^^^^^^^\n+   |\n+   = help: consider using consider using `==` on `str`s\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:68:42\n+   |\n+68 |     let trivial_starts_with = Regex::new(\"^foobar\");\n+   |                                          ^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::starts_with`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:72:40\n+   |\n+72 |     let trivial_ends_with = Regex::new(\"foobar$\");\n+   |                                        ^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::ends_with`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:76:39\n+   |\n+76 |     let trivial_contains = Regex::new(\"foobar\");\n+   |                                       ^^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:80:39\n+   |\n+80 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+   |                                       ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:84:40\n+   |\n+84 |     let trivial_backslash = Regex::new(\"a//.b\");\n+   |                                        ^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:89:36\n+   |\n+89 |     let trivial_empty = Regex::new(\"\");\n+   |                                    ^^\n+   |\n+   = help: consider using the regex is unlikely to be useful as it is\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:93:36\n+   |\n+93 |     let trivial_empty = Regex::new(\"^\");\n+   |                                    ^^^\n+   |\n+   = help: consider using the regex is unlikely to be useful as it is\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:97:36\n+   |\n+97 |     let trivial_empty = Regex::new(\"^$\");\n+   |                                    ^^^^\n+   |\n+   = help: consider using consider using `str::is_empty`\n+\n+error: trivial regex\n+   --> $DIR/regex.rs:101:44\n+    |\n+101 |     let binary_trivial_empty = BRegex::new(\"^$\");\n+    |                                            ^^^^\n+    |\n+    = help: consider using consider using `str::is_empty`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "78aabf352bb05ae1de23074e9e0be9419dfb5982", "filename": "tests/ui/serde.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -37,7 +37,7 @@ impl serde::de::Visitor for B {\n     }\n \n     fn visit_string<E>(self, _v: String) -> Result<Self::Value, E>\n-    //~^ ERROR you should not implement `visit_string` without also implementing `visit_str`\n+\n         where E: serde::de::Error,\n     {\n         unimplemented!()", "previous_filename": "tests/compile-fail/serde.rs"}, {"sha": "6aa5adabe787c9083dbe19ffa81c9b33e6318840", "filename": "tests/ui/serde.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fserde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fserde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: you should not implement `visit_string` without also implementing `visit_str`\n+  --> $DIR/serde.rs:39:5\n+   |\n+39 |       fn visit_string<E>(self, _v: String) -> Result<Self::Value, E>\n+   |  _____^ starting here...\n+40 | |\n+41 | |         where E: serde::de::Error,\n+42 | |     {\n+43 | |         unimplemented!()\n+44 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/serde.rs:3:9\n+   |\n+3  | #![deny(serde_api_misuse)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a2c9ba663e04e8038ed3f006a6f9eae2148bb5e", "filename": "tests/ui/shadow.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -10,17 +10,17 @@ fn first(x: (isize, isize)) -> isize { x.0 }\n \n fn main() {\n     let mut x = 1;\n-    let x = &mut x; //~ERROR `x` is shadowed by itself in `&mut x`\n-    let x = { x }; //~ERROR `x` is shadowed by itself in `{ x }`\n-    let x = (&*x); //~ERROR `x` is shadowed by itself in `(&*x)`\n-    let x = { *x + 1 }; //~ERROR `x` is shadowed by `{ *x + 1 }` which reuses\n-    let x = id(x); //~ERROR `x` is shadowed by `id(x)` which reuses\n-    let x = (1, x); //~ERROR `x` is shadowed by `(1, x)` which reuses\n-    let x = first(x); //~ERROR `x` is shadowed by `first(x)` which reuses\n+    let x = &mut x;\n+    let x = { x };\n+    let x = (&*x);\n+    let x = { *x + 1 };\n+    let x = id(x);\n+    let x = (1, x);\n+    let x = first(x);\n     let y = 1;\n-    let x = y; //~ERROR `x` is shadowed by `y`\n+    let x = y;\n \n-    let x; //~ERROR `x` shadows a previous declaration\n+    let x;\n     x = 42;\n \n     let o = Some(1_u8);", "previous_filename": "tests/compile-fail/shadow.rs"}, {"sha": "212192a28da658c5299518a3c847770957d9b472", "filename": "tests/ui/shadow.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,159 @@\n+error: `x` is shadowed by itself in `&mut x`\n+  --> $DIR/shadow.rs:13:9\n+   |\n+13 |     let x = &mut x;\n+   |         ^^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:12:13\n+   |\n+12 |     let mut x = 1;\n+   |             ^\n+\n+error: `x` is shadowed by itself in `{ x }`\n+  --> $DIR/shadow.rs:14:9\n+   |\n+14 |     let x = { x };\n+   |         ^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:13:9\n+   |\n+13 |     let x = &mut x;\n+   |         ^\n+\n+error: `x` is shadowed by itself in `(&*x)`\n+  --> $DIR/shadow.rs:15:9\n+   |\n+15 |     let x = (&*x);\n+   |         ^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:14:9\n+   |\n+14 |     let x = { x };\n+   |         ^\n+\n+error: `x` is shadowed by `{ *x + 1 }` which reuses the original value\n+  --> $DIR/shadow.rs:16:9\n+   |\n+16 |     let x = { *x + 1 };\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: initialization happens here\n+  --> $DIR/shadow.rs:16:13\n+   |\n+16 |     let x = { *x + 1 };\n+   |             ^^^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:15:9\n+   |\n+15 |     let x = (&*x);\n+   |         ^\n+\n+error: `x` is shadowed by `id(x)` which reuses the original value\n+  --> $DIR/shadow.rs:17:9\n+   |\n+17 |     let x = id(x);\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:17:13\n+   |\n+17 |     let x = id(x);\n+   |             ^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:16:9\n+   |\n+16 |     let x = { *x + 1 };\n+   |         ^\n+\n+error: `x` is shadowed by `(1, x)` which reuses the original value\n+  --> $DIR/shadow.rs:18:9\n+   |\n+18 |     let x = (1, x);\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:18:13\n+   |\n+18 |     let x = (1, x);\n+   |             ^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:17:9\n+   |\n+17 |     let x = id(x);\n+   |         ^\n+\n+error: `x` is shadowed by `first(x)` which reuses the original value\n+  --> $DIR/shadow.rs:19:9\n+   |\n+19 |     let x = first(x);\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:19:13\n+   |\n+19 |     let x = first(x);\n+   |             ^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:18:9\n+   |\n+18 |     let x = (1, x);\n+   |         ^\n+\n+error: `x` is shadowed by `y`\n+  --> $DIR/shadow.rs:21:9\n+   |\n+21 |     let x = y;\n+   |         ^\n+   |\n+   = note: #[deny(shadow_unrelated)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: initialization happens here\n+  --> $DIR/shadow.rs:21:13\n+   |\n+21 |     let x = y;\n+   |             ^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:19:9\n+   |\n+19 |     let x = first(x);\n+   |         ^\n+\n+error: `x` shadows a previous declaration\n+  --> $DIR/shadow.rs:23:9\n+   |\n+23 |     let x;\n+   |         ^\n+   |\n+   = note: #[deny(shadow_unrelated)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:21:9\n+   |\n+21 |     let x = y;\n+   |         ^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "55ff4a83b87a9760783964c009052b84c64d8f85", "filename": "tests/ui/short_circuit_statement.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,27 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(short_circuit_statement)]\n+\n+fn main() {\n+    f() && g();\n+\n+\n+\n+    f() || g();\n+\n+\n+\n+    1 == 2 || g();\n+\n+\n+\n+}\n+\n+fn f() -> bool {\n+    true\n+}\n+\n+fn g() -> bool {\n+    false\n+}"}, {"sha": "4c865ebeb19f99344a41eea74c1e0fd50d18a24b", "filename": "tests/ui/short_circuit_statement.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,34 @@\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+ --> $DIR/short_circuit_statement.rs:7:5\n+  |\n+7 |     f() && g();\n+  |     ^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/short_circuit_statement.rs:4:9\n+  |\n+4 | #![deny(short_circuit_statement)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+  |     if f() { g(); }\n+\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+  --> $DIR/short_circuit_statement.rs:11:5\n+   |\n+11 |     f() || g();\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     if !f() { g(); }\n+\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+  --> $DIR/short_circuit_statement.rs:15:5\n+   |\n+15 |     1 == 2 || g();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     if !(1 == 2) { g(); }\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f893d99491bee50b7c902c40003ac9e250ca9ead", "filename": "tests/ui/strings.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,73 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(string_add)]\n+#[allow(string_add_assign)]\n+fn add_only() { // ignores assignment distinction\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add_assign)]\n+fn add_assign_only() {\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add, string_add_assign)]\n+fn both() {\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[allow(dead_code, unused_variables)]\n+#[deny(string_lit_as_bytes)]\n+fn str_lit_as_bytes() {\n+    let bs = \"hello there\".as_bytes();\n+\n+\n+\n+\n+    // no warning, because this cannot be written as a byte string literal:\n+    let ubs = \"\u2603\".as_bytes();\n+\n+    let strify = stringify!(foobar).as_bytes();\n+}\n+\n+fn main() {\n+    add_only();\n+    add_assign_only();\n+    both();\n+\n+    // the add is only caught for `String`\n+    let mut x = 1;\n+    ; x = x + 1;\n+\n+\n+\n+    assert_eq!(2, x);\n+}"}, {"sha": "b16724261d87bb843d76fd4cf024467134c90930", "filename": "tests/ui/strings.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,80 @@\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:10:13\n+   |\n+10 |         x = x + \".\";\n+   |             ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:4:8\n+   |\n+4  | #[deny(string_add)]\n+   |        ^^^^^^^^^^\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:14:13\n+   |\n+14 |     let z = y + \"...\";\n+   |             ^^^^^^^^^\n+\n+error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:24:9\n+   |\n+24 |         x = x + \".\";\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:19:8\n+   |\n+19 | #[deny(string_add_assign)]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:38:9\n+   |\n+38 |         x = x + \".\";\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:33:20\n+   |\n+33 | #[deny(string_add, string_add_assign)]\n+   |                    ^^^^^^^^^^^^^^^^^\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:42:13\n+   |\n+42 |     let z = y + \"...\";\n+   |             ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:33:8\n+   |\n+33 | #[deny(string_add, string_add_assign)]\n+   |        ^^^^^^^^^^\n+\n+error: calling `as_bytes()` on a string literal\n+  --> $DIR/strings.rs:50:14\n+   |\n+50 |     let bs = \"hello there\".as_bytes();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:48:8\n+   |\n+48 | #[deny(string_lit_as_bytes)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+help: consider using a byte string literal instead\n+   |     let bs = b\"hello there\";\n+\n+warning: manual implementation of an assign operation\n+  --> $DIR/strings.rs:68:7\n+   |\n+68 |     ; x = x + 1;\n+   |       ^^^^^^^^^\n+   |\n+   = note: #[warn(assign_op_pattern)] on by default\n+help: replace it with\n+   |     ; x += 1;\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "922ab080d73c7390f60552244aa6f349edb20929", "filename": "tests/ui/stutter.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(stutter)]\n+#![allow(dead_code)]\n+\n+mod foo {\n+    pub fn foo() {}\n+    pub fn foo_bar() {}\n+    pub fn bar_foo() {}\n+    pub struct FooCake {}\n+    pub enum CakeFoo {}\n+}\n+\n+fn main() {}"}, {"sha": "03f4c7396b40767a18e3dd5e50ef2179b3ef19ee", "filename": "tests/ui/stutter.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstutter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fstutter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,32 @@\n+error: item name starts with its containing module's name\n+ --> $DIR/stutter.rs:8:5\n+  |\n+8 |     pub fn foo_bar() {}\n+  |     ^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/stutter.rs:3:9\n+  |\n+3 | #![deny(stutter)]\n+  |         ^^^^^^^\n+\n+error: item name ends with its containing module's name\n+ --> $DIR/stutter.rs:9:5\n+  |\n+9 |     pub fn bar_foo() {}\n+  |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: item name starts with its containing module's name\n+  --> $DIR/stutter.rs:10:5\n+   |\n+10 |     pub struct FooCake {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item name ends with its containing module's name\n+  --> $DIR/stutter.rs:11:5\n+   |\n+11 |     pub enum CakeFoo {}\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "95478dda0d32ea964463b03ef7b1853b4edbbfe8", "filename": "tests/ui/swap.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,84 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(blacklisted_name, unused_assignments)]\n+\n+struct Foo(u32);\n+\n+fn array() {\n+    let mut foo = [1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+\n+\n+\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn slice() {\n+    let foo = &mut [1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+\n+\n+\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn vec() {\n+    let mut foo = vec![1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+\n+\n+\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn main() {\n+    array();\n+    slice();\n+    vec();\n+\n+    let mut a = 42;\n+    let mut b = 1337;\n+\n+    a = b;\n+    b = a;\n+\n+\n+\n+\n+\n+    ; let t = a;\n+    a = b;\n+    b = t;\n+\n+\n+\n+\n+\n+    let mut c = Foo(42);\n+\n+    c.0 = a;\n+    a = c.0;\n+\n+\n+\n+\n+\n+    ; let t = c.0;\n+    c.0 = a;\n+    a = t;\n+\n+\n+\n+\n+}"}, {"sha": "714b6859ffd10ae55d15d2d4381232495f3b4590", "filename": "tests/ui/swap.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,105 @@\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:11:5\n+   |\n+11 |       let temp = foo[0];\n+   |  _____^ starting here...\n+12 | |     foo[0] = foo[1];\n+13 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/swap.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:23:5\n+   |\n+23 |       let temp = foo[0];\n+   |  _____^ starting here...\n+24 | |     foo[0] = foo[1];\n+25 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:35:5\n+   |\n+35 |       let temp = foo[0];\n+   |  _____^ starting here...\n+36 | |     foo[0] = foo[1];\n+37 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping `a` and `b` manually\n+  --> $DIR/swap.rs:60:7\n+   |\n+60 |       ; let t = a;\n+   |  _______^ starting here...\n+61 | |     a = b;\n+62 | |     b = t;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     ; std::mem::swap(&mut a, &mut b);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are swapping `c.0` and `a` manually\n+  --> $DIR/swap.rs:77:7\n+   |\n+77 |       ; let t = c.0;\n+   |  _______^ starting here...\n+78 | |     c.0 = a;\n+79 | |     a = t;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     ; std::mem::swap(&mut c.0, &mut a);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:53:5\n+   |\n+53 |       a = b;\n+   |  _____^ starting here...\n+54 | |     b = a;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(almost_swapped)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/swap.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try\n+   |     std::mem::swap(&mut a, &mut b);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `c.0` and `a`\n+  --> $DIR/swap.rs:70:5\n+   |\n+70 |       c.0 = a;\n+   |  _____^ starting here...\n+71 | |     a = c.0;\n+   | |___________^ ...ending here\n+   |\n+   = note: #[deny(almost_swapped)] implied by #[deny(clippy)]\n+help: try\n+   |     std::mem::swap(&mut c.0, &mut a);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "752d897d014454fdb50e42254b30ec30131dfc9f", "filename": "tests/ui/temporary_assignment.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -26,8 +26,8 @@ fn main() {\n     let mut s = Struct { field: 0 };\n     let mut t = (0, 0);\n \n-    Struct { field: 0 }.field = 1; //~ERROR assignment to temporary\n-    (0, 0).0 = 1; //~ERROR assignment to temporary\n+    Struct { field: 0 }.field = 1;\n+    (0, 0).0 = 1;\n \n     // no error\n     s.field = 1;", "previous_filename": "tests/compile-fail/temporary_assignment.rs"}, {"sha": "ea39d798e2d85b6ba0986f9c1bcaefb408950553", "filename": "tests/ui/temporary_assignment.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: assignment to temporary\n+  --> $DIR/temporary_assignment.rs:29:5\n+   |\n+29 |     Struct { field: 0 }.field = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/temporary_assignment.rs:4:9\n+   |\n+4  | #![deny(temporary_assignment)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: assignment to temporary\n+  --> $DIR/temporary_assignment.rs:30:5\n+   |\n+30 |     (0, 0).0 = 1;\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a69600899afaa9bb583b4c9e73b565a56ae752bf", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,40 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+#![allow(unused)]\n+\n+fn the_answer(ref mut x: u8) {\n+  *x = 42;\n+}\n+\n+fn main() {\n+  let mut x = 0;\n+  the_answer(x);\n+  // Closures should not warn\n+  let y = |ref x| { println!(\"{:?}\", x) };\n+  y(1u8);\n+\n+  let ref x = 1;\n+\n+\n+\n+\n+  let ref y: (&_, u8) = (&1, 2);\n+\n+\n+\n+\n+  let ref z = 1 + 2;\n+\n+\n+\n+\n+  let ref mut z = 1 + 2;\n+\n+\n+\n+\n+  let (ref x, _) = (1,2); // okay, not top level\n+  println!(\"The answer is {}.\", x);\n+}"}, {"sha": "86dd880ed12789a142fde54b99a804efae3e1862", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,55 @@\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+ --> $DIR/toplevel_ref_arg.rs:7:15\n+  |\n+7 | fn the_answer(ref mut x: u8) {\n+  |               ^^^^^^^^^\n+  |\n+  = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/toplevel_ref_arg.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:18:7\n+   |\n+18 |   let ref x = 1;\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let x = &1;\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:23:7\n+   |\n+23 |   let ref y: (&_, u8) = (&1, 2);\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let y: &(&_, u8) = &(&1, 2);\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:28:7\n+   |\n+28 |   let ref z = 1 + 2;\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let z = &(1 + 2);\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:33:7\n+   |\n+33 |   let ref mut z = 1 + 2;\n+   |       ^^^^^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let z = &mut (1 + 2);\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "1fae47c8aa0483deaf4f34ff93154ece53ea2e25", "filename": "tests/ui/transmute.rs", "status": "renamed", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -20,68 +20,68 @@ fn my_vec() -> MyVec<i32> {\n #[deny(useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n-    //~^ ERROR transmute from a type (`&'a T`) to itself\n+\n \n     let _: &'a U = core::intrinsics::transmute(t);\n \n     let _: *const T = core::intrinsics::transmute(t);\n-    //~^ ERROR transmute from a reference to a pointer\n-    //~| HELP try\n-    //~| SUGGESTION = t as *const T\n+\n+\n+\n \n     let _: *mut T = core::intrinsics::transmute(t);\n-    //~^ ERROR transmute from a reference to a pointer\n-    //~| HELP try\n-    //~| SUGGESTION = t as *const T as *mut T\n+\n+\n+\n \n     let _: *const U = core::intrinsics::transmute(t);\n-    //~^ ERROR transmute from a reference to a pointer\n-    //~| HELP try\n-    //~| SUGGESTION = t as *const T as *const U\n+\n+\n+\n }\n \n #[deny(transmute_ptr_to_ref)]\n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n-    //~^ ERROR transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &*p;\n+\n+\n+\n     let _: &T = &*p;\n \n     let _: &mut T = std::mem::transmute(m);\n-    //~^ ERROR transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &mut *m;\n+\n+\n+\n     let _: &mut T = &mut *m;\n \n     let _: &T = std::mem::transmute(m);\n-    //~^ ERROR transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &*m;\n+\n+\n+\n     let _: &T = &*m;\n \n     let _: &mut T = std::mem::transmute(p as *mut T);\n-    //~^ ERROR transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &mut *(p as *mut T);\n+\n+\n+\n     let _ = &mut *(p as *mut T);\n \n     let _: &T = std::mem::transmute(o);\n-    //~^ ERROR transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &*(o as *const T);\n+\n+\n+\n     let _: &T = &*(o as *const T);\n \n     let _: &mut T = std::mem::transmute(om);\n-    //~^ ERROR transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &mut *(om as *mut T);\n+\n+\n+\n     let _: &mut T = &mut *(om as *mut T);\n \n     let _: &T = std::mem::transmute(om);\n-    //~^ ERROR transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-    //~| HELP try\n-    //~| SUGGESTION = &*(om as *const T);\n+\n+\n+\n     let _: &T = &*(om as *const T);\n }\n \n@@ -93,40 +93,40 @@ fn issue1231() {\n \n     let raw = 0 as *const i32;\n     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-    //~^ ERROR transmute from a pointer type\n-    //~| HELP try\n-    //~| SUGGESTION unsafe { &*(raw as *const Foo<_>) };\n+\n+\n+\n \n     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-    //~^ ERROR transmute from a pointer type\n-    //~| HELP try\n-    //~| SUGGESTION unsafe { &*(raw as *const Foo<&_>) };\n+\n+\n+\n \n     type Bar<'a> = &'a u8;\n     let raw = 0 as *const i32;\n     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-    //~^ ERROR transmute from a pointer type\n-    //~| HELP try\n-    //~| SUGGESTION unsafe { &*(raw as *const u8) };\n+\n+\n+\n }\n \n #[deny(useless_transmute)]\n fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n+\n \n         let _: Vec<i32> = core::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n+\n \n         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n+\n \n         let _: Vec<i32> = std::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n+\n \n         let _: Vec<i32> = my_transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n+\n \n         let _: Vec<u32> = core::intrinsics::transmute(my_vec());\n         let _: Vec<u32> = core::mem::transmute(my_vec());\n@@ -135,15 +135,15 @@ fn useless() {\n         let _: Vec<u32> = my_transmute(my_vec());\n \n         let _: *const usize = std::mem::transmute(5_isize);\n-        //~^ ERROR transmute from an integer to a pointer\n-        //~| HELP try\n-        //~| SUGGESTION 5_isize as *const usize\n+\n+\n+\n         let _  = 5_isize as *const usize;\n \n         let _: *const usize = std::mem::transmute(1+1usize);\n-        //~^ ERROR transmute from an integer to a pointer\n-        //~| HELP try\n-        //~| SUGGESTION (1+1usize) as *const usize\n+\n+\n+\n         let _  = (1+1_usize) as *const usize;\n     }\n }\n@@ -158,16 +158,16 @@ fn crosspointer() {\n \n     unsafe {\n         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n-        //~^ ERROR transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n+\n \n         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n-        //~^ ERROR transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n+\n \n         let _: *const Usize = core::intrinsics::transmute(my_int());\n-        //~^ ERROR transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n+\n \n         let _: *mut Usize = core::intrinsics::transmute(my_int());\n-        //~^ ERROR transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n+\n     }\n }\n ", "previous_filename": "tests/compile-fail/transmute.rs"}, {"sha": "ec9e794185506ef2689ef3b77e5eb4f204bebb63", "filename": "tests/ui/transmute.stderr", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,225 @@\n+error: transmute from a type (`&'a T`) to itself\n+  --> $DIR/transmute.rs:22:20\n+   |\n+22 |     let _: &'a T = core::intrinsics::transmute(t);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:20:8\n+   |\n+20 | #[deny(useless_transmute)]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:27:23\n+   |\n+27 |     let _: *const T = core::intrinsics::transmute(t);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *const T = t as *const T;\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:32:21\n+   |\n+32 |     let _: *mut T = core::intrinsics::transmute(t);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *mut T = t as *const T as *mut T;\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:37:23\n+   |\n+37 |     let _: *const U = core::intrinsics::transmute(t);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *const U = t as *const T as *const U;\n+\n+error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:45:17\n+   |\n+45 |     let _: &T = std::mem::transmute(p);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:43:8\n+   |\n+43 | #[deny(transmute_ptr_to_ref)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |     let _: &T = &*p;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:51:21\n+   |\n+51 |     let _: &mut T = std::mem::transmute(m);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *m;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:57:17\n+   |\n+57 |     let _: &T = std::mem::transmute(m);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*m;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:63:21\n+   |\n+63 |     let _: &mut T = std::mem::transmute(p as *mut T);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *(p as *mut T);\n+\n+error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:69:17\n+   |\n+69 |     let _: &T = std::mem::transmute(o);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*(o as *const T);\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:75:21\n+   |\n+75 |     let _: &mut T = std::mem::transmute(om);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *(om as *mut T);\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:81:17\n+   |\n+81 |     let _: &T = std::mem::transmute(om);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*(om as *const T);\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n+  --> $DIR/transmute.rs:95:32\n+   |\n+95 |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:88:8\n+   |\n+88 | #[deny(transmute_ptr_to_ref)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |     let _: &Foo<u8> = unsafe { &*(raw as *const Foo<_>) };\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n+   --> $DIR/transmute.rs:100:33\n+    |\n+100 |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |     let _: &Foo<&u8> = unsafe { &*(raw as *const Foo<&_>) };\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n+   --> $DIR/transmute.rs:107:14\n+    |\n+107 |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |     unsafe { &*(raw as *const u8) };\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:116:27\n+    |\n+116 |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/transmute.rs:113:8\n+    |\n+113 | #[deny(useless_transmute)]\n+    |        ^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:119:27\n+    |\n+119 |         let _: Vec<i32> = core::mem::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:122:27\n+    |\n+122 |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:125:27\n+    |\n+125 |         let _: Vec<i32> = std::mem::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:128:27\n+    |\n+128 |         let _: Vec<i32> = my_transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from an integer to a pointer\n+   --> $DIR/transmute.rs:137:31\n+    |\n+137 |         let _: *const usize = std::mem::transmute(5_isize);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |         let _: *const usize = 5_isize as *const usize;\n+\n+error: transmute from an integer to a pointer\n+   --> $DIR/transmute.rs:143:31\n+    |\n+143 |         let _: *const usize = std::mem::transmute(1+1usize);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |         let _: *const usize = (1+1usize) as *const usize;\n+\n+error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n+   --> $DIR/transmute.rs:160:24\n+    |\n+160 |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/transmute.rs:153:8\n+    |\n+153 | #[deny(crosspointer_transmute)]\n+    |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n+   --> $DIR/transmute.rs:163:24\n+    |\n+163 |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n+   --> $DIR/transmute.rs:166:31\n+    |\n+166 |         let _: *const Usize = core::intrinsics::transmute(my_int());\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n+   --> $DIR/transmute.rs:169:29\n+    |\n+169 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n+"}, {"sha": "9c63a6fe0d9084a4509a9ad26b5a757362123c06", "filename": "tests/ui/transmute_32bit.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -6,15 +6,15 @@\n fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f32);\n-        //~^ ERROR transmute from a `f32` to a pointer\n+\n \n         let _: *mut usize = std::mem::transmute(6.0f32);\n-        //~^ ERROR transmute from a `f32` to a pointer\n+\n \n         let _: *const usize = std::mem::transmute('x');\n-        //~^ ERROR transmute from a `char` to a pointer\n+\n \n         let _: *mut usize = std::mem::transmute('x');\n-        //~^ ERROR transmute from a `char` to a pointer\n+\n     }\n }", "previous_filename": "tests/compile-fail/transmute_32bit.rs"}, {"sha": "bf7066245a1f7c49e5bc93cef8003617d4090b22", "filename": "tests/ui/transmute_64bit.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -7,9 +7,9 @@\n fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f64);\n-        //~^ ERROR transmute from a `f64` to a pointer\n+\n \n         let _: *mut usize = std::mem::transmute(6.0f64);\n-        //~^ ERROR transmute from a `f64` to a pointer\n+\n     }\n }", "previous_filename": "tests/compile-fail/transmute_64bit.rs"}, {"sha": "1559809eb836e8d790a4b97239ebf654127b5283", "filename": "tests/ui/transmute_64bit.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: transmute from a `f64` to a pointer\n+ --> $DIR/transmute_64bit.rs:9:31\n+  |\n+9 |         let _: *const usize = std::mem::transmute(6.0f64);\n+  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/transmute_64bit.rs:6:8\n+  |\n+6 | #[deny(wrong_transmute)]\n+  |        ^^^^^^^^^^^^^^^\n+\n+error: transmute from a `f64` to a pointer\n+  --> $DIR/transmute_64bit.rs:12:29\n+   |\n+12 |         let _: *mut usize = std::mem::transmute(6.0f64);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a12276b9851eb707a5c7d8d382ec519be07e54ad", "filename": "tests/ui/unicode.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -4,19 +4,19 @@\n #[deny(zero_width_space)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n-               //~^ ERROR zero-width space detected\n+\n     print!(\"This\\u{200B}is\\u{200B}fine\");\n }\n \n #[deny(unicode_not_nfc)]\n fn canon() {\n-    print!(\"\u0300a\u0300h?\"); //~ERROR non-nfc unicode sequence detected\n+    print!(\"\u0300a\u0300h?\");\n     print!(\"a\\u{0300}h?\"); // also okay\n }\n \n #[deny(non_ascii_literal)]\n fn uni() {\n-    print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected\n+    print!(\"\u00dcben!\");\n     print!(\"\\u{DC}ben!\"); // this is okay\n }\n ", "previous_filename": "tests/compile-fail/unicode.rs"}, {"sha": "407220d1ae0773d340abf641e827685b78ba1ac6", "filename": "tests/ui/unicode.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,40 @@\n+error: zero-width space detected\n+ --> $DIR/unicode.rs:6:12\n+  |\n+6 |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n+  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(zero_width_space)] on by default\n+  = help: Consider replacing the string with:\n+          \"\"Here >/u{200B}< is a ZWS, and /u{200B}another\"\"\n+\n+error: non-nfc unicode sequence detected\n+  --> $DIR/unicode.rs:13:12\n+   |\n+13 |     print!(\"\u0300a\u0300h?\");\n+   |            ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unicode.rs:11:8\n+   |\n+11 | #[deny(unicode_not_nfc)]\n+   |        ^^^^^^^^^^^^^^^\n+   = help: Consider replacing the string with:\n+           \"\"\u0300\u00e0h?\"\"\n+\n+error: literal non-ASCII character detected\n+  --> $DIR/unicode.rs:19:12\n+   |\n+19 |     print!(\"\u00dcben!\");\n+   |            ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unicode.rs:17:8\n+   |\n+17 | #[deny(non_ascii_literal)]\n+   |        ^^^^^^^^^^^^^^^^^\n+   = help: Consider replacing the string with:\n+           \"\"/u{dc}ben!\"\"\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d5176a5eaca51b7e372db0d9d09b6226c4eb7757", "filename": "tests/ui/unit_cmp.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -13,9 +13,9 @@ fn main() {\n     }\n \n     // this warns\n-    if { true; } == { false; } {  //~ERROR ==-comparison of unit values detected. This will always be true\n+    if { true; } == { false; } {\n     }\n \n-    if { true; } > { false; } {  //~ERROR >-comparison of unit values detected. This will always be false\n+    if { true; } > { false; } {\n     }\n }", "previous_filename": "tests/compile-fail/unit_cmp.rs"}, {"sha": "fa5f108fad8ceb533a178788b2b05db2c1a0ac24", "filename": "tests/ui/unit_cmp.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,20 @@\n+error: ==-comparison of unit values detected. This will always be true\n+  --> $DIR/unit_cmp.rs:16:8\n+   |\n+16 |     if { true; } == { false; } {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unit_cmp.rs:4:9\n+   |\n+4  | #![deny(unit_cmp)]\n+   |         ^^^^^^^^\n+\n+error: >-comparison of unit values detected. This will always be false\n+  --> $DIR/unit_cmp.rs:19:8\n+   |\n+19 |     if { true; } > { false; } {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9c1661e99ce7a63e03e234a5e7450a07af4ebe87", "filename": "tests/ui/unneeded_field_pattern.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -14,10 +14,10 @@ fn main() {\n     let f = Foo { a: 0, b: 0, c: 0 };\n \n     match f {\n-        Foo { a: _, b: 0, .. } => {} //~ERROR You matched a field with a wildcard pattern\n-                                     //~^ HELP Try with `Foo { b: 0, .. }`\n-        Foo { a: _, b: _, c: _ } => {} //~ERROR All the struct fields are matched to a\n-                                       //~^ HELP Try with `Foo { .. }`\n+        Foo { a: _, b: 0, .. } => {}\n+\n+        Foo { a: _, b: _, c: _ } => {}\n+\n     }\n     match f {\n         Foo { b: 0, .. } => {} // should be OK", "previous_filename": "tests/compile-fail/unneeded_field_pattern.rs"}, {"sha": "fdf976fd5194040f4f98aaca55b3cde53fc0dcdd", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -0,0 +1,23 @@\n+error: You matched a field with a wildcard pattern. Consider using `..` instead\n+  --> $DIR/unneeded_field_pattern.rs:17:15\n+   |\n+17 |         Foo { a: _, b: 0, .. } => {}\n+   |               ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unneeded_field_pattern.rs:4:9\n+   |\n+4  | #![deny(unneeded_field_pattern)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: Try with `Foo { b: 0, .. }`\n+\n+error: All the struct fields are matched to a wildcard pattern, consider using `..`.\n+  --> $DIR/unneeded_field_pattern.rs:19:9\n+   |\n+19 |         Foo { a: _, b: _, c: _ } => {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Try with `Foo { .. }` instead\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7ff20223bd2c376ca80e79b122eb0b38b3dc7967", "filename": "tests/ui/unsafe_removed_from_name.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "patch": "@@ -5,10 +5,10 @@\n #![deny(unsafe_removed_from_name)]\n \n use std::cell::{UnsafeCell as TotallySafeCell};\n-//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCell`\n+\n \n use std::cell::UnsafeCell as TotallySafeCellAgain;\n-//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n+\n \n // Shouldn't error\n use std::cell::{UnsafeCell as SuperDangerousUnsafeCell};\n@@ -23,7 +23,7 @@ mod mod_with_some_unsafe_things {\n }\n \n use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;\n-//~^ ERROR removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n+\n \n // Shouldn't error\n use mod_with_some_unsafe_things::Safe as IPromiseItsSafeThisTime;", "previous_filename": "tests/compile-fail/unsafe_removed_from_name.rs"}, {"sha": "4080353efbd70151e36673a026baab2b55ef314a", "filename": "tests/ui/unsafe_removed_from_name.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funsafe_removed_from_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funsafe_removed_from_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "7456a3602d664a657879adbc89617a39be136821", "filename": "tests/ui/unused_io_amount.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/unused_io_amount.rs"}, {"sha": "54d8158908faaf54e4d13b96792e63ef3be79cf6", "filename": "tests/ui/unused_io_amount.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "ce718c4903a1c825358fed87a2e07f79a8617342", "filename": "tests/ui/unused_labels.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/unused_labels.rs"}, {"sha": "7b124477ded0c68087677c9b2d963d057cd0f925", "filename": "tests/ui/unused_labels.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "ec44420a376e5c1bc403077d8a2a2e0d6220f93c", "filename": "tests/ui/unused_lt.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/unused_lt.rs"}, {"sha": "1e13f4c80b4fda7c37962b7efe1a6f69774d34ff", "filename": "tests/ui/unused_lt.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_lt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Funused_lt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "ddd69c399a5c17969e7b75b5fc2fad30646f5c6d", "filename": "tests/ui/update-all-references.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-all-references.sh?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui/update-references.sh", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-references.sh?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "fe0db6346ca3b7cfdd31398548c30e0391e28275", "filename": "tests/ui/used_underscore_binding.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/used_underscore_binding.rs"}, {"sha": "35179ac37035329dc4370cade18637989491febf", "filename": "tests/ui/used_underscore_binding.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "2b8a4cf56d7f1799b5a8a3979ad484fbe5930b11", "filename": "tests/ui/useless_attribute.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/useless_attribute.rs"}, {"sha": "05d3da4ca3ff68bcdf5cf0b058541c3e5114266b", "filename": "tests/ui/useless_attribute.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "3717192fb9813e6ffb7e7cf36582c728225d93a1", "filename": "tests/ui/vec.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/vec.rs"}, {"sha": "c42b156fced1b113f19d0ed3cd255e0aa990398f", "filename": "tests/ui/vec.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "2b75e5b83e8f21cc5372c2ea7a4d706510bf21a8", "filename": "tests/ui/while_loop.rs", "status": "renamed", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223", "previous_filename": "tests/compile-fail/while_loop.rs"}, {"sha": "a3bb0c34f3126bf0d6db86e928d172805c57eae4", "filename": "tests/ui/while_loop.stderr", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "fcacb030b850745f69b6518cb31ef95ca8960310", "filename": "tests/ui/wrong_macro_span.rs_", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwrong_macro_span.rs_", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwrong_macro_span.rs_", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_macro_span.rs_?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}, {"sha": "8e81679aaab299c1ca2835ff4c4dd06712ae4c44", "filename": "tests/ui/wrong_self_convention.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0e52a1ed5077ab587f5524a9ac623cc71b223/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=37a0e52a1ed5077ab587f5524a9ac623cc71b223"}]}