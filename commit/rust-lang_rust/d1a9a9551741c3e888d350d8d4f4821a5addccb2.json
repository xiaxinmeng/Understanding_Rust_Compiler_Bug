{"sha": "d1a9a9551741c3e888d350d8d4f4821a5addccb2", "node_id": "C_kwDOAAsO6NoAKGQxYTlhOTU1MTc0MWMzZTg4OGQzNTBkOGQ0ZjQ4MjFhNWFkZGNjYjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-22T19:34:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-24T22:54:44Z"}, "message": "Make Lazy not care about lifetimes until decode", "tree": {"sha": "4c1ceffc14c22d16ff8adc6677598917f96eb674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1ceffc14c22d16ff8adc6677598917f96eb674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a9a9551741c3e888d350d8d4f4821a5addccb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a9a9551741c3e888d350d8d4f4821a5addccb2", "html_url": "https://github.com/rust-lang/rust/commit/d1a9a9551741c3e888d350d8d4f4821a5addccb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a9a9551741c3e888d350d8d4f4821a5addccb2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa70b89d19a52be0dea03022d807a3e615763727", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70b89d19a52be0dea03022d807a3e615763727", "html_url": "https://github.com/rust-lang/rust/commit/fa70b89d19a52be0dea03022d807a3e615763727"}], "stats": {"total": 271, "additions": 217, "deletions": 54}, "files": [{"sha": "947d563ae3cd132465576b8f36282669e602e41c", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -323,7 +323,7 @@ impl<'a> CrateLoader<'a> {\n         None\n     }\n \n-    fn verify_no_symbol_conflicts(&self, root: &CrateRoot<'_>) -> Result<(), CrateError> {\n+    fn verify_no_symbol_conflicts(&self, root: &CrateRoot) -> Result<(), CrateError> {\n         // Check for (potential) conflicts with the local crate\n         if self.sess.local_stable_crate_id() == root.stable_crate_id() {\n             return Err(CrateError::SymbolConflictsCurrent(root.name()));\n@@ -342,7 +342,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn verify_no_stable_crate_id_hash_conflicts(\n         &mut self,\n-        root: &CrateRoot<'_>,\n+        root: &CrateRoot,\n         cnum: CrateNum,\n     ) -> Result<(), CrateError> {\n         if let Some(existing) = self.cstore.stable_crate_ids.insert(root.stable_crate_id(), cnum) {\n@@ -623,7 +623,7 @@ impl<'a> CrateLoader<'a> {\n     fn resolve_crate_deps(\n         &mut self,\n         root: &CratePaths,\n-        crate_root: &CrateRoot<'_>,\n+        crate_root: &CrateRoot,\n         metadata: &MetadataBlob,\n         krate: CrateNum,\n         dep_kind: CrateDepKind,"}, {"sha": "4c5d13dfa6c8c4f5ee72be994cd13584fec287ae", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -2,6 +2,7 @@\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(generators)]\n+#![feature(generic_associated_types)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(nll)]"}, {"sha": "1420871b0256e2786de5d7f7494af2a705cbf4ed", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -25,7 +25,7 @@ use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n-use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n+use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n@@ -86,7 +86,7 @@ pub(crate) struct CrateMetadata {\n     /// lifetime is only used behind `Lazy`, and therefore acts like a\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n-    root: CrateRoot<'static>,\n+    root: CrateRoot,\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n@@ -261,11 +261,14 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (CrateMetadataRef<'a>, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> LazyValue<T> {\n-    fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n+impl<T: ParameterizedOverTcx> LazyValue<T> {\n+    fn decode<'a, 'tcx, M: Metadata<'a, 'tcx>>(self, metadata: M) -> T::Value<'tcx>\n+    where\n+        T::Value<'tcx>: Decodable<DecodeContext<'a, 'tcx>>,\n+    {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n-        T::decode(&mut dcx)\n+        T::Value::decode(&mut dcx)\n     }\n }\n \n@@ -292,15 +295,24 @@ impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Iterator for DecodeIterato\n impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> ExactSizeIterator\n     for DecodeIterator<'a, 'tcx, T>\n {\n+    fn len(&self) -> usize {\n+        self.elem_counter.len()\n+    }\n }\n \n unsafe impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> TrustedLen\n     for DecodeIterator<'a, 'tcx, T>\n {\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> LazyArray<T> {\n-    fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> DecodeIterator<'a, 'tcx, T> {\n+impl<T: ParameterizedOverTcx> LazyArray<T> {\n+    fn decode<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n+        self,\n+        metadata: M,\n+    ) -> DecodeIterator<'a, 'tcx, T::Value<'tcx>>\n+    where\n+        T::Value<'tcx>: Decodable<DecodeContext<'a, 'tcx>>,\n+    {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         DecodeIterator { elem_counter: (0..self.num_elems), dcx, _phantom: PhantomData }\n@@ -671,14 +683,14 @@ impl MetadataBlob {\n             .decode(self)\n     }\n \n-    pub(crate) fn get_root<'tcx>(&self) -> CrateRoot<'tcx> {\n+    pub(crate) fn get_root(&self) -> CrateRoot {\n         let slice = &self.blob()[..];\n         let offset = METADATA_HEADER.len();\n         let pos = (((slice[offset + 0] as u32) << 24)\n             | ((slice[offset + 1] as u32) << 16)\n             | ((slice[offset + 2] as u32) << 8)\n             | ((slice[offset + 3] as u32) << 0)) as usize;\n-        LazyValue::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)\n+        LazyValue::<CrateRoot>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)\n     }\n \n     pub(crate) fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {\n@@ -705,7 +717,7 @@ impl MetadataBlob {\n     }\n }\n \n-impl CrateRoot<'_> {\n+impl CrateRoot {\n     pub(crate) fn is_proc_macro_crate(&self) -> bool {\n         self.proc_macro_data.is_some()\n     }\n@@ -1677,7 +1689,7 @@ impl CrateMetadata {\n         sess: &Session,\n         cstore: &CStore,\n         blob: MetadataBlob,\n-        root: CrateRoot<'static>,\n+        root: CrateRoot,\n         raw_proc_macros: Option<&'static [ProcMacro]>,\n         cnum: CrateNum,\n         cnum_map: CrateNumMap,"}, {"sha": "15fd190b0492ac13098e1eb6e68095c4ba6a4adb", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -3,6 +3,7 @@ use crate::rmeta::EncodeContext;\n use crate::rmeta::MetadataBlob;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n+use rustc_middle::parameterized_over_tcx;\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n use rustc_span::def_id::{DefIndex, DefPathHash};\n \n@@ -11,6 +12,10 @@ pub(crate) enum DefPathHashMapRef<'tcx> {\n     BorrowedFromTcx(&'tcx DefPathHashMap),\n }\n \n+parameterized_over_tcx! {\n+    DefPathHashMapRef,\n+}\n+\n impl DefPathHashMapRef<'_> {\n     #[inline]\n     pub fn def_path_hash_to_def_index(&self, def_path_hash: &DefPathHash) -> DefIndex {"}, {"sha": "1e83434b9d062ac59c1c8a6ee7bc5c37f7cea8ee", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -47,7 +47,7 @@ pub(super) struct EncodeContext<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     feat: &'tcx rustc_feature::Features,\n \n-    tables: TableBuilders<'tcx>,\n+    tables: TableBuilders,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -388,10 +388,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.emit_usize(distance)\n     }\n \n-    fn lazy<T: Encodable<EncodeContext<'a, 'tcx>>, B: Borrow<T>>(\n-        &mut self,\n-        value: B,\n-    ) -> LazyValue<T> {\n+    fn lazy<T: ParameterizedOverTcx, B: Borrow<T::Value<'tcx>>>(&mut self, value: B) -> LazyValue<T>\n+    where\n+        T::Value<'tcx>: Encodable<EncodeContext<'a, 'tcx>>,\n+    {\n         let pos = NonZeroUsize::new(self.position()).unwrap();\n \n         assert_eq!(self.lazy_state, LazyState::NoNode);\n@@ -404,14 +404,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         LazyValue::from_position(pos)\n     }\n \n-    fn lazy_array<\n-        T: Encodable<EncodeContext<'a, 'tcx>>,\n-        I: IntoIterator<Item = B>,\n-        B: Borrow<T>,\n-    >(\n+    fn lazy_array<T: ParameterizedOverTcx, I: IntoIterator<Item = B>, B: Borrow<T::Value<'tcx>>>(\n         &mut self,\n         values: I,\n-    ) -> LazyArray<T> {\n+    ) -> LazyArray<T>\n+    where\n+        T::Value<'tcx>: Encodable<EncodeContext<'a, 'tcx>>,\n+    {\n         let pos = NonZeroUsize::new(self.position()).unwrap();\n \n         assert_eq!(self.lazy_state, LazyState::NoNode);\n@@ -456,7 +455,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_def_path_hash_map(&mut self) -> LazyValue<DefPathHashMapRef<'tcx>> {\n+    fn encode_def_path_hash_map(&mut self) -> LazyValue<DefPathHashMapRef<'static>> {\n         self.lazy(DefPathHashMapRef::BorrowedFromTcx(\n             self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),\n         ))\n@@ -535,7 +534,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(adapted.iter().map(|rc| &**rc))\n     }\n \n-    fn encode_crate_root(&mut self) -> LazyValue<CrateRoot<'tcx>> {\n+    fn encode_crate_root(&mut self) -> LazyValue<CrateRoot> {\n         let tcx = self.tcx;\n         let mut i = self.position();\n \n@@ -1859,7 +1858,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_exported_symbols(\n         &mut self,\n         exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportInfo)],\n-    ) -> LazyArray<(ExportedSymbol<'tcx>, SymbolExportInfo)> {\n+    ) -> LazyArray<(ExportedSymbol<'static>, SymbolExportInfo)> {\n         empty_proc_macro!(self);\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates."}, {"sha": "fb2ffe1d73d96b46c514112537e2139d48cdd772", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::thir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n-use rustc_middle::ty::{GeneratorDiagnosticData, TyCtxt};\n+use rustc_middle::ty::{GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n use rustc_session::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n@@ -83,6 +83,10 @@ struct LazyValue<T> {\n     _marker: PhantomData<fn() -> T>,\n }\n \n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for LazyValue<T> {\n+    type Value<'tcx> = LazyValue<T::Value<'tcx>>;\n+}\n+\n impl<T> LazyValue<T> {\n     fn from_position(position: NonZeroUsize) -> LazyValue<T> {\n         LazyValue { position, _marker: PhantomData }\n@@ -105,6 +109,10 @@ struct LazyArray<T> {\n     _marker: PhantomData<fn() -> T>,\n }\n \n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for LazyArray<T> {\n+    type Value<'tcx> = LazyArray<T::Value<'tcx>>;\n+}\n+\n impl<T> LazyArray<T> {\n     fn from_position_and_num_elems(position: NonZeroUsize, num_elems: usize) -> LazyArray<T> {\n         LazyArray { position, num_elems, _marker: PhantomData }\n@@ -126,6 +134,10 @@ struct LazyTable<I, T> {\n     _marker: PhantomData<fn(I) -> T>,\n }\n \n+impl<I: 'static, T: ParameterizedOverTcx> ParameterizedOverTcx for LazyTable<I, T> {\n+    type Value<'tcx> = LazyTable<I, T::Value<'tcx>>;\n+}\n+\n impl<I, T> LazyTable<I, T> {\n     fn from_position_and_encoded_size(\n         position: NonZeroUsize,\n@@ -199,7 +211,7 @@ pub(crate) struct ProcMacroData {\n /// a normal crate, much of what we serialized would be unusable in addition\n /// to being unused.\n #[derive(MetadataEncodable, MetadataDecodable)]\n-pub(crate) struct CrateRoot<'tcx> {\n+pub(crate) struct CrateRoot {\n     name: Symbol,\n     triple: TargetTriple,\n     extra_filename: String,\n@@ -226,16 +238,16 @@ pub(crate) struct CrateRoot<'tcx> {\n     interpret_alloc_index: LazyArray<u32>,\n     proc_macro_data: Option<ProcMacroData>,\n \n-    tables: LazyTables<'tcx>,\n+    tables: LazyTables,\n     debugger_visualizers: LazyArray<rustc_span::DebuggerVisualizerFile>,\n \n-    exported_symbols: LazyArray<(ExportedSymbol<'tcx>, SymbolExportInfo)>,\n+    exported_symbols: LazyArray<(ExportedSymbol<'static>, SymbolExportInfo)>,\n \n     syntax_contexts: SyntaxContextTable,\n     expn_data: ExpnDataTable,\n     expn_hashes: ExpnHashTable,\n \n-    def_path_hash_map: LazyValue<DefPathHashMapRef<'tcx>>,\n+    def_path_hash_map: LazyValue<DefPathHashMapRef<'static>>,\n \n     source_map: LazyArray<rustc_span::SourceFile>,\n \n@@ -301,17 +313,17 @@ pub(crate) struct IncoherentImpls {\n macro_rules! define_tables {\n     ($($name:ident: Table<$IDX:ty, $T:ty>),+ $(,)?) => {\n         #[derive(MetadataEncodable, MetadataDecodable)]\n-        pub(crate) struct LazyTables<'tcx> {\n+        pub(crate) struct LazyTables {\n             $($name: LazyTable<$IDX, $T>),+\n         }\n \n         #[derive(Default)]\n-        struct TableBuilders<'tcx> {\n+        struct TableBuilders {\n             $($name: TableBuilder<$IDX, $T>),+\n         }\n \n-        impl<'tcx> TableBuilders<'tcx> {\n-            fn encode(&self, buf: &mut Encoder) -> LazyTables<'tcx> {\n+        impl TableBuilders {\n+            fn encode(&self, buf: &mut Encoder) -> LazyTables {\n                 LazyTables {\n                     $($name: self.$name.encode(buf)),+\n                 }\n@@ -333,23 +345,23 @@ define_tables! {\n     lookup_const_stability: Table<DefIndex, LazyValue<attr::ConstStability>>,\n     lookup_deprecation_entry: Table<DefIndex, LazyValue<attr::Deprecation>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n-    explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'tcx>, Span)>>,\n-    explicit_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'tcx>>>,\n+    explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n+    explicit_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     generics_of: Table<DefIndex, LazyValue<ty::Generics>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n-    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Predicate<'tcx>, Span)>>,\n-    super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'tcx>>>,\n-    type_of: Table<DefIndex, LazyValue<Ty<'tcx>>>,\n+    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n+    super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n+    type_of: Table<DefIndex, LazyValue<Ty<'static>>>,\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,\n-    fn_sig: Table<DefIndex, LazyValue<ty::PolyFnSig<'tcx>>>,\n+    fn_sig: Table<DefIndex, LazyValue<ty::PolyFnSig<'static>>>,\n     codegen_fn_attrs: Table<DefIndex, LazyValue<CodegenFnAttrs>>,\n-    impl_trait_ref: Table<DefIndex, LazyValue<ty::TraitRef<'tcx>>>,\n-    const_param_default: Table<DefIndex, LazyValue<rustc_middle::ty::Const<'tcx>>>,\n-    optimized_mir: Table<DefIndex, LazyValue<mir::Body<'tcx>>>,\n-    mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'tcx>>>,\n-    promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n+    impl_trait_ref: Table<DefIndex, LazyValue<ty::TraitRef<'static>>>,\n+    const_param_default: Table<DefIndex, LazyValue<rustc_middle::ty::Const<'static>>>,\n+    optimized_mir: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n+    mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n+    promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'static>>>>,\n     // FIXME(compiler-errors): Why isn't this a LazyArray?\n-    thir_abstract_const: Table<DefIndex, LazyValue<&'tcx [thir::abstract_const::Node<'tcx>]>>,\n+    thir_abstract_const: Table<DefIndex, LazyValue<&'static [thir::abstract_const::Node<'static>]>>,\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     impl_constness: Table<DefIndex, hir::Constness>,\n@@ -376,7 +388,7 @@ define_tables! {\n     def_keys: Table<DefIndex, LazyValue<DefKey>>,\n     def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, LazyValue<Span>>,\n-    generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'tcx>>>,\n+    generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'static>>>,\n     may_have_doc_links: Table<DefIndex, ()>,\n }\n \n@@ -477,3 +489,14 @@ pub fn provide(providers: &mut Providers) {\n     encoder::provide(providers);\n     decoder::provide(providers);\n }\n+\n+trivially_parameterized_over_tcx! {\n+    VariantData,\n+    AssocFnData,\n+    EntryKind,\n+    RawDefId,\n+    TraitImpls,\n+    IncoherentImpls,\n+    CrateRoot,\n+    CrateDep,\n+}"}, {"sha": "100bac15b80a42d8342e795ec59ba37b4a65d109", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -3,6 +3,7 @@ use crate::rmeta::*;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n+use rustc_middle::ty::ParameterizedOverTcx;\n use rustc_serialize::opaque::Encoder;\n use rustc_serialize::Encoder as _;\n use rustc_span::hygiene::MacroKind;\n@@ -296,7 +297,7 @@ where\n     }\n }\n \n-impl<I: Idx, T> LazyTable<I, T>\n+impl<I: Idx, T: ParameterizedOverTcx> LazyTable<I, T>\n where\n     Option<T>: FixedSizeEncoding,\n {\n@@ -306,9 +307,9 @@ where\n         &self,\n         metadata: M,\n         i: I,\n-    ) -> Option<T>\n+    ) -> Option<T::Value<'tcx>>\n     where\n-        Option<T>: FixedSizeEncoding<ByteArray = [u8; N]>,\n+        Option<T::Value<'tcx>>: FixedSizeEncoding<ByteArray = [u8; N]>,\n     {\n         debug!(\"LazyTable::lookup: index={:?} len={:?}\", i, self.encoded_size);\n \n@@ -322,7 +323,7 @@ where\n     /// Size of the table in entries, including possible gaps.\n     pub(super) fn size<const N: usize>(&self) -> usize\n     where\n-        Option<T>: FixedSizeEncoding<ByteArray = [u8; N]>,\n+        for<'tcx> Option<T::Value<'tcx>>: FixedSizeEncoding<ByteArray = [u8; N]>,\n     {\n         self.encoded_size / N\n     }"}, {"sha": "3a9fe31735fe2fe39f6cdbbc304c3d8cf7418cf6", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -33,6 +33,7 @@\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n+#![feature(generic_associated_types)]\n #![feature(if_let_guard)]\n #![feature(map_first_last)]\n #![feature(negative_impls)]"}, {"sha": "b61a3827602fa08132e1daf5a7c5bf84a98a02c3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -72,6 +72,7 @@ pub use self::context::{\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;\n+pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;\n pub use self::sty::BoundRegionKind::*;\n pub use self::sty::RegionKind::*;\n@@ -119,6 +120,7 @@ mod generics;\n mod impls_ty;\n mod instance;\n mod list;\n+mod parameterized;\n mod rvalue_scopes;\n mod structural_impls;\n mod sty;"}, {"sha": "54ba9e84fdb7bebd4eabd5a1e60f18bdec92d46a", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a9a9551741c3e888d350d8d4f4821a5addccb2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=d1a9a9551741c3e888d350d8d4f4821a5addccb2", "patch": "@@ -0,0 +1,119 @@\n+use rustc_hir::def_id::DefId;\n+use rustc_index::vec::{Idx, IndexVec};\n+\n+use crate::middle::exported_symbols::ExportedSymbol;\n+use crate::mir::Body;\n+use crate::thir::abstract_const::Node;\n+use crate::ty::{\n+    self, Const, FnSig, GeneratorDiagnosticData, GenericPredicates, Predicate, TraitRef, Ty,\n+};\n+\n+pub trait ParameterizedOverTcx: 'static {\n+    #[allow(unused_lifetimes)]\n+    type Value<'tcx>;\n+}\n+\n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for &'static [T] {\n+    type Value<'tcx> = &'tcx [T::Value<'tcx>];\n+}\n+\n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for Option<T> {\n+    type Value<'tcx> = Option<T::Value<'tcx>>;\n+}\n+\n+impl<A: ParameterizedOverTcx, B: ParameterizedOverTcx> ParameterizedOverTcx for (A, B) {\n+    type Value<'tcx> = (A::Value<'tcx>, B::Value<'tcx>);\n+}\n+\n+impl<I: Idx + 'static, T: ParameterizedOverTcx> ParameterizedOverTcx for IndexVec<I, T> {\n+    type Value<'tcx> = IndexVec<I, T::Value<'tcx>>;\n+}\n+\n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for ty::Binder<'static, T> {\n+    type Value<'tcx> = ty::Binder<'tcx, T::Value<'tcx>>;\n+}\n+\n+#[macro_export]\n+macro_rules! trivially_parameterized_over_tcx {\n+    ($($ty:ty),+ $(,)?) => {\n+        $(\n+            impl $crate::ty::ParameterizedOverTcx for $ty {\n+                #[allow(unused_lifetimes)]\n+                type Value<'tcx> = $ty;\n+            }\n+        )*\n+    }\n+}\n+\n+trivially_parameterized_over_tcx! {\n+    usize,\n+    (),\n+    u32,\n+    std::string::String,\n+    crate::metadata::ModChild,\n+    crate::middle::codegen_fn_attrs::CodegenFnAttrs,\n+    crate::middle::exported_symbols::SymbolExportInfo,\n+    crate::mir::ConstQualifs,\n+    ty::Generics,\n+    ty::ImplPolarity,\n+    ty::ReprOptions,\n+    ty::TraitDef,\n+    ty::Visibility,\n+    ty::adjustment::CoerceUnsizedInfo,\n+    ty::fast_reject::SimplifiedTypeGen<DefId>,\n+    rustc_ast::Attribute,\n+    rustc_ast::MacArgs,\n+    rustc_attr::ConstStability,\n+    rustc_attr::Deprecation,\n+    rustc_attr::Stability,\n+    rustc_hir::Constness,\n+    rustc_hir::Defaultness,\n+    rustc_hir::GeneratorKind,\n+    rustc_hir::IsAsync,\n+    rustc_hir::LangItem,\n+    rustc_hir::def::DefKind,\n+    rustc_hir::def_id::DefIndex,\n+    rustc_hir::definitions::DefKey,\n+    rustc_index::bit_set::FiniteBitSet<u32>,\n+    rustc_session::cstore::ForeignModule,\n+    rustc_session::cstore::LinkagePreference,\n+    rustc_session::cstore::NativeLib,\n+    rustc_span::DebuggerVisualizerFile,\n+    rustc_span::ExpnData,\n+    rustc_span::ExpnHash,\n+    rustc_span::ExpnId,\n+    rustc_span::SourceFile,\n+    rustc_span::Span,\n+    rustc_span::Symbol,\n+    rustc_span::def_id::DefPathHash,\n+    rustc_span::hygiene::SyntaxContextData,\n+    rustc_span::symbol::Ident,\n+    rustc_type_ir::Variance,\n+}\n+\n+// HACK(compiler-errors): This macro rule can only take an ident,\n+// not a path, due to parsing ambiguity reasons. That means we gotta\n+// import all of these types above.\n+#[macro_export]\n+macro_rules! parameterized_over_tcx {\n+    ($($ident:ident),+ $(,)?) => {\n+        $(\n+            impl $crate::ty::ParameterizedOverTcx for $ident<'static> {\n+                type Value<'tcx> = $ident<'tcx>;\n+            }\n+        )*\n+    }\n+}\n+\n+parameterized_over_tcx! {\n+    Ty,\n+    FnSig,\n+    GenericPredicates,\n+    TraitRef,\n+    Const,\n+    Predicate,\n+    GeneratorDiagnosticData,\n+    Body,\n+    Node,\n+    ExportedSymbol,\n+}"}]}