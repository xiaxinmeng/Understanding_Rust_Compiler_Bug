{"sha": "1927eb088ac9aa3851f77bb929296873ccb4faed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjdlYjA4OGFjOWFhMzg1MWY3N2JiOTI5Mjk2ODczY2NiNGZhZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T11:50:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T11:50:38Z"}, "message": "Merge #901\n\n901: Add basic support for showing fn signature when hovering r=matklad a=vipentti\n\nThis adds basic support for displaying function signature when hovering over a usage of a function. \r\n\r\nAdditionally refactored `hover` to return `HoverResult` to ease with testing and in general to be more robust.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "af3c0a5ea5a11a2998d12f61044be4c3e150d1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3c0a5ea5a11a2998d12f61044be4c3e150d1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1927eb088ac9aa3851f77bb929296873ccb4faed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1927eb088ac9aa3851f77bb929296873ccb4faed", "html_url": "https://github.com/rust-lang/rust/commit/1927eb088ac9aa3851f77bb929296873ccb4faed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1927eb088ac9aa3851f77bb929296873ccb4faed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c8e78809e5a300f3c2770f50b6d8b1c4bff11531", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e78809e5a300f3c2770f50b6d8b1c4bff11531", "html_url": "https://github.com/rust-lang/rust/commit/c8e78809e5a300f3c2770f50b6d8b1c4bff11531"}, {"sha": "e3525527e35219e38e811b572406e14119853716", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3525527e35219e38e811b572406e14119853716", "html_url": "https://github.com/rust-lang/rust/commit/e3525527e35219e38e811b572406e14119853716"}], "stats": {"total": 200, "additions": 179, "deletions": 21}, "files": [{"sha": "da33739be38e3fb1920a7a74bd9abc342bc60440", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=1927eb088ac9aa3851f77bb929296873ccb4faed", "patch": "@@ -110,7 +110,7 @@ pub(crate) fn reference_definition(\n     Approximate(navs)\n }\n \n-fn name_definition(\n+pub(crate) fn name_definition(\n     db: &RootDatabase,\n     file_id: FileId,\n     name: &ast::Name,"}, {"sha": "ef3b5df292a3154493326e79fca74488547b1c8c", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 175, "deletions": 18, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=1927eb088ac9aa3851f77bb929296873ccb4faed", "patch": "@@ -1,14 +1,74 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast,\n+    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange, NavigationTarget};\n \n-pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<String>> {\n+/// Contains the results when hovering over an item\n+#[derive(Debug, Clone)]\n+pub struct HoverResult {\n+    results: Vec<String>,\n+    exact: bool,\n+}\n+\n+impl HoverResult {\n+    pub fn new() -> HoverResult {\n+        HoverResult {\n+            results: Vec::new(),\n+            // We assume exact by default\n+            exact: true,\n+        }\n+    }\n+\n+    pub fn extend(&mut self, item: Option<String>) {\n+        self.results.extend(item);\n+    }\n+\n+    pub fn is_exact(&self) -> bool {\n+        self.exact\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.results.is_empty()\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.results.len()\n+    }\n+\n+    pub fn first(&self) -> Option<&str> {\n+        self.results.first().map(String::as_str)\n+    }\n+\n+    pub fn results(&self) -> &[String] {\n+        &self.results\n+    }\n+\n+    /// Returns the results converted into markup\n+    /// for displaying in a UI\n+    pub fn to_markup(&self) -> String {\n+        let mut markup = if !self.exact {\n+            let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.\");\n+            if !self.results.is_empty() {\n+                msg.push_str(\"  \\nThese items were found instead:\");\n+            }\n+            msg.push_str(\"\\n\\n---\\n\");\n+            msg\n+        } else {\n+            String::new()\n+        };\n+\n+        markup.push_str(&self.results.join(\"\\n\\n---\\n\"));\n+\n+        markup\n+    }\n+}\n+\n+pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse(position.file_id);\n-    let mut res = Vec::new();\n+    let mut res = HoverResult::new();\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n@@ -17,11 +77,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         match ref_result {\n             Exact(nav) => res.extend(doc_text_for(db, nav)),\n             Approximate(navs) => {\n-                let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.\");\n-                if !navs.is_empty() {\n-                    msg.push_str(\"  \\nThese items were found instead:\");\n-                }\n-                res.push(msg);\n+                // We are no longer exact\n+                res.exact = false;\n+\n                 for nav in navs {\n                     res.extend(doc_text_for(db, nav))\n                 }\n@@ -30,21 +88,34 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         if !res.is_empty() {\n             range = Some(name_ref.syntax().range())\n         }\n+    } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n+        let navs = crate::goto_definition::name_definition(db, position.file_id, name);\n+\n+        if let Some(navs) = navs {\n+            for nav in navs {\n+                res.extend(doc_text_for(db, nav))\n+            }\n+        }\n+\n+        if !res.is_empty() && range.is_none() {\n+            range = Some(name.syntax().range());\n+        }\n     }\n+\n     if range.is_none() {\n         let node = find_leaf_at_offset(file.syntax(), position.offset).find_map(|leaf| {\n             leaf.ancestors().find(|n| ast::Expr::cast(*n).is_some() || ast::Pat::cast(*n).is_some())\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.range() };\n         res.extend(type_of(db, frange).map(Into::into));\n         range = Some(node.range());\n-    };\n+    }\n \n     let range = range?;\n     if res.is_empty() {\n         return None;\n     }\n-    let res = RangeInfo::new(range, res.join(\"\\n\\n---\\n\"));\n+    let res = RangeInfo::new(range, res);\n     Some(res)\n }\n \n@@ -120,7 +191,7 @@ impl NavigationTarget {\n \n         fn visit_node<T>(node: &T, label: &str) -> Option<String>\n         where\n-            T: ast::NameOwner + ast::VisibilityOwner,\n+            T: NameOwner + VisibilityOwner,\n         {\n             let mut string =\n                 node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n@@ -130,7 +201,7 @@ impl NavigationTarget {\n         }\n \n         visitor()\n-            .visit(|node: &ast::FnDef| visit_node(node, \"fn \"))\n+            .visit(crate::completion::function_label)\n             .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n             .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n             .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n@@ -145,7 +216,24 @@ impl NavigationTarget {\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;\n-    use crate::mock_analysis::{single_file_with_position, single_file_with_range};\n+    use crate::mock_analysis::{single_file_with_position, single_file_with_range, analysis_and_position};\n+\n+    fn trim_markup(s: &str) -> &str {\n+        s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n+    }\n+\n+    fn check_hover_result(fixture: &str, expected: &[&str]) {\n+        let (analysis, position) = analysis_and_position(fixture);\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+\n+        for (markup, expected) in\n+            hover.info.results().iter().zip(expected.iter().chain(std::iter::repeat(&\"<missing>\")))\n+        {\n+            assert_eq!(trim_markup(&markup), *expected);\n+        }\n+\n+        assert_eq!(hover.info.len(), expected.len());\n+    }\n \n     #[test]\n     fn hover_shows_type_of_an_expression() {\n@@ -160,7 +248,76 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n-        assert_eq!(hover.info, \"u32\");\n+        assert_eq!(hover.info.first(), Some(\"u32\"));\n+    }\n+\n+    #[test]\n+    fn hover_shows_fn_signature() {\n+        // Single file with result\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            pub fn foo() -> u32 { 1 }\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo() -> u32\"],\n+        );\n+\n+        // Multiple results\n+        check_hover_result(\n+            r#\"\n+            //- /a.rs\n+            pub fn foo() -> u32 { 1 }\n+\n+            //- /b.rs\n+            pub fn foo() -> &str { \"\" }\n+\n+            //- /c.rs\n+            pub fn foo(a: u32, b: u32) {}\n+\n+            //- /main.rs\n+            mod a;\n+            mod b;\n+            mod c;\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo() -> &str\", \"pub fn foo() -> u32\", \"pub fn foo(a: u32, b: u32)\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_shows_fn_signature_with_type_params() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str { }\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_shows_fn_signature_on_fn_name() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            pub fn foo<|>(a: u32, b: u32) -> u32 {}\n+\n+            fn main() {\n+            }\n+        \"#,\n+            &[\"pub fn foo(a: u32, b: u32) -> u32\"],\n+        );\n     }\n \n     #[test]\n@@ -177,21 +334,21 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         // not the nicest way to show it currently\n-        assert_eq!(hover.info, \"Some<i32>(T) -> Option<T>\");\n+        assert_eq!(hover.info.first(), Some(\"Some<i32>(T) -> Option<T>\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable() {\n         let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"i32\");\n+        assert_eq!(hover.info.first(), Some(\"i32\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n         let (analysis, position) = single_file_with_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"i32\");\n+        assert_eq!(hover.info.first(), Some(\"i32\"));\n     }\n \n     #[test]\n@@ -258,6 +415,6 @@ mod tests {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"Thing\");\n+        assert_eq!(hover.info.first(), Some(\"Thing\"));\n     }\n }"}, {"sha": "6546d064479db33a084b9f8ab04d48b30f343b04", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=1927eb088ac9aa3851f77bb929296873ccb4faed", "patch": "@@ -58,6 +58,7 @@ pub use crate::{\n     navigation_target::NavigationTarget,\n     references::ReferenceSearchResult,\n     assists::{Assist, AssistId},\n+    hover::{HoverResult},\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode, LocalEdit,\n@@ -328,7 +329,7 @@ impl Analysis {\n     }\n \n     /// Returns a short text describing element at position.\n-    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<String>>> {\n+    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n         self.with_db(|db| hover::hover(db, position))\n     }\n "}, {"sha": "dce6fcc679dfdea44e00c3136bcc56a9bc659ba6", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927eb088ac9aa3851f77bb929296873ccb4faed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1927eb088ac9aa3851f77bb929296873ccb4faed", "patch": "@@ -441,7 +441,7 @@ pub fn handle_hover(\n     let res = Hover {\n         contents: HoverContents::Markup(MarkupContent {\n             kind: MarkupKind::Markdown,\n-            value: info.info,\n+            value: info.info.to_markup(),\n         }),\n         range: Some(range),\n     };"}]}