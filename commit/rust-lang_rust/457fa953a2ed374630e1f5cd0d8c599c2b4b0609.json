{"sha": "457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "node_id": "C_kwDOAAsO6NoAKDQ1N2ZhOTUzYTJlZDM3NDYzMGUxZjVjZDBkOGM1OTljMmI0YjA2MDk", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-10T09:55:37Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:02Z"}, "message": "Use label instead of note to be more consistent with other lints", "tree": {"sha": "2be84545bfa2f0b425000ea1f79d1ac65c80757b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be84545bfa2f0b425000ea1f79d1ac65c80757b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "html_url": "https://github.com/rust-lang/rust/commit/457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77773ad002f9bd9fc2124b964bebad94b5f5d286", "url": "https://api.github.com/repos/rust-lang/rust/commits/77773ad002f9bd9fc2124b964bebad94b5f5d286", "html_url": "https://github.com/rust-lang/rust/commit/77773ad002f9bd9fc2124b964bebad94b5f5d286"}], "stats": {"total": 416, "additions": 133, "deletions": 283}, "files": [{"sha": "63424148e4d04b433ffd7852f274fef4fe49e81b", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -522,13 +522,13 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value\n-    .note = argument has type `{$arg_ty}`\n+    .label = argument has type `{$arg_ty}`\n \n lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy`.\n-    .note = argument has type `{$arg_ty}`\n+    .label = argument has type `{$arg_ty}`\n \n lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value\n-    .note = argument has type `{$arg_ty}`\n+    .label = argument has type `{$arg_ty}`\n \n lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy`.\n-    .note = argument has type `{$arg_ty}`\n+    .label = argument has type `{$arg_ty}`"}, {"sha": "259abc2af11291b11cf26265a478ccd29591796c", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -123,16 +123,16 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, note: arg.span });\n+                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_forget if arg_ty.is_ref() => {\n-                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, note: arg.span });\n+                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, note: arg.span });\n+                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n                 }\n                 sym::mem_forget if is_copy => {\n-                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, note: arg.span });\n+                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n                 }\n                 _ => return,\n             };"}, {"sha": "755b907dfe5c86201abd2015cf65d27e867f83cd", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -667,32 +667,32 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n #[diag(lint_drop_ref)]\n pub struct DropRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n-    #[note]\n-    pub note: Span,\n+    #[label]\n+    pub label: Span,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(lint_drop_copy)]\n pub struct DropCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n-    #[note]\n-    pub note: Span,\n+    #[label]\n+    pub label: Span,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(lint_forget_ref)]\n pub struct ForgetRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n-    #[note]\n-    pub note: Span,\n+    #[label]\n+    pub label: Span,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(lint_forget_copy)]\n pub struct ForgetCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n-    #[note]\n-    pub note: Span,\n+    #[label]\n+    pub label: Span,\n }\n \n // hidden_unicode_codepoints.rs"}, {"sha": "a7a3b0e25ec767e800a368533cf27e609771dc2a", "filename": "tests/ui/lint/drop_copy.stderr", "status": "modified", "additions": 30, "deletions": 68, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -2,13 +2,10 @@ warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:34:5\n    |\n LL |     drop(s1);\n-   |     ^^^^^^^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n    |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_copy.rs:34:10\n-   |\n-LL |     drop(s1);\n-   |          ^^\n note: the lint level is defined here\n   --> $DIR/drop_copy.rs:3:9\n    |\n@@ -19,110 +16,75 @@ warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:35:5\n    |\n LL |     drop(s2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_copy.rs:35:10\n-   |\n-LL |     drop(s2);\n-   |          ^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_copy.rs:36:5\n    |\n LL |     drop(s3);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_copy.rs:36:10\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n    |\n-LL |     drop(s3);\n-   |          ^^\n    = note: `#[warn(drop_ref)]` on by default\n \n warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:37:5\n    |\n LL |     drop(s4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_copy.rs:37:10\n-   |\n-LL |     drop(s4);\n-   |          ^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_copy.rs:38:5\n    |\n LL |     drop(s5);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_copy.rs:38:10\n-   |\n-LL |     drop(s5);\n-   |          ^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_copy.rs:50:5\n    |\n LL |     drop(a2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `&AnotherStruct`\n-  --> $DIR/drop_copy.rs:50:10\n-   |\n-LL |     drop(a2);\n-   |          ^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_copy.rs:52:5\n    |\n LL |     drop(a4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `&AnotherStruct`\n-  --> $DIR/drop_copy.rs:52:10\n-   |\n-LL |     drop(a4);\n-   |          ^^\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n \n warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:71:13\n    |\n LL |             drop(println_and(13));\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_copy.rs:71:18\n-   |\n-LL |             drop(println_and(13));\n-   |                  ^^^^^^^^^^^^^^^\n+   |             ^^^^^---------------^\n+   |                  |\n+   |                  argument has type `i32`\n \n warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:74:14\n    |\n LL |         3 if drop(println_and(14)) == () => (),\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_copy.rs:74:19\n-   |\n-LL |         3 if drop(println_and(14)) == () => (),\n-   |                   ^^^^^^^^^^^^^^^\n+   |              ^^^^^---------------^\n+   |                   |\n+   |                   argument has type `i32`\n \n warning: calls to `std::mem::drop` with a value that implements `Copy`.\n   --> $DIR/drop_copy.rs:76:14\n    |\n LL |         4 => drop(2),\n-   |              ^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_copy.rs:76:19\n-   |\n-LL |         4 => drop(2),\n-   |                   ^\n+   |              ^^^^^-^\n+   |                   |\n+   |                   argument has type `i32`\n \n warning: 10 warnings emitted\n "}, {"sha": "c701f99fa901493720a15767f1e7973d7f6be2b5", "filename": "tests/ui/lint/drop_ref.stderr", "status": "modified", "additions": 36, "deletions": 83, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -2,13 +2,10 @@ warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:8:5\n    |\n LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n    |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:8:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/drop_ref.rs:3:9\n    |\n@@ -19,133 +16,89 @@ warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:11:5\n    |\n LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:11:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n+   |     ^^^^^-------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:12:5\n    |\n LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:12:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n+   |     ^^^^^--------^\n+   |          |\n+   |          argument has type `&&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:13:5\n    |\n LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:13:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:17:5\n    |\n LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:17:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:20:5\n    |\n LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:20:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:23:5\n    |\n LL |     drop(reference3);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:23:10\n-   |\n-LL |     drop(reference3);\n-   |          ^^^^^^^^^^\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:28:5\n    |\n LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:28:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n+   |     ^^^^^----^\n+   |          |\n+   |          argument has type `&T`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:36:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:36:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^-----------^\n+   |                    |\n+   |                    argument has type `&SomeStruct`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:91:13\n    |\n LL |             drop(println_and(&13));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:91:18\n-   |\n-LL |             drop(println_and(&13));\n-   |                  ^^^^^^^^^^^^^^^^\n+   |             ^^^^^----------------^\n+   |                  |\n+   |                  argument has type `&i32`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:94:14\n    |\n LL |         3 if drop(println_and(&14)) == () => (),\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:94:19\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (),\n-   |                   ^^^^^^^^^^^^^^^^\n+   |              ^^^^^----------------^\n+   |                   |\n+   |                   argument has type `&i32`\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value\n   --> $DIR/drop_ref.rs:96:14\n    |\n LL |         4 => drop(&2),\n-   |              ^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:96:19\n-   |\n-LL |         4 => drop(&2),\n-   |                   ^^\n+   |              ^^^^^--^\n+   |                   |\n+   |                   argument has type `&i32`\n \n warning: 12 warnings emitted\n "}, {"sha": "e2fc0f8af4fbe9a280badce6f05284f0f9b0b3eb", "filename": "tests/ui/lint/forget_copy.stderr", "status": "modified", "additions": 24, "deletions": 54, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -2,13 +2,10 @@ warning: calls to `std::mem::forget` with a value that implements `Copy`.\n   --> $DIR/forget_copy.rs:34:5\n    |\n LL |     forget(s1);\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n    |\n-note: argument has type `SomeStruct`\n-  --> $DIR/forget_copy.rs:34:12\n-   |\n-LL |     forget(s1);\n-   |            ^^\n note: the lint level is defined here\n   --> $DIR/forget_copy.rs:3:9\n    |\n@@ -19,86 +16,59 @@ warning: calls to `std::mem::forget` with a value that implements `Copy`.\n   --> $DIR/forget_copy.rs:35:5\n    |\n LL |     forget(s2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/forget_copy.rs:35:12\n-   |\n-LL |     forget(s2);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_copy.rs:36:5\n    |\n LL |     forget(s3);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_copy.rs:36:12\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n    |\n-LL |     forget(s3);\n-   |            ^^\n    = note: `#[warn(forget_ref)]` on by default\n \n warning: calls to `std::mem::forget` with a value that implements `Copy`.\n   --> $DIR/forget_copy.rs:37:5\n    |\n LL |     forget(s4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/forget_copy.rs:37:12\n-   |\n-LL |     forget(s4);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_copy.rs:38:5\n    |\n LL |     forget(s5);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_copy.rs:38:12\n-   |\n-LL |     forget(s5);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_copy.rs:50:5\n    |\n LL |     forget(a2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&AnotherStruct`\n-  --> $DIR/forget_copy.rs:50:12\n-   |\n-LL |     forget(a2);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_copy.rs:52:5\n    |\n LL |     forget(a3);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&AnotherStruct`\n-  --> $DIR/forget_copy.rs:52:12\n-   |\n-LL |     forget(a3);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_copy.rs:53:5\n    |\n LL |     forget(a4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&AnotherStruct`\n-  --> $DIR/forget_copy.rs:53:12\n-   |\n-LL |     forget(a4);\n-   |            ^^\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n \n warning: 8 warnings emitted\n "}, {"sha": "96fb217215aaa970a662d8cfcde6b604e745e757", "filename": "tests/ui/lint/forget_ref.stderr", "status": "modified", "additions": 27, "deletions": 62, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457fa953a2ed374630e1f5cd0d8c599c2b4b0609/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "patch": "@@ -2,13 +2,10 @@ warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^-----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n    |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:10:12\n-   |\n-LL |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/forget_ref.rs:3:9\n    |\n@@ -19,97 +16,65 @@ warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n-   |\n-LL |     forget(&owned);\n-   |            ^^^^^^\n+   |     ^^^^^^^------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n-   |\n-LL |     forget(&&owned);\n-   |            ^^^^^^^\n+   |     ^^^^^^^-------^\n+   |            |\n+   |            argument has type `&&SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n-   |\n-LL |     forget(&mut owned);\n-   |            ^^^^^^^^^^\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:19:12\n-   |\n-LL |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n+   |     ^^^^^^^------------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:22:12\n-   |\n-LL |     forget(reference2);\n-   |            ^^^^^^^^^^\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:25:12\n-   |\n-LL |     forget(reference3);\n-   |            ^^^^^^^^^^\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:30:12\n-   |\n-LL |     forget(&val);\n-   |            ^^^^\n+   |     ^^^^^^^----^\n+   |            |\n+   |            argument has type `&T`\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value\n   --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:38:22\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^-----------^\n+   |                      |\n+   |                      argument has type `&SomeStruct`\n \n warning: 9 warnings emitted\n "}]}