{"sha": "ba20a862d4082d96c12fc928e900d3e507348a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMjBhODYyZDQwODJkOTZjMTJmYzkyOGU5MDBkM2U1MDczNDhhMWE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2015-12-12T03:30:53Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2015-12-17T05:43:44Z"}, "message": "rustc_resolve: fix a bug in which unused imports can get wrongly marked as used when checking for unused qualifications in resolve_path (fixes #30078)", "tree": {"sha": "3e0089467a779fc9ec537e897250ea8bd62eefa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0089467a779fc9ec537e897250ea8bd62eefa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba20a862d4082d96c12fc928e900d3e507348a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba20a862d4082d96c12fc928e900d3e507348a1a", "html_url": "https://github.com/rust-lang/rust/commit/ba20a862d4082d96c12fc928e900d3e507348a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba20a862d4082d96c12fc928e900d3e507348a1a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8364a6feefe730c1cf06e95d00406afbdf5938c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8364a6feefe730c1cf06e95d00406afbdf5938c2", "html_url": "https://github.com/rust-lang/rust/commit/8364a6feefe730c1cf06e95d00406afbdf5938c2"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "46fc3f37f7b651a3469e0e01560a2bf8624dad44", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ba20a862d4082d96c12fc928e900d3e507348a1a", "patch": "@@ -1463,7 +1463,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn resolve_item_in_lexical_scope(&mut self,\n                                      module_: Rc<Module>,\n                                      name: Name,\n-                                     namespace: Namespace)\n+                                     namespace: Namespace,\n+                                     record_used: bool)\n                                      -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving item in lexical scope) resolving `{}` in namespace {:?} in `{}`\",\n                name,\n@@ -1503,10 +1504,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     debug!(\"(resolving item in lexical scope) using import resolution\");\n                     // track used imports and extern crates as well\n                     let id = import_resolution[namespace].id;\n-                    self.used_imports.insert((id, namespace));\n-                    self.record_import_use(id, name);\n-                    if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n-                        self.used_crates.insert(kid);\n+                    if record_used {\n+                        self.used_imports.insert((id, namespace));\n+                        self.record_import_use(id, name);\n+                        if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n+                            self.used_crates.insert(kid);\n+                        }\n                     }\n                     return Success((target, false));\n                 }\n@@ -1583,7 +1586,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                        -> ResolveResult<Rc<Module>> {\n         // If this module is an anonymous module, resolve the item in the\n         // lexical scope. Otherwise, resolve the item from the crate root.\n-        let resolve_result = self.resolve_item_in_lexical_scope(module_, name, TypeNS);\n+        let resolve_result = self.resolve_item_in_lexical_scope(module_, name, TypeNS, true);\n         match resolve_result {\n             Success((target, _)) => {\n                 if let Some(module_def) = target.binding.module() {\n@@ -2791,7 +2794,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                        span: Span)\n                                        -> BareIdentifierPatternResolution {\n         let module = self.current_module.clone();\n-        match self.resolve_item_in_lexical_scope(module, name, ValueNS) {\n+        match self.resolve_item_in_lexical_scope(module, name, ValueNS, true) {\n             Success((target, _)) => {\n                 debug!(\"(resolve bare identifier pattern) succeeded in finding {} at {:?}\",\n                        name,\n@@ -2899,17 +2902,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         // Try to find a path to an item in a module.\n-        let unqualified_def = self.resolve_identifier(segments.last().unwrap().identifier,\n-                                                      namespace,\n-                                                      check_ribs);\n-\n+        let last_ident = segments.last().unwrap().identifier;\n         if segments.len() <= 1 {\n+            let unqualified_def = self.resolve_identifier(last_ident, namespace, check_ribs, true);\n             return unqualified_def.and_then(|def| self.adjust_local_def(def, span))\n                                   .map(|def| {\n                                       PathResolution::new(def, LastMod(AllPublic), path_depth)\n                                   });\n         }\n \n+        let unqualified_def = self.resolve_identifier(last_ident, namespace, check_ribs, false);\n         let def = self.resolve_module_relative_path(span, segments, namespace);\n         match (def, unqualified_def) {\n             (Some((ref d, _)), Some(ref ud)) if *d == ud.def => {\n@@ -2929,7 +2931,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn resolve_identifier(&mut self,\n                           identifier: hir::Ident,\n                           namespace: Namespace,\n-                          check_ribs: bool)\n+                          check_ribs: bool,\n+                          record_used: bool)\n                           -> Option<LocalDef> {\n         // First, check to see whether the name is a primitive type.\n         if namespace == TypeNS {\n@@ -2946,7 +2949,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        self.resolve_item_by_name_in_lexical_scope(identifier.unhygienic_name, namespace)\n+        let name = identifier.unhygienic_name;\n+        self.resolve_item_by_name_in_lexical_scope(name, namespace, record_used)\n             .map(LocalDef::from_def)\n     }\n \n@@ -3197,11 +3201,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_item_by_name_in_lexical_scope(&mut self,\n                                              name: Name,\n-                                             namespace: Namespace)\n+                                             namespace: Namespace,\n+                                             record_used: bool)\n                                              -> Option<Def> {\n         // Check the items.\n         let module = self.current_module.clone();\n-        match self.resolve_item_in_lexical_scope(module, name, namespace) {\n+        match self.resolve_item_in_lexical_scope(module, name, namespace, record_used) {\n             Success((target, _)) => {\n                 match target.binding.def() {\n                     None => {"}, {"sha": "0ad3d2c5e73178a5141efcdef1fb28acf3c04869", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=ba20a862d4082d96c12fc928e900d3e507348a1a", "patch": "@@ -17,4 +17,5 @@ mod foo {\n fn main() {\n     use foo::bar;\n     foo::bar(); //~ ERROR: unnecessary qualification\n+    bar();\n }"}, {"sha": "35883293990a3ae19eee9101d45a66ca606916a2", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba20a862d4082d96c12fc928e900d3e507348a1a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=ba20a862d4082d96c12fc928e900d3e507348a1a", "patch": "@@ -50,11 +50,14 @@ mod foo {\n mod bar {\n     // Don't ignore on 'pub use' because we're not sure if it's used or not\n     pub use std::cmp::PartialEq;\n+    pub struct Square;\n \n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> isize { return 2 * (p.x + p.y); }\n+        pub fn cc(_p: Point) -> super::Square {\n+            super::Square\n+        }\n     }\n \n     #[allow(unused_imports)]"}]}