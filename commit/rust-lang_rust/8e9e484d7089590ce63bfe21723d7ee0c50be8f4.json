{"sha": "8e9e484d7089590ce63bfe21723d7ee0c50be8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWU0ODRkNzA4OTU5MGNlNjNiZmUyMTcyM2Q3ZWUwYzUwYmU4ZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T07:51:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T07:51:36Z"}, "message": "auto merge of #14708 : gereeter/rust/faster-sem, r=alexcrichton\n\nCurrently, `Sem`, which is used as a building block for all the blocking primitives, uses a very ugly hack to implement `Share` and be able to mutate the stored `WaitQueue` by hiding it all behind a `transmute`d `*()`. This PR replaces all that ugly machinery with `Unsafe`. Beyond being cleaner and not requiring `transmute`, this removes an allocation in the creation and removes an indirection for access.", "tree": {"sha": "7004b475993b711d3effe4f1694e4bfddfc29a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7004b475993b711d3effe4f1694e4bfddfc29a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9e484d7089590ce63bfe21723d7ee0c50be8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e484d7089590ce63bfe21723d7ee0c50be8f4", "html_url": "https://github.com/rust-lang/rust/commit/8e9e484d7089590ce63bfe21723d7ee0c50be8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e484d7089590ce63bfe21723d7ee0c50be8f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6266f64d09184f53fff4a6f7cea682b4dd714cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6266f64d09184f53fff4a6f7cea682b4dd714cf2", "html_url": "https://github.com/rust-lang/rust/commit/6266f64d09184f53fff4a6f7cea682b4dd714cf2"}, {"sha": "f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "html_url": "https://github.com/rust-lang/rust/commit/f2f1991c81825b542f77b4e4f2ac65d24a063a9c"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "8fd10cdfa8b346a2751623ad73263e186dbd2ed6", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8e9e484d7089590ce63bfe21723d7ee0c50be8f4/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9e484d7089590ce63bfe21723d7ee0c50be8f4/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=8e9e484d7089590ce63bfe21723d7ee0c50be8f4", "patch": "@@ -18,6 +18,7 @@\n use std::kinds::marker;\n use std::mem;\n use std::sync::atomics;\n+use std::ty::Unsafe;\n use std::finally::Finally;\n \n use mutex;\n@@ -85,11 +86,8 @@ struct Sem<Q> {\n     // n.b, we need Sem to be `Share`, but the WaitQueue type is not send/share\n     //      (for good reason). We have an internal invariant on this semaphore,\n     //      however, that the queue is never accessed outside of a locked\n-    //      context. For this reason, we shove these behind a pointer which will\n-    //      be inferred to be `Share`.\n-    //\n-    // FIXME: this requires an extra allocation, which is bad.\n-    inner: *()\n+    //      context.\n+    inner: Unsafe<SemInner<Q>>\n }\n \n struct SemInner<Q> {\n@@ -107,22 +105,20 @@ struct SemGuard<'a, Q> {\n \n impl<Q: Send> Sem<Q> {\n     fn new(count: int, q: Q) -> Sem<Q> {\n-        let inner = unsafe {\n-            mem::transmute(box SemInner {\n+        Sem {\n+            lock: mutex::Mutex::new(),\n+            inner: Unsafe::new(SemInner {\n                 waiters: WaitQueue::new(),\n                 count: count,\n                 blocked: q,\n             })\n-        };\n-        Sem {\n-            lock: mutex::Mutex::new(),\n-            inner: inner,\n         }\n     }\n \n     unsafe fn with(&self, f: |&mut SemInner<Q>|) {\n         let _g = self.lock.lock();\n-        f(&mut *(self.inner as *mut SemInner<Q>))\n+        // This &mut is safe because, due to the lock, we are the only one who can touch the data\n+        f(&mut *self.inner.get())\n     }\n \n     pub fn acquire(&self) {\n@@ -163,16 +159,6 @@ impl<Q: Send> Sem<Q> {\n     }\n }\n \n-#[unsafe_destructor]\n-impl<Q: Send> Drop for Sem<Q> {\n-    fn drop(&mut self) {\n-        let _waiters: Box<SemInner<Q>> = unsafe {\n-            mem::transmute(self.inner)\n-        };\n-        self.inner = 0 as *();\n-    }\n-}\n-\n #[unsafe_destructor]\n impl<'a, Q: Send> Drop for SemGuard<'a, Q> {\n     fn drop(&mut self) {"}]}