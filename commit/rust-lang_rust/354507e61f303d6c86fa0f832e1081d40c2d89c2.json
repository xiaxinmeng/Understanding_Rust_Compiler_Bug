{"sha": "354507e61f303d6c86fa0f832e1081d40c2d89c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDUwN2U2MWYzMDNkNmM4NmZhMGY4MzJlMTA4MWQ0MGMyZDg5YzI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-02T02:20:39Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:54:26Z"}, "message": "shuffle ownership of `external_traits`\n\nconstraints:\n\n- clean/inline.rs needs this map to fill in traits when inlining\n- fold.rs needs this map to allow passes to fold trait items\n- html/render.rs needs this map to seed the Cache.traits map of all\n  known traits\n\nThe first two are the real problem, since `DocFolder` only operates on\n`clean::Crate` but `clean/inline.rs` only sees the `DocContext`. The\nintroduction of early passes means that these two now exist at the same\ntime, so they need to share ownership of the map. Even better, the use\nof `Crate` in a rustc thread pool means that it needs to be Sync, so it\ncan't use `Lrc<Lock>` to manually activate thread-safety.\n\n`parking_lot` is reused from elsewhere in the tree to allow use of its\n`ReentrantMutex`, as the relevant parts of rustdoc are still\nsingle-threaded and this allows for easier use in that context.", "tree": {"sha": "78018eecb526a95eae5f5c63fc649045cb9623e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78018eecb526a95eae5f5c63fc649045cb9623e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/354507e61f303d6c86fa0f832e1081d40c2d89c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/354507e61f303d6c86fa0f832e1081d40c2d89c2", "html_url": "https://github.com/rust-lang/rust/commit/354507e61f303d6c86fa0f832e1081d40c2d89c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/354507e61f303d6c86fa0f832e1081d40c2d89c2/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c754e8240cfbeeaca1672c349eccba3d050f866c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c754e8240cfbeeaca1672c349eccba3d050f866c", "html_url": "https://github.com/rust-lang/rust/commit/c754e8240cfbeeaca1672c349eccba3d050f866c"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "377cfe748685fc10dded77c62f73ecd2f68eae42", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -2443,6 +2443,7 @@ name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n  \"minifier 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "845bfad7807d32734be3695cd9af68e3221b66d6", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -11,3 +11,4 @@ path = \"lib.rs\"\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n minifier = \"0.0.19\"\n tempfile = \"3\"\n+parking_lot = \"0.6.4\""}, {"sha": "1ea130cf16ae2f4e8e4cc29679883da520c85e99", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -539,17 +539,23 @@ pub fn record_extern_trait(cx: &DocContext, did: DefId) {\n         return;\n     }\n \n-    if cx.external_traits.borrow().contains_key(&did) ||\n-        cx.active_extern_traits.borrow().contains(&did)\n     {\n-        return;\n+        let external_traits = cx.external_traits.lock();\n+        if external_traits.borrow().contains_key(&did) ||\n+            cx.active_extern_traits.borrow().contains(&did)\n+        {\n+            return;\n+        }\n     }\n \n     cx.active_extern_traits.borrow_mut().push(did);\n \n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n-    cx.external_traits.borrow_mut().insert(did, trait_);\n+    {\n+        let external_traits = cx.external_traits.lock();\n+        external_traits.borrow_mut().insert(did, trait_);\n+    }\n     cx.active_extern_traits.borrow_mut().remove_item(&did);\n }"}, {"sha": "a982933f6c1a26a594bb4fd80846462671d36d03", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -55,6 +55,8 @@ use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n \n+use parking_lot::ReentrantMutex;\n+\n use core::{self, DocContext};\n use doctree;\n use visit_ast;\n@@ -136,7 +138,7 @@ pub struct Crate {\n     pub primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n-    pub external_traits: FxHashMap<DefId, Trait>,\n+    pub external_traits: Arc<ReentrantMutex<RefCell<FxHashMap<DefId, Trait>>>>,\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n@@ -214,7 +216,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tc\n             module: Some(module),\n             externs,\n             primitives,\n-            external_traits: Default::default(),\n+            external_traits: cx.external_traits.clone(),\n             masked_crates,\n         }\n     }"}, {"sha": "db6e01838048f9d5edf1f2801633bde781dd69d7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -36,11 +36,13 @@ use syntax::symbol::keywords;\n use syntax_pos::DUMMY_SP;\n use errors;\n use errors::emitter::{Emitter, EmitterWriter};\n+use parking_lot::ReentrantMutex;\n \n use std::cell::RefCell;\n use std::mem;\n use rustc_data_structures::sync::{self, Lrc};\n use std::rc::Rc;\n+use std::sync::Arc;\n use std::path::PathBuf;\n \n use visit_ast::RustdocVisitor;\n@@ -66,7 +68,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n-    pub external_traits: RefCell<FxHashMap<DefId, clean::Trait>>,\n+    pub external_traits: Arc<ReentrantMutex<RefCell<FxHashMap<DefId, clean::Trait>>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     pub active_extern_traits: RefCell<Vec<DefId>>,\n@@ -599,8 +601,6 @@ pub fn run_core(search_paths: SearchPaths,\n \n             ctxt.sess().abort_if_errors();\n \n-            krate.external_traits = ctxt.external_traits.into_inner();\n-\n             (krate, ctxt.renderinfo.into_inner(), passes)\n         }), &sess)\n     })"}, {"sha": "b8e27c531708379d2851156e2616f51e31afb8f7", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::mem;\n-\n use clean::*;\n \n pub struct StripItem(pub Item);\n@@ -116,11 +114,14 @@ pub trait DocFolder : Sized {\n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n         c.module = c.module.take().and_then(|module| self.fold_item(module));\n \n-        let traits = mem::replace(&mut c.external_traits, Default::default());\n-        c.external_traits.extend(traits.into_iter().map(|(k, mut v)| {\n-            v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n-            (k, v)\n-        }));\n+        {\n+            let guard = c.external_traits.lock();\n+            let traits = guard.replace(Default::default());\n+            guard.borrow_mut().extend(traits.into_iter().map(|(k, mut v)| {\n+                v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n+                (k, v)\n+            }));\n+        }\n         c\n     }\n }"}, {"sha": "3e1720f8b8ab2a639c74fbaf5ee4ed07ed689664", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -606,7 +606,7 @@ pub fn run(mut krate: clean::Crate,\n         crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n         orphan_trait_impls: Vec::new(),\n-        traits: mem::replace(&mut krate.external_traits, FxHashMap()),\n+        traits: krate.external_traits.lock().replace(FxHashMap()),\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,"}, {"sha": "5607c97a49689d578f275b08302853e40be58a88", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -49,6 +49,7 @@ extern crate rustc_errors as errors;\n extern crate pulldown_cmark;\n extern crate tempfile;\n extern crate minifier;\n+extern crate parking_lot;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "24dd4cc13bfe88b782e3232c61bb03eda691a5a9", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354507e61f303d6c86fa0f832e1081d40c2d89c2/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=354507e61f303d6c86fa0f832e1081d40c2d89c2", "patch": "@@ -24,13 +24,9 @@ pub const STRIP_HIDDEN: Pass =\n                 \"strips all doc(hidden) items from the output\");\n \n /// Strip items marked `#[doc(hidden)]`\n-pub fn strip_hidden(mut krate: clean::Crate, cx: &DocContext) -> clean::Crate {\n+pub fn strip_hidden(krate: clean::Crate, _: &DocContext) -> clean::Crate {\n     let mut retained = DefIdSet();\n \n-    // as an early pass, the external traits haven't been swapped in, so we need to do that ahead\n-    // of time\n-    mem::swap(&mut krate.external_traits, &mut cx.external_traits.borrow_mut());\n-\n     // strip all #[doc(hidden)] items\n     let krate = {\n         let mut stripper = Stripper{ retained: &mut retained, update_retained: true };\n@@ -39,8 +35,7 @@ pub fn strip_hidden(mut krate: clean::Crate, cx: &DocContext) -> clean::Crate {\n \n     // strip all impls referencing stripped items\n     let mut stripper = ImplStripper { retained: &retained };\n-    let mut krate = stripper.fold_crate(krate);\n-    mem::swap(&mut krate.external_traits, &mut cx.external_traits.borrow_mut());\n+    let krate = stripper.fold_crate(krate);\n \n     krate\n }"}]}