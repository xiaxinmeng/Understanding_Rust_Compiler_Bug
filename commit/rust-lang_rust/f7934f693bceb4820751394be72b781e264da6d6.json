{"sha": "f7934f693bceb4820751394be72b781e264da6d6", "node_id": "C_kwDOAAsO6NoAKGY3OTM0ZjY5M2JjZWI0ODIwNzUxMzk0YmU3MmI3ODFlMjY0ZGE2ZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T06:28:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T06:28:34Z"}, "message": "Auto merge of #92034 - petrochenkov:nolinknores, r=joshtriplett\n\nRemove effect of `#[no_link]` attribute on name resolution\n\nPreviously it hid all non-macro names from other crates.\nThis has no relation to linking and can change name resolution behavior in some cases (e.g. glob conflicts), in addition to just producing the \"unresolved name\" errors.\n\nI can kind of understand the possible reasoning behind the current behavior - if you can use names from a `no_link` crates then you can use, for example, functions too, but whether it will actually work or produce link-time errors will depend on random factors like inliner behavior.\n(^^^ This is not the actual reason why the current behavior exist, I've looked through git history and it's mostly accidental.)\n\nI think this risk is ok for such an obscure attribute, and we don't need to specifically prevent use of non-macro items from such crates.\n(I'm not actually sure why would anyone use `#[no_link]` on a crate, even if it's macro only, if you aware of any use cases, please share. IIRC, at some point it was used for crates implementing custom derives - the now removed legacy ones, not the current proc macros.)\n\nExtracted from https://github.com/rust-lang/rust/pull/91795.", "tree": {"sha": "e17ab8c0a8381250e6b9c9a92fb7f33fd9e82cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17ab8c0a8381250e6b9c9a92fb7f33fd9e82cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7934f693bceb4820751394be72b781e264da6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7934f693bceb4820751394be72b781e264da6d6", "html_url": "https://github.com/rust-lang/rust/commit/f7934f693bceb4820751394be72b781e264da6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7934f693bceb4820751394be72b781e264da6d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b13c628a214a03f4f45b80e26313df55654d254", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b13c628a214a03f4f45b80e26313df55654d254", "html_url": "https://github.com/rust-lang/rust/commit/7b13c628a214a03f4f45b80e26313df55654d254"}, {"sha": "54cd8248190506054057d6bf12f1e957f09b13d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/54cd8248190506054057d6bf12f1e957f09b13d6", "html_url": "https://github.com/rust-lang/rust/commit/54cd8248190506054057d6bf12f1e957f09b13d6"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "8ff3b1e72d8047d142c806495e2908a72f5e7f51", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7934f693bceb4820751394be72b781e264da6d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7934f693bceb4820751394be72b781e264da6d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f7934f693bceb4820751394be72b781e264da6d6", "patch": "@@ -1100,10 +1100,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n \n         // Iterate over all children.\n-        let macros_only = self.dep_kind.lock().macros_only();\n-        if !macros_only {\n-            let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n-\n+        if let Some(children) = self.root.tables.children.get(self, id) {\n             for child_index in children.decode((self, sess)) {\n                 // FIXME: Merge with the logic below.\n                 if let None | Some(EntryKind::ForeignMod | EntryKind::Impl(_)) =\n@@ -1172,11 +1169,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         if let EntryKind::Mod(exports) = kind {\n             for exp in exports.decode((self, sess)) {\n-                match exp.res {\n-                    Res::Def(DefKind::Macro(..), _) => {}\n-                    _ if macros_only => continue,\n-                    _ => {}\n-                }\n                 callback(exp);\n             }\n         }"}, {"sha": "c80e61b451116b7e45cd140bb377aec86fc9470e", "filename": "src/test/ui/no-link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7934f693bceb4820751394be72b781e264da6d6/src%2Ftest%2Fui%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7934f693bceb4820751394be72b781e264da6d6/src%2Ftest%2Fui%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.rs?ref=f7934f693bceb4820751394be72b781e264da6d6", "patch": "@@ -1,8 +1,9 @@\n+// check-pass\n // aux-build:empty-struct.rs\n \n #[no_link]\n extern crate empty_struct;\n \n fn main() {\n-    empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in crate `empty_struct`\n+    empty_struct::XEmpty1 {};\n }"}, {"sha": "66a74ff65601b20ad552ea2c38327c25559b98b6", "filename": "src/test/ui/no-link.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fno-link.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fno-link.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.stderr?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -1,9 +0,0 @@\n-error[E0425]: cannot find value `XEmpty1` in crate `empty_struct`\n-  --> $DIR/no-link.rs:7:19\n-   |\n-LL |     empty_struct::XEmpty1;\n-   |                   ^^^^^^^ not found in `empty_struct`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0425`."}]}