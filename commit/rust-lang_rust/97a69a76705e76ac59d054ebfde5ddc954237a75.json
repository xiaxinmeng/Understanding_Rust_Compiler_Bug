{"sha": "97a69a76705e76ac59d054ebfde5ddc954237a75", "node_id": "C_kwDOAAsO6NoAKDk3YTY5YTc2NzA1ZTc2YWM1OWQwNTRlYmZkZTVkZGM5NTQyMzdhNzU", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-27T15:28:32Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:18Z"}, "message": "Add some more unit-test directives", "tree": {"sha": "9490fd58b2351921a3f7d7d68e81358f12ba4cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9490fd58b2351921a3f7d7d68e81358f12ba4cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a69a76705e76ac59d054ebfde5ddc954237a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a69a76705e76ac59d054ebfde5ddc954237a75", "html_url": "https://github.com/rust-lang/rust/commit/97a69a76705e76ac59d054ebfde5ddc954237a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a69a76705e76ac59d054ebfde5ddc954237a75/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cda6e5401980f749db0b847e1521ad1e1e78bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cda6e5401980f749db0b847e1521ad1e1e78bea", "html_url": "https://github.com/rust-lang/rust/commit/4cda6e5401980f749db0b847e1521ad1e1e78bea"}], "stats": {"total": 249, "additions": 137, "deletions": 112}, "files": [{"sha": "cc8dea75c9cb9c58d77240e997d2ba11e7bfb476", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.main.DataflowConstProp.diff", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -22,22 +22,30 @@\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n-          _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          nop;                             // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2"}, {"sha": "ad30a5b6242ed88f7858a62f53e6a40a01fc5ec6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR bad_op_mod_by_zero.main.DataflowConstProp.diff\n #[allow(unconditional_panic)]\n fn main() {"}, {"sha": "86ed32a1f9dc5e78eabd3d5168163424d37c572e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -27,9 +27,9 @@\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n@@ -38,14 +38,16 @@\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n           _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n           StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n           StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2"}, {"sha": "86ed32a1f9dc5e78eabd3d5168163424d37c572e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -27,9 +27,9 @@\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n@@ -38,14 +38,16 @@\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n           _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n           StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n           StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2"}, {"sha": "c97257e6d8fa2112795c40c6a1cbec6b4871bf5e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR bad_op_unsafe_oob_for_slices.main.DataflowConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "a6f156fe052eeb01000e16de49a3fe9c3200ff78", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O -Zmir-opt-level=4\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mult_by_zero.test.DataflowConstProp.diff\n fn test(x: i32) -> i32 {"}, {"sha": "c225b35e19239156f79384a4a701d7e79ce197ec", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.test.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n           _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n-          _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:10\n+          _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:10\n           StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:9: +1:10\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }"}, {"sha": "098440dbe2f1ef97a6e1086af3e51f188649abff", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.main.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -17,8 +17,9 @@\n           _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n           _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n-          _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-          nop;                             // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2"}, {"sha": "680bcd7fc703bbe755264b890e27eda068d00558", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mutable_variable.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "1180dffdbadbf3903717674b9a22f02796ba3724", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -19,8 +19,8 @@\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n+          _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2"}, {"sha": "255236049f988e32a864bcbed196b14a4256d50b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mutable_variable_aggregate.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "f2788547800734507fac80b010aa15b514e1f8d9", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -26,7 +26,7 @@\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2"}, {"sha": "54b898b4ee5c5cac491d92f91343a5f95131a12d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "1f8e283f33a563be049afe33ba4516a787a68890", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -16,16 +16,17 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n           (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n-          _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2"}, {"sha": "0439a52081998b905b54f72fe34f465e78e05a2c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "9363e6b9aa1cea266384595a999094dfc4ed3256", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.main.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -25,17 +25,17 @@\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n           _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:10:13: 10:19\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n           _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n           _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n-          nop;                             // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n           StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n           StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2"}, {"sha": "e4edf1475f2bf09c6c98d5a1ce0264eda034f361", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n static mut STATIC: u32 = 42;\n "}, {"sha": "8d31d5533da2a04cf341640849c8a69f98e1b3bb", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.main.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   \n@@ -41,8 +41,9 @@\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n           _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n           StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n-          _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n           StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2"}, {"sha": "942e96fee444223fe2550838104acf439b6332b8", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR mutable_variable_unprop_assign.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "a48ba5bf2e1bb7e0a7ac157710a4c10b30e62054", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.main.DataflowConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -18,22 +18,22 @@\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:13: 8:16\n+                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n-          _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:19: 8:22\n+                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n-          _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n+          _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n           StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n-          nop;                             // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n       }"}, {"sha": "6324b4a9c545bdc0fc789e3f29ab8ec616faebc0", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n static FOO: u8 = 2;\n "}, {"sha": "045836b6373de0ad25275a7acdbca369d117539d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -13,13 +13,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:5:6: 5:10\n+                                           // + span: $DIR/ref_deref.rs:6:6: 6:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          nop;                             // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "37eb403fd411365bd1cd02676b199215d4f09be7", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -16,7 +16,7 @@\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n +                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n++                                          // + span: $DIR/ref_deref.rs:6:6: 6:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10"}, {"sha": "b3ec2383b913cc1e22ca18da821af0dea4b2a856", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR ref_deref.main.PromoteTemps.diff\n // EMIT_MIR ref_deref.main.DataflowConstProp.diff\n "}, {"sha": "1a3761f15aa9ee9b19174acf954eca688fe0142a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -19,7 +19,7 @@\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          nop;                             // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "65175917e13b8ae00037299dcad9152fc1389b56", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,4 +1,4 @@\n-// unit-test\n+// unit-test: DataflowConstProp\n // EMIT_MIR ref_deref_project.main.PromoteTemps.diff\n // EMIT_MIR ref_deref_project.main.DataflowConstProp.diff\n "}, {"sha": "6822f353b05bd1d0fd7aa4cd3a175ed536c30875", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -15,14 +15,14 @@\n           StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n           _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n                                            // mir::Constant\n-                                           // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n+                                           // + span: $DIR/reify_fn_ptr.rs:5:13: 5:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n           _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n           _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n           StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n-          nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "c69680d36e2b5d07722aad8055b9519db9d1684a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR reify_fn_ptr.main.DataflowConstProp.diff\n \n fn main() {"}, {"sha": "4e3de9df468e012d6c1a57e3887aa150b1e343db", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -20,18 +20,20 @@\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = Lt(const 2_usize, _5);      // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n-          _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }"}, {"sha": "4e3de9df468e012d6c1a57e3887aa150b1e343db", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -20,18 +20,20 @@\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = Lt(const 2_usize, _5);      // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n-          _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }"}, {"sha": "df5284d11dadfc83425352c23d7011537e366b45", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O\n+// unit-test: DataflowConstProp\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR repeat.main.DataflowConstProp.diff"}, {"sha": "07cdba28e042fae8f8acfe9a98e128560917a18d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.DataflowConstProp.diff", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -6,12 +6,14 @@\n       let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n   \n       bb0: {\n-          _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n       }\n   \n       bb1: {\n-          _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n           return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "4f5ea6320f16a8e2c284c53f0ff30100164c21d6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.PreCodegen.before.mir", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -2,8 +2,14 @@\n \n fn add() -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n \n     bb0: {\n+        _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+    }\n+\n+    bb1: {\n         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n         return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n     }"}, {"sha": "26365cc5db2dc751e0c9a48a54c68ab8bcfe5765", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // compile-flags: -C overflow-checks=on\n \n // EMIT_MIR return_place.add.DataflowConstProp.diff"}, {"sha": "a0212aea5dd8a45304fa93ce7cbde64307d44e68", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.main.DataflowConstProp.diff", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -15,17 +15,19 @@\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-          _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-          _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n++         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n+                                           // + span: $DIR/scalar_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n           StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          nop;                             // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n+          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n           StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }"}, {"sha": "d26cb30c0764580db6351e58e4d53ee3e57afa9d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR scalar_literal_propagation.main.DataflowConstProp.diff\n fn main() {\n     let x = 1;"}, {"sha": "39955097a28c4902c74f03ff9b789d2180a7546a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -21,29 +20,28 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n+                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _4 = &(*_9);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = &(*_4);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = Lt(const 1_usize, _7);      // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n-          _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "39955097a28c4902c74f03ff9b789d2180a7546a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -21,29 +20,28 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n+                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _4 = &(*_9);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = &(*_4);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = Lt(const 1_usize, _7);      // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n-          _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "b22d33795ef106f0cb9ad7565317c93bf81d7c1d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR slice_len.main.DataflowConstProp.diff"}, {"sha": "3a1b5f374f0ff093b05ce8a921bac139933c14b6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.main.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -17,17 +17,17 @@\n           (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n           _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n+                                           // + span: $DIR/tuple_literal_propagation.rs:6:5: 6:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n           StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n-          nop;                             // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n+          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n       }"}, {"sha": "737f39673a3c85a2fd19c6f8d1a4019c2f8e952e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a69a76705e76ac59d054ebfde5ddc954237a75/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs?ref=97a69a76705e76ac59d054ebfde5ddc954237a75", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: DataflowConstProp\n // EMIT_MIR tuple_literal_propagation.main.DataflowConstProp.diff\n fn main() {\n     let x = (1, 2);"}]}