{"sha": "0de7aa55062485835bc45b962f306dddf42f372d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTdhYTU1MDYyNDg1ODM1YmM0NWI5NjJmMzA2ZGRkZjQyZjM3MmQ=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-11T17:16:58Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-11T19:31:44Z"}, "message": "allow logical negation operator (!) to be overloaded", "tree": {"sha": "08f579044cdf177b10a65d9057c824441dc58a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f579044cdf177b10a65d9057c824441dc58a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de7aa55062485835bc45b962f306dddf42f372d", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de7aa55062485835bc45b962f306dddf42f372d", "html_url": "https://github.com/rust-lang/rust/commit/0de7aa55062485835bc45b962f306dddf42f372d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de7aa55062485835bc45b962f306dddf42f372d/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a82c8b3da2ce3d1ea288f58d20c07984ebaf930c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a82c8b3da2ce3d1ea288f58d20c07984ebaf930c", "html_url": "https://github.com/rust-lang/rust/commit/a82c8b3da2ce3d1ea288f58d20c07984ebaf930c"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "81b9077fb3e0fcc56bec3fe3d4592787aa685130", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=0de7aa55062485835bc45b962f306dddf42f372d", "patch": "@@ -172,7 +172,7 @@ pub mod util;\n \n pub use kinds::{Const, Copy, Owned, Durable};\n pub use ops::{Drop};\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n+pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Shl, Shr, Index};\n "}, {"sha": "36293d6a1c0cef105a7bf00683b2870e935192c0", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=0de7aa55062485835bc45b962f306dddf42f372d", "patch": "@@ -48,6 +48,11 @@ pub trait Neg<Result> {\n     pure fn neg(&self) -> Result;\n }\n \n+#[lang=\"not\"]\n+pub trait Not<Result> {\n+    pure fn not(&self) -> Result;\n+}\n+\n #[lang=\"bitand\"]\n pub trait BitAnd<RHS,Result> {\n     pure fn bitand(&self, rhs: &RHS) -> Result;\n@@ -77,4 +82,3 @@ pub trait Shr<RHS,Result> {\n pub trait Index<Index,Result> {\n     pure fn index(&self, index: Index) -> Result;\n }\n-"}, {"sha": "de23feceea5907478230cd038cfb9cb026faeebc", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=0de7aa55062485835bc45b962f306dddf42f372d", "patch": "@@ -4,7 +4,7 @@\n \n pub use kinds::{Const, Copy, Owned, Durable};\n pub use ops::{Drop};\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n+pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Shl, Shr, Index};\n pub use option::{Option, Some, None};"}, {"sha": "ae56fb7f717dad13e1660738190be6284e74e141", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 47, "deletions": 41, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0de7aa55062485835bc45b962f306dddf42f372d", "patch": "@@ -50,36 +50,37 @@ pub enum LangItem {\n     DivTraitLangItem,           // 8\n     ModuloTraitLangItem,        // 9\n     NegTraitLangItem,           // 10\n-    BitXorTraitLangItem,        // 11\n-    BitAndTraitLangItem,        // 12\n-    BitOrTraitLangItem,         // 13\n-    ShlTraitLangItem,           // 14\n-    ShrTraitLangItem,           // 15\n-    IndexTraitLangItem,         // 16\n-\n-    EqTraitLangItem,            // 17\n-    OrdTraitLangItem,           // 18\n-\n-    StrEqFnLangItem,            // 19\n-    UniqStrEqFnLangItem,        // 20\n-    AnnihilateFnLangItem,       // 21\n-    LogTypeFnLangItem,          // 22\n-    FailFnLangItem,             // 23\n-    FailBoundsCheckFnLangItem,  // 24\n-    ExchangeMallocFnLangItem,   // 25\n-    ExchangeFreeFnLangItem,     // 26\n-    MallocFnLangItem,           // 27\n-    FreeFnLangItem,             // 28\n+    NotTraitLangItem,           // 11\n+    BitXorTraitLangItem,        // 12\n+    BitAndTraitLangItem,        // 13\n+    BitOrTraitLangItem,         // 14\n+    ShlTraitLangItem,           // 15\n+    ShrTraitLangItem,           // 16\n+    IndexTraitLangItem,         // 17\n+\n+    EqTraitLangItem,            // 18\n+    OrdTraitLangItem,           // 19\n+\n+    StrEqFnLangItem,            // 20\n+    UniqStrEqFnLangItem,        // 21\n+    AnnihilateFnLangItem,       // 22\n+    LogTypeFnLangItem,          // 23\n+    FailFnLangItem,             // 24\n+    FailBoundsCheckFnLangItem,  // 25\n+    ExchangeMallocFnLangItem,   // 26\n+    ExchangeFreeFnLangItem,     // 27\n+    MallocFnLangItem,           // 28\n+    FreeFnLangItem,             // 29\n }\n \n struct LanguageItems {\n-    items: [ Option<def_id> * 29 ]\n+    items: [ Option<def_id> * 30 ]\n }\n \n impl LanguageItems {\n     static pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..29 ]\n+            items: [ None, ..30 ]\n         }\n     }\n \n@@ -106,25 +107,26 @@ impl LanguageItems {\n             8  => \"div\",\n             9  => \"modulo\",\n             10 => \"neg\",\n-            11 => \"bitxor\",\n-            12 => \"bitand\",\n-            13 => \"bitor\",\n-            14 => \"shl\",\n-            15 => \"shr\",\n-            16 => \"index\",\n-            17 => \"eq\",\n-            18 => \"ord\",\n-\n-            19 => \"str_eq\",\n-            20 => \"uniq_str_eq\",\n-            21 => \"annihilate\",\n-            22 => \"log_type\",\n-            23 => \"fail_\",\n-            24 => \"fail_bounds_check\",\n-            25 => \"exchange_malloc\",\n-            26 => \"exchange_free\",\n-            27 => \"malloc\",\n-            28 => \"free\",\n+            11 => \"not\",\n+            12 => \"bitxor\",\n+            13 => \"bitand\",\n+            14 => \"bitor\",\n+            15 => \"shl\",\n+            16 => \"shr\",\n+            17 => \"index\",\n+            18 => \"eq\",\n+            19 => \"ord\",\n+\n+            20 => \"str_eq\",\n+            21 => \"uniq_str_eq\",\n+            22 => \"annihilate\",\n+            23 => \"log_type\",\n+            24 => \"fail_\",\n+            25 => \"fail_bounds_check\",\n+            26 => \"exchange_malloc\",\n+            27 => \"exchange_free\",\n+            28 => \"malloc\",\n+            29 => \"free\",\n \n             _ => \"???\"\n         }\n@@ -167,6 +169,9 @@ impl LanguageItems {\n     pub fn neg_trait(&const self) -> def_id {\n         self.items[NegTraitLangItem as uint].get()\n     }\n+    pub fn not_trait(&const self) -> def_id {\n+        self.items[NotTraitLangItem as uint].get()\n+    }\n     pub fn bitxor_trait(&const self) -> def_id {\n         self.items[BitXorTraitLangItem as uint].get()\n     }\n@@ -244,6 +249,7 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(~\"div\", DivTraitLangItem as uint);\n     item_refs.insert(~\"modulo\", ModuloTraitLangItem as uint);\n     item_refs.insert(~\"neg\", NegTraitLangItem as uint);\n+    item_refs.insert(~\"not\", NotTraitLangItem as uint);\n     item_refs.insert(~\"bitxor\", BitXorTraitLangItem as uint);\n     item_refs.insert(~\"bitand\", BitAndTraitLangItem as uint);\n     item_refs.insert(~\"bitor\", BitOrTraitLangItem as uint);"}, {"sha": "a7c579127f95478d9d3e165c72a3199470dff681", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7aa55062485835bc45b962f306dddf42f372d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0de7aa55062485835bc45b962f306dddf42f372d", "patch": "@@ -54,7 +54,7 @@ use syntax::ast::{ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n use syntax::ast::{type_value_ns, ty_param_bound, unnamed_field};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n-use syntax::ast::{view_path_simple, visibility, anonymous, named};\n+use syntax::ast::{view_path_simple, visibility, anonymous, named, not};\n use syntax::ast_util::{def_id_of_def, dummy_sp, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private, visibility_to_privacy};\n@@ -5217,6 +5217,10 @@ impl Resolver {\n                 self.add_fixed_trait_for_expr(expr.id,\n                                               self.lang_items.neg_trait());\n             }\n+            expr_unary(not, _) => {\n+                self.add_fixed_trait_for_expr(expr.id,\n+                                              self.lang_items.not_trait());\n+            }\n             expr_index(*) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n                                               self.lang_items.index_trait());"}]}