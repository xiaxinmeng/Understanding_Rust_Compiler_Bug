{"sha": "46ebc2bc5c8909871939ea0a96d874a82c60a360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZWJjMmJjNWM4OTA5ODcxOTM5ZWEwYTk2ZDg3NGE4MmM2MGEzNjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T13:05:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T13:05:57Z"}, "message": "Make the hello world example runnable", "tree": {"sha": "e177e0c9bd949e939334d904e6d262aab1e63e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e177e0c9bd949e939334d904e6d262aab1e63e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ebc2bc5c8909871939ea0a96d874a82c60a360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ebc2bc5c8909871939ea0a96d874a82c60a360", "html_url": "https://github.com/rust-lang/rust/commit/46ebc2bc5c8909871939ea0a96d874a82c60a360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ebc2bc5c8909871939ea0a96d874a82c60a360/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8c25ae75d0f47e7db44c5fed3e9324c0e9487e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8c25ae75d0f47e7db44c5fed3e9324c0e9487e", "html_url": "https://github.com/rust-lang/rust/commit/9a8c25ae75d0f47e7db44c5fed3e9324c0e9487e"}], "stats": {"total": 117, "additions": 48, "deletions": 69}, "files": [{"sha": "c0bc1978300c6f92ca59c8b5232c6c2b0ba8ea25", "filename": "build.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46ebc2bc5c8909871939ea0a96d874a82c60a360/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/46ebc2bc5c8909871939ea0a96d874a82c60a360/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=46ebc2bc5c8909871939ea0a96d874a82c60a360", "patch": "@@ -14,12 +14,12 @@ else\n    exit 1\n fi\n \n-RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift.$dylib_ext -L crate=. --crate-type lib -Og\"\n+RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift.$dylib_ext -L crate=. -Og\"\n \n-$RUSTC mini_core.rs --crate-name mini_core &&\n-$RUSTC example.rs &&\n-$RUSTC mini_core_hello_world.rs &&\n+$RUSTC mini_core.rs --crate-name mini_core --crate-type lib &&\n+$RUSTC example.rs --crate-type lib &&\n+$RUSTC mini_core_hello_world.rs --crate-type bin &&\n \n-$RUSTC ../target/libcore/src/libcore/lib.rs --color=always 2>&1 | (head -n 10; echo \"====\"; tail -n 1000)\n+$RUSTC ../target/libcore/src/libcore/lib.rs --color=always --crate-type lib 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n cat ../target/log.txt | sort | uniq -c | grep -v \"rval unsize move\" | grep -v \"rval len\"\n rm *.rlib ../target/log.txt"}, {"sha": "1b993e087794bae4bd1d21f5044874129702e3f0", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=46ebc2bc5c8909871939ea0a96d874a82c60a360", "patch": "@@ -50,7 +50,13 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n                 context.func = func;\n                 // TODO: cranelift doesn't yet support some of the things needed\n-                if false {\n+                if cx\n+                    .tcx\n+                    .sess\n+                    .crate_types\n+                    .get()\n+                    .contains(&CrateType::Executable)\n+                {\n                     cx.module.define_function(func_id, context).unwrap();\n                     cx.defined_functions.push(func_id);\n                 }"}, {"sha": "91352744fe46b76fc3fbdc71c0bd7dfb7d4f106a", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=46ebc2bc5c8909871939ea0a96d874a82c60a360", "patch": "@@ -79,7 +79,13 @@ fn trans_const_place<'a, 'tcx: 'a>(\n ) -> CPlace<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n-    if true {\n+    if !fx\n+        .tcx\n+        .sess\n+        .crate_types\n+        .get()\n+        .contains(&CrateType::Executable)\n+    {\n         // TODO: cranelift-module api seems to be used wrong,\n         // thus causing panics for some consts, so this disables it\n         return CPlace::Addr(fx.bcx.ins().iconst(types::I64, 0), layout);"}, {"sha": "02a23097b6bf3df59abd5ae7314bad8091674d94", "filename": "src/lib.rs", "status": "modified", "additions": 29, "deletions": 62, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebc2bc5c8909871939ea0a96d874a82c60a360/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=46ebc2bc5c8909871939ea0a96d874a82c60a360", "patch": "@@ -29,10 +29,7 @@ use std::sync::{mpsc, Arc};\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::{\n-    config::{CrateType, OutputFilenames},\n-    CompileIncomplete,\n-};\n+use rustc::session::{config::OutputFilenames, CompileIncomplete};\n use rustc::ty::query::Providers;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::{build_link_meta, out_filename};\n@@ -65,7 +62,7 @@ mod prelude {\n     pub use rustc::mir;\n     pub use rustc::mir::interpret::AllocId;\n     pub use rustc::mir::*;\n-    pub use rustc::session::Session;\n+    pub use rustc::session::{config::CrateType, Session};\n     pub use rustc::ty::layout::{self, LayoutOf, Size, TyLayout};\n     pub use rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n@@ -278,27 +275,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n-        if false {\n-            let call_instance =\n-                collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager)\n-                    .0\n-                    .into_iter()\n-                    .find_map(|mono_item| {\n-                        let inst = match mono_item {\n-                            MonoItem::Fn(inst) => inst,\n-                            _ => return None,\n-                        };\n-\n-                        //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n-                        if tcx.absolute_item_path_str(inst.def_id()) == \"example::option_unwrap_or\"\n-                        {\n-                            Some(inst)\n-                        } else {\n-                            None\n-                        }\n-                    }).unwrap();\n+        if tcx.sess.crate_types.get().contains(&CrateType::Executable) {\n+            let start_wrapper = tcx.lang_items().start_fn().expect(\"no start lang item\");\n \n-            let (name, sig) = crate::abi::get_function_name_and_sig(tcx, call_instance);\n+            let (name, sig) =\n+                crate::abi::get_function_name_and_sig(tcx, Instance::mono(tcx, start_wrapper));\n             let called_func_id = module\n                 .declare_function(&name, Linkage::Import, &sig)\n                 .unwrap();\n@@ -311,19 +292,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             tcx.sess.warn(\"Finalized everything\");\n \n             let finalized_function: *const u8 = module.finalize_function(called_func_id);\n-            /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n-            let mut res = 0u32;\n-            f(&mut res);\n-            tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n-            /*let f: extern \"C\" fn(&mut bool, &u8, bool) =\n--                   unsafe { ::std::mem::transmute(finalized_function) };\n-            let mut res = false;\n-            f(&mut res, &3, false);\n-            tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));*/\n-            let f: extern \"C\" fn(&mut u8, isize, *const *const u8) =\n+            let f: extern \"C\" fn(*const u8, isize, *const *const u8) -> isize =\n                 unsafe { ::std::mem::transmute(finalized_function) };\n-            let mut res = 0;\n-            f(&mut res, 0, 0 as *const _);\n+            let res = f(0 as *const u8, 0, 0 as *const _);\n             tcx.sess.warn(&format!(\"main returned {}\", res));\n \n             module.finish();\n@@ -370,32 +341,28 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             ).unwrap();\n \n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::Rlib\n-            /*&& crate_type != CrateType::Dylib*/\n-            {\n-                sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type));\n+            match crate_type {\n+                CrateType::Executable => {\n+                    sess.warn(\"Rustc codegen cranelift doesn't produce executables, but is a JIT for them\");   \n+                },\n+                CrateType::Rlib /* | CrateType::Dylib */ => {\n+                    let output_name = out_filename(\n+                        sess,\n+                        crate_type,\n+                        &outputs,\n+                        &ongoing_codegen.crate_name.as_str(),\n+                    );\n+                    let file = File::create(&output_name).unwrap();\n+                    let mut builder = ar::Builder::new(file);\n+                    builder\n+                        .append(\n+                            &ar::Header::new(b\".rustc.clif_metadata\".to_vec(), metadata.len() as u64),\n+                            ::std::io::Cursor::new(metadata.clone()),\n+                        ).unwrap();\n+                    //artifact.write(file).unwrap();\n+                }\n+                _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),\n             }\n-            let output_name = out_filename(\n-                sess,\n-                crate_type,\n-                &outputs,\n-                &ongoing_codegen.crate_name.as_str(),\n-            );\n-            let file = File::create(&output_name).unwrap();\n-            let mut builder = ar::Builder::new(file);\n-            builder\n-                .append(\n-                    &ar::Header::new(b\".rustc.clif_metadata\".to_vec(), metadata.len() as u64),\n-                    ::std::io::Cursor::new(metadata.clone()),\n-                ).unwrap();\n-            //artifact.write(file).unwrap();\n-        }\n-\n-        sess.abort_if_errors();\n-        if !sess.opts.crate_types.contains(&CrateType::Rlib)\n-            && !sess.opts.crate_types.contains(&CrateType::Dylib)\n-        {\n-            sess.fatal(\"Executables are not supported by the metadata-only backend.\");\n         }\n         Ok(())\n     }"}]}