{"sha": "7ba3a713a13714cf03043b84c94f61b1447f0c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTNhNzEzYTEzNzE0Y2YwMzA0M2I4NGM5NGY2MWIxNDQ3ZjBjNjA=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-01T14:26:40Z"}, "committer": {"name": "Enrico Schmitz", "email": "es@mdtm.de", "date": "2017-03-01T14:26:40Z"}, "message": "Using to_u128_unchecked and int_type instead of creating a ConstantInt", "tree": {"sha": "11d9bba430f802e20b853ce7fcdccb8889daa5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11d9bba430f802e20b853ce7fcdccb8889daa5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba3a713a13714cf03043b84c94f61b1447f0c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba3a713a13714cf03043b84c94f61b1447f0c60", "html_url": "https://github.com/rust-lang/rust/commit/7ba3a713a13714cf03043b84c94f61b1447f0c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba3a713a13714cf03043b84c94f61b1447f0c60/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63296f0393bfd4124e99f62d7e8d88455e5f691f", "url": "https://api.github.com/repos/rust-lang/rust/commits/63296f0393bfd4124e99f62d7e8d88455e5f691f", "html_url": "https://github.com/rust-lang/rust/commit/63296f0393bfd4124e99f62d7e8d88455e5f691f"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "cae9cec49ee29047d7ccc324cc7bd11d09f1c036", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ba3a713a13714cf03043b84c94f61b1447f0c60/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba3a713a13714cf03043b84c94f61b1447f0c60/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=7ba3a713a13714cf03043b84c94f61b1447f0c60", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::*;\n use rustc::hir::*;\n use syntax::codemap::Span;\n use utils::{span_lint, snippet, in_macro};\n-use rustc_const_math::ConstInt;\n+use syntax::attr::IntType::{SignedInt, UnsignedInt};\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`.\n ///\n@@ -60,11 +60,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n \n \n fn check(cx: &LateContext, e: &Expr, m: i8, span: Span, arg: Span) {\n-    if let Some(v @ Constant::Int(_)) = constant_simple(e) {\n+    if let Some(Constant::Int(v)) = constant_simple(e) {\n         if match m {\n-            0 => v == Constant::Int(ConstInt::U8(0)),\n-            -1 => v == Constant::Int(ConstInt::I8(-1)),\n-            1 => v == Constant::Int(ConstInt::U8(1)),\n+            0 => v.to_u128_unchecked() == 0,\n+            -1 => match v.int_type() {\n+                SignedInt(_) => (v.to_u128_unchecked() as i128  == -1),\n+                UnsignedInt(_) =>  false\n+            },\n+            1 => v.to_u128_unchecked() == 1,\n             _ => unreachable!(),\n         } {\n             span_lint(cx,"}]}