{"sha": "e81fefaa5096b22c79d13df70eb59d2d66cc536c", "node_id": "C_kwDOAAsO6NoAKGU4MWZlZmFhNTA5NmIyMmM3OWQxM2RmNzBlYjU5ZDJkNjZjYzUzNmM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-30T02:44:29Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-31T20:11:01Z"}, "message": "Address some issues in chunk iterator safety comments\n\nCo-authored-by: the8472 <the8472@users.noreply.github.com>", "tree": {"sha": "077818afebd7a04aa22c91a74581a8e7bc10c9b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077818afebd7a04aa22c91a74581a8e7bc10c9b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81fefaa5096b22c79d13df70eb59d2d66cc536c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmF++FUACgkQ4u/UMJ4R\nyKhSGQ//Y3NGzzCEnlVt/m9la8+umK43JfvDVHhVI6o4r3hpPCvyReNpEFHMkjyy\nARh1L8IGIKSHNa7+C7KACU+LaUOqdkhgJbnnvT2WgMPevIW/m9ynsV2TpEGcneXV\nprBIMm289uoiJixF2J8bJ224KINvUXbYj/QApnPcCoD8A2dWGhzx1lCARCjc2E7C\ncF/TDiGHQL+jUAO7WW4a1DFFM0cyR20LenoZb6afL0pprqNczuEhJ8i6J6QG87Z9\nBnenK1HM2NtnNbhpZ6QGwSI+3wVE8f7jZ2m20+uzADdYCBjIupkA0xJ17G0QxGli\nJjqNeD4PKOTRdFXp4uza2Ee4JaUDThiz9VmMoVRY6a+y5HdSNgZgY2flkAgshoqE\nLMuZFN+d6QoLn8f3h6ZAnOLbw91TqHXPhPc59L83n0i7Yuu7+c6G+FxU2QnjHp3j\njyTOKAu5Fx4p1QCWP3HAXwU++EYtCnKL8/rm9AkUxDD0tLtUHKpCo2evfamzqfDK\nrthjaWqWGIrONRNJQV2uhhD8A32ufOi0Zo7Wp6qU+9adr6Ry9JM+rHSl2SezuHNL\nhRq7Upnr7RthuvsZKgN9utt0XpYT9G+jucVZ6SXc25qjLyZlmEHDIj5KGlpeNmFA\nKSvpSK/JPorKyE6eJDRRCL0NRccnREKfZCCFewq0cGOUXWkc37Y=\n=Py/L\n-----END PGP SIGNATURE-----", "payload": "tree 077818afebd7a04aa22c91a74581a8e7bc10c9b9\nparent 83aa6d4109f94730b62e275df30247091c629ce9\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1635561869 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1635711061 -0700\n\nAddress some issues in chunk iterator safety comments\n\nCo-authored-by: the8472 <the8472@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81fefaa5096b22c79d13df70eb59d2d66cc536c", "html_url": "https://github.com/rust-lang/rust/commit/e81fefaa5096b22c79d13df70eb59d2d66cc536c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81fefaa5096b22c79d13df70eb59d2d66cc536c/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83aa6d4109f94730b62e275df30247091c629ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/83aa6d4109f94730b62e275df30247091c629ce9", "html_url": "https://github.com/rust-lang/rust/commit/83aa6d4109f94730b62e275df30247091c629ce9"}], "stats": {"total": 34, "additions": 9, "deletions": 25}, "files": [{"sha": "18bf61aeb16e04aaa57d7caa9d82f78ff713fa6d", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e81fefaa5096b22c79d13df70eb59d2d66cc536c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81fefaa5096b22c79d13df70eb59d2d66cc536c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=e81fefaa5096b22c79d13df70eb59d2d66cc536c", "patch": "@@ -1475,22 +1475,19 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n             let remainder = self.v.len() % self.chunk_size;\n             let chunksz = if remainder != 0 { remainder } else { self.chunk_size };\n             // SAFETY: split_at_unchecked requires the argument be less than or\n-            // equal to the length. This is guaranteed, but subtle: We need the\n-            // expression `self.v.len() - sz` not to overflow, which means we\n-            // need `sz >= tmp_len`.\n-            //\n-            // `sz` will always either be `self.v.len() % self.chunk_size`,\n-            // which will always evaluate to strictly less than `self.v.len()`\n-            // (or panic, in the case that `self.chunk_size` is zero), or it can\n-            // be `self.chunk_size`, in the case that the length is exactly\n+            // equal to the length. This is guaranteed, but subtle: `chunksz`\n+            // will always either be `self.v.len() % self.chunk_size`, which\n+            // will always evaluate to strictly less than `self.v.len()` (or\n+            // panic, in the case that `self.chunk_size` is zero), or it can be\n+            // `self.chunk_size`, in the case that the length is exactly\n             // divisible by the chunk size.\n             //\n             // While it seems like using `self.chunk_size` in this case could\n             // lead to a value greater than `self.v.len()`, it cannot: if\n             // `self.chunk_size` were greater than `self.v.len()`, then\n-            // `self.v.len() % self.chunk_size` would have returned non-zero\n-            // (note that in this branch of the `if`, we already know that\n-            // `self.v` is non-empty).\n+            // `self.v.len() % self.chunk_size` would return nonzero (note that\n+            // in this branch of the `if`, we already know that `self.v` is\n+            // non-empty).\n             let (fst, snd) = unsafe { self.v.split_at_unchecked(self.v.len() - chunksz) };\n             self.v = fst;\n             Some(snd)\n@@ -2524,20 +2521,7 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n         } else {\n             let remainder = self.v.len() % self.chunk_size;\n             let chunksz = if remainder != 0 { remainder } else { self.chunk_size };\n-            // SAFETY: split_at_unchecked requires the argument be less than or\n-            // equal to the length. This is guaranteed, but subtle: `chunksz`\n-            // will always either be `self.v.len() % self.chunk_size`, which\n-            // will always evaluate to strictly less than `self.v.len()` (or\n-            // panic, in the case that `self.chunk_size` is zero), or it can be\n-            // `self.chunk_size`, in the case that the length is exactly\n-            // divisible by the chunk size.\n-            //\n-            // While it seems like using `self.chunk_size` in this case could\n-            // lead to a value greater than `self.v.len()`, it cannot: if\n-            // `self.chunk_size` were greater than `self.v.len()`, then\n-            // `self.v.len() % self.chunk_size` would return nonzero (note that\n-            // in this branch of the `if`, we already know that `self.v` is\n-            // non-empty).\n+            // SAFETY: similar to Chunks::next_back\n             let (fst, snd) = unsafe { self.v.split_at_unchecked(chunksz) };\n             self.v = snd;\n             Some(fst)"}]}