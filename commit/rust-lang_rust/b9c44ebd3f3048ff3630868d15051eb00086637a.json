{"sha": "b9c44ebd3f3048ff3630868d15051eb00086637a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzQ0ZWJkM2YzMDQ4ZmYzNjMwODY4ZDE1MDUxZWIwMDA4NjYzN2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-24T22:42:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-24T22:42:27Z"}, "message": "Use enum for approximate suggestions", "tree": {"sha": "7cdc169d440532f08d5f154a59d05bdc7709639f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cdc169d440532f08d5f154a59d05bdc7709639f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c44ebd3f3048ff3630868d15051eb00086637a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c44ebd3f3048ff3630868d15051eb00086637a", "html_url": "https://github.com/rust-lang/rust/commit/b9c44ebd3f3048ff3630868d15051eb00086637a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c44ebd3f3048ff3630868d15051eb00086637a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5203d1073a774e01ae0c57ebb561648a8fd9910", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5203d1073a774e01ae0c57ebb561648a8fd9910", "html_url": "https://github.com/rust-lang/rust/commit/f5203d1073a774e01ae0c57ebb561648a8fd9910"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "bfeb351f1a461ed801da3dfc85f9df8e167d5aa4", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=b9c44ebd3f3048ff3630868d15051eb00086637a", "patch": "@@ -11,6 +11,7 @@\n use CodeSuggestion;\n use SubstitutionPart;\n use Substitution;\n+use SuggestionApproximate;\n use Level;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n@@ -222,7 +223,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: false,\n-            approximate: false,\n+            approximate: SuggestionApproximate::Unspecified,\n         });\n         self\n     }\n@@ -253,7 +254,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: false,\n+            approximate: SuggestionApproximate::Unspecified,\n         });\n         self\n     }\n@@ -269,15 +270,16 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: false,\n+            approximate: SuggestionApproximate::Unspecified,\n         });\n         self\n     }\n \n     /// This is a suggestion that may contain mistakes or fillers and should\n     /// be read and understood by a human.\n     pub fn span_approximate_suggestion(&mut self, sp: Span, msg: &str,\n-                                       suggestion: String) -> &mut Self {\n+                                       suggestion: String,\n+                                       approximate: SuggestionApproximate) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -287,13 +289,14 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: true,\n+            approximate,\n         });\n         self\n     }\n \n     pub fn span_approximate_suggestions(&mut self, sp: Span, msg: &str,\n-                                        suggestions: Vec<String>) -> &mut Self {\n+                                        suggestions: Vec<String>,\n+                                        approximate: SuggestionApproximate) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.into_iter().map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -303,7 +306,7 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: true,\n+            approximate,\n         });\n         self\n     }"}, {"sha": "31eacb527ee6a310ea662da0d684724cb2311438", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=b9c44ebd3f3048ff3630868d15051eb00086637a", "patch": "@@ -11,6 +11,7 @@\n use Diagnostic;\n use DiagnosticId;\n use DiagnosticStyledString;\n+use SuggestionApproximate;\n \n use Level;\n use Handler;\n@@ -190,12 +191,14 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn span_approximate_suggestion(&mut self,\n                                                 sp: Span,\n                                                 msg: &str,\n-                                                suggestion: String)\n+                                                suggestion: String,\n+                                                approximate: SuggestionApproximate)\n                                                 -> &mut Self);\n     forward!(pub fn span_approximate_suggestions(&mut self,\n                                                  sp: Span,\n                                                  msg: &str,\n-                                                 suggestions: Vec<String>)\n+                                                 suggestions: Vec<String>,\n+                                                 approximate: SuggestionApproximate)\n                                                  -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);"}, {"sha": "9abb5b38c052e5c3f329788fb47b4ad1a7307c99", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b9c44ebd3f3048ff3630868d15051eb00086637a", "patch": "@@ -56,6 +56,14 @@ mod lock;\n \n use syntax_pos::{BytePos, Loc, FileLinesResult, FileMap, FileName, MultiSpan, Span, NO_EXPANSION};\n \n+#[derive(Copy, Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum SuggestionApproximate {\n+    MachineApplicable,\n+    HasPlaceholders,\n+    MaybeIncorrect,\n+    Unspecified\n+}\n+\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -87,7 +95,7 @@ pub struct CodeSuggestion {\n     /// Sometimes we may show suggestions with placeholders,\n     /// which are useful for users but not useful for\n     /// tools like rustfix\n-    pub approximate: bool,\n+    pub approximate: SuggestionApproximate,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "dd77e44149908c2e43005f7e33c8a7cc376e460b", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c44ebd3f3048ff3630868d15051eb00086637a/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=b9c44ebd3f3048ff3630868d15051eb00086637a", "patch": "@@ -23,7 +23,7 @@ use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, CodeMapper};\n-use errors::DiagnosticId;\n+use errors::{DiagnosticId, SuggestionApproximate};\n use errors::emitter::{Emitter, EmitterWriter};\n \n use rustc_data_structures::sync::{self, Lrc};\n@@ -138,7 +138,7 @@ struct DiagnosticSpan {\n     suggested_replacement: Option<String>,\n     /// If the suggestion is approximate\n     #[rustc_serialize_exclude_null]\n-    suggestion_approximate: Option<bool>,\n+    suggestion_approximate: Option<SuggestionApproximate>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n@@ -239,7 +239,7 @@ impl Diagnostic {\n \n impl DiagnosticSpan {\n     fn from_span_label(span: SpanLabel,\n-                       suggestion: Option<(&String, bool)>,\n+                       suggestion: Option<(&String, SuggestionApproximate)>,\n                        je: &JsonEmitter)\n                        -> DiagnosticSpan {\n         Self::from_span_etc(span.span,\n@@ -252,7 +252,7 @@ impl DiagnosticSpan {\n     fn from_span_etc(span: Span,\n                      is_primary: bool,\n                      label: Option<String>,\n-                     suggestion: Option<(&String, bool)>,\n+                     suggestion: Option<(&String, SuggestionApproximate)>,\n                      je: &JsonEmitter)\n                      -> DiagnosticSpan {\n         // obtain the full backtrace from the `macro_backtrace`\n@@ -272,7 +272,7 @@ impl DiagnosticSpan {\n     fn from_span_full(span: Span,\n                       is_primary: bool,\n                       label: Option<String>,\n-                      suggestion: Option<(&String, bool)>,\n+                      suggestion: Option<(&String, SuggestionApproximate)>,\n                       mut backtrace: vec::IntoIter<MacroBacktrace>,\n                       je: &JsonEmitter)\n                       -> DiagnosticSpan {"}]}