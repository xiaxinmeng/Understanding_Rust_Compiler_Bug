{"sha": "7f00ab3df10b8b648872edf25fb1700168b306de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMDBhYjNkZjEwYjhiNjQ4ODcyZWRmMjVmYjE3MDAxNjhiMzA2ZGU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-16T00:53:30Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-16T05:19:43Z"}, "message": "fix benchmark and the tutorials", "tree": {"sha": "5390a025d344f358d1d551b8b508dec1df924664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5390a025d344f358d1d551b8b508dec1df924664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f00ab3df10b8b648872edf25fb1700168b306de", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f00ab3df10b8b648872edf25fb1700168b306de", "html_url": "https://github.com/rust-lang/rust/commit/7f00ab3df10b8b648872edf25fb1700168b306de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f00ab3df10b8b648872edf25fb1700168b306de/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "845465ee246bee760b8ef0da725f8a711bfc23c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/845465ee246bee760b8ef0da725f8a711bfc23c9", "html_url": "https://github.com/rust-lang/rust/commit/845465ee246bee760b8ef0da725f8a711bfc23c9"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "2e3ce40c9f7dcb2e5da22fd6c4621bb65eda89aa", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f00ab3df10b8b648872edf25fb1700168b306de/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f00ab3df10b8b648872edf25fb1700168b306de/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=7f00ab3df10b8b648872edf25fb1700168b306de", "patch": "@@ -359,7 +359,7 @@ fn pnorm(nums: &~[float], p: uint) -> float {\n \n fn main() {\n     let numbers = vec::from_fn(1000000, |_| rand::random::<float>());\n-    println(fmt!(\"Inf-norm = %?\",  numbers.max()));\n+    println(fmt!(\"Inf-norm = %?\",  *numbers.iter().max().unwrap()));\n \n     let numbers_arc = ARC(numbers);\n "}, {"sha": "c0b939ddac50fa5f6115baa7b36f0e8f5accac5b", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f00ab3df10b8b648872edf25fb1700168b306de/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f00ab3df10b8b648872edf25fb1700168b306de/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=7f00ab3df10b8b648872edf25fb1700168b306de", "patch": "@@ -2039,17 +2039,12 @@ themselves contain type parameters. A trait for generalized sequence\n types might look like the following:\n \n ~~~~\n-# use std::vec;\n trait Seq<T> {\n-    fn len(&self) -> uint;\n-    fn iter(&self, b: &fn(v: &T));\n+    fn length(&self) -> uint;\n }\n \n impl<T> Seq<T> for ~[T] {\n-    fn len(&self) -> uint { self.len() }\n-    fn iter(&self, b: &fn(v: &T)) {\n-        for vec::each(*self) |elt| { b(elt); }\n-    }\n+    fn length(&self) -> uint { self.len() }\n }\n ~~~~\n "}, {"sha": "8c8b26afa08b117cf080487a43b4fca4a376837d", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f00ab3df10b8b648872edf25fb1700168b306de/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f00ab3df10b8b648872edf25fb1700168b306de/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=7f00ab3df10b8b648872edf25fb1700168b306de", "patch": "@@ -95,7 +95,8 @@ impl RepeatFasta {\n             let alu: &[u8] = self.alu.as_bytes();\n \n             copy_memory(buf, alu, alu_len);\n-            copy_memory(vec::mut_slice(buf, alu_len, buf.len()),\n+            let buf_len = buf.len();\n+            copy_memory(vec::mut_slice(buf, alu_len, buf_len),\n                         alu,\n                         LINE_LEN);\n "}]}