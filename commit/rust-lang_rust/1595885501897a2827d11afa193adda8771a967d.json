{"sha": "1595885501897a2827d11afa193adda8771a967d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTU4ODU1MDE4OTdhMjgyN2QxMWFmYTE5M2FkZGE4NzcxYTk2N2Q=", "commit": {"author": {"name": "J.C. Moyer", "email": "jmoyer1992@gmail.com", "date": "2014-05-07T05:54:44Z"}, "committer": {"name": "J.C. Moyer", "email": "jmoyer1992@gmail.com", "date": "2014-05-14T08:37:06Z"}, "message": "Implement set complement and universe for bitflags", "tree": {"sha": "aa8d6625488a899fb34a27074a9c58ffec78fce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa8d6625488a899fb34a27074a9c58ffec78fce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1595885501897a2827d11afa193adda8771a967d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1595885501897a2827d11afa193adda8771a967d", "html_url": "https://github.com/rust-lang/rust/commit/1595885501897a2827d11afa193adda8771a967d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1595885501897a2827d11afa193adda8771a967d/comments", "author": {"login": "jcmoyer", "id": 1007628, "node_id": "MDQ6VXNlcjEwMDc2Mjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1007628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmoyer", "html_url": "https://github.com/jcmoyer", "followers_url": "https://api.github.com/users/jcmoyer/followers", "following_url": "https://api.github.com/users/jcmoyer/following{/other_user}", "gists_url": "https://api.github.com/users/jcmoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmoyer/subscriptions", "organizations_url": "https://api.github.com/users/jcmoyer/orgs", "repos_url": "https://api.github.com/users/jcmoyer/repos", "events_url": "https://api.github.com/users/jcmoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmoyer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmoyer", "id": 1007628, "node_id": "MDQ6VXNlcjEwMDc2Mjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1007628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmoyer", "html_url": "https://github.com/jcmoyer", "followers_url": "https://api.github.com/users/jcmoyer/followers", "following_url": "https://api.github.com/users/jcmoyer/following{/other_user}", "gists_url": "https://api.github.com/users/jcmoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmoyer/subscriptions", "organizations_url": "https://api.github.com/users/jcmoyer/orgs", "repos_url": "https://api.github.com/users/jcmoyer/repos", "events_url": "https://api.github.com/users/jcmoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmoyer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "html_url": "https://github.com/rust-lang/rust/commit/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "c970448517331b703ec31f24dff6deed5497df4c", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1595885501897a2827d11afa193adda8771a967d/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595885501897a2827d11afa193adda8771a967d/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=1595885501897a2827d11afa193adda8771a967d", "patch": "@@ -34,6 +34,7 @@\n //!     assert!((e1 | e2) == FlagABC);   // union\n //!     assert!((e1 & e2) == FlagC);     // intersection\n //!     assert!((e1 - e2) == FlagA);     // set difference\n+//!     assert!(!e2 == FlagA);           // set complement\n //! }\n //! ~~~\n //!\n@@ -88,14 +89,17 @@\n //! - `BitOr`: union\n //! - `BitAnd`: intersection\n //! - `Sub`: set difference\n+//! - `Not`: set complement\n //!\n //! # Methods\n //!\n //! The following methods are defined for the generated `struct`:\n //!\n //! - `empty`: an empty set of flags\n+//! - `all`: the set of all flags\n //! - `bits`: the raw value of the flags currently stored\n //! - `is_empty`: `true` if no flags are currently stored\n+//! - `is_all`: `true` if all flags are currently set\n //! - `intersects`: `true` if there are flags common to both `self` and `other`\n //! - `contains`: `true` all of the flags in `other` are contained within `self`\n //! - `insert`: inserts the specified flags in-place\n@@ -122,6 +126,11 @@ macro_rules! bitflags(\n                 $BitFlags { bits: 0 }\n             }\n \n+            /// Returns the set containing all flags.\n+            pub fn all() -> $BitFlags {\n+                $BitFlags { bits: $($value)|+ }\n+            }\n+\n             /// Returns the raw value of the flags currently stored.\n             pub fn bits(&self) -> $T {\n                 self.bits\n@@ -138,6 +147,11 @@ macro_rules! bitflags(\n                 *self == $BitFlags::empty()\n             }\n \n+            /// Returns `true` if all flags are currently set.\n+            pub fn is_all(&self) -> bool {\n+                *self == $BitFlags::all()\n+            }\n+\n             /// Returns `true` if there are flags common to both `self` and `other`.\n             pub fn intersects(&self, other: $BitFlags) -> bool {\n                 !(self & other).is_empty()\n@@ -182,12 +196,20 @@ macro_rules! bitflags(\n                 $BitFlags { bits: self.bits & !other.bits }\n             }\n         }\n+\n+        impl Not<$BitFlags> for $BitFlags {\n+            /// Returns the complement of this set of flags.\n+            #[inline]\n+            fn not(&self) -> $BitFlags {\n+                $BitFlags { bits: !self.bits } & $BitFlags::all()\n+            }\n+        }\n     )\n )\n \n #[cfg(test)]\n mod tests {\n-    use ops::{BitOr, BitAnd, Sub};\n+    use ops::{BitOr, BitAnd, Sub, Not};\n \n     bitflags!(\n         flags Flags: u32 {\n@@ -214,6 +236,13 @@ mod tests {\n         assert!(!FlagABC.is_empty());\n     }\n \n+    #[test]\n+    fn test_is_all() {\n+        assert!(Flags::all().is_all());\n+        assert!(!FlagA.is_all());\n+        assert!(FlagABC.is_all());\n+    }\n+\n     #[test]\n     fn test_two_empties_do_not_intersect() {\n         let e1 = Flags::empty();\n@@ -274,5 +303,6 @@ mod tests {\n         assert!((e1 | e2) == FlagABC);   // union\n         assert!((e1 & e2) == FlagC);     // intersection\n         assert!((e1 - e2) == FlagA);     // set difference\n+        assert!(!e2 == FlagA);           // set complement\n     }\n }"}, {"sha": "19eb0100ff714cfe663bac977d9f3f229717ef13", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1595885501897a2827d11afa193adda8771a967d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595885501897a2827d11afa193adda8771a967d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1595885501897a2827d11afa193adda8771a967d", "patch": "@@ -220,7 +220,7 @@ use int;\n use iter::Iterator;\n use libc;\n use mem::transmute;\n-use ops::{BitOr, BitAnd, Sub};\n+use ops::{BitOr, BitAnd, Sub, Not};\n use option::{Option, Some, None};\n use os;\n use owned::Box;"}]}