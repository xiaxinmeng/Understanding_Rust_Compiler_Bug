{"sha": "dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmVjNGQ2MmQ1NzllYTc4NmQ1M2NhN2VjZWViNGIyNDNmYjhiZjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-05T23:37:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T21:48:20Z"}, "message": "tests transcribed from nikos blog post.", "tree": {"sha": "641078c874d71e2b939d41f8235cdbfffccf68e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641078c874d71e2b939d41f8235cdbfffccf68e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "html_url": "https://github.com/rust-lang/rust/commit/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f759a90e39b9f5951205621bed06235b37ad36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f759a90e39b9f5951205621bed06235b37ad36c", "html_url": "https://github.com/rust-lang/rust/commit/5f759a90e39b9f5951205621bed06235b37ad36c"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "7695bd3e4652c0e7c6884dc2aee6cd2bf432e3d3", "filename": "src/test/compile-fail/borrowck/two-phase-allow-access-during-reservation.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs?ref=dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: lxl nll\n+//[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows -Z nll\n+\n+// This is the second counter-example from Niko's blog post\n+// smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\n+//\n+// It is \"artificial\". It is meant to illustrate directly that we\n+// should allow an aliasing access during reservation, but *not* while\n+// the mutable borrow is active.\n+\n+fn main() {\n+    /*0*/ let mut i = 0;\n+\n+    /*1*/ let p = &mut i; // (reservation of `i` starts here)\n+\n+    /*2*/ let j = i;      // OK: `i` is only reserved here\n+\n+    /*3*/ *p += 1;        // (mutable borrow of `i` starts here, since `p` is used)\n+\n+    /*4*/ let k = i;      //[lxl]~  ERROR cannot use `i` because it was mutably borrowed [E0503]\n+                          //[nll]~^ ERROR cannot use `i` because it was mutably borrowed [E0503]\n+\n+    /*5*/ *p += 1;\n+\n+    let _ = (j, k, p);\n+}"}, {"sha": "01b04708599c03a489cdfaa2ea65deb1660acd88", "filename": "src/test/compile-fail/borrowck/two-phase-cannot-nest-mut-self-calls.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs?ref=dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: lxl nll\n+//[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows -Z nll\n+\n+// This is the third counter-example from Niko's blog post\n+// smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\n+//\n+// It shows that not all nested method calls on `self` are magically\n+// allowed by this change. In particular, a nested `&mut` borrow is\n+// still disallowed.\n+\n+fn main() {\n+\n+\n+    let mut vec = vec![0, 1];\n+    vec.get({\n+\n+        vec.push(2);\n+        //[lxl]~^ ERROR cannot borrow `vec` as mutable because it is also borrowed as immutable\n+        //[nll]~^^   ERROR cannot borrow `vec` as mutable because it is also borrowed as immutable\n+\n+        0\n+    });\n+}"}, {"sha": "32747407c67f0195ee6516fca8a318a4c9de89df", "filename": "src/test/compile-fail/borrowck/two-phase-sneaky.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-sneaky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-sneaky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-sneaky.rs?ref=dbbec4d62d579ea786d53ca7eceeb4b243fb8bf1", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: lxl nll\n+//[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows -Z nll\n+\n+// This is the first counter-example from Niko's blog post\n+// smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\n+// of a danger for code to crash if we just turned off the check for whether\n+// a mutable-borrow aliases another borrow.\n+\n+fn main() {\n+    let mut v: Vec<String> = vec![format!(\"Hello, \")];\n+    v[0].push_str({\n+\n+        v.push(format!(\"foo\"));\n+        //[lxl]~^ ERROR cannot borrow `v` as mutable more than once at a time [E0499]\n+        //[nll]~^^   ERROR cannot borrow `v` as mutable more than once at a time [E0499]\n+\n+        \"World!\"\n+    });\n+}"}]}