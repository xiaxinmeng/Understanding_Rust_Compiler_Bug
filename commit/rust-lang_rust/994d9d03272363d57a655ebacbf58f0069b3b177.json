{"sha": "994d9d03272363d57a655ebacbf58f0069b3b177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NGQ5ZDAzMjcyMzYzZDU3YTY1NWViYWNiZjU4ZjAwNjliM2IxNzc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-22T22:54:28Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-22T22:54:28Z"}, "message": "Address remaining feedback items", "tree": {"sha": "645fb3f03c9d0f452f0a0743418c20af2038f4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/645fb3f03c9d0f452f0a0743418c20af2038f4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994d9d03272363d57a655ebacbf58f0069b3b177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994d9d03272363d57a655ebacbf58f0069b3b177", "html_url": "https://github.com/rust-lang/rust/commit/994d9d03272363d57a655ebacbf58f0069b3b177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994d9d03272363d57a655ebacbf58f0069b3b177/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a79385cf28b263894be9ebd2e541532ae82898", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a79385cf28b263894be9ebd2e541532ae82898", "html_url": "https://github.com/rust-lang/rust/commit/f4a79385cf28b263894be9ebd2e541532ae82898"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "1bdac1039b55a48e07bb179599993968857b0fdf", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=994d9d03272363d57a655ebacbf58f0069b3b177", "patch": "@@ -489,7 +489,7 @@ impl<'a> CrateLocator<'a> {\n             {\n                 err.note(&format!(\"the `{}` target may not be installed\", self.triple));\n             } else if self.crate_name == sym::profiler_builtins {\n-                err.note(&\"the compiler may have been built without `profiler = true`\");\n+                err.note(&\"the compiler may have been built without the profiler runtime\");\n             }\n             err.span_label(self.span, \"can't find crate\");\n             err"}, {"sha": "d60d24aa9aed5473ca70f86df966c29528ad9e2c", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=994d9d03272363d57a655ebacbf58f0069b3b177", "patch": "@@ -56,7 +56,7 @@ fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n     }\n }\n \n-fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n+pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     match node {\n         Node::Item(Item {\n             kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),"}, {"sha": "993b48afb7a9a88cd4c3a2e37e3cc003f3a9593a", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=994d9d03272363d57a655ebacbf58f0069b3b177", "patch": "@@ -215,7 +215,7 @@ rustc_queries! {\n         }\n \n         query coverage_data(key: DefId) -> Option<mir::CoverageData> {\n-            desc { |tcx| \"retrieving coverage data, if computed from MIR for `{}`\", tcx.def_path_str(key) }\n+            desc { |tcx| \"retrieving coverage data from MIR for `{}`\", tcx.def_path_str(key) }\n             storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n         }"}, {"sha": "94aa26b3081e52b44571a012c56296cd3a644651", "filename": "src/librustc_mir/transform/instrument_coverage.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994d9d03272363d57a655ebacbf58f0069b3b177/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs?ref=994d9d03272363d57a655ebacbf58f0069b3b177", "patch": "@@ -3,7 +3,7 @@ use crate::util::patch::MirPatch;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::lang_items;\n-use rustc_hir::*;\n+use rustc_middle::hir;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::{\n@@ -140,7 +140,7 @@ fn placeholder_block(span: Span) -> BasicBlockData<'tcx> {\n \n fn hash_mir_source<'tcx>(tcx: TyCtxt<'tcx>, src: &MirSource<'tcx>) -> u64 {\n     let fn_body_id = match tcx.hir().get_if_local(src.def_id()) {\n-        Some(node) => match associated_body(node) {\n+        Some(node) => match hir::map::associated_body(node) {\n             Some(body_id) => body_id,\n             _ => bug!(\"instrumented MirSource does not include a function body: {:?}\", node),\n         },\n@@ -159,26 +159,3 @@ fn hash(\n     node.hash_stable(hcx, &mut stable_hasher);\n     stable_hasher.finish()\n }\n-\n-fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n-    match node {\n-        Node::Item(Item {\n-            kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),\n-            ..\n-        })\n-        | Node::TraitItem(TraitItem {\n-            kind:\n-                TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),\n-            ..\n-        })\n-        | Node::ImplItem(ImplItem {\n-            kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n-            ..\n-        })\n-        | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),\n-\n-        Node::AnonConst(constant) => Some(constant.body),\n-\n-        _ => None,\n-    }\n-}"}]}