{"sha": "12501fcdd02fec9d43dfd810d65e927ddebb1b56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTAxZmNkZDAyZmVjOWQ0M2RmZDgxMGQ2NWU5MjdkZGViYjFiNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:39:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:39:58Z"}, "message": "Remove TypableDef", "tree": {"sha": "55f1a6eddc328b20e3a4f71036d59a9573bfaa9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f1a6eddc328b20e3a4f71036d59a9573bfaa9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12501fcdd02fec9d43dfd810d65e927ddebb1b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12501fcdd02fec9d43dfd810d65e927ddebb1b56", "html_url": "https://github.com/rust-lang/rust/commit/12501fcdd02fec9d43dfd810d65e927ddebb1b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12501fcdd02fec9d43dfd810d65e927ddebb1b56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e8f27488f8bf4ae7024b9b7a9c4797c2b52b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e8f27488f8bf4ae7024b9b7a9c4797c2b52b12", "html_url": "https://github.com/rust-lang/rust/commit/d6e8f27488f8bf4ae7024b9b7a9c4797c2b52b12"}], "stats": {"total": 105, "additions": 7, "deletions": 98}, "files": [{"sha": "e96a18d12ac0087745aa177b04866e583e2bc55b", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 4, "deletions": 56, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=12501fcdd02fec9d43dfd810d65e927ddebb1b56", "patch": "@@ -4,13 +4,13 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    AdtId, AssocItemId, AttrDefId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, ModuleDefId, StaticId, StructFieldId, StructId, TypeAliasId, UnionId, VariantId,\n+    AdtId, AssocItemId, AttrDefId, DefWithBodyId, EnumVariantId, GenericDefId, ModuleDefId,\n+    StructFieldId, VariantId,\n };\n \n use crate::{\n-    ty::TypableDef, Adt, AssocItem, AttrDef, Const, Crate, DefWithBody, EnumVariant, Function,\n-    GenericDef, ModuleDef, Static, StructField, TypeAlias, VariantDef,\n+    Adt, AssocItem, AttrDef, Crate, DefWithBody, EnumVariant, GenericDef, ModuleDef, StructField,\n+    VariantDef,\n };\n \n impl From<ra_db::CrateId> for Crate {\n@@ -137,58 +137,6 @@ impl From<GenericDef> for GenericDefId {\n     }\n }\n \n-impl From<AdtId> for TypableDef {\n-    fn from(id: AdtId) -> Self {\n-        Adt::from(id).into()\n-    }\n-}\n-\n-impl From<StructId> for TypableDef {\n-    fn from(id: StructId) -> Self {\n-        AdtId::StructId(id).into()\n-    }\n-}\n-\n-impl From<UnionId> for TypableDef {\n-    fn from(id: UnionId) -> Self {\n-        AdtId::UnionId(id).into()\n-    }\n-}\n-\n-impl From<EnumId> for TypableDef {\n-    fn from(id: EnumId) -> Self {\n-        AdtId::EnumId(id).into()\n-    }\n-}\n-\n-impl From<EnumVariantId> for TypableDef {\n-    fn from(id: EnumVariantId) -> Self {\n-        EnumVariant::from(id).into()\n-    }\n-}\n-\n-impl From<TypeAliasId> for TypableDef {\n-    fn from(id: TypeAliasId) -> Self {\n-        TypeAlias::from(id).into()\n-    }\n-}\n-\n-impl From<FunctionId> for TypableDef {\n-    fn from(id: FunctionId) -> Self {\n-        Function::from(id).into()\n-    }\n-}\n-impl From<ConstId> for TypableDef {\n-    fn from(id: ConstId) -> Self {\n-        Const::from(id).into()\n-    }\n-}\n-impl From<StaticId> for TypableDef {\n-    fn from(id: StaticId) -> Self {\n-        Static::from(id).into()\n-    }\n-}\n-\n impl From<Adt> for GenericDefId {\n     fn from(id: Adt) -> Self {\n         match id {"}, {"sha": "e4ba8afa61d81d359147e6483b07116fc9e24baf", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=12501fcdd02fec9d43dfd810d65e927ddebb1b56", "patch": "@@ -38,7 +38,7 @@ pub use lower::CallableDef;\n pub(crate) use lower::{\n     callable_item_sig, field_types_query, generic_defaults_query,\n     generic_predicates_for_param_query, generic_predicates_query, ty_query, value_ty_query,\n-    TyDefId, TypableDef, ValueTyDefId,\n+    TyDefId, ValueTyDefId,\n };\n pub(crate) use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n "}, {"sha": "5dce2f34230877edd401087bd7448465d62ef619", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=12501fcdd02fec9d43dfd810d65e927ddebb1b56", "patch": "@@ -31,8 +31,7 @@ use crate::{\n         utils::{all_super_traits, associated_type_by_name_including_super_traits, variant_data},\n     },\n     util::make_mut_slice,\n-    Adt, Const, Enum, EnumVariant, Function, ImplBlock, ModuleDef, Static, Struct, Trait,\n-    TypeAlias, Union,\n+    ImplBlock, Trait,\n };\n \n impl Ty {\n@@ -693,42 +692,6 @@ fn type_for_type_alias(db: &impl HirDatabase, t: TypeAliasId) -> Ty {\n     inner.subst(&substs)\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum TypableDef {\n-    Function(Function),\n-    Adt(Adt),\n-    EnumVariant(EnumVariant),\n-    TypeAlias(TypeAlias),\n-    Const(Const),\n-    Static(Static),\n-    BuiltinType(BuiltinType),\n-}\n-impl_froms!(\n-    TypableDef: Function,\n-    Adt(Struct, Enum, Union),\n-    EnumVariant,\n-    TypeAlias,\n-    Const,\n-    Static,\n-    BuiltinType\n-);\n-\n-impl From<ModuleDef> for Option<TypableDef> {\n-    fn from(def: ModuleDef) -> Option<TypableDef> {\n-        let res = match def {\n-            ModuleDef::Function(f) => f.into(),\n-            ModuleDef::Adt(adt) => adt.into(),\n-            ModuleDef::EnumVariant(v) => v.into(),\n-            ModuleDef::TypeAlias(t) => t.into(),\n-            ModuleDef::Const(v) => v.into(),\n-            ModuleDef::Static(v) => v.into(),\n-            ModuleDef::BuiltinType(t) => t.into(),\n-            ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n-        };\n-        Some(res)\n-    }\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum CallableDef {\n     FunctionId(FunctionId),"}, {"sha": "cc6e244f448c5a098a247cdb84d93f1eb57db123", "filename": "crates/ra_hir/src/ty/op.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12501fcdd02fec9d43dfd810d65e927ddebb1b56/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs?ref=12501fcdd02fec9d43dfd810d65e927ddebb1b56", "patch": "@@ -2,9 +2,7 @@\n use hir_def::expr::{BinaryOp, CmpOp};\n \n use super::{InferTy, Ty, TypeCtor};\n-use crate::{\n-    ty::ApplicationTy,\n-};\n+use crate::ty::ApplicationTy;\n \n pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {"}]}