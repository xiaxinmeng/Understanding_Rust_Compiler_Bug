{"sha": "483fca9fa55d0c1f936412d577424916f20d94a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4M2ZjYTlmYTU1ZDBjMWY5MzY0MTJkNTc3NDI0OTE2ZjIwZDk0YTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:32:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:32:06Z"}, "message": "rollup merge of #20757: nikomatsakis/issue-20624-assoc-types-coherence", "tree": {"sha": "dbd5553aa10817585f4f6434bb48d7f4924ddfba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd5553aa10817585f4f6434bb48d7f4924ddfba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483fca9fa55d0c1f936412d577424916f20d94a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483fca9fa55d0c1f936412d577424916f20d94a3", "html_url": "https://github.com/rust-lang/rust/commit/483fca9fa55d0c1f936412d577424916f20d94a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483fca9fa55d0c1f936412d577424916f20d94a3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4281bd1932bf185e1154f7a79832bbd2d9155e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/4281bd1932bf185e1154f7a79832bbd2d9155e41", "html_url": "https://github.com/rust-lang/rust/commit/4281bd1932bf185e1154f7a79832bbd2d9155e41"}, {"sha": "d548f3eade86040587e63530e5c04f3320cd722b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d548f3eade86040587e63530e5c04f3320cd722b", "html_url": "https://github.com/rust-lang/rust/commit/d548f3eade86040587e63530e5c04f3320cd722b"}], "stats": {"total": 309, "additions": 276, "deletions": 33}, "files": [{"sha": "fb7c5296d020e38ac637f6e7cc9ffbd0f5d2a59e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -29,7 +29,6 @@\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(old_impl_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "9ac6b8a86b68b10585fb191f64ca5552f3cb181a", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -313,6 +313,17 @@ impl<T> VecPerParamSpace<T> {\n         self.content.insert(limit, value);\n     }\n \n+    /// Appends `values` to the vector associated with `space`.\n+    ///\n+    /// Unlike the `extend` method in `Vec`, this should not be assumed\n+    /// to be a cheap operation (even when amortized over many calls).\n+    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, mut values: I) {\n+        // This could be made more efficient, obviously.\n+        for item in values {\n+            self.push(space, item);\n+        }\n+    }\n+\n     pub fn pop(&mut self, space: ParamSpace) -> Option<T> {\n         let (start, limit) = self.limits(space);\n         if start == limit {"}, {"sha": "b6d45ab89e70aa1b1b164357acc0ba98e84cd9f5", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -12,6 +12,7 @@\n \n use super::SelectionContext;\n use super::{Obligation, ObligationCause};\n+use super::project;\n use super::util;\n \n use middle::subst::{Subst};\n@@ -34,22 +35,28 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n            impl1_def_id.repr(infcx.tcx),\n            impl2_def_id.repr(infcx.tcx));\n \n+    let param_env = ty::empty_parameter_environment(infcx.tcx);\n+    let mut selcx = SelectionContext::intercrate(infcx, &param_env);\n+    let cause = ObligationCause::dummy();\n+\n     // `impl1` provides an implementation of `Foo<X,Y> for Z`.\n     let impl1_substs =\n         util::fresh_substs_for_impl(infcx, DUMMY_SP, impl1_def_id);\n     let impl1_trait_ref =\n         (*ty::impl_trait_ref(infcx.tcx, impl1_def_id).unwrap()).subst(infcx.tcx, &impl1_substs);\n+    let impl1_trait_ref =\n+        project::normalize(&mut selcx, cause.clone(), &impl1_trait_ref);\n \n     // Determine whether `impl2` can provide an implementation for those\n     // same types.\n-    let param_env = ty::empty_parameter_environment(infcx.tcx);\n-    let mut selcx = SelectionContext::intercrate(infcx, &param_env);\n-    let obligation = Obligation::new(ObligationCause::dummy(),\n+    let obligation = Obligation::new(cause,\n                                      ty::Binder(ty::TraitPredicate {\n-                                         trait_ref: Rc::new(impl1_trait_ref),\n+                                         trait_ref: Rc::new(impl1_trait_ref.value),\n                                      }));\n     debug!(\"impl_can_satisfy(obligation={})\", obligation.repr(infcx.tcx));\n-    selcx.evaluate_impl(impl2_def_id, &obligation)\n+    selcx.evaluate_impl(impl2_def_id, &obligation) &&\n+        impl1_trait_ref.obligations.iter().all(\n+            |o| selcx.evaluate_obligation(o))\n }\n \n #[allow(missing_copy_implementations)]"}, {"sha": "95a938328cf452650c64bc305ab57b90989eb285", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -206,6 +206,7 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n         // normalize it when we instantiate those bound regions (which\n         // should occur eventually).\n \n+        let ty = ty_fold::super_fold_ty(self, ty);\n         match ty.sty {\n             ty::ty_projection(ref data) if !data.has_escaping_regions() => { // (*)\n \n@@ -229,8 +230,9 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n                 self.obligations.extend(obligations.into_iter());\n                 ty\n             }\n+\n             _ => {\n-                ty_fold::super_fold_ty(self, ty)\n+                ty\n             }\n         }\n     }\n@@ -243,6 +245,12 @@ pub struct Normalized<'tcx,T> {\n \n pub type NormalizedTy<'tcx> = Normalized<'tcx, Ty<'tcx>>;\n \n+impl<'tcx,T> Normalized<'tcx,T> {\n+    pub fn with<U>(self, value: U) -> Normalized<'tcx,U> {\n+        Normalized { value: value, obligations: self.obligations }\n+    }\n+}\n+\n pub fn normalize_projection_type<'a,'b,'tcx>(\n     selcx: &'a mut SelectionContext<'b,'tcx>,\n     projection_ty: ty::ProjectionTy<'tcx>,"}, {"sha": "d6302976b9f111d21864e84eef0cf1c7ccffedb4", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -19,6 +19,7 @@ use self::EvaluationResult::*;\n \n use super::{DerivedObligationCause};\n use super::{project};\n+use super::project::Normalized;\n use super::{PredicateObligation, Obligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n@@ -1155,7 +1156,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let impl_trait_ref =\n                         ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap();\n                     let impl_trait_ref =\n-                        impl_trait_ref.subst(self.tcx(), &impl_substs);\n+                        impl_trait_ref.subst(self.tcx(), &impl_substs.value);\n                     let poly_impl_trait_ref =\n                         ty::Binder(impl_trait_ref);\n                     let origin =\n@@ -1712,15 +1713,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let substs =\n                 self.rematch_impl(impl_def_id, obligation,\n                                   snapshot, &skol_map, skol_obligation_trait_ref.trait_ref);\n-            debug!(\"confirm_impl_candidate substs={:?}\", substs);\n+            debug!(\"confirm_impl_candidate substs={}\", substs.repr(self.tcx()));\n             Ok(self.vtable_impl(impl_def_id, substs, obligation.cause.clone(),\n                                 obligation.recursion_depth + 1, skol_map, snapshot))\n         })\n     }\n \n     fn vtable_impl(&mut self,\n                    impl_def_id: ast::DefId,\n-                   substs: Substs<'tcx>,\n+                   substs: Normalized<'tcx, Substs<'tcx>>,\n                    cause: ObligationCause<'tcx>,\n                    recursion_depth: uint,\n                    skol_map: infer::SkolemizationMap,\n@@ -1733,21 +1734,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                recursion_depth,\n                skol_map.repr(self.tcx()));\n \n-        let impl_predicates =\n-            self.impl_predicates(cause,\n+        let mut impl_obligations =\n+            self.impl_obligations(cause,\n                                  recursion_depth,\n                                  impl_def_id,\n-                                 &substs,\n+                                 &substs.value,\n                                  skol_map,\n                                  snapshot);\n \n-        debug!(\"vtable_impl: impl_def_id={} impl_predicates={}\",\n+        debug!(\"vtable_impl: impl_def_id={} impl_obligations={}\",\n                impl_def_id.repr(self.tcx()),\n-               impl_predicates.repr(self.tcx()));\n+               impl_obligations.repr(self.tcx()));\n+\n+        impl_obligations.extend(TypeSpace, substs.obligations.into_iter());\n \n         VtableImplData { impl_def_id: impl_def_id,\n-                         substs: substs,\n-                         nested: impl_predicates }\n+                         substs: substs.value,\n+                         nested: impl_obligations }\n     }\n \n     fn confirm_object_candidate(&mut self,\n@@ -1931,7 +1934,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     snapshot: &infer::CombinedSnapshot,\n                     skol_map: &infer::SkolemizationMap,\n                     skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                    -> Substs<'tcx>\n+                    -> Normalized<'tcx, Substs<'tcx>>\n     {\n         match self.match_impl(impl_def_id, obligation, snapshot,\n                               skol_map, skol_obligation_trait_ref) {\n@@ -1953,7 +1956,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                   snapshot: &infer::CombinedSnapshot,\n                   skol_map: &infer::SkolemizationMap,\n                   skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                  -> Result<Substs<'tcx>, ()>\n+                  -> Result<Normalized<'tcx, Substs<'tcx>>, ()>\n     {\n         let impl_trait_ref = ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap();\n \n@@ -1971,6 +1974,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let impl_trait_ref = impl_trait_ref.subst(self.tcx(),\n                                                   &impl_substs);\n \n+        let impl_trait_ref =\n+            project::normalize_with_depth(self,\n+                                          obligation.cause.clone(),\n+                                          obligation.recursion_depth + 1,\n+                                          &impl_trait_ref);\n+\n         debug!(\"match_impl(impl_def_id={}, obligation={}, \\\n                impl_trait_ref={}, skol_obligation_trait_ref={})\",\n                impl_def_id.repr(self.tcx()),\n@@ -1981,7 +1990,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let origin = infer::RelateOutputImplTypes(obligation.cause.span);\n         match self.infcx.sub_trait_refs(false,\n                                         origin,\n-                                        impl_trait_ref,\n+                                        impl_trait_ref.value.clone(),\n                                         skol_obligation_trait_ref) {\n             Ok(()) => { }\n             Err(e) => {\n@@ -2001,7 +2010,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         debug!(\"match_impl: success impl_substs={}\", impl_substs.repr(self.tcx()));\n-        Ok(impl_substs)\n+        Ok(Normalized { value: impl_substs,\n+                        obligations: impl_trait_ref.obligations })\n     }\n \n     fn fast_reject_trait_refs(&mut self,\n@@ -2142,14 +2152,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn impl_predicates(&mut self,\n-                       cause: ObligationCause<'tcx>,\n-                       recursion_depth: uint,\n-                       impl_def_id: ast::DefId,\n-                       impl_substs: &Substs<'tcx>,\n-                       skol_map: infer::SkolemizationMap,\n-                       snapshot: &infer::CombinedSnapshot)\n-                       -> VecPerParamSpace<PredicateObligation<'tcx>>\n+    fn impl_obligations(&mut self,\n+                        cause: ObligationCause<'tcx>,\n+                        recursion_depth: uint,\n+                        impl_def_id: ast::DefId,\n+                        impl_substs: &Substs<'tcx>,\n+                        skol_map: infer::SkolemizationMap,\n+                        snapshot: &infer::CombinedSnapshot)\n+                        -> VecPerParamSpace<PredicateObligation<'tcx>>\n     {\n         let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n         let bounds = impl_generics.to_bounds(self.tcx(), impl_substs);\n@@ -2162,9 +2172,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                           cause,\n                                           recursion_depth,\n                                           &normalized_bounds.value);\n-        for obligation in normalized_bounds.obligations.into_iter() {\n-            impl_obligations.push(TypeSpace, obligation);\n-        }\n+        impl_obligations.extend(TypeSpace, normalized_bounds.obligations.into_iter());\n         impl_obligations\n     }\n "}, {"sha": "89de1ea80fcf42fd2328c9e19f92b9b409a99791", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -235,9 +235,16 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             // Find the supertrait bounds. This will add `int:Bar`.\n             let poly_trait_ref = ty::Binder(trait_ref);\n             let predicates = ty::predicates_for_trait_ref(fcx.tcx(), &poly_trait_ref);\n-            for predicate in predicates.into_iter() {\n+            let predicates = {\n+                let selcx = &mut traits::SelectionContext::new(fcx.infcx(), fcx);\n+                traits::normalize(selcx, cause.clone(), &predicates)\n+            };\n+            for predicate in predicates.value.into_iter() {\n                 fcx.register_predicate(traits::Obligation::new(cause.clone(), predicate));\n             }\n+            for obligation in predicates.obligations.into_iter() {\n+                fcx.register_predicate(obligation);\n+            }\n         });\n     }\n }"}, {"sha": "95a68dd66983672dfe537bf4f1bfc8bcee5c8d2d", "filename": "src/test/compile-fail/associated-types-coherence-failure.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that coherence detects overlap when some of the types in the\n+// impls are projections of associated type. Issue #20624.\n+\n+use std::ops::Deref;\n+\n+pub struct Cow<'a, B: ?Sized>;\n+\n+/// Trait for moving into a `Cow`\n+pub trait IntoCow<'a, B: ?Sized> {\n+    /// Moves `self` into `Cow`\n+    fn into_cow(self) -> Cow<'a, B>;\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n+//~^ ERROR E0119\n+    fn into_cow(self) -> Cow<'a, B> {\n+        self\n+    }\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n+//~^ ERROR E0119\n+    fn into_cow(self) -> Cow<'a, B> {\n+        Cow\n+    }\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for &'a B where B: ToOwned {\n+    fn into_cow(self) -> Cow<'a, B> {\n+        Cow\n+    }\n+}\n+\n+impl ToOwned for u8 {\n+    type Owned = &'static u8;\n+    fn to_owned(&self) -> &'static u8 { panic!() }\n+}\n+\n+/// A generalization of Clone to borrowed data.\n+pub trait ToOwned {\n+    type Owned;\n+\n+    /// Create owned data from borrowed data, usually by copying.\n+    fn to_owned(&self) -> Self::Owned;\n+}\n+\n+\n+fn main() {}\n+"}, {"sha": "7365e052171eff975809517f89c5a5a7b8d056ce", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "previous_filename": "src/test/run-pass/associated-type-doubleendediterator-object.rs"}, {"sha": "a907b9fcde51f77b62abeab114f1a6369ba49483", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can resolve nested projection types. Issue #20666.\n+\n+use std::slice;\n+\n+trait Bound {}\n+\n+impl<'a> Bound for &'a int {}\n+\n+trait IntoIterator {\n+    type Iter: Iterator;\n+\n+    fn into_iter(self) -> Self::Iter;\n+}\n+\n+impl<'a, T> IntoIterator for &'a [T; 3] {\n+    type Iter = slice::Iter<'a, T>;\n+\n+    fn into_iter(self) -> slice::Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+fn foo<X>(x: X) where\n+    X: IntoIterator,\n+    <<X as IntoIterator>::Iter as Iterator>::Item: Bound,\n+{\n+}\n+\n+fn bar<T, I, X>(x: X) where\n+    T: Bound,\n+    I: Iterator<Item=T>,\n+    X: IntoIterator<Iter=I>,\n+{\n+\n+}\n+\n+fn main() {\n+    foo(&[0i, 1, 2]);\n+    bar(&[0i, 1, 2]);\n+}"}, {"sha": "0a1a8589dec82b55e56357d3bbf15fd0e01de2e6", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where the impl self type uses a projection from a constant type.\n+\n+trait Int\n+{\n+    type T;\n+}\n+\n+trait NonZero\n+{\n+    fn non_zero(self) -> bool;\n+}\n+\n+impl Int for i32 { type T = i32; }\n+impl Int for i64 { type T = i64; }\n+impl Int for u32 { type T = u32; }\n+impl Int for u64 { type T = u64; }\n+\n+impl NonZero for <i32 as Int>::T { fn non_zero(self) -> bool { self != 0 } }\n+impl NonZero for <i64 as Int>::T { fn non_zero(self) -> bool { self != 0 } }\n+impl NonZero for <u32 as Int>::T { fn non_zero(self) -> bool { self != 0 } }\n+impl NonZero for <u64 as Int>::T { fn non_zero(self) -> bool { self != 0 } }\n+\n+fn main ()\n+{\n+    assert!(NonZero::non_zero(22_i32));\n+    assert!(NonZero::non_zero(22_i64));\n+    assert!(NonZero::non_zero(22_u32));\n+    assert!(NonZero::non_zero(22_u64));\n+\n+    assert!(!NonZero::non_zero(0_i32));\n+    assert!(!NonZero::non_zero(0_i64));\n+    assert!(!NonZero::non_zero(0_u32));\n+    assert!(!NonZero::non_zero(0_u64));\n+}"}, {"sha": "e6fec675b03631a9f809487b2a0ca1fe62a70c8c", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483fca9fa55d0c1f936412d577424916f20d94a3/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=483fca9fa55d0c1f936412d577424916f20d94a3", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are handle to correctly handle a projection type\n+// that appears in a supertrait bound. Issue #20559.\n+\n+trait A\n+{\n+    type TA;\n+}\n+\n+trait B<TB>\n+{\n+    fn foo (&self, t : TB) -> String;\n+}\n+\n+trait C<TC : A> : B<<TC as A>::TA> { }\n+\n+struct X;\n+\n+impl A for X\n+{\n+    type TA = i32;\n+}\n+\n+struct Y;\n+\n+impl C<X> for Y { }\n+\n+// Both of these impls are required for successful compilation\n+impl B<i32> for Y\n+{\n+    fn foo (&self, t : i32) -> String\n+    {\n+        format!(\"First {}\", t)\n+    }\n+}\n+\n+fn main ()\n+{\n+    let y = Y;\n+    assert_eq!(y.foo(5), format!(\"First 5\"));\n+}"}]}