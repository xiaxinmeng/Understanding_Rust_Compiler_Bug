{"sha": "474872160a49e4048e5017f0bbb8d93d19267b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDg3MjE2MGE0OWU0MDQ4ZTUwMTdmMGJiYjhkOTNkMTkyNjdiOWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-08T16:39:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-11T20:09:46Z"}, "message": "tests: update some compile-fail tests for the new behavior of type expectations.", "tree": {"sha": "0836c827392d6781368113b9363eb228056d7bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0836c827392d6781368113b9363eb228056d7bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/474872160a49e4048e5017f0bbb8d93d19267b9a", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/474872160a49e4048e5017f0bbb8d93d19267b9a", "html_url": "https://github.com/rust-lang/rust/commit/474872160a49e4048e5017f0bbb8d93d19267b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/474872160a49e4048e5017f0bbb8d93d19267b9a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73fbc69cd85ccd7e444929b7b7aa0ae74ee6198", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73fbc69cd85ccd7e444929b7b7aa0ae74ee6198", "html_url": "https://github.com/rust-lang/rust/commit/e73fbc69cd85ccd7e444929b7b7aa0ae74ee6198"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "d363f2f834bb6c31fafe5c70d94a07fa1910c9c2", "filename": "src/test/compile-fail/issue-15783.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs?ref=474872160a49e4048e5017f0bbb8d93d19267b9a", "patch": "@@ -14,7 +14,8 @@ pub fn foo(params: Option<&[&str]>) -> usize {\n \n fn main() {\n     let name = \"Foo\";\n-    let msg = foo(Some(&[name.as_slice()]));\n+    let x = Some(&[name.as_slice()]);\n+    let msg = foo(x);\n //~^ ERROR mismatched types: expected `core::option::Option<&[&str]>`\n     assert_eq!(msg, 3);\n }"}, {"sha": "c83fb09651298b7e752aea200f33ec0072fd78da", "filename": "src/test/compile-fail/regions-early-bound-error-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs?ref=474872160a49e4048e5017f0bbb8d93d19267b9a", "patch": "@@ -28,6 +28,8 @@ impl<'a> GetRef<'a> for Box<'a> {\n impl<'a> Box<'a> {\n     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n         g2.get() //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n+        //~^ ERROR mismatched types: expected `&'a isize`, found `&'b isize` (lifetime mismatch)\n+\n     }\n }\n "}, {"sha": "cc6acdca78e8114f571d8c3b96422e0140df5cef", "filename": "src/test/compile-fail/regions-early-bound-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474872160a49e4048e5017f0bbb8d93d19267b9a/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs?ref=474872160a49e4048e5017f0bbb8d93d19267b9a", "patch": "@@ -27,6 +27,7 @@ impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n \n fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n     g1.get() //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n+    //~^ ERROR mismatched types: expected `&'b isize`, found `&'a isize` (lifetime mismatch)\n }\n \n fn main() {"}]}