{"sha": "002456a95a59ee065d40b04a209030f843f2b783", "node_id": "C_kwDOAAsO6NoAKDAwMjQ1NmE5NWE1OWVlMDY1ZDQwYjA0YTIwOTAzMGY4NDNmMmI3ODM", "commit": {"author": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2021-12-23T08:31:04Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-14T06:32:34Z"}, "message": "Make `find_similar_impl_candidates` a little fuzzier.", "tree": {"sha": "4bd74aee22e64fafd19c7c1e9303f8b0191f8830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd74aee22e64fafd19c7c1e9303f8b0191f8830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002456a95a59ee065d40b04a209030f843f2b783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002456a95a59ee065d40b04a209030f843f2b783", "html_url": "https://github.com/rust-lang/rust/commit/002456a95a59ee065d40b04a209030f843f2b783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002456a95a59ee065d40b04a209030f843f2b783/comments", "author": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e12aef3fab243407f9d71ba9956cb2a1bf105d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e12aef3fab243407f9d71ba9956cb2a1bf105d5", "html_url": "https://github.com/rust-lang/rust/commit/1e12aef3fab243407f9d71ba9956cb2a1bf105d5"}], "stats": {"total": 180, "additions": 147, "deletions": 33}, "files": [{"sha": "806489e057c6557647c998603f48099efdbc1c97", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 113, "deletions": 31, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -40,6 +40,21 @@ use suggestions::InferCtxtExt as _;\n \n pub use rustc_infer::traits::error_reporting::*;\n \n+// When outputting impl candidates, prefer showing those that are more similar.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum CandidateSimilarity {\n+    Exact,\n+    Simplified,\n+    Fuzzy,\n+    Unknown,\n+}\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct ImplCandidate<'tcx> {\n+    pub trait_ref: ty::TraitRef<'tcx>,\n+    pub similarity: CandidateSimilarity,\n+}\n+\n pub trait InferCtxtExt<'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n@@ -1143,18 +1158,18 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         error: &MismatchedProjectionTypes<'tcx>,\n     );\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool;\n+    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>, strip_references: StripReferences) -> bool;\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str>;\n \n     fn find_similar_impl_candidates(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-    ) -> Vec<ty::TraitRef<'tcx>>;\n+    ) -> Vec<ImplCandidate<'tcx>>;\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+        impl_candidates: Vec<ImplCandidate<'tcx>>,\n         err: &mut DiagnosticBuilder<'_>,\n     );\n \n@@ -1446,7 +1461,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>, strip_references: StripReferences) -> bool {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n         fn type_category(t: Ty<'_>) -> Option<u32> {\n@@ -1478,6 +1493,23 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n \n+        let strip_reference = |mut t: Ty<'tcx>| -> Ty<'tcx> {\n+            loop {\n+                match t.kind() {\n+                    ty::Ref(_, inner, _) | ty::RawPtr(ty::TypeAndMut { ty: inner, .. }) => {\n+                        t = inner\n+                    }\n+                    _ => break t,\n+                }\n+            }\n+        };\n+\n+        let (a, b) = if strip_references == StripReferences::Yes {\n+            (strip_reference(a), strip_reference(b))\n+        } else {\n+            (a, b)\n+        };\n+\n         match (type_category(a), type_category(b)) {\n             (Some(cat_a), Some(cat_b)) => match (a.kind(), b.kind()) {\n                 (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => def_a == def_b,\n@@ -1500,7 +1532,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn find_similar_impl_candidates(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-    ) -> Vec<ty::TraitRef<'tcx>> {\n+    ) -> Vec<ImplCandidate<'tcx>> {\n         // We simplify params and strip references here.\n         //\n         // This both removes a lot of unhelpful suggestions, e.g.\n@@ -1518,40 +1550,75 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         let all_impls = self.tcx.all_impls(trait_ref.def_id());\n \n         match simp {\n-            Some(simp) => all_impls\n-                .filter_map(|def_id| {\n-                    let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n-                    let imp_simp = fast_reject::simplify_type(\n-                        self.tcx,\n-                        imp.self_ty(),\n-                        SimplifyParams::Yes,\n-                        StripReferences::Yes,\n-                    );\n-                    if let Some(imp_simp) = imp_simp {\n-                        if simp != imp_simp {\n+            Some(simp) => {\n+                all_impls\n+                    .filter_map(|def_id| {\n+                        if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n                             return None;\n                         }\n-                    }\n-                    if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n-                        return None;\n-                    }\n-                    Some(imp)\n-                })\n-                .collect(),\n+\n+                        let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n+\n+                        // Check for exact match.\n+                        if trait_ref.skip_binder().self_ty() == imp.self_ty() {\n+                            return Some(ImplCandidate {\n+                                trait_ref: imp,\n+                                similarity: CandidateSimilarity::Exact,\n+                            });\n+                        }\n+\n+                        // Check for match between simplified types.\n+                        let imp_simp = fast_reject::simplify_type(\n+                            self.tcx,\n+                            imp.self_ty(),\n+                            SimplifyParams::Yes,\n+                            StripReferences::Yes,\n+                        );\n+                        if let Some(imp_simp) = imp_simp {\n+                            if simp == imp_simp {\n+                                return Some(ImplCandidate {\n+                                    trait_ref: imp,\n+                                    similarity: CandidateSimilarity::Simplified,\n+                                });\n+                            }\n+                        }\n+\n+                        // Check for fuzzy match.\n+                        // Pass `StripReferences::Yes` because although we do want to\n+                        // be fuzzier than `simplify_type`, we don't want to be\n+                        // *too* fuzzy.\n+                        if self.fuzzy_match_tys(\n+                            trait_ref.skip_binder().self_ty(),\n+                            imp.self_ty(),\n+                            StripReferences::Yes,\n+                        ) {\n+                            return Some(ImplCandidate {\n+                                trait_ref: imp,\n+                                similarity: CandidateSimilarity::Fuzzy,\n+                            });\n+                        }\n+\n+                        None\n+                    })\n+                    .collect()\n+            }\n             None => all_impls\n                 .filter_map(|def_id| {\n                     if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n                         return None;\n                     }\n-                    self.tcx.impl_trait_ref(def_id)\n+                    self.tcx.impl_trait_ref(def_id).map(|trait_ref| ImplCandidate {\n+                        trait_ref,\n+                        similarity: CandidateSimilarity::Unknown,\n+                    })\n                 })\n                 .collect(),\n         }\n     }\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+        impl_candidates: Vec<ImplCandidate<'tcx>>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n         if impl_candidates.is_empty() {\n@@ -1575,13 +1642,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         // Sort impl candidates so that ordering is consistent for UI tests.\n-        let mut normalized_impl_candidates =\n-            impl_candidates.iter().copied().map(normalize).collect::<Vec<String>>();\n-\n-        // Sort before taking the `..end` range,\n         // because the ordering of `impl_candidates` may not be deterministic:\n         // https://github.com/rust-lang/rust/pull/57475#issuecomment-455519507\n-        normalized_impl_candidates.sort();\n+        //\n+        // Prefer more similar candidates first, then sort lexicographically\n+        // by their normalized string representation.\n+        let mut normalized_impl_candidates_and_similarities = impl_candidates\n+            .into_iter()\n+            .map(|ImplCandidate { trait_ref, similarity }| {\n+                let normalized = normalize(trait_ref);\n+                (similarity, normalized)\n+            })\n+            .collect::<Vec<_>>();\n+        normalized_impl_candidates_and_similarities.sort();\n+\n+        let normalized_impl_candidates = normalized_impl_candidates_and_similarities\n+            .into_iter()\n+            .map(|(_, normalized)| normalized)\n+            .collect::<Vec<_>>();\n \n         err.help(&format!(\n             \"the following implementations were found:{}{}\",\n@@ -1744,7 +1822,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                let impl_candidates = self\n+                    .find_similar_impl_candidates(trait_ref)\n+                    .into_iter()\n+                    .map(|candidate| candidate.trait_ref)\n+                    .collect();\n                 let mut err = self.emit_inference_failure_err(\n                     body_id,\n                     span,"}, {"sha": "979508e38eaec7b038b1ff73a70969c6185cf70f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -4,6 +4,7 @@ use super::{\n use crate::infer::InferCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::ty::fast_reject::StripReferences;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n@@ -56,7 +57,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n-                .all(|(u, v)| self.fuzzy_match_tys(u, v))\n+                .all(|(u, v)| self.fuzzy_match_tys(u, v, StripReferences::No))\n                 {\n                     fuzzy_match_impls.push(def_id);\n                 }"}, {"sha": "f56631b12aa67436734ea72997f1c33436f46d33", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -15,6 +15,8 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -26,6 +28,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n    |\n LL |     f1(2u32, 4u32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:8\n@@ -35,6 +40,8 @@ LL |     f1(2u32, 4i32);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -46,6 +53,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n    |\n LL |     f1(2u32, 4i32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n \n error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18"}, {"sha": "5755778fef2661cb28a295da1fe7cc42d8098cb7", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Signed>\n note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |"}, {"sha": "19813a491c96e4e9e22579263f953913d32f0107", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -15,6 +15,7 @@ LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |\n    = help: the following implementations were found:\n              <u32 as Traitor<N, 2_u8>>\n+             <u64 as Traitor<1_u8, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:22:13\n@@ -24,6 +25,7 @@ LL | fn owo() -> impl Traitor {\n    |\n    = help: the following implementations were found:\n              <u64 as Traitor<1_u8, 2_u8>>\n+             <u32 as Traitor<N, 2_u8>>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dff980301911cc11fd94923bd4146720d7409880", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -11,7 +11,7 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n-             <i8 as Foo<u8>>\n+           and 5 others\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -26,6 +26,7 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n+           and 5 others\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21"}, {"sha": "dcee740a55614c061837cc8ea9e8a00759021978", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -6,6 +6,10 @@ LL |     assert_copy::<&'static mut isize>();\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+             <i128 as Copy>\n+             <i16 as Copy>\n+             <i32 as Copy>\n+           and 8 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -20,6 +24,10 @@ LL |     assert_copy::<&'a mut isize>();\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+             <i128 as Copy>\n+             <i16 as Copy>\n+             <i32 as Copy>\n+           and 8 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "7972437771399f71f356ad3d222c0b7cb0921263", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -4,6 +4,9 @@ error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n LL |     let _: &[i8] = data.into();\n    |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n+   = help: the following implementations were found:\n+             <[T; LANES] as From<Simd<T, LANES>>>\n+             <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`\n \n error: aborting due to previous error"}, {"sha": "b970012837313b2748dc245267da0a933300f4a7", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -9,6 +9,8 @@ LL |     bar: &'a mut T\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+             <*const T as Clone>\n+             <*mut T as Clone>\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6fc5f94f5f11802dfadf6db3b6b16afff7ecb4c4", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002456a95a59ee065d40b04a209030f843f2b783/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=002456a95a59ee065d40b04a209030f843f2b783", "patch": "@@ -10,6 +10,9 @@ LL |     Ok(Err(123_i32)?)\n    = help: the following implementations were found:\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n+             <i128 as From<NonZeroI128>>\n+             <i128 as From<bool>>\n+           and 60 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`"}]}