{"sha": "0431fdb11312ae324c73e4dab1e5be5c45164678", "node_id": "C_kwDOAAsO6NoAKDA0MzFmZGIxMTMxMmFlMzI0YzczZTRkYWIxZTViZTVjNDUxNjQ2Nzg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-19T20:07:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T22:05:49Z"}, "message": "Compute full HIR hash during lowering.", "tree": {"sha": "39aae5d9d2e9ea4bb171848f327abf4dfd9e0e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39aae5d9d2e9ea4bb171848f327abf4dfd9e0e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0431fdb11312ae324c73e4dab1e5be5c45164678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0431fdb11312ae324c73e4dab1e5be5c45164678", "html_url": "https://github.com/rust-lang/rust/commit/0431fdb11312ae324c73e4dab1e5be5c45164678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0431fdb11312ae324c73e4dab1e5be5c45164678/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e80b85cf05e6373b589b876d3ee65823196406", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e80b85cf05e6373b589b876d3ee65823196406", "html_url": "https://github.com/rust-lang/rust/commit/41e80b85cf05e6373b589b876d3ee65823196406"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "84aeb78a0aa10f0f77dfac4a48e67bb7042dced1", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -399,6 +399,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::OwnerNode::Crate(lctx.arena.alloc(module))\n         });\n \n+        let hir_hash = self.compute_hir_hash();\n+\n         let mut def_id_to_hir_id = IndexVec::default();\n \n         for (node_id, hir_id) in self.node_id_to_hir_id.into_iter_enumerated() {\n@@ -412,10 +414,29 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         self.resolver.definitions().init_def_id_to_hir_id_mapping(def_id_to_hir_id);\n \n-        let krate = hir::Crate { owners: self.owners };\n+        let krate = hir::Crate { owners: self.owners, hir_hash };\n         self.arena.alloc(krate)\n     }\n \n+    fn compute_hir_hash(&mut self) -> Fingerprint {\n+        let definitions = self.resolver.definitions();\n+        let mut hir_body_nodes: Vec<_> = self\n+            .owners\n+            .iter_enumerated()\n+            .filter_map(|(def_id, info)| {\n+                let info = info.as_ref()?;\n+                let def_path_hash = definitions.def_path_hash(def_id);\n+                Some((def_path_hash, info))\n+            })\n+            .collect();\n+        hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n+\n+        let mut stable_hasher = StableHasher::new();\n+        let mut hcx = self.resolver.create_stable_hashing_context();\n+        hir_body_nodes.hash_stable(&mut hcx, &mut stable_hasher);\n+        stable_hasher.finish()\n+    }\n+\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,"}, {"sha": "6cbea732c993881b3c834bacc7bb3bbc3bedf214", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -702,7 +702,7 @@ pub struct OwnerNodes<'tcx> {\n     pub bodies: IndexVec<ItemLocalId, Option<&'tcx Body<'tcx>>>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable_Generic)]\n pub struct OwnerInfo<'hir> {\n     /// Contents of the HIR.\n     pub nodes: OwnerNodes<'hir>,\n@@ -734,6 +734,7 @@ impl<'tcx> OwnerInfo<'tcx> {\n #[derive(Debug)]\n pub struct Crate<'hir> {\n     pub owners: IndexVec<LocalDefId, Option<OwnerInfo<'hir>>>,\n+    pub hir_hash: Fingerprint,\n }\n \n /// A block of statements `{ .. }`, which may have a label (in this case the"}, {"sha": "3c9fe93b67d3cfc02ca1bfb65dbe017d5a704ba1", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    AttributeMap, BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId,\n-    Mod, OwnerNodes, TraitItem, TraitItemId, Ty, VisibilityKind,\n+    AttributeMap, BodyId, Crate, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item,\n+    ItemId, Mod, OwnerNodes, TraitCandidate, TraitItem, TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::DefPathHash;\n@@ -21,6 +21,7 @@ pub trait HashStableContext:\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n+    fn hash_hir_trait_candidate(&mut self, _: &TraitCandidate, hasher: &mut StableHasher);\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n@@ -227,3 +228,16 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for AttributeMap<'tcx>\n         hash.hash_stable(hcx, hasher);\n     }\n }\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Crate<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let Crate { owners: _, hir_hash } = self;\n+        hir_hash.hash_stable(hcx, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitCandidate {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_trait_candidate(self, hasher)\n+    }\n+}"}, {"sha": "c8d6ecf6940edb82fe8dff0579e28bc57b06b5fb", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -1066,18 +1066,8 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n \n pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     debug_assert_eq!(crate_num, LOCAL_CRATE);\n-    let mut hir_body_nodes: Vec<_> = tcx\n-        .untracked_resolutions\n-        .definitions\n-        .def_path_table()\n-        .all_def_path_hashes_and_def_ids()\n-        .filter_map(|(def_path_hash, local_def_index)| {\n-            let def_id = LocalDefId { local_def_index };\n-            let hash = tcx.hir_crate(()).owners[def_id].as_ref()?.nodes.hash;\n-            Some((def_path_hash, hash, def_id))\n-        })\n-        .collect();\n-    hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n+    let krate = tcx.hir_crate(());\n+    let hir_body_hash = krate.hir_hash;\n \n     let upstream_crates = upstream_crates(tcx);\n \n@@ -1099,22 +1089,25 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n \n     let mut hcx = tcx.create_stable_hashing_context();\n     let mut stable_hasher = StableHasher::new();\n-    for (def_path_hash, fingerprint, def_id) in hir_body_nodes.iter() {\n-        def_path_hash.0.hash_stable(&mut hcx, &mut stable_hasher);\n-        fingerprint.hash_stable(&mut hcx, &mut stable_hasher);\n-        tcx.untracked_crate.owners[*def_id]\n-            .as_ref()\n-            .unwrap()\n-            .attrs\n-            .hash_stable(&mut hcx, &mut stable_hasher);\n-        if tcx.sess.opts.debugging_opts.incremental_relative_spans {\n-            let span = tcx.untracked_resolutions.definitions.def_span(*def_id);\n-            debug_assert_eq!(span.parent(), None);\n-            span.hash_stable(&mut hcx, &mut stable_hasher);\n-        }\n-    }\n+    hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);\n     upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n     source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n+    if tcx.sess.opts.debugging_opts.incremental_relative_spans {\n+        let definitions = &tcx.untracked_resolutions.definitions;\n+        let mut owner_spans: Vec<_> = krate\n+            .owners\n+            .iter_enumerated()\n+            .filter_map(|(def_id, info)| {\n+                let _ = info.as_ref()?;\n+                let def_path_hash = definitions.def_path_hash(def_id);\n+                let span = definitions.def_span(def_id);\n+                debug_assert_eq!(span.parent(), None);\n+                Some((def_path_hash, span))\n+            })\n+            .collect();\n+        owner_spans.sort_unstable_by_key(|bn| bn.0);\n+        owner_spans.hash_stable(&mut hcx, &mut stable_hasher);\n+    }\n     tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);\n "}, {"sha": "4ffe76fed1c4739f4ffb73f0055e957b545d5773", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -36,7 +36,6 @@ rustc_queries! {\n     /// prefer wrappers like `tcx.visit_all_items_in_krate()`.\n     query hir_crate(key: ()) -> &'tcx Crate<'tcx> {\n         eval_always\n-        no_hash\n         desc { \"get the crate HIR\" }\n     }\n "}, {"sha": "24f3a2e7de0a9926945fe569a37a4104d27219c1", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0431fdb11312ae324c73e4dab1e5be5c45164678/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=0431fdb11312ae324c73e4dab1e5be5c45164678", "patch": "@@ -6,8 +6,6 @@ use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n-use rustc_hir::definitions::DefPathHash;\n-use smallvec::SmallVec;\n use std::mem;\n \n impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n@@ -121,6 +119,16 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n \n         self.node_id_hashing_mode = prev_hash_node_ids;\n     }\n+\n+    #[inline]\n+    fn hash_hir_trait_candidate(&mut self, tc: &hir::TraitCandidate, hasher: &mut StableHasher) {\n+        self.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+            let hir::TraitCandidate { def_id, import_ids } = tc;\n+\n+            def_id.hash_stable(hcx, hasher);\n+            import_ids.hash_stable(hcx, hasher);\n+        });\n+    }\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n@@ -135,27 +143,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n         });\n     }\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            let hir::TraitCandidate { def_id, import_ids } = self;\n-\n-            def_id.hash_stable(hcx, hasher);\n-            import_ids.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n-    type KeyType = (DefPathHash, SmallVec<[DefPathHash; 1]>);\n-\n-    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> Self::KeyType {\n-        let hir::TraitCandidate { def_id, import_ids } = self;\n-\n-        (\n-            hcx.def_path_hash(*def_id),\n-            import_ids.iter().map(|def_id| hcx.local_def_path_hash(*def_id)).collect(),\n-        )\n-    }\n-}"}]}