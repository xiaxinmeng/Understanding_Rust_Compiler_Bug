{"sha": "1615a8a2b6cc41352856cb9630b1e450d881a0c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MTVhOGEyYjZjYzQxMzUyODU2Y2I5NjMwYjFlNDUwZDg4MWEwYzU=", "commit": {"author": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-03T14:21:13Z"}, "committer": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-03T14:21:13Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang-nursery/rust-clippy into range-plus-one", "tree": {"sha": "c775e2056271ffae0b2da7804fc59d3b31f64ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c775e2056271ffae0b2da7804fc59d3b31f64ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1615a8a2b6cc41352856cb9630b1e450d881a0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1615a8a2b6cc41352856cb9630b1e450d881a0c5", "html_url": "https://github.com/rust-lang/rust/commit/1615a8a2b6cc41352856cb9630b1e450d881a0c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1615a8a2b6cc41352856cb9630b1e450d881a0c5/comments", "author": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f", "html_url": "https://github.com/rust-lang/rust/commit/846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f"}, {"sha": "78ec6e38b4b5abcad856f936a998974cf4bc3947", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ec6e38b4b5abcad856f936a998974cf4bc3947", "html_url": "https://github.com/rust-lang/rust/commit/78ec6e38b4b5abcad856f936a998974cf4bc3947"}], "stats": {"total": 145, "additions": 90, "deletions": 55}, "files": [{"sha": "8d76e10983eeaf3d96e7f1f91a00340878a687b6", "filename": ".travis.yml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -50,6 +50,13 @@ matrix:\n     - env: INTEGRATION=hyperium/hyper\n \n script:\n+  - |\n+      rm rust-toolchain\n+      cargo install rustup-toolchain-install-master || echo \"rustup-toolchain-install-master already installed\"\n+      RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n+      travis_retry rustup-toolchain-install-master -f -n master $RUSTC_HASH\n+      rustup default master\n+      export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n   - |\n     if [ -z ${INTEGRATION} ]; then\n       ./ci/base-tests.sh"}, {"sha": "69dba57f4602579c56b667a43af0e6d08eb1150a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -89,7 +89,7 @@ Be sure that Clippy was compiled with the same version of rustc that cargo invok\n \n ## Configuration\n \n-Some lints can be configured in a TOML file named with `clippy.toml` or `.clippy.toml`. It contains basic `variable = value` mapping eg.\n+Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable = value` mapping eg.\n \n ```toml\n blacklisted-names = [\"toto\", \"tata\", \"titi\"]"}, {"sha": "f50d1e88a24f2a3214fc17b46b8fdbd859d8aaf7", "filename": "appveyor.yml", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -3,20 +3,21 @@ environment:\n         PROJECT_NAME: rust-clippy\n     matrix:\n         #- TARGET: i686-pc-windows-gnu\n-        #  MSYS2_BITS: 32\n         #- TARGET: i686-pc-windows-msvc\n-        #  MSYS2_BITS: 32\n         #- TARGET: x86_64-pc-windows-gnu\n-        #  MSYS2_BITS: 64\n         - TARGET: x86_64-pc-windows-msvc\n-          MSYS2_BITS: 64\n \n install:\n-    - set PATH=C:\\Program Files\\Git\\mingw64\\bin;%PATH%\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n     - rustup-init.exe -y --default-host %TARGET% --default-toolchain nightly\n-    - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin;C:\\Users\\appveyor\\.rustup\\toolchains\\nightly-%TARGET%\\bin\n-    - if defined MSYS2_BITS set PATH=%PATH%;C:\\msys64\\mingw%MSYS2_BITS%\\bin\n+    - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n+    - git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}' >rustc-hash.txt\n+    - set /p RUSTC_HASH=<rustc-hash.txt\n+    - del rust-toolchain\n+    - cargo install rustup-toolchain-install-master || echo \"rustup-toolchain-install-master already installed\"\n+    - rustup-toolchain-install-master %RUSTC_HASH% -f -n master\n+    - rustup default master\n+    - set PATH=%PATH%;C:\\Users\\appveyor\\.rustup\\toolchains\\master\\bin\n     - rustc -V\n     - cargo -V\n \n@@ -26,9 +27,6 @@ test_script:\n     - set RUST_BACKTRACE=1\n     - cargo build --features debugging\n     - cargo test --features debugging\n-    #- copy target\\debug\\cargo-clippy.exe C:\\Users\\appveyor\\.cargo\\bin\\\n-    #- cargo clippy -- -D clippy\n-    #- cd clippy_lints && cargo clippy -- -D clippy && cd ..\n \n notifications:\n     - provider: Email"}, {"sha": "dee709ab4ebb2125916d62b9933f84c7b8e681d8", "filename": "ci/base-tests.sh", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -13,13 +13,13 @@ cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver\n rm ~/.cargo/bin/cargo-clippy\n # run clippy on its own codebase...\n-PATH=$PATH:~/rust/cargo/bin cargo clippy --all-targets --all-features -- -D clippy\n+PATH=$PATH:~/rust/cargo/bin cargo clippy --all-targets --all-features -- -D clippy::all\n # ... and some test directories\n-cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n-cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n-cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n-cd clippy_workspace_tests/subcrate/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../../..\n+cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ..\n+cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../..\n+cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../..\n+cd clippy_workspace_tests/subcrate/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../../..\n # test --manifest-path\n-PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy\n-cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=../Cargo.toml -- -D clippy && cd ../..\n+PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy::all\n+cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=../Cargo.toml -- -D clippy::all && cd ../..\n set +x"}, {"sha": "18b91f6eae05b7ff1c848ec196d18ad007b49fbf", "filename": "ci/integration-tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/ci%2Fintegration-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/ci%2Fintegration-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration-tests.sh?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -9,7 +9,7 @@ cd checkout\n \n function check() {\n # run clippy on a project, try to be verbose and trigger as many warnings as possible for greater coverage\n-  RUST_BACKTRACE=full cargo clippy --all-targets --all-features -- --cap-lints warn -W clippy_pedantic -W clippy_nursery  &> clippy_output\n+  RUST_BACKTRACE=full cargo clippy --all-targets --all-features -- --cap-lints warn -W clippy::pedantic -W clippy::nursery  &> clippy_output\n   cat clippy_output\n   ! cat clippy_output | grep -q \"internal compiler error\\|query stack during panic\"\n   if [[ $? != 0 ]]; then"}, {"sha": "e3ae560764560a4c46ff4943d07e5728edc24d1f", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -109,7 +109,9 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                 self.visit_expr(e);\n                 for arm in arms {\n                     if let Some(ref guard) = arm.guard {\n-                        self.visit_expr(guard);\n+                        match guard {\n+                            Guard::If(if_expr) => self.visit_expr(if_expr),\n+                        }\n                     }\n                     // make sure top level arm expressions aren't linted\n                     self.maybe_walk_expr(&*arm.body);"}, {"sha": "c49a70afa6fa0c8e356b97fd4eb9a4a59c6d5973", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -171,7 +171,7 @@ pub mod write;\n pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n-use crate::utils::conf::Conf;\n+pub use crate::utils::conf::Conf;\n \n mod reexport {\n     crate use syntax::ast::{Name, NodeId};\n@@ -449,6 +449,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        loops::EXPLICIT_INTO_ITER_LOOP,\n+        loops::EXPLICIT_ITER_LOOP,\n         matches::SINGLE_MATCH_ELSE,\n         methods::FILTER_MAP,\n         methods::OPTION_MAP_UNWRAP_OR,\n@@ -546,8 +548,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         literal_representation::UNREADABLE_LITERAL,\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n-        loops::EXPLICIT_INTO_ITER_LOOP,\n-        loops::EXPLICIT_ITER_LOOP,\n         loops::FOR_KV_MAP,\n         loops::FOR_LOOP_OVER_OPTION,\n         loops::FOR_LOOP_OVER_RESULT,\n@@ -718,8 +718,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         literal_representation::LARGE_DIGIT_GROUPS,\n         literal_representation::UNREADABLE_LITERAL,\n         loops::EMPTY_LOOP,\n-        loops::EXPLICIT_INTO_ITER_LOOP,\n-        loops::EXPLICIT_ITER_LOOP,\n         loops::FOR_KV_MAP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,"}, {"sha": "d12b2619c62fa87c5d364e220e6c77364c3b69d7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -85,7 +85,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub EXPLICIT_ITER_LOOP,\n-    style,\n+    pedantic,\n     \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\"\n }\n \n@@ -107,7 +107,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub EXPLICIT_INTO_ITER_LOOP,\n-    style,\n+    pedantic,\n     \"for-looping over `_.into_iter()` when `_` would do\"\n }\n \n@@ -1209,7 +1209,7 @@ fn lint_iter_method(cx: &LateContext<'_, '_>, args: &[Expr], arg: &Expr, method_\n         cx,\n         EXPLICIT_ITER_LOOP,\n         arg.span,\n-        \"it is more idiomatic to loop over references to containers instead of using explicit \\\n+        \"it is more concise to loop over references to containers instead of using explicit \\\n          iteration methods\",\n         \"to write this more concisely, try\",\n         format!(\"&{}{}\", muta, object),\n@@ -1247,7 +1247,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat, arg: &Expr, expr: &Ex\n                         cx,\n                         EXPLICIT_INTO_ITER_LOOP,\n                         arg.span,\n-                        \"it is more idiomatic to loop over containers instead of using explicit \\\n+                        \"it is more concise to loop over containers instead of using explicit \\\n                          iteration methods`\",\n                         \"to write this more concisely, try\",\n                         object.to_string(),"}, {"sha": "1191723ba62c003904deae18d512334414293fcd", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -339,7 +339,9 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n                     check_pat(cx, pat, Some(&**init), pat.span, bindings);\n                     // This is ugly, but needed to get the right type\n                     if let Some(ref guard) = arm.guard {\n-                        check_expr(cx, guard, bindings);\n+                        match guard {\n+                            Guard::If(if_expr) => check_expr(cx, if_expr, bindings),\n+                        }\n                     }\n                     check_expr(cx, &arm.body, bindings);\n                     bindings.truncate(len);"}, {"sha": "e2c809c0c7cc2e0687a21c43f7ac1c305dfd5ff8", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -345,9 +345,15 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     self.visit_expr(&arm.body);\n                     if let Some(ref guard) = arm.guard {\n                         let guard_pat = self.next(\"guard\");\n-                        println!(\"    if let Some(ref {}) = {}[{}].guard\", guard_pat, arms_pat, i);\n-                        self.current = guard_pat;\n-                        self.visit_expr(guard);\n+                        println!(\"    if let Some(ref {}) = {}[{}].guard;\", guard_pat, arms_pat, i);\n+                        match guard {\n+                            hir::Guard::If(ref if_expr) => {\n+                                let if_expr_pat = self.next(\"expr\");\n+                                println!(\"    if let Guard::If(ref {}) = {};\", if_expr_pat, guard_pat);\n+                                self.current = if_expr_pat;\n+                                self.visit_expr(if_expr);\n+                            }\n+                        }\n                     }\n                     println!(\"    if {}[{}].pats.len() == {};\", arms_pat, i, arm.pats.len());\n                     for (j, pat) in arm.pats.iter().enumerate() {"}, {"sha": "8ec889a9fb6b329cfbdda66bbeaa33849581260e", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -65,7 +65,7 @@ macro_rules! define_Conf {\n         mod helpers {\n             use serde_derive::Deserialize;\n             /// Type used to store lint configuration.\n-            #[derive(Deserialize)]\n+            #[derive(Default, Deserialize)]\n             #[serde(rename_all=\"kebab-case\", deny_unknown_fields)]\n             pub struct Conf {\n                 $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)]"}, {"sha": "939b4f595e4d09a9d32440aba3e0aae44ff3ce6f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprKind::Match(ref le, ref la, ref ls), &ExprKind::Match(ref re, ref ra, ref rs)) => {\n                 ls == rs && self.eq_expr(le, re) && over(la, ra, |l, r| {\n-                    self.eq_expr(&l.body, &r.body) && both(&l.guard, &r.guard, |l, r| self.eq_expr(l, r))\n+                    self.eq_expr(&l.body, &r.body) && both(&l.guard, &r.guard, |l, r| self.eq_guard(l, r))\n                         && over(&l.pats, &r.pats, |l, r| self.eq_pat(l, r))\n                 })\n             },\n@@ -152,6 +152,12 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n+    fn eq_guard(&mut self, left: &Guard, right: &Guard) -> bool {\n+        match (left, right) {\n+            (Guard::If(l), Guard::If(r)) => self.eq_expr(l, r),\n+        }\n+    }\n+\n     fn eq_generic_arg(&mut self, left: &GenericArg, right: &GenericArg) -> bool {\n         match (left, right) {\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => self.eq_lifetime(l_lt, r_lt),\n@@ -497,7 +503,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 for arm in arms {\n                     // TODO: arm.pat?\n                     if let Some(ref e) = arm.guard {\n-                        self.hash_expr(e);\n+                        self.hash_guard(e);\n                     }\n                     self.hash_expr(&arm.body);\n                 }\n@@ -637,4 +643,14 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             },\n         }\n     }\n+\n+    pub fn hash_guard(&mut self, g: &Guard) {\n+        match g {\n+            Guard::If(ref expr) => {\n+                let c: fn(_) -> _ = Guard::If;\n+                c.hash(&mut self.s);\n+                self.hash_expr(expr);\n+            }\n+        }\n+    }\n }"}, {"sha": "56b76fdc7b0548f947ac517c12fcc1775fc4e713", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n         if let Some(ref guard) = arm.guard {\n             println!(\"guard:\");\n-            print_expr(cx, guard, 1);\n+            print_guard(cx, guard, 1);\n         }\n         println!(\"body:\");\n         print_expr(cx, &arm.body, 1);\n@@ -515,3 +515,14 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n         },\n     }\n }\n+\n+fn print_guard(cx: &LateContext<'_, '_>, guard: &hir::Guard, indent: usize) {\n+    let ind = \"  \".repeat(indent);\n+    println!(\"{}+\", ind);\n+    match guard {\n+        hir::Guard::If(expr) => {\n+            println!(\"{}If\", ind);\n+            print_expr(cx, expr, indent + 1);\n+        }\n+    }\n+}"}, {"sha": "bab7bdc77a4ccffb3338515b79cc5081427fe506", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1615a8a2b6cc41352856cb9630b1e450d881a0c5/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1615a8a2b6cc41352856cb9630b1e450d881a0c5/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=1615a8a2b6cc41352856cb9630b1e450d881a0c5", "patch": "@@ -264,83 +264,83 @@ error: this range is empty so this for loop will never run\n 193 |     for i in (5 + 2)..(8 - 1) {\n     |              ^^^^^^^^^^^^^^^^\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:215:15\n     |\n 215 |     for _v in vec.iter() {}\n     |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n     |\n     = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:217:15\n     |\n 217 |     for _v in vec.iter_mut() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n-error: it is more idiomatic to loop over containers instead of using explicit iteration methods`\n+error: it is more concise to loop over containers instead of using explicit iteration methods`\n    --> $DIR/for_loop.rs:220:15\n     |\n 220 |     for _v in out_vec.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n     |\n     = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:223:15\n     |\n 223 |     for _v in array.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:228:15\n     |\n 228 |     for _v in [1, 2, 3].iter() {}\n     |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:232:15\n     |\n 232 |     for _v in [0; 32].iter() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:237:15\n     |\n 237 |     for _v in ll.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:240:15\n     |\n 240 |     for _v in vd.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:243:15\n     |\n 243 |     for _v in bh.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:246:15\n     |\n 246 |     for _v in hm.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:249:15\n     |\n 249 |     for _v in bt.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:252:15\n     |\n 252 |     for _v in hs.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n-error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:255:15\n     |\n 255 |     for _v in bs.iter() {}"}, {"sha": "bebe0e82a7feca064f32e57597b256aee875ed8b", "filename": "util/dogfood.sh", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f/util%2Fdogfood.sh", "raw_url": "https://github.com/rust-lang/rust/raw/846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f/util%2Fdogfood.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdogfood.sh?ref=846c3dba2cbb959b3ac2be87fb3cb8d9253acb9f", "patch": "@@ -1,5 +0,0 @@\n-#!/bin/sh\n-rm -rf target*/*so\n-cargo build --lib && cp -R target target_recur && cargo rustc --lib -- -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy::pedantic -Dclippy::all || exit 1\n-rm -rf target_recur\n-"}]}