{"sha": "16dad84f7b2f173db012dda2e77b08ccb423391f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZGFkODRmN2IyZjE3M2RiMDEyZGRhMmU3N2IwOGNjYjQyMzM5MWY=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-10-30T09:40:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-31T21:43:43Z"}, "message": "rustc: Find crates by matching the name metadata", "tree": {"sha": "e1aa10f312d6bfb88ee83c63af9507e73f70f31a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1aa10f312d6bfb88ee83c63af9507e73f70f31a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16dad84f7b2f173db012dda2e77b08ccb423391f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16dad84f7b2f173db012dda2e77b08ccb423391f", "html_url": "https://github.com/rust-lang/rust/commit/16dad84f7b2f173db012dda2e77b08ccb423391f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16dad84f7b2f173db012dda2e77b08ccb423391f/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329f045d4c5f27275dcf1cadf8d0f51919ba8027", "url": "https://api.github.com/repos/rust-lang/rust/commits/329f045d4c5f27275dcf1cadf8d0f51919ba8027", "html_url": "https://github.com/rust-lang/rust/commit/329f045d4c5f27275dcf1cadf8d0f51919ba8027"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "3aaf89126f60c1c5def5d55da91bf2c4c4c758be", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/16dad84f7b2f173db012dda2e77b08ccb423391f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dad84f7b2f173db012dda2e77b08ccb423391f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=16dad84f7b2f173db012dda2e77b08ccb423391f", "patch": "@@ -119,37 +119,24 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n \n     attr::require_unique_names(sess, metas);\n \n-    let crate_name =\n-        {\n-            let name_items = attr::find_meta_items_by_name(metas, \"name\");\n-            alt vec::last(name_items) {\n-              some(i) {\n-                alt attr::get_meta_item_value_str(i) {\n-                  some(n) { n }\n-                  // FIXME: Probably want a warning here since the user\n-                  // is using the wrong type of meta item\n-                  _ { ident }\n-                }\n-              }\n-              none. { ident }\n-            }\n-        };\n-\n+    // Metadata \"name\" will be used to find the crate. Use `ident'\n+    // as \"name\" if the attribute is not explicitly specified\n+    if !attr::contains_name(metas, \"name\") {\n+      metas += [attr::mk_name_value_item_str(\"name\", ident)];\n+    }\n     let nn = default_native_lib_naming(sess, sess.get_opts().static);\n     let x =\n-        find_library_crate_aux(nn, crate_name, metas,\n-                               sess.filesearch());\n+        find_library_crate_aux(nn, metas, sess.filesearch());\n     if x != none || sess.get_opts().static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(nn2, crate_name, metas,\n-                               sess.filesearch());\n+    ret find_library_crate_aux(nn2, metas, sess.filesearch());\n }\n \n-fn find_library_crate_aux(nn: {prefix: str, suffix: str}, crate_name: str,\n+fn find_library_crate_aux(nn: {prefix: str, suffix: str},\n                           metas: [@ast::meta_item],\n                           filesearch: filesearch::filesearch) ->\n    option::t<{ident: str, data: @[u8]}> {\n-    let prefix: str = nn.prefix + crate_name;\n+    let prefix: str = nn.prefix;\n     let suffix: str = nn.suffix;\n \n     ret filesearch::search(filesearch, { |path|"}]}