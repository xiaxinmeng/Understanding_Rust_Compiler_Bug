{"sha": "1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNzY0YTdlZjU5YjljYjJlYjMxNjU4NjI1YTZhN2RhY2MzZDgxOWI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-10T16:21:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-17T21:17:31Z"}, "message": "Add futures scaffolding to libcore", "tree": {"sha": "0218ad609da392754c13463df313617840ad5d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0218ad609da392754c13463df313617840ad5d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "html_url": "https://github.com/rust-lang/rust/commit/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660326e9791d5caf3186b14521498c2584a494ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/660326e9791d5caf3186b14521498c2584a494ab", "html_url": "https://github.com/rust-lang/rust/commit/660326e9791d5caf3186b14521498c2584a494ab"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "6150f34d8446d035e29842d6dfdb386a2cfabc54", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "patch": "@@ -2,6 +2,85 @@\n \n //! Asynchronous values.\n \n+#[cfg(not(bootstrap))]\n+use crate::{\n+    ops::{Generator, GeneratorState},\n+    pin::Pin,\n+    ptr::NonNull,\n+    task::{Context, Poll},\n+};\n+\n mod future;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n+\n+/// This type is needed because:\n+///\n+/// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass\n+///    a raw pointer.\n+/// b) Raw pointers and `NonNull` aren't `Send` or `Sync`, so that would make every single future\n+///    non-Send/Sync as well, and we don't want that.\n+///\n+/// It also simplifies the HIR lowering of `.await`.\n+#[doc(hidden)]\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[cfg(not(bootstrap))]\n+#[derive(Debug, Copy, Clone)]\n+pub struct ResumeTy(pub NonNull<Context<'static>>);\n+\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[cfg(not(bootstrap))]\n+unsafe impl Send for ResumeTy {}\n+\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[cfg(not(bootstrap))]\n+unsafe impl Sync for ResumeTy {}\n+\n+/// Wrap a generator in a future.\n+///\n+/// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n+/// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n+// This is `const` to avoid extra errors after we recover from `const async fn`\n+#[doc(hidden)]\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[cfg(not(bootstrap))]\n+#[inline]\n+pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+where\n+    T: Generator<ResumeTy, Yield = ()>\n+{\n+    #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+    struct GenFuture<T: Generator<ResumeTy, Yield = ()>>(T);\n+\n+    // We rely on the fact that async/await futures are immovable in order to create\n+    // self-referential borrows in the underlying generator.\n+    impl<T: Generator<ResumeTy, Yield = ()>> !Unpin for GenFuture<T> {}\n+\n+    impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n+        type Output = T::Return;\n+        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+            // Safety: Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n+            let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n+\n+            // Resume the generator, turning the `&mut Context` into a `NonNull` raw pointer. The\n+            // `.await` lowering will safely cast that back to a `&mut Context`.\n+            match gen.resume(ResumeTy(NonNull::from(cx).cast::<Context<'static>>())) {\n+                GeneratorState::Yielded(()) => Poll::Pending,\n+                GeneratorState::Complete(x) => Poll::Ready(x),\n+            }\n+        }\n+    }\n+\n+    GenFuture(gen)\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[cfg(not(bootstrap))]\n+#[inline]\n+pub unsafe fn poll_with_context<F>(f: Pin<&mut F>, mut cx: ResumeTy) -> Poll<F::Output>\n+where\n+    F: Future,\n+{\n+    F::poll(f, cx.0.as_mut())\n+}"}, {"sha": "c0675eeba98da602fba6d31893d89578bb86d3e5", "filename": "src/libstd/future.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a764a7ef59b9cb2eb31658625a6a7dacc3d819b/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=1a764a7ef59b9cb2eb31658625a6a7dacc3d819b", "patch": "@@ -1,12 +1,14 @@\n //! Asynchronous values.\n \n-use core::cell::Cell;\n-use core::marker::Unpin;\n-use core::ops::{Drop, Generator, GeneratorState};\n-use core::option::Option;\n-use core::pin::Pin;\n-use core::ptr::NonNull;\n-use core::task::{Context, Poll};\n+#[cfg(bootstrap)]\n+use core::{\n+    cell::Cell,\n+    marker::Unpin,\n+    ops::{Drop, Generator, GeneratorState},\n+    pin::Pin,\n+    ptr::NonNull,\n+    task::{Context, Poll},\n+};\n \n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -17,22 +19,26 @@ pub use core::future::*;\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n+#[cfg(bootstrap)]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n pub const fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n     GenFuture(x)\n }\n \n /// A wrapper around generators used to implement `Future` for `async`/`await` code.\n+#[cfg(bootstrap)]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n struct GenFuture<T: Generator<Yield = ()>>(T);\n \n // We rely on the fact that async/await futures are immovable in order to create\n // self-referential borrows in the underlying generator.\n+#[cfg(bootstrap)]\n impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n \n+#[cfg(bootstrap)]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n@@ -48,12 +54,15 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     }\n }\n \n+#[cfg(bootstrap)]\n thread_local! {\n     static TLS_CX: Cell<Option<NonNull<Context<'static>>>> = Cell::new(None);\n }\n \n+#[cfg(bootstrap)]\n struct SetOnDrop(Option<NonNull<Context<'static>>>);\n \n+#[cfg(bootstrap)]\n impl Drop for SetOnDrop {\n     fn drop(&mut self) {\n         TLS_CX.with(|tls_cx| {\n@@ -64,13 +73,15 @@ impl Drop for SetOnDrop {\n \n // Safety: the returned guard must drop before `cx` is dropped and before\n // any previous guard is dropped.\n+#[cfg(bootstrap)]\n unsafe fn set_task_context(cx: &mut Context<'_>) -> SetOnDrop {\n     // transmute the context's lifetime to 'static so we can store it.\n     let cx = core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx);\n     let old_cx = TLS_CX.with(|tls_cx| tls_cx.replace(Some(NonNull::from(cx))));\n     SetOnDrop(old_cx)\n }\n \n+#[cfg(bootstrap)]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Polls a future in the current thread-local task waker."}]}