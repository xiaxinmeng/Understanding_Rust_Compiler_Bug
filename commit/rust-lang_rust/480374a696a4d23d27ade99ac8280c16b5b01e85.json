{"sha": "480374a696a4d23d27ade99ac8280c16b5b01e85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDM3NGE2OTZhNGQyM2QyN2FkZTk5YWM4MjgwYzE2YjViMDFlODU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-04T03:08:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-06T21:49:00Z"}, "message": "Only use built-in indexing for uint indexes", "tree": {"sha": "9c1ffb43b3ff4dae8b5b1caba26347010fa07eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1ffb43b3ff4dae8b5b1caba26347010fa07eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/480374a696a4d23d27ade99ac8280c16b5b01e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/480374a696a4d23d27ade99ac8280c16b5b01e85", "html_url": "https://github.com/rust-lang/rust/commit/480374a696a4d23d27ade99ac8280c16b5b01e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/480374a696a4d23d27ade99ac8280c16b5b01e85/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ed4974569fbe71c0ba76327b5e2a34a515ed73", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ed4974569fbe71c0ba76327b5e2a34a515ed73", "html_url": "https://github.com/rust-lang/rust/commit/77ed4974569fbe71c0ba76327b5e2a34a515ed73"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "d8d7c5afb10669082fa5003ad7541d47f10be673", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=480374a696a4d23d27ade99ac8280c16b5b01e85", "patch": "@@ -165,7 +165,6 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) {\n         ast::ExprParen(..) |\n         ast::ExprField(..) |\n         ast::ExprTupField(..) |\n-        ast::ExprIndex(..) |\n         ast::ExprTup(..) |\n         ast::ExprRepeat(..) |\n         ast::ExprStruct(..) => {}"}, {"sha": "d43850989fe7998277380c0fc1a3f490ac507df1", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=480374a696a4d23d27ade99ac8280c16b5b01e85", "patch": "@@ -562,18 +562,19 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                             self.fcx.adjust_expr_ty(\n                                 &**base_expr,\n                                 Some(&ty::AdjustDerefRef(base_adjustment.clone())));\n-\n+                        let index_expr_ty = self.fcx.expr_ty(&**index_expr);\n+                        \n                         let result = check::try_index_step(\n                             self.fcx,\n                             MethodCall::expr(expr.id),\n                             *expr,\n                             &**base_expr,\n                             adjusted_base_ty,\n                             base_adjustment,\n-                            PreferMutLvalue);\n+                            PreferMutLvalue,\n+                            index_expr_ty);\n \n                         if let Some((input_ty, return_ty)) = result {\n-                            let index_expr_ty = self.fcx.expr_ty(&**index_expr);\n                             demand::suptype(self.fcx, index_expr.span, input_ty, index_expr_ty);\n \n                             let expr_ty = self.fcx.expr_ty(&**expr);"}, {"sha": "50f73312c770bc35faf26fb317e49f174f057551", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480374a696a4d23d27ade99ac8280c16b5b01e85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=480374a696a4d23d27ade99ac8280c16b5b01e85", "patch": "@@ -2387,18 +2387,30 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             base_expr: &ast::Expr,\n                             adjusted_ty: Ty<'tcx>,\n                             adjustment: ty::AutoDerefRef<'tcx>,\n-                            lvalue_pref: LvaluePreference)\n+                            lvalue_pref: LvaluePreference,\n+                            index_ty: Ty<'tcx>)\n                             -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)>\n {\n     let tcx = fcx.tcx();\n-    debug!(\"try_index_step(expr={}, base_expr.id={}, adjusted_ty={}, adjustment={})\",\n+    debug!(\"try_index_step(expr={}, base_expr.id={}, adjusted_ty={}, adjustment={}, index_ty={})\",\n            expr.repr(tcx),\n            base_expr.repr(tcx),\n            adjusted_ty.repr(tcx),\n-           adjustment);\n+           adjustment,\n+           index_ty.repr(tcx));\n \n     let input_ty = fcx.infcx().next_ty_var();\n \n+    // First, try built-in indexing.\n+    match (ty::index(adjusted_ty), &index_ty.sty) {\n+        (Some(ty), &ty::ty_uint(ast::TyU)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n+            debug!(\"try_index_step: success, using built-in indexing\");\n+            fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n+            return Some((tcx.types.uint, ty));\n+        }\n+        _ => {}\n+    }\n+\n     // Try `IndexMut` first, if preferred.\n     let method = match (lvalue_pref, tcx.lang_items.index_mut_trait()) {\n         (PreferMutLvalue, Some(trait_did)) => {\n@@ -2429,18 +2441,6 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         (method, _) => method,\n     };\n \n-    if method.is_none() {\n-        // If there are no overridden index impls, use built-in indexing.\n-        match ty::index(adjusted_ty) {\n-            Some(ty) => {\n-                debug!(\"try_index_step: success, using built-in indexing\");\n-                fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n-                return Some((tcx.types.uint, ty));\n-            }\n-            None => {}\n-        }\n-    }\n-\n     // If some lookup succeeds, write callee into table and extract index/element\n     // type from the method signature.\n     // If some lookup succeeded, install method in table\n@@ -4205,11 +4205,14 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                          &**base,\n                                          adj_ty,\n                                          adj,\n-                                         lvalue_pref)\n+                                         lvalue_pref,\n+                                         idx_t)\n                       });\n \n                   match result {\n                       Some((index_ty, element_ty)) => {\n+                          // FIXME: we've already checked idx above, we should\n+                          // probably just demand subtype or something here.\n                           check_expr_has_type(fcx, &**idx, index_ty);\n                           fcx.write_ty(id, element_ty);\n                       }"}]}