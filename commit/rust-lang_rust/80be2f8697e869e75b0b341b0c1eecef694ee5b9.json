{"sha": "80be2f8697e869e75b0b341b0c1eecef694ee5b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYmUyZjg2OTdlODY5ZTc1YjBiMzQxYjBjMWVlY2VmNjk0ZWU1Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T17:38:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T17:38:26Z"}, "message": "Auto merge of #43971 - alexcrichton:lint-statements, r=michaelwoerister\n\nrustc: Add `Local` to the HIR map of parents\n\nWhen walking parents for lints we want to be sure to hit `let` statements which\ncan have attributes, so hook up these statements in the HIR map.\n\nCloses #43910", "tree": {"sha": "7e789d4a25501c9ded9dad08863687420d423494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e789d4a25501c9ded9dad08863687420d423494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80be2f8697e869e75b0b341b0c1eecef694ee5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80be2f8697e869e75b0b341b0c1eecef694ee5b9", "html_url": "https://github.com/rust-lang/rust/commit/80be2f8697e869e75b0b341b0c1eecef694ee5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80be2f8697e869e75b0b341b0c1eecef694ee5b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757b7ac2abd69d97ba196b76f0bbf78c377aaea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/757b7ac2abd69d97ba196b76f0bbf78c377aaea9", "html_url": "https://github.com/rust-lang/rust/commit/757b7ac2abd69d97ba196b76f0bbf78c377aaea9"}, {"sha": "4ba2df11d870882422d32e45d62cd6198cf4068b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba2df11d870882422d32e45d62cd6198cf4068b", "html_url": "https://github.com/rust-lang/rust/commit/4ba2df11d870882422d32e45d62cd6198cf4068b"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "0928081decda0aefcb1b6f4d196690bdf9b365ce", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -138,7 +138,7 @@ impl<'hir> Visitor<'hir> for NodeCollector<'hir> {\n \n     fn visit_pat(&mut self, pat: &'hir Pat) {\n         let node = if let PatKind::Binding(..) = pat.node {\n-            NodeLocal(pat)\n+            NodeBinding(pat)\n         } else {\n             NodePat(pat)\n         };\n@@ -195,6 +195,13 @@ impl<'hir> Visitor<'hir> for NodeCollector<'hir> {\n         });\n     }\n \n+    fn visit_local(&mut self, l: &'hir Local) {\n+        self.insert(l.id, NodeLocal(l));\n+        self.with_parent(l.id, |this| {\n+            intravisit::walk_local(this, l)\n+        })\n+    }\n+\n     fn visit_lifetime(&mut self, lifetime: &'hir Lifetime) {\n         self.insert(lifetime.id, NodeLifetime(lifetime));\n     }"}, {"sha": "1ff3166110aa0a31a079b224c5797f15c66567e9", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -53,9 +53,10 @@ pub enum Node<'hir> {\n     NodeStmt(&'hir Stmt),\n     NodeTy(&'hir Ty),\n     NodeTraitRef(&'hir TraitRef),\n-    NodeLocal(&'hir Pat),\n+    NodeBinding(&'hir Pat),\n     NodePat(&'hir Pat),\n     NodeBlock(&'hir Block),\n+    NodeLocal(&'hir Local),\n \n     /// NodeStructCtor represents a tuple struct.\n     NodeStructCtor(&'hir VariantData),\n@@ -83,13 +84,14 @@ enum MapEntry<'hir> {\n     EntryStmt(NodeId, &'hir Stmt),\n     EntryTy(NodeId, &'hir Ty),\n     EntryTraitRef(NodeId, &'hir TraitRef),\n-    EntryLocal(NodeId, &'hir Pat),\n+    EntryBinding(NodeId, &'hir Pat),\n     EntryPat(NodeId, &'hir Pat),\n     EntryBlock(NodeId, &'hir Block),\n     EntryStructCtor(NodeId, &'hir VariantData),\n     EntryLifetime(NodeId, &'hir Lifetime),\n     EntryTyParam(NodeId, &'hir TyParam),\n     EntryVisibility(NodeId, &'hir Visibility),\n+    EntryLocal(NodeId, &'hir Local),\n \n     /// Roots for node trees.\n     RootCrate,\n@@ -114,13 +116,14 @@ impl<'hir> MapEntry<'hir> {\n             NodeStmt(n) => EntryStmt(p, n),\n             NodeTy(n) => EntryTy(p, n),\n             NodeTraitRef(n) => EntryTraitRef(p, n),\n-            NodeLocal(n) => EntryLocal(p, n),\n+            NodeBinding(n) => EntryBinding(p, n),\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n             NodeStructCtor(n) => EntryStructCtor(p, n),\n             NodeLifetime(n) => EntryLifetime(p, n),\n             NodeTyParam(n) => EntryTyParam(p, n),\n             NodeVisibility(n) => EntryVisibility(p, n),\n+            NodeLocal(n) => EntryLocal(p, n),\n         }\n     }\n \n@@ -136,13 +139,14 @@ impl<'hir> MapEntry<'hir> {\n             EntryStmt(id, _) => id,\n             EntryTy(id, _) => id,\n             EntryTraitRef(id, _) => id,\n-            EntryLocal(id, _) => id,\n+            EntryBinding(id, _) => id,\n             EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n             EntryStructCtor(id, _) => id,\n             EntryLifetime(id, _) => id,\n             EntryTyParam(id, _) => id,\n             EntryVisibility(id, _) => id,\n+            EntryLocal(id, _) => id,\n \n             NotPresent |\n             RootCrate => return None,\n@@ -161,13 +165,14 @@ impl<'hir> MapEntry<'hir> {\n             EntryStmt(_, n) => NodeStmt(n),\n             EntryTy(_, n) => NodeTy(n),\n             EntryTraitRef(_, n) => NodeTraitRef(n),\n-            EntryLocal(_, n) => NodeLocal(n),\n+            EntryBinding(_, n) => NodeBinding(n),\n             EntryPat(_, n) => NodePat(n),\n             EntryBlock(_, n) => NodeBlock(n),\n             EntryStructCtor(_, n) => NodeStructCtor(n),\n             EntryLifetime(_, n) => NodeLifetime(n),\n             EntryTyParam(_, n) => NodeTyParam(n),\n             EntryVisibility(_, n) => NodeVisibility(n),\n+            EntryLocal(_, n) => NodeLocal(n),\n             _ => return None\n         })\n     }\n@@ -319,13 +324,14 @@ impl<'hir> Map<'hir> {\n                 EntryStmt(p, _) |\n                 EntryTy(p, _) |\n                 EntryTraitRef(p, _) |\n-                EntryLocal(p, _) |\n+                EntryBinding(p, _) |\n                 EntryPat(p, _) |\n                 EntryBlock(p, _) |\n                 EntryStructCtor(p, _) |\n                 EntryLifetime(p, _) |\n                 EntryTyParam(p, _) |\n-                EntryVisibility(p, _) =>\n+                EntryVisibility(p, _) |\n+                EntryLocal(p, _) =>\n                     id = p,\n \n                 EntryExpr(p, _) => {\n@@ -589,7 +595,7 @@ impl<'hir> Map<'hir> {\n     /// immediate parent is an item or a closure.\n     pub fn is_argument(&self, id: NodeId) -> bool {\n         match self.find(id) {\n-            Some(NodeLocal(_)) => (),\n+            Some(NodeBinding(_)) => (),\n             _ => return false,\n         }\n         match self.find(self.get_parent_node(id)) {\n@@ -856,7 +862,7 @@ impl<'hir> Map<'hir> {\n             NodeField(f) => f.name,\n             NodeLifetime(lt) => lt.name,\n             NodeTyParam(tp) => tp.name,\n-            NodeLocal(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n+            NodeBinding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n             NodeStructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }\n@@ -915,14 +921,15 @@ impl<'hir> Map<'hir> {\n             Some(EntryStmt(_, stmt)) => stmt.span,\n             Some(EntryTy(_, ty)) => ty.span,\n             Some(EntryTraitRef(_, tr)) => tr.path.span,\n-            Some(EntryLocal(_, pat)) => pat.span,\n+            Some(EntryBinding(_, pat)) => pat.span,\n             Some(EntryPat(_, pat)) => pat.span,\n             Some(EntryBlock(_, block)) => block.span,\n             Some(EntryStructCtor(_, _)) => self.expect_item(self.get_parent(id)).span,\n             Some(EntryLifetime(_, lifetime)) => lifetime.span,\n             Some(EntryTyParam(_, ty_param)) => ty_param.span,\n             Some(EntryVisibility(_, &Visibility::Restricted { ref path, .. })) => path.span,\n             Some(EntryVisibility(_, v)) => bug!(\"unexpected Visibility {:?}\", v),\n+            Some(EntryLocal(_, local)) => local.span,\n \n             Some(RootCrate) => self.forest.krate.span,\n             Some(NotPresent) | None => {\n@@ -1112,7 +1119,7 @@ impl<'a> print::State<'a> {\n             NodeStmt(a)        => self.print_stmt(&a),\n             NodeTy(a)          => self.print_type(&a),\n             NodeTraitRef(a)    => self.print_trait_ref(&a),\n-            NodeLocal(a)       |\n+            NodeBinding(a)       |\n             NodePat(a)         => self.print_pat(&a),\n             NodeBlock(a)       => {\n                 use syntax::print::pprust::PrintState;\n@@ -1131,6 +1138,7 @@ impl<'a> print::State<'a> {\n             // hir_map to reconstruct their full structure for pretty\n             // printing.\n             NodeStructCtor(_)  => bug!(\"cannot print isolated StructCtor\"),\n+            NodeLocal(a)       => self.print_local_decl(&a),\n         }\n     }\n }\n@@ -1223,7 +1231,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeTraitRef(_)) => {\n             format!(\"trait_ref {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n-        Some(NodeLocal(_)) => {\n+        Some(NodeBinding(_)) => {\n             format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n         Some(NodePat(_)) => {\n@@ -1232,6 +1240,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeBlock(_)) => {\n             format!(\"block {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n+        Some(NodeLocal(_)) => {\n+            format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n+        }\n         Some(NodeStructCtor(_)) => {\n             format!(\"struct_ctor {}{}\", path_str(), id_str)\n         }"}, {"sha": "8cd023b8e638b87a502aa4b0e6eb4cd0e9c92f0d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -332,7 +332,7 @@ impl MutabilityCategory {\n \n     fn from_local(tcx: TyCtxt, tables: &ty::TypeckTables, id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.hir.get(id) {\n-            hir_map::NodeLocal(p) => match p.node {\n+            hir_map::NodeBinding(p) => match p.node {\n                 PatKind::Binding(..) => {\n                     let bm = *tables.pat_binding_modes()\n                                     .get(p.hir_id)"}, {"sha": "7e402075fcfea309e5ce8c6f12d722b8afb50714", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -1971,7 +1971,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn local_var_name_str(self, id: NodeId) -> InternedString {\n         match self.hir.find(id) {\n-            Some(hir_map::NodeLocal(pat)) => {\n+            Some(hir_map::NodeBinding(pat)) => {\n                 match pat.node {\n                     hir::PatKind::Binding(_, _, ref path1, _) => path1.node.as_str(),\n                     _ => {"}, {"sha": "7878762788905e4d055fe1f212fdefda3fde5a85", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -68,19 +68,7 @@ fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &Pat) -> Patte\n                     });\n             PatternSource::MatchExpr(e)\n         }\n-        NodeStmt(ref s) => {\n-            // the enclosing statement must be a `let` or something else\n-            match s.node {\n-                StmtDecl(ref decl, _) => {\n-                    match decl.node {\n-                        DeclLocal(ref local) => PatternSource::LetDecl(local),\n-                        _ => return PatternSource::Other,\n-                    }\n-                }\n-                _ => return PatternSource::Other,\n-            }\n-        }\n-\n+        NodeLocal(local) => PatternSource::LetDecl(local),\n         _ => return PatternSource::Other,\n \n     }"}, {"sha": "38336655f217af46383ffbff0a26472f961cf9e3", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -903,7 +903,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n     fn local_binding_mode(&self, node_id: ast::NodeId) -> ty::BindingMode {\n         let pat = match self.tcx.hir.get(node_id) {\n-            hir_map::Node::NodeLocal(pat) => pat,\n+            hir_map::Node::NodeBinding(pat) => pat,\n             node => bug!(\"bad node for local: {:?}\", node)\n         };\n "}, {"sha": "d7a295a1c3a2432df346a2b1d1acd7829fdec24f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -382,7 +382,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 debug_name: keywords::Invalid.name(),\n                 by_ref,\n             };\n-            if let Some(hir::map::NodeLocal(pat)) = tcx.hir.find(var_node_id) {\n+            if let Some(hir::map::NodeBinding(pat)) = tcx.hir.find(var_node_id) {\n                 if let hir::PatKind::Binding(_, _, ref ident, _) = pat.node {\n                     decl.debug_name = ident.node;\n                 }"}, {"sha": "bc9d760d148952c07872be7c172683f8c7bfe350", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -589,7 +589,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 self.tables.qpath_def(qpath, hir_id)\n             }\n \n-            Node::NodeLocal(&hir::Pat { node: hir::PatKind::Binding(_, def_id, ..), .. }) => {\n+            Node::NodeBinding(&hir::Pat { node: hir::PatKind::Binding(_, def_id, ..), .. }) => {\n                 HirDef::Local(def_id)\n             }\n "}, {"sha": "d61ce7f4689bb16a5a4a20c4cd47c1c59e1b0e22", "filename": "src/test/run-pass/issue-43910.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Ftest%2Frun-pass%2Fissue-43910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be2f8697e869e75b0b341b0c1eecef694ee5b9/src%2Ftest%2Frun-pass%2Fissue-43910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43910.rs?ref=80be2f8697e869e75b0b341b0c1eecef694ee5b9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused_variables)]\n+\n+fn main() {\n+    #[allow(unused_variables)]\n+    let x = 12;\n+}"}]}