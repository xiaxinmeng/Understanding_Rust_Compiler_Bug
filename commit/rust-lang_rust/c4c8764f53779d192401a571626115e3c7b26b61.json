{"sha": "c4c8764f53779d192401a571626115e3c7b26b61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Yzg3NjRmNTM3NzlkMTkyNDAxYTU3MTYyNjExNWUzYzdiMjZiNjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-04T15:38:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-04T15:38:04Z"}, "message": "generate a drop method pointer in the vtable and process it", "tree": {"sha": "cc51a83b4016ea2dbfc374ec85ad801033c41623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc51a83b4016ea2dbfc374ec85ad801033c41623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c8764f53779d192401a571626115e3c7b26b61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYHKtcAAoJEFbW7qD8Z6xGTToQAKPJRhdyZZWGbwfAFx5mrBaB\nqXQoddOVVNokyeCw4t9ZnaETbBNJZwrfZp5uAyBSfGLdEwCxWix54B007gBkyMrh\n4jRnz6qoCsDJvqafuinBjOFWCyRiRmEVYt75l3a1bs0MkNV/G4v2dUCxRwUXjx1Z\ngsXlAK9qsQZbbRCpOdC3+wCAg4v2t5P9n7DFG/FZiNfrgrJPl7xfXKM+wa4o9AEz\ns3pBFfMZm7OLWY4iI6WGwUwrcG52c6+W9aYn2iWxMdDWjnicDg1Z/QJ1ouQO3M7C\nngFeYZqIrwiWpzTxbEDWfaY49SLak6tCmeaz7k+RiOrsKb3aGkYK5GJy59Djo/JW\nMLKUsENXlhJ8hLRGgHSRNChK0o3infJezVk4Poxd7VdVrEdCYGmA2iAwogCnFdBM\nvDJ1XgJF+HjglnyT6a5cKxhatFzo4ep1ZSYyfswDd8QizReKsYtsGyw+hqz/EnWx\nbY1kckvGlFmDLT+IeBP+oZjYNoLeRkNjpUUfZmW2sRYqm9P+6vDThpquwM9b5UBS\nh1xOA05uY1TejTI5BfrPm5MFVQXysG+By2OSRN5YfEwmtt4mbXBOdhqDsoO7Dn0Z\nb2m4/lXmpEDDAuNI9+zq1NbXSldMGWbCJSn5aVuLBhSffNaDMG72TNZI8xLWVrub\ni63VYJ/snRWPoSDbxHH0\n=vb8Y\n-----END PGP SIGNATURE-----", "payload": "tree cc51a83b4016ea2dbfc374ec85ad801033c41623\nparent bd6e52d831769ccf86d1bbd66444f13c800cac7e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478273884 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478273884 +0100\n\ngenerate a drop method pointer in the vtable and process it"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c8764f53779d192401a571626115e3c7b26b61", "html_url": "https://github.com/rust-lang/rust/commit/c4c8764f53779d192401a571626115e3c7b26b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c8764f53779d192401a571626115e3c7b26b61/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6e52d831769ccf86d1bbd66444f13c800cac7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6e52d831769ccf86d1bbd66444f13c800cac7e", "html_url": "https://github.com/rust-lang/rust/commit/bd6e52d831769ccf86d1bbd66444f13c800cac7e"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "bbf3fab93aec407550716198dcf7c1a7b384fa7b", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4c8764f53779d192401a571626115e3c7b26b61/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c8764f53779d192401a571626115e3c7b26b61/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=c4c8764f53779d192401a571626115e3c7b26b61", "patch": "@@ -628,6 +628,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n                 self.drop_fields(fields.iter().cloned().zip(offsets.iter().cloned()), lval, drop)?;\n             },\n+            ty::TyTrait(_) => {\n+                let lval = self.force_allocation(lval)?;\n+                let (ptr, vtable) = match lval {\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => (ptr, vtable),\n+                    _ => bug!(\"expected an lvalue with a vtable\"),\n+                };\n+                let drop_fn = self.memory.read_ptr(vtable)?;\n+                // some values don't need to call a drop impl, so the value is null\n+                if !drop_fn.points_to_zst() {\n+                    let (def_id, substs, ty) = self.memory.get_fn(drop_fn.alloc_id)?;\n+                    let fn_sig = self.tcx.erase_late_bound_regions_and_normalize(&ty.sig);\n+                    let real_ty = fn_sig.inputs[0];\n+                    self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n+                    drop.push((def_id, Value::ByVal(PrimVal::from_ptr(ptr)), substs));\n+                } else {\n+                    // just a sanity check\n+                    assert_eq!(drop_fn.offset, 0);\n+                }\n+            }\n             // other types do not need to process drop\n             _ => {},\n         }"}, {"sha": "17f2c6b7020ce43e7aebe2758973d282dffa23de", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4c8764f53779d192401a571626115e3c7b26b61/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c8764f53779d192401a571626115e3c7b26b61/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=c4c8764f53779d192401a571626115e3c7b26b61", "patch": "@@ -84,8 +84,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let ptr_size = self.memory.pointer_size();\n         let vtable = self.memory.allocate(ptr_size * (3 + methods.len()), ptr_size)?;\n \n-        // FIXME: generate a destructor for the vtable.\n-        // trans does this with glue::get_drop_glue(ccx, trait_ref.self_ty())\n+        // in case there is no drop function to be called, this still needs to be initialized\n+        self.memory.write_usize(vtable, 0)?;\n+        if let ty::TyAdt(adt_def, substs) = trait_ref.self_ty().sty {\n+            if let Some(drop_def_id) = adt_def.destructor() {\n+                let ty_scheme = self.tcx.lookup_item_type(drop_def_id);\n+                let fn_ty = match ty_scheme.ty.sty {\n+                    ty::TyFnDef(_, _, fn_ty) => fn_ty,\n+                    _ => bug!(\"drop method is not a TyFnDef\"),\n+                };\n+                let fn_ptr = self.memory.create_fn_ptr(drop_def_id, substs, fn_ty);\n+                self.memory.write_ptr(vtable, fn_ptr)?;\n+            }\n+        }\n \n         self.memory.write_usize(vtable.offset(ptr_size as isize), size as u64)?;\n         self.memory.write_usize(vtable.offset((ptr_size * 2) as isize), align as u64)?;"}, {"sha": "9b6acf0b14746567e2d8aca45c6ae07a4720ec97", "filename": "tests/run-pass/call_drop_through_trait_object.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4c8764f53779d192401a571626115e3c7b26b61/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c8764f53779d192401a571626115e3c7b26b61/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs?ref=c4c8764f53779d192401a571626115e3c7b26b61", "patch": "@@ -0,0 +1,20 @@\n+trait Foo {}\n+\n+struct Bar;\n+\n+static mut DROP_CALLED: bool = false;\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {\n+        unsafe { DROP_CALLED = true; }\n+    }\n+}\n+\n+impl Foo for Bar {}\n+\n+fn main() {\n+    let b: Box<Foo> = Box::new(Bar);\n+    assert!(unsafe { !DROP_CALLED });\n+    drop(b);\n+    assert!(unsafe { DROP_CALLED });\n+}"}]}