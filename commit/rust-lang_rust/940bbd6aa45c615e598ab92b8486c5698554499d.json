{"sha": "940bbd6aa45c615e598ab92b8486c5698554499d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MGJiZDZhYTQ1YzYxNWU1OThhYjkyYjg0ODZjNTY5ODU1NDQ5OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T16:55:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T16:55:47Z"}, "message": "Auto merge of #5437 - rabisg0:should-impl-trait, r=flip1995\n\nCheck fn header along with decl when suggesting to implement trait\n\nWhen checking for functions that are potential candidates for trait\nimplementations check the function header to make sure modifiers like\nasyncness, constness and safety match before triggering the lint.\n\nFixes #5413, #4290\n\nchangelog: check fn header along with decl for should_implement_trait", "tree": {"sha": "456ced553da1e8eae1ebc6bbba2705ba66b401aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456ced553da1e8eae1ebc6bbba2705ba66b401aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/940bbd6aa45c615e598ab92b8486c5698554499d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/940bbd6aa45c615e598ab92b8486c5698554499d", "html_url": "https://github.com/rust-lang/rust/commit/940bbd6aa45c615e598ab92b8486c5698554499d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/940bbd6aa45c615e598ab92b8486c5698554499d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfdee56afb63a124dde58002490b4b4347d5fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfdee56afb63a124dde58002490b4b4347d5fea", "html_url": "https://github.com/rust-lang/rust/commit/7bfdee56afb63a124dde58002490b4b4347d5fea"}, {"sha": "c2e55341578ae7b8da9a91eb7ae02f805d5b992e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e55341578ae7b8da9a91eb7ae02f805d5b992e", "html_url": "https://github.com/rust-lang/rust/commit/c2e55341578ae7b8da9a91eb7ae02f805d5b992e"}], "stats": {"total": 125, "additions": 77, "deletions": 48}, "files": [{"sha": "c539e0360fb274be73367d50c723b08e6cbd7319", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 49, "deletions": 35, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/940bbd6aa45c615e598ab92b8486c5698554499d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940bbd6aa45c615e598ab92b8486c5698554499d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=940bbd6aa45c615e598ab92b8486c5698554499d", "patch": "@@ -1453,11 +1453,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             then {\n                 if cx.access_levels.is_exported(impl_item.hir_id) {\n                 // check missing trait implementations\n-                    for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n+                    for &(method_name, n_args, fn_header, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&\n-                        sig.decl.inputs.len() == n_args &&\n-                        out_type.matches(cx, &sig.decl.output) &&\n-                        self_kind.matches(cx, self_ty, first_arg_ty) {\n+                            sig.decl.inputs.len() == n_args &&\n+                            out_type.matches(cx, &sig.decl.output) &&\n+                            self_kind.matches(cx, self_ty, first_arg_ty) &&\n+                            fn_header_equals(*fn_header, sig.header) {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, impl_item.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -3352,38 +3353,45 @@ const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n     (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n ];\n \n+const FN_HEADER: hir::FnHeader = hir::FnHeader {\n+    unsafety: hir::Unsafety::Normal,\n+    constness: hir::Constness::NotConst,\n+    asyncness: hir::IsAsync::NotAsync,\n+    abi: rustc_target::spec::abi::Abi::Rust,\n+};\n+\n #[rustfmt::skip]\n-const TRAIT_METHODS: [(&str, usize, SelfKind, OutType, &str); 30] = [\n-    (\"add\", 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n-    (\"as_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n-    (\"as_ref\", 1, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n-    (\"bitand\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n-    (\"bitor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n-    (\"bitxor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n-    (\"borrow\", 1, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n-    (\"borrow_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n-    (\"clone\", 1, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n-    (\"cmp\", 2, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n-    (\"default\", 0, SelfKind::No, OutType::Any, \"std::default::Default\"),\n-    (\"deref\", 1, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n-    (\"deref_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n-    (\"div\", 2, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n-    (\"drop\", 1, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n-    (\"eq\", 2, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n-    (\"from_iter\", 1, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n-    (\"from_str\", 1, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n-    (\"hash\", 2, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n-    (\"index\", 2, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n-    (\"index_mut\", 2, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n-    (\"into_iter\", 1, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n-    (\"mul\", 2, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n-    (\"neg\", 1, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n-    (\"next\", 1, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n-    (\"not\", 1, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n-    (\"rem\", 2, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n-    (\"shl\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n-    (\"shr\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n-    (\"sub\", 2, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n+const TRAIT_METHODS: [(&str, usize, &hir::FnHeader, SelfKind, OutType, &str); 30] = [\n+    (\"add\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n+    (\"as_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n+    (\"as_ref\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n+    (\"bitand\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n+    (\"bitor\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n+    (\"bitxor\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n+    (\"borrow\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n+    (\"borrow_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n+    (\"clone\", 1, &FN_HEADER, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n+    (\"cmp\", 2, &FN_HEADER, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n+    (\"default\", 0, &FN_HEADER, SelfKind::No, OutType::Any, \"std::default::Default\"),\n+    (\"deref\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n+    (\"deref_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n+    (\"div\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n+    (\"drop\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n+    (\"eq\", 2, &FN_HEADER, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n+    (\"from_iter\", 1, &FN_HEADER, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n+    (\"from_str\", 1, &FN_HEADER, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n+    (\"hash\", 2, &FN_HEADER, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n+    (\"index\", 2, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n+    (\"index_mut\", 2, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n+    (\"into_iter\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n+    (\"mul\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n+    (\"neg\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n+    (\"next\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n+    (\"not\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n+    (\"rem\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n+    (\"shl\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n+    (\"shr\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n+    (\"sub\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n ];\n \n #[rustfmt::skip]\n@@ -3596,3 +3604,9 @@ fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &\n     let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n }\n+\n+fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n+    expected.constness == actual.constness\n+        && expected.unsafety == actual.unsafety\n+        && expected.asyncness == actual.asyncness\n+}"}, {"sha": "7880cf36415ff87acc8ba620ceb7712ec8038e35", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/940bbd6aa45c615e598ab92b8486c5698554499d/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940bbd6aa45c615e598ab92b8486c5698554499d/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=940bbd6aa45c615e598ab92b8486c5698554499d", "patch": "@@ -6,6 +6,7 @@\n     clippy::blacklisted_name,\n     clippy::default_trait_access,\n     clippy::missing_docs_in_private_items,\n+    clippy::missing_safety_doc,\n     clippy::non_ascii_literal,\n     clippy::new_without_default,\n     clippy::needless_pass_by_value,\n@@ -83,6 +84,20 @@ impl T {\n     }\n }\n \n+pub struct T1;\n+\n+impl T1 {\n+    // Shouldn't trigger lint as it is unsafe.\n+    pub unsafe fn add(self, rhs: T1) -> T1 {\n+        self\n+    }\n+\n+    // Should not trigger lint since this is an async function.\n+    pub async fn next(&mut self) -> Option<T1> {\n+        None\n+    }\n+}\n+\n struct Lt<'a> {\n     foo: &'a u32,\n }"}, {"sha": "01cf487ac148e77f519563bac11d9a1da659e858", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/940bbd6aa45c615e598ab92b8486c5698554499d/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/940bbd6aa45c615e598ab92b8486c5698554499d/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=940bbd6aa45c615e598ab92b8486c5698554499d", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:38:5\n+  --> $DIR/methods.rs:39:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:154:5\n+  --> $DIR/methods.rs:169:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -19,7 +19,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:173:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -38,33 +38,33 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:193:22\n+  --> $DIR/methods.rs:208:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:194:20\n+  --> $DIR/methods.rs:209:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:195:20\n+  --> $DIR/methods.rs:210:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:196:22\n+  --> $DIR/methods.rs:211:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:199:13\n+  --> $DIR/methods.rs:214:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -74,13 +74,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:205:22\n+  --> $DIR/methods.rs:220:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:208:13\n+  --> $DIR/methods.rs:223:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -90,13 +90,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:214:22\n+  --> $DIR/methods.rs:229:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:217:13\n+  --> $DIR/methods.rs:232:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^"}]}