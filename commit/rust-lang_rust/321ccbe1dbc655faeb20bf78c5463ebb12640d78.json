{"sha": "321ccbe1dbc655faeb20bf78c5463ebb12640d78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMWNjYmUxZGJjNjU1ZmFlYjIwYmY3OGM1NDYzZWJiMTI2NDBkNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T12:51:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T12:51:07Z"}, "message": "Auto merge of #65208 - michaelwoerister:sp-events-review-2, r=wesleywiser\n\nself-profiling: Add events for everything except trait selection.\n\nThis is the followup PR to https://github.com/rust-lang/rust/pull/64840.\n\nTrait selection events are still missing (at least those not covered by regular queries).\n\nr? @wesleywiser (or @Mark-Simulacrum if @wesleywiser is not available at the moment)", "tree": {"sha": "bfe8b44f7b3f619cca2623f4ee8383df8f5fc1f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe8b44f7b3f619cca2623f4ee8383df8f5fc1f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/321ccbe1dbc655faeb20bf78c5463ebb12640d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/321ccbe1dbc655faeb20bf78c5463ebb12640d78", "html_url": "https://github.com/rust-lang/rust/commit/321ccbe1dbc655faeb20bf78c5463ebb12640d78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/321ccbe1dbc655faeb20bf78c5463ebb12640d78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59dab52d48f628ae169033da80b169e5b6f39d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59dab52d48f628ae169033da80b169e5b6f39d6", "html_url": "https://github.com/rust-lang/rust/commit/e59dab52d48f628ae169033da80b169e5b6f39d6"}, {"sha": "ceb1a9cfe314b9729a7d8e29e5bd6e5f5798bb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb1a9cfe314b9729a7d8e29e5bd6e5f5798bb0c", "html_url": "https://github.com/rust-lang/rust/commit/ceb1a9cfe314b9729a7d8e29e5bd6e5f5798bb0c"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "8f18e0312862fc70012c8dcf92204ce7ffffdfc8", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -845,6 +845,8 @@ impl DepGraph {\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n     pub fn exec_cache_promotions(&self, tcx: TyCtxt<'_>) {\n+        let _prof_timer = tcx.prof.generic_activity(\"incr_comp_query_cache_promotion\");\n+\n         let data = self.data.as_ref().unwrap();\n         for prev_index in data.colors.values.indices() {\n             match data.colors.get(prev_index) {"}, {"sha": "72fd054ee8a206e2abf7611d1def7371b34a0376", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -242,6 +242,8 @@ pub fn lower_crate(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n+    let _prof_timer = sess.prof.generic_activity(\"hir_lowering\");\n+\n     LoweringContext {\n         crate_root: sess.parse_sess.injected_crate_name.try_get().copied(),\n         sess,"}, {"sha": "16c4ab7187de4c239a87c0923945827258a9581a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -1222,6 +1222,8 @@ pub fn map_crate<'hir>(sess: &crate::session::Session,\n                        forest: &'hir Forest,\n                        definitions: &'hir Definitions)\n                        -> Map<'hir> {\n+    let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");\n+\n     // Build the reverse mapping of `node_to_hir_id`.\n     let hir_to_node_id = definitions.node_to_hir_id.iter_enumerated()\n         .map(|(node_id, &hir_id)| (hir_id, node_id)).collect();"}, {"sha": "673da52c3250e62f0f27552a00952688f43f68a3", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -101,6 +101,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     // before we fire the background thread.\n \n     let time_passes = sess.time_passes();\n+    let prof = sess.prof.clone();\n \n     if sess.opts.incremental.is_none() {\n         // No incremental compilation.\n@@ -161,6 +162,8 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n     MaybeAsync::Async(std::thread::spawn(move || {\n         time_ext(time_passes, \"background load prev dep-graph\", move || {\n+            let _prof_timer = prof.generic_activity(\"incr_comp_load_dep_graph\");\n+\n             match load_data(report_incremental_info, &path) {\n                 LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n                 LoadResult::Error { message } => LoadResult::Error { message },\n@@ -198,6 +201,8 @@ pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n         return OnDiskCache::new_empty(sess.source_map());\n     }\n \n+    let _prof_timer = sess.prof.generic_activity(\"incr_comp_load_query_result_cache\");\n+\n     match load_data(sess.opts.debugging_opts.incremental_info, &query_cache_path(sess)) {\n         LoadResult::Ok{ data: (bytes, start_pos) } => OnDiskCache::new(sess, bytes, start_pos),\n         _ => OnDiskCache::new_empty(sess.source_map())"}, {"sha": "f5935c9969baa04b367cb654e4d1b2b524c5a63f", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -241,6 +241,8 @@ fn encode_work_product_index(work_products: &FxHashMap<WorkProductId, WorkProduc\n \n fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n     time(tcx.sess, \"serialize query result cache\", || {\n+        let _timer = tcx.prof.generic_activity(\"incr_comp_serialize_result_cache\");\n+\n         tcx.serialize_query_result_cache(encoder).unwrap();\n     })\n }"}, {"sha": "a1dc5b01aba8ce2021c75927536f4214b8bb04da", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -250,6 +250,8 @@ pub fn register_plugins<'a>(\n \n     if sess.opts.incremental.is_some() {\n         time(sess, \"garbage-collect incremental cache directory\", || {\n+            let _prof_timer =\n+                sess.prof.generic_activity(\"incr_comp_garbage_collect_session_directories\");\n             if let Err(e) = rustc_incremental::garbage_collect_session_directories(sess) {\n                 warn!(\n                     \"Error while trying to garbage collect incremental \\"}, {"sha": "3f0a2674305d49407fb0da04cbba6b4d75fe3658", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -285,7 +285,11 @@ pub fn collect_crate_mono_items(\n     tcx: TyCtxt<'_>,\n     mode: MonoItemCollectionMode,\n ) -> (FxHashSet<MonoItem<'_>>, InliningMap<'_>) {\n+    let _prof_timer = tcx.prof.generic_activity(\"monomorphization_collector\");\n+\n     let roots = time(tcx.sess, \"collecting roots\", || {\n+        let _prof_timer = tcx.prof\n+            .generic_activity(\"monomorphization_collector_root_collections\");\n         collect_roots(tcx, mode)\n     });\n \n@@ -295,6 +299,9 @@ pub fn collect_crate_mono_items(\n     let mut inlining_map = MTLock::new(InliningMap::new());\n \n     {\n+        let _prof_timer = tcx.prof\n+            .generic_activity(\"monomorphization_collector_graph_walk\");\n+\n         let visited: MTRef<'_, _> = &mut visited;\n         let inlining_map: MTRef<'_, _> = &mut inlining_map;\n "}, {"sha": "6d9dae7214cc2a77581817ee3b84ad66b4ebe1e5", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -134,10 +134,15 @@ pub fn partition<'tcx, I>(\n where\n     I: Iterator<Item = MonoItem<'tcx>>,\n {\n+    let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning\");\n+\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n-    let mut initial_partitioning = place_root_mono_items(tcx, mono_items);\n+    let mut initial_partitioning = {\n+        let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n+        place_root_mono_items(tcx, mono_items)\n+    };\n \n     initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n@@ -146,17 +151,20 @@ where\n     // If the partitioning should produce a fixed count of codegen units, merge\n     // until that count is reached.\n     if let PartitioningStrategy::FixedUnitCount(count) = strategy {\n+        let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_merge_cgus\");\n         merge_codegen_units(tcx, &mut initial_partitioning, count);\n-\n         debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n     }\n \n     // In the next step, we use the inlining map to determine which additional\n     // monomorphizations have to go into each codegen unit. These additional\n     // monomorphizations can be drop-glue, functions from external crates, and\n     // local functions the definition of which is marked with `#[inline]`.\n-    let mut post_inlining = place_inlined_mono_items(initial_partitioning,\n-                                                            inlining_map);\n+    let mut post_inlining = {\n+        let _prof_timer =\n+            tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n+        place_inlined_mono_items(initial_partitioning, inlining_map)\n+    };\n \n     post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n@@ -165,6 +173,8 @@ where\n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n     if !tcx.sess.opts.cg.link_dead_code {\n+        let _prof_timer =\n+            tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         internalize_symbols(tcx, &mut post_inlining, inlining_map);\n     }\n "}, {"sha": "9211ee5f1453464be42a55e68e9f6b52015cc283", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321ccbe1dbc655faeb20bf78c5463ebb12640d78/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=321ccbe1dbc655faeb20bf78c5463ebb12640d78", "patch": "@@ -1255,6 +1255,9 @@ impl<'a> Resolver<'a> {\n \n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n+        let _prof_timer =\n+            self.session.prof.generic_activity(\"resolve_crate\");\n+\n         ImportResolver { r: self }.finalize_imports();\n         self.finalize_macro_resolutions();\n "}]}