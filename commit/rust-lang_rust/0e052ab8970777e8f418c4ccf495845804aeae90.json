{"sha": "0e052ab8970777e8f418c4ccf495845804aeae90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDUyYWI4OTcwNzc3ZThmNDE4YzRjY2Y0OTU4NDU4MDRhZWFlOTA=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-29T22:12:09Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-29T22:12:09Z"}, "message": "Use Entry API in set_dtors_running.", "tree": {"sha": "7371ff8a8d842a644ef026e6c62de8c6edc3efad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7371ff8a8d842a644ef026e6c62de8c6edc3efad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e052ab8970777e8f418c4ccf495845804aeae90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e052ab8970777e8f418c4ccf495845804aeae90", "html_url": "https://github.com/rust-lang/rust/commit/0e052ab8970777e8f418c4ccf495845804aeae90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e052ab8970777e8f418c4ccf495845804aeae90/comments", "author": null, "committer": null, "parents": [{"sha": "46b03174d02c06fe062747e732733a39a1971817", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b03174d02c06fe062747e732733a39a1971817", "html_url": "https://github.com/rust-lang/rust/commit/46b03174d02c06fe062747e732733a39a1971817"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "57b041e685f7ff5714810fd274861727f1296eb6", "filename": "src/shims/tls.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e052ab8970777e8f418c4ccf495845804aeae90/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e052ab8970777e8f418c4ccf495845804aeae90/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=0e052ab8970777e8f418c4ccf495845804aeae90", "patch": "@@ -1,7 +1,8 @@\n //! Implement thread-local storage.\n \n use std::collections::BTreeMap;\n-use std::collections::btree_map::Entry;\n+use std::collections::btree_map::Entry as BTreeEntry;\n+use std::collections::hash_map::Entry as HashMapEntry;\n \n use log::trace;\n \n@@ -186,15 +187,15 @@ impl<'tcx> TlsData<'tcx> {\n             thread_local.range_mut((start, Unbounded))\n         {\n             match data.entry(thread_id) {\n-                Entry::Occupied(entry) => {\n+                BTreeEntry::Occupied(entry) => {\n                     if let Some(dtor) = dtor {\n                         // Set TLS data to NULL, and call dtor with old value.\n                         let data_scalar = entry.remove();\n                         let ret = Some((*dtor, data_scalar, key));\n                         return ret;\n                     }\n                 }\n-                Entry::Vacant(_) => {}\n+                BTreeEntry::Vacant(_) => {}\n             }\n         }\n         None\n@@ -204,16 +205,14 @@ impl<'tcx> TlsData<'tcx> {\n     /// the existing values stored in `dtors_running` for this thread. Returns\n     /// `true` if dtors for `thread` are already running.\n     fn set_dtors_running_for_thread(&mut self, thread: ThreadId) -> bool {\n-        if self.dtors_running.contains_key(&thread) {\n-            true\n-        } else {\n-            // We need to guard this `insert` with a check because otherwise we\n-            // would risk to overwrite `last_dtor_key` with `None`.\n-            self.dtors_running.insert(\n-                thread,\n-                RunningDtorsState { last_dtor_key: None }\n-            );\n-            false\n+        match self.dtors_running.entry(thread) {\n+            HashMapEntry::Occupied(_) => true,\n+            HashMapEntry::Vacant(entry) => {\n+                // We cannot just do `self.dtors_running.insert` because that\n+                // would overwrite `last_dtor_key` with `None`.\n+                entry.insert(RunningDtorsState { last_dtor_key: None });\n+                false\n+            }\n         }\n     }\n "}]}