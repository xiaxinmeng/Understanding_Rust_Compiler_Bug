{"sha": "65702bfd6bfb8616e182ddd19d0520ce7e35314a", "node_id": "C_kwDOAAsO6NoAKDY1NzAyYmZkNmJmYjg2MTZlMTgyZGRkMTlkMDUyMGNlN2UzNTMxNGE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-05T13:10:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T13:10:35Z"}, "message": "Rollup merge of #110876 - mj10021:issue-110647-fix, r=b-naber\n\nAdded default target cpu to `--print target-cpus` output and updated docs\n\nAdded default target cpu info as requested in issue #110647 and noted the new output in the documentation", "tree": {"sha": "d7ddb2a50d8369bb147b7b35763cb611039b2b79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ddb2a50d8369bb147b7b35763cb611039b2b79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65702bfd6bfb8616e182ddd19d0520ce7e35314a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVQBLCRBK7hj4Ov3rIwAAvCYIAJNAz65gIUlwoqG4o6475DrG\nFUTYMc3V1YLu3SBBee3DmOnMcqf+DNRhx0NgXS+pRZyQ1xh+9BSUb+/9ho4TmEvU\nV5Iv09t8PsWbBCWDspxpeQtyv/hwOM47r+jzQL90oqNueE7BipGCE7RsS8243T00\n7ULoA6ToEfKfWP1NLdc+uIfaaHr00d/4Y+Sq4IXbJfM1iKHZOipBgloVn04mVYf3\nlAkMAsUfaMK3muRhXhFVd16Ir5AbillCdHd+oKZJa776ufPMn0iqZtu/FbYAddIr\nxkfwFISvR+WsfaWljXQk3ebvZh1I6HXj2vUNVkijwIAGsvCKpUHhtrM784E4mXM=\n=3qbo\n-----END PGP SIGNATURE-----\n", "payload": "tree d7ddb2a50d8369bb147b7b35763cb611039b2b79\nparent de7e29e5935e35c2ec88d1b87253a128543402e0\nparent f239cd6a35776cbc91400a9e498d8b7487fe4975\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683292235 +0530\ncommitter GitHub <noreply@github.com> 1683292235 +0530\n\nRollup merge of #110876 - mj10021:issue-110647-fix, r=b-naber\n\nAdded default target cpu to `--print target-cpus` output and updated docs\n\nAdded default target cpu info as requested in issue #110647 and noted the new output in the documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65702bfd6bfb8616e182ddd19d0520ce7e35314a", "html_url": "https://github.com/rust-lang/rust/commit/65702bfd6bfb8616e182ddd19d0520ce7e35314a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65702bfd6bfb8616e182ddd19d0520ce7e35314a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7e29e5935e35c2ec88d1b87253a128543402e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7e29e5935e35c2ec88d1b87253a128543402e0", "html_url": "https://github.com/rust-lang/rust/commit/de7e29e5935e35c2ec88d1b87253a128543402e0"}, {"sha": "f239cd6a35776cbc91400a9e498d8b7487fe4975", "url": "https://api.github.com/repos/rust-lang/rust/commits/f239cd6a35776cbc91400a9e498d8b7487fe4975", "html_url": "https://github.com/rust-lang/rust/commit/f239cd6a35776cbc91400a9e498d8b7487fe4975"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "53d97f352010637c0b06710eb9fd6c113a530a9f", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=65702bfd6bfb8616e182ddd19d0520ce7e35314a", "patch": "@@ -2249,7 +2249,7 @@ extern \"C\" {\n \n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n-    pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n+    pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine, cpu: *const c_char);\n     pub fn LLVMRustGetTargetFeaturesCount(T: &TargetMachine) -> size_t;\n     pub fn LLVMRustGetTargetFeature(\n         T: &TargetMachine,"}, {"sha": "2fbdab9f8ce03af6e514205d5651a0f76dd9b55a", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=65702bfd6bfb8616e182ddd19d0520ce7e35314a", "patch": "@@ -329,7 +329,14 @@ pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n     let tm = create_informational_target_machine(sess);\n     match req {\n-        PrintRequest::TargetCPUs => unsafe { llvm::LLVMRustPrintTargetCPUs(tm) },\n+        PrintRequest::TargetCPUs => {\n+            // SAFETY generate a C compatible string from a byte slice to pass\n+            // the target CPU name into LLVM, the lifetime of the reference is\n+            // at least as long as the C function\n+            let cpu_cstring = CString::new(handle_native(sess.target.cpu.as_ref()))\n+                .unwrap_or_else(|e| bug!(\"failed to convert to cstring: {}\", e));\n+            unsafe { llvm::LLVMRustPrintTargetCPUs(tm, cpu_cstring.as_ptr()) };\n+        }\n         PrintRequest::TargetFeatures => print_target_features(sess, tm),\n         _ => bug!(\"rustc_codegen_llvm can't handle print request: {:?}\", req),\n     }"}, {"sha": "e88a3cdf620d1a9e9ebdd64d401781de5c713e8d", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65702bfd6bfb8616e182ddd19d0520ce7e35314a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=65702bfd6bfb8616e182ddd19d0520ce7e35314a", "patch": "@@ -307,7 +307,7 @@ static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n   return MaxLen;\n }\n \n-extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n+extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, const char* TargetCPU) {\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const Triple::ArchType HostArch = Triple(sys::getDefaultTargetTriple()).getArch();\n@@ -323,9 +323,18 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n     printf(\"    %-*s - Select the CPU of the current host (currently %.*s).\\n\",\n       MaxCPULen, \"native\", (int)HostCPU.size(), HostCPU.data());\n   }\n-  for (auto &CPU : CPUTable)\n-    printf(\"    %-*s\\n\", MaxCPULen, CPU.Key);\n-  printf(\"\\n\");\n+  for (auto &CPU : CPUTable) {\n+    // Compare cpu against current target to label the default\n+    if (strcmp(CPU.Key, TargetCPU) == 0) {\n+      printf(\"    %-*s - This is the default target CPU\"\n+      \" for the current build target (currently %s).\",\n+        MaxCPULen, CPU.Key, Target->getTargetTriple().str().c_str());\n+    }\n+    else {\n+      printf(\"    %-*s\", MaxCPULen, CPU.Key);\n+    }\n+    printf(\"\\n\");\n+  }\n }\n \n extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef TM) {"}, {"sha": "e2b859e705df01e1fcbfa8b25f49717ff2ed9013", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65702bfd6bfb8616e182ddd19d0520ce7e35314a/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/65702bfd6bfb8616e182ddd19d0520ce7e35314a/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=65702bfd6bfb8616e182ddd19d0520ce7e35314a", "patch": "@@ -574,7 +574,8 @@ change in the future.\n This instructs `rustc` to generate code specifically for a particular processor.\n \n You can run `rustc --print target-cpus` to see the valid options to pass\n-here. Each target has a default base CPU. Special values include:\n+and the default target CPU for the current buid target.\n+Each target has a default base CPU. Special values include:\n \n * `native` can be passed to use the processor of the host machine.\n * `generic` refers to an LLVM target with minimal features but modern tuning."}]}