{"sha": "0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjJiMWJiN2E0OWJmNTI3NzgwY2UxZjhjYWRlNWViNGZiZmRiMmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T19:45:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T19:45:52Z"}, "message": "fix the docs", "tree": {"sha": "2bc001c8ecf58b49ac9a0da1f20d5644ce29fb3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc001c8ecf58b49ac9a0da1f20d5644ce29fb3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "html_url": "https://github.com/rust-lang/rust/commit/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b573deb20b15451788dd2861e9fc6e69ed0472e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b573deb20b15451788dd2861e9fc6e69ed0472e", "html_url": "https://github.com/rust-lang/rust/commit/5b573deb20b15451788dd2861e9fc6e69ed0472e"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "9c404f4c3ddb669851e5bdb3be92e0bd93d88365", "filename": "ARCHITECTURE.md", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/ARCHITECTURE.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/ARCHITECTURE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ARCHITECTURE.md?ref=0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "patch": "@@ -15,7 +15,7 @@ More specifically, input data consists of a set of test files (`(PathBuf,\n String)` pairs) and an information about project structure, the so called\n `CrateGraph`. Crate graph specifies which files are crate roots, which cfg flags\n are specified for each crate (TODO: actually implement this) and what are\n-dependencies between the crate. The analyzer keeps all these input data in\n+dependencies between the crates. The analyzer keeps all these input data in\n memory and never does any IO. Because the input data is source code, which\n typically measures in tens of megabytes at most, keeping all input data in\n memory is OK.\n@@ -74,9 +74,9 @@ notes.\n - `algo`: generic tree algorithms, including `walk` for O(1) stack\n   space tree traversal (this is cool) and `visit` for type-driven\n   visiting the nodes (this is double plus cool, if you understand how\n-  `Visitor` works, you understand rust-analyzer).\n+  `Visitor` works, you understand the design of syntax trees).\n \n-Test for ra_syntax are mostly data-driven: `tests/data/parser` contains a bunch of `.rs`\n+Tests for ra_syntax are mostly data-driven: `tests/data/parser` contains a bunch of `.rs`\n (test vectors) and `.txt` files with corresponding syntax trees. During testing, we check\n `.rs` against `.txt`. If the `.txt` file is missing, it is created (this is how you update\n tests). Additionally, running `cargo gen-tests` will walk the grammar module and collect\n@@ -107,41 +107,46 @@ guessing a HIR for a particular source position.\n \n Underneath, HIR works on top of salsa, using a `HirDatabase` trait.\n \n-### `crates/ra_analysis`\n+### `crates/ra_ide_api`\n \n-A stateful library for analyzing many Rust files as they change.\n-`AnalysisHost` is a mutable entity (clojure's atom) which holds the\n-current state, incorporates changes and handles out `Analysis` --- an\n-immutable and consistent snapshot of world state at a point in time, which\n-actually powers analysis.\n+A stateful library for analyzing many Rust files as they change. `AnalysisHost`\n+is a mutable entity (clojure's atom) which holds the current state, incorporates\n+changes and handles out `Analysis` --- an immutable and consistent snapshot of\n+world state at a point in time, which actually powers analysis.\n \n-One interesting aspect of analysis is its support for cancellation. When a change\n-is applied to `AnalysisHost`, first all currently active snapshots are\n+One interesting aspect of analysis is its support for cancellation. When a\n+change is applied to `AnalysisHost`, first all currently active snapshots are\n cancelled. Only after all snapshots are dropped the change actually affects the\n database.\n \n-### `crates/ra_lsp_server`\n-\n-An LSP implementation which uses `ra_analysis` for managing state and\n-`ra_editor` for actually doing useful stuff.\n-\n-See [#79](https://github.com/rust-analyzer/rust-analyzer/pull/79/) as an\n-example of PR which adds a new feature to `ra_editor` and exposes it\n-to `ra_lsp_server`.\n+APIs in this crate are IDE centric: they take text offsets as input and produce\n+offsets and strings as output. This works on top of rich code model powered by\n+`hir`.\n \n-### `crates/ra_editor`\n+### `crates/ra_ide_api_light`\n \n-All IDE features which can be implemented if you only have access to a\n-single file. `ra_editor` could be used to enhance editing of Rust code\n-without the need to fiddle with build-systems, file\n-synchronization and such.\n+All IDE features which can be implemented if you only have access to a single\n+file. `ra_ide_api_light` could be used to enhance editing of Rust code without\n+the need to fiddle with build-systems, file synchronization and such.\n \n-In a sense, `ra_editor` is just a bunch of pure functions which take a\n+In a sense, `ra_ide_api_light` is just a bunch of pure functions which take a\n syntax tree as input.\n \n-The tests for `ra_editor` are `#[cfg(test)] mod tests` unit-tests spread\n+The tests for `ra_ide_api_light` are `#[cfg(test)] mod tests` unit-tests spread\n throughout its modules.\n \n+\n+### `crates/ra_lsp_server`\n+\n+An LSP implementation which wraps `ra_ide_api` into a langauge server protocol.\n+\n+### `crates/ra_vfs`\n+\n+Although `hir` and `ra_ide_api` don't do any io, we need to be able to read\n+files from disk at the end of the day. This is what `ra_vfs` does. It also\n+manages overlays: \"dirty\" files in the editor, whose \"true\" contents is\n+different from data on disk.\n+\n ### `crates/gen_lsp_server`\n \n A language server scaffold, exposing a synchronous crossbeam-channel based API."}, {"sha": "e680d9fc374b3a304e47e45fe90082e15e46a328", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "patch": "@@ -1,4 +1,4 @@\n-//! ra_db defines basic database traits. Concrete DB is defined by ra_analysis.\n+//! ra_db defines basic database traits. Concrete DB is defined by ra_ide_api.\n mod cancelation;\n mod syntax_ptr;\n mod input;"}, {"sha": "7e9ca20341ef86ddfa60bb27ad512ca85b23b13a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=0c62b1bb7a49bf527780ce1f8cade5eb4fbfdb2d", "patch": "@@ -1,8 +1,14 @@\n-//! ra_analyzer crate provides \"ide-centric\" APIs for the rust-analyzer. What\n-//! powers this API are the `RootDatabase` struct, which defines a `salsa`\n+//! ra_ide_api crate provides \"ide-centric\" APIs for the rust-analyzer. That is,\n+//! it generally operates with files and text ranges, and returns results as\n+//! Strings, suitable for displaying to the human.\n+//!\n+//! What powers this API are the `RootDatabase` struct, which defines a `salsa`\n //! database, and the `ra_hir` crate, where majority of the analysis happens.\n //! However, IDE specific bits of the analysis (most notably completion) happen\n //! in this crate.\n+//!\n+//! The sibling `ra_ide_api_light` handles thouse bits of IDE functionality\n+//! which are restricted to a single file and need only syntax.\n macro_rules! ctry {\n     ($expr:expr) => {\n         match $expr {"}]}