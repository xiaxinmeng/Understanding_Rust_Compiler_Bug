{"sha": "f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZGM1ZGNjYTM3YzNkNTU4MWRkYmI5M2M0MWI3ZGJjYmVhODkzMzE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:00:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:32Z"}, "message": "Simplify clippy author.", "tree": {"sha": "09f7bf3b6a2cf7df8f6d2b15a8eea20b68510ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f7bf3b6a2cf7df8f6d2b15a8eea20b68510ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "html_url": "https://github.com/rust-lang/rust/commit/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3137f81c136438246832680a164c725f0e2acfb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3137f81c136438246832680a164c725f0e2acfb1", "html_url": "https://github.com/rust-lang/rust/commit/3137f81c136438246832680a164c725f0e2acfb1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "3dd190ba440186c2486d6b71151102ea43df1cb5", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "patch": "@@ -2,15 +2,14 @@\n //! to generate a clippy lint detecting said code automatically.\n \n use crate::utils::get_attr;\n-use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n+use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,7 +65,7 @@ fn done() {\n \n impl<'tcx> LateLintPass<'tcx> for Author {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -75,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -84,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -93,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, var: &'tcx hir::Variant<'_>) {\n-        if !has_attr(cx.sess(), &var.attrs) {\n+        if !has_attr(cx, var.id) {\n             return;\n         }\n         prelude();\n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n-        if !has_attr(cx.sess(), &field.attrs) {\n+        if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n@@ -112,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx, expr.hir_id) {\n             return;\n         }\n         prelude();\n@@ -121,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx, arm.hir_id) {\n             return;\n         }\n         prelude();\n@@ -130,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n+        if !has_attr(cx, stmt.hir_id) {\n             return;\n         }\n         prelude();\n@@ -139,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ForeignItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -719,8 +718,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n }\n \n-fn has_attr(sess: &Session, attrs: &[Attribute]) -> bool {\n-    get_attr(sess, attrs, \"author\").count() > 0\n+fn has_attr(cx: &LateContext<'_>, hir_id: hir::HirId) -> bool {\n+    let attrs = cx.tcx.hir().attrs(hir_id);\n+    get_attr(cx.sess(), attrs, \"author\").count() > 0\n }\n \n #[must_use]"}]}