{"sha": "1b7acb6f34bb255d709fa153a49c77a570e6bbec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2FjYjZmMzRiYjI1NWQ3MDlmYTE1M2E0OWM3N2E1NzBlNmJiZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-10T14:28:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T18:55:03Z"}, "message": "centralize the caching for is-copy, is-sized, and is-freeze\n\nUse the trait-environment+type as the key. Note that these\nare only invoked on types that live for the entire compilation\n(no inference artifacts). We no longer need the various special-case\nbits and caches that were in place before.", "tree": {"sha": "06f2cb27c7e96a7feb1b931f726cd248354442c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f2cb27c7e96a7feb1b931f726cd248354442c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7acb6f34bb255d709fa153a49c77a570e6bbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7acb6f34bb255d709fa153a49c77a570e6bbec", "html_url": "https://github.com/rust-lang/rust/commit/1b7acb6f34bb255d709fa153a49c77a570e6bbec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7acb6f34bb255d709fa153a49c77a570e6bbec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81734e0e06d24cf580dd5352c64d10110e4d3b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/81734e0e06d24cf580dd5352c64d10110e4d3b7b", "html_url": "https://github.com/rust-lang/rust/commit/81734e0e06d24cf580dd5352c64d10110e4d3b7b"}], "stats": {"total": 491, "additions": 219, "deletions": 272}, "files": [{"sha": "d268c8787cceef59a88726247cab5af6a17a6bf9", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -108,6 +108,9 @@ pub enum DepNode<D: Clone + Debug> {\n     SymbolName(D),\n     SpecializationGraph(D),\n     ObjectSafety(D),\n+    IsCopy(D),\n+    IsSized(D),\n+    IsFreeze(D),\n \n     // The set of impls for a given trait. Ultimately, it would be\n     // nice to get more fine-grained here (e.g., to include a\n@@ -233,6 +236,9 @@ impl<D: Clone + Debug> DepNode<D> {\n             // they are always absolute.\n             WorkProduct(ref id) => Some(WorkProduct(id.clone())),\n \n+            IsCopy(ref d) => op(d).map(IsCopy),\n+            IsSized(ref d) => op(d).map(IsSized),\n+            IsFreeze(ref d) => op(d).map(IsFreeze),\n             Hir(ref d) => op(d).map(Hir),\n             HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),"}, {"sha": "7dcad0122e8a66d393b2a50f9a795a466e22460e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -28,7 +28,7 @@ use middle::lang_items;\n use mir::tcx::LvalueTy;\n use ty::subst::{Kind, Subst, Substs};\n use ty::{TyVid, IntVid, FloatVid};\n-use ty::{self, Ty, TyCtxt};\n+use ty::{self, ParameterEnvironment, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -526,9 +526,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         let tables = tables.map(InferTables::Interned).unwrap_or_else(|| {\n             fresh_tables.as_ref().map_or(InferTables::Missing, InferTables::InProgress)\n         });\n-        let param_env = param_env.take().unwrap_or_else(|| {\n-            global_tcx.empty_parameter_environment()\n-        });\n+        let param_env = param_env.take().unwrap_or_else(|| ParameterEnvironment::empty());\n         global_tcx.enter_local(arena, |tcx| f(InferCtxt {\n             tcx: tcx,\n             tables: tables,\n@@ -650,7 +648,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n \n     pub fn normalize_associated_type_in_env<T>(\n-        self, value: &T, env: &'a ty::ParameterEnvironment<'tcx>\n+        self, value: &T, env: ty::ParameterEnvironment<'tcx>\n     ) -> T\n         where T: TransNormalize<'tcx>\n     {\n@@ -662,7 +660,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return value;\n         }\n \n-        self.infer_ctxt(env.clone(), Reveal::All).enter(|infcx| {\n+        self.infer_ctxt(env, Reveal::All).enter(|infcx| {\n             value.trans_normalize(&infcx)\n        })\n     }\n@@ -1674,8 +1672,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n     }\n \n-    pub fn param_env(&self) -> &ty::ParameterEnvironment<'gcx> {\n-        &self.parameter_environment\n+    pub fn param_env(&self) -> ty::ParameterEnvironment<'gcx> {\n+        self.parameter_environment\n     }\n \n     pub fn closure_kind(&self,"}, {"sha": "9e3381d8450d38b3f629e7e74b2009fd8794d0c3", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -477,7 +477,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n \n-    let elaborated_env = unnormalized_env.with_caller_bounds(tcx.intern_predicates(&predicates));\n+    let elaborated_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n \n     tcx.infer_ctxt(elaborated_env, Reveal::UserFacing).enter(|infcx| {\n         let predicates = match fully_normalize(\n@@ -528,7 +528,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\",\n             predicates);\n \n-        infcx.parameter_environment.with_caller_bounds(tcx.intern_predicates(&predicates))\n+        ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates))\n     })\n }\n "}, {"sha": "5be07e712b69553cb407c2a1926fd6a13f317d70", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -315,7 +315,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'gcx> {\n+    pub fn param_env(&self) -> ty::ParameterEnvironment<'gcx> {\n         self.infcx.param_env()\n     }\n "}, {"sha": "66935dd3a3bb8cfb609ac9400086e0853ba07948", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n         let ptr_layout = |pointee: Ty<'gcx>| {\n             let non_zero = !ty.is_unsafe_ptr();\n             let pointee = infcx.normalize_projections(pointee);\n-            if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n+            if pointee.is_sized(tcx, infcx.parameter_environment, DUMMY_SP) {\n                 Ok(Scalar { value: Pointer, non_zero: non_zero })\n             } else {\n                 let unsized_part = tcx.struct_tail(pointee);\n@@ -1272,7 +1272,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         let fields = &def.variants[0].fields;\n                         let last_field = &fields[fields.len()-1];\n                         let always_sized = tcx.type_of(last_field.did)\n-                          .is_sized(tcx, &param_env, DUMMY_SP);\n+                          .is_sized(tcx, param_env, DUMMY_SP);\n                         if !always_sized { StructKind::MaybeUnsizedUnivariant }\n                         else { StructKind::AlwaysSizedUnivariant }\n                     };"}, {"sha": "b0868ac389b463d865b58c07708a111b40c62152", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n use middle::const_val;\n@@ -136,6 +136,15 @@ impl Key for (MirSuite, MirPassIndex, DefId) {\n     }\n }\n \n+impl<'tcx, T: Clone + Hash + Eq + Debug> Key for ty::ParameterEnvironmentAnd<'tcx, T> {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n trait Value<'tcx>: Sized {\n     fn from_cycle_error<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self;\n }\n@@ -244,6 +253,24 @@ impl<M: DepTrackingMapConfig<Key=DefId>> QueryDescription for M {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_copy_raw<'tcx> {\n+    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+        format!(\"computing whether `{}` is `Copy`\", env.value)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_sized_raw<'tcx> {\n+    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+        format!(\"computing whether `{}` is `Sized`\", env.value)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_freeze_raw<'tcx> {\n+    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+        format!(\"computing whether `{}` is freeze\", env.value)\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::super_predicates_of<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"computing the supertraits of `{}`\",\n@@ -856,6 +883,12 @@ define_maps! { <'tcx>\n         -> ty::trait_def::TraitImpls,\n     [] specialization_graph_of: SpecializationGraph(DefId) -> Rc<specialization_graph::Graph>,\n     [] is_object_safe: ObjectSafety(DefId) -> bool,\n+\n+    // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n+    // `ty.is_copy()`, etc, since that will prune the environment where possible.\n+    [] is_copy_raw: is_copy_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] is_sized_raw: is_sized_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] is_freeze_raw: is_freeze_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -899,3 +932,18 @@ fn crate_variances(_: CrateNum) -> DepNode<DefId> {\n fn relevant_trait_impls_for((def_id, _): (DefId, SimplifiedType)) -> DepNode<DefId> {\n     DepNode::TraitImpls(def_id)\n }\n+\n+fn is_copy_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+    let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n+    DepNode::IsCopy(krate_def_id)\n+}\n+\n+fn is_sized_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+    let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n+    DepNode::IsSized(krate_def_id)\n+}\n+\n+fn is_freeze_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+    let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n+    DepNode::IsSized(krate_def_id)\n+}"}, {"sha": "9036db9e3d543154073438a00d4f268096432b70", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 51, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -35,7 +35,7 @@ use util::common::ErrorReported;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::collections::BTreeMap;\n use std::cmp;\n use std::fmt;\n@@ -507,8 +507,6 @@ bitflags! {\n         // Caches for type_is_sized, type_moves_by_default\n         const SIZEDNESS_CACHED  = 1 << 16,\n         const IS_SIZED          = 1 << 17,\n-        const MOVENESS_CACHED   = 1 << 18,\n-        const MOVES_BY_DEFAULT  = 1 << 19,\n         const FREEZENESS_CACHED = 1 << 20,\n         const IS_FREEZE         = 1 << 21,\n         const NEEDS_DROP_CACHED = 1 << 22,\n@@ -1250,45 +1248,34 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n }\n \n /// When type checking, we use the `ParameterEnvironment` to track\n-/// details about the type/lifetime parameters that are in scope.\n-/// It primarily stores the bounds information.\n-///\n-/// Note: This information might seem to be redundant with the data in\n-/// `tcx.ty_param_defs`, but it is not. That table contains the\n-/// parameter definitions from an \"outside\" perspective, but this\n-/// struct will contain the bounds for a parameter as seen from inside\n-/// the function body. Currently the only real distinction is that\n-/// bound lifetime parameters are replaced with free ones, but in the\n-/// future I hope to refine the representation of types so as to make\n-/// more distinctions clearer.\n-#[derive(Clone)]\n+/// details about the set of where-clauses that are in scope at this\n+/// particular point.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct ParameterEnvironment<'tcx> {\n     /// Obligations that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into Obligations, and elaborated and normalized.\n-    pub caller_bounds: &'tcx [ty::Predicate<'tcx>],\n-\n-    /// A cache for `moves_by_default`.\n-    pub is_copy_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n+    pub caller_bounds: &'tcx Slice<ty::Predicate<'tcx>>,\n+}\n \n-    /// A cache for `type_is_sized`\n-    pub is_sized_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n+impl<'tcx> ParameterEnvironment<'tcx> {\n+    pub fn and<T>(self, value: T) -> ParameterEnvironmentAnd<'tcx, T> {\n+        ParameterEnvironmentAnd {\n+            param_env: self,\n+            value: value,\n+        }\n+    }\n+}\n \n-    /// A cache for `type_is_freeze`\n-    pub is_freeze_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct ParameterEnvironmentAnd<'tcx, T> {\n+    pub param_env: ParameterEnvironment<'tcx>,\n+    pub value: T,\n }\n \n-impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n-    pub fn with_caller_bounds(&self,\n-                              caller_bounds: &'tcx [ty::Predicate<'tcx>])\n-                              -> ParameterEnvironment<'tcx>\n-    {\n-        ParameterEnvironment {\n-            caller_bounds: caller_bounds,\n-            is_copy_cache: RefCell::new(FxHashMap()),\n-            is_sized_cache: RefCell::new(FxHashMap()),\n-            is_freeze_cache: RefCell::new(FxHashMap()),\n-        }\n+impl<'tcx, T> ParameterEnvironmentAnd<'tcx, T> {\n+    pub fn into_parts(self) -> (ParameterEnvironment<'tcx>, T) {\n+        (self.param_env, self.value)\n     }\n }\n \n@@ -2357,17 +2344,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Construct a parameter environment suitable for static contexts or other contexts where there\n-    /// are no free type/lifetime parameters in scope.\n-    pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> {\n-        ty::ParameterEnvironment {\n-            caller_bounds: Slice::empty(),\n-            is_copy_cache: RefCell::new(FxHashMap()),\n-            is_sized_cache: RefCell::new(FxHashMap()),\n-            is_freeze_cache: RefCell::new(FxHashMap()),\n-        }\n-    }\n-\n     /// See `ParameterEnvironment` struct def'n for details.\n     pub fn parameter_environment(self, def_id: DefId) -> ParameterEnvironment<'gcx> {\n         //\n@@ -2391,12 +2367,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // sure that this will succeed without errors anyway.\n         //\n \n-        let unnormalized_env = ty::ParameterEnvironment {\n-            caller_bounds: tcx.intern_predicates(&predicates),\n-            is_copy_cache: RefCell::new(FxHashMap()),\n-            is_sized_cache: RefCell::new(FxHashMap()),\n-            is_freeze_cache: RefCell::new(FxHashMap()),\n-        };\n+        let unnormalized_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n \n         let body_id = self.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n             self.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)\n@@ -2566,6 +2537,7 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n \n \n pub fn provide(providers: &mut ty::maps::Providers) {\n+    util::provide(providers);\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,"}, {"sha": "b9276281a54e666c9a136c8a3028e5356d50a56b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 82, "deletions": 145, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -15,29 +15,26 @@ use hir::map::DefPathData;\n use infer::InferCtxt;\n use ich::{StableHashingContext, NodeIdHashingMode};\n use traits::{self, Reveal};\n-use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeFlags, TypeFoldable};\n use ty::ParameterEnvironment;\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::subst::{Subst, Kind};\n use ty::TypeVariants::*;\n use util::common::ErrorReported;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use util::nodemap::FxHashSet;\n use middle::lang_items;\n \n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n-use std::cell::RefCell;\n use std::cmp;\n use std::hash::Hash;\n use std::intrinsics;\n use syntax::ast::{self, Name};\n use syntax::attr::{self, SignedInt, UnsignedInt};\n use syntax_pos::{Span, DUMMY_SP};\n \n-use hir;\n-\n type Disr = ConstInt;\n \n pub trait IntTypeExt {\n@@ -153,6 +150,17 @@ pub enum Representability {\n }\n \n impl<'tcx> ParameterEnvironment<'tcx> {\n+    /// Construct a trait environment suitable for contexts where\n+    /// there are no where clauses in scope.\n+    pub fn empty() -> Self {\n+        Self::new(ty::Slice::empty())\n+    }\n+\n+    /// Construct a trait environment with the given set of predicates.\n+    pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>) -> Self {\n+        ty::ParameterEnvironment { caller_bounds }\n+    }\n+\n     pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>, span: Span)\n                                        -> Result<(), CopyImplementationError> {\n@@ -711,152 +719,40 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n }\n \n impl<'a, 'tcx> ty::TyS<'tcx> {\n-    fn impls_bound(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                   param_env: &ParameterEnvironment<'tcx>,\n-                   def_id: DefId,\n-                   cache: &RefCell<FxHashMap<Ty<'tcx>, bool>>,\n-                   span: Span) -> bool\n-    {\n-        if self.has_param_types() || self.has_self_ty() {\n-            if let Some(result) = cache.borrow().get(self) {\n-                return *result;\n-            }\n-        }\n-        let result =\n-            tcx.infer_ctxt(param_env.clone(), Reveal::UserFacing)\n-            .enter(|infcx| {\n-                traits::type_known_to_meet_bound(&infcx, self, def_id, span)\n-            });\n+    pub fn moves_by_default(&'tcx self,\n+                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                            param_env: ParameterEnvironment<'tcx>,\n+                            span: Span)\n+                            -> bool {\n         if self.has_param_types() || self.has_self_ty() {\n-            cache.borrow_mut().insert(self, result);\n-        }\n-        return result;\n-    }\n-\n-    // FIXME (@jroesch): I made this public to use it, not sure if should be private\n-    pub fn moves_by_default(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            param_env: &ParameterEnvironment<'tcx>,\n-                            span: Span) -> bool {\n-        if self.flags.get().intersects(TypeFlags::MOVENESS_CACHED) {\n-            return self.flags.get().intersects(TypeFlags::MOVES_BY_DEFAULT);\n-        }\n-\n-        assert!(!self.needs_infer());\n-\n-        // Fast-path for primitive types\n-        let result = match self.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) | TyNever |\n-            TyRawPtr(..) | TyFnDef(..) | TyFnPtr(_) | TyRef(_, TypeAndMut {\n-                mutbl: hir::MutImmutable, ..\n-            }) => Some(false),\n-\n-            TyStr | TyRef(_, TypeAndMut {\n-                mutbl: hir::MutMutable, ..\n-            }) => Some(true),\n-\n-            TyArray(..) | TySlice(..) | TyDynamic(..) | TyTuple(..) |\n-            TyClosure(..) | TyAdt(..) | TyAnon(..) |\n-            TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n-        }.unwrap_or_else(|| {\n-            !self.impls_bound(tcx, param_env,\n-                              tcx.require_lang_item(lang_items::CopyTraitLangItem),\n-                              &param_env.is_copy_cache, span) });\n-\n-        if !self.has_param_types() && !self.has_self_ty() {\n-            self.flags.set(self.flags.get() | if result {\n-                TypeFlags::MOVENESS_CACHED | TypeFlags::MOVES_BY_DEFAULT\n-            } else {\n-                TypeFlags::MOVENESS_CACHED\n-            });\n+            !tcx.at(span).is_copy_raw(param_env.and(self))\n+        } else {\n+            !tcx.is_copy_raw(ParameterEnvironment::empty().and(self))\n         }\n-\n-        result\n     }\n \n-    #[inline]\n-    pub fn is_sized(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    param_env: &ParameterEnvironment<'tcx>,\n-                    span: Span) -> bool\n+    pub fn is_sized(&'tcx self,\n+                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    param_env: ParameterEnvironment<'tcx>,\n+                    span: Span)-> bool\n     {\n-        if self.flags.get().intersects(TypeFlags::SIZEDNESS_CACHED) {\n-            return self.flags.get().intersects(TypeFlags::IS_SIZED);\n-        }\n-\n-        self.is_sized_uncached(tcx, param_env, span)\n-    }\n-\n-    fn is_sized_uncached(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         param_env: &ParameterEnvironment<'tcx>,\n-                         span: Span) -> bool {\n-        assert!(!self.needs_infer());\n-\n-        // Fast-path for primitive types\n-        let result = match self.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyArray(..) | TyTuple(..) | TyClosure(..) | TyNever => Some(true),\n-\n-            TyStr | TyDynamic(..) | TySlice(_) => Some(false),\n-\n-            TyAdt(..) | TyProjection(..) | TyParam(..) |\n-            TyInfer(..) | TyAnon(..) | TyError => None\n-        }.unwrap_or_else(|| {\n-            self.impls_bound(tcx, param_env, tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-                              &param_env.is_sized_cache, span) });\n-\n-        if !self.has_param_types() && !self.has_self_ty() {\n-            self.flags.set(self.flags.get() | if result {\n-                TypeFlags::SIZEDNESS_CACHED | TypeFlags::IS_SIZED\n-            } else {\n-                TypeFlags::SIZEDNESS_CACHED\n-            });\n+        if self.has_param_types() || self.has_self_ty() {\n+            tcx.at(span).is_sized_raw(param_env.and(self))\n+        } else {\n+            tcx.is_sized_raw(ParameterEnvironment::empty().and(self))\n         }\n-\n-        result\n     }\n \n-    /// Returns `true` if and only if there are no `UnsafeCell`s\n-    /// nested within the type (ignoring `PhantomData` or pointers).\n-    #[inline]\n-    pub fn is_freeze(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                     param_env: &ParameterEnvironment<'tcx>,\n-                     span: Span) -> bool\n+    pub fn is_freeze(&'tcx self,\n+                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                     param_env: ParameterEnvironment<'tcx>,\n+                     span: Span)-> bool\n     {\n-        if self.flags.get().intersects(TypeFlags::FREEZENESS_CACHED) {\n-            return self.flags.get().intersects(TypeFlags::IS_FREEZE);\n-        }\n-\n-        self.is_freeze_uncached(tcx, param_env, span)\n-    }\n-\n-    fn is_freeze_uncached(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          param_env: &ParameterEnvironment<'tcx>,\n-                          span: Span) -> bool {\n-        assert!(!self.needs_infer());\n-\n-        // Fast-path for primitive types\n-        let result = match self.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyStr | TyNever => Some(true),\n-\n-            TyArray(..) | TySlice(_) |\n-            TyTuple(..) | TyClosure(..) | TyAdt(..) |\n-            TyDynamic(..) | TyProjection(..) | TyParam(..) |\n-            TyInfer(..) | TyAnon(..) | TyError => None\n-        }.unwrap_or_else(|| {\n-            self.impls_bound(tcx, param_env, tcx.require_lang_item(lang_items::FreezeTraitLangItem),\n-                              &param_env.is_freeze_cache, span) });\n-\n-        if !self.has_param_types() && !self.has_self_ty() {\n-            self.flags.set(self.flags.get() | if result {\n-                TypeFlags::FREEZENESS_CACHED | TypeFlags::IS_FREEZE\n-            } else {\n-                TypeFlags::FREEZENESS_CACHED\n-            });\n+        if self.has_param_types() || self.has_self_ty() {\n+            tcx.at(span).is_freeze_raw(param_env.and(self))\n+        } else {\n+            tcx.is_freeze_raw(ParameterEnvironment::empty().and(self))\n         }\n-\n-        result\n     }\n \n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely\n@@ -866,8 +762,10 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     /// (Note that this implies that if `ty` has a destructor attached,\n     /// then `needs_drop` will definitely return `true` for `ty`.)\n     #[inline]\n-    pub fn needs_drop(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    param_env: &ty::ParameterEnvironment<'tcx>) -> bool {\n+    pub fn needs_drop(&'tcx self,\n+                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                      param_env: ty::ParameterEnvironment<'tcx>)\n+                      -> bool {\n         if self.flags.get().intersects(TypeFlags::NEEDS_DROP_CACHED) {\n             return self.flags.get().intersects(TypeFlags::NEEDS_DROP);\n         }\n@@ -877,7 +775,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n     fn needs_drop_inner(&'tcx self,\n                         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        param_env: &ty::ParameterEnvironment<'tcx>,\n+                        param_env: ty::ParameterEnvironment<'tcx>,\n                         stack: &mut FxHashSet<Ty<'tcx>>)\n                         -> bool {\n         if self.flags.get().intersects(TypeFlags::NEEDS_DROP_CACHED) {\n@@ -902,7 +800,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n     fn needs_drop_uncached(&'tcx self,\n                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           param_env: &ty::ParameterEnvironment<'tcx>,\n+                           param_env: ty::ParameterEnvironment<'tcx>,\n                            stack: &mut FxHashSet<Ty<'tcx>>)\n                            -> bool {\n         assert!(!self.needs_infer());\n@@ -1158,3 +1056,42 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         r\n     }\n }\n+\n+fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                         query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                         -> bool\n+{\n+    let (param_env, ty) = query.into_parts();\n+    let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem);\n+    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+       .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n+}\n+\n+fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                          -> bool\n+{\n+    let (param_env, ty) = query.into_parts();\n+    let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem);\n+    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+       .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n+}\n+\n+fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                           query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                           -> bool\n+{\n+    let (param_env, ty) = query.into_parts();\n+    let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem);\n+    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+       .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    *providers = ty::maps::Providers {\n+        is_copy_raw,\n+        is_sized_raw,\n+        is_freeze_raw,\n+        ..*providers\n+    };\n+}"}, {"sha": "340e4f2cfccbcdba96cacd9f1e35f786fcfad6e3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -504,13 +504,7 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Debug for ty::ParameterEnvironment<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"ParameterEnvironment({:?})\", self.caller_bounds)\n-    }\n-}\n-\n-impl<'tcx> fmt::Display for ty::RegionKind {\n+impl fmt::Display for ty::RegionKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if verbose() {\n             return write!(f, \"{:?}\", *self);"}, {"sha": "0178aa818d6a220db21214a789fbeb1af0cdde9c", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -45,7 +45,7 @@ impl MirPass for ElaborateDrops {\n         }\n         let id = src.item_id();\n         let param_env = tcx.parameter_environment(tcx.hir.local_def_id(id));\n-        let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n+        let move_data = MoveData::gather_moves(mir, tcx, param_env);\n         let elaborate_patch = {\n             let mir = &*mir;\n             let env = MoveDataParamEnv {\n@@ -196,7 +196,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.tcx\n     }\n \n-    fn param_env(&self) -> &'a ty::ParameterEnvironment<'tcx> {\n+    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> {\n         self.ctxt.param_env()\n     }\n \n@@ -289,8 +289,9 @@ struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n \n impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn move_data(&self) -> &'b MoveData<'tcx> { &self.env.move_data }\n-    fn param_env(&self) -> &'b ty::ParameterEnvironment<'tcx> {\n-        &self.env.param_env\n+\n+    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> {\n+        self.env.param_env\n     }\n \n     fn initialization_data_at(&self, loc: Location) -> InitializationData {"}, {"sha": "ebaae1b30d7d1c82e32bd4d0d36fe0f86976c44d", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -191,7 +191,7 @@ pub struct MovePathLookup<'tcx> {\n struct MoveDataBuilder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: &'a ParameterEnvironment<'tcx>,\n+    param_env: ParameterEnvironment<'tcx>,\n     data: MoveData<'tcx>,\n }\n \n@@ -203,7 +203,7 @@ pub enum MovePathError {\n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn new(mir: &'a Mir<'tcx>,\n            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-           param_env: &'a ParameterEnvironment<'tcx>)\n+           param_env: ParameterEnvironment<'tcx>)\n            -> Self {\n         let mut move_paths = IndexVec::new();\n         let mut path_map = IndexVec::new();\n@@ -370,15 +370,15 @@ impl<'tcx> MovePathLookup<'tcx> {\n impl<'a, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(mir: &Mir<'tcx>,\n                         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        param_env: &ParameterEnvironment<'tcx>)\n+                        param_env: ParameterEnvironment<'tcx>)\n                         -> Self {\n         gather_moves(mir, tcx, param_env)\n     }\n }\n \n fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          param_env: &ParameterEnvironment<'tcx>)\n+                          param_env: ParameterEnvironment<'tcx>)\n                           -> MoveData<'tcx> {\n     let mut builder = MoveDataBuilder::new(mir, tcx, param_env);\n "}, {"sha": "003fc2ae9c25c8f24134c04fbdc222078c63ea9a", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -66,7 +66,7 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n     let mir = &tcx.mir_validated(def_id).borrow();\n \n     let param_env = tcx.parameter_environment(def_id);\n-    let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n+    let move_data = MoveData::gather_moves(mir, tcx, param_env);\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n@@ -325,7 +325,7 @@ fn on_all_drop_children_bits<'a, 'tcx, F>(\n         let ty = lvalue.ty(mir, tcx).to_ty(tcx);\n         debug!(\"on_all_drop_children_bits({:?}, {:?} : {:?})\", path, lvalue, ty);\n \n-        if ty.needs_drop(tcx, &ctxt.param_env) {\n+        if ty.needs_drop(tcx, ctxt.param_env) {\n             each_child(child);\n         } else {\n             debug!(\"on_all_drop_children_bits - skipping\")\n@@ -359,7 +359,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n     where F: FnMut(MovePathIndex, DropFlagState)\n {\n     let move_data = &ctxt.move_data;\n-    let param_env = &ctxt.param_env;\n+    let param_env = ctxt.param_env;\n     debug!(\"drop_flag_effects_for_location({:?})\", loc);\n \n     // first, move out of the RHS"}, {"sha": "6e2a13a9a0d7eee6495c00e01ce1a22990bb3ca3", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n             tcx: self.tcx,\n             tables: self.tcx.body_tables(b),\n             region_maps: &self.tcx.region_maps(def_id),\n-            param_env: &self.tcx.parameter_environment(def_id)\n+            param_env: self.tcx.parameter_environment(def_id)\n         }.visit_body(self.tcx.hir.body(b));\n     }\n }\n@@ -69,7 +69,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    param_env: &'a ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParameterEnvironment<'tcx>,\n     region_maps: &'a RegionMaps,\n }\n \n@@ -518,7 +518,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n ///\n /// FIXME: this should be done by borrowck.\n fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) {\n-    cx.tcx.infer_ctxt((cx.tables, cx.param_env.clone()), Reveal::UserFacing).enter(|infcx| {\n+    cx.tcx.infer_ctxt((cx.tables, cx.param_env), Reveal::UserFacing).enter(|infcx| {\n         let mut checker = MutationChecker {\n             cx: cx,\n         };"}, {"sha": "d67f7bc901fe1681a5287b5c1e41e2f767501fcc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -527,13 +527,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n-        let parameter_environment = cx.tcx.empty_parameter_environment();\n-        // FIXME (@jroesch) should probably inver this so that the parameter env still impls this\n-        // method\n-        if !ty.moves_by_default(cx.tcx, &parameter_environment, item.span) {\n+        let param_env = ty::ParameterEnvironment::empty();\n+        if !ty.moves_by_default(cx.tcx, param_env, item.span) {\n             return;\n         }\n-        if parameter_environment.can_type_implement_copy(cx.tcx, ty, item.span).is_ok() {\n+        if param_env.can_type_implement_copy(cx.tcx, ty, item.span).is_ok() {\n             cx.span_lint(MISSING_COPY_IMPLEMENTATIONS,\n                          item.span,\n                          \"type could implement `Copy`; consider adding `impl \\\n@@ -1258,7 +1256,8 @@ impl LintPass for UnionsWithDropFields {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUnion(ref vdata, _) = item.node {\n-            let param_env = &ctx.tcx.parameter_environment(ctx.tcx.hir.local_def_id(item.id));\n+            let item_def_id = ctx.tcx.hir.local_def_id(item.id);\n+            let param_env = ctx.tcx.parameter_environment(item_def_id);\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(ctx.tcx.hir.local_def_id(field.id));\n                 if field_ty.needs_drop(ctx.tcx, param_env) {"}, {"sha": "d14d4d6c5310c2de9cec44b990f900135b5f754e", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                   type with inference types/regions\",\n                  ty);\n         });\n-        ty.needs_drop(self.tcx.global_tcx(), &self.infcx.parameter_environment)\n+        ty.needs_drop(self.tcx.global_tcx(), self.infcx.parameter_environment)\n     }\n \n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "e80764b7af2dabb6f0502f5d537f67d2895953ae", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -40,8 +40,6 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                        -> &'tcx Mir<'tcx>\n {\n     debug!(\"make_shim({:?})\", instance);\n-    let did = instance.def_id();\n-    let param_env = tcx.parameter_environment(did);\n \n     let mut result = match instance {\n         ty::InstanceDef::Item(..) =>\n@@ -98,7 +96,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             )\n         }\n         ty::InstanceDef::DropGlue(def_id, ty) => {\n-            build_drop_shim(tcx, &param_env, def_id, ty)\n+            build_drop_shim(tcx, def_id, ty)\n         }\n         ty::InstanceDef::Intrinsic(_) => {\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n@@ -144,7 +142,6 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n }\n \n fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-                             param_env: &ty::ParameterEnvironment<'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Mir<'tcx>\n@@ -189,10 +186,12 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Some(..) = ty {\n         let patch = {\n+            let param_env = tcx.parameter_environment(def_id);\n             let mut elaborator = DropShimElaborator {\n                 mir: &mir,\n                 patch: MirPatch::new(&mir),\n-                tcx, param_env\n+                tcx,\n+                param_env\n             };\n             let dropee = Lvalue::Local(Local::new(1+0)).deref();\n             let resume_block = elaborator.patch.resume_block();\n@@ -218,7 +217,7 @@ pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     patch: MirPatch<'tcx>,\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: &'a ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParameterEnvironment<'tcx>,\n }\n \n impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n@@ -233,7 +232,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n     fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n-    fn param_env(&self) -> &'a ty::ParameterEnvironment<'tcx> { self.param_env }\n+    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n         if let DropFlagMode::Shallow = mode {"}, {"sha": "e2c10c1a547d913462374248a08e8a04703d3b0d", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     // a regular goto.\n                     let ty = location.ty(&callee_mir, tcx).subst(tcx, callsite.substs);\n                     let ty = ty.to_ty(tcx);\n-                    if ty.needs_drop(tcx, &param_env) {\n+                    if ty.needs_drop(tcx, param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n                             work_list.push(unwind);"}, {"sha": "9737c6039879536059cfb9f00edc06462adeca28", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Qualif {\n     /// Remove flags which are impossible for the given type.\n     fn restrict(&mut self, ty: Ty<'tcx>,\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                param_env: &ty::ParameterEnvironment<'tcx>) {\n+                param_env: ty::ParameterEnvironment<'tcx>) {\n         if ty.is_freeze(tcx, param_env, DUMMY_SP) {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n@@ -193,7 +193,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     /// Add the given type's qualification to self.qualif.\n     fn add_type(&mut self, ty: Ty<'tcx>) {\n         self.add(Qualif::MUTABLE_INTERIOR | Qualif::NEEDS_DROP);\n-        self.qualif.restrict(ty, self.tcx, &self.param_env);\n+        self.qualif.restrict(ty, self.tcx, self.param_env);\n     }\n \n     /// Within the provided closure, self.qualif will start\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                            static, use a constant instead\");\n                             }\n                             let ty = lvalue.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                            this.qualif.restrict(ty, this.tcx, &this.param_env);\n+                            this.qualif.restrict(ty, this.tcx, this.param_env);\n                         }\n \n                         ProjectionElem::ConstantIndex {..} |"}, {"sha": "0573a4e2ee1534065d4d090c9dd557f228af7e8a", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -56,7 +56,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn mir(&self) -> &'a Mir<'tcx>;\n     fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;\n-    fn param_env(&self) -> &'a ty::ParameterEnvironment<'tcx>;\n+    fn param_env(&self) -> ty::ParameterEnvironment<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n     fn get_drop_flag(&mut self, path: Self::Path) -> Option<Operand<'tcx>>;"}, {"sha": "9a8ea52a6654b2673ec61a3b2db2713c2a31b4fd", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -38,7 +38,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::mir::transform::MirSource;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, ParameterEnvironment, Ty, TyCtxt};\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeSet;\n@@ -85,11 +85,11 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n     // Adds the worst effect out of all the values of one type.\n     fn add_type(&mut self, ty: Ty<'gcx>) {\n-        if !ty.is_freeze(self.tcx, &self.param_env, DUMMY_SP) {\n+        if !ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n             self.promotable = false;\n         }\n \n-        if ty.needs_drop(self.tcx, &self.param_env) {\n+        if ty.needs_drop(self.tcx, self.param_env) {\n             self.promotable = false;\n         }\n     }\n@@ -466,7 +466,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         in_fn: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n-        param_env: tcx.empty_parameter_environment(),\n+        param_env: ParameterEnvironment::empty(),\n     }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "7baaf25cf25284efd18829f1e229b528cf57cbbb", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -24,7 +24,7 @@ use partitioning::CodegenUnit;\n use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, ParameterEnvironment, Ty, TyCtxt};\n use rustc::ty::layout::{LayoutTyper, TyLayout};\n use session::config::NoDebugInfo;\n use session::Session;\n@@ -79,7 +79,6 @@ impl Stats {\n pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     exported_symbols: NodeSet,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    empty_param_env: ty::ParameterEnvironment<'tcx>,\n     check_overflow: bool,\n \n     use_dll_storage_attrs: bool,\n@@ -315,23 +314,22 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n         SharedCrateContext {\n             exported_symbols: exported_symbols,\n-            empty_param_env: tcx.empty_parameter_environment(),\n             tcx: tcx,\n             check_overflow: check_overflow,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n         }\n     }\n \n     pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(self.tcx, &self.empty_param_env)\n+        ty.needs_drop(self.tcx, ParameterEnvironment::empty())\n     }\n \n     pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, &self.empty_param_env, DUMMY_SP)\n+        ty.is_sized(self.tcx, ParameterEnvironment::empty(), DUMMY_SP)\n     }\n \n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx, &self.empty_param_env, DUMMY_SP)\n+        ty.is_freeze(self.tcx, ParameterEnvironment::empty(), DUMMY_SP)\n     }\n \n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {"}, {"sha": "320884b82f4c36ee45126e5919e98060bdadb49b", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7acb6f34bb255d709fa153a49c77a570e6bbec/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=1b7acb6f34bb255d709fa153a49c77a570e6bbec", "patch": "@@ -165,10 +165,6 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Finally we register each of these predicates as an obligation in\n     // a fresh FulfillmentCtxt, and invoke select_all_or_error.\n \n-    // Create a parameter environment that represents the implementation's\n-    // method.\n-    let impl_param_env = tcx.parameter_environment(impl_m.def_id);\n-\n     // Create mapping from impl to skolemized.\n     let impl_to_skol_substs = Substs::identity_for_item(tcx, impl_m.def_id);\n \n@@ -216,14 +212,13 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n-    let trait_param_env = impl_param_env.with_caller_bounds(\n-        tcx.intern_predicates(&hybrid_preds.predicates));\n-    let trait_param_env = traits::normalize_param_env_or_error(tcx,\n-                                                               impl_m.def_id,\n-                                                               trait_param_env,\n-                                                               normalize_cause.clone());\n-\n-    tcx.infer_ctxt(trait_param_env, Reveal::UserFacing).enter(|infcx| {\n+    let param_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&hybrid_preds.predicates));\n+    let param_env = traits::normalize_param_env_or_error(tcx,\n+                                                         impl_m.def_id,\n+                                                         param_env,\n+                                                         normalize_cause.clone());\n+\n+    tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_m.def_id);\n         let infcx = &inh.infcx;\n "}]}