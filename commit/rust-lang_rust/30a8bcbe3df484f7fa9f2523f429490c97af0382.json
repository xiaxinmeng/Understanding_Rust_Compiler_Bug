{"sha": "30a8bcbe3df484f7fa9f2523f429490c97af0382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYThiY2JlM2RmNDg0ZjdmYTlmMjUyM2Y0Mjk0OTBjOTdhZjAzODI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-03T03:42:41Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-03T03:42:41Z"}, "message": "std: add `IterReader` to adapt iterators into readers", "tree": {"sha": "38bdf2e339610c42de781e07fc1ea21a68ca95cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bdf2e339610c42de781e07fc1ea21a68ca95cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a8bcbe3df484f7fa9f2523f429490c97af0382", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a8bcbe3df484f7fa9f2523f429490c97af0382", "html_url": "https://github.com/rust-lang/rust/commit/30a8bcbe3df484f7fa9f2523f429490c97af0382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a8bcbe3df484f7fa9f2523f429490c97af0382/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63e9b8f105ba0fe18e99cb280a23db82380960f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e9b8f105ba0fe18e99cb280a23db82380960f4", "html_url": "https://github.com/rust-lang/rust/commit/63e9b8f105ba0fe18e99cb280a23db82380960f4"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "59c42f111d0faed566ec0bb5b9c85b0f9a423565", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/30a8bcbe3df484f7fa9f2523f429490c97af0382/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a8bcbe3df484f7fa9f2523f429490c97af0382/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=30a8bcbe3df484f7fa9f2523f429490c97af0382", "patch": "@@ -229,6 +229,36 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n     }\n }\n \n+/// A `Reader` which converts an `Iterator<u8>` into a `Reader`.\n+pub struct IterReader<T> {\n+    iter: T,\n+}\n+\n+impl<T: Iterator<u8>> IterReader<T> {\n+    /// Create a new `IterReader` which will read from the specified `Iterator`.\n+    pub fn new(iter: T) -> IterReader<T> {\n+        IterReader {\n+            iter: iter,\n+        }\n+    }\n+}\n+\n+impl<T: Iterator<u8>> Reader for IterReader<T> {\n+    #[inline]\n+    fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n+        let mut len = 0;\n+        for (slot, elt) in buf.mut_iter().zip(self.iter.by_ref()) {\n+            *slot = elt;\n+            len += 1;\n+        }\n+        if len == 0 {\n+            Err(io::standard_error(io::EndOfFile))\n+        } else {\n+            Ok(len)\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use io::{MemReader, MemWriter, BufReader};\n@@ -366,4 +396,23 @@ mod test {\n             assert_eq!(r.read_line(), Ok(\"23456789\\n\".to_str()));\n         }\n     }\n+\n+    #[test]\n+    fn test_iter_reader() {\n+        let mut r = IterReader::new(range(0u8, 8));\n+        let mut buf = [0, 0, 0];\n+        let len = r.read(buf).unwrap();\n+        assert_eq!(len, 3);\n+        assert!(buf == [0, 1, 2]);\n+\n+        let len = r.read(buf).unwrap();\n+        assert_eq!(len, 3);\n+        assert!(buf == [3, 4, 5]);\n+\n+        let len = r.read(buf).unwrap();\n+        assert_eq!(len, 2);\n+        assert!(buf == [6, 7, 5]);\n+\n+        assert_eq!(r.read(buf).unwrap_err().kind, io::EndOfFile);\n+    }\n }"}]}