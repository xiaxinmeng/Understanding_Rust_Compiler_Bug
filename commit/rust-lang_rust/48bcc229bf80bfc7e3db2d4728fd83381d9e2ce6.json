{"sha": "48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "node_id": "C_kwDOAAsO6NoAKDQ4YmNjMjI5YmY4MGJmYzdlM2RiMmQ0NzI4ZmQ4MzM4MWQ5ZTJjZTY", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T19:32:46Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T19:32:46Z"}, "message": "Move interner methods to Symbol, return SmolStr directly since it's ref-counted", "tree": {"sha": "62163337f8d9de2fa5a7ebd33df9fa3425287878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62163337f8d9de2fa5a7ebd33df9fa3425287878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "html_url": "https://github.com/rust-lang/rust/commit/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246947b7791fd470e8e49c08d30c4c740eb62bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/246947b7791fd470e8e49c08d30c4c740eb62bc5", "html_url": "https://github.com/rust-lang/rust/commit/246947b7791fd470e8e49c08d30c4c740eb62bc5"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "46882845a80798ee5060b95d1ac1d25d713fbcd2", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "patch": "@@ -83,10 +83,9 @@ impl server::FreeFunctions for RustAnalyzer {\n         s: &str,\n     ) -> Result<bridge::Literal<Self::Span, Self::Symbol>, ()> {\n         // FIXME: keep track of LitKind and Suffix\n-        let symbol = ThreadLocalSymbolInterner::intern(s);\n         Ok(bridge::Literal {\n             kind: bridge::LitKind::Err,\n-            symbol,\n+            symbol: Symbol::intern(s),\n             suffix: None,\n             span: tt::TokenId::unspecified(),\n         })\n@@ -124,7 +123,7 @@ impl server::TokenStream for RustAnalyzer {\n \n             bridge::TokenTree::Ident(ident) => {\n                 // FIXME: handle raw idents\n-                let text = ThreadLocalSymbolInterner::get_cloned(&ident.sym);\n+                let text = ident.sym.text();\n                 let ident: tt::Ident = tt::Ident { text, id: ident.span };\n                 let leaf = tt::Leaf::from(ident);\n                 let tree = TokenTree::from(leaf);\n@@ -198,7 +197,7 @@ impl server::TokenStream for RustAnalyzer {\n             .map(|tree| match tree {\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n                     bridge::TokenTree::Ident(bridge::Ident {\n-                        sym: ThreadLocalSymbolInterner::intern(&ident.text),\n+                        sym: Symbol::intern(&ident.text),\n                         // FIXME: handle raw idents\n                         is_raw: false,\n                         span: ident.id,\n@@ -208,7 +207,7 @@ impl server::TokenStream for RustAnalyzer {\n                     bridge::TokenTree::Literal(bridge::Literal {\n                         // FIXME: handle literal kinds\n                         kind: bridge::LitKind::Err,\n-                        symbol: ThreadLocalSymbolInterner::intern(&lit.text),\n+                        symbol: Symbol::intern(&lit.text),\n                         // FIXME: handle suffixes\n                         suffix: None,\n                         span: lit.id,\n@@ -402,11 +401,11 @@ impl server::Server for RustAnalyzer {\n     }\n \n     fn intern_symbol(ident: &str) -> Self::Symbol {\n-        ThreadLocalSymbolInterner::intern(&tt::SmolStr::from(ident))\n+        Symbol::intern(&tt::SmolStr::from(ident))\n     }\n \n     fn with_symbol_string(symbol: &Self::Symbol, f: impl FnOnce(&str)) {\n-        ThreadLocalSymbolInterner::with(symbol, |s| f(s.as_str()))\n+        f(symbol.text().as_str())\n     }\n }\n \n@@ -450,10 +449,9 @@ impl LiteralFormatter {\n     }\n \n     fn with_symbol_and_suffix<R>(&self, f: impl FnOnce(&str, &str) -> R) -> R {\n-        ThreadLocalSymbolInterner::with(&self.0.symbol, |symbol| match self.0.suffix.as_ref() {\n-            Some(suffix) => ThreadLocalSymbolInterner::with(suffix, |suffix| f(symbol, suffix)),\n-            None => f(symbol, \"\"),\n-        })\n+        let symbol = self.0.symbol.text();\n+        let suffix = self.0.suffix.map(|s| s.text()).unwrap_or_default();\n+        f(symbol.as_str(), suffix.as_str())\n     }\n }\n "}, {"sha": "51dfba2ea9fb479bbb8dc7b12807edd4341f1d4b", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server/symbol.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs?ref=48bcc229bf80bfc7e3db2d4728fd83381d9e2ce6", "patch": "@@ -11,6 +11,16 @@ thread_local! {\n #[derive(Hash, Eq, PartialEq, Copy, Clone)]\n pub struct Symbol(u32);\n \n+impl Symbol {\n+    pub fn intern(data: &str) -> Symbol {\n+        SYMBOL_INTERNER.with(|i| i.borrow_mut().intern(data))\n+    }\n+\n+    pub fn text(&self) -> SmolStr {\n+        SYMBOL_INTERNER.with(|i| i.borrow().get(self).clone())\n+    }\n+}\n+\n #[derive(Default)]\n struct SymbolInterner {\n     idents: HashMap<SmolStr, u32>,\n@@ -34,19 +44,3 @@ impl SymbolInterner {\n         &self.ident_data[sym.0 as usize]\n     }\n }\n-\n-pub(super) struct ThreadLocalSymbolInterner;\n-\n-impl ThreadLocalSymbolInterner {\n-    pub(super) fn intern(data: &str) -> Symbol {\n-        SYMBOL_INTERNER.with(|i| i.borrow_mut().intern(data))\n-    }\n-\n-    pub(super) fn with<T>(sym: &Symbol, f: impl FnOnce(&SmolStr) -> T) -> T {\n-        SYMBOL_INTERNER.with(|i| f(i.borrow().get(sym)))\n-    }\n-\n-    pub(super) fn get_cloned(sym: &Symbol) -> SmolStr {\n-        Self::with(sym, |s| s.clone())\n-    }\n-}"}]}