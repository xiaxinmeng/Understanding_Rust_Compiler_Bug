{"sha": "c5852f422ff45adaa21815c1a15e03b067a56a82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODUyZjQyMmZmNDVhZGFhMjE4MTVjMWExNWUwM2IwNjdhNTZhODI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T22:06:57Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T22:24:26Z"}, "message": "Some cleanup and additional tests", "tree": {"sha": "c53ff3531cbbad182e821eb92fa9ad201d2bff0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53ff3531cbbad182e821eb92fa9ad201d2bff0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5852f422ff45adaa21815c1a15e03b067a56a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5852f422ff45adaa21815c1a15e03b067a56a82", "html_url": "https://github.com/rust-lang/rust/commit/c5852f422ff45adaa21815c1a15e03b067a56a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5852f422ff45adaa21815c1a15e03b067a56a82/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d571d26955148befd6986008a5112fff3a901c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/d571d26955148befd6986008a5112fff3a901c43", "html_url": "https://github.com/rust-lang/rust/commit/d571d26955148befd6986008a5112fff3a901c43"}], "stats": {"total": 169, "additions": 138, "deletions": 31}, "files": [{"sha": "872f72f162b07756804d79ebfbe4e357815c5331", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -5,4 +5,3 @@ crates/*/target\n *.log\n *.iml\n .vscode/settings.json\n-**/*.snap.new"}, {"sha": "6c87d0df724294c6c1fcb6cbf3e77fcb1e101fa8", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -46,7 +46,6 @@ pub(crate) enum Scope {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum Resolution {\n-    // FIXME make these tuple variants\n     /// An item\n     Def(ModuleDef),\n     /// A local binding (only value namespace)\n@@ -85,7 +84,7 @@ impl Resolver {\n \n     pub fn all_names(&self) -> FxHashMap<Name, PerNs<Resolution>> {\n         let mut names = FxHashMap::default();\n-        for scope in &self.scopes {\n+        for scope in self.scopes.iter().rev() {\n             scope.collect_names(&mut |name, res| {\n                 let current: &mut PerNs<Resolution> = names.entry(name).or_default();\n                 if current.types.is_none() {"}, {"sha": "59f7822774c8805574c2f06f17354e5c205e35ed", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -204,12 +204,13 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n }\n \n pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n-    let file = db.parse(position.file_id);\n+    let file_id = position.file_id;\n+    let file = db.parse(file_id);\n     find_leaf_at_offset(file.syntax(), position.offset)\n         .find_map(|node| {\n             node.ancestors().find_map(|node| {\n                 if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n-                    if let Some(func) = function_from_child_node(db, position.file_id, node) {\n+                    if let Some(func) = function_from_child_node(db, file_id, node) {\n                         let scopes = func.scopes(db);\n                         let scope = scopes.scope_for_offset(position.offset);\n                         Some(expr::resolver_for_scope(func.body(db), db, scope))\n@@ -218,9 +219,15 @@ pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> R\n                         None\n                     }\n                 } else if let Some(module) = ast::Module::cast(node) {\n-                    Some(module_from_declaration(db, position.file_id, module)?.resolver(db))\n+                    Some(module_from_declaration(db, file_id, module)?.resolver(db))\n                 } else if let Some(_) = ast::SourceFile::cast(node) {\n-                    Some(module_from_source(db, position.file_id.into(), None)?.resolver(db))\n+                    Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n+                } else if let Some(s) = ast::StructDef::cast(node) {\n+                    let module = module_from_child_node(db, file_id, s.syntax())?;\n+                    Some(struct_from_module(db, module, s).resolver(db))\n+                } else if let Some(e) = ast::EnumDef::cast(node) {\n+                    let module = module_from_child_node(db, file_id, e.syntax())?;\n+                    Some(enum_from_module(db, module, e).resolver(db))\n                 } else {\n                     // TODO add missing cases\n                     None\n@@ -246,6 +253,12 @@ pub fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNo\n                 Some(module_from_declaration(db, file_id, module)?.resolver(db))\n             } else if let Some(_) = ast::SourceFile::cast(node) {\n                 Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n+            } else if let Some(s) = ast::StructDef::cast(node) {\n+                let module = module_from_child_node(db, file_id, s.syntax())?;\n+                Some(struct_from_module(db, module, s).resolver(db))\n+            } else if let Some(e) = ast::EnumDef::cast(node) {\n+                let module = module_from_child_node(db, file_id, e.syntax())?;\n+                Some(enum_from_module(db, module, e).resolver(db))\n             } else {\n                 // TODO add missing cases\n                 None"}, {"sha": "0b9948d4b423818c2baa6ee8223e539893aaf3e0", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -65,6 +65,17 @@ mod tests {\n         check_completion(code, expected_completions, CompletionKind::Reference);\n     }\n \n+    #[test]\n+    #[ignore] // should not complete foo, which currently doesn't work\n+    fn dont_complete_current_use() {\n+        check_reference_completion(\n+            \"dont_complete_current_use\",\n+            r\"\n+            use self::foo<|>;\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn completes_mod_with_docs() {\n         check_reference_completion("}, {"sha": "44514ab2b2f73e76f0b45bb7380215b2a94bd888", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -6,29 +6,15 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     let names = ctx.resolver.all_names();\n \n-    // let module_scope = module.scope(ctx.db);\n-    names\n-        .into_iter()\n-        // FIXME check tests\n-        // .filter(|(_name, res)| {\n-        //     // For cases like `use self::foo<|>` don't suggest foo itself.\n-        //     match res.import {\n-        //         None => true,\n-        //         Some(import) => {\n-        //             let source = module.import_source(ctx.db, import);\n-        //             !source.syntax().range().is_subrange(&ctx.leaf.range())\n-        //         }\n-        //     }\n-        // })\n-        .for_each(|(name, res)| {\n-            CompletionItem::new(\n-                CompletionKind::Reference,\n-                ctx.source_range(),\n-                name.to_string(),\n-            )\n-            .from_resolution(ctx, &res)\n-            .add_to(acc)\n-        });\n+    names.into_iter().for_each(|(name, res)| {\n+        CompletionItem::new(\n+            CompletionKind::Reference,\n+            ctx.source_range(),\n+            name.to_string(),\n+        )\n+        .from_resolution(ctx, &res)\n+        .add_to(acc)\n+    });\n }\n \n #[cfg(test)]\n@@ -86,6 +72,30 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_generic_params() {\n+        check_reference_completion(\n+            \"generic_params\",\n+            r\"\n+            fn quux<T>() {\n+                <|>\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_generic_params_in_struct() {\n+        check_reference_completion(\n+            \"generic_params_in_struct\",\n+            r\"\n+            struct X<T> {\n+                x: <|>\n+            }\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn completes_module_items() {\n         check_reference_completion(\n@@ -145,5 +155,4 @@ mod tests {\n     fn completes_self_in_methods() {\n         check_reference_completion(\"self_in_methods\", r\"impl S { fn foo(&self) { <|> } }\")\n     }\n-\n }"}, {"sha": "71cb55a5bc846e2359d36cfa34460a1762e5ff5b", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__generic_params.snap", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params.snap?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -0,0 +1,40 @@\n+---\n+created: \"2019-02-01T22:20:40.580128393+00:00\"\n+creator: insta@0.5.3\n+expression: kind_completions\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"T\",\n+        kind: Some(\n+            TypeParam\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [44; 44),\n+        text_edit: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: Some(\n+            \"fn quux<T>()\"\n+        ),\n+        documentation: None,\n+        lookup: None,\n+        insert_text: Some(\n+            \"quux()$0\"\n+        ),\n+        insert_text_format: Snippet,\n+        source_range: [44; 44),\n+        text_edit: None\n+    }\n+]"}, {"sha": "a35c0cd13a78ae2d72f68837a5833f374ee968cf", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__generic_params_in_struct.snap", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params_in_struct.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c5852f422ff45adaa21815c1a15e03b067a56a82/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params_in_struct.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__generic_params_in_struct.snap?ref=c5852f422ff45adaa21815c1a15e03b067a56a82", "patch": "@@ -0,0 +1,36 @@\n+---\n+created: \"2019-02-01T22:23:21.508620224+00:00\"\n+creator: insta@0.5.3\n+expression: kind_completions\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"T\",\n+        kind: Some(\n+            TypeParam\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [46; 46),\n+        text_edit: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"X\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [46; 46),\n+        text_edit: None\n+    }\n+]"}]}