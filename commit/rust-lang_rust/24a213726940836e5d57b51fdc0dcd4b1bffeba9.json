{"sha": "24a213726940836e5d57b51fdc0dcd4b1bffeba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTIxMzcyNjk0MDgzNmU1ZDU3YjUxZmRjMGRjZDRiMWJmZmViYTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-19T21:39:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-22T02:33:29Z"}, "message": "librustc: Consider where clauses when traversing free regions in\nsignatures.\n\nCloses #16549.\nCloses #16564.", "tree": {"sha": "dd11173c4f65baf935014fe80c0780ce6498a276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd11173c4f65baf935014fe80c0780ce6498a276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a213726940836e5d57b51fdc0dcd4b1bffeba9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a213726940836e5d57b51fdc0dcd4b1bffeba9", "html_url": "https://github.com/rust-lang/rust/commit/24a213726940836e5d57b51fdc0dcd4b1bffeba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a213726940836e5d57b51fdc0dcd4b1bffeba9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43596b43ed7084aff5954e5c4bdd0b2d52665e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43596b43ed7084aff5954e5c4bdd0b2d52665e4", "html_url": "https://github.com/rust-lang/rust/commit/b43596b43ed7084aff5954e5c4bdd0b2d52665e4"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "abb67a6503e9bf4351437a0d0714e3f72b9f558a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=24a213726940836e5d57b51fdc0dcd4b1bffeba9", "patch": "@@ -206,7 +206,8 @@ impl<'a> LifetimeContext<'a> {\n \n         self.check_lifetime_names(&generics.lifetimes);\n \n-        let referenced_idents = free_lifetimes(&generics.ty_params);\n+        let referenced_idents = free_lifetimes(&generics.ty_params,\n+                                               &generics.where_clause);\n         debug!(\"pushing fn scope id={} due to fn item/method\\\n                referenced_idents={:?}\",\n                n,\n@@ -403,7 +404,8 @@ fn search_lifetimes(lifetimes: &Vec<ast::LifetimeDef>,\n ///////////////////////////////////////////////////////////////////////////\n \n pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::LifetimeDef> {\n-    let referenced_idents = free_lifetimes(&generics.ty_params);\n+    let referenced_idents = free_lifetimes(&generics.ty_params,\n+                                           &generics.where_clause);\n     if referenced_idents.is_empty() {\n         return Vec::new();\n     }\n@@ -414,7 +416,9 @@ pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::Lifeti\n         .collect()\n }\n \n-pub fn free_lifetimes(ty_params: &OwnedSlice<ast::TyParam>) -> Vec<ast::Name> {\n+pub fn free_lifetimes(ty_params: &OwnedSlice<ast::TyParam>,\n+                      where_clause: &ast::WhereClause)\n+                      -> Vec<ast::Name> {\n     /*!\n      * Gathers up and returns the names of any lifetimes that appear\n      * free in `ty_params`. Of course, right now, all lifetimes appear\n@@ -426,6 +430,9 @@ pub fn free_lifetimes(ty_params: &OwnedSlice<ast::TyParam>) -> Vec<ast::Name> {\n     for ty_param in ty_params.iter() {\n         visit::walk_ty_param_bounds(&mut collector, &ty_param.bounds, ());\n     }\n+    for predicate in where_clause.predicates.iter() {\n+        visit::walk_ty_param_bounds(&mut collector, &predicate.bounds, ());\n+    }\n     return collector.names;\n \n     struct FreeLifetimeCollector {"}, {"sha": "4adaf7a11e30fc0cefd7920bf692af30835df0b6", "filename": "src/test/run-pass/where-clauses-lifetimes.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs?ref=24a213726940836e5d57b51fdc0dcd4b1bffeba9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'a, I>(mut it: I) where I: Iterator<&'a int> {}\n+\n+fn main() {\n+    foo([1i, 2].iter());\n+}"}, {"sha": "ae005b4ae5306a41e9509739b55086fafcf3f6ed", "filename": "src/test/run-pass/where-clauses-unboxed-closures.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a213726940836e5d57b51fdc0dcd4b1bffeba9/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs?ref=24a213726940836e5d57b51fdc0dcd4b1bffeba9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+struct Bencher;\n+\n+// ICE\n+fn warm_up<'a, F>(f: F) where F: |&: &'a mut Bencher| {\n+}\n+\n+fn main() {\n+    // ICE trigger\n+    warm_up(|&: b: &mut Bencher| () );\n+\n+    // OK\n+    warm_up(|&: b| () );\n+}\n+"}]}