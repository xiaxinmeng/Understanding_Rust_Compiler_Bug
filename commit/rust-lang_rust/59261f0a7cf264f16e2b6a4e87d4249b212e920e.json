{"sha": "59261f0a7cf264f16e2b6a4e87d4249b212e920e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjYxZjBhN2NmMjY0ZjE2ZTJiNmE0ZTg3ZDQyNDliMjEyZTkyMGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-22T17:19:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-24T10:03:58Z"}, "message": "Add some missing support for `NtIdent`", "tree": {"sha": "17c829ac5904f8353ef602550d8aedcaf25047c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c829ac5904f8353ef602550d8aedcaf25047c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59261f0a7cf264f16e2b6a4e87d4249b212e920e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59261f0a7cf264f16e2b6a4e87d4249b212e920e", "html_url": "https://github.com/rust-lang/rust/commit/59261f0a7cf264f16e2b6a4e87d4249b212e920e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59261f0a7cf264f16e2b6a4e87d4249b212e920e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79cd224e758f603898b64308e849fbb9be6e6f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd224e758f603898b64308e849fbb9be6e6f4d", "html_url": "https://github.com/rust-lang/rust/commit/79cd224e758f603898b64308e849fbb9be6e6f4d"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "b0bbed6fabfdc356d4083d0a51c987a6f71297ce", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=59261f0a7cf264f16e2b6a4e87d4249b212e920e", "patch": "@@ -753,6 +753,12 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n fn get_macro_name(token: &Token) -> Option<(Name, bool)> {\n     match token.kind {\n         token::Ident(name, is_raw) if name != kw::Underscore => Some((name, is_raw)),\n+        token::Interpolated(ref nt) => match **nt {\n+            token::NtIdent(ident, is_raw) if ident.name != kw::Underscore => {\n+                Some((ident.name, is_raw))\n+            }\n+            _ => None,\n+        },\n         _ => None,\n     }\n }"}, {"sha": "09b47df2b19ba9f798cd6c68cd304f445d4b5855", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=59261f0a7cf264f16e2b6a4e87d4249b212e920e", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{\n };\n use syntax::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n use syntax::ptr::P;\n-use syntax::token::{self, token_can_begin_expr, TokenKind};\n+use syntax::token::{self, TokenKind};\n use syntax::util::parser::AssocOp;\n \n use log::{debug, trace};\n@@ -900,8 +900,7 @@ impl<'a> Parser<'a> {\n         } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable.\n         } else if self.look_ahead(1, |t| {\n-            t == &token::CloseDelim(token::Brace)\n-                || token_can_begin_expr(t) && t.kind != token::Colon\n+            t == &token::CloseDelim(token::Brace) || t.can_begin_expr() && t.kind != token::Colon\n         }) && [token::Comma, token::Colon].contains(&self.token.kind)\n         {\n             // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n@@ -919,7 +918,7 @@ impl<'a> Parser<'a> {\n         } else if self.look_ahead(0, |t| {\n             t == &token::CloseDelim(token::Brace)\n                 || (\n-                    token_can_begin_expr(t) && t != &token::Semi && t != &token::Pound\n+                    t.can_begin_expr() && t != &token::Semi && t != &token::Pound\n                     // Avoid triggering with too many trailing `#` in raw string.\n                 )\n         }) {"}, {"sha": "bfb1a0e70f656817eaa830aca21b66dd7ef84d87", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=59261f0a7cf264f16e2b6a4e87d4249b212e920e", "patch": "@@ -147,36 +147,30 @@ impl Lit {\n \n pub fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n-    token_can_begin_expr(&ident_token)\n-}\n \n-pub fn token_can_begin_expr(ident_token: &Token) -> bool {\n     !ident_token.is_reserved_ident()\n         || ident_token.is_path_segment_keyword()\n-        || match ident_token.kind {\n-            TokenKind::Ident(ident, _) => [\n-                kw::Async,\n-                kw::Do,\n-                kw::Box,\n-                kw::Break,\n-                kw::Continue,\n-                kw::False,\n-                kw::For,\n-                kw::If,\n-                kw::Let,\n-                kw::Loop,\n-                kw::Match,\n-                kw::Move,\n-                kw::Return,\n-                kw::True,\n-                kw::Unsafe,\n-                kw::While,\n-                kw::Yield,\n-                kw::Static,\n-            ]\n-            .contains(&ident),\n-            _ => false,\n-        }\n+        || [\n+            kw::Async,\n+            kw::Do,\n+            kw::Box,\n+            kw::Break,\n+            kw::Continue,\n+            kw::False,\n+            kw::For,\n+            kw::If,\n+            kw::Let,\n+            kw::Loop,\n+            kw::Match,\n+            kw::Move,\n+            kw::Return,\n+            kw::True,\n+            kw::Unsafe,\n+            kw::While,\n+            kw::Yield,\n+            kw::Static,\n+        ]\n+        .contains(&name)\n }\n \n fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {\n@@ -369,8 +363,8 @@ impl Token {\n             Lifetime(..)                      | // labeled loop\n             Pound                             => true, // expression attributes\n             Interpolated(ref nt) => match **nt {\n+                NtIdent(ident, is_raw) => ident_can_begin_expr(ident.name, ident.span, is_raw),\n                 NtLiteral(..) |\n-                NtIdent(..)   |\n                 NtExpr(..)    |\n                 NtBlock(..)   |\n                 NtPath(..)    |\n@@ -397,7 +391,8 @@ impl Token {\n             Lt | BinOp(Shl)             | // associated path\n             ModSep                      => true, // global path\n             Interpolated(ref nt) => match **nt {\n-                NtIdent(..) | NtTy(..) | NtPath(..) | NtLifetime(..) => true,\n+                NtIdent(ident, is_raw) => ident_can_begin_type(ident.name, ident.span, is_raw),\n+                NtTy(..) | NtPath(..) | NtLifetime(..) => true,\n                 _ => false,\n             },\n             _ => false,\n@@ -442,6 +437,7 @@ impl Token {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,\n             Interpolated(ref nt) => match &**nt {\n+                NtIdent(ident, false) if ident.name.is_bool_lit() => true,\n                 NtExpr(e) | NtLiteral(e) => matches!(e.kind, ast::ExprKind::Lit(_)),\n                 _ => false,\n             },"}, {"sha": "ecf17efc4e0d1ba605215719ca729fb72e1d45cc", "filename": "src/libsyntax/util/literal.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibsyntax%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59261f0a7cf264f16e2b6a4e87d4249b212e920e/src%2Flibsyntax%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fliteral.rs?ref=59261f0a7cf264f16e2b6a4e87d4249b212e920e", "patch": "@@ -197,10 +197,17 @@ impl Lit {\n             }\n             token::Literal(lit) => lit,\n             token::Interpolated(ref nt) => {\n-                if let token::NtExpr(expr) | token::NtLiteral(expr) = &**nt {\n-                    if let ast::ExprKind::Lit(lit) = &expr.kind {\n-                        return Ok(lit.clone());\n+                match &**nt {\n+                    token::NtIdent(ident, false) if ident.name.is_bool_lit() => {\n+                        let lit = token::Lit::new(token::Bool, ident.name, None);\n+                        return Lit::from_lit_token(lit, ident.span);\n                     }\n+                    token::NtExpr(expr) | token::NtLiteral(expr) => {\n+                        if let ast::ExprKind::Lit(lit) = &expr.kind {\n+                            return Ok(lit.clone());\n+                        }\n+                    }\n+                    _ => {}\n                 }\n                 return Err(LitError::NotLiteral);\n             }"}]}