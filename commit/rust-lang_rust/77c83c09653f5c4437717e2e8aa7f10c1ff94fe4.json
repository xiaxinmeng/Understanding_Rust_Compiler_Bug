{"sha": "77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "node_id": "C_kwDOAAsO6NoAKDc3YzgzYzA5NjUzZjVjNDQzNzcxN2UyZThhYTdmMTBjMWZmOTRmZTQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T16:23:13Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T17:14:32Z"}, "message": "Add `impl_tag!` macro to implement `Tag` for tagged pointer easily", "tree": {"sha": "9f3c3bc98fe8db8c4df6f93d4cadf116e7a8fd47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f3c3bc98fe8db8c4df6f93d4cadf116e7a8fd47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "html_url": "https://github.com/rust-lang/rust/commit/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13fc33e3f299f475a0c64d9a5f052bedf3eccc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fc33e3f299f475a0c64d9a5f052bedf3eccc11", "html_url": "https://github.com/rust-lang/rust/commit/13fc33e3f299f475a0c64d9a5f052bedf3eccc11"}], "stats": {"total": 273, "additions": 244, "deletions": 29}, "files": [{"sha": "a25046986cc5975d7fd13ae4b1ca358c099a880f", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "patch": "@@ -24,6 +24,7 @@ use crate::aligned::Aligned;\n \n mod copy;\n mod drop;\n+mod impl_tag;\n \n pub use copy::CopyTaggedPtr;\n pub use drop::TaggedPtr;\n@@ -141,6 +142,40 @@ pub unsafe trait Tag: Copy {\n     unsafe fn from_usize(tag: usize) -> Self;\n }\n \n+/// Returns the number of bits available for use for tags in a pointer to `T`\n+/// (this is based on `T`'s alignment).\n+pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n+    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n+}\n+\n+/// Returns the correct [`Tag::BITS`] constant for a set of tag values.\n+pub const fn bits_for_tags(mut tags: &[usize]) -> u32 {\n+    let mut bits = 0;\n+\n+    while let &[tag, ref rest @ ..] = tags {\n+        tags = rest;\n+\n+        let b = bits_for_tag(tag);\n+        if b > bits {\n+            bits = b;\n+        }\n+    }\n+\n+    bits\n+}\n+\n+/// Returns `(size_of::<usize>() * 8) - tag.leading_zeros()`\n+const fn bits_for_tag(mut tag: usize) -> u32 {\n+    let mut bits = 0;\n+\n+    while tag > 0 {\n+        bits += 1;\n+        tag >>= 1;\n+    }\n+\n+    bits\n+}\n+\n unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n     const BITS: u32 = bits_for::<Self::Target>();\n \n@@ -221,12 +256,6 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n     }\n }\n \n-/// Returns the number of bits available for use for tags in a pointer to `T`\n-/// (this is based on `T`'s alignment).\n-pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n-    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n-}\n-\n /// A tag type used in [`CopyTaggedPtr`] and [`TaggedPtr`] tests.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[cfg(test)]"}, {"sha": "deaaee4cc1728c6f02158cbc8de802807660fb1d", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs?ref=77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "patch": "@@ -0,0 +1,170 @@\n+/// Implements [`Tag`] for a given type.\n+///\n+/// You can use `impl_tag` on structs and enums.\n+/// You need to specify the type and all its possible values,\n+/// which can only be paths with optional fields.\n+///\n+/// [`Tag`]: crate::tagged_ptr::Tag\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use rustc_data_structures::{impl_tag, tagged_ptr::Tag};\n+///\n+/// #[derive(Copy, Clone, PartialEq, Debug)]\n+/// enum SomeTag {\n+///     A,\n+///     B,\n+///     X { v: bool },\n+///     Y(bool, bool),\n+/// }\n+///\n+/// impl_tag! {\n+///     // The type for which the `Tag` will be implemented\n+///     for SomeTag;\n+///     // You need to specify the `{value_of_the_type} <=> {tag}` relationship\n+///     SomeTag::A <=> 0,\n+///     SomeTag::B <=> 1,\n+///     // For variants with fields, you need to specify the fields:\n+///     SomeTag::X { v: true  } <=> 2,\n+///     SomeTag::X { v: false } <=> 3,\n+///     // For tuple variants use named syntax:\n+///     SomeTag::Y { 0: true,  1: true  } <=> 4,\n+///     SomeTag::Y { 0: false, 1: true  } <=> 5,\n+///     SomeTag::Y { 0: true,  1: false } <=> 6,\n+///     SomeTag::Y { 0: false, 1: false } <=> 7,\n+/// }\n+///\n+/// assert_eq!(SomeTag::A.into_usize(), 0);\n+/// assert_eq!(SomeTag::X { v: false }.into_usize(), 3);\n+/// assert_eq!(SomeTag::Y(false, true).into_usize(), 5);\n+///\n+/// assert_eq!(unsafe { SomeTag::from_usize(1) }, SomeTag::B);\n+/// assert_eq!(unsafe { SomeTag::from_usize(2) }, SomeTag::X { v: true });\n+/// assert_eq!(unsafe { SomeTag::from_usize(7) }, SomeTag::Y(false, false));\n+/// ```\n+///\n+/// Structs are supported:\n+///\n+/// ```\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// struct Flags { a: bool, b: bool }\n+///\n+/// impl_tag! {\n+///     for Flags;\n+///     Flags { a: true,  b: true  } <=> 3,\n+///     Flags { a: false, b: true  } <=> 2,\n+///     Flags { a: true,  b: false } <=> 1,\n+///     Flags { a: false, b: false } <=> 0,\n+/// }\n+/// ```\n+///\n+// This is supposed to produce a compile error, but does not,\n+// see <https://github.com/rust-lang/rust/issues/110613> for more information.\n+//\n+// Using the same pattern twice results in a compile error:\n+//\n+// ```compile_fail\n+// # use rustc_data_structures::impl_tag;\n+// #[derive(Copy, Clone)]\n+// struct Unit;\n+//\n+// impl_tag! {\n+//     for Unit;\n+//     Unit <=> 0,\n+//     Unit <=> 1,\n+// }\n+// ```\n+//\n+// Using the same tag twice results in a compile error:\n+//\n+// ```compile_fail\n+// # use rustc_data_structures::impl_tag;\n+// #[derive(Copy, Clone)]\n+// enum E { A, B };\n+//\n+// impl_tag! {\n+//     for E;\n+//     E::A <=> 0,\n+//     E::B <=> 0,\n+// }\n+// ```\n+//\n+/// Not specifying all values results in a compile error:\n+///\n+/// ```compile_fail,E0004\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// enum E {\n+///     A,\n+///     B,\n+/// }\n+///\n+/// impl_tag! {\n+///     for E;\n+///     E::A <=> 0,\n+/// }\n+/// ```\n+#[macro_export]\n+macro_rules! impl_tag {\n+    (\n+        for $Self:ty;\n+        $(\n+            $($path:ident)::* $( { $( $fields:tt )* })? <=> $tag:literal,\n+        )*\n+    ) => {\n+        // Safety:\n+        // `into_usize` only returns one of `$tag`s,\n+        // `bits_for_tags` is called on all `$tag`s,\n+        // thus `BITS` constant is correct.\n+        unsafe impl $crate::tagged_ptr::Tag for $Self {\n+            const BITS: u32 = $crate::tagged_ptr::bits_for_tags(&[\n+                $( $tag, )*\n+            ]);\n+\n+            fn into_usize(self) -> usize {\n+                // This forbids use of repeating patterns (`Enum::V`&`Enum::V`, etc)\n+                // (or at least it should, see <https://github.com/rust-lang/rust/issues/110613>)\n+                #[forbid(unreachable_patterns)]\n+                match self {\n+                    // `match` is doing heavy lifting here, by requiring exhaustiveness\n+                    $(\n+                        $($path)::* $( { $( $fields )* } )? => $tag,\n+                    )*\n+                }\n+            }\n+\n+            unsafe fn from_usize(tag: usize) -> Self {\n+                // Similarly to the above, this forbids repeating tags\n+                // (or at least it should, see <https://github.com/rust-lang/rust/issues/110613>)\n+                #[forbid(unreachable_patterns)]\n+                match tag {\n+                    $(\n+                        $tag => $($path)::* $( { $( $fields )* } )?,\n+                    )*\n+\n+                    // Safety:\n+                    // `into_usize` only returns one of `$tag`s,\n+                    // all `$tag`s are filtered up above,\n+                    // thus if this is reached, the safety contract of this\n+                    // function was already breached.\n+                    _ => unsafe {\n+                        debug_assert!(\n+                            false,\n+                            \"invalid tag: {tag}\\\n+                             (this is a bug in the caller of `from_usize`)\"\n+                        );\n+                        std::hint::unreachable_unchecked()\n+                    },\n+                }\n+            }\n+\n+        }\n+    };\n+}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "26d1cf3b45422c5e55cb49d0870bc30e6421df81", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag/tests.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs?ref=77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "patch": "@@ -0,0 +1,33 @@\n+#[test]\n+fn bits_constant() {\n+    use crate::tagged_ptr::Tag;\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit;\n+    impl_tag! { for Unit; Unit <=> 0, }\n+    assert_eq!(Unit::BITS, 0);\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit1;\n+    impl_tag! { for Unit1; Unit1 <=> 1, }\n+    assert_eq!(Unit1::BITS, 1);\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit2;\n+    impl_tag! { for Unit2; Unit2 <=> 0b10, }\n+    assert_eq!(Unit2::BITS, 2);\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit3;\n+    impl_tag! { for Unit3; Unit3 <=> 0b100, }\n+    assert_eq!(Unit3::BITS, 3);\n+\n+    #[derive(Copy, Clone)]\n+    enum Enum {\n+        A,\n+        B,\n+        C,\n+    }\n+    impl_tag! { for Enum; Enum::A <=> 0b1, Enum::B <=> 0b1000, Enum::C <=> 0b10, }\n+    assert_eq!(Enum::BITS, 4);\n+}"}, {"sha": "f520faa6a61541c3cf780912ba602f00e44279bd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c83c09653f5c4437717e2e8aa7f10c1ff94fe4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=77c83c09653f5c4437717e2e8aa7f10c1ff94fe4", "patch": "@@ -1626,29 +1626,12 @@ struct ParamTag {\n     constness: hir::Constness,\n }\n \n-unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: u32 = 2;\n-\n-    #[inline]\n-    fn into_usize(self) -> usize {\n-        match self {\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn from_usize(ptr: usize) -> Self {\n-        match ptr {\n-            0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n-            1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },\n-            2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },\n-            3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },\n-            _ => std::hint::unreachable_unchecked(),\n-        }\n-    }\n+impl_tag! {\n+    for ParamTag;\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } <=> 0,\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst } <=> 1,\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    } <=> 2,\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::Const    } <=> 3,\n }\n \n impl<'tcx> fmt::Debug for ParamEnv<'tcx> {"}]}