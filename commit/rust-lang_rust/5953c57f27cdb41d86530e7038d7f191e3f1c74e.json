{"sha": "5953c57f27cdb41d86530e7038d7f191e3f1c74e", "node_id": "C_kwDOAAsO6NoAKDU5NTNjNTdmMjdjZGI0MWQ4NjUzMGU3MDM4ZDdmMTkxZTNmMWM3NGU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-10T17:56:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-20T10:25:05Z"}, "message": "Introduce LifetimeCtxt.", "tree": {"sha": "f0f8e085520e74762eaa8a863afe53704886f6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0f8e085520e74762eaa8a863afe53704886f6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5953c57f27cdb41d86530e7038d7f191e3f1c74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5953c57f27cdb41d86530e7038d7f191e3f1c74e", "html_url": "https://github.com/rust-lang/rust/commit/5953c57f27cdb41d86530e7038d7f191e3f1c74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5953c57f27cdb41d86530e7038d7f191e3f1c74e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cc7795245347500ddf6dc959cf58a7abe2d935", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc7795245347500ddf6dc959cf58a7abe2d935", "html_url": "https://github.com/rust-lang/rust/commit/52cc7795245347500ddf6dc959cf58a7abe2d935"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "2ce8590d7718fb911bc157d6c69b5da207586546", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -89,6 +89,16 @@ impl<'a> FnKind<'a> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum LifetimeCtxt {\n+    /// Appears in a reference type.\n+    Rptr,\n+    /// Appears as a bound on a type or another lifetime.\n+    Bound,\n+    /// Appears as a generic argument.\n+    GenericArg,\n+}\n+\n /// Each method of the `Visitor` trait is a hook to be potentially\n /// overridden. Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;\n@@ -184,7 +194,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_label(&mut self, label: &'ast Label) {\n         walk_label(self, label)\n     }\n-    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n         walk_lifetime(self, lifetime)\n     }\n     fn visit_mac_call(&mut self, mac: &'ast MacCall) {\n@@ -414,7 +424,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         TyKind::Slice(ref ty) | TyKind::Paren(ref ty) => visitor.visit_ty(ty),\n         TyKind::Ptr(ref mutable_type) => visitor.visit_ty(&mutable_type.ty),\n         TyKind::Rptr(ref opt_lifetime, ref mutable_type) => {\n-            walk_list!(visitor, visit_lifetime, opt_lifetime);\n+            walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Rptr);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n         TyKind::Tup(ref tuple_element_types) => {\n@@ -507,7 +517,7 @@ where\n     V: Visitor<'a>,\n {\n     match generic_arg {\n-        GenericArg::Lifetime(lt) => visitor.visit_lifetime(lt),\n+        GenericArg::Lifetime(lt) => visitor.visit_lifetime(lt, LifetimeCtxt::GenericArg),\n         GenericArg::Type(ty) => visitor.visit_ty(ty),\n         GenericArg::Const(ct) => visitor.visit_anon_const(ct),\n     }\n@@ -599,7 +609,9 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n         GenericBound::Trait(ref typ, ref modifier) => visitor.visit_poly_trait_ref(typ, modifier),\n-        GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n+        GenericBound::Outlives(ref lifetime) => {\n+            visitor.visit_lifetime(lifetime, LifetimeCtxt::Bound)\n+        }\n     }\n }\n \n@@ -639,7 +651,7 @@ pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a\n         WherePredicate::RegionPredicate(WhereRegionPredicate {\n             ref lifetime, ref bounds, ..\n         }) => {\n-            visitor.visit_lifetime(lifetime);\n+            visitor.visit_lifetime(lifetime, LifetimeCtxt::Bound);\n             walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, .. }) => {"}, {"sha": "14e5d2ae62337160d82b1be9fcd5bcb0a62d5af4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -1070,7 +1070,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_label(self, label);\n     }\n \n-    fn visit_lifetime(&mut self, lifetime: &'a Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &'a Lifetime, _: visit::LifetimeCtxt) {\n         self.check_lifetime(lifetime.ident);\n         visit::walk_lifetime(self, lifetime);\n     }"}, {"sha": "ee166f7570307f09692ce3af4ee888351df4a6c2", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -106,7 +106,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_variant(self, v)\n     }\n-    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &Lifetime, _: visit::LifetimeCtxt) {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }"}, {"sha": "fecbd4ae544ba635a5d30a7e9c274bfd9f259ea9", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -272,7 +272,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         });\n     }\n \n-    fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) {\n+    fn visit_lifetime(&mut self, lt: &'a ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n         run_early_pass!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }"}, {"sha": "6a234294ed161717ceb62a1cc38626fa832ebe6b", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -318,7 +318,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_variant(self, v)\n     }\n \n-    fn visit_lifetime(&mut self, lifetime: &'v ast::Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &'v ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n         self.record(\"Lifetime\", Id::None, lifetime);\n         ast_visit::walk_lifetime(self, lifetime)\n     }"}, {"sha": "33449a1ef9ed12febce8b96dfca1c938bfe3d634", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c57f27cdb41d86530e7038d7f191e3f1c74e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5953c57f27cdb41d86530e7038d7f191e3f1c74e", "patch": "@@ -793,7 +793,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         });\n         self.diagnostic_metadata.current_function = previous_value;\n     }\n-    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: visit::LifetimeCtxt) {\n         self.resolve_lifetime(lifetime)\n     }\n \n@@ -859,7 +859,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                 self.visit_ty(ty);\n             }\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArg::Lifetime(lt) => self.visit_lifetime(lt, visit::LifetimeCtxt::GenericArg),\n             GenericArg::Const(ct) => self.visit_anon_const(ct),\n         }\n         self.diagnostic_metadata.currently_processing_generics = prev;"}]}