{"sha": "5a29d2f08153d8132e63f2e41424b063fe3d8be0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjlkMmYwODE1M2Q4MTMyZTYzZjJlNDE0MjRiMDYzZmUzZDhiZTA=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-08-02T12:49:35Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-08-02T12:49:35Z"}, "message": "Fix nits for filemap", "tree": {"sha": "abd5ead498571e2866ef8905ed2a3bb7a45d76a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd5ead498571e2866ef8905ed2a3bb7a45d76a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a29d2f08153d8132e63f2e41424b063fe3d8be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a29d2f08153d8132e63f2e41424b063fe3d8be0", "html_url": "https://github.com/rust-lang/rust/commit/5a29d2f08153d8132e63f2e41424b063fe3d8be0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a29d2f08153d8132e63f2e41424b063fe3d8be0/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5927996f9c78e16d75235d5953d072757c8bae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5927996f9c78e16d75235d5953d072757c8bae", "html_url": "https://github.com/rust-lang/rust/commit/5b5927996f9c78e16d75235d5953d072757c8bae"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "8e09837df0a6284da8f12a19c6016e955e4aa210", "filename": "src/filemap.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a29d2f08153d8132e63f2e41424b063fe3d8be0/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a29d2f08153d8132e63f2e41424b063fe3d8be0/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=5a29d2f08153d8132e63f2e41424b063fe3d8be0", "patch": "@@ -13,8 +13,8 @@\n \n use strings::string_buffer::StringBuffer;\n use std::collections::HashMap;\n-use std::fs::File;\n-use std::io::{Write, stdout};\n+use std::fs::{self, File};\n+use std::io::{self, Write, stdout};\n use WriteMode;\n use NewlineStyle;\n use config::Config;\n@@ -32,10 +32,10 @@ pub fn append_newlines(file_map: &mut FileMap) {\n pub fn write_all_files(file_map: &FileMap,\n                        mode: WriteMode,\n                        config: &Config)\n-                       -> Result<(HashMap<String, String>), ::std::io::Error> {\n+                       -> Result<(HashMap<String, String>), io::Error> {\n     let mut result = HashMap::new();\n     for filename in file_map.keys() {\n-        let one_result = try!(write_file(file_map, filename, mode, config));\n+        let one_result = try!(write_file(&file_map[filename], filename, mode, config));\n         if let Some(r) = one_result {\n             result.insert(filename.clone(), r);\n         }\n@@ -44,18 +44,17 @@ pub fn write_all_files(file_map: &FileMap,\n     Ok(result)\n }\n \n-fn write_file(file_map: &FileMap,\n+fn write_file(text: &StringBuffer,\n               filename: &str,\n               mode: WriteMode,\n               config: &Config)\n-              -> Result<Option<String>, ::std::io::Error> {\n-    let text = &file_map[filename];\n+              -> Result<Option<String>, io::Error> {\n \n-        // prints all newlines either as `\\n` or as `\\r\\n`\n+    // prints all newlines either as `\\n` or as `\\r\\n`\n     fn write_system_newlines<T>(mut writer: T,\n                                 text: &StringBuffer,\n                                 config: &Config)\n-                                -> Result<(), ::std::io::Error>\n+                                -> Result<(), io::Error>\n         where T: Write\n     {\n         match config.newline_style {\n@@ -86,8 +85,8 @@ fn write_file(file_map: &FileMap,\n                     try!(write_system_newlines(tmp_file, text, config));\n                 }\n \n-                try!(::std::fs::rename(filename, bk_name));\n-                try!(::std::fs::rename(tmp_name, filename));\n+                try!(fs::rename(filename, bk_name));\n+                try!(fs::rename(tmp_name, filename));\n             }\n             WriteMode::NewFile(extn) => {\n                 let filename = filename.to_owned() + \".\" + extn;"}]}