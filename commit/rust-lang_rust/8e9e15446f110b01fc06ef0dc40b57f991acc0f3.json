{"sha": "8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWUxNTQ0NmYxMTBiMDFmYzA2ZWYwZGM0MGI1N2Y5OTFhY2MwZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T10:23:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:41Z"}, "message": "region_inference: extract taint into a sub-module", "tree": {"sha": "0f941277a3b7e75264f9ca600a6c8f49af35648c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f941277a3b7e75264f9ca600a6c8f49af35648c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "html_url": "https://github.com/rust-lang/rust/commit/8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e15446f110b01fc06ef0dc40b57f991acc0f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d63330b6d8720ef9a6fd0df42c06ea4915981d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d63330b6d8720ef9a6fd0df42c06ea4915981d1", "html_url": "https://github.com/rust-lang/rust/commit/9d63330b6d8720ef9a6fd0df42c06ea4915981d1"}], "stats": {"total": 185, "additions": 100, "deletions": 85}, "files": [{"sha": "91989d7b106da29c95818ed5e0c977a97f830211", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 85, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8e9e15446f110b01fc06ef0dc40b57f991acc0f3/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9e15446f110b01fc06ef0dc40b57f991acc0f3/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "patch": "@@ -29,6 +29,8 @@ use std::fmt;\n use std::mem;\n use std::u32;\n \n+mod taint;\n+\n /// A constraint that influences the inference process.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n pub enum Constraint<'tcx> {\n@@ -268,89 +270,6 @@ impl TaintDirections {\n     }\n }\n \n-struct TaintSet<'tcx> {\n-    directions: TaintDirections,\n-    regions: FxHashSet<ty::Region<'tcx>>\n-}\n-\n-impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n-    fn new(directions: TaintDirections,\n-           initial_region: ty::Region<'tcx>)\n-           -> Self {\n-        let mut regions = FxHashSet();\n-        regions.insert(initial_region);\n-        TaintSet { directions: directions, regions: regions }\n-    }\n-\n-    fn fixed_point(&mut self,\n-                   tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                   undo_log: &[UndoLogEntry<'tcx>],\n-                   verifys: &[Verify<'tcx>]) {\n-        let mut prev_len = 0;\n-        while prev_len < self.len() {\n-            debug!(\"tainted: prev_len = {:?} new_len = {:?}\",\n-                   prev_len, self.len());\n-\n-            prev_len = self.len();\n-\n-            for undo_entry in undo_log {\n-                match undo_entry {\n-                    &AddConstraint(ConstrainVarSubVar(a, b)) => {\n-                        self.add_edge(tcx.mk_region(ReVar(a)),\n-                                      tcx.mk_region(ReVar(b)));\n-                    }\n-                    &AddConstraint(ConstrainRegSubVar(a, b)) => {\n-                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n-                    }\n-                    &AddConstraint(ConstrainVarSubReg(a, b)) => {\n-                        self.add_edge(tcx.mk_region(ReVar(a)), b);\n-                    }\n-                    &AddConstraint(ConstrainRegSubReg(a, b)) => {\n-                        self.add_edge(a, b);\n-                    }\n-                    &AddGiven(a, b) => {\n-                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n-                    }\n-                    &AddVerify(i) => {\n-                        verifys[i].bound.for_each_region(&mut |b| {\n-                            self.add_edge(verifys[i].region, b);\n-                        });\n-                    }\n-                    &Purged |\n-                    &AddCombination(..) |\n-                    &AddVar(..) |\n-                    &OpenSnapshot |\n-                    &CommitedSnapshot => {}\n-                }\n-            }\n-        }\n-    }\n-\n-    fn into_set(self) -> FxHashSet<ty::Region<'tcx>> {\n-        self.regions\n-    }\n-\n-    fn len(&self) -> usize {\n-        self.regions.len()\n-    }\n-\n-    fn add_edge(&mut self,\n-                source: ty::Region<'tcx>,\n-                target: ty::Region<'tcx>) {\n-        if self.directions.incoming {\n-            if self.regions.contains(&target) {\n-                self.regions.insert(source);\n-            }\n-        }\n-\n-        if self.directions.outgoing {\n-            if self.regions.contains(&source) {\n-                self.regions.insert(target);\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> RegionVarBindings<'a, 'gcx, 'tcx> {\n         RegionVarBindings {\n@@ -863,11 +782,11 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         // `result_set` acts as a worklist: we explore all outgoing\n         // edges and add any new regions we find to result_set.  This\n         // is not a terribly efficient implementation.\n-        let mut taint_set = TaintSet::new(directions, r0);\n+        let mut taint_set = taint::TaintSet::new(directions, r0);\n         taint_set.fixed_point(self.tcx,\n                               &self.undo_log.borrow()[mark.length..],\n                               &self.verifys.borrow());\n-        debug!(\"tainted: result={:?}\", taint_set.regions);\n+        debug!(\"tainted: result={:?}\", taint_set);\n         return taint_set.into_set();\n     }\n }"}, {"sha": "acc930bfa3b1179a76111f769fb3fc096ab5c32d", "filename": "src/librustc/infer/region_inference/taint.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8e9e15446f110b01fc06ef0dc40b57f991acc0f3/src%2Flibrustc%2Finfer%2Fregion_inference%2Ftaint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9e15446f110b01fc06ef0dc40b57f991acc0f3/src%2Flibrustc%2Finfer%2Fregion_inference%2Ftaint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Ftaint.rs?ref=8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "patch": "@@ -0,0 +1,96 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::*;\n+\n+#[derive(Debug)]\n+pub(super) struct TaintSet<'tcx> {\n+    directions: TaintDirections,\n+    regions: FxHashSet<ty::Region<'tcx>>\n+}\n+\n+impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n+    pub(super) fn new(directions: TaintDirections,\n+                      initial_region: ty::Region<'tcx>)\n+                      -> Self {\n+        let mut regions = FxHashSet();\n+        regions.insert(initial_region);\n+        TaintSet { directions: directions, regions: regions }\n+    }\n+\n+    pub(super) fn fixed_point(&mut self,\n+                              tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                              undo_log: &[UndoLogEntry<'tcx>],\n+                              verifys: &[Verify<'tcx>]) {\n+        let mut prev_len = 0;\n+        while prev_len < self.len() {\n+            debug!(\"tainted: prev_len = {:?} new_len = {:?}\",\n+                   prev_len, self.len());\n+\n+            prev_len = self.len();\n+\n+            for undo_entry in undo_log {\n+                match undo_entry {\n+                    &AddConstraint(Constraint::VarSubVar(a, b)) => {\n+                        self.add_edge(tcx.mk_region(ReVar(a)),\n+                                      tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddConstraint(Constraint::RegSubVar(a, b)) => {\n+                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddConstraint(Constraint::VarSubReg(a, b)) => {\n+                        self.add_edge(tcx.mk_region(ReVar(a)), b);\n+                    }\n+                    &AddConstraint(Constraint::RegSubReg(a, b)) => {\n+                        self.add_edge(a, b);\n+                    }\n+                    &AddGiven(a, b) => {\n+                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddVerify(i) => {\n+                        verifys[i].bound.for_each_region(&mut |b| {\n+                            self.add_edge(verifys[i].region, b);\n+                        });\n+                    }\n+                    &Purged |\n+                    &AddCombination(..) |\n+                    &AddVar(..) |\n+                    &OpenSnapshot |\n+                    &CommitedSnapshot => {}\n+                }\n+            }\n+        }\n+    }\n+\n+    pub(super) fn into_set(self) -> FxHashSet<ty::Region<'tcx>> {\n+        self.regions\n+    }\n+\n+    fn len(&self) -> usize {\n+        self.regions.len()\n+    }\n+\n+    fn add_edge(&mut self,\n+                source: ty::Region<'tcx>,\n+                target: ty::Region<'tcx>) {\n+        if self.directions.incoming {\n+            if self.regions.contains(&target) {\n+                self.regions.insert(source);\n+            }\n+        }\n+\n+        if self.directions.outgoing {\n+            if self.regions.contains(&source) {\n+                self.regions.insert(target);\n+            }\n+        }\n+    }\n+}\n+"}]}