{"sha": "4787e97475de6be9487e3d9255a9c2d3c0bf9252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODdlOTc0NzVkZTZiZTk0ODdlM2Q5MjU1YTljMmQzYzBiZjkyNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T01:50:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T01:50:33Z"}, "message": "Auto merge of #66256 - CAD97:patch-2, r=RalfJung\n\nLayout::pad_to_align is infallible\n\nAs per [this comment](https://github.com/rust-lang/rust/issues/55724#issuecomment-441421651) (cc @glandium).\n\n> Per https://github.com/rust-lang/rust/blob/eb981a1/src/libcore/alloc.rs#L63-L65, `layout.size()` is always <= `usize::MAX - (layout.align() - 1)`.\n>\n> Which means:\n>\n> * The maximum value `layout.size()` can have is already aligned for `layout.align()` (`layout.align()` being a power of two, `usize::MAX - (layout.align() - 1)` is a multiple of `layout.align()`)\n> * Incidentally, any value smaller than that maximum value will align at most to that maximum value.\n>\n> IOW, `pad_to_align` can not return `Err(LayoutErr)`, except for the layout not respecting its invariants, but we shouldn't care about that.\n\nThis PR makes `pad_to_align` return `Layout` directly, representing the fact that it cannot fail.", "tree": {"sha": "1392d3c24ff90ef3424c873bd51b4cca055c6c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1392d3c24ff90ef3424c873bd51b4cca055c6c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4787e97475de6be9487e3d9255a9c2d3c0bf9252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4787e97475de6be9487e3d9255a9c2d3c0bf9252", "html_url": "https://github.com/rust-lang/rust/commit/4787e97475de6be9487e3d9255a9c2d3c0bf9252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4787e97475de6be9487e3d9255a9c2d3c0bf9252/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc0011561c6365c596dfd8fa1ef388162bc89c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc0011561c6365c596dfd8fa1ef388162bc89c7", "html_url": "https://github.com/rust-lang/rust/commit/fdc0011561c6365c596dfd8fa1ef388162bc89c7"}, {"sha": "d1e53da80992d27073b3e918bd56d6c0692f160c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e53da80992d27073b3e918bd56d6c0692f160c", "html_url": "https://github.com/rust-lang/rust/commit/d1e53da80992d27073b3e918bd56d6c0692f160c"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "2254cde7f49cca749837f767ec46f1fc77256e98", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=4787e97475de6be9487e3d9255a9c2d3c0bf9252", "patch": "@@ -926,7 +926,7 @@ impl<T: ?Sized> Rc<T> {\n         // reference (see #54908).\n         let layout = Layout::new::<RcBox<()>>()\n             .extend(value_layout).unwrap().0\n-            .pad_to_align().unwrap();\n+            .pad_to_align();\n \n         // Allocate for the layout.\n         let mem = Global.alloc(layout)"}, {"sha": "7bf2ff13615dc70834c2bf3243ae3c94e60f913a", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=4787e97475de6be9487e3d9255a9c2d3c0bf9252", "patch": "@@ -780,7 +780,7 @@ impl<T: ?Sized> Arc<T> {\n         // reference (see #54908).\n         let layout = Layout::new::<ArcInner<()>>()\n             .extend(value_layout).unwrap().0\n-            .pad_to_align().unwrap();\n+            .pad_to_align();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));"}, {"sha": "4798769823f436b254a57b097ef0ea8a15199821", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787e97475de6be9487e3d9255a9c2d3c0bf9252/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=4787e97475de6be9487e3d9255a9c2d3c0bf9252", "patch": "@@ -213,18 +213,19 @@ impl Layout {\n     /// Creates a layout by rounding the size of this layout up to a multiple\n     /// of the layout's alignment.\n     ///\n-    /// Returns `Err` if the padded size would overflow.\n-    ///\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn pad_to_align(&self) -> Result<Layout, LayoutErr> {\n+    pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());\n-        let new_size = self.size().checked_add(pad)\n-            .ok_or(LayoutErr { private: () })?;\n+        // This cannot overflow. Quoting from the invariant of Layout:\n+        // > `size`, when rounded up to the nearest multiple of `align`,\n+        // > must not overflow (i.e., the rounded value must be less than\n+        // > `usize::MAX`)\n+        let new_size = self.size() + pad;\n \n-        Layout::from_size_align(new_size, self.align())\n+        Layout::from_size_align(new_size, self.align()).unwrap()\n     }\n \n     /// Creates a layout describing the record for `n` instances of"}]}