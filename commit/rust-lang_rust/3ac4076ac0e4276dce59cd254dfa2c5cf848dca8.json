{"sha": "3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYzQwNzZhYzBlNDI3NmRjZTU5Y2QyNTRkZmEyYzVjZjg0OGRjYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-10T06:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-10T06:41:48Z"}, "message": "Auto merge of #32097 - jseyfried:fix_resolution_regression, r=nikomatsakis\n\nFix a regression in import resolution\n\nThis fixes #32089 (caused by #31726) by deducing that name resolution has failed (as opposed to being determinate) in more cases.\n\nr? @nikomatsakis", "tree": {"sha": "ffbdc315bd3e6d7efab537efa1f1f6cab164ae03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbdc315bd3e6d7efab537efa1f1f6cab164ae03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "html_url": "https://github.com/rust-lang/rust/commit/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcda58f49133921abd091d7f800732fe2c4e5a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcda58f49133921abd091d7f800732fe2c4e5a98", "html_url": "https://github.com/rust-lang/rust/commit/bcda58f49133921abd091d7f800732fe2c4e5a98"}, {"sha": "4dc4cae79a07017695889b672d335e7c63c95416", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc4cae79a07017695889b672d335e7c63c95416", "html_url": "https://github.com/rust-lang/rust/commit/4dc4cae79a07017695889b672d335e7c63c95416"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "ad4bcff1d3d9a3df92f537a3c791610823ad5b15", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "patch": "@@ -667,8 +667,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         match subclass {\n             SingleImport { target, .. } => {\n-                module_.increment_outstanding_references_for(target, ValueNS);\n-                module_.increment_outstanding_references_for(target, TypeNS);\n+                module_.increment_outstanding_references_for(target, ValueNS, is_public);\n+                module_.increment_outstanding_references_for(target, TypeNS, is_public);\n             }\n             GlobImport => {\n                 // Set the glob flag. This tells us that we don't know the"}, {"sha": "97124b7f46a735e0724c4b91ee65a907db31c3a1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "patch": "@@ -124,8 +124,10 @@ impl ImportDirective {\n #[derive(Clone, Default)]\n /// Records information about the resolution of a name in a module.\n pub struct NameResolution<'a> {\n-    /// The number of unresolved single imports that could define the name.\n-    outstanding_references: usize,\n+    /// The number of unresolved single imports of any visibility that could define the name.\n+    outstanding_references: u32,\n+    /// The number of unresolved `pub` single imports that could define the name.\n+    pub_outstanding_references: u32,\n     /// The least shadowable known binding for this name, or None if there are no known bindings.\n     pub binding: Option<&'a NameBinding<'a>>,\n     duplicate_globs: Vec<&'a NameBinding<'a>>,\n@@ -151,9 +153,12 @@ impl<'a> NameResolution<'a> {\n     }\n \n     // Returns the resolution of the name assuming no more globs will define it.\n-    fn result(&self) -> ResolveResult<&'a NameBinding<'a>> {\n+    fn result(&self, allow_private_imports: bool) -> ResolveResult<&'a NameBinding<'a>> {\n         match self.binding {\n             Some(binding) if !binding.defined_with(DefModifiers::GLOB_IMPORTED) => Success(binding),\n+            // If we don't allow private imports and no public imports can define the name, fail.\n+            _ if !allow_private_imports && self.pub_outstanding_references == 0 &&\n+                 !self.binding.map(NameBinding::is_public).unwrap_or(false) => Failed(None),\n             _ if self.outstanding_references > 0 => Indeterminate,\n             Some(binding) => Success(binding),\n             None => Failed(None),\n@@ -162,8 +167,9 @@ impl<'a> NameResolution<'a> {\n \n     // Returns Some(the resolution of the name), or None if the resolution depends\n     // on whether more globs can define the name.\n-    fn try_result(&self) -> Option<ResolveResult<&'a NameBinding<'a>>> {\n-        match self.result() {\n+    fn try_result(&self, allow_private_imports: bool)\n+                  -> Option<ResolveResult<&'a NameBinding<'a>>> {\n+        match self.result(allow_private_imports) {\n             Success(binding) if binding.defined_with(DefModifiers::PRELUDE) => None,\n             Failed(_) => None,\n             result @ _ => Some(result),\n@@ -200,7 +206,7 @@ impl<'a> ::ModuleS<'a> {\n         };\n \n         let resolution = resolutions.get(&(name, ns)).cloned().unwrap_or_default();\n-        if let Some(result) = resolution.try_result() {\n+        if let Some(result) = resolution.try_result(allow_private_imports) {\n             // If the resolution doesn't depend on glob definability, check privacy and return.\n             return result.and_then(|binding| {\n                 let allowed = allow_private_imports || !binding.is_import() || binding.is_public();\n@@ -234,7 +240,7 @@ impl<'a> ::ModuleS<'a> {\n             }\n         }\n \n-        resolution.result()\n+        resolution.result(true)\n     }\n \n     // Define the name or return the existing binding if there is a collision.\n@@ -246,15 +252,26 @@ impl<'a> ::ModuleS<'a> {\n         })\n     }\n \n-    pub fn increment_outstanding_references_for(&self, name: Name, ns: Namespace) {\n+    pub fn increment_outstanding_references_for(&self, name: Name, ns: Namespace, is_public: bool) {\n         let mut resolutions = self.resolutions.borrow_mut();\n-        resolutions.entry((name, ns)).or_insert_with(Default::default).outstanding_references += 1;\n+        let resolution = resolutions.entry((name, ns)).or_insert_with(Default::default);\n+        resolution.outstanding_references += 1;\n+        if is_public {\n+            resolution.pub_outstanding_references += 1;\n+        }\n     }\n \n-    fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace) {\n-        self.update_resolution(name, ns, |resolution| match resolution.outstanding_references {\n-            0 => panic!(\"No more outstanding references!\"),\n-            ref mut outstanding_references => *outstanding_references -= 1,\n+    fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace, is_public: bool) {\n+        let decrement_references = |count: &mut _| {\n+            assert!(*count > 0);\n+            *count -= 1;\n+        };\n+\n+        self.update_resolution(name, ns, |resolution| {\n+            decrement_references(&mut resolution.outstanding_references);\n+            if is_public {\n+                decrement_references(&mut resolution.pub_outstanding_references);\n+            }\n         })\n     }\n \n@@ -265,11 +282,11 @@ impl<'a> ::ModuleS<'a> {\n     {\n         let mut resolutions = self.resolutions.borrow_mut();\n         let resolution = resolutions.entry((name, ns)).or_insert_with(Default::default);\n-        let was_success = resolution.try_result().and_then(ResolveResult::success).is_some();\n+        let was_success = resolution.try_result(false).and_then(ResolveResult::success).is_some();\n \n         let t = update(resolution);\n         if !was_success {\n-            if let Some(Success(binding)) = resolution.try_result() {\n+            if let Some(Success(binding)) = resolution.try_result(false) {\n                 self.define_in_glob_importers(name, ns, binding);\n             }\n         }\n@@ -460,10 +477,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             let mut resolve_in_ns = |ns, determined: bool| {\n                 // Temporarily count the directive as determined so that the resolution fails\n                 // (as opposed to being indeterminate) when it can only be defined by the directive.\n-                if !determined { module_.decrement_outstanding_references_for(target, ns) }\n+                if !determined {\n+                    module_.decrement_outstanding_references_for(target, ns, directive.is_public)\n+                }\n                 let result =\n                     self.resolver.resolve_name_in_module(target_module, source, ns, false, true);\n-                if !determined { module_.increment_outstanding_references_for(target, ns) }\n+                if !determined {\n+                    module_.increment_outstanding_references_for(target, ns, directive.is_public)\n+                }\n                 result\n             };\n             (resolve_in_ns(ValueNS, value_determined.get()),\n@@ -494,7 +515,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     self.report_conflict(target, ns, &directive.import(binding, None), old_binding);\n                 }\n             }\n-            module_.decrement_outstanding_references_for(target, ns);\n+            module_.decrement_outstanding_references_for(target, ns, directive.is_public);\n         }\n \n         match (&value_result, &type_result) {\n@@ -601,7 +622,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         for (&(name, ns), resolution) in target_module.resolutions.borrow().iter() {\n-            if let Some(Success(binding)) = resolution.try_result() {\n+            if let Some(Success(binding)) = resolution.try_result(false) {\n                 if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n                     let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n                 }"}, {"sha": "5da7b9fff6e9a491cc3bb22c26690a3ff97093aa", "filename": "src/test/compile-fail/issue-32089.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Ftest%2Fcompile-fail%2Fissue-32089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac4076ac0e4276dce59cd254dfa2c5cf848dca8/src%2Ftest%2Fcompile-fail%2Fissue-32089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32089.rs?ref=3ac4076ac0e4276dce59cd254dfa2c5cf848dca8", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused_imports)]\n+\n+pub type Type = i32;\n+\n+mod one { use super::Type; }\n+pub use self::one::*;\n+\n+mod two { use super::Type; }\n+pub use self::two::*;\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}]}