{"sha": "20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjBmM2MxZjEzMWI1NGRjYzZmZGM3ZWViMWQwNGVhODlmNWY2ZmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-29T10:14:01Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-06T06:14:21Z"}, "message": "rustc: move some maps from ty to hir.", "tree": {"sha": "6534c4d72173c9bdaffd33c78bce4c7172baf022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6534c4d72173c9bdaffd33c78bce4c7172baf022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "html_url": "https://github.com/rust-lang/rust/commit/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffca6c3e155cb6033b1f749d0ba1be32dfc4d22a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffca6c3e155cb6033b1f749d0ba1be32dfc4d22a", "html_url": "https://github.com/rust-lang/rust/commit/ffca6c3e155cb6033b1f749d0ba1be32dfc4d22a"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "edb9b783527652d3245cb823ff60c4c34d608317", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -33,6 +33,10 @@ pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n pub use self::PathParameters::*;\n \n+use hir::def::Def;\n+use hir::def_id::DefId;\n+use util::nodemap::{NodeMap, FnvHashSet};\n+\n use syntax::codemap::{self, Span, Spanned, DUMMY_SP, ExpnId};\n use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, TokenTree, AsmDialect};\n@@ -1625,3 +1629,24 @@ impl ForeignItem_ {\n         }\n     }\n }\n+\n+/// A free variable referred to in a function.\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+pub struct Freevar {\n+    /// The variable being accessed free.\n+    pub def: Def,\n+\n+    // First span where it is accessed (there can be multiple).\n+    pub span: Span\n+}\n+\n+pub type FreevarMap = NodeMap<Vec<Freevar>>;\n+\n+pub type CaptureModeMap = NodeMap<CaptureClause>;\n+\n+// Trait method resolution\n+pub type TraitMap = NodeMap<Vec<DefId>>;\n+\n+// Map from the NodeId of a glob import to a list of items which are actually\n+// imported.\n+pub type GlobMap = NodeMap<FnvHashSet<Name>>;"}, {"sha": "bdba700f49ad52cdafee8b22dd120ae59f61ec93", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -27,7 +27,7 @@ use traits;\n use ty::{self, TraitRef, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants};\n use ty::{AdtDef, ClosureSubsts, ExistentialBounds, Region};\n-use ty::{FreevarMap};\n+use hir::FreevarMap;\n use ty::{BareFnTy, InferTy, ParamTy, ProjectionTy, TraitTy};\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n use ty::TypeVariants::*;"}, {"sha": "4ff859f5a94bf9b343bb411f7c49b93b0ec426c4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -33,7 +33,7 @@ use ty::fold::TypeFolder;\n use ty::subst::{Subst, Substs, VecPerParamSpace};\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n-use util::nodemap::{NodeMap, NodeSet};\n+use util::nodemap::NodeSet;\n use util::nodemap::FnvHashMap;\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};\n@@ -44,7 +44,6 @@ use std::iter;\n use std::rc::Rc;\n use std::slice;\n use std::vec::IntoIter;\n-use std::collections::{HashMap, HashSet};\n use syntax::ast::{self, CrateNum, Name, NodeId};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{DUMMY_SP, Span};\n@@ -115,7 +114,7 @@ pub struct CrateAnalysis<'a> {\n     pub access_levels: middle::privacy::AccessLevels,\n     pub reachable: NodeSet,\n     pub name: &'a str,\n-    pub glob_map: Option<GlobMap>,\n+    pub glob_map: Option<hir::GlobMap>,\n }\n \n #[derive(Copy, Clone)]\n@@ -2724,30 +2723,9 @@ pub enum ExplicitSelfCategory {\n     ByBox,\n }\n \n-/// A free variable referred to in a function.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub struct Freevar {\n-    /// The variable being accessed free.\n-    pub def: Def,\n-\n-    // First span where it is accessed (there can be multiple).\n-    pub span: Span\n-}\n-\n-pub type FreevarMap = NodeMap<Vec<Freevar>>;\n-\n-pub type CaptureModeMap = NodeMap<hir::CaptureClause>;\n-\n-// Trait method resolution\n-pub type TraitMap = NodeMap<Vec<DefId>>;\n-\n-// Map from the NodeId of a glob import to a list of items which are actually\n-// imported.\n-pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n-\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn with_freevars<T, F>(&self, fid: NodeId, f: F) -> T where\n-        F: FnOnce(&[Freevar]) -> T,\n+        F: FnOnce(&[hir::Freevar]) -> T,\n     {\n         match self.freevars.borrow().get(&fid) {\n             None => f(&[]),"}, {"sha": "3becc93f8a4f50bf464400765bd6ded20af78d4d", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -410,20 +410,20 @@ impl tr for Def {\n // ______________________________________________________________________\n // Encoding and decoding of freevar information\n \n-fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &ty::Freevar) {\n+fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &hir::Freevar) {\n     (*fv).encode(rbml_w).unwrap();\n }\n \n trait rbml_decoder_helper {\n     fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n-                          -> ty::Freevar;\n+                          -> hir::Freevar;\n     fn read_capture_mode(&mut self) -> hir::CaptureClause;\n }\n \n impl<'a> rbml_decoder_helper for reader::Decoder<'a> {\n     fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n-                          -> ty::Freevar {\n-        let fv: ty::Freevar = Decodable::decode(self).unwrap();\n+                          -> hir::Freevar {\n+        let fv: hir::Freevar = Decodable::decode(self).unwrap();\n         fv.tr(dcx)\n     }\n \n@@ -433,9 +433,9 @@ impl<'a> rbml_decoder_helper for reader::Decoder<'a> {\n     }\n }\n \n-impl tr for ty::Freevar {\n-    fn tr(&self, dcx: &DecodeContext) -> ty::Freevar {\n-        ty::Freevar {\n+impl tr for hir::Freevar {\n+    fn tr(&self, dcx: &DecodeContext) -> hir::Freevar {\n+        hir::Freevar {\n             def: self.def.tr(dcx),\n             span: self.span.tr(dcx),\n         }"}, {"sha": "12dcb32da3fcd81fbf9ff3f6892ff66244553a90", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -958,7 +958,7 @@ fn overloaded_lvalue<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n \n fn capture_freevar<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                                  closure_expr: &'tcx hir::Expr,\n-                                 freevar: &ty::Freevar,\n+                                 freevar: &hir::Freevar,\n                                  freevar_ty: Ty<'tcx>)\n                                  -> ExprRef<'tcx> {\n     let id_var = freevar.def.var_id();"}, {"sha": "299a8c0299d0edfce01a9aeaf7191156a859fd8e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -56,8 +56,8 @@ use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::pat_util::pat_bindings;\n use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace};\n-use rustc::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, FnvHashMap};\n+use rustc::hir::{Freevar, FreevarMap, TraitMap, GlobMap};\n+use rustc::util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n-            glob_map: HashMap::new(),\n+            glob_map: NodeMap(),\n \n             callback: None,\n             resolved: false,\n@@ -1253,7 +1253,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             return;\n         }\n \n-        let mut new_set = HashSet::new();\n+        let mut new_set = FnvHashSet();\n         new_set.insert(name);\n         self.glob_map.insert(import_id, new_set);\n     }"}, {"sha": "7f27d10ce1ec3c097f3ee25fd25a7ee8798e49b0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=20f0f3c1f131b54dcc6fdc7eeb1d04ea89f5f6fd", "patch": "@@ -136,7 +136,7 @@ pub struct TypeAndSubsts<'tcx> {\n \n pub struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n-    pub trait_map: ty::TraitMap,\n+    pub trait_map: hir::TraitMap,\n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n     /// error reporting, and so is lazily initialised and generally\n@@ -329,7 +329,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n     }\n }\n \n-pub fn check_crate(tcx: &TyCtxt, trait_map: ty::TraitMap) -> CompileResult {\n+pub fn check_crate(tcx: &TyCtxt, trait_map: hir::TraitMap) -> CompileResult {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         trait_map: trait_map,"}]}