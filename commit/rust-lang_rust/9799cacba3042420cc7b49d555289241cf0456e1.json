{"sha": "9799cacba3042420cc7b49d555289241cf0456e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OTljYWNiYTMwNDI0MjBjYzdiNDlkNTU1Mjg5MjQxY2YwNDU2ZTE=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-15T17:03:42Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-24T05:33:31Z"}, "message": "fatal error instead of ICE for impossible range during HIR lowering\n\nEnd-less ranges (`a...`) don't parse but bad syntax extensions could\nconceivably produce them. Unbounded ranges (`...`) do parse and are\ncaught here.\n\nThe other panics in HIR lowering are all for unexpanded macros, which\ncannot be constructed by bad syntax extensions.", "tree": {"sha": "7a08fce357b03fc4e9b5a53949dd52348c1aaddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a08fce357b03fc4e9b5a53949dd52348c1aaddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9799cacba3042420cc7b49d555289241cf0456e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9799cacba3042420cc7b49d555289241cf0456e1", "html_url": "https://github.com/rust-lang/rust/commit/9799cacba3042420cc7b49d555289241cf0456e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9799cacba3042420cc7b49d555289241cf0456e1/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd80c1bb5540fa2610a8f3d8a25560d1f0981400", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd80c1bb5540fa2610a8f3d8a25560d1f0981400", "html_url": "https://github.com/rust-lang/rust/commit/cd80c1bb5540fa2610a8f3d8a25560d1f0981400"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "a02f82745279f71c5c358265ae91bf9a26f57f0e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9799cacba3042420cc7b49d555289241cf0456e1", "patch": "@@ -336,6 +336,10 @@ impl NodeIdAssigner for Session {\n     fn peek_node_id(&self) -> NodeId {\n         self.next_node_id.get().checked_add(1).unwrap()\n     }\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        self.diagnostic()\n+    }\n }\n \n fn split_msg_into_multilines(msg: &str) -> Option<String> {"}, {"sha": "a0466de999acfa031431d459c7108cb624ad1644", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=9799cacba3042420cc7b49d555289241cf0456e1", "patch": "@@ -68,6 +68,7 @@ use std::collections::HashMap;\n use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n+use syntax::errors::Handler;\n use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n@@ -140,6 +141,11 @@ impl<'a, 'hir> LoweringContext<'a> {\n             result\n         }\n     }\n+\n+    // panics if this LoweringContext's NodeIdAssigner is not a Session\n+    fn diagnostic(&self) -> &Handler {\n+        self.id_assigner.diagnostic()\n+    }\n }\n \n // Utility fn for setting and unsetting the cached id.\n@@ -1289,7 +1295,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                             make_struct(lctx, e, &[\"RangeInclusive\", \"NonEmpty\"],\n                                                  &[(\"start\", e1), (\"end\", e2)]),\n \n-                        _ => panic!(\"impossible range in AST\"),\n+                        _ => panic!(lctx.diagnostic().span_fatal(e.span,\n+                                                                 \"inclusive range with no end\"))\n                     }\n                 });\n             }"}, {"sha": "e096aa9902476e6bbcf1414e4f9e364246fd1e32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9799cacba3042420cc7b49d555289241cf0456e1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9799cacba3042420cc7b49d555289241cf0456e1", "patch": "@@ -19,6 +19,7 @@ pub use self::PathParameters::*;\n use attr::ThinAttributes;\n use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n+use errors;\n use ext::base;\n use ext::tt::macro_parser;\n use parse::token::InternedString;\n@@ -344,6 +345,10 @@ pub const DUMMY_NODE_ID: NodeId = !0;\n pub trait NodeIdAssigner {\n     fn next_node_id(&self) -> NodeId;\n     fn peek_node_id(&self) -> NodeId;\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        panic!(\"this ID assigner cannot emit diagnostics\")\n+    }\n }\n \n /// The AST represents all type param bounds as types."}, {"sha": "be2a63a07bbd6bbec3ae8015826cdfae1f68cf5f", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9799cacba3042420cc7b49d555289241cf0456e1/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9799cacba3042420cc7b49d555289241cf0456e1/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=9799cacba3042420cc7b49d555289241cf0456e1", "patch": "@@ -13,6 +13,7 @@\n #![feature(inclusive_range_syntax, inclusive_range)]\n \n pub fn main() {\n-    for _ in 1... {}\n-} //~ ERROR expected one of\n+    for _ in 1... {} //~ERROR inclusive range with no end\n+                     //~^HELP 28237\n+}\n "}]}