{"sha": "b7d7f70d09e38ce9331826eaba6b78e06cec6a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZDdmNzBkMDllMzhjZTkzMzE4MjZlYWJhNmI3OGUwNmNlYzZhNjM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-26T23:55:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-26T23:55:54Z"}, "message": "Slight shaving on RA, no more optimizing today. It's fast enough for now.", "tree": {"sha": "bb5c189ba7005128869d7d9e999ff1ba14c5e37e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5c189ba7005128869d7d9e999ff1ba14c5e37e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d7f70d09e38ce9331826eaba6b78e06cec6a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d7f70d09e38ce9331826eaba6b78e06cec6a63", "html_url": "https://github.com/rust-lang/rust/commit/b7d7f70d09e38ce9331826eaba6b78e06cec6a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d7f70d09e38ce9331826eaba6b78e06cec6a63/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a61fb8eb705ce0ff1bca964f89d68d93c6a07b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a61fb8eb705ce0ff1bca964f89d68d93c6a07b0", "html_url": "https://github.com/rust-lang/rust/commit/1a61fb8eb705ce0ff1bca964f89d68d93c6a07b0"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "53b4f46f9297685e0d9c557fdfcb3fbf13da54d5", "filename": "src/boot/be/ra.ml", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7d7f70d09e38ce9331826eaba6b78e06cec6a63/src%2Fboot%2Fbe%2Fra.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b7d7f70d09e38ce9331826eaba6b78e06cec6a63/src%2Fboot%2Fbe%2Fra.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fra.ml?ref=b7d7f70d09e38ce9331826eaba6b78e06cec6a63", "patch": "@@ -190,11 +190,14 @@ let calculate_live_bitvectors\n   let n_quads = Array.length quads in\n   let n_vregs = cx.ctxt_n_vregs in\n   let new_bitv _ = Bits.create n_vregs false in\n+  let new_true_bitv _ = Bits.create n_vregs true in\n   let (live_in_vregs:Bits.t array) = Array.init n_quads new_bitv in\n   let (live_out_vregs:Bits.t array) = Array.init n_quads new_bitv in\n \n   let (quad_used_vrs:Bits.t array) = Array.init n_quads new_bitv in\n-  let (quad_defined_vrs:Bits.t array) = Array.init n_quads new_bitv in\n+  let (quad_not_defined_vrs:Bits.t array) =\n+    Array.init n_quads new_true_bitv\n+  in\n   let (quad_uncond_jmp:bool array) = Array.make n_quads false in\n   let (quad_jmp_targs:(Il.label list) array) = Array.make n_quads [] in\n \n@@ -212,8 +215,8 @@ let calculate_live_bitvectors\n           (fun v -> Bits.set quad_used_vrs.(i) v true)\n           (quad_used_vregs q);\n         List.iter\n-          (fun v -> Bits.set quad_defined_vrs.(i) v true)\n-          (quad_defined_vregs q)\n+          (fun v -> Bits.set quad_not_defined_vrs.(i) v false)\n+          (quad_defined_vregs q);\n     done;\n \n     while !changed do\n@@ -228,7 +231,7 @@ let calculate_live_bitvectors\n         let live_in = live_in_vregs.(i) in\n         let live_out = live_out_vregs.(i) in\n         let used = quad_used_vrs.(i) in\n-        let defined = quad_defined_vrs.(i) in\n+        let not_defined = quad_not_defined_vrs.(i) in\n \n           (* Union in the vregs we use. *)\n           note_change (Bits.union live_in used);\n@@ -243,8 +246,7 @@ let calculate_live_bitvectors\n           then note_change (Bits.union live_out live_in_vregs.(i+1));\n \n           (* Propagate live-out to live-in on anything we don't define. *)\n-          ignore (Bits.copy scratch defined);\n-          Bits.invert scratch;\n+          ignore (Bits.copy scratch not_defined);\n           ignore (Bits.intersect scratch live_out);\n           note_change (Bits.union live_in scratch);\n \n@@ -379,8 +381,7 @@ let reg_alloc\n     let n_pre_spills = convert_pre_spills cx spill_slot in\n \n     let (live_in_vregs, live_out_vregs) =\n-      Session.time_inner \"RA liveness\" sess\n-        (fun _ -> calculate_live_bitvectors cx)\n+      calculate_live_bitvectors cx\n     in\n     let (vreg_constraints:Bits.t array) = (* vreg idx -> hreg bits.t *)\n       calculate_vreg_constraints cx"}]}