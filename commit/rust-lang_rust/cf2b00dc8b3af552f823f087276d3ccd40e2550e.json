{"sha": "cf2b00dc8b3af552f823f087276d3ccd40e2550e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmIwMGRjOGIzYWY1NTJmODIzZjA4NzI3NmQzY2NkNDBlMjU1MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-04T23:52:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-04T23:52:34Z"}, "message": "auto merge of #6941 : Thiez/rust/pub_atomics, r=thestinger\n\nAs the title suggests, this marks all the fns on the impls on the atomic types in std::unstable::atomics as pub, which makes them significantly more usable (they are rather unusable otherwise).\r\nr?", "tree": {"sha": "5c715fc5e392d2b84ee39e1d377c0f7afb1fa7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c715fc5e392d2b84ee39e1d377c0f7afb1fa7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2b00dc8b3af552f823f087276d3ccd40e2550e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b00dc8b3af552f823f087276d3ccd40e2550e", "html_url": "https://github.com/rust-lang/rust/commit/cf2b00dc8b3af552f823f087276d3ccd40e2550e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b00dc8b3af552f823f087276d3ccd40e2550e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75c11a06108430b658f52e8e491c3fc208aeabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75c11a06108430b658f52e8e491c3fc208aeabd", "html_url": "https://github.com/rust-lang/rust/commit/c75c11a06108430b658f52e8e491c3fc208aeabd"}, {"sha": "979b037e5a7541a1d77453091839cb7dcf124ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/979b037e5a7541a1d77453091839cb7dcf124ba7", "html_url": "https://github.com/rust-lang/rust/commit/979b037e5a7541a1d77453091839cb7dcf124ba7"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "58d0c01f990d047bf686e068b3c1c91c32aa6fdf", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b00dc8b3af552f823f087276d3ccd40e2550e/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b00dc8b3af552f823f087276d3ccd40e2550e/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=cf2b00dc8b3af552f823f087276d3ccd40e2550e", "patch": "@@ -75,15 +75,15 @@ pub enum Ordering {\n \n impl AtomicFlag {\n \n-    fn new() -> AtomicFlag {\n+    pub fn new() -> AtomicFlag {\n         AtomicFlag { v: 0 }\n     }\n \n     /**\n      * Clears the atomic flag\n      */\n     #[inline(always)]\n-    fn clear(&mut self, order: Ordering) {\n+    pub fn clear(&mut self, order: Ordering) {\n         unsafe {atomic_store(&mut self.v, 0, order)}\n     }\n \n@@ -92,37 +92,37 @@ impl AtomicFlag {\n      * flag.\n      */\n     #[inline(always)]\n-    fn test_and_set(&mut self, order: Ordering) -> bool {\n+    pub fn test_and_set(&mut self, order: Ordering) -> bool {\n         unsafe {atomic_compare_and_swap(&mut self.v, 0, 1, order) > 0}\n     }\n }\n \n impl AtomicBool {\n-    fn new(v: bool) -> AtomicBool {\n+    pub fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: if v { 1 } else { 0 } }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order: Ordering) -> bool {\n+    pub fn load(&self, order: Ordering) -> bool {\n         unsafe { atomic_load(&self.v, order) > 0 }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val: bool, order: Ordering) {\n+    pub fn store(&mut self, val: bool, order: Ordering) {\n         let val = if val { 1 } else { 0 };\n \n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val: bool, order: Ordering) -> bool {\n+    pub fn swap(&mut self, val: bool, order: Ordering) -> bool {\n         let val = if val { 1 } else { 0 };\n \n         unsafe { atomic_swap(&mut self.v, val, order) > 0}\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: bool, new: bool, order: Ordering) -> bool {\n+    pub fn compare_and_swap(&mut self, old: bool, new: bool, order: Ordering) -> bool {\n         let old = if old { 1 } else { 0 };\n         let new = if new { 1 } else { 0 };\n \n@@ -131,113 +131,113 @@ impl AtomicBool {\n }\n \n impl AtomicInt {\n-    fn new(v: int) -> AtomicInt {\n+    pub fn new(v: int) -> AtomicInt {\n         AtomicInt { v:v }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order: Ordering) -> int {\n+    pub fn load(&self, order: Ordering) -> int {\n         unsafe { atomic_load(&self.v, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val: int, order: Ordering) {\n+    pub fn store(&mut self, val: int, order: Ordering) {\n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val: int, order: Ordering) -> int {\n+    pub fn swap(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_swap(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: int, new: int, order: Ordering) -> int {\n+    pub fn compare_and_swap(&mut self, old: int, new: int, order: Ordering) -> int {\n         unsafe { atomic_compare_and_swap(&mut self.v, old, new, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_add(&mut self, val: int, order: Ordering) -> int {\n+    pub fn fetch_add(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_add(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_sub(&mut self, val: int, order: Ordering) -> int {\n+    pub fn fetch_sub(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n }\n \n impl AtomicUint {\n-    fn new(v: uint) -> AtomicUint {\n+    pub fn new(v: uint) -> AtomicUint {\n         AtomicUint { v:v }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order: Ordering) -> uint {\n+    pub fn load(&self, order: Ordering) -> uint {\n         unsafe { atomic_load(&self.v, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val: uint, order: Ordering) {\n+    pub fn store(&mut self, val: uint, order: Ordering) {\n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val: uint, order: Ordering) -> uint {\n+    pub fn swap(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_swap(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: uint, new: uint, order: Ordering) -> uint {\n+    pub fn compare_and_swap(&mut self, old: uint, new: uint, order: Ordering) -> uint {\n         unsafe { atomic_compare_and_swap(&mut self.v, old, new, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_add(&mut self, val: uint, order: Ordering) -> uint {\n+    pub fn fetch_add(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_add(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_sub(&mut self, val: uint, order: Ordering) -> uint {\n+    pub fn fetch_sub(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n }\n \n impl<T> AtomicPtr<T> {\n-    fn new(p: *mut T) -> AtomicPtr<T> {\n+    pub fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p:p }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order: Ordering) -> *mut T {\n+    pub fn load(&self, order: Ordering) -> *mut T {\n         unsafe { atomic_load(&self.p, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, ptr: *mut T, order: Ordering) {\n+    pub fn store(&mut self, ptr: *mut T, order: Ordering) {\n         unsafe { atomic_store(&mut self.p, ptr, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, ptr: *mut T, order: Ordering) -> *mut T {\n+    pub fn swap(&mut self, ptr: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_swap(&mut self.p, ptr, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order: Ordering) -> *mut T {\n+    pub fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_compare_and_swap(&mut self.p, old, new, order) }\n     }\n }\n \n impl<T> AtomicOption<T> {\n-    fn new(p: ~T) -> AtomicOption<T> {\n+    pub fn new(p: ~T) -> AtomicOption<T> {\n         unsafe {\n             AtomicOption {\n                 p: cast::transmute(p)\n             }\n         }\n     }\n \n-    fn empty() -> AtomicOption<T> {\n+    pub fn empty() -> AtomicOption<T> {\n         unsafe {\n             AtomicOption {\n                 p: cast::transmute(0)\n@@ -246,7 +246,7 @@ impl<T> AtomicOption<T> {\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val: ~T, order: Ordering) -> Option<~T> {\n+    pub fn swap(&mut self, val: ~T, order: Ordering) -> Option<~T> {\n         unsafe {\n             let val = cast::transmute(val);\n \n@@ -262,7 +262,7 @@ impl<T> AtomicOption<T> {\n     }\n \n     #[inline(always)]\n-    fn take(&mut self, order: Ordering) -> Option<~T> {\n+    pub fn take(&mut self, order: Ordering) -> Option<~T> {\n         unsafe {\n             self.swap(cast::transmute(0), order)\n         }"}]}