{"sha": "b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWEwNTI0ZGNiMWU0NmI5YzU1MjY2ZWJjMGFiMzZjY2U1ZDIwOTk=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-19T15:18:37Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-19T15:18:37Z"}, "message": "Add some things to inspect crate-id's", "tree": {"sha": "06a9a95a7942aec44aae5b85b10f24c35fd0b5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a9a95a7942aec44aae5b85b10f24c35fd0b5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "html_url": "https://github.com/rust-lang/rust/commit/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee110757121bfc033dd1e6e2ed6a0a86a3f0a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee110757121bfc033dd1e6e2ed6a0a86a3f0a58", "html_url": "https://github.com/rust-lang/rust/commit/dee110757121bfc033dd1e6e2ed6a0a86a3f0a58"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "6c5b3341587c1319a36dd1f63524bf277caf3439", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "patch": "@@ -753,14 +753,10 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-fn link_binary_output(sess: Session,\n-                      trans: &CrateTranslation,\n-                      output: session::OutputStyle,\n-                      obj_filename: &Path,\n-                      out_filename: &Path,\n-                      lm: &LinkMeta) -> Path {\n+pub fn filename_for_input(sess: &Session, output: session::OutputStyle, lm: &LinkMeta,\n+                      out_filename: &Path) -> Path {\n     let libname = output_lib_filename(lm);\n-    let out_filename = match output {\n+    match output {\n         session::OutputRlib => {\n             out_filename.with_filename(format!(\"lib{}.rlib\", libname))\n         }\n@@ -778,7 +774,17 @@ fn link_binary_output(sess: Session,\n             out_filename.with_filename(format!(\"lib{}.a\", libname))\n         }\n         session::OutputExecutable => out_filename.clone(),\n-    };\n+    }\n+\n+}\n+\n+fn link_binary_output(sess: Session,\n+                      trans: &CrateTranslation,\n+                      output: session::OutputStyle,\n+                      obj_filename: &Path,\n+                      out_filename: &Path,\n+                      lm: &LinkMeta) -> Path {\n+    let out_filename = filename_for_input(&sess, output, lm, out_filename);\n \n     // Make sure the output and obj_filename are both writeable.\n     // Mac, FreeBSD, and Windows system linkers check this already --"}, {"sha": "070aed3aa79b1e2e0fe6b73d3801ca4944b770b8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "patch": "@@ -446,13 +446,49 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n     let (outputs, trans) = {\n         let expanded_crate = {\n             let crate = phase_1_parse_input(sess, cfg.clone(), input);\n+            let (crate_id, crate_name, crate_file_name) = sess.opts.print_metas;\n+            // these nasty nested conditions are to avoid doing extra work\n+            if crate_id || crate_name || crate_file_name {\n+                let t_outputs = build_output_filenames(input, outdir, output, crate.attrs, sess);\n+                if crate_id || crate_name {\n+                    let pkgid = match attr::find_pkgid(crate.attrs) {\n+                        Some(pkgid) => pkgid,\n+                        None => fail!(\"No crate_id and --crate-id or --crate-name requested\")\n+                    };\n+                    if crate_id {\n+                        println(pkgid.to_str());\n+                    }\n+                    if crate_name {\n+                        println(pkgid.name);\n+                    }\n+                }\n+\n+                if crate_file_name {\n+                    let lm = link::build_link_meta(sess, &crate, &t_outputs.obj_filename,\n+                                                   &mut ::util::sha2::Sha256::new());\n+                    // if the vector is empty we default to OutputExecutable.\n+                    let style = sess.opts.outputs.get_opt(0).unwrap_or(&OutputExecutable);\n+                    let fname = link::filename_for_input(&sess, *style, &lm,\n+                                                         &t_outputs.out_filename);\n+                    println!(\"{}\", fname.display());\n+\n+                    // we already maybe printed the first one, so skip it\n+                    for style in sess.opts.outputs.iter().skip(1) {\n+                        let fname = link::filename_for_input(&sess, *style, &lm,\n+                                                             &t_outputs.out_filename);\n+                        println!(\"{}\", fname.display());\n+                    }\n+                }\n+\n+                return;\n+            }\n             if stop_after_phase_1(sess) { return; }\n             phase_2_configure_and_expand(sess, cfg, crate)\n         };\n-        let analysis = phase_3_run_analysis_passes(sess, &expanded_crate);\n-        if stop_after_phase_3(sess) { return; }\n         let outputs = build_output_filenames(input, outdir, output,\n                                              expanded_crate.attrs, sess);\n+        let analysis = phase_3_run_analysis_passes(sess, &expanded_crate);\n+        if stop_after_phase_3(sess) { return; }\n         let trans = phase_4_translate_to_llvm(sess, expanded_crate,\n                                               &analysis, outputs);\n         (outputs, trans)\n@@ -789,6 +825,9 @@ pub fn build_session_options(binary: @str,\n             }).collect()\n         }\n     };\n+    let print_metas = (matches.opt_present(\"crate-id\"),\n+                       matches.opt_present(\"crate-name\"),\n+                       matches.opt_present(\"crate-file-name\"));\n \n     let sopts = @session::options {\n         outputs: outputs,\n@@ -817,6 +856,7 @@ pub fn build_session_options(binary: @str,\n         debugging_opts: debugging_opts,\n         android_cross_path: android_cross_path,\n         write_dependency_info: write_dependency_info,\n+        print_metas: print_metas,\n     };\n     return sopts;\n }\n@@ -897,6 +937,10 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optflag(\"\",  \"dylib\", \"Compile a dynamic library crate\"),\n   optopt(\"\", \"linker\", \"Program to use for linking instead of the default.\", \"LINKER\"),\n   optopt(\"\", \"ar\", \"Program to use for managing archives instead of the default.\", \"AR\"),\n+  optflag(\"\", \"crate-id\", \"Output the crate id and exit\"),\n+  optflag(\"\", \"crate-name\", \"Output the crate name and exit\"),\n+  optflag(\"\", \"crate-file-name\", \"Output the file(s) that would be written if compilation \\\n+          continued and exit\"),\n   optmulti(\"\",  \"link-args\", \"FLAGS is a space-separated list of flags\n                             passed to the linker\", \"FLAGS\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),"}, {"sha": "58f09a52f2342912d3625d38bc7aae20dbbb57d0", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "patch": "@@ -168,8 +168,10 @@ pub struct options {\n     no_trans: bool,\n     debugging_opts: uint,\n     android_cross_path: Option<~str>,\n-    // Whether to write .d dependency files\n+    /// Whether to write .d dependency files\n     write_dependency_info: bool,\n+    /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n+    print_metas: (bool, bool, bool),\n }\n \n pub struct crate_metadata {\n@@ -396,6 +398,7 @@ pub fn basic_options() -> @options {\n         debugging_opts: 0u,\n         android_cross_path: None,\n         write_dependency_info: false,\n+        print_metas: (false, false, false),\n     }\n }\n "}, {"sha": "028e622c0576d934e784cd6455969c2730a73227", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "patch": "@@ -84,7 +84,7 @@ impl Clean<Crate> for visit_ast::RustdocVisitor {\n         Crate {\n             name: match find_pkgid(self.attrs) {\n                 Some(n) => n.name,\n-                None => fail!(\"rustdoc requires a `pkgid` crate attribute\"),\n+                None => fail!(\"rustdoc requires a `crate_id` crate attribute\"),\n             },\n             module: Some(self.module.clean()),\n             externs: externs,"}, {"sha": "ef407ed298798aba9c344ba80ecd0150f175385f", "filename": "src/test/run-make/rustdoc-smoke/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25a0524dcb1e46b9c55266ebc0ab36cce5d2099/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs?ref=b25a0524dcb1e46b9c55266ebc0ab36cce5d2099", "patch": "@@ -1,4 +1,4 @@\n-#[pkgid = \"foo#0.1\"];\n+#[crate_id = \"foo#0.1\"];\n \n //! Very docs\n "}]}