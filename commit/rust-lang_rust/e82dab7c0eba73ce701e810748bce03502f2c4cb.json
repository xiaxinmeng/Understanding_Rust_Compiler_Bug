{"sha": "e82dab7c0eba73ce701e810748bce03502f2c4cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MmRhYjdjMGViYTczY2U3MDFlODEwNzQ4YmNlMDM1MDJmMmM0Y2I=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-04T06:35:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-04T06:35:50Z"}, "message": "Rollup merge of #52968 - zackmdavis:app-lint-cability, r=estebank\n\nApp-lint-cability\n\n@eminence recently pointed out (rust-lang/cargo#5846) that it's\nsurprising that `cargo fix` (now shipping with Cargo itself!) doesn't\nfix very common lint warnings, which is as good of a reminder as any\nthat we should finish #50723.\n\n(Previously, we did this on the librustc and libsyntax crates in #50724. I filed cmr/this-week-in-rust#685 in hopes of recruiting new contributors to do the rest.)\n\nr? @estebank", "tree": {"sha": "911013ec0fc5d5a88212be73d6deeebdcfa9210b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911013ec0fc5d5a88212be73d6deeebdcfa9210b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82dab7c0eba73ce701e810748bce03502f2c4cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbZUlGCRBK7hj4Ov3rIwAAdHIIAJq7eln/ZveDPQChN1IjgVw4\ncM2ExVf+Ocxec9/drRL37LtJ/EWP0Po3Qx/prZMxfFAV1NAogBX+YueARyGbkKw4\nGxOi7ofM1yUc2+vXZsTcjVkXP+15Ib1YtVWDGFSe+JWXVdSKZ0oEZrUn+brZyhiC\n8fyk5PAlaXogB+w5rjeQEjyK7bjALB95he38TGYhadcfvW3C+wjsxJ0yAFKGj04Z\nTIWa03goHj+okrVhl4TpTeDHY2PykOSAP7ZEga7j7nQuWTN2U0pjinC0fMnBVLIl\nEgurFZhIxREo04+ylUuljicfF8WuFKxCbfQwrETakXGpxxyBr3yFm1/WdkBKNso=\n=buHs\n-----END PGP SIGNATURE-----\n", "payload": "tree 911013ec0fc5d5a88212be73d6deeebdcfa9210b\nparent 96179cd8fe44cf6c60161d0a6e78ae01c6929654\nparent 6e63b0dbedd5d4617d95aee1a42b9345b180d27b\nauthor kennytm <kennytm@gmail.com> 1533364550 +0800\ncommitter GitHub <noreply@github.com> 1533364550 +0800\n\nRollup merge of #52968 - zackmdavis:app-lint-cability, r=estebank\n\nApp-lint-cability\n\n@eminence recently pointed out (rust-lang/cargo#5846) that it's\nsurprising that `cargo fix` (now shipping with Cargo itself!) doesn't\nfix very common lint warnings, which is as good of a reminder as any\nthat we should finish #50723.\n\n(Previously, we did this on the librustc and libsyntax crates in #50724. I filed cmr/this-week-in-rust#685 in hopes of recruiting new contributors to do the rest.)\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82dab7c0eba73ce701e810748bce03502f2c4cb", "html_url": "https://github.com/rust-lang/rust/commit/e82dab7c0eba73ce701e810748bce03502f2c4cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82dab7c0eba73ce701e810748bce03502f2c4cb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96179cd8fe44cf6c60161d0a6e78ae01c6929654", "url": "https://api.github.com/repos/rust-lang/rust/commits/96179cd8fe44cf6c60161d0a6e78ae01c6929654", "html_url": "https://github.com/rust-lang/rust/commit/96179cd8fe44cf6c60161d0a6e78ae01c6929654"}, {"sha": "6e63b0dbedd5d4617d95aee1a42b9345b180d27b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e63b0dbedd5d4617d95aee1a42b9345b180d27b", "html_url": "https://github.com/rust-lang/rust/commit/6e63b0dbedd5d4617d95aee1a42b9345b180d27b"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "4ef4397d974c420254d2b3b465690a56a298d285", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e82dab7c0eba73ce701e810748bce03502f2c4cb", "patch": "@@ -84,7 +84,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n                         let msg = \"denote infinite loops with `loop { ... }`\";\n                         let condition_span = cx.tcx.sess.codemap().def_span(e.span);\n                         let mut err = cx.struct_span_lint(WHILE_TRUE, condition_span, msg);\n-                        err.span_suggestion_short(condition_span, \"use `loop`\", \"loop\".to_owned());\n+                        err.span_suggestion_short_with_applicability(\n+                            condition_span,\n+                            \"use `loop`\",\n+                            \"loop\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n                         err.emit();\n                     }\n                 }\n@@ -191,7 +196,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\", ident));\n                         let subspan = cx.tcx.sess.codemap().span_through_char(fieldpat.span, ':');\n-                        err.span_suggestion_short(subspan, \"remove this\", ident.to_string());\n+                        err.span_suggestion_short_with_applicability(\n+                            subspan,\n+                            \"remove this\",\n+                            ident.to_string(),\n+                            Applicability::MachineApplicable\n+                        );\n                         err.emit();\n                     }\n                 }\n@@ -708,10 +718,11 @@ impl EarlyLintPass for BadRepr {\n                         | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" | \"isize\" => {\n                             // if the literal could have been a valid `repr` arg,\n                             // suggest the correct syntax\n-                            warn.span_suggestion(\n+                            warn.span_suggestion_with_applicability(\n                                 attr.span,\n                                 \"give `repr` a hint\",\n                                 repr_str(&lit.as_str()),\n+                                Applicability::MachineApplicable\n                             );\n                             suggested = true;\n                         }\n@@ -779,7 +790,12 @@ impl EarlyLintPass for DeprecatedAttr {\n                     let msg = format!(\"use of deprecated attribute `{}`: {}. See {}\",\n                                       name, reason, link);\n                     let mut err = cx.struct_span_lint(DEPRECATED, attr.span, &msg);\n-                    err.span_suggestion_short(attr.span, \"remove this attribute\", \"\".to_owned());\n+                    err.span_suggestion_short_with_applicability(\n+                        attr.span,\n+                        \"remove this attribute\",\n+                        \"\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.emit();\n                 }\n                 return;\n@@ -1201,7 +1217,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                 }\n             };\n             if let Some(replacement) = suggestion {\n-                err.span_suggestion(vis.span, \"try making it public\", replacement);\n+                err.span_suggestion_with_applicability(\n+                    vis.span,\n+                    \"try making it public\",\n+                    replacement,\n+                    Applicability::MachineApplicable\n+                );\n             }\n         };\n \n@@ -1225,9 +1246,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                                                                   it.span,\n                                                                   \"functions generic over \\\n                                                                    types must be mangled\");\n-                                err.span_suggestion_short(no_mangle_attr.span,\n-                                                          \"remove this attribute\",\n-                                                          \"\".to_owned());\n+                                err.span_suggestion_short_with_applicability(\n+                                    no_mangle_attr.span,\n+                                    \"remove this attribute\",\n+                                    \"\".to_owned(),\n+                                    // Use of `#[no_mangle]` suggests FFI intent; correct\n+                                    // fix may be to monomorphize source by hand\n+                                    Applicability::MaybeIncorrect\n+                                );\n                                 err.emit();\n                                 break;\n                             }\n@@ -1257,9 +1283,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                         .unwrap_or(0) as u32;\n                     // `const` is 5 chars\n                     let const_span = it.span.with_hi(BytePos(it.span.lo().0 + start + 5));\n-                    err.span_suggestion(const_span,\n-                                        \"try a static value\",\n-                                        \"pub static\".to_owned());\n+                    err.span_suggestion_with_applicability(\n+                        const_span,\n+                        \"try a static value\",\n+                        \"pub static\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.emit();\n                 }\n             }"}, {"sha": "4dc66fb812144d884476b0d5ef354824caee9ae9", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e82dab7c0eba73ce701e810748bce03502f2c4cb", "patch": "@@ -22,6 +22,7 @@ use std::cmp;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::{ast, attr};\n+use syntax::errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::Span;\n use syntax::codemap;\n@@ -143,9 +144,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                                              OVERFLOWING_LITERALS,\n                                                              parent_expr.span,\n                                                              \"only u8 can be cast into char\");\n-                                        err.span_suggestion(parent_expr.span,\n-                                                            &\"use a char literal instead\",\n-                                                            format!(\"'\\\\u{{{:X}}}'\", lit_val));\n+                                        err.span_suggestion_with_applicability(\n+                                            parent_expr.span,\n+                                            &\"use a char literal instead\",\n+                                            format!(\"'\\\\u{{{:X}}}'\", lit_val),\n+                                            Applicability::MachineApplicable\n+                                        );\n                                         err.emit();\n                                         return\n                                     }\n@@ -398,10 +402,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             {\n                 if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n                     let (sans_suffix, _) = repr_str.split_at(pos);\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         expr.span,\n                         &format!(\"consider using `{}` instead\", sugg_ty),\n                         format!(\"{}{}\", sans_suffix, sugg_ty),\n+                        Applicability::MachineApplicable\n                     );\n                 } else {\n                     err.help(&format!(\"consider using `{}` instead\", sugg_ty));"}, {"sha": "2b8540ea3861a25761de61597d1cae79f8ebefc6", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e82dab7c0eba73ce701e810748bce03502f2c4cb", "patch": "@@ -17,6 +17,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::errors::Applicability;\n use syntax::feature_gate::{BUILTIN_ATTRIBUTES, AttributeType};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n@@ -303,9 +304,12 @@ impl UnusedParens {\n                             _ => false,\n                         }\n                     }).to_owned();\n-                err.span_suggestion_short(value.span,\n-                                          \"remove these parentheses\",\n-                                          parens_removed);\n+                err.span_suggestion_short_with_applicability(\n+                    value.span,\n+                    \"remove these parentheses\",\n+                    parens_removed,\n+                    Applicability::MachineApplicable\n+                );\n                 err.emit();\n             }\n         }"}, {"sha": "2a9bd2948ffeb4fbe96302fe80957a6d4ddf7632", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e82dab7c0eba73ce701e810748bce03502f2c4cb/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=e82dab7c0eba73ce701e810748bce03502f2c4cb", "patch": "@@ -82,7 +82,7 @@\n           ],\n           \"label\": null,\n           \"suggested_replacement\": \"1 / (2 + 3)\",\n-          \"suggestion_applicability\": \"Unspecified\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n           \"expansion\": null\n         }\n       ],"}]}