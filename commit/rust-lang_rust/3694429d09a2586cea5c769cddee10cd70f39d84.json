{"sha": "3694429d09a2586cea5c769cddee10cd70f39d84", "node_id": "C_kwDOAAsO6NoAKDM2OTQ0MjlkMDlhMjU4NmNlYTVjNzY5Y2RkZWUxMGNkNzBmMzlkODQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-29T19:06:13Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:07:47Z"}, "message": "recover wrong-cased `use`s (`Use`, `USE`, etc)", "tree": {"sha": "fa09e66a0acbf8589a403f1c8e1106becf4c459f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa09e66a0acbf8589a403f1c8e1106becf4c459f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3694429d09a2586cea5c769cddee10cd70f39d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3694429d09a2586cea5c769cddee10cd70f39d84", "html_url": "https://github.com/rust-lang/rust/commit/3694429d09a2586cea5c769cddee10cd70f39d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3694429d09a2586cea5c769cddee10cd70f39d84/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de341fe668fd821f701ca970c897d167104f0a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/de341fe668fd821f701ca970c897d167104f0a17", "html_url": "https://github.com/rust-lang/rust/commit/de341fe668fd821f701ca970c897d167104f0a17"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "34c7d4ec4815d3d80a0ad69b39f8ea1a70be40f7", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3694429d09a2586cea5c769cddee10cd70f39d84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694429d09a2586cea5c769cddee10cd70f39d84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=3694429d09a2586cea5c769cddee10cd70f39d84", "patch": "@@ -143,8 +143,15 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let mut def = self.parse_defaultness();\n-        let kind =\n-            self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, fn_parse_mode)?;\n+        let kind = self.parse_item_kind(\n+            &mut attrs,\n+            mac_allowed,\n+            lo,\n+            &vis,\n+            &mut def,\n+            fn_parse_mode,\n+            false,\n+        )?;\n         if let Some((ident, kind)) = kind {\n             self.error_on_unconsumed_default(def, &kind);\n             let span = lo.to(self.prev_token.span);\n@@ -205,11 +212,12 @@ impl<'a> Parser<'a> {\n         vis: &Visibility,\n         def: &mut Defaultness,\n         fn_parse_mode: FnParseMode,\n+        kw_case_insensitive: bool,\n     ) -> PResult<'a, Option<ItemInfo>> {\n         let def_final = def == &Defaultness::Final;\n         let mut def = || mem::replace(def, Defaultness::Final);\n \n-        let info = if self.eat_keyword(kw::Use) {\n+        let info = if self.eat_keyword_case(kw::Use, kw_case_insensitive) {\n             self.parse_use_item()?\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n@@ -286,6 +294,17 @@ impl<'a> Parser<'a> {\n         } else if self.isnt_macro_invocation() && vis.kind.is_pub() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n+        } else if self.isnt_macro_invocation() && !kw_case_insensitive {\n+            // Recover wrong cased keywords\n+            return self.parse_item_kind(\n+                attrs,\n+                macros_allowed,\n+                lo,\n+                vis,\n+                &mut def(),\n+                fn_parse_mode,\n+                true,\n+            );\n         } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n             (Ident::empty(), ItemKind::MacCall(P(self.parse_item_macro(vis)?)))"}, {"sha": "b82ce90129fee1e5169539d50381378ecedcb190", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3694429d09a2586cea5c769cddee10cd70f39d84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694429d09a2586cea5c769cddee10cd70f39d84/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=3694429d09a2586cea5c769cddee10cd70f39d84", "patch": "@@ -616,6 +616,33 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Eats a keyword, optionally ignoring the case.\n+    /// If the case differs (and is ignored) an error is issued.\n+    /// This is useful for recovery.\n+    fn eat_keyword_case(&mut self, kw: Symbol, case_insensitive: bool) -> bool {\n+        if self.eat_keyword(kw) {\n+            return true;\n+        }\n+\n+        if case_insensitive\n+        && let Some((ident, /* is_raw */ false)) = self.token.ident()\n+        && ident.as_str().to_lowercase() == kw.as_str().to_lowercase() {\n+            self\n+                .struct_span_err(ident.span, format!(\"keyword `{kw}` is written in a wrong case\"))\n+                .span_suggestion(\n+                    ident.span,\n+                    \"write it in the correct case\",\n+                    kw,\n+                    Applicability::MachineApplicable\n+                ).emit();\n+\n+            self.bump();\n+            return true;\n+        }\n+\n+        false\n+    }\n+\n     fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {\n         if self.token.is_keyword(kw) {\n             self.bump();"}, {"sha": "d99f89ccef5b4937e87ebb3494a5684bbad6495a", "filename": "src/test/ui/parser/item-kw-case-mismatch.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.fixed?ref=3694429d09a2586cea5c769cddee10cd70f39d84", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_imports)]\n+\n+fn main() {}\n+\n+use std::ptr::read;  //~ ERROR keyword `use` is written in a wrong case\n+use std::ptr::write; //~ ERROR keyword `use` is written in a wrong case"}, {"sha": "605552b5f147ffbf66177eb995d8313f909e3409", "filename": "src/test/ui/parser/item-kw-case-mismatch.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.rs?ref=3694429d09a2586cea5c769cddee10cd70f39d84", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_imports)]\n+\n+fn main() {}\n+\n+Use std::ptr::read;  //~ ERROR keyword `use` is written in a wrong case\n+USE std::ptr::write; //~ ERROR keyword `use` is written in a wrong case"}, {"sha": "aebbc9d558f27f478470435c9153032cb68f7909", "filename": "src/test/ui/parser/item-kw-case-mismatch.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3694429d09a2586cea5c769cddee10cd70f39d84/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-kw-case-mismatch.stderr?ref=3694429d09a2586cea5c769cddee10cd70f39d84", "patch": "@@ -0,0 +1,14 @@\n+error: keyword `use` is written in a wrong case\n+  --> $DIR/item-kw-case-mismatch.rs:6:1\n+   |\n+LL | Use std::ptr::read;\n+   | ^^^ help: write it in the correct case (notice the capitalization): `use`\n+\n+error: keyword `use` is written in a wrong case\n+  --> $DIR/item-kw-case-mismatch.rs:7:1\n+   |\n+LL | USE std::ptr::write;\n+   | ^^^ help: write it in the correct case: `use`\n+\n+error: aborting due to 2 previous errors\n+"}]}