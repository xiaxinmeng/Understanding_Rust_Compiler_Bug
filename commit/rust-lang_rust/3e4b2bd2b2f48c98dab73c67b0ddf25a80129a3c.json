{"sha": "3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNGIyYmQyYjJmNDhjOThkYWI3M2M2N2IwZGRmMjVhODAxMjlhM2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T02:01:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T21:21:15Z"}, "message": "core: Use PortOne instead of Future in future_result", "tree": {"sha": "8a6dad33637190806df8065d73e3b00181541bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6dad33637190806df8065d73e3b00181541bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "html_url": "https://github.com/rust-lang/rust/commit/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d2a7143629898aebea58db836eb2009e97d067", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2a7143629898aebea58db836eb2009e97d067", "html_url": "https://github.com/rust-lang/rust/commit/f6d2a7143629898aebea58db836eb2009e97d067"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "e7e9de39ccdb49ec3e2e4d7a3455ca29b5be2986", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -642,7 +642,7 @@ pub mod tests {\n         // Have to get rid of our reference before blocking.\n         { let _x = move x; } // FIXME(#3161) util::ignore doesn't work here\n         let res = option::swap_unwrap(&mut res);\n-        future::get(&res);\n+        res.recv();\n     }\n \n     #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -657,7 +657,7 @@ pub mod tests {\n         }\n         assert unwrap_exclusive(move x) == ~~\"hello\";\n         let res = option::swap_unwrap(&mut res);\n-        future::get(&res);\n+        res.recv();\n     }\n \n     #[test] #[ignore(cfg(windows))]"}, {"sha": "9a1d8cf39a834b0b52e42313f2eb13beb794d615", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -314,7 +314,7 @@ impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    fn future_result(blk: fn(v: future::Future<TaskResult>)) -> TaskBuilder {\n+    fn future_result(blk: fn(v: Port<TaskResult>)) -> TaskBuilder {\n         // FIXME (#3725): Once linked failure and notification are\n         // handled in the library, I can imagine implementing this by just\n         // registering an arbitrary number of task::on_exit handlers and\n@@ -327,9 +327,7 @@ impl TaskBuilder {\n         // Construct the future and give it to the caller.\n         let (notify_pipe_ch, notify_pipe_po) = stream::<TaskResult>();\n \n-        blk(do future::from_fn |move notify_pipe_po| {\n-            notify_pipe_po.recv()\n-        });\n+        blk(move notify_pipe_po);\n \n         // Reconfigure self to use a notify channel.\n         TaskBuilder({\n@@ -482,7 +480,7 @@ impl TaskBuilder {\n         do fr_task_builder.spawn |move f| {\n             comm::send(ch, f());\n         }\n-        match future::get(&option::unwrap(move result)) {\n+        match option::unwrap(move result).recv() {\n             Success => result::Ok(comm::recv(po)),\n             Failure => result::Err(())\n         }\n@@ -899,14 +897,14 @@ fn test_add_wrapper() {\n fn test_future_result() {\n     let mut result = None;\n     do task().future_result(|+r| { result = Some(move r); }).spawn { }\n-    assert future::get(&option::unwrap(move result)) == Success;\n+    assert option::unwrap(move result).recv() == Success;\n \n     result = None;\n     do task().future_result(|+r|\n         { result = Some(move r); }).unlinked().spawn {\n         fail;\n     }\n-    assert future::get(&option::unwrap(move result)) == Failure;\n+    assert option::unwrap(move result).recv() == Failure;\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "0033a4eaccd07acf59dfd78cb498d2e671f0d15b", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -651,7 +651,7 @@ mod tests {\n         }\n \n         // Wait for children to pass their asserts\n-        for vec::each(children) |r| { future::get(r); }\n+        for vec::each(children) |r| { r.recv(); }\n \n         // Wait for writer to finish\n         p.recv();"}, {"sha": "b5fef604c588978220e67531c974f12ed63551e9", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -391,7 +391,7 @@ fn run_test(test: TestDesc, monitor_ch: comm::Chan<MonitorMsg>) {\n         task::task().unlinked().future_result(|+r| {\n             result_future = Some(move r);\n         }).spawn(move testfn);\n-        let task_result = future::get(&option::unwrap(move result_future));\n+        let task_result = option::unwrap(move result_future).recv();\n         let test_result = calc_result(&test, task_result == task::Success);\n         comm::send(monitor_ch, (copy test, test_result));\n     };"}, {"sha": "55afa0490918c6052193fcb7e8f86d66f6d94071", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -74,7 +74,7 @@ fn run(args: &[~str]) {\n     }\n \n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n \n     //error!(\"sending stop message\");"}, {"sha": "f0fc1dd5f001b697247f9c547610d8476f8c8730", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -71,7 +71,7 @@ fn run(args: &[~str]) {\n     }\n \n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n \n     //error!(\"sending stop message\");"}, {"sha": "143d4d86d0d5607e05160435d078d6f56c96eba3", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -45,7 +45,7 @@ fn run(args: ~[~str]) {\n         };\n     }\n     for vec::each(worker_results) |r| {\n-        future::get(r);\n+        r.recv();\n     }\n     comm::send(to_child, stop);\n     let result = comm::recv(from_child);"}, {"sha": "e70b796298be82d6ce662c6bd9d31966531a0629", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -78,7 +78,7 @@ fn stress(num_tasks: int) {\n             stress_task(i);\n         }\n     }\n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n }\n \n fn main() {"}, {"sha": "b0bc92797c9a1f8b86f0e01b03c613bf7600487c", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -33,7 +33,7 @@ fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = None;\n     task::task().future_result(|+r| res = Some(move r)).supervised().spawn(move f);\n     error!(\"%s group waiting\", myname);\n-    let x = future::get(&option::unwrap(move res));\n+    let x = option::unwrap(move res).recv();\n     assert x == task::Success;\n }\n "}, {"sha": "59cbd26204e93a98a9036ae88fa6f339f231265e", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -19,7 +19,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n \n     debug!(\"Joined task.\");\n }"}, {"sha": "b34eff7c30b106612d38606c1866e46e52ee6337", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -53,7 +53,7 @@ fn test00() {\n     }\n \n     // Join spawned tasks...\n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n \n     debug!(\"Completed: Final number is: \");\n     log(error, sum);"}, {"sha": "c8bd043a182f010b4f6dd86d704c9a897651410a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -30,7 +30,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "d1548de5a6dd133b8b1d9d7e73022d0282f032fc", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -51,7 +51,7 @@ fn test00() {\n         while i < number_of_messages { sum += recv(po); i = i + 1; }\n     }\n \n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n \n     debug!(\"Completed: Final number is: \");\n     assert (sum ==\n@@ -134,7 +134,7 @@ fn test06() {\n     }\n \n \n-    for results.each |r| { future::get(r); }\n+    for results.each |r| { r.recv(); }\n }\n \n "}, {"sha": "0ef4d088f9ccc891008f53bf6ba7f11ffebbcddc", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     error!(\"2\");\n     yield();\n     error!(\"3\");\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n }\n \n fn child() {"}, {"sha": "0a6a79682247cb5da86c8269d90c9a4204073c33", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=3e4b2bd2b2f48c98dab73c67b0ddf25a80129a3c", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n     yield();\n-    future::get(&option::unwrap(move result));\n+    option::unwrap(move result).recv();\n }\n \n fn child() { error!(\"2\"); }"}]}