{"sha": "ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "node_id": "C_kwDOAAsO6NoAKGVhMmEyYzUyZmNlMzBhMmNiYjNlZDJlYWI3YTUxNTZiZWY1ODlhOGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-21T10:21:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-21T10:22:40Z"}, "message": "Don't resolve attributes to non attribute macros", "tree": {"sha": "9627d034eabdbcbda7a49585d0ce1dff7a451c99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9627d034eabdbcbda7a49585d0ce1dff7a451c99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "html_url": "https://github.com/rust-lang/rust/commit/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96fbef606a8dee2f7e21f2337499ab02e4e8242c", "url": "https://api.github.com/repos/rust-lang/rust/commits/96fbef606a8dee2f7e21f2337499ab02e4e8242c", "html_url": "https://github.com/rust-lang/rust/commit/96fbef606a8dee2f7e21f2337499ab02e4e8242c"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "2634c52a0b3ef5631bfa81efb0df0b2b260a8d2c", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -54,10 +54,10 @@ pub struct Expander {\n }\n \n #[cfg(test)]\n-const EXPANSION_RECURSION_LIMIT: Limit = Limit::new(32);\n+static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(32);\n \n #[cfg(not(test))]\n-const EXPANSION_RECURSION_LIMIT: Limit = Limit::new(128);\n+static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(128);\n \n impl CfgExpander {\n     pub(crate) fn new("}, {"sha": "6cc6bf98fbb5d573c35a51187f20a458845aaf3d", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -779,6 +779,7 @@ fn attr_macro_as_call_id(\n     resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n ) -> Result<MacroCallId, UnresolvedMacro> {\n     let def: MacroDefId = resolver(item_attr.path.clone())\n+        .filter(MacroDefId::is_attribute)\n         .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n     let last_segment = item_attr\n         .path"}, {"sha": "7a866135b3b324a7fc8ec3586677e7860463042c", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -1446,3 +1446,25 @@ fn f() {\n \"#]],\n     )\n }\n+\n+#[test]\n+fn mbe_are_not_attributes() {\n+    check(\n+        r#\"\n+macro_rules! error {\n+    () => {struct Bar}\n+}\n+\n+#[error]\n+struct Foo;\n+\"#,\n+        expect![[r##\"\n+macro_rules! error {\n+    () => {struct Bar}\n+}\n+\n+#[error]\n+struct Foo;\n+\"##]],\n+    )\n+}"}, {"sha": "913575eb218656766ef5dda17bca7d0c07b8a2a8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -50,9 +50,9 @@ use crate::{\n     UnresolvedMacro,\n };\n \n-const GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n-const EXPANSION_DEPTH_LIMIT: Limit = Limit::new(128);\n-const FIXED_POINT_LIMIT: Limit = Limit::new(8192);\n+static GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n+static EXPANSION_DEPTH_LIMIT: Limit = Limit::new(128);\n+static FIXED_POINT_LIMIT: Limit = Limit::new(8192);\n \n pub(super) fn collect_defs(\n     db: &dyn DefDatabase,\n@@ -1705,7 +1705,7 @@ impl ModCollector<'_, '_> {\n     /// Returns `Err` when some attributes could not be resolved to builtins and have been\n     /// registered as unresolved.\n     ///\n-    /// If `ignore_up_to` is `Some`, attributes precending and including that attribute will be\n+    /// If `ignore_up_to` is `Some`, attributes preceding and including that attribute will be\n     /// assumed to be resolved already.\n     fn resolve_attributes(&mut self, attrs: &Attrs, mod_item: ModItem) -> Result<(), ()> {\n         let mut ignore_up_to ="}, {"sha": "f411ef9b3caf5cfd3db1b0446a350296343968fd", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -306,6 +306,13 @@ impl MacroDefId {\n     pub fn is_proc_macro(&self) -> bool {\n         matches!(self.kind, MacroDefKind::ProcMacro(..))\n     }\n+\n+    pub fn is_attribute(&self) -> bool {\n+        matches!(\n+            self.kind,\n+            MacroDefKind::BuiltInAttr(..) | MacroDefKind::ProcMacro(_, ProcMacroKind::Attr, _)\n+        )\n+    }\n }\n \n // FIXME: attribute indices do not account for `cfg_attr`, which means that we'll strip the whole"}, {"sha": "1eb5490507805ad645f7692d04f523d53e436adc", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     ProjectionTyExt, Solution, Substitution, Ty, TyBuilder, TyKind,\n };\n \n-const AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n+static AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n \n pub(crate) enum AutoderefKind {\n     Builtin,"}, {"sha": "6a326eb4ca39a971a7a212e03b6631fa4b4c5408", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=ea2a2c52fce30a2cbb3ed2eab7a5156bef589a8b", "patch": "@@ -18,7 +18,7 @@ use crate::{\n };\n \n /// A value to use, when uncertain which limit to pick.\n-pub const DEFAULT_QUERY_SEARCH_LIMIT: Limit = Limit::new(40);\n+pub static DEFAULT_QUERY_SEARCH_LIMIT: Limit = Limit::new(40);\n \n /// Three possible ways to search for the name in associated and/or other items.\n #[derive(Debug, Clone, Copy)]"}]}