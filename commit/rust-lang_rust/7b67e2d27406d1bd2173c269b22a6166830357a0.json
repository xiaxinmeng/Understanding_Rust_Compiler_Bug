{"sha": "7b67e2d27406d1bd2173c269b22a6166830357a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjdlMmQyNzQwNmQxYmQyMTczYzI2OWIyMmE2MTY2ODMwMzU3YTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T07:16:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T07:16:42Z"}, "message": "rustdoc: Write both crates and mods as header level 1", "tree": {"sha": "aa7cb5873b9f3cc8655231a79aff58239acc4220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa7cb5873b9f3cc8655231a79aff58239acc4220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b67e2d27406d1bd2173c269b22a6166830357a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b67e2d27406d1bd2173c269b22a6166830357a0", "html_url": "https://github.com/rust-lang/rust/commit/7b67e2d27406d1bd2173c269b22a6166830357a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b67e2d27406d1bd2173c269b22a6166830357a0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c925cfaaf2ac311b681862a01c4aa5ecc466090", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c925cfaaf2ac311b681862a01c4aa5ecc466090", "html_url": "https://github.com/rust-lang/rust/commit/7c925cfaaf2ac311b681862a01c4aa5ecc466090"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4082d969b5e578df549177065bf68156a3f7a584", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b67e2d27406d1bd2173c269b22a6166830357a0/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b67e2d27406d1bd2173c269b22a6166830357a0/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=7b67e2d27406d1bd2173c269b22a6166830357a0", "patch": "@@ -64,14 +64,14 @@ fn write_mod(\n     moddoc: doc::moddoc\n ) {\n     let fullpath = str::connect(moddoc.path + [moddoc.name], \"::\");\n-    write_header(ctxt, h2, #fmt(\"Module `%s`\", fullpath));\n+    write_header(ctxt, h1, #fmt(\"Module `%s`\", fullpath));\n     write_mod_contents(ctxt, moddoc);\n }\n \n #[test]\n fn should_write_full_path_to_mod() {\n     let markdown = test::render(\"mod a { mod b { mod c { } } }\");\n-    assert str::contains(markdown, \"## Module `a::b::c`\");\n+    assert str::contains(markdown, \"# Module `a::b::c`\");\n }\n \n fn write_mod_contents(\n@@ -118,7 +118,7 @@ fn write_fn(\n     ctxt: ctxt,\n     doc: doc::fndoc\n ) {\n-    write_header(ctxt, h3, #fmt(\"Function `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Function `%s`\", doc.name));\n     write_sig(ctxt, doc.sig);\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n@@ -146,7 +146,7 @@ fn code_block_indent(s: str) -> str {\n #[test]\n fn write_markdown_should_write_function_header() {\n     let markdown = test::render(\"fn func() { }\");\n-    assert str::contains(markdown, \"### Function `func`\");\n+    assert str::contains(markdown, \"## Function `func`\");\n }\n \n #[test]\n@@ -362,7 +362,7 @@ fn write_const(\n     ctxt: ctxt,\n     doc: doc::constdoc\n ) {\n-    write_header(ctxt, h3, #fmt(\"Const `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Const `%s`\", doc.name));\n     write_sig(ctxt, doc.ty);\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n@@ -371,7 +371,7 @@ fn write_const(\n #[test]\n fn should_write_const_header() {\n     let markdown = test::render(\"const a: bool = true;\");\n-    assert str::contains(markdown, \"### Const `a`\\n\\n\");\n+    assert str::contains(markdown, \"## Const `a`\\n\\n\");\n }\n \n #[test]\n@@ -386,7 +386,7 @@ fn write_enum(\n     ctxt: ctxt,\n     doc: doc::enumdoc\n ) {\n-    write_header(ctxt, h3, #fmt(\"Enum `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Enum `%s`\", doc.name));\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n     write_variants(ctxt, doc.variants);\n@@ -395,7 +395,7 @@ fn write_enum(\n #[test]\n fn should_write_enum_header() {\n     let markdown = test::render(\"enum a { b }\");\n-    assert str::contains(markdown, \"### Enum `a`\\n\\n\");\n+    assert str::contains(markdown, \"## Enum `a`\\n\\n\");\n }\n \n #[test]\n@@ -468,7 +468,7 @@ fn should_write_variant_list_with_signatures() {\n }\n \n fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n-    write_header(ctxt, h3, #fmt(\"Resource `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Resource `%s`\", doc.name));\n     write_sig(ctxt, doc.sig);\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n@@ -478,7 +478,7 @@ fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n #[test]\n fn should_write_resource_header() {\n     let markdown = test::render(\"resource r(a: bool) { }\");\n-    assert str::contains(markdown, \"### Resource `r`\");\n+    assert str::contains(markdown, \"## Resource `r`\");\n }\n \n #[test]\n@@ -537,7 +537,7 @@ mod test {\n     #[test]\n     fn write_markdown_should_write_mod_headers() {\n         let markdown = render(\"mod moo { }\");\n-        assert str::contains(markdown, \"## Module `moo`\");\n+        assert str::contains(markdown, \"# Module `moo`\");\n     }\n \n     #[test]"}]}