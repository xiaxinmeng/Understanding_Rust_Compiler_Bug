{"sha": "5b3023c56420ce55d8b6761ea557fd4d6f579bdf", "node_id": "C_kwDOAAsO6NoAKDViMzAyM2M1NjQyMGNlNTVkOGI2NzYxZWE1NTdmZDRkNmY1NzliZGY", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-03-27T23:53:56Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-04-18T23:53:38Z"}, "message": "Fix an incorrect word in a comment.", "tree": {"sha": "fd74924e29e087bd569919cac0fd88de9c182fd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd74924e29e087bd569919cac0fd88de9c182fd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3023c56420ce55d8b6761ea557fd4d6f579bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3023c56420ce55d8b6761ea557fd4d6f579bdf", "html_url": "https://github.com/rust-lang/rust/commit/5b3023c56420ce55d8b6761ea557fd4d6f579bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3023c56420ce55d8b6761ea557fd4d6f579bdf/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703a33673de30572960eb3fe2c36a0f51083d226", "url": "https://api.github.com/repos/rust-lang/rust/commits/703a33673de30572960eb3fe2c36a0f51083d226", "html_url": "https://github.com/rust-lang/rust/commit/703a33673de30572960eb3fe2c36a0f51083d226"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1bed22a4ce50a175f272dddaa5cf1cbb69786355", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b3023c56420ce55d8b6761ea557fd4d6f579bdf/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3023c56420ce55d8b6761ea557fd4d6f579bdf/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=5b3023c56420ce55d8b6761ea557fd4d6f579bdf", "patch": "@@ -76,7 +76,7 @@ pub struct OwnedHandle {\n /// `NULL`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `NULL` first.\n ///\n-/// This type concerns any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n+/// This type considers any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n /// This is because APIs that use `NULL` as their sentry value don't treat `INVALID_HANDLE_VALUE`\n /// as special.\n ///\n@@ -96,7 +96,7 @@ pub struct HandleOrNull(OwnedHandle);\n /// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// This type concerns any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n+/// This type considers any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n /// This is because APIs that use `INVALID_HANDLE_VALUE` as their sentry value may return `NULL`\n /// under `windows_subsystem = \"windows\"` or other situations where I/O devices are detached.\n ///"}]}