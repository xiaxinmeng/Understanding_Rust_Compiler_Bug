{"sha": "7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjgyMDg3NThjZWIyNWVkOGUxYmVhZmMxYjVkZGI0MTMxNWQzMmU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-09T05:02:35Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-12T23:53:16Z"}, "message": "Don't ICE when missing owned_box lang item\n\nCloses #20549", "tree": {"sha": "73ce0bda9fb33c3fd6794fd36d45782a6e5b719f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ce0bda9fb33c3fd6794fd36d45782a6e5b719f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "html_url": "https://github.com/rust-lang/rust/commit/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d8767289351a6111c77a5dfa8ba35468f721f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d8767289351a6111c77a5dfa8ba35468f721f6", "html_url": "https://github.com/rust-lang/rust/commit/05d8767289351a6111c77a5dfa8ba35468f721f6"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "de7582a13716620ec4e9bd6baf141d1a473d1fdf", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "patch": "@@ -71,8 +71,10 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         }\n         ty::TyBox(_) => {\n             // treat like we would treat `Box`\n-            let def_id = tcx.lang_items.owned_box().unwrap();\n-            Some(StructSimplifiedType(def_id))\n+            match tcx.lang_items.require_owned_box() {\n+                Ok(def_id) => Some(StructSimplifiedType(def_id)),\n+                Err(msg) => tcx.sess.fatal(&msg),\n+            }\n         }\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))"}, {"sha": "cf528e0c8a91423d7363da2f510290009ab75544", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "patch": "@@ -90,6 +90,10 @@ impl LanguageItems {\n         }\n     }\n \n+    pub fn require_owned_box(&self) -> Result<ast::DefId, String> {\n+        self.require(OwnedBoxLangItem)\n+    }\n+\n     pub fn from_builtin_kind(&self, bound: ty::BuiltinBound)\n                              -> Result<ast::DefId, String>\n     {"}, {"sha": "494e2eaa77bb8749904d3aee897a5109da423b25", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "patch": "@@ -77,7 +77,10 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         self.check_def_id(item, data.principal_def_id());\n                     }\n                     ty::TyBox(..) => {\n-                        self.check_def_id(item, self.tcx.lang_items.owned_box().unwrap());\n+                        match self.tcx.lang_items.require_owned_box() {\n+                            Ok(trait_id) => self.check_def_id(item, trait_id),\n+                            Err(msg) => self.tcx.sess.span_fatal(item.span, &msg),\n+                        }\n                     }\n                     ty::TyChar => {\n                         self.check_primitive_impl(def_id,"}, {"sha": "49b5b5519d84f208064b0a76a132611b0ac0f6ba", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb8208758ceb25ed8e1beafc1b5ddb41315d32e/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=7fb8208758ceb25ed8e1beafc1b5ddb41315d32e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we don't ICE when we are missing the owned_box lang item.\n+\n+// error-pattern: requires `owned_box` lang_item\n+\n+#![no_std]\n+#![feature(lang_items, no_std, box_syntax)]\n+\n+extern crate core;\n+\n+fn main() {\n+    let x = box 1i32;\n+}\n+\n+#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] extern fn eh_personality() {}\n+#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }"}]}