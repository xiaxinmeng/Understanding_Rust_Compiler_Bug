{"sha": "dfcdb6eb729fa51cac47f219a90a9f894819f343", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2RiNmViNzI5ZmE1MWNhYzQ3ZjIxOWE5MGE5Zjg5NDgxOWYzNDM=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-01-30T18:28:27Z"}, "committer": {"name": "Kerra Olson", "email": "kerra@mbp.local", "date": "2013-02-10T19:51:05Z"}, "message": "rt/std: update of libuv API glue for libuv submodule update", "tree": {"sha": "ed436c020a967a4184854a37aedd800f33c0dfc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed436c020a967a4184854a37aedd800f33c0dfc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcdb6eb729fa51cac47f219a90a9f894819f343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcdb6eb729fa51cac47f219a90a9f894819f343", "html_url": "https://github.com/rust-lang/rust/commit/dfcdb6eb729fa51cac47f219a90a9f894819f343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcdb6eb729fa51cac47f219a90a9f894819f343/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "html_url": "https://github.com/rust-lang/rust/commit/3a813e29b64dac9502f16b8cbaae6a6d16f9a687"}], "stats": {"total": 243, "additions": 111, "deletions": 132}, "files": [{"sha": "da5fbc3438a1c4d2c48d29691c52aa38fba3ffd0", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=dfcdb6eb729fa51cac47f219a90a9f894819f343", "patch": "@@ -185,15 +185,19 @@ fn begin_teardown(data: *IoTaskLoopData) {\n         ll::close(async_handle as *c_void, tear_down_close_cb);\n     }\n }\n+extern fn tear_down_walk_cb(handle: *libc::c_void, arg: *libc::c_void) {\n+    log(debug, ~\"IN TEARDOWN WALK CB BOYEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\");\n+    // pretty much, if we still have an active handle and it is *not*\n+    // the async handle that facilities global loop communication, we\n+    // want to barf out and fail\n+    assert handle == arg;\n+}\n \n extern fn tear_down_close_cb(handle: *ll::uv_async_t) {\n     unsafe {\n         let loop_ptr = ll::get_loop_for_uv_handle(handle);\n-        let loop_refs = ll::loop_refcount(loop_ptr);\n-        log(debug,\n-            fmt!(\"tear_down_close_cb called, closing handle at %? refs %?\",\n-                 handle, loop_refs));\n-        assert loop_refs == 1i32;\n+        log(debug, ~\"in tear_down_close_cb\");\n+        ll::walk(loop_ptr, tear_down_walk_cb, handle as *libc::c_void);\n     }\n }\n "}, {"sha": "fb8bbcebf7fc9d17c41837500b338fa98de7470f", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 95, "deletions": 120, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=dfcdb6eb729fa51cac47f219a90a9f894819f343", "patch": "@@ -90,7 +90,7 @@ pub struct uv_stream_t {\n     fields: uv_handle_fields,\n }\n \n-// 64bit unix size: 272\n+// 64bit unix size: 216\n #[cfg(unix)]\n pub struct uv_tcp_t {\n     fields: uv_handle_fields,\n@@ -99,10 +99,8 @@ pub struct uv_tcp_t {\n     a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n     a12: *u8, a13: *u8, a14: *u8, a15: *u8,\n     a16: *u8, a17: *u8, a18: *u8, a19: *u8,\n-    a20: *u8, a21: *u8, a22: *u8, a23: *u8,\n-    a24: *u8, a25: *u8, a26: *u8, a27: *u8,\n-    a28: *u8,\n-    a30: uv_tcp_t_32bit_unix_riders,\n+    a20: *u8, a21: *u8,\n+    a22: uv_tcp_t_32bit_unix_riders,\n }\n // 32bit unix size: 328 (164)\n #[cfg(target_arch=\"x86_64\")]\n@@ -113,8 +111,6 @@ pub struct uv_tcp_t_32bit_unix_riders {\n #[cfg(target_arch=\"arm\")]\n pub struct uv_tcp_t_32bit_unix_riders {\n     a29: *u8, a30: *u8, a31: *u8,\n-    a32: *u8, a33: *u8, a34: *u8,\n-    a35: *u8, a36: *u8,\n }\n \n // 32bit win32 size: 240 (120)\n@@ -130,11 +126,11 @@ pub struct uv_tcp_t {\n     a24: *u8, a25: *u8,\n }\n \n-// unix size: 48\n+// unix size: 64\n #[cfg(unix)]\n pub struct uv_connect_t {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n-    a04: *u8, a05: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8\n }\n // win32 size: 88 (44)\n #[cfg(windows)]\n@@ -152,7 +148,7 @@ pub struct uv_buf_t {\n // no gen stub method.. should create\n // it via uv::direct::buf_init()\n \n-// unix size: 144\n+// unix size: 160\n #[cfg(unix)]\n pub struct uv_write_t {\n     fields: uv_handle_fields,\n@@ -164,12 +160,13 @@ pub struct uv_write_t {\n }\n #[cfg(target_arch=\"x86_64\")]\n pub struct uv_write_t_32bit_unix_riders {\n-    a13: *u8,\n+    a13: *u8, a14: *u8, a15: *u8\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n pub struct uv_write_t_32bit_unix_riders {\n-    a13: *u8, a14: *u8,\n+    a13: *u8, a14: *u8, a15: *u8,\n+    a16: *u8,\n }\n // win32 size: 136 (68)\n #[cfg(windows)]\n@@ -180,15 +177,14 @@ pub struct uv_write_t {\n     a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n     a12: *u8,\n }\n-// 64bit unix size: 120\n+// 64bit unix size: 96\n // 32bit unix size: 152 (76)\n #[cfg(unix)]\n pub struct uv_async_t {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n-    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n-    a08: *u8, a09: *u8,\n-    a11: uv_async_t_32bit_unix_riders,\n+    a04: *u8, a05: *u8, a06: *u8,\n+    a07: uv_async_t_32bit_unix_riders,\n }\n #[cfg(target_arch=\"x86_64\")]\n pub struct uv_async_t_32bit_unix_riders {\n@@ -197,7 +193,7 @@ pub struct uv_async_t_32bit_unix_riders {\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n pub struct uv_async_t_32bit_unix_riders {\n-    a10: *u8, a11: *u8, a12: *u8, a13: *u8,\n+    a10: *u8,\n }\n // win32 size 132 (68)\n #[cfg(windows)]\n@@ -209,7 +205,7 @@ pub struct uv_async_t {\n     a12: *u8,\n }\n \n-// 64bit unix size: 128\n+// 64bit unix size: 120\n // 32bit unix size: 84\n #[cfg(unix)]\n pub struct uv_timer_t {\n@@ -221,13 +217,12 @@ pub struct uv_timer_t {\n }\n #[cfg(target_arch=\"x86_64\")]\n pub struct uv_timer_t_32bit_unix_riders {\n-    a10: *u8, a11: *u8,\n+    a10: *u8,\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n pub struct uv_timer_t_32bit_unix_riders {\n-    a10: *u8, a11: *u8, a12: *u8, a13: *u8,\n-    a14: *u8, a15: *u8, a16: *u8,\n+    a10: *u8, a11: *u8, a12: *u8\n }\n // win32 size: 64\n #[cfg(windows)]\n@@ -325,7 +320,8 @@ pub mod addrinfo_impl {\n // unix size: 72\n pub struct uv_getaddrinfo_t {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8, a04: *u8, a05: *u8,\n-    a06: *u8, a07: *u8, a08: *u8,\n+    a06: *u8, a07: *u8, a08: *u8, a09: *u8,\n+    a10: *u8, a11: *u8, a12: *u8, a13: *u8, a14: *u8, a15: *u8\n }\n \n pub mod uv_ll_struct_stubgen {\n@@ -378,12 +374,8 @@ pub mod uv_ll_struct_stubgen {\n                     a15: 0 as *u8,\n                     a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n                     a19: 0 as *u8,\n-                    a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n-                    a23: 0 as *u8,\n-                    a24: 0 as *u8, a25: 0 as *u8, a26: 0 as *u8,\n-                    a27: 0 as *u8,\n-                    a28: 0 as *u8,\n-                    a30: uv_tcp_t_32bit_unix_riders { a29: 0 as *u8 },\n+                    a20: 0 as *u8, a21: 0 as *u8,\n+                    a22: uv_tcp_t_32bit_unix_riders { a29: 0 as *u8 },\n                 }\n             }\n             #[cfg(target_arch=\"x86\")]\n@@ -405,15 +397,9 @@ pub mod uv_ll_struct_stubgen {\n                     a15: 0 as *u8,\n                     a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n                     a19: 0 as *u8,\n-                    a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n-                    a23: 0 as *u8,\n-                    a24: 0 as *u8, a25: 0 as *u8, a26: 0 as *u8,\n-                    a27: 0 as *u8,\n-                    a28: 0 as *u8,\n-                    a30: uv_tcp_t_32bit_unix_riders {\n+                    a20: 0 as *u8, a21: 0 as *u8,\n+                    a22: uv_tcp_t_32bit_unix_riders {\n                         a29: 0 as *u8, a30: 0 as *u8, a31: 0 as *u8,\n-                        a32: 0 as *u8, a33: 0 as *u8, a34: 0 as *u8,\n-                        a35: 0 as *u8, a36: 0 as *u8,\n                     },\n                 }\n             }\n@@ -447,7 +433,8 @@ pub mod uv_ll_struct_stubgen {\n         uv_connect_t {\n             a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n             a03: 0 as *u8,\n-            a04: 0 as *u8, a05: 0 as *u8,\n+            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+            a07: 0 as *u8\n         }\n     }\n     #[cfg(windows)]\n@@ -474,9 +461,7 @@ pub mod uv_ll_struct_stubgen {\n                 a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n                 a03: 0 as *u8,\n                 a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-                a07: 0 as *u8,\n-                a08: 0 as *u8, a09: 0 as *u8,\n-                a11: uv_async_t_32bit_unix_riders { a10: 0 as *u8 },\n+                a07: uv_async_t_32bit_unix_riders { a10: 0 as *u8 },\n             }\n         }\n         #[cfg(target_arch = \"x86\")]\n@@ -491,11 +476,8 @@ pub mod uv_ll_struct_stubgen {\n                 a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n                 a03: 0 as *u8,\n                 a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-                a07: 0 as *u8,\n-                a08: 0 as *u8, a09: 0 as *u8,\n-                a11: uv_async_t_32bit_unix_riders {\n-                    a10: 0 as *u8, a11: 0 as *u8,\n-                    a12: 0 as *u8, a13: 0 as *u8\n+                a07: uv_async_t_32bit_unix_riders {\n+                    a10: 0 as *u8,\n                 }\n             }\n         }\n@@ -534,7 +516,7 @@ pub mod uv_ll_struct_stubgen {\n                 a07: 0 as *u8,\n                 a08: 0 as *u8, a09: 0 as *u8,\n                 a11: uv_timer_t_32bit_unix_riders {\n-                    a10: 0 as *u8, a11: 0 as *u8\n+                    a10: 0 as *u8\n                 },\n             }\n         }\n@@ -554,9 +536,7 @@ pub mod uv_ll_struct_stubgen {\n                 a08: 0 as *u8, a09: 0 as *u8,\n                 a11: uv_timer_t_32bit_unix_riders {\n                     a10: 0 as *u8, a11: 0 as *u8,\n-                    a12: 0 as *u8, a13: 0 as *u8,\n-                    a14: 0 as *u8, a15: 0 as *u8,\n-                    a16: 0 as *u8,\n+                    a12: 0 as *u8,\n                 },\n             }\n         }\n@@ -595,7 +575,9 @@ pub mod uv_ll_struct_stubgen {\n                 a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n                 a11: 0 as *u8,\n                 a12: 0 as *u8,\n-                a14: uv_write_t_32bit_unix_riders { a13: 0 as *u8 },\n+                a14: uv_write_t_32bit_unix_riders { a13: 0 as *u8,\n+                                                   a14: 0 as *u8,\n+                                                   a15: 0 as *u8},\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n@@ -617,6 +599,8 @@ pub mod uv_ll_struct_stubgen {\n                 a14: uv_write_t_32bit_unix_riders {\n                     a13: 0 as *u8,\n                     a14: 0 as *u8,\n+                    a15: 0 as *u8,\n+                    a16: 0 as *u8,\n                 }\n             }\n         }\n@@ -642,7 +626,9 @@ pub mod uv_ll_struct_stubgen {\n         uv_getaddrinfo_t {\n             a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n             a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8, a07: 0 as *u8,\n-            a08: 0 as *u8\n+            a08: 0 as *u8, a09: 0 as *u8,\n+            a10: 1 as *u8, a11: 1 as *u8, a12: 1 as *u8, a13: 1 as *u8,\n+            a14: 1 as *u8, a15: 1 as *u8\n         }\n     }\n }\n@@ -652,9 +638,10 @@ extern mod rustrt {\n     // libuv public API\n     unsafe fn rust_uv_loop_new() -> *libc::c_void;\n     unsafe fn rust_uv_loop_delete(lp: *libc::c_void);\n-    unsafe fn rust_uv_loop_refcount(loop_ptr: *libc::c_void) -> libc::c_int;\n     unsafe fn rust_uv_run(loop_handle: *libc::c_void);\n     unsafe fn rust_uv_close(handle: *libc::c_void, cb: *u8);\n+    unsafe fn rust_uv_walk(loop_handle: *libc::c_void, cb: *u8,\n+                           arg: *libc::c_void);\n     unsafe fn rust_uv_async_send(handle: *uv_async_t);\n     unsafe fn rust_uv_async_init(loop_handle: *libc::c_void,\n                           async_handle: *uv_async_t,\n@@ -796,10 +783,6 @@ pub unsafe fn loop_delete(loop_handle: *libc::c_void) {\n     rustrt::rust_uv_loop_delete(loop_handle);\n }\n \n-pub unsafe fn loop_refcount(loop_ptr: *libc::c_void) -> libc::c_int {\n-    return rustrt::rust_uv_loop_refcount(loop_ptr);\n-}\n-\n pub unsafe fn run(loop_handle: *libc::c_void) {\n     rustrt::rust_uv_run(loop_handle);\n }\n@@ -808,6 +791,10 @@ pub unsafe fn close<T>(handle: *T, cb: *u8) {\n     rustrt::rust_uv_close(handle as *libc::c_void, cb);\n }\n \n+pub unsafe fn walk(loop_handle: *libc::c_void, cb: *u8, arg: *libc::c_void) {\n+    rustrt::rust_uv_walk(loop_handle, cb, arg);\n+}\n+\n pub unsafe fn tcp_init(loop_handle: *libc::c_void, handle: *uv_tcp_t)\n     -> libc::c_int {\n     return rustrt::rust_uv_tcp_init(loop_handle, handle);\n@@ -1126,7 +1113,7 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n     rustrt::rust_uv_addrinfo_as_sockaddr_in6(input)\n }\n \n-#[cfg(test)]\n+//#[cfg(test)]\n pub mod test {\n     use core::prelude::*;\n \n@@ -1693,66 +1680,66 @@ pub mod test {\n         }\n     }\n \n+    fn struct_size_check_common<TStruct>(t_name: ~str,\n+                                         foreign_size: libc::c_uint) {\n+        unsafe {\n+            let rust_size = sys::size_of::<TStruct>();\n+            let sizes_match = foreign_size as uint == rust_size;\n+            if !sizes_match {\n+                let output = fmt!(\n+                    \"STRUCT_SIZE FAILURE: %s -- actual: %u expected: %u\",\n+                    t_name, rust_size, foreign_size as uint);\n+                log(debug, output);\n+            }\n+            assert sizes_match;\n+        }\n+    }\n+\n     // struct size tests\n     #[test]\n     fn test_uv_ll_struct_size_uv_tcp_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_tcp_t_size();\n-            let rust_handle_size = sys::size_of::<uv_tcp_t>();\n-            let output = fmt!(\"uv_tcp_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_tcp_t>(\n+                ~\"uv_tcp_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_tcp_t_size()\n+            );\n         }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_connect_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_connect_t_size();\n-            let rust_handle_size = sys::size_of::<uv_connect_t>();\n-            let output = fmt!(\"uv_connect_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_connect_t>(\n+                ~\"uv_connect_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_connect_t_size()\n+            );\n         }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_buf_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_buf_t_size();\n-            let rust_handle_size = sys::size_of::<uv_buf_t>();\n-            let output = fmt!(\"uv_buf_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_buf_t>(\n+                ~\"uv_buf_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_buf_t_size()\n+            );\n         }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_uv_write_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_write_t_size();\n-            let rust_handle_size = sys::size_of::<uv_write_t>();\n-            let output = fmt!(\"uv_write_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_write_t>(\n+                ~\"uv_write_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_write_t_size()\n+            );\n         }\n     }\n \n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_sockaddr_in_size();\n-            let rust_handle_size = sys::size_of::<sockaddr_in>();\n-            let output = fmt!(\"sockaddr_in -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<sockaddr_in>(\n+                ~\"sockaddr_in\",\n+                ::uv_ll::rustrt::rust_uv_helper_sockaddr_in_size()\n+            );\n         }\n     }\n     #[test]\n@@ -1790,54 +1777,42 @@ pub mod test {\n     #[test]\n     fn test_uv_ll_struct_size_uv_async_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_async_t_size();\n-            let rust_handle_size = sys::size_of::<uv_async_t>();\n-            let output = fmt!(\"uv_async_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_async_t>(\n+                ~\"uv_async_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_async_t_size()\n+            );\n         }\n     }\n \n     #[test]\n     fn test_uv_ll_struct_size_uv_timer_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size();\n-            let rust_handle_size = sys::size_of::<uv_timer_t>();\n-            let output = fmt!(\"uv_timer_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_timer_t>(\n+                ~\"uv_timer_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size()\n+            );\n         }\n     }\n \n     #[test]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_uv_getaddrinfo_t() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n-            let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n-            let output = fmt!(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_getaddrinfo_t>(\n+                ~\"uv_getaddrinfo_t\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_getaddrinfo_t_size()\n+            );\n         }\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"macos\"))]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_addrinfo() {\n         unsafe {\n-            let foreign_handle_size =\n-                ::uv_ll::rustrt::rust_uv_helper_addrinfo_size();\n-            let rust_handle_size = sys::size_of::<addrinfo>();\n-            let output = fmt!(\"addrinfo -- foreign: %u rust: %u\",\n-                              foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n-            assert foreign_handle_size as uint == rust_handle_size;\n+            struct_size_check_common::<uv_timer_t>(\n+                ~\"addrinfo\",\n+                ::uv_ll::rustrt::rust_uv_helper_uv_timer_t_size()\n+            );\n         }\n     }\n }"}, {"sha": "f08261c336dcd27ca64cff9771b81499d8ad62b2", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=dfcdb6eb729fa51cac47f219a90a9f894819f343", "patch": "@@ -121,11 +121,6 @@ rust_uv_loop_delete(uv_loop_t* loop) {\n     uv_loop_delete(loop);\n }\n \n-extern \"C\" int\n-rust_uv_loop_refcount(uv_loop_t* loop) {\n-    return uv_loop_refcount(loop);\n-}\n-\n extern \"C\" void\n rust_uv_loop_set_data(uv_loop_t* loop, void* data) {\n     loop->data = data;\n@@ -151,14 +146,19 @@ rust_uv_stop_op_cb(uv_handle_t* op_handle) {\n \n extern \"C\" void\n rust_uv_run(uv_loop_t* loop) {\n-    uv_run(loop);\n+    uv_run(loop, UV_RUN_DEFAULT);\n }\n \n extern \"C\" void\n rust_uv_close(uv_handle_t* handle, uv_close_cb cb) {\n     uv_close(handle, cb);\n }\n \n+extern \"C\" void\n+rust_uv_walk(uv_loop_t* loop, uv_walk_cb cb, void* arg) {\n+    uv_walk(loop, cb, arg);\n+}\n+\n extern \"C\" void\n rust_uv_hilvl_close(uv_handle_t* handle, extern_close_cb cb) {\n     handle_data* data = (handle_data*)handle->data;"}, {"sha": "2e687472a8d6f59a30d000c11de60ad1a0b43294", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/dfcdb6eb729fa51cac47f219a90a9f894819f343/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=dfcdb6eb729fa51cac47f219a90a9f894819f343", "patch": "@@ -73,7 +73,7 @@ rust_upcall_free\n rust_upcall_malloc\n rust_uv_loop_new\n rust_uv_loop_delete\n-rust_uv_loop_refcount\n+rust_uv_walk\n rust_uv_loop_set_data\n rust_uv_bind_op_cb\n rust_uv_stop_op_cb"}]}