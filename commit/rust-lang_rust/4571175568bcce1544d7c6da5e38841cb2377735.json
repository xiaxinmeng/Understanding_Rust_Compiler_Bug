{"sha": "4571175568bcce1544d7c6da5e38841cb2377735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzExNzU1NjhiY2NlMTU0NGQ3YzZkYTVlMzg4NDFjYjIzNzc3MzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T01:26:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T01:28:16Z"}, "message": "stdlib: Make list::find do what the docs say it does.\n\nTalked on #rust about this change, got approval from graydon and brson. Will bring up tomorrow at meeting to verify.", "tree": {"sha": "940ac3acbad49545612e57c588548388568ccbc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940ac3acbad49545612e57c588548388568ccbc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4571175568bcce1544d7c6da5e38841cb2377735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4571175568bcce1544d7c6da5e38841cb2377735", "html_url": "https://github.com/rust-lang/rust/commit/4571175568bcce1544d7c6da5e38841cb2377735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4571175568bcce1544d7c6da5e38841cb2377735/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de30f4ef2f535b4cec24bba6166b8275d8400af", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de30f4ef2f535b4cec24bba6166b8275d8400af", "html_url": "https://github.com/rust-lang/rust/commit/3de30f4ef2f535b4cec24bba6166b8275d8400af"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "a33ba0b647a1bb1659cf191ee371dd8da0918f45", "filename": "src/libstd/list.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4571175568bcce1544d7c6da5e38841cb2377735/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4571175568bcce1544d7c6da5e38841cb2377735/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=4571175568bcce1544d7c6da5e38841cb2377735", "patch": "@@ -40,13 +40,13 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n \"]\n-fn find<T: copy, U: copy>(ls: list<T>, f: fn(T) -> option<U>)\n-    -> option<U> {\n+fn find<T: copy>(ls: list<T>, f: fn(T) -> bool) -> option<T> {\n     let ls = ls;\n     loop {\n         alt ls {\n           cons(hd, tl) {\n-            alt f(hd) { none { ls = *tl; } some(rs) { ret some(rs); } }\n+            if f(hd) { ret some(hd); }\n+            ls = *tl;\n           }\n           nil { ret none; }\n         }\n@@ -195,16 +195,14 @@ mod tests {\n \n     #[test]\n     fn test_find_success() {\n-        fn match(&&i: int) -> option<int> {\n-            ret if i == 2 { option::some(i) } else { option::none::<int> };\n-        }\n+        fn match(&&i: int) -> bool { ret i == 2; }\n         let l = from_vec([0, 1, 2]);\n         assert (list::find(l, match) == option::some(2));\n     }\n \n     #[test]\n     fn test_find_fail() {\n-        fn match(&&_i: int) -> option<int> { ret option::none::<int>; }\n+        fn match(&&_i: int) -> bool { ret false; }\n         let l = from_vec([0, 1, 2]);\n         let empty = list::nil::<int>;\n         assert (list::find(l, match) == option::none::<int>);"}, {"sha": "9c6ebe8ee1be50e33ec6909936e91b434ef8a839", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4571175568bcce1544d7c6da5e38841cb2377735/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4571175568bcce1544d7c6da5e38841cb2377735/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=4571175568bcce1544d7c6da5e38841cb2377735", "patch": "@@ -1469,6 +1469,24 @@ fn is_exported(e: env, i: ident, m: @indexed_mod) -> bool {\n         || e.resolve_unexported;\n }\n \n+// A list search function. Applies `f` to each element of `v`, starting from\n+// the first. When `f` returns `some(x)`, `list_search` returns `some(x)`. If\n+// `f` returns `none` for every element, `list_search` returns `none`.\n+fn list_search<T: copy, U: copy>(ls: list<T>, f: fn(T) -> option<U>)\n+        -> option<U> {\n+    let ls = ls;\n+    loop {\n+        alt ls {\n+          cons(hd, tl) {\n+            let result = f(hd);\n+            if !is_none(result) { ret result; }\n+            ls = *tl;\n+          }\n+          nil { ret none; }\n+        }\n+    };\n+}\n+\n fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n                        ns: namespace, dr: dir) -> option<def> {\n     let info = e.mod_map.get(node_id);\n@@ -1479,7 +1497,7 @@ fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n     alt info.index.find(id) {\n       none { }\n       some(lst) {\n-        let found = list::find(lst, bind lookup_in_mie(e, _, ns));\n+        let found = list_search(lst, bind lookup_in_mie(e, _, ns));\n         if !is_none(found) {\n             ret found;\n         }\n@@ -2072,7 +2090,7 @@ fn check_exports(e: @env) {\n             e.sess.span_fatal(sp, #fmt(\"undefined id %s in an export\", id));\n           }\n           some(ms) {\n-            let maybe_id = list::find(ms) {|m|\n+            let maybe_id = list_search(ms) {|m|\n                 alt m {\n                   mie_item(@{node: item_enum(_, _), id, _}) { some(id) }\n                   _ { none }"}]}