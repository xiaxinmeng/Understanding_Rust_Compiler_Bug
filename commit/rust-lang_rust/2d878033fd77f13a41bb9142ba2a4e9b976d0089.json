{"sha": "2d878033fd77f13a41bb9142ba2a4e9b976d0089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkODc4MDMzZmQ3N2YxM2E0MWJiOTE0MmJhMmE0ZTliOTc2ZDAwODk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-20T23:48:07Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-27T05:20:40Z"}, "message": "std: add micro optimization to vec.with_c_str_unchecked\n\nbefore:\n\ntest c_str::bench::bench_with_c_str_unchecked_long ... bench: 361 ns/iter (+/- 9)\ntest c_str::bench::bench_with_c_str_unchecked_medium ... bench: 75 ns/iter (+/- 2)\ntest c_str::bench::bench_with_c_str_unchecked_short ... bench: 60 ns/iter (+/- 9)\n\nafter:\n\ntest c_str::bench::bench_with_c_str_unchecked_long ... bench: 362 ns/iter (+/-\ntest c_str::bench::bench_with_c_str_unchecked_medium ... bench: 30 ns/iter (+/- 7)\ntest c_str::bench::bench_with_c_str_unchecked_short ... bench: 12 ns/iter (+/- 4)", "tree": {"sha": "1545cac11ea9a8695b494646ba2542b488fcd9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1545cac11ea9a8695b494646ba2542b488fcd9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d878033fd77f13a41bb9142ba2a4e9b976d0089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d878033fd77f13a41bb9142ba2a4e9b976d0089", "html_url": "https://github.com/rust-lang/rust/commit/2d878033fd77f13a41bb9142ba2a4e9b976d0089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d878033fd77f13a41bb9142ba2a4e9b976d0089/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4868273d97958d832fc7d0681be096bb265ae6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/4868273d97958d832fc7d0681be096bb265ae6ba", "html_url": "https://github.com/rust-lang/rust/commit/4868273d97958d832fc7d0681be096bb265ae6ba"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "e789e9a3bf1cc06443b4886f9a420c356ba21013", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2d878033fd77f13a41bb9142ba2a4e9b976d0089/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d878033fd77f13a41bb9142ba2a4e9b976d0089/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=2d878033fd77f13a41bb9142ba2a4e9b976d0089", "patch": "@@ -247,6 +247,11 @@ impl<'self> ToCStr for &'self str {\n     fn with_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n         self.as_bytes().with_c_str(f)\n     }\n+\n+    #[inline]\n+    unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        self.as_bytes().with_c_str_unchecked(f)\n+    }\n }\n \n // The length of the stack allocated buffer for `vec.with_c_str()`\n@@ -297,6 +302,23 @@ impl<'self> ToCStr for &'self [u8] {\n             self.to_c_str().with_ref(f)\n         }\n     }\n+\n+    unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        if self.len() < BUF_LEN {\n+            do self.as_imm_buf |self_buf, self_len| {\n+                let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n+\n+                do buf.as_mut_buf |buf, _| {\n+                    ptr::copy_memory(buf, self_buf, self_len);\n+                    *ptr::mut_offset(buf, self_len as int) = 0;\n+\n+                    f(buf as *libc::c_char)\n+                }\n+            }\n+        } else {\n+            self.to_c_str().with_ref(f)\n+        }\n+    }\n }\n \n #[inline]\n@@ -616,4 +638,29 @@ mod bench {\n     fn bench_with_c_str_long(bh: &mut BenchHarness) {\n         bench_with_c_str(bh, s_long)\n     }\n+\n+    fn bench_with_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            unsafe {\n+                do s.with_c_str_unchecked |c_str_buf| {\n+                    check(s, c_str_buf)\n+                }\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_short(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_medium(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_long(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_long)\n+    }\n }"}]}