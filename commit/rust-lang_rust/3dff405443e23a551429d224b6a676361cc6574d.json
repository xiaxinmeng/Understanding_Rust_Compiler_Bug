{"sha": "3dff405443e23a551429d224b6a676361cc6574d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmY0MDU0NDNlMjNhNTUxNDI5ZDIyNGI2YTY3NjM2MWNjNjU3NGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-11T09:20:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-11T09:20:20Z"}, "message": "Merge #2210\n\n2210: Introduce ToNav trait r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "07010e39e6d56903fc72c94c1fa8ddb5dd6b9c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07010e39e6d56903fc72c94c1fa8ddb5dd6b9c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dff405443e23a551429d224b6a676361cc6574d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdySfUCRBK7hj4Ov3rIwAAdHIIALH8UOkvogr7DUz8c8S/E85I\n5wXNMOoDGbzz7mJYRM545i4MUmeQWzRPx2OnA7ip/AuYRIjv7HIRw2ciEwcyTOD0\n2Rz1aSVNv8kN2I2MPymXH0HfkYCygxy7vhZEp4e/2TpHK3I43VJ18DitLKDV14gx\ni3YohnRbcz55BZcKbHoRgNTs1ZjcWDO/BK3OsxcfSnYdQInsPkHPw60qzS6VU/RL\nEQap6HRNQp0HI5Q/DaaKjeN8RdBS6b/ERJyrVIIatTkIzqBYjRl5oJgceYnqZccG\nR2ndmsXscxSaPcQQrR2ewyIxq5XZDgWDgM0feuGnsOOjkdFacsNWZIqsI5fW+Vc=\n=iyDD\n-----END PGP SIGNATURE-----\n", "payload": "tree 07010e39e6d56903fc72c94c1fa8ddb5dd6b9c25\nparent 2ccc45979cd2057bb88e209474698090fb32bb40\nparent 4deba88c33c470f084c531fa979fe5684d37f757\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573464020 +0000\ncommitter GitHub <noreply@github.com> 1573464020 +0000\n\nMerge #2210\n\n2210: Introduce ToNav trait r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dff405443e23a551429d224b6a676361cc6574d", "html_url": "https://github.com/rust-lang/rust/commit/3dff405443e23a551429d224b6a676361cc6574d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dff405443e23a551429d224b6a676361cc6574d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccc45979cd2057bb88e209474698090fb32bb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccc45979cd2057bb88e209474698090fb32bb40", "html_url": "https://github.com/rust-lang/rust/commit/2ccc45979cd2057bb88e209474698090fb32bb40"}, {"sha": "4deba88c33c470f084c531fa979fe5684d37f757", "url": "https://api.github.com/repos/rust-lang/rust/commits/4deba88c33c470f084c531fa979fe5684d37f757", "html_url": "https://github.com/rust-lang/rust/commit/4deba88c33c470f084c531fa979fe5684d37f757"}], "stats": {"total": 377, "additions": 200, "deletions": 177}, "files": [{"sha": "30617412a6dfa459ea3af8b85383761ccf37577c", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -15,7 +15,7 @@ pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n pub use structure::{file_structure, StructureNode};\n \n-pub(crate) use navigation_target::{description_from_symbol, docs_from_symbol};\n+pub(crate) use navigation_target::{description_from_symbol, docs_from_symbol, ToNav};\n pub(crate) use short_label::ShortLabel;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {"}, {"sha": "41d4675640c90267f003916955bd789e7e8600d8", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 177, "deletions": 151, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -29,19 +29,8 @@ pub struct NavigationTarget {\n     docs: Option<String>,\n }\n \n-fn find_range_from_node(\n-    db: &RootDatabase,\n-    src: hir::HirFileId,\n-    node: &SyntaxNode,\n-) -> (FileId, TextRange) {\n-    let text_range = node.text_range();\n-    let (file_id, text_range) = src\n-        .expansion_info(db)\n-        .and_then(|expansion_info| expansion_info.find_range(text_range))\n-        .unwrap_or((src, text_range));\n-\n-    // FIXME: handle recursive macro generated macro\n-    (file_id.original_file(db), text_range)\n+pub(crate) trait ToNav {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget;\n }\n \n impl NavigationTarget {\n@@ -95,19 +84,6 @@ impl NavigationTarget {\n         NavigationTarget::from_named(db, file_id.into(), pat, None, None)\n     }\n \n-    pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n-        NavigationTarget {\n-            file_id: symbol.file_id,\n-            name: symbol.name.clone(),\n-            kind: symbol.ptr.kind(),\n-            full_range: symbol.ptr.range(),\n-            focus_range: symbol.name_range,\n-            container_name: symbol.container_name.clone(),\n-            description: description_from_symbol(db, &symbol),\n-            docs: docs_from_symbol(db, &symbol),\n-        }\n-    }\n-\n     pub(crate) fn from_pat(\n         db: &RootDatabase,\n         file_id: FileId,\n@@ -136,39 +112,6 @@ impl NavigationTarget {\n         }\n     }\n \n-    pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n-        let src = module.definition_source(db);\n-        let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match src.ast {\n-            ModuleSource::SourceFile(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n-\n-                NavigationTarget::from_syntax(\n-                    file_id,\n-                    name,\n-                    None,\n-                    text_range,\n-                    node.syntax(),\n-                    None,\n-                    None,\n-                )\n-            }\n-            ModuleSource::Module(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n-\n-                NavigationTarget::from_syntax(\n-                    file_id,\n-                    name,\n-                    None,\n-                    text_range,\n-                    node.syntax(),\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n-        }\n-    }\n-\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n@@ -183,112 +126,29 @@ impl NavigationTarget {\n                 src.ast.short_label(),\n             );\n         }\n-        NavigationTarget::from_module(db, module)\n-    }\n-\n-    pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {\n-        let src = field.source(db);\n-        match src.ast {\n-            FieldSource::Named(it) => NavigationTarget::from_named(\n-                db,\n-                src.file_id,\n-                &it,\n-                it.doc_comment_text(),\n-                it.short_label(),\n-            ),\n-            FieldSource::Pos(it) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, it.syntax());\n-                NavigationTarget::from_syntax(\n-                    file_id,\n-                    \"\".into(),\n-                    None,\n-                    text_range,\n-                    it.syntax(),\n-                    None,\n-                    None,\n-                )\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn from_def_source<A, D>(db: &RootDatabase, def: D) -> NavigationTarget\n-    where\n-        D: HasSource<Ast = A>,\n-        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n-    {\n-        let src = def.source(db);\n-        NavigationTarget::from_named(\n-            db,\n-            src.file_id,\n-            &src.ast,\n-            src.ast.doc_comment_text(),\n-            src.ast.short_label(),\n-        )\n-    }\n-\n-    pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::Adt) -> NavigationTarget {\n-        match adt_def {\n-            hir::Adt::Struct(it) => NavigationTarget::from_def_source(db, it),\n-            hir::Adt::Union(it) => NavigationTarget::from_def_source(db, it),\n-            hir::Adt::Enum(it) => NavigationTarget::from_def_source(db, it),\n-        }\n+        module.to_nav(db)\n     }\n \n     pub(crate) fn from_def(\n         db: &RootDatabase,\n         module_def: hir::ModuleDef,\n     ) -> Option<NavigationTarget> {\n         let nav = match module_def {\n-            hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n-            hir::ModuleDef::Function(func) => NavigationTarget::from_def_source(db, func),\n-            hir::ModuleDef::Adt(it) => NavigationTarget::from_adt_def(db, it),\n-            hir::ModuleDef::Const(it) => NavigationTarget::from_def_source(db, it),\n-            hir::ModuleDef::Static(it) => NavigationTarget::from_def_source(db, it),\n-            hir::ModuleDef::EnumVariant(it) => NavigationTarget::from_def_source(db, it),\n-            hir::ModuleDef::Trait(it) => NavigationTarget::from_def_source(db, it),\n-            hir::ModuleDef::TypeAlias(it) => NavigationTarget::from_def_source(db, it),\n+            hir::ModuleDef::Module(module) => module.to_nav(db),\n+            hir::ModuleDef::Function(it) => it.to_nav(db),\n+            hir::ModuleDef::Adt(it) => it.to_nav(db),\n+            hir::ModuleDef::Const(it) => it.to_nav(db),\n+            hir::ModuleDef::Static(it) => it.to_nav(db),\n+            hir::ModuleDef::EnumVariant(it) => it.to_nav(db),\n+            hir::ModuleDef::Trait(it) => it.to_nav(db),\n+            hir::ModuleDef::TypeAlias(it) => it.to_nav(db),\n             hir::ModuleDef::BuiltinType(..) => {\n                 return None;\n             }\n         };\n         Some(nav)\n     }\n \n-    pub(crate) fn from_impl_block(\n-        db: &RootDatabase,\n-        impl_block: hir::ImplBlock,\n-    ) -> NavigationTarget {\n-        let src = impl_block.source(db);\n-        let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n-\n-        NavigationTarget::from_syntax(\n-            file_id,\n-            \"impl\".into(),\n-            None,\n-            text_range,\n-            src.ast.syntax(),\n-            None,\n-            None,\n-        )\n-    }\n-\n-    pub(crate) fn from_assoc_item(\n-        db: &RootDatabase,\n-        assoc_item: hir::AssocItem,\n-    ) -> NavigationTarget {\n-        match assoc_item {\n-            AssocItem::Function(it) => NavigationTarget::from_def_source(db, it),\n-            AssocItem::Const(it) => NavigationTarget::from_def_source(db, it),\n-            AssocItem::TypeAlias(it) => NavigationTarget::from_def_source(db, it),\n-        }\n-    }\n-\n-    pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n-        let src = macro_call.source(db);\n-        log::debug!(\"nav target {:#?}\", src.ast.syntax());\n-        NavigationTarget::from_named(db, src.file_id, &src.ast, src.ast.doc_comment_text(), None)\n-    }\n-\n     #[cfg(test)]\n     pub(crate) fn assert_match(&self, expected: &str) {\n         let actual = self.debug_render();\n@@ -359,6 +219,172 @@ impl NavigationTarget {\n     }\n }\n \n+impl ToNav for FileSymbol {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        NavigationTarget {\n+            file_id: self.file_id,\n+            name: self.name.clone(),\n+            kind: self.ptr.kind(),\n+            full_range: self.ptr.range(),\n+            focus_range: self.name_range,\n+            container_name: self.container_name.clone(),\n+            description: description_from_symbol(db, self),\n+            docs: docs_from_symbol(db, self),\n+        }\n+    }\n+}\n+\n+pub(crate) trait ToNavFromAst {}\n+impl ToNavFromAst for hir::Function {}\n+impl ToNavFromAst for hir::Const {}\n+impl ToNavFromAst for hir::Static {}\n+impl ToNavFromAst for hir::Struct {}\n+impl ToNavFromAst for hir::Enum {}\n+impl ToNavFromAst for hir::EnumVariant {}\n+impl ToNavFromAst for hir::Union {}\n+impl ToNavFromAst for hir::TypeAlias {}\n+impl ToNavFromAst for hir::Trait {}\n+\n+impl<D> ToNav for D\n+where\n+    D: HasSource + ToNavFromAst + Copy,\n+    D::Ast: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+{\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        NavigationTarget::from_named(\n+            db,\n+            src.file_id,\n+            &src.ast,\n+            src.ast.doc_comment_text(),\n+            src.ast.short_label(),\n+        )\n+    }\n+}\n+\n+impl ToNav for hir::Module {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.definition_source(db);\n+        let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n+        match src.ast {\n+            ModuleSource::SourceFile(node) => {\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    name,\n+                    None,\n+                    text_range,\n+                    node.syntax(),\n+                    None,\n+                    None,\n+                )\n+            }\n+            ModuleSource::Module(node) => {\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    name,\n+                    None,\n+                    text_range,\n+                    node.syntax(),\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+impl ToNav for hir::ImplBlock {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+\n+        NavigationTarget::from_syntax(\n+            file_id,\n+            \"impl\".into(),\n+            None,\n+            text_range,\n+            src.ast.syntax(),\n+            None,\n+            None,\n+        )\n+    }\n+}\n+\n+impl ToNav for hir::StructField {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+\n+        match src.ast {\n+            FieldSource::Named(it) => NavigationTarget::from_named(\n+                db,\n+                src.file_id,\n+                &it,\n+                it.doc_comment_text(),\n+                it.short_label(),\n+            ),\n+            FieldSource::Pos(it) => {\n+                let (file_id, text_range) = find_range_from_node(db, src.file_id, it.syntax());\n+                NavigationTarget::from_syntax(\n+                    file_id,\n+                    \"\".into(),\n+                    None,\n+                    text_range,\n+                    it.syntax(),\n+                    None,\n+                    None,\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+impl ToNav for hir::MacroDef {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        log::debug!(\"nav target {:#?}\", src.ast.syntax());\n+        NavigationTarget::from_named(db, src.file_id, &src.ast, src.ast.doc_comment_text(), None)\n+    }\n+}\n+\n+impl ToNav for hir::Adt {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        match self {\n+            hir::Adt::Struct(it) => it.to_nav(db),\n+            hir::Adt::Union(it) => it.to_nav(db),\n+            hir::Adt::Enum(it) => it.to_nav(db),\n+        }\n+    }\n+}\n+\n+impl ToNav for hir::AssocItem {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        match self {\n+            AssocItem::Function(it) => it.to_nav(db),\n+            AssocItem::Const(it) => it.to_nav(db),\n+            AssocItem::TypeAlias(it) => it.to_nav(db),\n+        }\n+    }\n+}\n+\n+fn find_range_from_node(\n+    db: &RootDatabase,\n+    src: hir::HirFileId,\n+    node: &SyntaxNode,\n+) -> (FileId, TextRange) {\n+    let text_range = node.text_range();\n+    let (file_id, text_range) = src\n+        .expansion_info(db)\n+        .and_then(|expansion_info| expansion_info.find_range(text_range))\n+        .unwrap_or((src, text_range));\n+\n+    // FIXME: handle recursive macro generated macro\n+    (file_id.original_file(db), text_range)\n+}\n+\n pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let parse = db.parse(symbol.file_id);\n     let node = symbol.ptr.to_node(parse.tree().syntax());"}, {"sha": "713b61d5ee742edf00bf2c87320b96a9f6c3f3da", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n \n use crate::{\n     db::RootDatabase,\n-    display::ShortLabel,\n+    display::{ShortLabel, ToNav},\n     references::{classify_name_ref, NameKind::*},\n     FilePosition, NavigationTarget, RangeInfo,\n };\n@@ -56,16 +56,16 @@ pub(crate) fn reference_definition(\n \n     let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n     match name_kind {\n-        Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n-        Some(Field(field)) => return Exact(NavigationTarget::from_field(db, field)),\n-        Some(AssocItem(assoc)) => return Exact(NavigationTarget::from_assoc_item(db, assoc)),\n+        Some(Macro(mac)) => return Exact(mac.to_nav(db)),\n+        Some(Field(field)) => return Exact(field.to_nav(db)),\n+        Some(AssocItem(assoc)) => return Exact(assoc.to_nav(db)),\n         Some(Def(def)) => match NavigationTarget::from_def(db, def) {\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },\n         Some(SelfType(ty)) => {\n-            if let Some((def_id, _)) = ty.as_adt() {\n-                return Exact(NavigationTarget::from_adt_def(db, def_id));\n+            if let Some((adt, _)) = ty.as_adt() {\n+                return Exact(adt.to_nav(db));\n             }\n         }\n         Some(Pat((_, pat))) => return Exact(NavigationTarget::from_pat(db, file_id, pat)),\n@@ -79,7 +79,7 @@ pub(crate) fn reference_definition(\n     // Fallback index based approach:\n     let navs = crate::symbol_index::index_resolve(db, name_ref)\n         .into_iter()\n-        .map(|s| NavigationTarget::from_symbol(db, s))\n+        .map(|s| s.to_nav(db))\n         .collect();\n     Approximate(navs)\n }\n@@ -95,7 +95,7 @@ pub(crate) fn name_definition(\n         if module.has_semi() {\n             let src = hir::Source { file_id: file_id.into(), ast: module };\n             if let Some(child_module) = hir::Module::from_declaration(db, src) {\n-                let nav = NavigationTarget::from_module(db, child_module);\n+                let nav = child_module.to_nav(db);\n                 return Some(vec![nav]);\n             }\n         }"}, {"sha": "71146591df807b2a27bbeab05ae52381f99913db", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -3,7 +3,7 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{ast, AstNode};\n \n-use crate::{db::RootDatabase, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n@@ -33,7 +33,7 @@ pub(crate) fn goto_type_definition(\n \n     let adt_def = analyzer.autoderef(db, ty).find_map(|ty| ty.as_adt().map(|adt| adt.0))?;\n \n-    let nav = NavigationTarget::from_adt_def(db, adt_def);\n+    let nav = adt_def.to_nav(db);\n     Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n "}, {"sha": "bc9b66550766c7f8fc8df5ab7aa549d3f01c1b0a", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -4,7 +4,7 @@ use hir::{db::HirDatabase, ApplicationTy, FromSource, Ty, TypeCtor};\n use ra_db::SourceDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n-use crate::{db::RootDatabase, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_implementation(\n     db: &RootDatabase,\n@@ -58,7 +58,7 @@ fn impls_for_def(\n         impls\n             .all_impls()\n             .filter(|impl_block| is_equal_for_find_impls(&ty, &impl_block.target_ty(db)))\n-            .map(|imp| NavigationTarget::from_impl_block(db, imp))\n+            .map(|imp| imp.to_nav(db))\n             .collect(),\n     )\n }\n@@ -75,12 +75,7 @@ fn impls_for_trait(\n     let krate = module.krate();\n     let impls = db.impls_in_crate(krate);\n \n-    Some(\n-        impls\n-            .lookup_impl_blocks_for_trait(tr)\n-            .map(|imp| NavigationTarget::from_impl_block(db, imp))\n-            .collect(),\n-    )\n+    Some(impls.lookup_impl_blocks_for_trait(tr).map(|imp| imp.to_nav(db)).collect())\n }\n \n fn is_equal_for_find_impls(original_ty: &Ty, impl_ty: &Ty) -> bool {"}, {"sha": "484fbcc82319b4d481b06d399597a3db5e80998b", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -56,7 +56,7 @@ use ra_db::{\n };\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n \n-use crate::{db::LineIndexDatabase, symbol_index::FileSymbol};\n+use crate::{db::LineIndexDatabase, display::ToNav, symbol_index::FileSymbol};\n \n pub use crate::{\n     assists::{Assist, AssistId},\n@@ -351,7 +351,7 @@ impl Analysis {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter()\n-                .map(|s| NavigationTarget::from_symbol(db, s))\n+                .map(|s| s.to_nav(db))\n                 .collect::<Vec<_>>()\n         })\n     }"}, {"sha": "0a76bf48469d01c2c3b45f6d7fb30fac495e9bc5", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dff405443e23a551429d224b6a676361cc6574d/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=3dff405443e23a551429d224b6a676361cc6574d", "patch": "@@ -19,7 +19,9 @@ use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxNode, TextUnit};\n \n-use crate::{db::RootDatabase, FilePosition, FileRange, NavigationTarget, RangeInfo};\n+use crate::{\n+    db::RootDatabase, display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo,\n+};\n \n pub(crate) use self::{\n     classify::{classify_name, classify_name_ref},\n@@ -76,12 +78,12 @@ pub(crate) fn find_all_refs(\n     let RangeInfo { range, info: (name, def) } = find_name(db, &syntax, position)?;\n \n     let declaration = match def.kind {\n-        NameKind::Macro(mac) => NavigationTarget::from_macro_def(db, mac),\n-        NameKind::Field(field) => NavigationTarget::from_field(db, field),\n-        NameKind::AssocItem(assoc) => NavigationTarget::from_assoc_item(db, assoc),\n+        NameKind::Macro(mac) => mac.to_nav(db),\n+        NameKind::Field(field) => field.to_nav(db),\n+        NameKind::AssocItem(assoc) => assoc.to_nav(db),\n         NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n         NameKind::SelfType(ref ty) => match ty.as_adt() {\n-            Some((def_id, _)) => NavigationTarget::from_adt_def(db, def_id),\n+            Some((adt, _)) => adt.to_nav(db),\n             None => return None,\n         },\n         NameKind::Pat((_, pat)) => NavigationTarget::from_pat(db, position.file_id, pat),"}]}