{"sha": "127373822e9d602bc4c9564fd8957a1b0a114835", "node_id": "C_kwDOAAsO6NoAKDEyNzM3MzgyMmU5ZDYwMmJjNGM5NTY0ZmQ4OTU3YTFiMGExMTQ4MzU", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-11T19:49:40Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-11T20:33:49Z"}, "message": "Remove built-in cache_hit tracking\n\nThis was already only enabled in debug_assertions builds. Generally, it seems\nlike most use cases that would use this could also use the -Zself-profile flag\nwhich also tracks cache hits (in all builds), and so the extra cfg's and such\nare not really necessary.\n\nThis is largely just a small cleanup though, which primarily is intended to make\nother changes easier by avoiding the need to deal with this field.", "tree": {"sha": "1a85d8eb951d615273eef19869c76ea8ce05f5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a85d8eb951d615273eef19869c76ea8ce05f5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127373822e9d602bc4c9564fd8957a1b0a114835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127373822e9d602bc4c9564fd8957a1b0a114835", "html_url": "https://github.com/rust-lang/rust/commit/127373822e9d602bc4c9564fd8957a1b0a114835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127373822e9d602bc4c9564fd8957a1b0a114835/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "html_url": "https://github.com/rust-lang/rust/commit/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b"}], "stats": {"total": 50, "additions": 1, "deletions": 49}, "files": [{"sha": "c3bbd51f3d3cc13140b6f943247ef39a814b1585", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/127373822e9d602bc4c9564fd8957a1b0a114835/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127373822e9d602bc4c9564fd8957a1b0a114835/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=127373822e9d602bc4c9564fd8957a1b0a114835", "patch": "@@ -5,8 +5,6 @@ use rustc_query_system::query::{QueryCache, QueryCacheStore};\n \n use std::any::type_name;\n use std::mem;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::Ordering;\n \n trait KeyStats {\n     fn key_stats(&self, stats: &mut QueryStats);\n@@ -27,7 +25,6 @@ impl KeyStats for DefId {\n #[derive(Clone)]\n struct QueryStats {\n     name: &'static str,\n-    cache_hits: usize,\n     key_size: usize,\n     key_type: &'static str,\n     value_size: usize,\n@@ -42,10 +39,6 @@ where\n {\n     let mut stats = QueryStats {\n         name,\n-        #[cfg(debug_assertions)]\n-        cache_hits: map.cache_hits.load(Ordering::Relaxed),\n-        #[cfg(not(debug_assertions))]\n-        cache_hits: 0,\n         key_size: mem::size_of::<C::Key>(),\n         key_type: type_name::<C::Key>(),\n         value_size: mem::size_of::<C::Value>(),\n@@ -63,12 +56,6 @@ where\n pub fn print_stats(tcx: TyCtxt<'_>) {\n     let queries = query_stats(tcx);\n \n-    if cfg!(debug_assertions) {\n-        let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n-        let results: usize = queries.iter().map(|s| s.entry_count).sum();\n-        eprintln!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n-    }\n-\n     let mut query_key_sizes = queries.clone();\n     query_key_sizes.sort_by_key(|q| q.key_size);\n     eprintln!(\"\\nLarge query keys:\");\n@@ -83,20 +70,6 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         eprintln!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n     }\n \n-    if cfg!(debug_assertions) {\n-        let mut query_cache_hits = queries.clone();\n-        query_cache_hits.sort_by_key(|q| q.cache_hits);\n-        eprintln!(\"\\nQuery cache hits:\");\n-        for q in query_cache_hits.iter().rev() {\n-            eprintln!(\n-                \"   {} - {} ({}%)\",\n-                q.name,\n-                q.cache_hits,\n-                q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n-            );\n-        }\n-    }\n-\n     let mut query_value_count = queries.clone();\n     query_value_count.sort_by_key(|q| q.entry_count);\n     eprintln!(\"\\nQuery value count:\");"}, {"sha": "07d720599759607a25ee5f4c68df663f00c6fc39", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/127373822e9d602bc4c9564fd8957a1b0a114835/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127373822e9d602bc4c9564fd8957a1b0a114835/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=127373822e9d602bc4c9564fd8957a1b0a114835", "patch": "@@ -26,24 +26,15 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n use std::ptr;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct QueryCacheStore<C: QueryCache> {\n     cache: C,\n     shards: Sharded<C::Sharded>,\n-    #[cfg(debug_assertions)]\n-    pub cache_hits: AtomicUsize,\n }\n \n impl<C: QueryCache + Default> Default for QueryCacheStore<C> {\n     fn default() -> Self {\n-        Self {\n-            cache: C::default(),\n-            shards: Default::default(),\n-            #[cfg(debug_assertions)]\n-            cache_hits: AtomicUsize::new(0),\n-        }\n+        Self { cache: C::default(), shards: Default::default() }\n     }\n }\n \n@@ -377,10 +368,6 @@ where\n         if unlikely!(tcx.profiler().enabled()) {\n             tcx.profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n         tcx.dep_graph().read_index(index);\n         on_hit(value)\n     })\n@@ -429,10 +416,6 @@ where\n             if unlikely!(tcx.dep_context().profiler().enabled()) {\n                 tcx.dep_context().profiler().query_cache_hit(index.into());\n             }\n-            #[cfg(debug_assertions)]\n-            {\n-                cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-            }\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n \n             (v, Some(index))\n@@ -705,10 +688,6 @@ where\n         if unlikely!(tcx.dep_context().profiler().enabled()) {\n             tcx.dep_context().profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n     });\n \n     let lookup = match cached {"}]}