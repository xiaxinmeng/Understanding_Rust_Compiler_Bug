{"sha": "6daa6d5ffe04475c8e54498dc1ebcdb4a884928c", "node_id": "C_kwDOAAsO6NoAKDZkYWE2ZDVmZmUwNDQ3NWM4ZTU0NDk4ZGMxZWJjZGI0YTg4NDkyOGM", "commit": {"author": {"name": "mi_sawa", "email": "mi.sawa.1216+git@gmail.com", "date": "2022-02-11T17:24:32Z"}, "committer": {"name": "mi_sawa", "email": "mi.sawa.1216+git@gmail.com", "date": "2022-02-11T17:24:32Z"}, "message": "Optimize redundant_clone\n\nby using a static data structure to track transitive relations.", "tree": {"sha": "4187b1a9acb5642c99877590e0c53d6a0b2f9117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4187b1a9acb5642c99877590e0c53d6a0b2f9117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c", "html_url": "https://github.com/rust-lang/rust/commit/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c/comments", "author": {"login": "MiSawa", "id": 567444, "node_id": "MDQ6VXNlcjU2NzQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/567444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiSawa", "html_url": "https://github.com/MiSawa", "followers_url": "https://api.github.com/users/MiSawa/followers", "following_url": "https://api.github.com/users/MiSawa/following{/other_user}", "gists_url": "https://api.github.com/users/MiSawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiSawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiSawa/subscriptions", "organizations_url": "https://api.github.com/users/MiSawa/orgs", "repos_url": "https://api.github.com/users/MiSawa/repos", "events_url": "https://api.github.com/users/MiSawa/events{/privacy}", "received_events_url": "https://api.github.com/users/MiSawa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MiSawa", "id": 567444, "node_id": "MDQ6VXNlcjU2NzQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/567444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiSawa", "html_url": "https://github.com/MiSawa", "followers_url": "https://api.github.com/users/MiSawa/followers", "following_url": "https://api.github.com/users/MiSawa/following{/other_user}", "gists_url": "https://api.github.com/users/MiSawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiSawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiSawa/subscriptions", "organizations_url": "https://api.github.com/users/MiSawa/orgs", "repos_url": "https://api.github.com/users/MiSawa/repos", "events_url": "https://api.github.com/users/MiSawa/events{/privacy}", "received_events_url": "https://api.github.com/users/MiSawa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b3c4b90f4346b3990c1be387c3b3ca7b78412c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b3c4b90f4346b3990c1be387c3b3ca7b78412c", "html_url": "https://github.com/rust-lang/rust/commit/57b3c4b90f4346b3990c1be387c3b3ca7b78412c"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "60cc8fddcb49e9a285675922a252f85255387ac8", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6daa6d5ffe04475c8e54498dc1ebcdb4a884928c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=6daa6d5ffe04475c8e54498dc1ebcdb4a884928c", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n-use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{def_id, Body, FnDecl, HirId};\n@@ -512,7 +512,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`.\n struct PossibleBorrowerVisitor<'a, 'tcx> {\n-    possible_borrower: TransitiveRelation<mir::Local>,\n+    possible_borrower: TransitiveRelation,\n     body: &'a mir::Body<'tcx>,\n     cx: &'a LateContext<'tcx>,\n     possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n@@ -543,18 +543,10 @@ impl<'a, 'tcx> PossibleBorrowerVisitor<'a, 'tcx> {\n                 continue;\n             }\n \n-            let borrowers = self.possible_borrower.reachable_from(&row);\n+            let mut borrowers = self.possible_borrower.reachable_from(row, self.body.local_decls.len());\n+            borrowers.remove(mir::Local::from_usize(0));\n             if !borrowers.is_empty() {\n-                let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n-                for &c in borrowers {\n-                    if c != mir::Local::from_usize(0) {\n-                        bs.insert(c);\n-                    }\n-                }\n-\n-                if !bs.is_empty() {\n-                    map.insert(row, bs);\n-                }\n+                map.insert(row, borrowers);\n             }\n         }\n \n@@ -644,7 +636,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n /// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n /// Known Problems: not sure all borrowed are tracked\n struct PossibleOriginVisitor<'a, 'tcx> {\n-    possible_origin: TransitiveRelation<mir::Local>,\n+    possible_origin: TransitiveRelation,\n     body: &'a mir::Body<'tcx>,\n }\n \n@@ -663,18 +655,10 @@ impl<'a, 'tcx> PossibleOriginVisitor<'a, 'tcx> {\n                 continue;\n             }\n \n-            let borrowers = self.possible_origin.reachable_from(&row);\n+            let mut borrowers = self.possible_origin.reachable_from(row, self.body.local_decls.len());\n+            borrowers.remove(mir::Local::from_usize(0));\n             if !borrowers.is_empty() {\n-                let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n-                for &c in borrowers {\n-                    if c != mir::Local::from_usize(0) {\n-                        bs.insert(c);\n-                    }\n-                }\n-\n-                if !bs.is_empty() {\n-                    map.insert(row, bs);\n-                }\n+                map.insert(row, borrowers);\n             }\n         }\n         map\n@@ -766,3 +750,30 @@ impl PossibleBorrowerMap<'_, '_> {\n         self.maybe_live.contains(local)\n     }\n }\n+\n+#[derive(Default)]\n+struct TransitiveRelation {\n+    relations: FxHashMap<mir::Local, Vec<mir::Local>>,\n+}\n+impl TransitiveRelation {\n+    fn add(&mut self, a: mir::Local, b: mir::Local) {\n+        self.relations.entry(a).or_default().push(b);\n+    }\n+\n+    fn reachable_from(&self, a: mir::Local, domain_size: usize) -> HybridBitSet<mir::Local> {\n+        let mut seen = HybridBitSet::new_empty(domain_size);\n+        seen.insert(a);\n+        let mut stack = vec![a];\n+        while let Some(u) = stack.pop() {\n+            if let Some(edges) = self.relations.get(&u) {\n+                for &v in edges {\n+                    if seen.insert(v) {\n+                        stack.push(v);\n+                    }\n+                }\n+            }\n+        }\n+        seen.remove(a);\n+        seen\n+    }\n+}"}]}