{"sha": "8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMmU3MTYxZWU3ZjFhYTI4ZjhmNDVhNjBkNzFkNTU1OWViMGQ1Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-28T19:06:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-28T19:06:34Z"}, "message": "auto merge of #16025 : cmr/rust/plugin-fields, r=alexcrichton\n\nSome minor changes to the compiler to expose this information. Very\ninconvenient since struct fields aren't an item.", "tree": {"sha": "61ce388e70221dac9ea0c85cb41ec491d0965394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61ce388e70221dac9ea0c85cb41ec491d0965394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "html_url": "https://github.com/rust-lang/rust/commit/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ef36ee4269644ca97907a06c924b5d8be36b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ef36ee4269644ca97907a06c924b5d8be36b89", "html_url": "https://github.com/rust-lang/rust/commit/f4ef36ee4269644ca97907a06c924b5d8be36b89"}, {"sha": "8876ce44c59bbb20006ae5beccc9f6954e7d1e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876ce44c59bbb20006ae5beccc9f6954e7d1e4f", "html_url": "https://github.com/rust-lang/rust/commit/8876ce44c59bbb20006ae5beccc9f6954e7d1e4f"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "a42880b2d36c782f94d798ebbf6355225830d2f2", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -227,3 +227,9 @@ pub static tag_region_param_def_index: uint = 0x94;\n pub static tag_unboxed_closures: uint = 0x95;\n pub static tag_unboxed_closure: uint = 0x96;\n pub static tag_unboxed_closure_type: uint = 0x97;\n+\n+pub static tag_struct_fields: uint = 0x98;\n+pub static tag_struct_field: uint = 0x99;\n+pub static tag_struct_field_id: uint = 0x9a;\n+\n+pub static tag_attribute_is_sugared_doc: uint = 0x9b;"}, {"sha": "b1b366ec03090de4526f3ab2626956c4056b8a53", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -29,6 +29,8 @@ use syntax::attr;\n use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n+use std::collections::hashmap::HashMap;\n+\n pub struct StaticMethodInfo {\n     pub ident: ast::Ident,\n     pub def_id: ast::DefId,\n@@ -192,6 +194,12 @@ pub fn get_struct_fields(cstore: &cstore::CStore,\n     decoder::get_struct_fields(cstore.intr.clone(), &*cdata, def.node)\n }\n \n+pub fn get_struct_field_attrs(cstore: &cstore::CStore, def: ast::DefId) -> HashMap<ast::NodeId,\n+        Vec<ast::Attribute>> {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_struct_field_attrs(&*cdata)\n+}\n+\n pub fn get_type(tcx: &ty::ctxt,\n                 def: ast::DefId)\n              -> ty::Polytype {"}, {"sha": "f7576ffb4818bb4af32eb603fd101428f58f92a5", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -34,6 +34,7 @@ use std::hash::Hash;\n use std::hash;\n use std::io::extensions::u64_from_be_bytes;\n use std::io;\n+use std::collections::hashmap::HashMap;\n use std::rc::Rc;\n use std::u64;\n use serialize::ebml::reader;\n@@ -963,6 +964,19 @@ pub fn get_item_attrs(cdata: Cmd,\n     f(get_attributes(item));\n }\n \n+pub fn get_struct_field_attrs(cdata: Cmd) -> HashMap<ast::NodeId, Vec<ast::Attribute>> {\n+    let data = ebml::Doc::new(cdata.data());\n+    let fields = reader::get_doc(data, tag_struct_fields);\n+    let mut map = HashMap::new();\n+    reader::tagged_docs(fields, tag_struct_field, |field| {\n+        let id = reader::doc_as_u32(reader::get_doc(field, tag_struct_field_id));\n+        let attrs = get_attributes(field);\n+        map.insert(id, attrs);\n+        true\n+    });\n+    map\n+}\n+\n fn struct_field_family_to_visibility(family: Family) -> ast::Visibility {\n     match family {\n       PublicField => ast::Public,\n@@ -1042,6 +1056,9 @@ fn get_attributes(md: ebml::Doc) -> Vec<ast::Attribute> {\n     match reader::maybe_get_doc(md, tag_attributes) {\n       Some(attrs_d) => {\n         reader::tagged_docs(attrs_d, tag_attribute, |attr_doc| {\n+            let is_sugared_doc = reader::doc_as_u8(\n+                reader::get_doc(attr_doc, tag_attribute_is_sugared_doc)\n+            ) == 1;\n             let meta_items = get_meta_items(attr_doc);\n             // Currently it's only possible to have a single meta item on\n             // an attribute\n@@ -1053,7 +1070,7 @@ fn get_attributes(md: ebml::Doc) -> Vec<ast::Attribute> {\n                         id: attr::mk_attr_id(),\n                         style: ast::AttrOuter,\n                         value: meta_item,\n-                        is_sugared_doc: false,\n+                        is_sugared_doc: is_sugared_doc,\n                     },\n                     span: codemap::DUMMY_SP\n                 });"}, {"sha": "6665e913e192fbd0b0ca71bedec63499c9c22bcf", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -1490,6 +1490,7 @@ fn encode_attributes(ebml_w: &mut Encoder, attrs: &[Attribute]) {\n     ebml_w.start_tag(tag_attributes);\n     for attr in attrs.iter() {\n         ebml_w.start_tag(tag_attribute);\n+        ebml_w.wr_tagged_u8(tag_attribute_is_sugared_doc, attr.node.is_sugared_doc as u8);\n         encode_meta_item(ebml_w, attr.node.value);\n         ebml_w.end_tag();\n     }\n@@ -1644,6 +1645,29 @@ fn encode_unboxed_closures<'a>(\n     ebml_w.end_tag();\n }\n \n+fn encode_struct_field_attrs(ebml_w: &mut Encoder, krate: &Crate) {\n+    struct StructFieldVisitor<'a, 'b> {\n+        ebml_w: &'a mut Encoder<'b>,\n+    }\n+\n+    impl<'a, 'b> Visitor<()> for StructFieldVisitor<'a, 'b> {\n+        fn visit_struct_field(&mut self, field: &ast::StructField, _: ()) {\n+            self.ebml_w.start_tag(tag_struct_field);\n+            self.ebml_w.wr_tagged_u32(tag_struct_field_id, field.node.id);\n+            encode_attributes(self.ebml_w, field.node.attrs.as_slice());\n+            self.ebml_w.end_tag();\n+        }\n+    }\n+\n+    ebml_w.start_tag(tag_struct_fields);\n+    visit::walk_crate(&mut StructFieldVisitor {\n+        ebml_w: ebml_w\n+    }, krate, ());\n+    ebml_w.end_tag();\n+}\n+\n+\n+\n struct ImplVisitor<'a,'b,'c> {\n     ecx: &'a EncodeContext<'b>,\n     ebml_w: &'a mut Encoder<'c>,\n@@ -1928,6 +1952,8 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     stats.index_bytes = ebml_w.writer.tell().unwrap() - i;\n     ebml_w.end_tag();\n \n+    encode_struct_field_attrs(&mut ebml_w, krate);\n+\n     stats.total_bytes = ebml_w.writer.tell().unwrap();\n \n     if tcx.sess.meta_stats() {"}, {"sha": "0f5af4421a5e8fb89e98c3888979ea15445f6d0f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -4071,7 +4071,7 @@ pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> {\n \n         let len = results.as_slice().iter().map(|x| x.len()).sum();\n         let mut result: Vec<field_ty> = Vec::with_capacity(len);\n-        result.extend(results.as_slice().iter().flat_map(|rs| rs.iter().map(|&f| f)));\n+        result.extend(results.as_slice().iter().flat_map(|rs| rs.iter().map(|f| f.clone())));\n         assert!(result.len() == len);\n         result\n     } else {\n@@ -4085,7 +4085,7 @@ pub fn lookup_struct_field(cx: &ctxt,\n                         -> field_ty {\n     let r = lookup_struct_fields(cx, parent);\n     match r.iter().find(|f| f.id.node == field_id.node) {\n-        Some(t) => *t,\n+        Some(t) => t.clone(),\n         None => cx.sess.bug(\"struct ID not found in parent's fields\")\n     }\n }"}, {"sha": "531dced550a821e56607272d689cc7055f3918ce", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -322,7 +322,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n             }\n             Some(&(index, ref mut used)) => {\n                 *used = true;\n-                let class_field = *class_fields.get(index);\n+                let class_field = class_fields.get(index).clone();\n                 let field_type = ty::lookup_field_type(tcx,\n                                                        class_id,\n                                                        class_field.id,"}, {"sha": "3c942d0791e77fb6e5db6ff7cb36c21d1d584c4c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -209,7 +209,7 @@ fn build_struct(tcx: &ty::ctxt, did: ast::DefId) -> clean::Struct {\n             _ => doctree::Plain,\n         },\n         generics: (&t.generics, subst::TypeSpace).clean(),\n-        fields: fields.iter().map(|f| f.clean()).collect(),\n+        fields: fields.clean(),\n         fields_stripped: false,\n     }\n }"}, {"sha": "002f887834747bfe383d65cccb77315d4a802661", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "patch": "@@ -347,18 +347,18 @@ impl Clean<Item> for doctree::Module {\n             }\n         }\n         let items: Vec<Vec<Item> > = vec!(\n-            self.structs.clean().move_iter().collect(),\n-            self.enums.clean().move_iter().collect(),\n-            self.fns.clean().move_iter().collect(),\n+            self.structs.clean(),\n+            self.enums.clean(),\n+            self.fns.clean(),\n             foreigns,\n-            self.mods.clean().move_iter().collect(),\n-            self.typedefs.clean().move_iter().collect(),\n-            self.statics.clean().move_iter().collect(),\n-            self.traits.clean().move_iter().collect(),\n-            self.impls.clean().move_iter().collect(),\n+            self.mods.clean(),\n+            self.typedefs.clean(),\n+            self.statics.clean(),\n+            self.traits.clean(),\n+            self.impls.clean(),\n             self.view_items.clean().move_iter()\n                            .flat_map(|s| s.move_iter()).collect(),\n-            self.macros.clean().move_iter().collect()\n+            self.macros.clean(),\n         );\n \n         // determine if we should display the inner contents or\n@@ -406,7 +406,7 @@ impl Clean<Attribute> for ast::MetaItem {\n         match self.node {\n             ast::MetaWord(ref s) => Word(s.get().to_string()),\n             ast::MetaList(ref s, ref l) => {\n-                List(s.get().to_string(), l.clean().move_iter().collect())\n+                List(s.get().to_string(), l.clean())\n             }\n             ast::MetaNameValue(ref s, ref v) => {\n                 NameValue(s.get().to_string(), lit_to_string(v))\n@@ -460,7 +460,7 @@ impl Clean<TyParam> for ast::TyParam {\n         TyParam {\n             name: self.ident.clean(),\n             did: ast::DefId { krate: ast::LOCAL_CRATE, node: self.id },\n-            bounds: self.bounds.clean().move_iter().collect(),\n+            bounds: self.bounds.clean(),\n             default: self.default.clean()\n         }\n     }\n@@ -688,7 +688,7 @@ impl Clean<Item> for ast::Method {\n         };\n         Item {\n             name: Some(self.pe_ident().clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.pe_vis().clean(),\n@@ -727,7 +727,7 @@ impl Clean<Item> for ast::TypeMethod {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: None,\n@@ -805,7 +805,7 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n             onceness: self.onceness,\n             fn_style: self.fn_style,\n             bounds: match self.bounds {\n-                Some(ref x) => x.clean().move_iter().collect(),\n+                Some(ref x) => x.clean(),\n                 None        => Vec::new()\n             },\n         }\n@@ -1178,7 +1178,7 @@ impl Clean<Type> for ast::Ty {\n             TyTup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n             TyPath(ref p, ref tpbs, id) => {\n                 resolve_type(p.clean(),\n-                             tpbs.clean().map(|x| x.move_iter().collect()),\n+                             tpbs.clean().map(|x| x),\n                              id)\n             }\n             TyClosure(ref c, region) => Closure(box c.clean(), region.clean()),\n@@ -1307,7 +1307,7 @@ impl Clean<Item> for ast::StructField {\n         };\n         Item {\n             name: name.clean(),\n-            attrs: self.node.attrs.clean().move_iter().collect(),\n+            attrs: self.node.attrs.clean(),\n             source: self.span.clean(),\n             visibility: Some(vis),\n             stability: get_stability(ast_util::local_def(self.node.id)),\n@@ -1320,16 +1320,26 @@ impl Clean<Item> for ast::StructField {\n impl Clean<Item> for ty::field_ty {\n     fn clean(&self) -> Item {\n         use syntax::parse::token::special_idents::unnamed_field;\n+        use rustc::metadata::csearch;\n+\n+        let cx = get_cx();\n+        let attrs;\n+\n+        let attr_map = csearch::get_struct_field_attrs(&cx.tcx().sess.cstore, self.id);\n+\n         let name = if self.name == unnamed_field.name {\n+            attrs = None;\n             None\n         } else {\n+            attrs = Some(attr_map.find(&self.id.node).unwrap());\n             Some(self.name)\n         };\n-        let cx = get_cx();\n+\n         let ty = ty::lookup_item_type(cx.tcx(), self.id);\n+\n         Item {\n             name: name.clean(),\n-            attrs: inline::load_attrs(cx.tcx(), self.id),\n+            attrs: attrs.unwrap_or(&Vec::new()).clean(),\n             source: Span::empty(),\n             visibility: Some(self.vis),\n             stability: get_stability(self.id),\n@@ -1388,7 +1398,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     fn clean(&self) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n-            fields: self.fields.clean().move_iter().collect(),\n+            fields: self.fields.clean(),\n             fields_stripped: false,\n         }\n     }\n@@ -1556,7 +1566,7 @@ impl Clean<Path> for ast::Path {\n     fn clean(&self) -> Path {\n         Path {\n             global: self.global,\n-            segments: self.segments.clean().move_iter().collect(),\n+            segments: self.segments.clean(),\n         }\n     }\n }\n@@ -1572,8 +1582,8 @@ impl Clean<PathSegment> for ast::PathSegment {\n     fn clean(&self) -> PathSegment {\n         PathSegment {\n             name: self.identifier.clean(),\n-            lifetimes: self.lifetimes.clean().move_iter().collect(),\n-            types: self.types.clean().move_iter().collect()\n+            lifetimes: self.lifetimes.clean(),\n+            types: self.types.clean(),\n         }\n     }\n }\n@@ -1640,7 +1650,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n         BareFunctionDecl {\n             fn_style: self.fn_style,\n             generics: Generics {\n-                lifetimes: self.lifetimes.clean().move_iter().collect(),\n+                lifetimes: self.lifetimes.clean(),\n                 type_params: Vec::new(),\n             },\n             decl: self.decl.clean(),\n@@ -1745,7 +1755,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n         let convert = |node: &ast::ViewItem_| {\n             Item {\n                 name: None,\n-                attrs: self.attrs.clean().move_iter().collect(),\n+                attrs: self.attrs.clean(),\n                 source: self.span.clean(),\n                 def_id: ast_util::local_def(0),\n                 visibility: self.vis.clean(),\n@@ -1840,7 +1850,7 @@ impl Clean<ViewPath> for ast::ViewPath {\n                 GlobImport(resolve_use_source(p.clean(), id)),\n             ast::ViewPathList(ref p, ref pl, id) => {\n                 ImportList(resolve_use_source(p.clean(), id),\n-                           pl.clean().move_iter().collect())\n+                           pl.clean())\n             }\n         }\n     }\n@@ -1893,7 +1903,7 @@ impl Clean<Item> for ast::ForeignItem {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.vis.clean(),"}]}