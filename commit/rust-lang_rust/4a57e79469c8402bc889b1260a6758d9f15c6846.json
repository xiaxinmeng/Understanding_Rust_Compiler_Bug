{"sha": "4a57e79469c8402bc889b1260a6758d9f15c6846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTdlNzk0NjljODQwMmJjODg5YjEyNjBhNjc1OGQ5ZjE1YzY4NDY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-03T23:46:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-03T23:46:28Z"}, "message": "Merge pull request #2667 from tspiteri/width-heuristics\n\nDo not scale WidthHeuristics when max_width less than 100", "tree": {"sha": "aafcd1286824e7c403fb84faf4e39ca8b190a94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aafcd1286824e7c403fb84faf4e39ca8b190a94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a57e79469c8402bc889b1260a6758d9f15c6846", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa659UCRBK7hj4Ov3rIwAAdHIIABmyoVZqSok1F01jhQY1DMBZ\nxx3asDFX7zWcNB4bAUsr51r1WU9uwy4DOjg7JXH6yP6K/IXquufJ3lkMkHJ8RKuc\neLQie4/4Ae5wNfhpbpLO3ahJVyV4EzHLfv00UqAxiFISLqq0tLCxvRjEyIz0lR6Q\n1RbvTQWjWqyHXr7kmdsUG7HLMUDRwjEWallJdf/Og08Y6DHuIgxRa3XXnyBNSEE9\nYwuDIRCw9r59BHsPVUHF0SyDJzvuXKQ7UiaMIYVQNW8O7uuvRvGIuOTRLkRoCMZN\nzC7/yubBUvgEQXhG79lxxErzxura4cwoTcGEb/5vy0G5yYPMWFwON2vjuBgyXkc=\n=jpwt\n-----END PGP SIGNATURE-----\n", "payload": "tree aafcd1286824e7c403fb84faf4e39ca8b190a94f\nparent b6cd17f28ae314f2484ff05d3ce57652d51c5e85\nparent 48df8f8dc07e40eddc2ce5c3c6a9304d0bb9ac10\nauthor Nick Cameron <nrc@ncameron.org> 1525391188 +1200\ncommitter GitHub <noreply@github.com> 1525391188 +1200\n\nMerge pull request #2667 from tspiteri/width-heuristics\n\nDo not scale WidthHeuristics when max_width less than 100"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a57e79469c8402bc889b1260a6758d9f15c6846", "html_url": "https://github.com/rust-lang/rust/commit/4a57e79469c8402bc889b1260a6758d9f15c6846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a57e79469c8402bc889b1260a6758d9f15c6846/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6cd17f28ae314f2484ff05d3ce57652d51c5e85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cd17f28ae314f2484ff05d3ce57652d51c5e85", "html_url": "https://github.com/rust-lang/rust/commit/b6cd17f28ae314f2484ff05d3ce57652d51c5e85"}, {"sha": "48df8f8dc07e40eddc2ce5c3c6a9304d0bb9ac10", "url": "https://api.github.com/repos/rust-lang/rust/commits/48df8f8dc07e40eddc2ce5c3c6a9304d0bb9ac10", "html_url": "https://github.com/rust-lang/rust/commit/48df8f8dc07e40eddc2ce5c3c6a9304d0bb9ac10"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "06c05bb9355dd52549f86489f68dbcad6ddee6da", "filename": "src/config/config_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -130,7 +130,7 @@ macro_rules! create_config {\n             pub fn $i(&mut self, value: $ty) {\n                 (self.0).$i.2 = value;\n                 match stringify!($i) {\n-                    \"use_small_heuristics\" => self.0.set_heuristics(),\n+                    \"max_width\" | \"use_small_heuristics\" => self.0.set_heuristics(),\n                     \"license_template_path\" => self.0.set_license_template(),\n                     &_ => (),\n                 }\n@@ -292,7 +292,7 @@ macro_rules! create_config {\n                 }\n \n                 match key {\n-                    \"use_small_heuristics\" => self.set_heuristics(),\n+                    \"max_width\" | \"use_small_heuristics\" => self.set_heuristics(),\n                     \"license_template_path\" => self.set_license_template(),\n                     &_ => (),\n                 }"}, {"sha": "c350aac8d96099b3fbbe4f5ac40d1087d74641ef", "filename": "src/config/options.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -242,8 +242,14 @@ impl WidthHeuristics {\n \n     // scale the default WidthHeuristics according to max_width\n     pub fn scaled(max_width: usize) -> WidthHeuristics {\n-        let mut max_width_ratio: f32 = max_width as f32 / 100.0; // 100 is the default width -> default ratio is 1\n-        max_width_ratio = (max_width_ratio * 10.0).round() / 10.0; // round to the closest 0.1\n+        const DEFAULT_MAX_WIDTH: usize = 100;\n+        let max_width_ratio = if max_width > DEFAULT_MAX_WIDTH {\n+            let ratio = max_width as f32 / DEFAULT_MAX_WIDTH as f32;\n+            // round to the closest 0.1\n+            (ratio * 10.0).round() / 10.0\n+        } else {\n+            1.0\n+        };\n         WidthHeuristics {\n             fn_call_width: (60.0 * max_width_ratio).round() as usize,\n             struct_lit_width: (18.0 * max_width_ratio).round() as usize,"}, {"sha": "fa9d16f444dd3b08c094fc5a13ee3e42e6212139", "filename": "tests/source/issue-2644.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Fsource%2Fissue-2644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Fsource%2Fissue-2644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2644.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-max_width: 80\n+fn foo(e: Enum) {\n+    match e {\n+        Enum::Var {\n+            element1,\n+            element2,\n+        } => {\n+            return;\n+        }\n+    }\n+}"}, {"sha": "a591218b4ccc751663a93059fdc7ccc354c12596", "filename": "tests/source/width-heuristics.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Fsource%2Fwidth-heuristics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Fsource%2Fwidth-heuristics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwidth-heuristics.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -0,0 +1,28 @@\n+// rustfmt-max_width: 120\n+\n+// elems on multiple lines for max_width 100, but same line for max_width 120\n+fn foo(e: Enum) {\n+    match e {\n+        Enum::Var {\n+            elem1,\n+            elem2,\n+            elem3,\n+        } => {\n+            return;\n+        }\n+    }\n+}\n+\n+// elems not on same line for either max_width 100 or 120\n+fn bar(e: Enum) {\n+    match e {\n+        Enum::Var {\n+            elem1,\n+            elem2,\n+            elem3,\n+            elem4,\n+        } => {\n+            return;\n+        }\n+    }\n+}"}, {"sha": "a87e4c0b4feeffb19752d5aaf50fbaf53b3dbf76", "filename": "tests/target/issue-2644.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Ftarget%2Fissue-2644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Ftarget%2Fissue-2644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2644.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-max_width: 80\n+fn foo(e: Enum) {\n+    match e {\n+        Enum::Var { element1, element2 } => {\n+            return;\n+        }\n+    }\n+}"}, {"sha": "e177a2152e815dd98f409d9fcd7dfbe50e813052", "filename": "tests/target/width-heuristics.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Ftarget%2Fwidth-heuristics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a57e79469c8402bc889b1260a6758d9f15c6846/tests%2Ftarget%2Fwidth-heuristics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwidth-heuristics.rs?ref=4a57e79469c8402bc889b1260a6758d9f15c6846", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-max_width: 120\n+\n+// elems on multiple lines for max_width 100, but same line for max_width 120\n+fn foo(e: Enum) {\n+    match e {\n+        Enum::Var { elem1, elem2, elem3 } => {\n+            return;\n+        }\n+    }\n+}\n+\n+// elems not on same line for either max_width 100 or 120\n+fn bar(e: Enum) {\n+    match e {\n+        Enum::Var {\n+            elem1,\n+            elem2,\n+            elem3,\n+            elem4,\n+        } => {\n+            return;\n+        }\n+    }\n+}"}]}