{"sha": "e4aeeca667b6ce0446703f22f95552a64954df0d", "node_id": "C_kwDOAAsO6NoAKGU0YWVlY2E2NjdiNmNlMDQ0NjcwM2YyMmY5NTU1MmE2NDk1NGRmMGQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-22T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-23T07:26:22Z"}, "message": "Reset qualifs when a storage of a local ends\n\nto ensure that the local qualifs are affected by the state from previous\nloop iterations only if the local is kept alive.\n\nThe change should be forward compatible with a stricter handling of\nindirect assignments, since storage dead invalidates all existing\npointers to the local.", "tree": {"sha": "070dbc95a8176dd08ca603311e88dcdbfa08e003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070dbc95a8176dd08ca603311e88dcdbfa08e003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4aeeca667b6ce0446703f22f95552a64954df0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4aeeca667b6ce0446703f22f95552a64954df0d", "html_url": "https://github.com/rust-lang/rust/commit/e4aeeca667b6ce0446703f22f95552a64954df0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4aeeca667b6ce0446703f22f95552a64954df0d/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f7c4db0373aa077f86cdd1bf11122845d3b65a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f7c4db0373aa077f86cdd1bf11122845d3b65a", "html_url": "https://github.com/rust-lang/rust/commit/a3f7c4db0373aa077f86cdd1bf11122845d3b65a"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "e20b86dd4523cd2c946ae55bed60bdf287e67a3d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4aeeca667b6ce0446703f22f95552a64954df0d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aeeca667b6ce0446703f22f95552a64954df0d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=e4aeeca667b6ce0446703f22f95552a64954df0d", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{self, BasicBlock, Local, Location};\n+use rustc_middle::mir::{self, BasicBlock, Local, Location, Statement, StatementKind};\n \n use std::marker::PhantomData;\n \n@@ -120,6 +120,15 @@ where\n         self.super_assign(place, rvalue, location);\n     }\n \n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        match statement.kind {\n+            StatementKind::StorageDead(local) => {\n+                self.qualifs_per_local.remove(local);\n+            }\n+            _ => self.super_statement(statement, location),\n+        }\n+    }\n+\n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`."}, {"sha": "52ef685e8f4f838bed471d66172245a243d407cc", "filename": "src/test/ui/consts/promoted-storage.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4aeeca667b6ce0446703f22f95552a64954df0d/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aeeca667b6ce0446703f22f95552a64954df0d/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs?ref=e4aeeca667b6ce0446703f22f95552a64954df0d", "patch": "@@ -0,0 +1,20 @@\n+// Check that storage statements reset local qualification.\n+// check-pass\n+use std::cell::Cell;\n+\n+const C: Option<Cell<u32>> = {\n+    let mut c = None;\n+    let mut i = 0;\n+    while i == 0 {\n+        let mut x = None;\n+        c = x;\n+        x = Some(Cell::new(0));\n+        let _ = x;\n+        i += 1;\n+    }\n+    c\n+};\n+\n+fn main() {\n+    let _: &'static _ = &C;\n+}"}]}