{"sha": "66544b57f4d4392e893b8f54dd478d611f1dcc86", "node_id": "C_kwDOAAsO6NoAKDY2NTQ0YjU3ZjRkNDM5MmU4OTNiOGY1NGRkNDc4ZDYxMWYxZGNjODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-22T00:01:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-22T00:01:14Z"}, "message": "Rollup merge of #105985 - compiler-errors:method-chain-nitpicks, r=estebank\n\nMethod chain nitpicks\n\nJust fixing some little things I didn't see in review from that method chain PR.\n\nr? `@estebank`", "tree": {"sha": "cafcd948e8d7ffabeff75cc0ee3275142a68b3bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cafcd948e8d7ffabeff75cc0ee3275142a68b3bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66544b57f4d4392e893b8f54dd478d611f1dcc86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjo55KCRBK7hj4Ov3rIwAA/HQIACWJevoSjPODXkxbDKh6CQCx\nHvTzyTuGNFWw/wULfDu3nh57WNm+TW89pcXhRGTUM8q5P17h442btdxaiEjSVLLK\nofVtewdSozbWoNfZj/3S9EKWPDn8wUX3W+xIyrxSuSIR+E+V8nlSWhRcCrwocGJC\nL10eRabAQHsTutNmSa7MqKXl42LS2guhIWLcXgXj+bkgwfsfz10RRNWQ/baAJQT7\nrKp4PyUFbDS6PyHx8lqt9jtAXd+cm+FOWA/+CA8U99uqwdbFxi2ncX3adP2GCuVp\nwYK90PeZ/U/a2jzA3ry5B6FwITZarM6zxo/K5dSWR9DJteBT6N43Lt4eVt3iiQw=\n=tcqx\n-----END PGP SIGNATURE-----\n", "payload": "tree cafcd948e8d7ffabeff75cc0ee3275142a68b3bc\nparent ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63\nparent 85a9d85435ec60b840f54a03460412c261517d12\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671667274 +0100\ncommitter GitHub <noreply@github.com> 1671667274 +0100\n\nRollup merge of #105985 - compiler-errors:method-chain-nitpicks, r=estebank\n\nMethod chain nitpicks\n\nJust fixing some little things I didn't see in review from that method chain PR.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66544b57f4d4392e893b8f54dd478d611f1dcc86", "html_url": "https://github.com/rust-lang/rust/commit/66544b57f4d4392e893b8f54dd478d611f1dcc86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66544b57f4d4392e893b8f54dd478d611f1dcc86/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "html_url": "https://github.com/rust-lang/rust/commit/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63"}, {"sha": "85a9d85435ec60b840f54a03460412c261517d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a9d85435ec60b840f54a03460412c261517d12", "html_url": "https://github.com/rust-lang/rust/commit/85a9d85435ec60b840f54a03460412c261517d12"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "27c207528c73537c9c8a5a01e7fa595549dc12b4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/66544b57f4d4392e893b8f54dd478d611f1dcc86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66544b57f4d4392e893b8f54dd478d611f1dcc86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=66544b57f4d4392e893b8f54dd478d611f1dcc86", "patch": "@@ -14,21 +14,27 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"CollectAllMismatches\"\n     }\n+\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n+\n     fn intercrate(&self) -> bool {\n         false\n     }\n+\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n+\n     fn a_is_expected(&self) -> bool {\n         true\n-    } // irrelevant\n+    }\n+\n     fn mark_ambiguous(&mut self) {\n         bug!()\n     }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,\n@@ -38,22 +44,28 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n     ) -> RelateResult<'tcx, T> {\n         self.relate(a, b)\n     }\n+\n     fn regions(\n         &mut self,\n         a: ty::Region<'tcx>,\n         _b: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         Ok(a)\n     }\n+\n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        if a == b || matches!(a.kind(), ty::Infer(_)) || matches!(b.kind(), ty::Infer(_)) {\n-            return Ok(a);\n-        }\n-        relate::super_relate_tys(self, a, b).or_else(|e| {\n-            self.errors.push(e);\n-            Ok(a)\n+        self.infcx.probe(|_| {\n+            if a.is_ty_infer() || b.is_ty_infer() {\n+                Ok(a)\n+            } else {\n+                self.infcx.super_combine_tys(self, a, b).or_else(|e| {\n+                    self.errors.push(e);\n+                    Ok(a)\n+                })\n+            }\n         })\n     }\n+\n     fn consts(\n         &mut self,\n         a: ty::Const<'tcx>,\n@@ -64,6 +76,7 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         }\n         relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n     }\n+\n     fn binders<T: Relate<'tcx>>(\n         &mut self,\n         a: ty::Binder<'tcx, T>,"}, {"sha": "eb5e1d5ad5c1da2ca800d3334ebbdebe215c44a8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/66544b57f4d4392e893b8f54dd478d611f1dcc86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66544b57f4d4392e893b8f54dd478d611f1dcc86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=66544b57f4d4392e893b8f54dd478d611f1dcc86", "patch": "@@ -335,7 +335,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n-    fn function_argument_obligation(\n+    fn note_function_argument_obligation(\n         &self,\n         arg_hir_id: HirId,\n         err: &mut Diagnostic,\n@@ -2909,7 +2909,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ref parent_code,\n                 ..\n             } => {\n-                self.function_argument_obligation(\n+                self.note_function_argument_obligation(\n                     arg_hir_id,\n                     err,\n                     parent_code,\n@@ -3141,23 +3141,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             );\n         }\n     }\n-    fn function_argument_obligation(\n+    fn note_function_argument_obligation(\n         &self,\n         arg_hir_id: HirId,\n         err: &mut Diagnostic,\n         parent_code: &ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: ty::Predicate<'tcx>,\n+        failed_pred: ty::Predicate<'tcx>,\n         call_hir_id: HirId,\n     ) {\n         let tcx = self.tcx;\n         let hir = tcx.hir();\n-        if let Some(Node::Expr(expr)) = hir.find(arg_hir_id) {\n-            let parent_id = hir.get_parent_item(arg_hir_id);\n-            let typeck_results: &TypeckResults<'tcx> = match &self.typeck_results {\n-                Some(t) if t.hir_owner == parent_id => t,\n-                _ => self.tcx.typeck(parent_id.def_id),\n-            };\n+        if let Some(Node::Expr(expr)) = hir.find(arg_hir_id)\n+            && let Some(typeck_results) = &self.typeck_results\n+        {\n             if let hir::Expr { kind: hir::ExprKind::Block(..), .. } = expr {\n                 let expr = expr.peel_blocks();\n                 let ty = typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error());\n@@ -3182,37 +3179,29 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let mut type_diffs = vec![];\n \n             if let ObligationCauseCode::ExprBindingObligation(def_id, _, _, idx) = parent_code.deref()\n-                && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n-                && let Some(pred) = predicates.predicates.get(*idx)\n+                && let Some(node_substs) = typeck_results.node_substs_opt(call_hir_id)\n+                && let where_clauses = self.tcx.predicates_of(def_id).instantiate(self.tcx, node_substs)\n+                && let Some(where_pred) = where_clauses.predicates.get(*idx)\n             {\n-                if let Ok(trait_pred) = pred.kind().try_map_bound(|pred| match pred {\n-                    ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) => Ok(trait_pred),\n-                    _ => Err(()),\n-                })\n-                    && let Ok(trait_predicate) = predicate.kind().try_map_bound(|pred| match pred {\n-                        ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) => Ok(trait_pred),\n-                        _ => Err(()),\n-                    })\n+                if let Some(where_pred) = where_pred.to_opt_poly_trait_pred()\n+                    && let Some(failed_pred) = failed_pred.to_opt_poly_trait_pred()\n                 {\n                     let mut c = CollectAllMismatches {\n                         infcx: self.infcx,\n                         param_env,\n                         errors: vec![],\n                     };\n-                    if let Ok(_) = c.relate(trait_pred, trait_predicate) {\n+                    if let Ok(_) = c.relate(where_pred, failed_pred) {\n                         type_diffs = c.errors;\n                     }\n-                } else if let ty::PredicateKind::Clause(\n-                    ty::Clause::Projection(proj)\n-                ) = pred.kind().skip_binder()\n-                    && let ty::PredicateKind::Clause(\n-                        ty::Clause::Projection(projection)\n-                    ) = predicate.kind().skip_binder()\n+                } else if let Some(where_pred) = where_pred.to_opt_poly_projection_pred()\n+                    && let Some(failed_pred) = failed_pred.to_opt_poly_projection_pred()\n+                    && let Some(found) = failed_pred.skip_binder().term.ty()\n                 {\n                     type_diffs = vec![\n                         Sorts(ty::error::ExpectedFound {\n-                            expected: self.tcx.mk_ty(ty::Alias(ty::Projection, proj.projection_ty)),\n-                            found: projection.term.ty().unwrap(),\n+                            expected: self.tcx.mk_ty(ty::Alias(ty::Projection, where_pred.skip_binder().projection_ty)),\n+                            found,\n                         }),\n                     ];\n                 }\n@@ -3227,9 +3216,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // If the expression we're calling on is a binding, we want to point at the\n                 // `let` when talking about the type. Otherwise we'll point at every part\n                 // of the method chain with the type.\n-                self.point_at_chain(binding_expr, typeck_results, type_diffs, param_env, err);\n+                self.point_at_chain(binding_expr, &typeck_results, type_diffs, param_env, err);\n             } else {\n-                self.point_at_chain(expr, typeck_results, type_diffs, param_env, err);\n+                self.point_at_chain(expr, &typeck_results, type_diffs, param_env, err);\n             }\n         }\n         let call_node = hir.find(call_hir_id);"}, {"sha": "f3dceca7e4139365646a9b4d8f1ccefb9bedcb8f", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66544b57f4d4392e893b8f54dd478d611f1dcc86/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66544b57f4d4392e893b8f54dd478d611f1dcc86/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=66544b57f4d4392e893b8f54dd478d611f1dcc86", "patch": "@@ -52,14 +52,14 @@ LL |             .sum::<i32>(),\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:20:14\n+  --> $DIR/invalid-iterator-chain.rs:25:14\n    |\n LL |         vec![0, 1]\n    |         ---------- this expression has type `Vec<{integer}>`\n LL |             .iter()\n    |              ------ `Iterator::Item` is `&{integer}` here\n LL |             .map(|x| x * 2)\n-   |              ^^^^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n+   |              -------------- `Iterator::Item` changed to `{integer}` here\n LL |             .map(|x| x as f64)\n    |              ----------------- `Iterator::Item` changed to `f64` here\n LL |             .map(|x| x as i64)\n@@ -84,14 +84,14 @@ LL |             .sum::<i32>(),\n              <i32 as Sum<&'a i32>>\n              <i32 as Sum>\n note: the method call chain might not have had the expected associated types\n-  --> $DIR/invalid-iterator-chain.rs:32:14\n+  --> $DIR/invalid-iterator-chain.rs:33:14\n    |\n LL |         vec![0, 1]\n    |         ---------- this expression has type `Vec<{integer}>`\n LL |             .iter()\n    |              ------ `Iterator::Item` is `&{integer}` here\n LL |             .map(|x| x * 2)\n-   |              ^^^^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n+   |              -------------- `Iterator::Item` changed to `{integer}` here\n LL |             .map(|x| x as f64)\n    |              ^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `f64` here\n LL |             .filter(|x| *x > 0.0)"}]}