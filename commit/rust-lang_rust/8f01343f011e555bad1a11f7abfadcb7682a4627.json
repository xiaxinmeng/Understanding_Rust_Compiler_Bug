{"sha": "8f01343f011e555bad1a11f7abfadcb7682a4627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDEzNDNmMDExZTU1NWJhZDFhMTFmN2FiZmFkY2I3NjgyYTQ2Mjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T22:07:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T22:07:14Z"}, "message": "rustc: Remove resolve_path", "tree": {"sha": "5ffbdf2a084db2f053c66605c65ede84526d5821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffbdf2a084db2f053c66605c65ede84526d5821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f01343f011e555bad1a11f7abfadcb7682a4627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f01343f011e555bad1a11f7abfadcb7682a4627", "html_url": "https://github.com/rust-lang/rust/commit/8f01343f011e555bad1a11f7abfadcb7682a4627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f01343f011e555bad1a11f7abfadcb7682a4627/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d3e3c7553fd384dbedc5426cde5fb533222e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d3e3c7553fd384dbedc5426cde5fb533222e21", "html_url": "https://github.com/rust-lang/rust/commit/75d3e3c7553fd384dbedc5426cde5fb533222e21"}], "stats": {"total": 56, "additions": 0, "deletions": 56}, "files": [{"sha": "0dd3aaa82a5274457348d3ad4ade8d261a42cd59", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f01343f011e555bad1a11f7abfadcb7682a4627/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f01343f011e555bad1a11f7abfadcb7682a4627/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=8f01343f011e555bad1a11f7abfadcb7682a4627", "patch": "@@ -50,30 +50,6 @@ fn lookup_method_purity(cstore: cstore::cstore, did: ast::def_id)\n     }\n }\n \n-/* Returns a vector of possible def IDs for a given path,\n-   in a given crate */\n-fn resolve_path(cstore: cstore::cstore, cnum: ast::crate_num,\n-                path: ~[ast::ident]) ->\n-    ~[(ast::crate_num, @~[u8], ast::def_id)] {\n-    let cm = cstore::get_crate_data(cstore, cnum);\n-    debug!{\"resolve_path %s in crates[%d]:%s\",\n-           ast_util::path_name_i(path), cnum, cm.name};\n-    let mut result = ~[];\n-    for decoder::resolve_path(path, cm.data).each |def| {\n-        if def.crate == ast::local_crate {\n-            vec::push(result, (cnum, cm.data, def));\n-        } else {\n-            if cm.cnum_map.contains_key(def.crate) {\n-                // This reexport is itself a reexport from another crate\n-                let next_cnum = cm.cnum_map.get(def.crate);\n-                let next_cm_data = cstore::get_crate_data(cstore, next_cnum);\n-                vec::push(result, (next_cnum, next_cm_data.data, def));\n-            }\n-        }\n-    }\n-    return result;\n-}\n-\n /// Iterates over all the paths in the given crate.\n fn each_path(cstore: cstore::cstore, cnum: ast::crate_num,\n              f: fn(decoder::path_entry) -> bool) {"}, {"sha": "f1b6862afc7db508cc1a85debabe341fcad2ce5d", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f01343f011e555bad1a11f7abfadcb7682a4627/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f01343f011e555bad1a11f7abfadcb7682a4627/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=8f01343f011e555bad1a11f7abfadcb7682a4627", "patch": "@@ -213,38 +213,6 @@ fn enum_variant_ids(item: ebml::doc, cdata: cmd) -> ~[ast::def_id] {\n     return ids;\n }\n \n-// Given a path and serialized crate metadata, returns the IDs of the\n-// definitions the path may refer to.\n-fn resolve_path(path: ~[ast::ident], data: @~[u8]) -> ~[ast::def_id] {\n-    fn eq_item(data: &[u8], s: ~str) -> bool {\n-        // XXX: Use string equality.\n-        let data_len = data.len();\n-        let s_len = s.len();\n-        if data_len != s_len {\n-            return false;\n-        }\n-        let mut i = 0;\n-        while i < data_len {\n-            if data[i] != s[i] {\n-                return false;\n-            }\n-            i += 1;\n-        }\n-        return true;\n-    }\n-    let s = ast_util::path_name_i(path);\n-    let md = ebml::doc(data);\n-    let paths = ebml::get_doc(md, tag_paths);\n-    let eqer = |a| eq_item(a, s);\n-    let mut result: ~[ast::def_id] = ~[];\n-    debug!{\"resolve_path: looking up %s\", s};\n-    for lookup_hash(paths, eqer, hash_path(s)).each |doc| {\n-        let did_doc = ebml::get_doc(doc, tag_def_id);\n-        vec::push(result, ebml::with_doc_data(did_doc, |d| parse_def_id(d)));\n-    }\n-    return result;\n-}\n-\n fn item_path(item_doc: ebml::doc) -> ast_map::path {\n     let path_doc = ebml::get_doc(item_doc, tag_path);\n "}]}