{"sha": "3ffb16f6c604a925b29efd011154c8d18802f0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmIxNmY2YzYwNGE5MjViMjllZmQwMTExNTRjOGQxODgwMmYwZmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-15T17:15:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-15T17:15:12Z"}, "message": "Rollup merge of #54963 - ljedrz:cleanup_rustc_session, r=varkor\n\nCleanup rustc/session\n\n- improve allocations\n- improve common patterns\n- use `to_owned` when no string conversion is needed\n- move `const`s up to improve readability\n- whitespace & formatting improvements", "tree": {"sha": "25186acb921246fb73bb92f43634e52be7c590a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25186acb921246fb73bb92f43634e52be7c590a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffb16f6c604a925b29efd011154c8d18802f0ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxMsgCRBK7hj4Ov3rIwAAdHIIAIru+E70iEt/TA6tClF8AL6a\nyArF1PgUz9mAx/3m5HiOxhd4TTt46olPWB/OPmmwGsHgi4HMJIIhTS9eGap7iDm/\nnCLPyqwkgrlMbheG2vm+PSWJkEwpgrufA2OEBZIhvzmFwWe6gTvrrTDzh7KK7MBy\nNtq9tm0D/FL4emy56VX0glSIDxBgmlrtbVhgJCHOguLKKmsuEcPejjCzQq4k/bK4\n8q/ZkRQrhm37PrqJQyDQxKc9o9yiIeGXbcn4uVgGbWV1Z4XrsINu9baCcDF/2+BF\nwoTFb0fS6WLs6CK4zxLFX9OMsqoZZUn7rTtfstFfGnKgWuoj/UrxIC9iG1hYJvs=\n=q6c2\n-----END PGP SIGNATURE-----\n", "payload": "tree 25186acb921246fb73bb92f43634e52be7c590a8\nparent 7ba24e8fcf472984c22d78b432aed411bf9ad510\nparent 42ae9dc508728bc5c3b88a947ddfbef36e6356c4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1539623712 -0700\ncommitter GitHub <noreply@github.com> 1539623712 -0700\n\nRollup merge of #54963 - ljedrz:cleanup_rustc_session, r=varkor\n\nCleanup rustc/session\n\n- improve allocations\n- improve common patterns\n- use `to_owned` when no string conversion is needed\n- move `const`s up to improve readability\n- whitespace & formatting improvements\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffb16f6c604a925b29efd011154c8d18802f0ff", "html_url": "https://github.com/rust-lang/rust/commit/3ffb16f6c604a925b29efd011154c8d18802f0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffb16f6c604a925b29efd011154c8d18802f0ff/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba24e8fcf472984c22d78b432aed411bf9ad510", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba24e8fcf472984c22d78b432aed411bf9ad510", "html_url": "https://github.com/rust-lang/rust/commit/7ba24e8fcf472984c22d78b432aed411bf9ad510"}, {"sha": "42ae9dc508728bc5c3b88a947ddfbef36e6356c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ae9dc508728bc5c3b88a947ddfbef36e6356c4", "html_url": "https://github.com/rust-lang/rust/commit/42ae9dc508728bc5c3b88a947ddfbef36e6356c4"}], "stats": {"total": 292, "additions": 132, "deletions": 160}, "files": [{"sha": "569e7a24d2353ce8652d5112b6f3738b109c5023", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 99, "deletions": 115, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3ffb16f6c604a925b29efd011154c8d18802f0ff", "patch": "@@ -490,10 +490,10 @@ pub enum Input {\n }\n \n impl Input {\n-    pub fn filestem(&self) -> String {\n+    pub fn filestem(&self) -> &str {\n         match *self {\n-            Input::File(ref ifile) => ifile.file_stem().unwrap().to_str().unwrap().to_string(),\n-            Input::Str { .. } => \"rust_out\".to_string(),\n+            Input::File(ref ifile) => ifile.file_stem().unwrap().to_str().unwrap(),\n+            Input::Str { .. } => \"rust_out\",\n         }\n     }\n \n@@ -736,19 +736,19 @@ macro_rules! options {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n                             early_error(error_format, &format!(\"{} option `{}` takes no \\\n-                                                              value\", $outputname, key))\n+                                                                value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n                             early_error(error_format, &format!(\"{0} option `{1}` requires \\\n-                                                              {2} ({3} {1}=<value>)\",\n-                                                             $outputname, key,\n-                                                             type_desc, $prefix))\n+                                                                {2} ({3} {1}=<value>)\",\n+                                                               $outputname, key,\n+                                                               type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n                             early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n-                                                              option `{}` - {} was expected\",\n-                                                             value, $outputname,\n-                                                             key, type_desc))\n+                                                                option `{}` - {} was expected\",\n+                                                               value, $outputname,\n+                                                               key, type_desc))\n                         }\n                         (None, None) => bug!()\n                     }\n@@ -758,14 +758,13 @@ macro_rules! options {\n             }\n             if !found {\n                 early_error(error_format, &format!(\"unknown {} option: `{}`\",\n-                                                 $outputname, key));\n+                                                   $outputname, key));\n             }\n         }\n         return op;\n     }\n \n     impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n-\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n@@ -782,7 +781,7 @@ macro_rules! options {\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n     pub const $stat: &'static [(&'static str, $setter_name,\n-                                     Option<&'static str>, &'static str)] =\n+                                Option<&'static str>, &'static str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n@@ -1062,8 +1061,8 @@ macro_rules! options {\n ) }\n \n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n-         build_codegen_options, \"C\", \"codegen\",\n-         CG_OPTIONS, cg_type_desc, cgsetters,\n+          build_codegen_options, \"C\", \"codegen\",\n+          CG_OPTIONS, cg_type_desc, cgsetters,\n     ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n@@ -1107,13 +1106,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n+        \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the code model to use (rustc --print code-models for details)\"),\n+        \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-         \"metadata to mangle symbol names with\"),\n+        \"metadata to mangle symbol names with\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n-         \"extra data to put in each output filename\"),\n+        \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n@@ -1134,14 +1133,14 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation\"),\n+        \"enable incremental compilation\"),\n     default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-          \"allow the linker to link its default libraries\"),\n+        \"allow the linker to link its default libraries\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n-         build_debugging_options, \"Z\", \"debugging\",\n-         DB_OPTIONS, db_type_desc, dbsetters,\n+          build_debugging_options, \"Z\", \"debugging\",\n+          DB_OPTIONS, db_type_desc, dbsetters,\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n@@ -1211,26 +1210,26 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     flowgraph_print_all: bool = (false, parse_bool, [UNTRACKED],\n         \"include all dataflow analysis data in -Z unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n-         \"prints region inference graph. \\\n-          Use with RUST_REGION_GRAPH=help for more info\"),\n+        \"prints region inference graph. \\\n+         Use with RUST_REGION_GRAPH=help for more info\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse only; do not compile, assemble, or link\"),\n+        \"parse only; do not compile, assemble, or link\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n-          \"run all passes except codegen; no output\"),\n+        \"run all passes except codegen; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n-          \"treat all errors that occur as bugs\"),\n+        \"treat all errors that occur as bugs\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-          \"immediately print bugs registered with `delay_span_bug`\"),\n+        \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-          \"show macro backtraces even for non-local macros\"),\n+        \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n-          \"show extended diagnostic help\"),\n+        \"show extended diagnostic help\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n-          \"attempt to recover from parse errors (experimental)\"),\n+        \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation (experimental)\"),\n+        \"enable incremental compilation (experimental)\"),\n     incremental_queries: bool = (true, parse_bool, [UNTRACKED],\n-          \"enable incremental compilation support for queries (experimental)\"),\n+        \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof)\"),\n     incremental_dump_hash: bool = (false, parse_bool, [UNTRACKED],\n@@ -1240,64 +1239,64 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n         \"ignore spans during ICH computation -- used for testing\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n+        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"enable queries of the dependency graph for regression testing\"),\n+        \"enable queries of the dependency graph for regression testing\"),\n     profile_queries: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries of the incremental compilation framework\"),\n+        \"trace and profile the queries of the incremental compilation framework\"),\n     profile_queries_and_keys: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries and keys of the incremental compilation framework\"),\n+        \"trace and profile the queries and keys of the incremental compilation framework\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse and expand the source, but run no analysis\"),\n+        \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-          \"adds unstable command line options to rustc interface\"),\n+        \"adds unstable command line options to rustc interface\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"force overflow checks on or off\"),\n+        \"force overflow checks on or off\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-          \"for every macro invocation, print its name and arguments\"),\n+        \"for every macro invocation, print its name and arguments\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n-          \"emit line numbers debug info inside macros\"),\n+        \"emit line numbers debug info inside macros\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't clear the hygiene data after analysis\"),\n+        \"don't clear the hygiene data after analysis\"),\n     keep_ast: bool = (false, parse_bool, [UNTRACKED],\n-          \"keep the AST after lowering it to HIR\"),\n+        \"keep the AST after lowering it to HIR\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n-          \"show spans for compiler debugging (expr|pat|ty)\"),\n+        \"show spans for compiler debugging (expr|pat|ty)\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"print layout information for each type encountered\"),\n+        \"print layout information for each type encountered\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"print the result of the monomorphization collection pass\"),\n+        \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-          \"set the MIR optimization level (0-3, default: 1)\"),\n+        \"set the MIR optimization level (0-3, default: 1)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n+        \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n     arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n-          \"emit align metadata for reference arguments\"),\n+        \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"dump MIR state at various points in transforms\"),\n+        \"dump MIR state at various points in transforms\"),\n     dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n-          \"the directory the MIR is dumped into\"),\n+        \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-          \"in addition to `.mir` files, create graphviz `.dot` files\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n-          \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n+        \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n     mir_emit_validate: usize = (0, parse_uint, [TRACKED],\n-          \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n-           contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n+        \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n+         contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some performance-related statistics\"),\n+        \"print some performance-related statistics\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about AST and HIR\"),\n+        \"print some statistics about AST and HIR\"),\n     mir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about MIR\"),\n+        \"print some statistics about MIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-          \"encode MIR of all functions into the crate metadata\"),\n+        \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-          \"pass `-install_name @rpath/...` to the macOS linker\"),\n+        \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-                                   \"Use a sanitizer\"),\n+                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n@@ -1313,13 +1312,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n     pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default \\\n-         location if it's empty.\"),\n+        \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n     pgo_use: String = (String::new(), parse_string, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n-    disable_instrumentation_preinliner: bool =\n-        (false, parse_bool, [TRACKED], \"Disable the instrumentation pre-inliner, \\\n-        useful for profiling / PGO.\"),\n+    disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n+        \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n@@ -1341,7 +1338,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n     tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n+        \"choose the TLS model to use (rustc --print tls-models for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n@@ -1362,31 +1359,31 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"run `dsymutil` and delete intermediate object files\"),\n+        \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n-          \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+        \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-          \"embed LLVM bitcode in object files\"),\n+        \"embed LLVM bitcode in object files\"),\n     strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"make the current crate share its generic instantiations\"),\n+        \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n-          \"enable the experimental Chalk-based trait solving engine\"),\n+        \"enable the experimental Chalk-based trait solving engine\"),\n     cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n-          \"generate build artifacts that are compatible with linker-based LTO.\"),\n+        \"generate build artifacts that are compatible with linker-based LTO.\"),\n     no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n+        \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n         \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: bool = (false, parse_bool, [UNTRACKED],\n-          \"run the self profiler\"),\n+        \"run the self profiler\"),\n     profile_json: bool = (false, parse_bool, [UNTRACKED],\n-          \"output a json file with profiler results\"),\n+        \"output a json file with profiler results\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"emits a section containing stack size metadata\"),\n+        \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"whether to use the PLT when calling into shared libraries;\n           only has effect for PIC code on systems with ELF binaries\n@@ -1409,6 +1406,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let atomic_cas = sess.target.target.options.atomic_cas;\n \n     let mut ret = FxHashSet::default();\n+    ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((Symbol::intern(\"target_os\"), Some(Symbol::intern(os))));\n     if let Some(ref fam) = sess.target.target.options.target_family {\n@@ -1455,7 +1453,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n-    return ret;\n+    ret\n }\n \n pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> ast::CrateConfig {\n@@ -1471,15 +1469,12 @@ pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> as\n }\n \n pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n-    let target = match Target::search(&opts.target_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n-                .help(\"Use `--print target-list` for a list of built-in targets\")\n-                .emit();\n-            FatalError.raise();\n-        }\n-    };\n+    let target = Target::search(&opts.target_triple).unwrap_or_else(|e| {\n+        sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n+          .help(\"Use `--print target-list` for a list of built-in targets\")\n+          .emit();\n+        FatalError.raise();\n+    });\n \n     let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n         \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n@@ -1502,7 +1497,6 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum OptionStability {\n     Stable,\n-\n     Unstable,\n }\n \n@@ -1845,18 +1839,17 @@ pub fn build_session_options_and_crate_config(\n     };\n \n     let edition = match matches.opt_str(\"edition\") {\n-        Some(arg) => match Edition::from_str(&arg){\n-            Ok(edition) => edition,\n-            Err(_) => early_error(\n+        Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n+            early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"argument for --edition must be one of: \\\n-                    {}. (instead was `{}`)\",\n+                     {}. (instead was `{}`)\",\n                     EDITION_NAME_LIST,\n                     arg\n                 ),\n             ),\n-        }\n+        ),\n         None => DEFAULT_EDITION,\n     };\n \n@@ -1865,7 +1858,7 @@ pub fn build_session_options_and_crate_config(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"Edition {} is unstable and only \\\n-                    available for nightly builds of rustc.\",\n+                     available for nightly builds of rustc.\",\n                     edition,\n                 )\n         )\n@@ -1925,17 +1918,16 @@ pub fn build_session_options_and_crate_config(\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n                 let shorthand = parts.next().unwrap();\n-                let output_type = match OutputType::from_shorthand(shorthand) {\n-                    Some(output_type) => output_type,\n-                    None => early_error(\n+                let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(||\n+                    early_error(\n                         error_format,\n                         &format!(\n                             \"unknown emission type: `{}` - expected one of: {}\",\n                             shorthand,\n                             OutputType::shorthands_display(),\n                         ),\n                     ),\n-                };\n+                );\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);\n             }\n@@ -2063,12 +2055,8 @@ pub fn build_session_options_and_crate_config(\n     let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n         if target.ends_with(\".json\") {\n             let path = Path::new(&target);\n-            match TargetTriple::from_path(&path) {\n-                Ok(triple) => triple,\n-                Err(_) => {\n-                    early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n-                }\n-            }\n+            TargetTriple::from_path(&path).unwrap_or_else(|_|\n+                early_error(error_format, &format!(\"target file {:?} does not exist\", path)))\n         } else {\n             TargetTriple::TargetTriple(target)\n         }\n@@ -2169,7 +2157,7 @@ pub fn build_session_options_and_crate_config(\n             let mut name_parts = name.splitn(2, ':');\n             let name = name_parts.next().unwrap();\n             let new_name = name_parts.next();\n-            (name.to_string(), new_name.map(|n| n.to_string()), kind)\n+            (name.to_owned(), new_name.map(|n| n.to_owned()), kind)\n         })\n         .collect();\n \n@@ -2223,10 +2211,8 @@ pub fn build_session_options_and_crate_config(\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n-        let name = match parts.next() {\n-            Some(s) => s,\n-            None => early_error(error_format, \"--extern value must not be empty\"),\n-        };\n+        let name = parts.next().unwrap_or_else(||\n+            early_error(error_format, \"--extern value must not be empty\"));\n         let location = parts.next().map(|s| s.to_string());\n         if location.is_none() && !is_unstable_enabled {\n             early_error(\n@@ -2237,7 +2223,7 @@ pub fn build_session_options_and_crate_config(\n         };\n \n         externs\n-            .entry(name.to_string())\n+            .entry(name.to_owned())\n             .or_default()\n             .insert(location);\n     }\n@@ -2308,9 +2294,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\" => CrateType::Cdylib,\n                 \"bin\" => CrateType::Executable,\n                 \"proc-macro\" => CrateType::ProcMacro,\n-                _ => {\n-                    return Err(format!(\"unknown crate type: `{}`\", part));\n-                }\n+                _ => return Err(format!(\"unknown crate type: `{}`\", part))\n             };\n             if !crate_types.contains(&new_part) {\n                 crate_types.push(new_part)"}, {"sha": "f410c270bcef91aa681dae20159534c7550108ed", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=3ffb16f6c604a925b29efd011154c8d18802f0ff", "patch": "@@ -41,7 +41,7 @@ impl<'a> FileSearch<'a> {\n         F: FnMut(&Path, PathKind)\n     {\n         let mut visited_dirs = FxHashSet::default();\n-\n+        visited_dirs.reserve(self.search_paths.paths.len() + 1);\n         for (path, kind) in self.search_paths.iter(self.kind) {\n             f(path, kind);\n             visited_dirs.insert(path.to_path_buf());\n@@ -160,7 +160,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n     match env::current_exe() {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n-                Some(mut p) => { p.pop(); p.pop(); return p; },\n+                Some(mut p) => { p.pop(); p.pop(); p },\n                 None => bug!(\"can't determine value for sysroot\")\n             }\n         }\n@@ -175,25 +175,25 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     // to lib64/lib32. This would be more foolproof by basing the sysroot off\n     // of the directory where librustc is located, rather than where the rustc\n     // binary is.\n-    //If --libdir is set during configuration to the value other than\n+    // If --libdir is set during configuration to the value other than\n     // \"lib\" (i.e. non-default), this value is used (see issue #16552).\n \n-    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n-        Some(libdir) if libdir != \"lib\" => return libdir.into(),\n-        _ => if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n-            return PRIMARY_LIB_DIR.into();\n-        } else {\n-            return SECONDARY_LIB_DIR.into();\n-        }\n-    }\n-\n     #[cfg(target_pointer_width = \"64\")]\n     const PRIMARY_LIB_DIR: &'static str = \"lib64\";\n \n     #[cfg(target_pointer_width = \"32\")]\n     const PRIMARY_LIB_DIR: &'static str = \"lib32\";\n \n     const SECONDARY_LIB_DIR: &'static str = \"lib\";\n+\n+    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n+        Some(libdir) if libdir != \"lib\" => libdir.into(),\n+        _ => if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n+            PRIMARY_LIB_DIR.into()\n+        } else {\n+            SECONDARY_LIB_DIR.into()\n+        }\n+    }\n }\n \n // The name of rustc's own place to organize libraries."}, {"sha": "e983ddc3108d7e62a862c4d8edded6c9afd77b7a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3ffb16f6c604a925b29efd011154c8d18802f0ff", "patch": "@@ -703,8 +703,8 @@ impl Session {\n         match self.opts.maybe_sysroot {\n             Some(ref sysroot) => sysroot,\n             None => self.default_sysroot\n-                .as_ref()\n-                .expect(\"missing sysroot and default_sysroot in Session\"),\n+                        .as_ref()\n+                        .expect(\"missing sysroot and default_sysroot in Session\"),\n         }\n     }\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n@@ -727,14 +727,8 @@ impl Session {\n     pub fn set_incr_session_load_dep_graph(&self, load: bool) {\n         let mut incr_comp_session = self.incr_comp_session.borrow_mut();\n \n-        match *incr_comp_session {\n-            IncrCompSession::Active {\n-                ref mut load_dep_graph,\n-                ..\n-            } => {\n-                *load_dep_graph = load;\n-            }\n-            _ => {}\n+        if let IncrCompSession::Active { ref mut load_dep_graph, .. } = *incr_comp_session {\n+            *load_dep_graph = load;\n         }\n     }\n \n@@ -872,9 +866,9 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        match self.optimization_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.optimization_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 let fuel = self.optimization_fuel_limit.get();\n                 ret = fuel != 0;\n                 if fuel == 0 && !self.out_of_fuel.get() {\n@@ -884,14 +878,12 @@ impl Session {\n                     self.optimization_fuel_limit.set(fuel - 1);\n                 }\n             }\n-            _ => {}\n         }\n-        match self.print_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.print_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 self.print_fuel.set(self.print_fuel.get() + 1);\n             }\n-            _ => {}\n         }\n         ret\n     }\n@@ -1108,14 +1100,11 @@ pub fn build_session_(\n     source_map: Lrc<source_map::SourceMap>,\n ) -> Session {\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n-    let host = match Target::search(&host_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            span_diagnostic\n-                .fatal(&format!(\"Error loading host specification: {}\", e))\n-                .raise();\n-        }\n-    };\n+    let host = Target::search(&host_triple).unwrap_or_else(|e|\n+        span_diagnostic\n+            .fatal(&format!(\"Error loading host specification: {}\", e))\n+            .raise()\n+    );\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n     let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n@@ -1135,12 +1124,11 @@ pub fn build_session_(\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = LockCell::new(0);\n \n-    let working_dir = match env::current_dir() {\n-        Ok(dir) => dir,\n-        Err(e) => p_s.span_diagnostic\n+    let working_dir = env::current_dir().unwrap_or_else(|e|\n+        p_s.span_diagnostic\n             .fatal(&format!(\"Current directory is invalid: {}\", e))\n-            .raise(),\n-    };\n+            .raise()\n+    );\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n \n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {"}, {"sha": "768d4f1e5fb6573f24c5a7bbf3a63a19b1eb19fd", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=3ffb16f6c604a925b29efd011154c8d18802f0ff", "patch": "@@ -14,7 +14,7 @@ use session::{early_error, config};\n \n #[derive(Clone, Debug)]\n pub struct SearchPaths {\n-    paths: Vec<(PathKind, PathBuf)>,\n+    crate paths: Vec<(PathKind, PathBuf)>,\n }\n \n pub struct Iter<'a> {"}, {"sha": "223df7cbb1874cb48fe2feaf0d3d19ac15aa80b1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb16f6c604a925b29efd011154c8d18802f0ff/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3ffb16f6c604a925b29efd011154c8d18802f0ff", "patch": "@@ -1657,7 +1657,7 @@ pub fn build_output_filenames(\n                 .crate_name\n                 .clone()\n                 .or_else(|| attr::find_crate_name(attrs).map(|n| n.to_string()))\n-                .unwrap_or_else(|| input.filestem());\n+                .unwrap_or_else(|| input.filestem().to_owned());\n \n             OutputFilenames {\n                 out_directory: dirpath,"}]}