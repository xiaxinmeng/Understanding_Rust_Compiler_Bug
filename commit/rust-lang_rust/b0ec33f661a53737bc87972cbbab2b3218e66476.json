{"sha": "b0ec33f661a53737bc87972cbbab2b3218e66476", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZWMzM2Y2NjFhNTM3MzdiYzg3OTcyY2JiYWIyYjMyMThlNjY0NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-02T17:07:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-02T17:07:33Z"}, "message": "Auto merge of #4166 - mati865:rustup, r=Manishearth\n\nRustup for https://github.com/rust-lang/rust/pull/61276\n\nchangelog: none", "tree": {"sha": "6a4346f7f0094f38c09f9520d1daf0ce739aa1a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a4346f7f0094f38c09f9520d1daf0ce739aa1a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ec33f661a53737bc87972cbbab2b3218e66476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec33f661a53737bc87972cbbab2b3218e66476", "html_url": "https://github.com/rust-lang/rust/commit/b0ec33f661a53737bc87972cbbab2b3218e66476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec33f661a53737bc87972cbbab2b3218e66476/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d680491139f53c444c952d17e426c6e7d7844f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d680491139f53c444c952d17e426c6e7d7844f", "html_url": "https://github.com/rust-lang/rust/commit/f5d680491139f53c444c952d17e426c6e7d7844f"}, {"sha": "a3ace5c3cac7dc4cdeb193945783866af1b8158c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ace5c3cac7dc4cdeb193945783866af1b8158c", "html_url": "https://github.com/rust-lang/rust/commit/a3ace5c3cac7dc4cdeb193945783866af1b8158c"}], "stats": {"total": 89, "additions": 57, "deletions": 32}, "files": [{"sha": "41312101417ae3f68056149277685da0aad3c92b", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=b0ec33f661a53737bc87972cbbab2b3218e66476", "patch": "@@ -79,7 +79,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n \n         let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n         let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n-        ExprUseVisitor::new(&mut v, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).consume_body(body);\n+        ExprUseVisitor::new(\n+            &mut v,\n+            cx.tcx,\n+            fn_def_id,\n+            cx.param_env,\n+            region_scope_tree,\n+            cx.tables,\n+            None,\n+        )\n+        .consume_body(body);\n \n         for node in v.set {\n             span_lint("}, {"sha": "dcd89b7b85149fe254f876f8567ff7eafa727f66", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b0ec33f661a53737bc87972cbbab2b3218e66476", "patch": "@@ -1662,7 +1662,16 @@ fn check_for_mutation(\n     };\n     let def_id = def_id::DefId::local(body.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n-    ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(body);\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        cx.tcx,\n+        def_id,\n+        cx.param_env,\n+        region_scope_tree,\n+        cx.tables,\n+        None,\n+    )\n+    .walk_expr(body);\n     delegate.mutation_span()\n }\n \n@@ -1769,7 +1778,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     }\n                     let res = self.cx.tables.qpath_res(seqpath, seqexpr.hir_id);\n                     match res {\n-                        Res::Local(hir_id) | Res::Upvar(hir_id, ..) => {\n+                        Res::Local(hir_id) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                             let parent_def_id = self.cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n@@ -1829,24 +1838,13 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n             then {\n-                match self.cx.tables.qpath_res(qpath, expr.hir_id) {\n-                    Res::Upvar(local_id, ..) => {\n-                        if local_id == self.var {\n-                            // we are not indexing anything, record that\n-                            self.nonindex = true;\n-                        }\n-                    }\n-                    Res::Local(local_id) =>\n-                    {\n-\n-                        if local_id == self.var {\n-                            self.nonindex = true;\n-                        } else {\n-                            // not the correct variable, but still a variable\n-                            self.referenced.insert(path.segments[0].ident.name);\n-                        }\n+                if let Res::Local(local_id) = self.cx.tables.qpath_res(qpath, expr.hir_id) {\n+                    if local_id == self.var {\n+                        self.nonindex = true;\n+                    } else {\n+                        // not the correct variable, but still a variable\n+                        self.referenced.insert(path.segments[0].ident.name);\n                     }\n-                    _ => {}\n                 }\n             }\n         }\n@@ -2378,7 +2376,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             let res = self.cx.tables.qpath_res(qpath, ex.hir_id);\n             then {\n                 match res {\n-                    Res::Local(node_id) | Res::Upvar(node_id, ..) => {\n+                    Res::Local(node_id) => {\n                         self.ids.insert(node_id);\n                     },\n                     Res::Def(DefKind::Static, def_id) => {"}, {"sha": "74368446d991298e23906b4177afff5cb8f6060b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=b0ec33f661a53737bc87972cbbab2b3218e66476", "patch": "@@ -600,9 +600,10 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n \n /// Tests whether `res` is a variable defined outside a macro.\n fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n-    match res {\n-        def::Res::Local(id) | def::Res::Upvar(id, ..) => !in_macro_or_desugar(cx.tcx.hir().span_by_hir_id(id)),\n-        _ => false,\n+    if let def::Res::Local(id) = res {\n+        !in_macro_or_desugar(cx.tcx.hir().span_by_hir_id(id))\n+    } else {\n+        false\n     }\n }\n "}, {"sha": "424de64b5c7457aa1e96f44d731b1b6ef5a3727d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=b0ec33f661a53737bc87972cbbab2b3218e66476", "patch": "@@ -137,8 +137,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n             let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n-            euv::ExprUseVisitor::new(&mut ctx, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None)\n-                .consume_body(body);\n+            euv::ExprUseVisitor::new(\n+                &mut ctx,\n+                cx.tcx,\n+                fn_def_id,\n+                cx.param_env,\n+                region_scope_tree,\n+                cx.tables,\n+                None,\n+            )\n+            .consume_body(body);\n             ctx\n         };\n "}, {"sha": "014dc9d4d8014a301093984148c85004c5bc1a40", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec33f661a53737bc87972cbbab2b3218e66476/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=b0ec33f661a53737bc87972cbbab2b3218e66476", "patch": "@@ -16,7 +16,16 @@ pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a,\n     };\n     let def_id = def_id::DefId::local(expr.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n-    ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(expr);\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        cx.tcx,\n+        def_id,\n+        cx.param_env,\n+        region_scope_tree,\n+        cx.tables,\n+        None,\n+    )\n+    .walk_expr(expr);\n \n     if delegate.skip {\n         return None;\n@@ -29,11 +38,11 @@ pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n     expr: &'tcx Expr,\n     cx: &'a LateContext<'a, 'tcx>,\n ) -> bool {\n-    let id = match variable.res {\n-        Res::Local(id) | Res::Upvar(id, ..) => id,\n-        _ => return true,\n-    };\n-    mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n+    if let Res::Local(id) = variable.res {\n+        mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n+    } else {\n+        return true;\n+    }\n }\n \n struct MutVarsDelegate {"}]}