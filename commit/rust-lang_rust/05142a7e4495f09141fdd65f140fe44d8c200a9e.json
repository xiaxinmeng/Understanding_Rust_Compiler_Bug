{"sha": "05142a7e4495f09141fdd65f140fe44d8c200a9e", "node_id": "C_kwDOAAsO6NoAKDA1MTQyYTdlNDQ5NWYwOTE0MWZkZDY1ZjE0MGZlNDRkOGMyMDBhOWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-30T07:45:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-30T07:45:42Z"}, "message": "Auto merge of #95466 - Dylan-DPC:rollup-g7ddr8y, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95294 (Document Linux kernel handoff in std::io::copy and std::fs::copy)\n - #95443 (Clarify how `src/tools/x` searches for python)\n - #95452 (fix since field version for termination stabilization)\n - #95460 (Spellchecking compiler code)\n - #95461 (Spellchecking some comments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee648c1ad529193c0420d15f5361dd6d88ad8a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee648c1ad529193c0420d15f5361dd6d88ad8a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05142a7e4495f09141fdd65f140fe44d8c200a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05142a7e4495f09141fdd65f140fe44d8c200a9e", "html_url": "https://github.com/rust-lang/rust/commit/05142a7e4495f09141fdd65f140fe44d8c200a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05142a7e4495f09141fdd65f140fe44d8c200a9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e", "html_url": "https://github.com/rust-lang/rust/commit/f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e"}, {"sha": "03b3993ae87ea47cfbff30534b0567a8b4574134", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b3993ae87ea47cfbff30534b0567a8b4574134", "html_url": "https://github.com/rust-lang/rust/commit/03b3993ae87ea47cfbff30534b0567a8b4574134"}], "stats": {"total": 194, "additions": 107, "deletions": 87}, "files": [{"sha": "3db8adb2a244424a52cbf667128b7a722f92150a", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -461,7 +461,7 @@ impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n                 (combined / 10) as u32 as Limb\n             });\n \n-            // Reduce the sigificand to avoid wasting time dividing 0's.\n+            // Reduce the significand to avoid wasting time dividing 0's.\n             while sig.last() == Some(&0) {\n                 sig.pop();\n             }"}, {"sha": "d684a0e67e20b4d7ab6896208c04f653ded74c15", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -634,7 +634,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // This can happen when trying to lower the return type `x` in erroneous code like\n         //   async fn foo(x: u8) -> x {}\n         // In that case, `x` is lowered as a function parameter, and the return type is lowered as\n-        // an opaque type as a synthetized HIR owner.\n+        // an opaque type as a synthesized HIR owner.\n         res.unwrap_or(Res::Err)\n     }\n "}, {"sha": "a7c600fff785e7c78c0dd0f995bd488f18081d9a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -622,9 +622,9 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// Reject C-varadic type unless the function is foreign,\n+    /// Reject C-variadic type unless the function is foreign,\n     /// or free and `unsafe extern \"C\"` semantically.\n-    fn check_c_varadic_type(&self, fk: FnKind<'a>) {\n+    fn check_c_variadic_type(&self, fk: FnKind<'a>) {\n         match (fk.ctxt(), fk.header()) {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n@@ -1504,7 +1504,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         };\n         self.check_fn_decl(fk.decl(), self_semantic);\n \n-        self.check_c_varadic_type(fk);\n+        self.check_c_variadic_type(fk);\n \n         // Functions cannot both be `const async`\n         if let Some(FnHeader {"}, {"sha": "684eba82667fa4897471fbe3ce0f86098a9cb347", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -407,10 +407,10 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     fn terminator_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n-        teminator: &mir::Terminator<'tcx>,\n+        terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n-        if let mir::TerminatorKind::InlineAsm { operands, .. } = &teminator.kind {\n+        if let mir::TerminatorKind::InlineAsm { operands, .. } = &terminator.kind {\n             for op in operands {\n                 if let mir::InlineAsmOperand::Out { place: Some(place), .. }\n                 | mir::InlineAsmOperand::InOut { out_place: Some(place), .. } = *op"}, {"sha": "c1c325adb7fd1e94bfd1f3bedbf46a080d583797", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -55,7 +55,7 @@ impl OutlivesSuggestionBuilder {\n             | RegionNameSource::NamedFreeRegion(..)\n             | RegionNameSource::Static => true,\n \n-            // Don't give suggestions for upvars, closure return types, or other unnamable\n+            // Don't give suggestions for upvars, closure return types, or other unnameable\n             // regions.\n             RegionNameSource::SynthesizedFreeEnvRegion(..)\n             | RegionNameSource::AnonRegionFromArgument(..)"}, {"sha": "e63450a1f58aa02b3172bcd02025a019a7d49cc7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // FIXME. We should handle this case better. It\n                         // indicates that we have e.g., some region variable\n                         // whose value is like `'a+'b` where `'a` and `'b` are\n-                        // distinct unrelated univesal regions that are not\n+                        // distinct unrelated universal regions that are not\n                         // known to outlive one another. It'd be nice to have\n                         // some examples where this arises to decide how best\n                         // to report it; we could probably handle it by"}, {"sha": "1a789009f061196a4f06a590e4e741d9eb9d0dbb", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -365,7 +365,7 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n                     // borrow); so don't check if they interfere.\n                     //\n                     // NOTE: *reservations* do conflict with themselves;\n-                    // thus aren't injecting unsoundenss w/ this check.)\n+                    // thus aren't injecting unsoundness w/ this check.)\n                     (Activation(_, activating), _) if activating == borrow_index => {\n                         // Activating a borrow doesn't generate any invalidations, since we\n                         // have already taken the reservation"}, {"sha": "a8fd5bb50a60f81c19426656a144023fa5a58c1b", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1048,7 +1048,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // borrow); so don't check if they interfere.\n                 //\n                 // NOTE: *reservations* do conflict with themselves;\n-                // thus aren't injecting unsoundenss w/ this check.)\n+                // thus aren't injecting unsoundness w/ this check.)\n                 (Activation(_, activating), _) if activating == borrow_index => {\n                     debug!(\n                         \"check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \\\n@@ -1107,7 +1107,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                     // rust-lang/rust#56254 - This was previously permitted on\n                     // the 2018 edition so we emit it as a warning. We buffer\n-                    // these sepately so that we only emit a warning if borrow\n+                    // these separately so that we only emit a warning if borrow\n                     // checking was otherwise successful.\n                     this.reservation_warnings\n                         .insert(bi, (place_span.0, place_span.1, location, bk, borrow.clone()));\n@@ -1588,7 +1588,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n \n-        // Check if any of the initializiations of `local` have happened yet:\n+        // Check if any of the initializations of `local` have happened yet:\n         if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {\n             // And, if so, report an error.\n             let init = &self.move_data.inits[init_index];"}, {"sha": "dabf61715ce58fb78bb4239dd40ab501932c061e", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -789,7 +789,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let universe_a = self.scc_universes[scc_a];\n \n         // Quick check: if scc_b's declared universe is a subset of\n-        // scc_a's declared univese (typically, both are ROOT), then\n+        // scc_a's declared universe (typically, both are ROOT), then\n         // it cannot contain any problematic universe elements.\n         if universe_a.can_name(self.scc_universes[scc_b]) {\n             return true;\n@@ -1993,7 +1993,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .iter()\n             .find_map(|constraint| {\n                 if let ConstraintCategory::Predicate(predicate_span) = constraint.category {\n-                    // We currentl'y doesn't store the `DefId` in the `ConstraintCategory`\n+                    // We currently do not store the `DefId` in the `ConstraintCategory`\n                     // for performances reasons. The error reporting code used by NLL only\n                     // uses the span, so this doesn't cause any problems at the moment.\n                     Some(ObligationCauseCode::BindingObligation("}, {"sha": "7dc292ffb6579dfc9dcaaa11b75735ab90062f12", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -2507,7 +2507,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // we have to solve them here where we instantiate the\n             // closure.\n             //\n-            // Despite the opacity of the previous parapgrah, this is\n+            // Despite the opacity of the previous paragraph, this is\n             // actually relatively easy to understand in terms of the\n             // desugaring. A closure gets desugared to a struct, and\n             // these extra requirements are basically like where"}, {"sha": "7637bf7edc825cbd571d29d5b2056155eef2a6cc", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -137,7 +137,7 @@ impl CfgEval<'_, '_> {\n         }\n \n         // The majority of parsed attribute targets will never need to have early cfg-expansion\n-        // run (e.g. they are not part of a `#[derive]` or `#[cfg_eval]` macro inoput).\n+        // run (e.g. they are not part of a `#[derive]` or `#[cfg_eval]` macro input).\n         // Therefore, we normally do not capture the necessary information about `#[cfg]`\n         // and `#[cfg_attr]` attributes during parsing.\n         //"}, {"sha": "c952fc0a866f815754dbfb9e3fd7537e58b33ae3", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -28,7 +28,7 @@ pub fn expand_deriving_clone(\n     // - the item is a union with Copy fields\n     //      Unions with generic parameters still can derive Clone because they require Copy\n     //      for deriving, Clone alone is not enough.\n-    //      Whever Clone is implemented for fields is irrelevant so we don't assert it.\n+    //      Wherever Clone is implemented for fields is irrelevant so we don't assert it.\n     let bounds;\n     let substructure;\n     let is_shallow;"}, {"sha": "ea0e768a58f489d984eedbff74cbb57ab4d4e4a1", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -70,7 +70,7 @@ fn expand<'cx>(\n }\n \n pub fn use_panic_2021(mut span: Span) -> bool {\n-    // To determine the editon, we check the first span up the expansion\n+    // To determine the edition, we check the first span up the expansion\n     // stack that does not have #[allow_internal_unstable(edition_panic)].\n     // (To avoid using the edition of e.g. the assert!() or debug_assert!() definition.)\n     loop {"}, {"sha": "d270fec6b71152b88a93b1876b3ad4aff27999d0", "filename": "compiler/rustc_codegen_cranelift/example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -36,7 +36,7 @@ impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n \n trait Trait {\n     // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n-    // without unsized_locals), but wrappers arond `Self` currently are not.\n+    // without unsized_locals), but wrappers around `Self` currently are not.\n     // FIXME (mikeyhew) uncomment this when unsized rvalues object-safety is implemented\n     // fn wrapper(self: Wrapper<Self>) -> i32;\n     fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;"}, {"sha": "bc4c06ed7d2988e6d28810d11ead10c7c8d05022", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -11,7 +11,7 @@ case $1 in\n         sed -i \"s/\\\"nightly-.*\\\"/\\\"nightly-${TOOLCHAIN}\\\"/\" rust-toolchain\n         rustup component add rustfmt || true\n \n-        echo \"=> Uninstalling all old nighlies\"\n+        echo \"=> Uninstalling all old nightlies\"\n         for nightly in $(rustup toolchain list | grep nightly | grep -v \"$TOOLCHAIN\" | grep -v nightly-x86_64); do\n             rustup toolchain uninstall \"$nightly\"\n         done"}, {"sha": "fe23a26769663f3a2f61b1ccdf8a3d65ab975d70", "filename": "compiler/rustc_codegen_gcc/Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2FReadme.md?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -12,7 +12,7 @@ A secondary goal is to check if using the gcc backend will provide any run-time\n ## Building\n \n **This requires a patched libgccjit in order to work.\n-The patches in [this repostory](https://github.com/antoyo/libgccjit-patches) need to be applied.\n+The patches in [this repository](https://github.com/antoyo/libgccjit-patches) need to be applied.\n (Those patches should work when applied on master, but in case it doesn't work, they are known to work when applied on 079c23cfe079f203d5df83fea8e92a60c7d7e878.)\n You can also use my [fork of gcc](https://github.com/antoyo/gcc) which already includes these patches.**\n "}, {"sha": "3af0ba09e0bace078927a61793a067ab20f0674c", "filename": "compiler/rustc_codegen_gcc/example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -37,7 +37,7 @@ impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n \n trait Trait {\n     // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n-    // without unsized_locals), but wrappers arond `Self` currently are not.\n+    // without unsized_locals), but wrappers around `Self` currently are not.\n     // FIXME (mikeyhew) uncomment this when unsized rvalues object-safety is implemented\n     // fn wrapper(self: Wrapper<Self>) -> i32;\n     fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;"}, {"sha": "11d39a122f559fbf7575f4dcd5fc1ca16ecf130d", "filename": "compiler/rustc_codegen_gcc/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Frustup.sh?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -10,7 +10,7 @@ case $1 in\n         rustup toolchain install --profile minimal nightly-${TOOLCHAIN} # Sanity check to see if the nightly exists\n         echo nightly-${TOOLCHAIN} > rust-toolchain\n \n-        echo \"=> Uninstalling all old nighlies\"\n+        echo \"=> Uninstalling all old nightlies\"\n         for nightly in $(rustup toolchain list | grep nightly | grep -v $TOOLCHAIN | grep -v nightly-x86_64); do\n             rustup toolchain uninstall $nightly\n         done"}, {"sha": "21c7d420b204d93f3d32a912d108318a53bd0002", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn exactsdiv(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n-        // TODO(antoyo): posion if not exact.\n+        // TODO(antoyo): poison if not exact.\n         // FIXME(antoyo): rustc_codegen_ssa::mir::intrinsic uses different types for a and b but they\n         // should be the same.\n         let typ = a.get_type().to_signed(self);\n@@ -1252,7 +1252,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n-        // FIMXE(bjorn3): implement\n+        // FIXME(bjorn3): implement\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "edbe7122bddbbc9e46699a028c0174398486bf0e", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -110,7 +110,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     /// NOTE: a hack is used because the rustc API is not suitable to libgccjit and as such,\n     /// `const_undef()` returns struct as pointer so that they can later be assigned a value.\n     /// As such, this set remembers which of these pointers were returned by this function so that\n-    /// they can be deferenced later.\n+    /// they can be dereferenced later.\n     /// FIXME(antoyo): fix the rustc API to avoid having this hack.\n     pub structs_as_pointer: RefCell<FxHashSet<RValue<'gcc>>>,\n }"}, {"sha": "68a05d95ef7346bb69d208bf6ac03b712292fc19", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn assume(&mut self, value: Self::Value) {\n-        // TODO(antoyo): switch to asumme when it exists.\n+        // TODO(antoyo): switch to assume when it exists.\n         // Or use something like this:\n         // #define __assume(cond) do { if (!(cond)) __builtin_unreachable(); } while (0)\n         self.expect(value, true);"}, {"sha": "2b76bfdb5ec8581fab39cd2409bbe37abb282205", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -360,7 +360,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         //   feasible. The compiler may be able to get around this, but it may\n         //   involve some invasive changes to deal with this.\n         //\n-        // The flipside of this situation is that whenever you link to a dll and\n+        // The flip side of this situation is that whenever you link to a dll and\n         // you import a function from it, the import should be tagged with\n         // `dllimport`. At this time, however, the compiler does not emit\n         // `dllimport` for any declarations other than constants (where it is"}, {"sha": "31bb9ed318589441885a41f3d265bccb06e8895b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -356,7 +356,7 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n     generator_type_di_node: &'ll DIType,\n ) -> SmallVec<&'ll DIType> {\n     let Variants::Multiple { tag_encoding: TagEncoding::Direct, tag_field, .. } = generator_type_and_layout.variants else {\n-        bug!(\"This function only supports layouts with direcly encoded tags.\")\n+        bug!(\"This function only supports layouts with directly encoded tags.\")\n     };\n \n     let (generator_def_id, generator_substs) = match generator_type_and_layout.ty.kind() {"}, {"sha": "10df671baa27a552b180beac92623a239d9daf65", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1113,7 +1113,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n                     && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n-                // Zero-extend iN to the array lengh:\n+                // Zero-extend iN to the array length:\n                 let ze = bx.zext(i_, bx.type_ix(expected_bytes * 8));\n \n                 // Convert the integer to a byte array"}, {"sha": "dbbbbd5ecc020fb040d613b90d819e42fd11551b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -709,7 +709,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         let out = String::from_utf8_lossy(&out);\n \n         // Check to see if the link failed with an error message that indicates it\n-        // doesn't recognize the -no-pie option. If so, reperform the link step\n+        // doesn't recognize the -no-pie option. If so, re-perform the link step\n         // without it. This is safe because if the linker doesn't support -no-pie\n         // then it should not default to linking executables as pie. Different\n         // versions of gcc seem to use different quotes in the error message so\n@@ -1049,7 +1049,7 @@ fn escape_string(s: &[u8]) -> String {\n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     // On macOS the runtimes are distributed as dylibs which should be linked to\n     // both executables and dynamic shared objects. Everywhere else the runtimes\n-    // are currently distributed as static liraries which should be linked to\n+    // are currently distributed as static libraries which should be linked to\n     // executables only.\n     let needs_runtime = match crate_type {\n         CrateType::Executable => true,\n@@ -1850,7 +1850,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // Upstream rust libraries and their nobundle static libraries\n     add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n \n-    // Upstream dymamic native libraries linked with `#[link]` attributes at and `-l`\n+    // Upstream dynamic native libraries linked with `#[link]` attributes at and `-l`\n     // command line options.\n     // If -Zlink-native-libraries=false is set, then the assumption is that an\n     // external build system already has the native dependencies defined, and it"}, {"sha": "765bd877db1697dfde390b89604cd455e83b4a29", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -91,7 +91,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                     if !generics.requires_monomorphization(tcx)\n                         // Functions marked with #[inline] are codegened with \"internal\"\n                         // linkage and are not exported unless marked with an extern\n-                        // inidicator\n+                        // indicator\n                         && (!Instance::mono(tcx, def_id.to_def_id()).def.generates_cgu_internal_copy(tcx)\n                             || tcx.codegen_fn_attrs(def_id.to_def_id()).contains_extern_indicator())\n                     {"}, {"sha": "f1acb9e41c4ce45dd37e68dec3c3e1f962e8d347", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -73,7 +73,7 @@ struct IsStaticOrFn;\n \n /// Intern an allocation without looking at its children.\n /// `mode` is the mode of the environment where we found this pointer.\n-/// `mutablity` is the mutability of the place to be interned; even if that says\n+/// `mutability` is the mutability of the place to be interned; even if that says\n /// `immutable` things might become mutable if `ty` is not frozen.\n /// `ty` can be `None` if there is no potential interior mutability\n /// to account for (e.g. for vtables)."}, {"sha": "4a235809119f6bc1dec717ce66c81f7dad9c70bd", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1011,7 +1011,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let src_parts = self.get_ptr_access(src, size, src_align)?;\n         let dest_parts = self.get_ptr_access(dest, size * num_copies, dest_align)?; // `Size` multiplication\n \n-        // FIXME: we look up both allocations twice here, once ebfore for the `check_ptr_access`\n+        // FIXME: we look up both allocations twice here, once before for the `check_ptr_access`\n         // and once below to get the underlying `&[mut] Allocation`.\n \n         // Source alloc preparations and access hooks."}, {"sha": "5b8d74b43078e0dec7bc7432db9e880bc152a9de", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -876,7 +876,7 @@ where\n         if src.layout.size != dest.layout.size {\n             // FIXME: This should be an assert instead of an error, but if we transmute within an\n             // array length computation, `typeck` may not have yet been run and errored out. In fact\n-            // most likey we *are* running `typeck` right now. Investigate whether we can bail out\n+            // most likely we *are* running `typeck` right now. Investigate whether we can bail out\n             // on `typeck_results().has_errors` at all const eval entry points.\n             debug!(\"Size mismatch when transmuting!\\nsrc: {:#?}\\ndest: {:#?}\", src, dest);\n             self.tcx.sess.delay_span_bug("}, {"sha": "4272bfd5d6c6f58c19fc96b7ea3ce4c2875c2b36", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -39,7 +39,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ///\n     /// This is used by [priroda](https://github.com/oli-obk/priroda)\n     ///\n-    /// This is marked `#inline(always)` to work around adverserial codegen when `opt-level = 3`\n+    /// This is marked `#inline(always)` to work around adversarial codegen when `opt-level = 3`\n     #[inline(always)]\n     pub fn step(&mut self) -> InterpResult<'tcx, bool> {\n         if self.stack().is_empty() {"}, {"sha": "d33358499e237ede76a234bb0ea7b826558bd805", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -329,7 +329,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 // Compute callee information using the `instance` returned by\n                 // `find_mir_or_eval_fn`.\n-                // FIXME: for variadic support, do we have to somehow determine calle's extra_args?\n+                // FIXME: for variadic support, do we have to somehow determine callee's extra_args?\n                 let callee_fn_abi = self.fn_abi_of_instance(instance, ty::List::empty())?;\n \n                 if callee_fn_abi.c_variadic != caller_fn_abi.c_variadic {"}, {"sha": "e203c79030d20a5fd98d7e5fcc8e80d127d6d7e4", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -953,7 +953,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 if callee_is_unstable_unmarked {\n                     trace!(\"callee_is_unstable_unmarked\");\n                     // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are\n-                    // `extern` funtions, and these have no way to get marked `const`. So instead we\n+                    // `extern` functions, and these have no way to get marked `const`. So instead we\n                     // use `rustc_const_(un)stable` attributes to mean that the intrinsic is `const`\n                     if self.ccx.is_const_stable_const_fn() || is_intrinsic {\n                         self.check_op(ops::FnCallUnstable(callee, None));"}, {"sha": "9fd94dc334ff23766bab6147427b071ed3d72206", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -56,7 +56,7 @@ pub trait Qualif {\n     /// Returns `true` if *any* value of the given type could possibly have this `Qualif`.\n     ///\n     /// This function determines `Qualif`s when we cannot do a value-based analysis. Since qualif\n-    /// propagation is context-insenstive, this includes function arguments and values returned\n+    /// propagation is context-insensitive, this includes function arguments and values returned\n     /// from a call to another function.\n     ///\n     /// It also determines the `Qualif`s for primitive types."}, {"sha": "60b45856f51fbd24920e3634a27651b8f8f4f9aa", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -45,7 +45,7 @@ pub enum CallKind<'tcx> {\n     },\n     /// A call to `Fn(..)::call(..)`, desugared from `my_closure(a, b, c)`\n     FnCall { fn_trait_id: DefId, self_ty: Ty<'tcx> },\n-    /// A call to an operator trait, desuraged from operator syntax (e.g. `a << b`)\n+    /// A call to an operator trait, desugared from operator syntax (e.g. `a << b`)\n     Operator { self_arg: Option<Ident>, trait_id: DefId, self_ty: Ty<'tcx> },\n     DerefCoercion {\n         /// The `Span` of the `Target` associated type"}, {"sha": "e8d81d4b937ab51d4f9e862d88a0657a3bd0436b", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -623,7 +623,7 @@ pub enum NodeIdHashingMode {\n /// result, it needs to include `HashingControls` as part\n /// of the key, to ensure that is does not produce an incorrect\n /// result (for example, using a `Fingerprint` produced while\n-/// hashing `Span`s when a `Fingeprint` without `Span`s is\n+/// hashing `Span`s when a `Fingerprint` without `Span`s is\n /// being requested)\n #[derive(Clone, Hash, Eq, PartialEq, Debug)]\n pub struct HashingControls {"}, {"sha": "e1f4c7ee07315cd15836497238d581bce322b05a", "filename": "compiler/rustc_data_structures/src/transitive_relation/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation%2Ftests.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -96,7 +96,7 @@ fn mubs_best_choice2() {\n     //\n     // mubs(0,3) = [2]\n \n-    // Like the precedecing test, but in this case intersection is [2,\n+    // Like the preceding test, but in this case intersection is [2,\n     // 1], and hence we rely on the first pare down call.\n \n     let mut relation = TransitiveRelation::default();"}, {"sha": "9abdb5fc97c63ee1e1ae9179055fb89c603e63a1", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -26,7 +26,7 @@ impl StyledBuffer {\n         StyledBuffer { lines: vec![] }\n     }\n \n-    /// Returns content of `StyledBuffer` splitted by lines and line styles\n+    /// Returns content of `StyledBuffer` split by lines and line styles\n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n         debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));"}, {"sha": "fa628cd9ebd0b8ab62355727c1dc2bc9b097e131", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -414,7 +414,7 @@ impl<'a> StripUnconfigured<'a> {\n             };\n             trees.push((AttrAnnotatedTokenTree::Token(bang_token), Spacing::Alone));\n         }\n-        // We don't really have a good span to use for the syntheized `[]`\n+        // We don't really have a good span to use for the synthesized `[]`\n         // in `#[attr]`, so just use the span of the `#` token.\n         let bracket_group = AttrAnnotatedTokenTree::Delimited(\n             DelimSpan::from_single(pound_span),"}, {"sha": "c3f7f4f27e54c6c8b72975b0e055b633f56fc48e", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1847,7 +1847,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         if node.is_expr() {\n             // The only way that we can end up with a `MacCall` expression statement,\n             // (as opposed to a `StmtKind::MacCall`) is if we have a macro as the\n-            // traiing expression in a block (e.g. `fn foo() { my_macro!() }`).\n+            // trailing expression in a block (e.g. `fn foo() { my_macro!() }`).\n             // Record this information, so that we can report a more specific\n             // `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint if needed.\n             // See #78991 for an investigation of treating macros in this position"}, {"sha": "791ba560607a40cb528b3f2cea25bfb08f94cf9f", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -36,7 +36,7 @@ crate mod mbe;\n // HACK(Centril, #64197): These shouldn't really be here.\n // Rather, they should be with their respective modules which are defined in other crates.\n // However, since for now constructing a `ParseSess` sorta requires `config` from this crate,\n-// these tests will need to live here in the iterim.\n+// these tests will need to live here in the interim.\n \n #[cfg(test)]\n mod tests;"}, {"sha": "c89015b4c6bb36b6519176c9c6ce63d4b0c34034", "filename": "compiler/rustc_expand/src/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -41,7 +41,7 @@ impl Delimited {\n     }\n \n     /// Returns a `self::TokenTree` with a `Span` corresponding to the closing delimiter. Panics if\n-    /// the delimeter is `NoDelim`.\n+    /// the delimiter is `NoDelim`.\n     fn close_tt(&self) -> &TokenTree {\n         let tt = self.all_tts.last().unwrap();\n         debug_assert!(matches!("}, {"sha": "1ff9395c5892b719b3c4604a73402a9de848779e", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -56,7 +56,7 @@ impl DefPathTable {\n             //\n             // See the documentation for DefPathHash for more information.\n             panic!(\n-                \"found DefPathHash collsion between {:?} and {:?}. \\\n+                \"found DefPathHash collision between {:?} and {:?}. \\\n                     Compilation cannot continue.\",\n                 def_path1, def_path2\n             );"}, {"sha": "19fc77fb74b988907516b8b1ce3d931f8ce725c7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1118,7 +1118,7 @@ pub type BinOp = Spanned<BinOpKind>;\n \n #[derive(Copy, Clone, PartialEq, Encodable, Debug, HashStable_Generic)]\n pub enum UnOp {\n-    /// The `*` operator (deferencing).\n+    /// The `*` operator (dereferencing).\n     Deref,\n     /// The `!` operator (logical negation).\n     Not,\n@@ -1611,7 +1611,7 @@ impl Expr<'_> {\n             | ExprKind::Index(base, _)\n             | ExprKind::AddrOf(.., base)\n             | ExprKind::Cast(base, _) => {\n-                // This isn't exactly true for `Index` and all `Unnary`, but we are using this\n+                // This isn't exactly true for `Index` and all `Unary`, but we are using this\n                 // method exclusively for diagnostics and there's a *cultural* pressure against\n                 // them being used only for its side-effects.\n                 base.can_have_side_effects()"}, {"sha": "20ffde90064bfa3330bc5cd52f49114d1ec38d0b", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -146,7 +146,7 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut FileEncoder) -> FileEncodeR\n \n /// Builds the dependency graph.\n ///\n-/// This function breates the *staging dep-graph*. When the dep-graph is modified by a query\n+/// This function creates the *staging dep-graph*. When the dep-graph is modified by a query\n /// execution, the new dependency information is not kept in memory but directly\n /// output to this file. `save_dep_graph` then finalizes the staging dep-graph\n /// and moves it to the permanent dep-graph path"}, {"sha": "fed6a608e576c4a4660351e3d9d9c3c7db9f3d7d", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -164,14 +164,14 @@ impl<Tag> Allocation<Tag> {\n         let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {\n             // This results in an error that can happen non-deterministically, since the memory\n             // available to the compiler can change between runs. Normally queries are always\n-            // deterministic. However, we can be non-determinstic here because all uses of const\n+            // deterministic. However, we can be non-deterministic here because all uses of const\n             // evaluation (including ConstProp!) will make compilation fail (via hard error\n             // or ICE) upon encountering a `MemoryExhausted` error.\n             if panic_on_fail {\n                 panic!(\"Allocation::uninit called with panic_on_fail had allocation failure\")\n             }\n             ty::tls::with(|tcx| {\n-                tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpreation\")\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpretation\")\n             });\n             InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n         })?;"}, {"sha": "3b3120cf04b7f64715385bef22ca7e3057b08899", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -192,7 +192,7 @@ fn find_capture_matching_projections<'a, 'tcx>(\n         is_ancestor_or_same_capture(&possible_ancestor_proj_kinds, &hir_projections)\n     })?;\n \n-    // Convert index to be from the presepective of the entire closure_min_captures map\n+    // Convert index to be from the perspective of the entire closure_min_captures map\n     // instead of just the root variable capture list\n     Some((compute_capture_idx(closure_min_captures, var_hir_id, idx), capture))\n }"}, {"sha": "9865588cff4f51ffefc07450ef51b2d106df28c5", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -304,7 +304,7 @@ impl<'a> Parser<'a> {\n                 // this replace range with it, removing the inner attribute from the final\n                 // `AttrAnnotatedTokenStream`. Inner attributes are stored in the parsed AST note.\n                 // During macro expansion, they are selectively inserted back into the\n-                // token stream (the first inner attribute is remoevd each time we invoke the\n+                // token stream (the first inner attribute is removed each time we invoke the\n                 // corresponding macro).\n                 let range = start_pos..end_pos;\n                 if let Capturing::Yes = self.capture_state.capturing {"}, {"sha": "5ee9c339bb7aa9067c5d24726f65110b2a78fd8b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -188,7 +188,7 @@ impl<'a> Parser<'a> {\n     ///\n     /// Note: If your callback consumes an opening delimiter\n     /// (including the case where you call `collect_tokens`\n-    /// when the current token is an opening delimeter),\n+    /// when the current token is an opening delimiter),\n     /// you must also consume the corresponding closing delimiter.\n     ///\n     /// That is, you can consume\n@@ -260,7 +260,7 @@ impl<'a> Parser<'a> {\n             // We also call `has_cfg_or_cfg_attr` at the beginning of this function,\n             // but we only bail out if there's no possibility of inner attributes\n             // (!R::SUPPORTS_CUSTOM_INNER_ATTRS)\n-            // We only catpure about `#[cfg]` or `#[cfg_attr]` in `capture_cfg`\n+            // We only capture about `#[cfg]` or `#[cfg_attr]` in `capture_cfg`\n             // mode - during normal parsing, we don't need any special capturing\n             // for those attributes, since they're builtin.\n             && !(self.capture_cfg && has_cfg_or_cfg_attr(ret.attrs()))\n@@ -382,7 +382,7 @@ impl<'a> Parser<'a> {\n         if matches!(self.capture_state.capturing, Capturing::No) {\n             self.capture_state.replace_ranges.clear();\n             // We don't clear `inner_attr_ranges`, as doing so repeatedly\n-            // had a measureable performance impact. Most inner attributes that\n+            // had a measurable performance impact. Most inner attributes that\n             // we insert will get removed - when we drop the parser, we'll free\n             // up the memory used by any attributes that we didn't remove from the map.\n         }\n@@ -418,7 +418,7 @@ fn make_token_stream(\n                 stack.push(FrameData { open: span, open_delim: delim, inner: vec![] });\n             }\n             FlatToken::Token(Token { kind: TokenKind::CloseDelim(delim), span }) => {\n-                // HACK: If we enconter a mismatched `None` delimiter at the top\n+                // HACK: If we encounter a mismatched `None` delimiter at the top\n                 // level, just ignore it.\n                 if matches!(delim, DelimToken::NoDelim)\n                     && (stack.len() == 1"}, {"sha": "36eddf7784b3238c3b2dfae4a5718ef1f630aa92", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -288,7 +288,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> Option<(ty::ParamEnv<'tcx>, ty::ParamEnv<'tcx>)> {\n         let tcx = infcx.tcx;\n \n-        // Don't try to proess any nested obligations involving predicates\n+        // Don't try to process any nested obligations involving predicates\n         // that are already in the `ParamEnv` (modulo regions): we already\n         // know that they must hold.\n         for predicate in param_env.caller_bounds() {\n@@ -683,12 +683,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         && is_new_pred\n                     {\n                         debug!(\n-                            \"evaluate_nested_obligations: adding projection predicate\\\n+                            \"evaluate_nested_obligations: adding projection predicate \\\n                             to computed_preds: {:?}\",\n                             predicate\n                         );\n \n-                        // Under unusual circumstances, we can end up with a self-refeential\n+                        // Under unusual circumstances, we can end up with a self-referential\n                         // projection predicate. For example:\n                         // <T as MyType>::Value == <T as MyType>::Value\n                         // Not only is displaying this to the user pointless,\n@@ -767,7 +767,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                             // We only care about sub-obligations\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n-                            // for more infomration\n+                            // for more information\n                             if p.term().skip_binder().has_infer_types() {\n                                 if !self.evaluate_nested_obligations(\n                                     ty,\n@@ -784,7 +784,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         }\n                         Ok(Ok(None)) => {\n                             // It's ok not to make progress when have no inference variables -\n-                            // in that case, we were only performing unifcation to check if an\n+                            // in that case, we were only performing unification to check if an\n                             // error occurred (which would indicate that it's impossible for our\n                             // type to implement the auto trait).\n                             // However, we should always make progress (either by generating"}, {"sha": "46acd0ee4c5958b1f42f189bb1a16f59b96f3402", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1729,11 +1729,17 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// This function currently corresponds to the `open` function in Unix\n /// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n /// `O_CLOEXEC` is set for returned file descriptors.\n+///\n+/// On Linux (including Android), this function attempts to use `copy_file_range(2)`,\n+/// and falls back to reading and writing if that is not possible.\n+///\n /// On Windows, this function currently corresponds to `CopyFileEx`. Alternate\n /// NTFS streams are copied but only the size of the main stream is returned by\n-/// this function. On MacOS, this function corresponds to `fclonefileat` and\n-/// `fcopyfile`.\n-/// Note that, this [may change in the future][changes].\n+/// this function.\n+///\n+/// On MacOS, this function corresponds to `fclonefileat` and `fcopyfile`.\n+///\n+/// Note that platform-specific behavior [may change in the future][changes].\n ///\n /// [changes]: io#platform-specific-behavior\n ///"}, {"sha": "1a10245e4a5e397dea8ee28d23ac5b390cb53aca", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -39,6 +39,16 @@ use crate::mem::MaybeUninit;\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// # Platform-specific behavior\n+///\n+/// On Linux (including Android), this function uses `copy_file_range(2)`,\n+/// `sendfile(2)` or `splice(2)` syscalls to move data directly between file\n+/// descriptors if possible.\n+///\n+/// Note that platform-specific behavior [may change in the future][changes].\n+///\n+/// [changes]: crate::io#platform-specific-behavior\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64>\n where"}, {"sha": "771461a59089b6d7b3e91de1c1a5f31b66c26e26", "filename": "library/std/src/process.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -1705,25 +1705,25 @@ impl crate::error::Error for ExitStatusError {}\n /// }\n /// ```\n #[derive(Clone, Copy, Debug)]\n-#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n-#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n impl ExitCode {\n     /// The canonical `ExitCode` for successful termination on this platform.\n     ///\n     /// Note that a `()`-returning `main` implicitly results in a successful\n     /// termination, so there's no need to return this from `main` unless\n     /// you're also returning other possible codes.\n-    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n     pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n \n     /// The canonical `ExitCode` for unsuccessful termination on this platform.\n     ///\n     /// If you're only returning this and `SUCCESS` from `main`, consider\n     /// instead returning `Err(_)` and `Ok(())` respectively, which will\n     /// return the same codes (but will also `eprintln!` the error).\n-    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n     pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n }\n \n@@ -1747,7 +1747,7 @@ impl ExitCode {\n     }\n }\n \n-#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n impl From<u8> for ExitCode {\n     /// Construct an `ExitCode` from an arbitrary u8 value.\n     fn from(code: u8) -> Self {\n@@ -2092,27 +2092,27 @@ pub fn id() -> u32 {\n /// standard library's runtime for convenience. Other runtimes are not required\n /// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n #[rustc_on_unimplemented(\n     message = \"`main` has invalid return type `{Self}`\",\n     label = \"`main` can only return types that implement `{Termination}`\"\n )]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system.\n-    #[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+    #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n     fn report(self) -> ExitCode;\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl Termination for () {\n     #[inline]\n     fn report(self) -> ExitCode {\n         ExitCode::SUCCESS.report()\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl<E: fmt::Debug> Termination for Result<(), E> {\n     fn report(self) -> ExitCode {\n         match self {\n@@ -2122,14 +2122,14 @@ impl<E: fmt::Debug> Termination for Result<(), E> {\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl Termination for ! {\n     fn report(self) -> ExitCode {\n         self\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n@@ -2138,15 +2138,15 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n         Err::<!, _>(err).report()\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl Termination for ExitCode {\n     #[inline]\n     fn report(self) -> ExitCode {"}, {"sha": "5324c6bde4e1bc4edfb2276c761a2eafbc812f1f", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -10,7 +10,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - `llvm-libunwind` now accepts `in-tree` (formerly true), `system` or `no` (formerly false) [#77703](https://github.com/rust-lang/rust/pull/77703)\n - The options `infodir`, `localstatedir`, and `gpg-password-file` are no longer allowed in config.toml. Previously, they were ignored without warning. Note that `infodir` and `localstatedir` are still accepted by `./configure`, with a warning. [#82451](https://github.com/rust-lang/rust/pull/82451)\n - Add options for enabling overflow checks, one for std (`overflow-checks-std`) and one for everything else (`overflow-checks`). Both default to false.\n-- Change the names for `dist` commmands to match the component they generate. [#90684](https://github.com/rust-lang/rust/pull/90684)\n+- Change the names for `dist` commands to match the component they generate. [#90684](https://github.com/rust-lang/rust/pull/90684)\n \n ### Non-breaking changes\n "}, {"sha": "e816f9b4c07c6a657a917b62087ae4f823e6b2c7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -594,7 +594,7 @@ impl<'a> Builder<'a> {\n                 dist::RustDev,\n                 dist::Extended,\n                 // It seems that PlainSourceTarball somehow changes how some of the tools\n-                // perceive their dependencies (see #93033) which would invaliate fingerprints\n+                // perceive their dependencies (see #93033) which would invalidate fingerprints\n                 // and force us to rebuild tools after vendoring dependencies.\n                 // To work around this, create the Tarball after building all the tools.\n                 dist::PlainSourceTarball,"}, {"sha": "afc333b5048cea876be0a3a985fafadadc53ad38", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -703,7 +703,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n     // build. If we are in a check build we still go ahead here presuming we've\n-    // detected that LLVM is alreay built and good to go which helps prevent\n+    // detected that LLVM is already built and good to go which helps prevent\n     // busting caches (e.g. like #71152).\n     if builder.config.llvm_enabled()\n         && (builder.kind != Kind::Check"}, {"sha": "fe106ff0557883e9880e14dfaae63d02faa1505e", "filename": "src/test/ui/impl-trait/xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Ftest%2Fui%2Fimpl-trait%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Ftest%2Fui%2Fimpl-trait%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fxcrate.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -5,7 +5,7 @@\n extern crate xcrate;\n \n fn main() {\n-//  NOTE line below commeted out due to issue #45994\n+//  NOTE line below commented out due to issue #45994\n //  assert_eq!(xcrate::fourway_add(1)(2)(3)(4), 10);\n     xcrate::return_closure_accessing_internal_fn()();\n }"}, {"sha": "57d548f313dae1bdfe289d00a77d90d9cb583fd9", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05142a7e4495f09141fdd65f140fe44d8c200a9e/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=05142a7e4495f09141fdd65f140fe44d8c200a9e", "patch": "@@ -26,6 +26,7 @@ fn python() -> &'static str {\n     let mut python3 = false;\n \n     for dir in env::split_paths(&val) {\n+        // `python` should always take precedence over python2 / python3 if it exists\n         if dir.join(PYTHON).exists() {\n             return PYTHON;\n         }\n@@ -34,11 +35,14 @@ fn python() -> &'static str {\n         python3 |= dir.join(PYTHON3).exists();\n     }\n \n+    // try 3 before 2\n     if python3 {\n         PYTHON3\n     } else if python2 {\n         PYTHON2\n     } else {\n+        // We would have returned early if we found that python is installed ...\n+        // maybe this should panic with an error instead?\n         PYTHON\n     }\n }"}]}