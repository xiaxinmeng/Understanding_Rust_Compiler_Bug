{"sha": "07c7888037cb74ca33459946145608a854aae6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Yzc4ODgwMzdjYjc0Y2EzMzQ1OTk0NjE0NTYwOGE4NTRhYWU2ZWQ=", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-16T21:16:11Z"}, "committer": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-16T21:16:11Z"}, "message": "Don't add the rust arguments to native functions. We now produce the\ncorrect arguments for native functions.", "tree": {"sha": "4b46a3f2df3171ad78da0e3943c2e06c795e2210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b46a3f2df3171ad78da0e3943c2e06c795e2210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c7888037cb74ca33459946145608a854aae6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c7888037cb74ca33459946145608a854aae6ed", "html_url": "https://github.com/rust-lang/rust/commit/07c7888037cb74ca33459946145608a854aae6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c7888037cb74ca33459946145608a854aae6ed/comments", "author": null, "committer": null, "parents": [{"sha": "a63696dfe2bd47d34925a3ad44db9d2ede949e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63696dfe2bd47d34925a3ad44db9d2ede949e36", "html_url": "https://github.com/rust-lang/rust/commit/a63696dfe2bd47d34925a3ad44db9d2ede949e36"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "e3e68d4b3e9126b136745cb41bac5e3df4235313", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=07c7888037cb74ca33459946145608a854aae6ed", "patch": "@@ -370,6 +370,26 @@ fn type_of(@crate_ctxt cx, @ty.t t) -> TypeRef {\n     ret llty;\n }\n \n+fn type_of_explicit_args(@crate_ctxt cx,\n+                     vec[ty.arg] inputs) -> vec[TypeRef] {\n+    let vec[TypeRef] atys = vec();\n+    for (ty.arg arg in inputs) {\n+        if (ty.type_has_dynamic_size(arg.ty)) {\n+            check (arg.mode == ast.alias);\n+            atys += T_typaram_ptr();\n+        } else {\n+            let TypeRef t = type_of(cx, arg.ty);\n+            alt (arg.mode) {\n+                case (ast.alias) {\n+                    t = T_ptr(t);\n+                }\n+                case (_) { /* fall through */  }\n+            }\n+            atys += t;\n+        }\n+    }\n+    ret atys;\n+}\n \n // NB: must keep 4 fns in sync:\n //\n@@ -417,21 +437,7 @@ fn type_of_fn_full(@crate_ctxt cx,\n     }\n \n     // ... then explicit args.\n-    for (ty.arg arg in inputs) {\n-        if (ty.type_has_dynamic_size(arg.ty)) {\n-            check (arg.mode == ast.alias);\n-            atys += T_typaram_ptr();\n-        } else {\n-            let TypeRef t = type_of(cx, arg.ty);\n-            alt (arg.mode) {\n-                case (ast.alias) {\n-                    t = T_ptr(t);\n-                }\n-                case (_) { /* fall through */  }\n-            }\n-            atys += t;\n-        }\n-    }\n+    atys += type_of_explicit_args(cx, inputs);\n \n     ret T_fn(atys, llvm.LLVMVoidType());\n }\n@@ -440,6 +446,12 @@ fn type_of_fn(@crate_ctxt cx, vec[ty.arg] inputs, @ty.t output) -> TypeRef {\n     ret type_of_fn_full(cx, none[TypeRef], inputs, output);\n }\n \n+fn type_of_native_fn(@crate_ctxt cx, vec[ty.arg] inputs,\n+                     @ty.t output) -> TypeRef {\n+    let vec[TypeRef] atys = type_of_explicit_args(cx, inputs);\n+    ret T_fn(atys, llvm.LLVMVoidType());\n+}\n+\n fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n     alt (t.struct) {\n         case (ty.ty_native) { ret T_ptr(T_i8()); }\n@@ -489,6 +501,9 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n         case (ty.ty_fn(?args, ?out)) {\n             ret T_fn_pair(type_of_fn(cx, args, out));\n         }\n+        case (ty.ty_native_fn(?args, ?out)) {\n+            ret T_fn_pair(type_of_native_fn(cx, args, out));\n+        }\n         case (ty.ty_obj(?meths)) {\n             auto th = mk_type_handle();\n             auto self_ty = llvm.LLVMResolveTypeHandle(th.llth);"}, {"sha": "adda5a8cc1ee7c322ecccdc06d86b16ef4bd1d4f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=07c7888037cb74ca33459946145608a854aae6ed", "patch": "@@ -38,6 +38,7 @@ tag sty {\n     ty_tup(vec[@t]);\n     ty_rec(vec[field]);\n     ty_fn(vec[arg], @t);                            // TODO: effect\n+    ty_native_fn(vec[arg], @t);                     // TODO: effect\n     ty_obj(vec[method]);\n     ty_var(int);                                    // ephemeral type var\n     ty_local(ast.def_id);                           // type of a local var\n@@ -243,6 +244,10 @@ fn ty_to_str(&@t typ) -> str {\n             s = fn_to_str(none[ast.ident], inputs, output);\n         }\n \n+        case (ty_native_fn(?inputs, ?output)) {\n+            s = fn_to_str(none[ast.ident], inputs, output);\n+        }\n+\n         case (ty_obj(?meths)) {\n             auto f = method_to_str;\n             auto m = _vec.map[method,str](f, meths);"}, {"sha": "3dab25a7e5e726f3b4527e730d7290886a1756d0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c7888037cb74ca33459946145608a854aae6ed/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=07c7888037cb74ca33459946145608a854aae6ed", "patch": "@@ -300,6 +300,19 @@ fn ty_of_fn_decl(@ty_item_table id_to_ty_item,\n     ret t_fn;\n }\n \n+fn ty_of_native_fn_decl(@ty_item_table id_to_ty_item,\n+                 @ty_table item_to_ty,\n+                 fn(&@ast.ty ast_ty) -> @ty.t convert,\n+                 fn(&ast.arg a) -> arg ty_of_arg,\n+                 &ast.fn_decl decl,\n+                 ast.def_id def_id) -> @ty.t {\n+    auto input_tys = _vec.map[ast.arg,arg](ty_of_arg, decl.inputs);\n+    auto output_ty = convert(decl.output);\n+    auto t_fn = plain_ty(ty.ty_native_fn(input_tys, output_ty));\n+    item_to_ty.insert(def_id, t_fn);\n+    ret t_fn;\n+}\n+\n fn collect_item_types(session.session sess, @ast.crate crate)\n     -> tup(@ast.crate, @ty_table, @ty_item_table) {\n \n@@ -436,8 +449,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                 auto get = bind getter(id_to_ty_item, item_to_ty, _);\n                 auto convert = bind ast_ty_to_ty(get, _);\n                 auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n-                ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert, f,\n-                                  fn_decl, def_id);\n+                ret ty_of_native_fn_decl(id_to_ty_item, item_to_ty, convert,\n+                                         f, fn_decl, def_id);\n             }\n             case (ast.native_item_ty(_, ?def_id)) {\n                 if (item_to_ty.contains_key(def_id)) {"}]}