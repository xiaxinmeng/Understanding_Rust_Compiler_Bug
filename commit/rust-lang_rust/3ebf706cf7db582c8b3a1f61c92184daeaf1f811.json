{"sha": "3ebf706cf7db582c8b3a1f61c92184daeaf1f811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmY3MDZjZjdkYjU4MmM4YjNhMWY2MWM5MjE4NGRhZWFmMWY4MTE=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2015-07-07T03:19:50Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2015-07-18T01:12:26Z"}, "message": "Define and use a `print_maybe_styled!` macro in libsyntax/diagnostic.rs\n\n`EmitterWriter::print_maybe_styled` was basically always used with `format!`, so\nthis macro makes some code cleaner. It should also remove some unnecessary\nallocations (most `print_maybe_styled` invocations allocated a `String`\npreviously, whereas the new macro uses `write_fmt` to write the formatted string\ndirectly to the terminal).\n\nThis probably could have been part of #26838, but it\u2019s too late now.", "tree": {"sha": "fb319b0afb05d062cfd7d66199b5e5793b1e4afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb319b0afb05d062cfd7d66199b5e5793b1e4afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebf706cf7db582c8b3a1f61c92184daeaf1f811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebf706cf7db582c8b3a1f61c92184daeaf1f811", "html_url": "https://github.com/rust-lang/rust/commit/3ebf706cf7db582c8b3a1f61c92184daeaf1f811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebf706cf7db582c8b3a1f61c92184daeaf1f811/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05ac3938bcbdd616930bb010a3bbfa35f22850e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ac3938bcbdd616930bb010a3bbfa35f22850e", "html_url": "https://github.com/rust-lang/rust/commit/e05ac3938bcbdd616930bb010a3bbfa35f22850e"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "4658c8fd30ab24dbde6d4d42e654cce851ee316e", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3ebf706cf7db582c8b3a1f61c92184daeaf1f811/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebf706cf7db582c8b3a1f61c92184daeaf1f811/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=3ebf706cf7db582c8b3a1f61c92184daeaf1f811", "patch": "@@ -318,6 +318,20 @@ enum Destination {\n     Raw(Box<Write + Send>),\n }\n \n+/// Do not use this for messages that end in `\\n` \u2013 use `println_maybe_styled` instead. See\n+/// `EmitterWriter::print_maybe_styled` for details.\n+macro_rules! print_maybe_styled {\n+    ($writer: expr, $style: expr, $($arg: tt)*) => {\n+        $writer.print_maybe_styled(format_args!($($arg)*), $style, false)\n+    }\n+}\n+\n+macro_rules! println_maybe_styled {\n+    ($writer: expr, $style: expr, $($arg: tt)*) => {\n+        $writer.print_maybe_styled(format_args!($($arg)*), $style, true)\n+    }\n+}\n+\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   registry: Option<diagnostics::registry::Registry>) -> EmitterWriter {\n@@ -346,8 +360,9 @@ impl EmitterWriter {\n     }\n \n     fn print_maybe_styled(&mut self,\n-                          msg: &str,\n-                          color: term::attr::Attr) -> io::Result<()> {\n+                          args: fmt::Arguments,\n+                          color: term::attr::Attr,\n+                          print_newline_at_end: bool) -> io::Result<()> {\n         match self.dst {\n             Terminal(ref mut t) => {\n                 try!(t.attr(color));\n@@ -364,17 +379,22 @@ impl EmitterWriter {\n                 // once, which still leaves the opportunity for interleaved output\n                 // to be miscolored. We assume this is rare enough that we don't\n                 // have to worry about it.\n-                if msg.ends_with(\"\\n\") {\n-                    try!(t.write_all(msg[..msg.len()-1].as_bytes()));\n-                    try!(t.reset());\n-                    try!(t.write_all(b\"\\n\"));\n+                try!(t.write_fmt(args));\n+                try!(t.reset());\n+                if print_newline_at_end {\n+                    t.write_all(b\"\\n\")\n+                } else {\n+                    Ok(())\n+                }\n+            }\n+            Raw(ref mut w) => {\n+                try!(w.write_fmt(args));\n+                if print_newline_at_end {\n+                    w.write_all(b\"\\n\")\n                 } else {\n-                    try!(t.write_all(msg.as_bytes()));\n-                    try!(t.reset());\n+                    Ok(())\n                 }\n-                Ok(())\n             }\n-            Raw(ref mut w) => w.write_all(msg.as_bytes()),\n         }\n     }\n \n@@ -384,15 +404,14 @@ impl EmitterWriter {\n             try!(write!(&mut self.dst, \"{} \", topic));\n         }\n \n-        try!(self.print_maybe_styled(&format!(\"{}: \", lvl.to_string()),\n-                                     term::attr::ForegroundColor(lvl.color())));\n-        try!(self.print_maybe_styled(&format!(\"{}\", msg),\n-                                     term::attr::Bold));\n+        try!(print_maybe_styled!(self, term::attr::ForegroundColor(lvl.color()),\n+                                 \"{}: \", lvl.to_string()));\n+        try!(print_maybe_styled!(self, term::attr::Bold, \"{}\", msg));\n \n         match code {\n             Some(code) => {\n                 let style = term::attr::ForegroundColor(term::color::BRIGHT_MAGENTA);\n-                try!(self.print_maybe_styled(&format!(\" [{}]\", code.clone()), style));\n+                try!(print_maybe_styled!(self, style, \" [{}]\", code.clone()));\n             }\n             None => ()\n         }\n@@ -623,8 +642,8 @@ impl EmitterWriter {\n                     s.pop();\n                 }\n \n-                try!(self.print_maybe_styled(&format!(\"{}\\n\", s),\n-                                             term::attr::ForegroundColor(lvl.color())));\n+                try!(println_maybe_styled!(self, term::attr::ForegroundColor(lvl.color()),\n+                                           \"{}\", s));\n             }\n         }\n         Ok(())\n@@ -696,9 +715,8 @@ impl EmitterWriter {\n             }\n         }\n         s.push('^');\n-        s.push('\\n');\n-        self.print_maybe_styled(&s[..],\n-                                term::attr::ForegroundColor(lvl.color()))\n+        println_maybe_styled!(self, term::attr::ForegroundColor(lvl.color()),\n+                              \"{}\", s)\n     }\n \n     fn print_macro_backtrace(&mut self,"}]}