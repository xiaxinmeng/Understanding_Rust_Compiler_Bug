{"sha": "dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "node_id": "C_kwDOAAsO6NoAKGRkMDI1YzNiNTYyYmYwMGFhZTQ2MmIwYzc3YjdkMmJhMWY4ZmFkOTM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-17T08:22:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-17T09:27:07Z"}, "message": "fix codegen difference", "tree": {"sha": "7133c2d1e47b6acc90ccce6443a8d8e2701d31be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7133c2d1e47b6acc90ccce6443a8d8e2701d31be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "html_url": "https://github.com/rust-lang/rust/commit/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99851c48cf0f1942d9c4d0c22df1d83fc3a61814", "url": "https://api.github.com/repos/rust-lang/rust/commits/99851c48cf0f1942d9c4d0c22df1d83fc3a61814", "html_url": "https://github.com/rust-lang/rust/commit/99851c48cf0f1942d9c4d0c22df1d83fc3a61814"}], "stats": {"total": 122, "additions": 88, "deletions": 34}, "files": [{"sha": "17715c9291feea7b3f67a03477949472e75dc8d3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -785,8 +785,7 @@ macro_rules! int_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n-            unsafe { intrinsics::unchecked_shl(self, rhs as _) }\n+            unsafe { intrinsics::unchecked_shl(self, conv_rhs_for_unchecked_shift!($SelfT, rhs)) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is\n@@ -834,8 +833,7 @@ macro_rules! int_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n-            unsafe { intrinsics::unchecked_shr(self, rhs as _) }\n+            unsafe { intrinsics::unchecked_shr(self, conv_rhs_for_unchecked_shift!($SelfT, rhs)) }\n         }\n \n         /// Checked absolute value. Computes `self.abs()`, returning `None` if"}, {"sha": "fdd7be625ed9327020b58ebaee11d1c2848d1bb3", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -3,6 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n+use crate::convert::TryInto;\n use crate::intrinsics;\n use crate::mem;\n use crate::ops::{Add, Mul, Sub};\n@@ -224,6 +225,23 @@ macro_rules! widening_impl {\n     };\n }\n \n+macro_rules! conv_rhs_for_unchecked_shift {\n+    ($SelfT:ty, $x:expr) => {{\n+        #[inline]\n+        fn conv(x: u32) -> $SelfT {\n+            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n+            // SAFETY: Any legal shift amount must be losslessly representable in the self type.\n+            unsafe { x.try_into().ok().unwrap_unchecked() }\n+        }\n+        #[inline]\n+        const fn const_conv(x: u32) -> $SelfT {\n+            x as _\n+        }\n+\n+        intrinsics::const_eval_select(($x,), const_conv, conv)\n+    }};\n+}\n+\n impl i8 {\n     int_impl! {\n         Self = i8,"}, {"sha": "6f6b6dbb80b3fa9b7434623d637b394693b02ebe", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -939,8 +939,7 @@ macro_rules! uint_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n-            unsafe { intrinsics::unchecked_shl(self, rhs as _) }\n+            unsafe { intrinsics::unchecked_shl(self, conv_rhs_for_unchecked_shift!($SelfT, rhs)) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None`\n@@ -988,8 +987,7 @@ macro_rules! uint_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n-            unsafe { intrinsics::unchecked_shr(self, rhs as _) }\n+            unsafe { intrinsics::unchecked_shr(self, conv_rhs_for_unchecked_shift!($SelfT, rhs)) }\n         }\n \n         /// Checked exponentiation. Computes `self.pow(exp)`, returning `None` if"}, {"sha": "473e02f1cb1c800016e5462e25c44c7aa847cf9d", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -10,7 +10,8 @@\n +     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         let mut _6: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         scope 2 {\n +         }\n +     }\n@@ -21,18 +22,27 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n-+         StorageLive(_5);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n-+         _5 = _4 as u16 (IntToInt);       // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _0 = unchecked_shl::<u16>(_3, _5) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _6 = (_4,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _5 = core::num::<impl u16>::unchecked_shl::conv(move (_6.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n -                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> u16 {core::num::<impl u16>::unchecked_shl::conv}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n++     }\n++ \n++     bb2: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2"}, {"sha": "9b7b11ef659aac1bfd0512148d9659ec3883dd65", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -7,22 +7,32 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n-        _3 = _2 as u16 (IntToInt);       // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _3 = core::num::<impl u16>::unchecked_shl::conv(move (_4.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> u16 {core::num::<impl u16>::unchecked_shl::conv}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n     }\n \n-    bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n+    bb2: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n }"}, {"sha": "9638ddda46b715558497df4f3404c5d8c3a7bb7d", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -10,7 +10,8 @@\n +     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         let mut _6: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n +         scope 2 {\n +         }\n +     }\n@@ -21,18 +22,27 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n-+         StorageLive(_5);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n-+         _5 = _4 as i16 (IntToInt);       // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _0 = unchecked_shr::<i16>(_3, _5) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _6 = (_4,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _5 = core::num::<impl i16>::unchecked_shr::conv(move (_6.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n -                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> i16 {core::num::<impl i16>::unchecked_shr::conv}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n++     }\n++ \n++     bb2: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2"}, {"sha": "afe6d08741b4722f94f7ef8fc6f08a75ec0ac17a", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/dd025c3b562bf00aae462b0c77b7d2ba1f8fad93/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=dd025c3b562bf00aae462b0c77b7d2ba1f8fad93", "patch": "@@ -7,22 +7,32 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n-        _3 = _2 as i16 (IntToInt);       // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _3 = core::num::<impl i16>::unchecked_shr::conv(move (_4.0: u32)) -> bb1; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> i16 {core::num::<impl i16>::unchecked_shr::conv}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n     }\n \n-    bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:7: +1:23\n+    bb2: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n }"}]}