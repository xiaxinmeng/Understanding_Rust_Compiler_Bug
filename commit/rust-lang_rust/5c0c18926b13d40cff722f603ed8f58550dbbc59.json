{"sha": "5c0c18926b13d40cff722f603ed8f58550dbbc59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGMxODkyNmIxM2Q0MGNmZjcyMmY2MDNlZDhmNTg1NTBkYmJjNTk=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-08T19:22:31Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-08T19:22:31Z"}, "message": "Cleaning up unessicary code that the Magic completion takes care of.", "tree": {"sha": "518e7fdf612788af5078255594e6b9338be7eb39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518e7fdf612788af5078255594e6b9338be7eb39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0c18926b13d40cff722f603ed8f58550dbbc59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0c18926b13d40cff722f603ed8f58550dbbc59", "html_url": "https://github.com/rust-lang/rust/commit/5c0c18926b13d40cff722f603ed8f58550dbbc59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0c18926b13d40cff722f603ed8f58550dbbc59/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f801723dd2e4a518c1608909509f47f03d75fe1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f801723dd2e4a518c1608909509f47f03d75fe1a", "html_url": "https://github.com/rust-lang/rust/commit/f801723dd2e4a518c1608909509f47f03d75fe1a"}], "stats": {"total": 47, "additions": 8, "deletions": 39}, "files": [{"sha": "d147bd11d42fa9855f6525e9cc6b1653c7305d98", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5c0c18926b13d40cff722f603ed8f58550dbbc59/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0c18926b13d40cff722f603ed8f58550dbbc59/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=5c0c18926b13d40cff722f603ed8f58550dbbc59", "patch": "@@ -1,9 +1,9 @@\n use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionKind, CompletionItemKind};\n \n-use ast::{ NameOwner };\n-use hir::{ self, db::HirDatabase };\n+use ra_syntax::ast::{self, NameOwner, AstNode};\n+\n+use hir::{self, db::HirDatabase};\n \n-use ra_syntax::{ SyntaxKind, ast, ast::AstNode, TextRange };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     let impl_block = ctx.impl_block.as_ref();\n@@ -23,40 +23,9 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n         return;\n     }\n \n-    // for cases where the user has already started writing the function def, navigate\n-    // the previous tokens in order to find the location of that token so that we may \n-    // replace it with our completion.\n-    let start_position = {        \n-        let mut prev_token = ctx.token\n-            .prev_token()\n-            .clone();\n-\n-        while let Some(token) = &prev_token {\n-            match token.kind() {\n-                SyntaxKind::FN_KW => break,\n-\n-                // todo:    attempt to find a better way of determining when to stop as\n-                //          the following feels sketchy.\n-                SyntaxKind::IMPL_KW |\n-                SyntaxKind::L_CURLY |\n-                SyntaxKind::R_CURLY => {\n-                    prev_token = None;\n-                    break;\n-                }\n-                _ => {}\n-            }\n-\n-            prev_token = token.prev_token().clone();\n-        }\n-\n-        prev_token\n-            .map(|t| t.text_range())\n-            .unwrap_or(ctx.source_range())\n-    };\n-\n-    let trait_ = target_trait.unwrap();\n+    let target_trait = target_trait.unwrap();\n \n-    let trait_items = trait_.items(ctx.db);\n+    let trait_items = target_trait.items(ctx.db);\n     let missing_items = trait_items\n         .iter()\n         .filter(|i| {\n@@ -127,7 +96,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n \n     for item in missing_items {\n         match item {\n-            hir::AssocItem::Function(f) => add_function_impl(acc, ctx, f, start_position),\n+            hir::AssocItem::Function(f) => add_function_impl(acc, ctx, f),\n             _ => {}\n         }\n     }\n@@ -152,7 +121,7 @@ fn resolve_target_trait(\n     }\n }\n \n-pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext, func: &hir::Function, start: TextRange) {\n+pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext, func: &hir::Function) {\n     use crate::display::FunctionSignature;\n \n     let display = FunctionSignature::from_hir(ctx.db, func.clone());\n@@ -165,7 +134,7 @@ pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext,\n         format!(\"fn {}()\", func_name.to_string())\n     };\n \n-    let builder = CompletionItem::new(CompletionKind::Magic, start, label.clone())\n+    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label.clone())\n         .lookup_by(label);\n \n     let completion_kind = if func.has_self_param(ctx.db) {"}]}