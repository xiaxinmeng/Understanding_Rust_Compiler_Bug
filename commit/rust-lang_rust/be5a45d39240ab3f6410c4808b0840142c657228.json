{"sha": "be5a45d39240ab3f6410c4808b0840142c657228", "node_id": "C_kwDOAAsO6NoAKGJlNWE0NWQzOTI0MGFiM2Y2NDEwYzQ4MDhiMDg0MDE0MmM2NTcyMjg", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-10-31T08:45:11Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:38:39Z"}, "message": "fix struct path", "tree": {"sha": "01431cdca81d374a6a4ac14f5a84a081dadc8287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01431cdca81d374a6a4ac14f5a84a081dadc8287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5a45d39240ab3f6410c4808b0840142c657228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5a45d39240ab3f6410c4808b0840142c657228", "html_url": "https://github.com/rust-lang/rust/commit/be5a45d39240ab3f6410c4808b0840142c657228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5a45d39240ab3f6410c4808b0840142c657228/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34329d6f6c73a6f0080e169007d099a40db3aea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/34329d6f6c73a6f0080e169007d099a40db3aea1", "html_url": "https://github.com/rust-lang/rust/commit/34329d6f6c73a6f0080e169007d099a40db3aea1"}], "stats": {"total": 185, "additions": 137, "deletions": 48}, "files": [{"sha": "fd55c121bc4ed29b3ded236f5660a514ec266ec0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -4134,6 +4134,7 @@ dependencies = [\n name = \"rustc_hir_typeck\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "114b2d37fb89addf1cbf3af7b53c0872e6be8058", "filename": "compiler/rustc_hir_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/compiler%2Frustc_hir_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/compiler%2Frustc_hir_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2FCargo.toml?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -8,6 +8,7 @@ edition = \"2021\"\n [dependencies]\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n+either = \"1.5.0\"\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }"}, {"sha": "92a0b9785d042fabd264690501a0f1020b62a3bd", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -32,6 +32,8 @@ use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, sym, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n+use either::Either;\n+\n use std::iter;\n use std::mem;\n use std::ops::ControlFlow;\n@@ -1231,28 +1233,44 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 return None;\n             }\n-            Res::Def(DefKind::Variant, _) => match ty.normalized.kind() {\n-                ty::Adt(adt, substs) => Some((adt.variant_of_res(def), adt.did(), substs)),\n+            Res::Def(DefKind::Variant, _) => match (ty.raw.kind(), ty.normalized.kind()) {\n+                (ty::Adt(adt, substs), _) => {\n+                    Some((adt.variant_of_res(def), adt.did(), substs, Either::Left(substs)))\n+                }\n+                (_, ty::Adt(adt, substs)) => {\n+                    Some((adt.variant_of_res(def), adt.did(), substs, Either::Right(ty.raw)))\n+                }\n                 _ => bug!(\"unexpected type: {:?}\", ty.normalized),\n             },\n             Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n             | Res::SelfTyParam { .. }\n-            | Res::SelfTyAlias { .. } => match ty.normalized.kind() {\n-                ty::Adt(adt, substs) if !adt.is_enum() => {\n-                    Some((adt.non_enum_variant(), adt.did(), substs))\n+            | Res::SelfTyAlias { .. } => match (ty.raw.kind(), ty.normalized.kind()) {\n+                (ty::Adt(adt, substs), _) if !adt.is_enum() => {\n+                    Some((adt.non_enum_variant(), adt.did(), substs, Either::Left(substs)))\n+                }\n+                (_, ty::Adt(adt, substs)) if !adt.is_enum() => {\n+                    Some((adt.non_enum_variant(), adt.did(), substs, Either::Right(ty.raw)))\n                 }\n                 _ => None,\n             },\n             _ => bug!(\"unexpected definition: {:?}\", def),\n         };\n \n-        if let Some((variant, did, substs)) = variant {\n+        if let Some((variant, did, substs, user_annotation)) = variant {\n             debug!(\"check_struct_path: did={:?} substs={:?}\", did, substs);\n \n-            // FIXME(aliemjay): We're using UserSelfTy unconditionally here because it is the only\n-            // way to register the raw user ty, because `substs` is normalized.\n-            let self_ty = ty::UserSelfTy { impl_def_id: did, self_ty: ty.raw };\n-            self.write_user_type_annotation_from_substs(hir_id, did, substs, Some(self_ty));\n+            // Register type annotation.\n+            self.probe(|_| {\n+                // UserSubsts and UserSelfTy are mutually exclusive here.\n+                let (user_substs, self_ty) = match user_annotation {\n+                    Either::Left(substs) => (*substs, None),\n+                    Either::Right(self_ty) => {\n+                        (self.fresh_substs_for_item(path_span, did), Some(self_ty))\n+                    }\n+                };\n+                let self_ty = self_ty.map(|self_ty| ty::UserSelfTy { impl_def_id: did, self_ty });\n+                self.write_user_type_annotation_from_substs(hir_id, did, user_substs, self_ty);\n+            });\n \n             // Check bounds on type arguments used in the path.\n             self.add_required_obligations_for_hir(path_span, did, substs, hir_id);"}, {"sha": "7036834c4b1190ff97c1e6bd114a1391990655f0", "filename": "src/test/ui/const-generics/issue-97007.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -1,8 +1,4 @@\n-//~ ERROR broken MIR\n-\n-// known-bug\n-// failure-status: 101\n-// rustc-env: RUSTC_BACKTRACE=0\n+// check-pass\n \n #![feature(adt_const_params, generic_const_exprs)]\n #![allow(incomplete_features)]"}, {"sha": "ccda9129dabaed03eef51041a60260d93f96bb4e", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -11,10 +11,8 @@ struct SomeStruct<T> { t: T }\n #[rustc_dump_user_substs]\n fn main() {\n     SomeStruct { t: 22 }; // Nothing given, no annotation.\n-    //~^ ERROR SomeStruct<^0>\n \n     SomeStruct::<_> { t: 22 }; // Nothing interesting given, no annotation.\n-    //~^ ERROR SomeStruct<^0>\n \n     SomeStruct::<u32> { t: 22 }; // No lifetime bounds given.\n "}, {"sha": "5860621909ce4998dca974df94451a380c974288", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -1,20 +1,8 @@\n-error: user substs: UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(0:3 ~ dump_adt_brace_struct[4679]::SomeStruct), self_ty: SomeStruct<^0> }) }\n-  --> $DIR/dump-adt-brace-struct.rs:13:5\n-   |\n-LL |     SomeStruct { t: 22 }; // Nothing given, no annotation.\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-\n-error: user substs: UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(0:3 ~ dump_adt_brace_struct[4679]::SomeStruct), self_ty: SomeStruct<^0> }) }\n-  --> $DIR/dump-adt-brace-struct.rs:16:5\n-   |\n-LL |     SomeStruct::<_> { t: 22 }; // Nothing interesting given, no annotation.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: user substs: UserSubsts { substs: [&ReStatic u32], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(0:3 ~ dump_adt_brace_struct[4679]::SomeStruct), self_ty: SomeStruct<&ReStatic u32> }) }\n-  --> $DIR/dump-adt-brace-struct.rs:21:5\n+error: user substs: UserSubsts { substs: [&ReStatic u32], user_self_ty: None }\n+  --> $DIR/dump-adt-brace-struct.rs:19:5\n    |\n LL |     SomeStruct::<&'static u32> { t: &22 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n "}, {"sha": "92600155c7f0463c07c85c8468c44aa67eec1e49", "filename": "src/test/ui/nll/user-annotations/normalization-2.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -24,6 +24,7 @@ enum MyTy<T> {\n \n impl<T> MyTy<T> {\n     fn method<X>() {}\n+    fn method2<X>(&self) {}\n }\n \n type Ty<'a> = <&'a () as Trait>::Assoc;\n@@ -45,6 +46,9 @@ fn test_path<'a, 'b, 'c, 'd>() {\n     //~^ ERROR lifetime may not live long enough\n     <Ty<'static>>::method::<Ty<'b>>;\n     //~^ ERROR lifetime may not live long enough\n+\n+    MyTy::Unit::<Ty<'c>>;\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn test_call<'a, 'b, 'c>() {\n@@ -55,14 +59,44 @@ fn test_call<'a, 'b, 'c>() {\n }\n \n fn test_variants<'a, 'b, 'c>() {\n-    <Ty<'a>>::Struct {}; //TODO\n+    <Ty<'a>>::Struct {};\n     //~^ ERROR lifetime may not live long enough\n     <Ty<'b>>::Tuple();\n     //~^ ERROR lifetime may not live long enough\n     <Ty<'c>>::Unit;\n     //~^ ERROR lifetime may not live long enough\n }\n \n+fn test_method_call<'a>(x: MyTy<()>) {\n+    // FIXME This should fail.\n+    x.method2::<Ty<'a>>();\n+}\n+\n+fn test_struct_path<'a, 'b, 'c, 'd>() {\n+    struct Struct<T> { x: Option<T>, }\n+\n+    trait Project {\n+        type Struct;\n+        type Enum;\n+    }\n+    impl<T> Project for T {\n+        type Struct = Struct<()>;\n+        type Enum = MyTy<()>;\n+    }\n+\n+    // Resolves to enum variant\n+    MyTy::<Ty<'a>>::Struct {}; // without SelfTy\n+    //~^ ERROR lifetime may not live long enough\n+    <Ty<'b> as Project>::Enum::Struct {}; // with SelfTy\n+    //~^ ERROR lifetime may not live long enough\n+\n+    // Resolves to struct and associated type respectively\n+    Struct::<Ty<'c>> { x: None, }; // without SelfTy\n+    //~^ ERROR lifetime may not live long enough\n+    <Ty<'d> as Project>::Struct { x: None, }; // with SelfTy\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n fn test_pattern<'a, 'b, 'c>() {\n     use MyTy::*;\n     match MyTy::Unit {"}, {"sha": "5dbdb2ecea85926d926b7ee5b8eee7f7cdc5ee5c", "filename": "src/test/ui/nll/user-annotations/normalization-2.stderr", "status": "modified", "additions": 68, "deletions": 15, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5a45d39240ab3f6410c4808b0840142c657228/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr?ref=be5a45d39240ab3f6410c4808b0840142c657228", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:32:12\n+  --> $DIR/normalization-2.rs:33:12\n    |\n LL | fn test_local<'a>() {\n    |               -- lifetime `'a` defined here\n LL |     let _: Ty<'a> = MyTy::Unit;\n    |            ^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:37:6\n+  --> $DIR/normalization-2.rs:38:6\n    |\n LL | fn test_closure_sig<'a, 'b>() {\n    |                     -- lifetime `'a` defined here\n LL |     |_: Ty<'a>| {};\n    |      ^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:39:11\n+  --> $DIR/normalization-2.rs:40:11\n    |\n LL | fn test_closure_sig<'a, 'b>() {\n    |                         -- lifetime `'b` defined here\n@@ -29,37 +29,47 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:44:5\n+  --> $DIR/normalization-2.rs:45:5\n    |\n LL | fn test_path<'a, 'b, 'c, 'd>() {\n    |              -- lifetime `'a` defined here\n LL |     <Ty<'a>>::method::<Ty<'static>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:46:5\n+  --> $DIR/normalization-2.rs:47:5\n    |\n LL | fn test_path<'a, 'b, 'c, 'd>() {\n    |                  -- lifetime `'b` defined here\n ...\n LL |     <Ty<'static>>::method::<Ty<'b>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:50:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd>() {\n+   |                      -- lifetime `'c` defined here\n+...\n+LL |     MyTy::Unit::<Ty<'c>>;\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n+\n help: the following changes may resolve your lifetime errors\n    |\n    = help: replace `'a` with `'static`\n    = help: replace `'b` with `'static`\n+   = help: replace `'c` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:51:5\n+  --> $DIR/normalization-2.rs:55:5\n    |\n LL | fn test_call<'a, 'b, 'c>() {\n    |              -- lifetime `'a` defined here\n LL |     <Ty<'a>>::method::<Ty<'static>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:53:5\n+  --> $DIR/normalization-2.rs:57:5\n    |\n LL | fn test_call<'a, 'b, 'c>() {\n    |                  -- lifetime `'b` defined here\n@@ -73,15 +83,15 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:58:5\n+  --> $DIR/normalization-2.rs:62:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                  -- lifetime `'a` defined here\n-LL |     <Ty<'a>>::Struct {}; //TODO\n+LL |     <Ty<'a>>::Struct {};\n    |     ^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:60:5\n+  --> $DIR/normalization-2.rs:64:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                      -- lifetime `'b` defined here\n@@ -90,7 +100,7 @@ LL |     <Ty<'b>>::Tuple();\n    |     ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:62:5\n+  --> $DIR/normalization-2.rs:66:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                          -- lifetime `'c` defined here\n@@ -105,7 +115,50 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'c` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:69:9\n+  --> $DIR/normalization-2.rs:88:5\n+   |\n+LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n+   |                     -- lifetime `'a` defined here\n+...\n+LL |     MyTy::<Ty<'a>>::Struct {}; // without SelfTy\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:90:5\n+   |\n+LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n+   |                         -- lifetime `'b` defined here\n+...\n+LL |     <Ty<'b> as Project>::Enum::Struct {}; // with SelfTy\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:94:5\n+   |\n+LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n+   |                             -- lifetime `'c` defined here\n+...\n+LL |     Struct::<Ty<'c>> { x: None, }; // without SelfTy\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:96:5\n+   |\n+LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n+   |                                 -- lifetime `'d` defined here\n+...\n+LL |     <Ty<'d> as Project>::Struct { x: None, }; // with SelfTy\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'d` must outlive `'static`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+   = help: replace `'b` with `'static`\n+   = help: replace `'c` with `'static`\n+   = help: replace `'d` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:103:9\n    |\n LL | fn test_pattern<'a, 'b, 'c>() {\n    |                 -- lifetime `'a` defined here\n@@ -114,7 +167,7 @@ LL |         Struct::<Ty<'a>> {..} => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:71:9\n+  --> $DIR/normalization-2.rs:105:9\n    |\n LL | fn test_pattern<'a, 'b, 'c>() {\n    |                     -- lifetime `'b` defined here\n@@ -123,7 +176,7 @@ LL |         Tuple::<Ty<'b>> (..) => {},\n    |         ^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:73:9\n+  --> $DIR/normalization-2.rs:107:9\n    |\n LL | fn test_pattern<'a, 'b, 'c>() {\n    |                         -- lifetime `'c` defined here\n@@ -137,5 +190,5 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n    = help: replace `'c` with `'static`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 18 previous errors\n "}]}