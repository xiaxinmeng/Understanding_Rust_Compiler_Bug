{"sha": "ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjVkNzNkZWM4YjdkZTJiYjVhMWJiOGJlN2RlNTlmYTE4NjMwMDU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-05T16:11:08Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-05T16:11:08Z"}, "message": "Properly handle `Self` type for `trivially_copy_pass_by_ref`", "tree": {"sha": "b09f56aa0ea7482a3fdbd1f8f47d12d2af8c0654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09f56aa0ea7482a3fdbd1f8f47d12d2af8c0654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "html_url": "https://github.com/rust-lang/rust/commit/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbf0c138de34d7805b9291705f2e2361324f219", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbf0c138de34d7805b9291705f2e2361324f219", "html_url": "https://github.com/rust-lang/rust/commit/2dbf0c138de34d7805b9291705f2e2361324f219"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "291e57aabe80f7c9c934f0ba27cc811338d0331f", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "patch": "@@ -2,9 +2,9 @@ use std::cmp;\n use std::iter;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_self_ty;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_copy;\n+use clippy_utils::{is_self, is_self_ty};\n use if_chain::if_chain;\n use rustc_ast::attr;\n use rustc_errors::Applicability;\n@@ -170,7 +170,7 @@ impl<'tcx> PassByRefOrValue {\n                         if size <= self.ref_min_size;\n                         if let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind;\n                         then {\n-                            let value_type = if is_self_ty(decl_ty) {\n+                            let value_type = if fn_body.and_then(|body| body.params.get(index)).map_or(false, is_self) {\n                                 \"self\".into()\n                             } else {\n                                 snippet(cx, decl_ty.span, \"_\").into()"}, {"sha": "1a0123803a3ee9f482baf3d7141630a143d766fc", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "patch": "@@ -58,6 +58,8 @@ impl Foo {\n     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n \n     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n+\n+    fn bad_issue7518(self, other: &Self) {}\n }\n \n impl AsRef<u32> for Foo {"}, {"sha": "9c4c49ceac476f5f31ab13e24bef29d696ba3dc8", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=ccb5d73dec8b7de2bb5a1bb8be7de59fa1863005", "patch": "@@ -65,40 +65,46 @@ LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:62:35\n+   |\n+LL |     fn bad_issue7518(self, other: &Self) {}\n+   |                                   ^^^^^ help: consider passing by value instead: `Self`\n+\n+error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:78:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:108:21\n+  --> $DIR/trivially_copy_pass_by_ref.rs:110:21\n    |\n LL |     fn foo_never(x: &i32) {\n    |                     ^^^^ help: consider passing by value instead: `i32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:113:15\n+  --> $DIR/trivially_copy_pass_by_ref.rs:115:15\n    |\n LL |     fn foo(x: &i32) {\n    |               ^^^^ help: consider passing by value instead: `i32`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 17 previous errors\n "}]}