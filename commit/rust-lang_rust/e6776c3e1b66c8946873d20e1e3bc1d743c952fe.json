{"sha": "e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Nzc2YzNlMWI2NmM4OTQ2ODczZDIwZTFlM2JjMWQ3NDNjOTUyZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-22T13:23:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-22T13:23:07Z"}, "message": "use more precise name", "tree": {"sha": "d966d440b955cf3aa0258484170048790283b309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d966d440b955cf3aa0258484170048790283b309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "html_url": "https://github.com/rust-lang/rust/commit/e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d7434dde215460fc95916f2703c6925f58dcce", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d7434dde215460fc95916f2703c6925f58dcce", "html_url": "https://github.com/rust-lang/rust/commit/47d7434dde215460fc95916f2703c6925f58dcce"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "05644b6ff5c44ea64ef10e1ab0d5cbd28c9398b9", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "patch": "@@ -15,7 +15,7 @@ mod assist_context;\n #[cfg(test)]\n mod tests;\n pub mod utils;\n-pub mod ast_transform;\n+pub mod path_transform;\n \n use std::str::FromStr;\n "}, {"sha": "6ec318c4cec27d5d911bbf0d133e572b1397cc5b", "filename": "crates/ide_assists/src/path_transform.rs", "status": "renamed", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs?ref=e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "patch": "@@ -1,4 +1,4 @@\n-//! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n+//! See `PathTransform`\n use hir::{HirDisplay, SemanticsScope};\n use ide_db::helpers::mod_path_to_ast;\n use rustc_hash::FxHashMap;\n@@ -7,7 +7,7 @@ use syntax::{\n     ted,\n };\n \n-/// `AstTransform` helps with applying bulk transformations to syntax nodes.\n+/// `PathTransform` substitutes path in SyntaxNodes in bulk.\n ///\n /// This is mostly useful for IDE code generation. If you paste some existing\n /// code into a new context (for example, to add method overrides to an `impl`\n@@ -30,18 +30,13 @@ use syntax::{\n ///   }\n /// }\n /// ```\n-///\n-/// So, a single `AstTransform` describes such function from `SyntaxNode` to\n-/// `SyntaxNode`. Note that the API here is a bit too high-order and high-brow.\n-/// We'd want to somehow express this concept simpler, but so far nobody got to\n-/// simplifying this!\n-pub(crate) struct AstTransform<'a> {\n+pub(crate) struct PathTransform<'a> {\n     pub(crate) subst: (hir::Trait, ast::Impl),\n     pub(crate) target_scope: &'a SemanticsScope<'a>,\n     pub(crate) source_scope: &'a SemanticsScope<'a>,\n }\n \n-impl<'a> AstTransform<'a> {\n+impl<'a> PathTransform<'a> {\n     pub(crate) fn apply(&self, item: ast::AssocItem) {\n         if let Some(ctx) = self.build_ctx() {\n             ctx.apply(item)", "previous_filename": "crates/ide_assists/src/ast_transform.rs"}, {"sha": "30128a24a222ed872edc1554bc212b5931c41ac2", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6776c3e1b66c8946873d20e1e3bc1d743c952fe/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=e6776c3e1b66c8946873d20e1e3bc1d743c952fe", "patch": "@@ -24,7 +24,7 @@ use syntax::{\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext},\n-    ast_transform::AstTransform,\n+    path_transform::PathTransform,\n };\n \n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n@@ -133,7 +133,7 @@ pub fn add_trait_assoc_items_to_impl(\n ) -> (ast::Impl, ast::AssocItem) {\n     let source_scope = sema.scope_for_def(trait_);\n \n-    let transform = AstTransform {\n+    let transform = PathTransform {\n         subst: (trait_, impl_.clone()),\n         source_scope: &source_scope,\n         target_scope: &target_scope,"}]}