{"sha": "4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDdlNzhhMTY1MjRlZDQ4NzhiZmZmYWFmNjBjMzJiYjE4ZDg4YWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T10:02:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T10:28:18Z"}, "message": "use a const to hack around promotion limitations", "tree": {"sha": "fbf72e621143ec1934805855dcd5255353b4a027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf72e621143ec1934805855dcd5255353b4a027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "html_url": "https://github.com/rust-lang/rust/commit/4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "html_url": "https://github.com/rust-lang/rust/commit/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "dbc1f3b47c80dc0dc36da2c46de85c695ad83c37", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "patch": "@@ -85,6 +85,7 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(fundamental)]\n+#![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(nll)]"}, {"sha": "296bb43f9fad4d8ff7b8f65a1004dafe61ffa4e2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "patch": "@@ -653,7 +653,7 @@ macro_rules! uninit_array {\n #[cfg(not(bootstrap))]\n macro_rules! uninit_array {\n     ($t:ty; $size:expr) => (\n-        [MaybeUninit::<$t>::uninit(); $size]\n+        [MaybeUninit::<$t>::UNINIT; $size]\n     );\n }\n "}, {"sha": "9ce89f9669d223f796f59db6dd99b5c3da9b08dc", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b47e78a16524ed4878bfffaaf60c32bb18d88ae/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=4b47e78a16524ed4878bfffaaf60c32bb18d88ae", "patch": "@@ -248,11 +248,18 @@ impl<T> MaybeUninit<T> {\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n-    #[rustc_promotable]\n     pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n+    /// A promotable constant, equivalent to `uninit()`.\n+    #[unstable(\n+        feature = \"internal_uninit_const\",\n+        issue = \"0\",\n+        reason = \"hack to work around promotability\",\n+    )]\n+    pub const UNINIT: Self = Self::uninit();\n+\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,"}]}