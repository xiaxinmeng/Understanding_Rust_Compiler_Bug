{"sha": "c483aab4ae391eb26dae5a17d40c148551a6c674", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODNhYWI0YWUzOTFlYjI2ZGFlNWExN2Q0MGMxNDg1NTFhNmM2NzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T19:34:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T12:18:11Z"}, "message": "librustc: Implement a lint mode for mutable structures; deny by default. r=tjc", "tree": {"sha": "1d040e004822028508963d62c78b6842b18bf444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d040e004822028508963d62c78b6842b18bf444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c483aab4ae391eb26dae5a17d40c148551a6c674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c483aab4ae391eb26dae5a17d40c148551a6c674", "html_url": "https://github.com/rust-lang/rust/commit/c483aab4ae391eb26dae5a17d40c148551a6c674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c483aab4ae391eb26dae5a17d40c148551a6c674/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8ce0d3b5dd5fd371d665258555db54b1656300", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b8ce0d3b5dd5fd371d665258555db54b1656300", "html_url": "https://github.com/rust-lang/rust/commit/9b8ce0d3b5dd5fd371d665258555db54b1656300"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "829651ae9092553b4ece969dcdcfa61e47948fe6", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -51,6 +51,7 @@ Implicitly, all crates behave as if they included the following prologue:\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n #[allow(deprecated_self)];\n+#[allow(deprecated_mutable_fields)];\n \n /* The Prelude. */\n "}, {"sha": "f4c3a1e8d12613062b1ea4590b07fc3274bc67d5", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -80,6 +80,7 @@ pub enum lint {\n     type_limits,\n     default_methods,\n     deprecated_self,\n+    deprecated_mutable_fields,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -254,6 +255,13 @@ pub fn get_lint_dict() -> LintDict {\n             default: warn\n          }),\n \n+        (@~\"deprecated_mutable_fields\",\n+         @LintSpec {\n+            lint: deprecated_mutable_fields,\n+            desc: \"deprecated mutable fields in structures\",\n+            default: deny\n+        }),\n+\n         /* FIXME(#3266)--make liveness warnings lintable\n         (@~\"unused_variable\",\n          @LintSpec {\n@@ -486,6 +494,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n     check_item_deprecated_self(cx, i);\n+    check_item_deprecated_mutable_fields(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -703,6 +712,26 @@ fn check_item_deprecated_self(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n+fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n+    match item.node {\n+        ast::item_struct(struct_def, _) => {\n+            for struct_def.fields.each |field| {\n+                match field.node.kind {\n+                    ast::named_field(_, ast::struct_mutable, _) => {\n+                        cx.sess.span_lint(deprecated_mutable_fields,\n+                                          item.id,\n+                                          item.id,\n+                                          field.span,\n+                                          ~\"mutable fields are deprecated\");\n+                    }\n+                    ast::named_field(*) | ast::unnamed_field => {}\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_item_structural_records(cx: ty::ctxt, it: @ast::item) {\n     let visit = item_stopping_visitor(\n         visit::mk_simple_visitor(@visit::SimpleVisitor {"}, {"sha": "b6d99800aa2a39dce43580c1ced478055b32bed5", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -29,6 +29,7 @@ not required in or otherwise suitable for the core library.\n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n #[allow(deprecated_self)];\n+#[allow(deprecated_mutable_fields)];\n \n #[no_core];\n "}, {"sha": "8a3139157fdf602dc59e9ad40a60d73c82eb1fa2", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { mut z : fn@() }\n+struct foo { z : fn@() }\n \n fn nop() { }\n-fn nop_foo(_y: ~[int], _x : @foo) { }\n+fn nop_foo(_y: ~[int], _x : @mut foo) { }\n \n pub fn main() {\n-    let w = @foo{ z: || nop() };\n+    let w = @mut foo{ z: || nop() };\n     let x : fn@() = || nop_foo(~[], w);\n     w.z = x;\n }"}, {"sha": "95129851d5bcd979281e2ca0337db6b2d05b73cb", "filename": "src/test/run-pass/issue-1989.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1989.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -12,23 +12,22 @@\n \n enum maybe_pointy {\n     none,\n-    p(@Pointy)\n+    p(@mut Pointy)\n }\n \n struct Pointy {\n-    mut a : maybe_pointy,\n-    mut f : fn@()->(),\n+    a : maybe_pointy,\n+    f : fn@()->(),\n }\n \n-fn empty_pointy() -> @Pointy {\n-    return @Pointy{\n-        mut a : none,\n-        mut f : fn@()->(){},\n+fn empty_pointy() -> @mut Pointy {\n+    return @mut Pointy{\n+        a : none,\n+        f : fn@()->(){},\n     }\n }\n \n-pub fn main()\n-{\n+pub fn main() {\n     let v = ~[empty_pointy(), empty_pointy()];\n     v[0].a = p(v[0]);\n }"}, {"sha": "e2e5dfcc7d5195bb4193c1abfc97fa9a17ec8a8c", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -10,14 +10,14 @@\n \n enum maybe_pointy {\n     no_pointy,\n-    yes_pointy(@Pointy),\n+    yes_pointy(@mut Pointy),\n }\n \n struct Pointy {\n-    mut x : maybe_pointy\n+    x : maybe_pointy\n }\n \n pub fn main() {\n-    let m = @Pointy { mut x : no_pointy };\n+    let m = @mut Pointy { x : no_pointy };\n     m.x = yes_pointy(m);\n }"}, {"sha": "432c189ae423c742537d60264217430fa6edc524", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -9,20 +9,20 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  how_hungry : int,\n+    how_hungry : int,\n }\n \n impl cat {\n-  fn play() {\n-    self.meows += 1u;\n-    self.nap();\n-  }\n+    fn play(&mut self) {\n+        self.meows += 1u;\n+        self.nap();\n+    }\n }\n \n priv impl cat {\n-    fn nap() { for uint::range(1u, 10u) |_i| { }}\n+    fn nap(&mut self) { for uint::range(1u, 10u) |_i| { }}\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {\n@@ -33,6 +33,6 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let mut nyan : cat = cat(52u, 99);\n   nyan.play();\n }"}, {"sha": "1b602ab7d3009bb8560d20dfdeb607d20098a38e", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -10,27 +10,26 @@\n \n enum maybe_pointy {\n     none,\n-    p(@Pointy),\n+    p(@mut Pointy),\n }\n \n struct Pointy {\n-    mut a : maybe_pointy,\n+    a : maybe_pointy,\n     d : fn~() -> uint,\n }\n \n fn make_uniq_closure<A:Owned + Copy>(a: A) -> fn~() -> uint {\n     fn~() -> uint { ptr::addr_of(&a) as uint }\n }\n \n-fn empty_pointy() -> @Pointy {\n-    return @Pointy {\n+fn empty_pointy() -> @mut Pointy {\n+    return @mut Pointy {\n         mut a : none,\n         d : make_uniq_closure(~\"hi\")\n     }\n }\n \n-pub fn main()\n-{\n+pub fn main() {\n     let v = empty_pointy();\n     v.a = p(v);\n }"}, {"sha": "3d72a41182868076cf16446004d4c5c7331bbafa", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c483aab4ae391eb26dae5a17d40c148551a6c674/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=c483aab4ae391eb26dae5a17d40c148551a6c674", "patch": "@@ -10,25 +10,24 @@\n \n enum maybe_pointy {\n     none,\n-    p(@Pointy),\n+    p(@mut Pointy),\n }\n \n struct Pointy {\n-    mut a : maybe_pointy,\n+    a : maybe_pointy,\n     c : ~int,\n     d : fn~()->(),\n }\n \n-fn empty_pointy() -> @Pointy {\n-    return @Pointy {\n-        mut a : none,\n+fn empty_pointy() -> @mut Pointy {\n+    return @mut Pointy {\n+        a : none,\n         c : ~22,\n         d : fn~()->(){},\n     }\n }\n \n-pub fn main()\n-{\n+pub fn main() {\n     let v = empty_pointy();\n     v.a = p(v);\n }"}]}