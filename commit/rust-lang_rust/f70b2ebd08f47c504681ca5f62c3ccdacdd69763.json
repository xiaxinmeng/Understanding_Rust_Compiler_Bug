{"sha": "f70b2ebd08f47c504681ca5f62c3ccdacdd69763", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MGIyZWJkMDhmNDdjNTA0NjgxY2E1ZjYyYzNjY2RhY2RkNjk3NjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-07T06:19:34Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-30T17:45:18Z"}, "message": "new() should be const; start()/end() after iteration is unspecified.", "tree": {"sha": "a1ce839f43851b7d203c61a8e2487a879a616fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ce839f43851b7d203c61a8e2487a879a616fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f70b2ebd08f47c504681ca5f62c3ccdacdd69763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrnVi4ACgkQ/vbIBR0O\nATxkxhAAtNQYrhS5+B41VTzTRV7n09HZ4WqwBcNUntJzK4W1bPWng3mZaJZQbkDe\nxP7IVqOVY+hDS1df6ZfIShsVAOjFLdAxH7ProKzRKDXMu5rGZB8cb5YCGuIoEzYo\nF+LHcEuz5N3b+/Kri8Djgbhx7CztjncmKlWenCc1zGvduq0E/hUUbtPxh9n0iv/o\nw6kfYZqZUtkQxNj0qVPy91GvGeUFKkp39yhXEZfdcM5yvNRy+STmxdZPRHha9ewC\nGmn4wFgkdSjaPU0C9C/Hi0VWde5PQuHcaHGq0mo2MAzsnrcyoVytY55Kjl+AFce2\nK3bGPmO3tm0T/joRshyJS39VoxD9wb9Od14/hQY7xDKpJ7jjyPNaHceCeiiexTt4\npHj0bQ3jpbSVT/Y6hlJFrY4B1Pd59mnmMFMk4iyWuq3+V44NLZ9GLmPm3h+j95BL\ncYhFPso5Yl6eAXV4F+ns5hZQze4XOKvZRIMeJIrdMeuGJH1bkf6PN9d9mRMezdX0\nWzParBALyoG7JuqQqhlp9SeOCTXLIe6PnWimFZOjlOjWONnMs6kZTQ31tppCFcNl\nK86iOUl7zjiEQUTFnz8v2AmQwPyb44d9ojudRg8uGKOMROABxT6p33e+XXlH4WA3\niez9yCZtiZrPbVXBts7wze813mxkIQByUa7ObCFpnXn7RrWwDzU=\n=jczP\n-----END PGP SIGNATURE-----", "payload": "tree a1ce839f43851b7d203c61a8e2487a879a616fc5\nparent c916ee8511339dd231d90d7fe6be2cc6995284b9\nauthor kennytm <kennytm@gmail.com> 1523081974 +0800\ncommitter kennytm <kennytm@gmail.com> 1525110318 +0800\n\nnew() should be const; start()/end() after iteration is unspecified.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f70b2ebd08f47c504681ca5f62c3ccdacdd69763", "html_url": "https://github.com/rust-lang/rust/commit/f70b2ebd08f47c504681ca5f62c3ccdacdd69763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f70b2ebd08f47c504681ca5f62c3ccdacdd69763/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c916ee8511339dd231d90d7fe6be2cc6995284b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c916ee8511339dd231d90d7fe6be2cc6995284b9", "html_url": "https://github.com/rust-lang/rust/commit/c916ee8511339dd231d90d7fe6be2cc6995284b9"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "b01a769eda7fd4201e7239003425d93cbb26e937", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f70b2ebd08f47c504681ca5f62c3ccdacdd69763/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70b2ebd08f47c504681ca5f62c3ccdacdd69763/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=f70b2ebd08f47c504681ca5f62c3ccdacdd69763", "patch": "@@ -362,12 +362,20 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n     #[inline]\n-    pub fn new(start: Idx, end: Idx) -> Self {\n+    pub const fn new(start: Idx, end: Idx) -> Self {\n         Self { start, end }\n     }\n \n     /// Returns the lower bound of the range (inclusive).\n     ///\n+    /// When using an inclusive range for iteration, the values of `start()` and\n+    /// [`end()`] are unspecified after the iteration ended. To determine\n+    /// whether the inclusive range is empty, use the [`is_empty()`] method\n+    /// instead of comparing `start() > end()`.\n+    ///\n+    /// [`end()`]: #method.end\n+    /// [`is_empty()`]: #method.is_empty\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -383,6 +391,14 @@ impl<Idx> RangeInclusive<Idx> {\n \n     /// Returns the upper bound of the range (inclusive).\n     ///\n+    /// When using an inclusive range for iteration, the values of [`start()`]\n+    /// and `end()` are unspecified after the iteration ended. To determine\n+    /// whether the inclusive range is empty, use the [`is_empty()`] method\n+    /// instead of comparing `start() > end()`.\n+    ///\n+    /// [`start()`]: #method.start\n+    /// [`is_empty()`]: #method.is_empty\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}