{"sha": "87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZDVmZTBlNTM2MWRmOWYwZTE5OGRhZDgwN2M4MjAxYjZjYjRlYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T10:53:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-11T17:46:16Z"}, "message": "is_fp and is_floating_point do the same thing, remove the former\n\nalso consistently mark all these is_* methods for inlining", "tree": {"sha": "a7cc61dc29303d92d9709349fe70b222bcc09800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cc61dc29303d92d9709349fe70b222bcc09800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "html_url": "https://github.com/rust-lang/rust/commit/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "html_url": "https://github.com/rust-lang/rust/commit/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "6a1f603f22206181a6f5e20e1b4f935619309fc5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "patch": "@@ -1665,13 +1665,15 @@ impl RegionKind {\n \n /// Type utilities\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n+    #[inline]\n     pub fn is_unit(&self) -> bool {\n         match self.sty {\n             Tuple(ref tys) => tys.is_empty(),\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_never(&self) -> bool {\n         match self.sty {\n             Never => true,\n@@ -1726,6 +1728,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_primitive(&self) -> bool {\n         match self.sty {\n             Bool | Char | Int(_) | Uint(_) | Float(_) => true,\n@@ -1741,13 +1744,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_ty_infer(&self) -> bool {\n         match self.sty {\n             Infer(_) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_phantom_data(&self) -> bool {\n         if let Adt(def, _) = self.sty {\n             def.is_phantom_data()\n@@ -1756,22 +1761,26 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_bool(&self) -> bool { self.sty == Bool }\n \n+    #[inline]\n     pub fn is_param(&self, index: u32) -> bool {\n         match self.sty {\n             ty::Param(ref data) => data.index == index,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_self(&self) -> bool {\n         match self.sty {\n             Param(ref p) => p.is_self(),\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_slice(&self) -> bool {\n         match self.sty {\n             RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => match ty.sty {\n@@ -1814,13 +1823,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_region_ptr(&self) -> bool {\n         match self.sty {\n             Ref(..) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_mutable_pointer(&self) -> bool {\n         match self.sty {\n             RawPtr(TypeAndMut { mutbl: hir::Mutability::MutMutable, .. }) |\n@@ -1829,6 +1840,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_unsafe_ptr(&self) -> bool {\n         match self.sty {\n             RawPtr(_) => return true,\n@@ -1837,6 +1849,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n \n     /// Returns `true` if this type is an `Arc<T>`.\n+    #[inline]\n     pub fn is_arc(&self) -> bool {\n         match self.sty {\n             Adt(def, _) => def.is_arc(),\n@@ -1845,13 +1858,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n \n     /// Returns `true` if this type is an `Rc<T>`.\n+    #[inline]\n     pub fn is_rc(&self) -> bool {\n         match self.sty {\n             Adt(def, _) => def.is_rc(),\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_box(&self) -> bool {\n         match self.sty {\n             Adt(def, _) => def.is_box(),\n@@ -1870,6 +1885,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     /// A scalar type is one that denotes an atomic datum, with no sub-components.\n     /// (A RawPtr is scalar because it represents a non-managed pointer, so its\n     /// contents are abstract to rustc.)\n+    #[inline]\n     pub fn is_scalar(&self) -> bool {\n         match self.sty {\n             Bool | Char | Int(_) | Float(_) | Uint(_) |\n@@ -1880,6 +1896,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n \n     /// Returns `true` if this type is a floating point type.\n+    #[inline]\n     pub fn is_floating_point(&self) -> bool {\n         match self.sty {\n             Float(_) |\n@@ -1888,13 +1905,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_trait(&self) -> bool {\n         match self.sty {\n             Dynamic(..) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_enum(&self) -> bool {\n         match self.sty {\n             Adt(adt_def, _) => {\n@@ -1904,13 +1923,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_closure(&self) -> bool {\n         match self.sty {\n             Closure(..) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_generator(&self) -> bool {\n         match self.sty {\n             Generator(..) => true,\n@@ -1926,13 +1947,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_fresh_ty(&self) -> bool {\n         match self.sty {\n             Infer(FreshTy(_)) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_fresh(&self) -> bool {\n         match self.sty {\n             Infer(FreshTy(_)) => true,\n@@ -1942,6 +1965,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_char(&self) -> bool {\n         match self.sty {\n             Char => true,\n@@ -1950,38 +1974,35 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n \n     #[inline]\n-    pub fn is_fp(&self) -> bool {\n-        match self.sty {\n-            Infer(FloatVar(_)) | Float(_) => true,\n-            _ => false\n-        }\n-    }\n-\n     pub fn is_numeric(&self) -> bool {\n-        self.is_integral() || self.is_fp()\n+        self.is_integral() || self.is_floating_point()\n     }\n \n+    #[inline]\n     pub fn is_signed(&self) -> bool {\n         match self.sty {\n             Int(_) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_pointer_sized(&self) -> bool {\n         match self.sty {\n             Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n             Int(..) | Uint(..) | Float(..) => true,\n             _ => false,\n         }\n     }\n \n+    #[inline]\n     pub fn has_concrete_skeleton(&self) -> bool {\n         match self.sty {\n             Param(_) | Infer(_) | Error => false,\n@@ -2028,6 +2049,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_fn(&self) -> bool {\n         match self.sty {\n             FnDef(..) | FnPtr(_) => true,\n@@ -2043,6 +2065,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_impl_trait(&self) -> bool {\n         match self.sty {\n             Opaque(..) => true,"}, {"sha": "87e15ba6aac5e414e7d519a3f7e7d905fb9599de", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::UnaryOp(op, ref operand) => {\n                 let operand = self.codegen_operand(&mut bx, operand);\n                 let lloperand = operand.immediate();\n-                let is_float = operand.layout.ty.is_fp();\n+                let is_float = operand.layout.ty.is_floating_point();\n                 let llval = match op {\n                     mir::UnOp::Not => bx.not(lloperand),\n                     mir::UnOp::Neg => if is_float {\n@@ -536,7 +536,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         rhs: Bx::Value,\n         input_ty: Ty<'tcx>,\n     ) -> Bx::Value {\n-        let is_float = input_ty.is_fp();\n+        let is_float = input_ty.is_floating_point();\n         let is_signed = input_ty.is_signed();\n         let is_unit = input_ty.is_unit();\n         match op {"}, {"sha": "7f4234c5f262e87c146abc98f7879c3894f00990", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d5fe0e5361df9f0e198dad807c8201b6cb4ea3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=87d5fe0e5361df9f0e198dad807c8201b6cb4ea3", "patch": "@@ -4089,7 +4089,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         hir::UnNeg => {\n                             let result = self.check_user_unop(expr, oprnd_t, unop);\n                             // If it's builtin, we can reuse the type, this helps inference.\n-                            if !(oprnd_t.is_integral() || oprnd_t.is_fp()) {\n+                            if !oprnd_t.is_numeric() {\n                                 oprnd_t = result;\n                             }\n                         }"}]}