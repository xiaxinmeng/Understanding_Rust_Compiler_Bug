{"sha": "af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMTAxZmRjMzMxYjZmNjA3ZWQ2NDVkODZhMGYxMmJjN2EyY2JjNWM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-23T14:29:01Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-22T19:01:21Z"}, "message": "address Mark-Simulacrum comments", "tree": {"sha": "790c876f988f40f955618720ba1e68c17cf1ab02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790c876f988f40f955618720ba1e68c17cf1ab02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "html_url": "https://github.com/rust-lang/rust/commit/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d011a98668cf672db2de8aae42f3654df4787f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d011a98668cf672db2de8aae42f3654df4787f", "html_url": "https://github.com/rust-lang/rust/commit/a6d011a98668cf672db2de8aae42f3654df4787f"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "6312aa439d20f9075f9a5ca98b9fb01010ff75f9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "patch": "@@ -145,7 +145,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     let mut tmp = MaybeUninit::<T>::uninitialized();\n \n     // Perform the swap\n-    copy_nonoverlapping(x, tmp.get_mut(), 1);\n+    copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);\n     copy(y, x, 1); // `x` and `y` may overlap\n     copy_nonoverlapping(tmp.get_ref(), y, 1);\n }\n@@ -293,7 +293,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninitialized();\n-    copy_nonoverlapping(src, tmp.get_mut(), 1);\n+    copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n     tmp.into_inner()\n }\n "}, {"sha": "07153735300b89ccc376e472aac7f0bcbfb51f80", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "patch": "@@ -26,9 +26,6 @@ union RawArray<T> {\n }\n \n impl<T> RawArray<T> {\n-    fn ptr(&self) -> *mut T {\n-        unsafe { &self.typed as *const T as *mut T }\n-    }\n     fn cap() -> usize {\n         if mem::size_of::<T>() == 0 {\n             usize::max_value()\n@@ -85,8 +82,8 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n         }\n     }\n \n-    let rawarray = MaybeUninit::<RawArray<T>>::uninitialized();\n-    let buf = rawarray.get_ref().ptr();\n+    let mut rawarray = MaybeUninit::<RawArray<T>>::uninitialized();\n+    let buf = &mut (*rawarray.as_mut_ptr()).typed as *mut [T; 2] as *mut T;\n \n     let dim = mid.sub(left).add(right);\n     if left <= right {"}, {"sha": "affe84fbef91f2e6908385556b1e3b8d0d90c2dd", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af101fdc331b6f607ed645d86a0f12bc7a2cbc5c/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=af101fdc331b6f607ed645d86a0f12bc7a2cbc5c", "patch": "@@ -272,8 +272,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = unsafe { offsets_l.get_mut().as_mut_ptr() };\n-            end_l = unsafe { offsets_l.get_mut().as_mut_ptr() };\n+            start_l = offsets_l.as_mut_ptr() as *mut u8;\n+            end_l = offsets_l.as_mut_ptr() as *mut u8;\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -288,8 +288,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = unsafe { offsets_r.get_mut().as_mut_ptr() };\n-            end_r = unsafe {  offsets_r.get_mut().as_mut_ptr() };\n+            start_r = offsets_r.as_mut_ptr() as *mut u8;\n+            end_r = offsets_r.as_mut_ptr() as *mut u8;\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}