{"sha": "3806bad6cf4f21bf9cf2085407384728bb71d673", "node_id": "C_kwDOAAsO6NoAKDM4MDZiYWQ2Y2Y0ZjIxYmY5Y2YyMDg1NDA3Mzg0NzI4YmI3MWQ2NzM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-01T05:44:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-02T03:07:30Z"}, "message": "Simplify `place_inlined_mono_items`.\n\nCurrently it overwrites all the CGUs with new CGUs. But those new CGUs\nare just copies of the old CGUs, possibly with some things added. This\ncommit changes things so that each CGU just gets added to in place,\nwhich makes things simpler and clearer.", "tree": {"sha": "5f3d58f579544d06efb8a648be899905b89471e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3d58f579544d06efb8a648be899905b89471e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3806bad6cf4f21bf9cf2085407384728bb71d673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3806bad6cf4f21bf9cf2085407384728bb71d673", "html_url": "https://github.com/rust-lang/rust/commit/3806bad6cf4f21bf9cf2085407384728bb71d673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3806bad6cf4f21bf9cf2085407384728bb71d673/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1fe797ee2b4f1e9d47eb468212b742960dafb87", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fe797ee2b4f1e9d47eb468212b742960dafb87", "html_url": "https://github.com/rust-lang/rust/commit/f1fe797ee2b4f1e9d47eb468212b742960dafb87"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "d22031e25d6f13c0f5cc91d75e643ebd85222409", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3806bad6cf4f21bf9cf2085407384728bb71d673/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3806bad6cf4f21bf9cf2085407384728bb71d673/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=3806bad6cf4f21bf9cf2085407384728bb71d673", "patch": "@@ -422,33 +422,22 @@ fn place_inlined_mono_items<'tcx>(\n \n     let single_codegen_unit = codegen_units.len() == 1;\n \n-    for old_codegen_unit in codegen_units.iter_mut() {\n+    for cgu in codegen_units.iter_mut() {\n         // Collect all items that need to be available in this codegen unit.\n         let mut reachable = FxHashSet::default();\n-        for root in old_codegen_unit.items().keys() {\n+        for root in cgu.items().keys() {\n             follow_inlining(cx.tcx, *root, cx.usage_map, &mut reachable);\n         }\n \n-        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name());\n-\n         // Add all monomorphizations that are not already there.\n         for mono_item in reachable {\n-            if let Some(linkage) = old_codegen_unit.items().get(&mono_item) {\n-                // This is a root, just copy it over.\n-                new_codegen_unit.items_mut().insert(mono_item, *linkage);\n-            } else {\n+            if !cgu.items().contains_key(&mono_item) {\n                 if roots.contains(&mono_item) {\n-                    bug!(\n-                        \"GloballyShared mono-item inlined into other CGU: \\\n-                          {:?}\",\n-                        mono_item\n-                    );\n+                    bug!(\"GloballyShared mono-item inlined into other CGU: {:?}\", mono_item);\n                 }\n \n                 // This is a CGU-private copy.\n-                new_codegen_unit\n-                    .items_mut()\n-                    .insert(mono_item, (Linkage::Internal, Visibility::Default));\n+                cgu.items_mut().insert(mono_item, (Linkage::Internal, Visibility::Default));\n             }\n \n             if !single_codegen_unit {\n@@ -458,23 +447,17 @@ fn place_inlined_mono_items<'tcx>(\n                     Entry::Occupied(e) => {\n                         let placement = e.into_mut();\n                         debug_assert!(match *placement {\n-                            MonoItemPlacement::SingleCgu { cgu_name } => {\n-                                cgu_name != new_codegen_unit.name()\n-                            }\n+                            MonoItemPlacement::SingleCgu { cgu_name } => cgu_name != cgu.name(),\n                             MonoItemPlacement::MultipleCgus => true,\n                         });\n                         *placement = MonoItemPlacement::MultipleCgus;\n                     }\n                     Entry::Vacant(e) => {\n-                        e.insert(MonoItemPlacement::SingleCgu {\n-                            cgu_name: new_codegen_unit.name(),\n-                        });\n+                        e.insert(MonoItemPlacement::SingleCgu { cgu_name: cgu.name() });\n                     }\n                 }\n             }\n         }\n-\n-        *old_codegen_unit = new_codegen_unit;\n     }\n \n     return mono_item_placements;"}]}