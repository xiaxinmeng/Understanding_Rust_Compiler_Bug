{"sha": "ea16e582eb253460b951cb14514a330d84c9a3ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTZlNTgyZWIyNTM0NjBiOTUxY2IxNDUxNGEzMzBkODRjOWEzY2E=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-05-27T01:17:13Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-05-27T19:01:20Z"}, "message": "Remove parser support for recv as an initializer in preparation for changing the recv syntax.", "tree": {"sha": "7fb6462eddf56b4304c784b654de67b6f7a56333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb6462eddf56b4304c784b654de67b6f7a56333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea16e582eb253460b951cb14514a330d84c9a3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea16e582eb253460b951cb14514a330d84c9a3ca", "html_url": "https://github.com/rust-lang/rust/commit/ea16e582eb253460b951cb14514a330d84c9a3ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea16e582eb253460b951cb14514a330d84c9a3ca/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b40e6894e2adb743080e23c87a257c12801078", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b40e6894e2adb743080e23c87a257c12801078", "html_url": "https://github.com/rust-lang/rust/commit/55b40e6894e2adb743080e23c87a257c12801078"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "5b6f42ea945f7fb1d3ab82d0efe868e694562a74", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -1442,11 +1442,13 @@ fn parse_initializer(&parser p) -> option::t[ast::initializer] {\n             ret some(rec(op = ast::init_assign,\n                          expr = parse_expr(p)));\n         }\n-        case (token::LARROW) {\n-            p.bump();\n-            ret some(rec(op = ast::init_recv,\n-                         expr = parse_expr(p)));\n-        }\n+        // Now that the the channel is the first argument to receive,\n+        // combining it with an initializer doesn't really make sense.\n+        // case (token::RECV) {\n+        //     p.bump();\n+        //     ret some(rec(op = ast::init_recv,\n+        //                  expr = parse_expr(p)));\n+        // }\n         case (_) {\n             ret none[ast::initializer];\n         }"}, {"sha": "8b41e5f5a46c3db6677eda2abba4a93b47e7adbb", "filename": "src/test/run-fail/trivial-message2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let port[int] po = port();\n     let chan[int] ch = chan(po);\n \n-    auto r <- po;\n+    auto r; r <- po;\n \n     ch <| 42;\n "}, {"sha": "923024251b19c06ecc6880f121a64ab04e8256d4", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -5,10 +5,10 @@ fn main() {\n   let chan[int] ch = chan(po);\n \n   ch <| 10;\n-  let int i <- po;\n+  let int i; i <- po;\n   assert (i == 10);\n \n   ch <| 11;\n-  auto j <- po;\n+  auto j; j <- po;\n   assert (j == 11);\n }"}, {"sha": "23c4737307cd9ccd217b39e268203df03b2c3515", "filename": "src/test/run-pass/destructor-ordering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fdestructor-ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fdestructor-ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructor-ordering.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -24,7 +24,8 @@ type order_info = rec(int order, str msg);\n io fn check_order(port[order_info] expected_p) {\n   chan(expected_p) <| rec(order=-1, msg=\"\");\n   let mutable int actual = 0;\n-  auto expected <- expected_p;  // FIXME #121: Workaround for while(true) bug.\n+  // FIXME #121: Workaround for while(true) bug.\n+  auto expected; expected <- expected_p;\n   auto done = -1;  // FIXME: Workaround for typechecking bug.\n   while(expected.order != done) {\n     if (expected.order != actual) {"}, {"sha": "e4e5dbd062e7544a18a29ae2748dde4c16575c28", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -9,7 +9,7 @@ fn sub(chan[int] parent, int id) {\n   } else {\n     let port[int] p = port();\n     auto child = spawn sub(chan(p), id-1);\n-    let int y <- p;\n+    let int y; y <- p;\n     parent <| y + 1;\n   }\n }"}, {"sha": "19705d2a60effb3b1dc3e19815c23e6685c6c729", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -44,7 +44,7 @@ fn test_shrink1() {\n     auto mychan = chan(myport);\n \n     mychan <| 0i8;\n-    auto x <- myport;\n+    auto x; x <- myport;\n }\n \n fn test_shrink2() {\n@@ -58,7 +58,7 @@ fn test_shrink2() {\n     }\n \n     for each (uint i in uint::range(0u, 100u)) {\n-        auto x <- myport;\n+        auto x; x <- myport;\n     }\n }\n \n@@ -73,7 +73,7 @@ fn test_rotate() {\n                        val3=i as u32);\n         mychan <| val;\n \n-        auto x <- myport;\n+        auto x; x <- myport;\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n@@ -95,7 +95,7 @@ fn test_rotate_grow() {\n         }\n \n         for each (uint i in uint::range(0u, 10u)) {\n-            auto x <- myport;\n+            auto x; x <- myport;\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);"}, {"sha": "5046e145cbc7baeb2e79f2e040d33aa9e888cacb", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -15,7 +15,7 @@ fn test05() {\n     let port[int] po = port();\n     let chan[int] ch = chan(po);\n     spawn test05_start(chan(po));\n-    let int value <- po;\n+    let int value; value <- po;\n     value <- po;\n     value <- po;\n     assert (value == 30);"}, {"sha": "47506999feab6bf15ad3db862af6801458093f71", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -4,15 +4,15 @@\n fn start(chan[chan[str]] c) {\n     let port[str] p = port();\n     c <| chan(p);\n-    auto a <- p;\n-    // auto b <- p; // Never read the second string.\n+    auto a; a <- p;\n+    // auto b; b <- p; // Never read the second string.\n }\n \n fn main() {\n     let port[chan[str]] p = port();\n     auto child = spawn \"start\" start(chan(p));\n-    auto c <- p;\n+    auto c; c <- p;\n     c <| \"A\";\n     c <| \"B\";\n     yield;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "24c6837b02c5ab1081194adb725d186ddce4ba49", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -9,5 +9,5 @@ fn start(chan[chan[str]] c) {\n fn main() {\n     let port[chan[str]] p = port();\n     auto child = spawn \"child\" start(chan(p));\n-    auto c <- p;\n-}\n\\ No newline at end of file\n+    auto c; c <- p;\n+}"}, {"sha": "9e23108006c0620d838a6fecb2d33f22d6f1fe64", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     auto child = spawn thread \"child\" start(chan(p), 10);\n-    auto c <- p;\n-}\n\\ No newline at end of file\n+    auto c; c <- p;\n+}"}, {"sha": "374c598f473eed466780f6443e7294c92d9d1613", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -47,7 +47,7 @@ fn test00(bool is_multithreaded) {\n     for (task t in tasks) {\n         i = 0;\n         while (i < number_of_messages) {\n-            let int value <- po;\n+            let int value; value <- po;\n             sum += value;\n             i = i + 1;\n         }"}, {"sha": "6c51aba306a6efc9e82c63e8a281e606b0c49e37", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -48,7 +48,7 @@ fn test00(bool is_multithreaded) {\n     for (task t in tasks) {\n         i = 0;\n         while (i < number_of_messages) {\n-            let int value <- po;\n+            let int value; value <- po;\n             sum += value;\n             i = i + 1;\n         }\n@@ -66,7 +66,7 @@ fn test00(bool is_multithreaded) {\n fn test01() {\n     let port[int] p = port();\n     log \"Reading from a port that is never written to.\";\n-    let int value <- p;\n+    let int value; value <- p;\n     log value;\n }\n \n@@ -76,7 +76,7 @@ fn test02() {\n     log \"Writing to a local task channel.\";\n     c <| 42;\n     log \"Reading from a local task port.\";\n-    let int value <- p;\n+    let int value; value <- p;\n     log value;\n }\n \n@@ -126,7 +126,7 @@ fn test05() {\n     let port[int] po = port();\n     let chan[int] ch = chan(po);\n     spawn thread test05_start(ch);\n-    let int value <- po;\n+    let int value; value <- po;\n     value <- po;\n     value <- po;\n     log value;"}, {"sha": "5391f919d01cdaf3a5696dca97a3cbaf12e2f614", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16e582eb253460b951cb14514a330d84c9a3ca/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=ea16e582eb253460b951cb14514a330d84c9a3ca", "patch": "@@ -9,7 +9,7 @@ fn main() {\n \n     ch <| 42;\n \n-    auto r <- po;\n+    auto r; r <- po;\n \n     log_err r;\n }"}]}