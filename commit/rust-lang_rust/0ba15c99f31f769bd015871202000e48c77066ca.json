{"sha": "0ba15c99f31f769bd015871202000e48c77066ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTE1Yzk5ZjMxZjc2OWJkMDE1ODcxMjAyMDAwZTQ4Yzc3MDY2Y2E=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T19:19:15Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T20:20:14Z"}, "message": "hygiene for item fn args\n\nalso, introduce fn_decl_arg_bindings and expand_and_rename abstractions", "tree": {"sha": "8347686222fbf2e37350bc52e9b88454d0335b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8347686222fbf2e37350bc52e9b88454d0335b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba15c99f31f769bd015871202000e48c77066ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba15c99f31f769bd015871202000e48c77066ca", "html_url": "https://github.com/rust-lang/rust/commit/0ba15c99f31f769bd015871202000e48c77066ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba15c99f31f769bd015871202000e48c77066ca/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92708322fd19747100ff5eda2e4584bc9d1f2b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/92708322fd19747100ff5eda2e4584bc9d1f2b38", "html_url": "https://github.com/rust-lang/rust/commit/92708322fd19747100ff5eda2e4584bc9d1f2b38"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "c472f293f92cd0800884918534318d39f3d72a95", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0ba15c99f31f769bd015871202000e48c77066ca/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba15c99f31f769bd015871202000e48c77066ca/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0ba15c99f31f769bd015871202000e48c77066ca", "patch": "@@ -386,6 +386,19 @@ fn expand_item_modifiers(mut it: Gc<ast::Item>, fld: &mut MacroExpander)\n     expand_item_modifiers(it, fld)\n }\n \n+/// Expand item_underscore\n+fn expand_item_underscore(item: &ast::Item_, fld: &mut MacroExpander) -> ast::Item_ {\n+    match *item {\n+        ast::ItemFn(decl, fn_style, abi, ref generics, body) => {\n+            let (rewritten_fn_decl, rewritten_body)\n+                = expand_and_rename_fn_decl_and_block(decl,body,fld);\n+            let expanded_generics = fold::fold_generics(generics,fld);\n+            ast::ItemFn(rewritten_fn_decl, fn_style, abi, expanded_generics, rewritten_body)\n+        }\n+        _ => noop_fold_item_underscore(&*item, fld)\n+    }\n+}\n+\n // does this attribute list contain \"macro_escape\" ?\n fn contains_macro_escape(attrs: &[ast::Attribute]) -> bool {\n     attr::contains_name(attrs, \"macro_escape\")\n@@ -656,6 +669,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n     }\n }\n \n+// expand the arm of a 'match', renaming for macro hygiene\n fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n     // expand pats... they might contain macro uses:\n     let expanded_pats : Vec<Gc<ast::Pat>> = arm.pats.iter().map(|pat| fld.fold_pat(*pat)).collect();\n@@ -665,17 +679,15 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n     // all of the pats must have the same set of bindings, so use the\n     // first one to extract them and generate new names:\n     let first_pat = expanded_pats.get(0);\n-    // code duplicated from 'let', above. Perhaps this can be lifted\n-    // into a separate function:\n     let idents = pattern_bindings(*first_pat);\n-    let new_pending_renames =\n+    let new_renames =\n         idents.iter().map(|id| (*id,fresh_name(id))).collect();\n     // apply the renaming, but only to the PatIdents:\n-    let mut rename_pats_fld = PatIdentRenamer{renames:&new_pending_renames};\n+    let mut rename_pats_fld = PatIdentRenamer{renames:&new_renames};\n     let rewritten_pats =\n         expanded_pats.iter().map(|pat| rename_pats_fld.fold_pat(*pat)).collect();\n     // apply renaming and then expansion to the guard and the body:\n-    let mut rename_fld = IdentRenamer{renames:&new_pending_renames};\n+    let mut rename_fld = IdentRenamer{renames:&new_renames};\n     let rewritten_guard =\n         arm.guard.map(|g| fld.fold_expr(rename_fld.fold_expr(g)));\n     let rewritten_body = fld.fold_expr(rename_fld.fold_expr(arm.body));\n@@ -687,8 +699,6 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n     }\n }\n \n-\n-\n /// A visitor that extracts the PatIdent (binding) paths\n /// from a given thingy and puts them in a mutable\n /// array\n@@ -721,6 +731,15 @@ fn pattern_bindings(pat : &ast::Pat) -> Vec<ast::Ident> {\n     name_finder.ident_accumulator\n }\n \n+/// find the PatIdent paths in a\n+fn fn_decl_arg_bindings(fn_decl: &ast::FnDecl) -> Vec<ast::Ident> {\n+    let mut pat_idents = PatIdentFinder{ident_accumulator:Vec::new()};\n+    for arg in fn_decl.inputs.iter() {\n+        pat_idents.visit_pat(arg.pat,());\n+    }\n+    pat_idents.ident_accumulator\n+}\n+\n // expand a block. pushes a new exts_frame, then calls expand_block_elts\n fn expand_block(blk: &Block, fld: &mut MacroExpander) -> P<Block> {\n     // see note below about treatment of exts table\n@@ -882,6 +901,25 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n     }\n }\n \n+/// Given a fn_decl and a block and a MacroExpander, expand the fn_decl, then use the\n+/// PatIdents in its arguments to perform renaming in the FnDecl and\n+/// the block, returning both the new FnDecl and the new Block.\n+fn expand_and_rename_fn_decl_and_block(fn_decl: &ast::FnDecl, block: Gc<ast::Block>,\n+                                       fld: &mut MacroExpander)\n+    -> (Gc<ast::FnDecl>, Gc<ast::Block>) {\n+    let expanded_decl = fld.fold_fn_decl(fn_decl);\n+    let idents = fn_decl_arg_bindings(expanded_decl);\n+    let renames =\n+        idents.iter().map(|id : &ast::Ident| (*id,fresh_name(id))).collect();\n+    // first, a renamer for the PatIdents, for the fn_decl:\n+    let mut rename_pat_fld = PatIdentRenamer{renames: &renames};\n+    let rewritten_fn_decl = rename_pat_fld.fold_fn_decl(expanded_decl);\n+    // now, a renamer for *all* idents, for the body:\n+    let mut rename_fld = IdentRenamer{renames: &renames};\n+    let rewritten_body = fld.fold_block(rename_fld.fold_block(block));\n+    (rewritten_fn_decl,rewritten_body)\n+}\n+\n /// A tree-folder that performs macro expansion\n pub struct MacroExpander<'a, 'b> {\n     pub extsbox: SyntaxEnv,\n@@ -901,6 +939,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n         expand_item(item, self)\n     }\n \n+    fn fold_item_underscore(&mut self, item: &ast::Item_) -> ast::Item_ {\n+        expand_item_underscore(item, self)\n+    }\n+\n     fn fold_stmt(&mut self, stmt: &ast::Stmt) -> SmallVector<Gc<ast::Stmt>> {\n         expand_stmt(stmt, self)\n     }"}]}