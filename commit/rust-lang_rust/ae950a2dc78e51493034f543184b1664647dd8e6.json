{"sha": "ae950a2dc78e51493034f543184b1664647dd8e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTUwYTJkYzc4ZTUxNDkzMDM0ZjU0MzE4NGIxNjY0NjQ3ZGQ4ZTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T07:56:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T16:17:49Z"}, "message": "more precise message for the ptr access check on deref", "tree": {"sha": "90fa00f0e8f4047ad2d52cc9d2d7a2e06445dafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90fa00f0e8f4047ad2d52cc9d2d7a2e06445dafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae950a2dc78e51493034f543184b1664647dd8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae950a2dc78e51493034f543184b1664647dd8e6", "html_url": "https://github.com/rust-lang/rust/commit/ae950a2dc78e51493034f543184b1664647dd8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae950a2dc78e51493034f543184b1664647dd8e6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff353cd6e76e8b3b586b8c31b50669675a93e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff353cd6e76e8b3b586b8c31b50669675a93e2c", "html_url": "https://github.com/rust-lang/rust/commit/4ff353cd6e76e8b3b586b8c31b50669675a93e2c"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "02a32b9fc6ad3b2f3a16b4453bcf1f0ad6c21701", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -170,6 +170,8 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n /// Details of why a pointer had to be in-bounds.\n #[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n+    /// We are dereferencing a pointer (i.e., creating a place).\n+    DerefTest,\n     /// We are access memory.\n     MemoryAccessTest,\n     /// We are doing pointer arithmetic.\n@@ -186,6 +188,7 @@ impl fmt::Display for CheckInAllocMsg {\n             f,\n             \"{}\",\n             match *self {\n+                CheckInAllocMsg::DerefTest => \"dereferencing pointer failed: \",\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n                 CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n                 CheckInAllocMsg::InboundsTest => \"\","}, {"sha": "b05e3f5caa8aa24c5e409f67a8da87756aaad236", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -428,7 +428,11 @@ crate struct AllocMap<'tcx> {\n \n impl<'tcx> AllocMap<'tcx> {\n     crate fn new() -> Self {\n-        AllocMap { alloc_map: Default::default(), dedup: Default::default(), next_id: AllocId(NonZeroU64::new(1).unwrap()) }\n+        AllocMap {\n+            alloc_map: Default::default(),\n+            dedup: Default::default(),\n+            next_id: AllocId(NonZeroU64::new(1).unwrap()),\n+        }\n     }\n     fn reserve(&mut self) -> AllocId {\n         let next = self.next_id;"}, {"sha": "1c9905b775f0ca81e4715ac60740f0f2f4004f22", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -373,7 +373,7 @@ where\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n         let mplace = self.ref_to_mplace(&val)?;\n-        self.check_mplace_access(mplace)?;\n+        self.check_mplace_access(mplace, CheckInAllocMsg::DerefTest)?;\n         Ok(mplace)\n     }\n \n@@ -400,18 +400,17 @@ where\n     }\n \n     /// Check if this mplace is dereferencable and sufficiently aligned.\n-    pub fn check_mplace_access(&self, mplace: MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n+    fn check_mplace_access(\n+        &self,\n+        mplace: MPlaceTy<'tcx, M::PointerTag>,\n+        msg: CheckInAllocMsg,\n+    ) -> InterpResult<'tcx> {\n         let (size, align) = self\n             .size_and_align_of_mplace(&mplace)?\n             .unwrap_or((mplace.layout.size, mplace.layout.align.abi));\n         assert!(mplace.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n         let align = M::enforce_alignment(&self.memory.extra).then_some(align);\n-        self.memory.check_ptr_access_align(\n-            mplace.ptr,\n-            size,\n-            align.unwrap_or(Align::ONE),\n-            CheckInAllocMsg::MemoryAccessTest, // FIXME sth more specific?\n-        )?;\n+        self.memory.check_ptr_access_align(mplace.ptr, size, align.unwrap_or(Align::ONE), msg)?;\n         Ok(())\n     }\n "}, {"sha": "bebdd223975575887122f8d7f27059b77004c9ab", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -13,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n-   |                              ^^^^^^^^ memory access failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n+   |                              ^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1"}, {"sha": "0277506eff15219d6914e983126b1659b71e5e14", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -13,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n-   |                              ^^^^^^^^ memory access failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n+   |                              ^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1"}, {"sha": "032b947b895a7427ffed61d4059bf84960477cd7", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae950a2dc78e51493034f543184b1664647dd8e6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=ae950a2dc78e51493034f543184b1664647dd8e6", "patch": "@@ -16,7 +16,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:64:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds for 1000 bytes at offset 0, but alloc3 has size $WORD\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 1000 bytes at offset 0, but alloc3 has size $WORD\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:68:27"}]}