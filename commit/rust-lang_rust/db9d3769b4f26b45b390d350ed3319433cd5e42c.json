{"sha": "db9d3769b4f26b45b390d350ed3319433cd5e42c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOWQzNzY5YjRmMjZiNDViMzkwZDM1MGVkMzMxOTQzM2NkNWU0MmM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-17T01:10:26Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:43Z"}, "message": "Add documentation", "tree": {"sha": "4e270143798978eb78ac1b0ceeb6ec00aea48518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e270143798978eb78ac1b0ceeb6ec00aea48518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9d3769b4f26b45b390d350ed3319433cd5e42c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d3769b4f26b45b390d350ed3319433cd5e42c", "html_url": "https://github.com/rust-lang/rust/commit/db9d3769b4f26b45b390d350ed3319433cd5e42c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9d3769b4f26b45b390d350ed3319433cd5e42c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe6710b4db48e60f49c0d237d324d5490dc4f8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe6710b4db48e60f49c0d237d324d5490dc4f8e", "html_url": "https://github.com/rust-lang/rust/commit/8fe6710b4db48e60f49c0d237d324d5490dc4f8e"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "9c8e148f83a332a1c0fb1569dc9ff1abe779d47b", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db9d3769b4f26b45b390d350ed3319433cd5e42c/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d3769b4f26b45b390d350ed3319433cd5e42c/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=db9d3769b4f26b45b390d350ed3319433cd5e42c", "patch": "@@ -283,6 +283,10 @@ fn parse_args<'a>(\n     Ok(args)\n }\n \n+/// Report a duplicate option error.\n+///\n+/// This function must be called immediately after the option token is parsed.\n+/// Otherwise, the suggestion will be incorrect.\n fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n     let mut err = p\n         .sess\n@@ -305,6 +309,11 @@ fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n     err.emit();\n }\n \n+/// Try to set the provided option in the provided `AsmArgs`.\n+/// If it is already set, report a duplicate option error.\n+///\n+/// This function must be called immediately after the option token is parsed.\n+/// Otherwise, the error will not point to the correct spot.\n fn try_set_option<'a>(\n     p: &mut Parser<'a>,\n     args: &mut AsmArgs,"}]}