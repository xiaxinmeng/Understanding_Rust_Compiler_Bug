{"sha": "d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "node_id": "C_kwDOAAsO6NoAKGQ2ZmNhNDY1N2Q1YWFlMzVjYjI0ZWI1MzUzMGEzZjE3ZGMyZmQyNDM", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-12-09T19:14:35Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-12-09T19:38:43Z"}, "message": "Update lintcheck output to use tables and add markdown support", "tree": {"sha": "451b923e23a08fae3d012b551672ca3753ca2f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451b923e23a08fae3d012b551672ca3753ca2f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmGyW0MACgkQ/Ny/Ka9k\n1gFUBQ//fSJ7py6628c7mYCig8D1gW3BeTvdxb0yxyP9UdBh0kS5taaKsFycO0sR\nu5YUx1F9kznEu4UTtdtvdLftPjKgOB0VPh6haA+vkgWsFR2HWCtAZRh32MSz4WSr\njW1yIju46V0YMTVUlqpjbP2LydMmw1a48reycKd6JwOTGWDU0X8XGd5P/eKNvHjs\n0beCyMAG0H0cLE162/rUceLLP4pwCawiAQdk6+rTmQKN2oteQndHoBkexq2u1rpN\nYi+DViHFGL50imtsPlGunR2w0f+e0Q4LpnJCVqzkaFfqGHCuc68lynV3RPMvhlUX\nEYV4ekfAe+ZDong4DeZxX912YUuWziugwgIcnQtGqZIsruiLSbgTEe7wE+P4jn2z\nX03beDZJpmRckkuzdoEEuihZ9jf9YGnF/3NEjNDRBostO1Oi+s1IisdytnWY2fbo\n3Z+mD/eeu/HnXMCYaPF7hSnH3tExkrLiRTyCfNRCKJ4jdiou4oBSMESFb7hkyYlN\ncAbsTfc5k93w2NXzZMxdiiIRiYKayZvPDsElXszL533nN5QOMTcwyfVPOJjK40Wi\naGW+YXdo4CdedVcOwI/hZwc+DNgfJj9u5sAIOcpglffJdxxgp2v3Rv+CWC0LCfw0\nELmfL8UwkzVGSF9jn8YJSUp0lQmrw/o6PDri5RFHa/NQsvybaoI=\n=c0J3\n-----END PGP SIGNATURE-----", "payload": "tree 451b923e23a08fae3d012b551672ca3753ca2f2c\nparent e42f79c0a3eb64deb5445968a0bb7106df489ed2\nauthor xFrednet <xFrednet@gmail.com> 1639077275 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1639078723 +0100\n\nUpdate lintcheck output to use tables and add markdown support\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "html_url": "https://github.com/rust-lang/rust/commit/d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fca4657d5aae35cb24eb53530a3f17dc2fd243/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42f79c0a3eb64deb5445968a0bb7106df489ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42f79c0a3eb64deb5445968a0bb7106df489ed2", "html_url": "https://github.com/rust-lang/rust/commit/e42f79c0a3eb64deb5445968a0bb7106df489ed2"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "53e669254cfeafde12b584fec22c15c4e2cc168b", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 70, "deletions": 28, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d6fca4657d5aae35cb24eb53530a3f17dc2fd243/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fca4657d5aae35cb24eb53530a3f17dc2fd243/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "patch": "@@ -12,7 +12,7 @@ use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{collections::HashMap, io::ErrorKind};\n use std::{\n-    env, fmt,\n+    env,\n     fs::write,\n     path::{Path, PathBuf},\n     thread,\n@@ -101,13 +101,28 @@ struct ClippyWarning {\n     is_ice: bool,\n }\n \n-impl std::fmt::Display for ClippyWarning {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        writeln!(\n-            f,\n-            r#\"target/lintcheck/sources/{}-{}/{}:{}:{} {} \"{}\"\"#,\n-            &self.crate_name, &self.crate_version, &self.file, &self.line, &self.column, &self.linttype, &self.message\n-        )\n+#[allow(unused)]\n+impl ClippyWarning {\n+    fn to_output(&self, markdown: bool) -> String {\n+        let file = format!(\"{}-{}/{}\", &self.crate_name, &self.crate_version, &self.file);\n+        let file_with_pos = format!(\"{}:{}:{}\", &file, &self.line, &self.column);\n+        if markdown {\n+            let lint = format!(\"`{}`\", self.linttype);\n+\n+            let mut output = String::from(\"| \");\n+            output.push_str(&format!(\n+                \"[`{}`](../target/lintcheck/sources/{}#L{})\",\n+                file_with_pos, file, self.line\n+            ));\n+            output.push_str(&format!(r#\" | {:<50} | \"{}\" |\"#, lint, self.message));\n+            output.push('\\n');\n+            output\n+        } else {\n+            format!(\n+                \"target/lintcheck/sources/{} {} \\\"{}\\\"\\n\",\n+                file_with_pos, self.linttype, self.message\n+            )\n+        }\n     }\n }\n \n@@ -378,6 +393,8 @@ struct LintcheckConfig {\n     fix: bool,\n     /// A list of lint that this lintcheck run shound focus on\n     lint_filter: Vec<String>,\n+    /// Indicate if the output should support markdown syntax\n+    markdown: bool,\n }\n \n impl LintcheckConfig {\n@@ -393,12 +410,17 @@ impl LintcheckConfig {\n                 .to_string()\n         });\n \n+        let markdown = clap_config.is_present(\"markdown\");\n         let sources_toml_path = PathBuf::from(sources_toml);\n \n         // for the path where we save the lint results, get the filename without extension (so for\n         // wasd.toml, use \"wasd\"...)\n         let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n-        let lintcheck_results_path = PathBuf::from(format!(\"lintcheck-logs/{}_logs.txt\", filename.display()));\n+        let lintcheck_results_path = PathBuf::from(format!(\n+            \"lintcheck-logs/{}_logs.{}\",\n+            filename.display(),\n+            if markdown { \"md\" } else { \"txt\" }\n+        ));\n \n         // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n         // use half of that for the physical core count\n@@ -440,6 +462,7 @@ impl LintcheckConfig {\n             lintcheck_results_path,\n             fix,\n             lint_filter,\n+            markdown,\n         }\n     }\n }\n@@ -601,10 +624,15 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n     // to not have a lint with 200 and 2 warnings take the same spot\n     stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n \n+    let mut header = String::from(\"| lint                                               | count |\\n\");\n+    header.push_str(\"| -------------------------------------------------- | ----- |\\n\");\n     let stats_string = stats\n         .iter()\n-        .map(|(lint, count)| format!(\"{} {}\\n\", lint, count))\n-        .collect::<String>();\n+        .map(|(lint, count)| format!(\"| {:<50} |  {:>4} |\\n\", lint, count))\n+        .fold(header, |mut table, line| {\n+            table.push_str(&line);\n+            table\n+        });\n \n     (stats_string, counter)\n }\n@@ -802,15 +830,23 @@ pub fn main() {\n         .map(|w| (&w.crate_name, &w.message))\n         .collect();\n \n-    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(ToString::to_string).collect();\n+    let mut all_msgs: Vec<String> = clippy_warnings\n+        .iter()\n+        .map(|warn| warn.to_output(config.markdown))\n+        .collect();\n     all_msgs.sort();\n-    all_msgs.push(\"\\n\\n\\n\\nStats:\\n\".into());\n+    all_msgs.push(\"\\n\\n### Stats:\\n\\n\".into());\n     all_msgs.push(stats_formatted);\n \n     // save the text into lintcheck-logs/logs.txt\n     let mut text = clippy_ver; // clippy version number on top\n-    text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n-    text.push_str(\"ICEs:\\n\");\n+    text.push_str(\"\\n### Reports\\n\\n\");\n+    if config.markdown {\n+        text.push_str(\"| file | lint | message |\\n\");\n+        text.push_str(\"| --- | --- | --- |\\n\");\n+    }\n+    text.push_str(&format!(\"{}\", all_msgs.join(\"\")));\n+    text.push_str(\"\\n\\n### ICEs:\\n\");\n     ices.iter()\n         .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n \n@@ -832,20 +868,21 @@ fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n \n     let lines: Vec<String> = file_content.lines().map(ToString::to_string).collect();\n \n-    // search for the beginning \"Stats:\" and the end \"ICEs:\" of the section we want\n-    let start = lines.iter().position(|line| line == \"Stats:\").unwrap();\n-    let end = lines.iter().position(|line| line == \"ICEs:\").unwrap();\n-\n-    let stats_lines = &lines[start + 1..end];\n-\n-    stats_lines\n+    lines\n         .iter()\n-        .map(|line| {\n-            let mut spl = line.split(' ');\n-            (\n-                spl.next().unwrap().to_string(),\n-                spl.next().unwrap().parse::<usize>().unwrap(),\n-            )\n+        .skip_while(|line| line.as_str() != \"### Stats:\")\n+        // Skipping the table header and the `Stats:` label\n+        .skip(4)\n+        .take_while(|line| line.starts_with(\"| \"))\n+        .filter_map(|line| {\n+            let mut spl = line.split('|');\n+            // Skip the first `|` symbol\n+            spl.next();\n+            if let (Some(lint), Some(count)) = (spl.next(), spl.next()) {\n+                Some((lint.trim().to_string(), count.trim().parse::<usize>().unwrap()))\n+            } else {\n+                None\n+            }\n         })\n         .collect::<HashMap<String, usize>>()\n }\n@@ -957,6 +994,11 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n         )\n+        .arg(\n+            Arg::with_name(\"markdown\")\n+                .long(\"--markdown\")\n+                .help(\"change the reports table to use markdown links\"),\n+        )\n         .get_matches()\n }\n "}]}