{"sha": "2599b0110159beeec0cdbf18b8682ed8bc3e0a78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OTliMDExMDE1OWJlZWVjMGNkYmYxOGI4NjgyZWQ4YmMzZTBhNzg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-02-18T23:59:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-18T23:59:12Z"}, "message": "Merge pull request #3408 from scampi/issue-3111\n\ndo not put tracking issue as part of the option's title", "tree": {"sha": "0749aa1e373929dc9ce2bc153e4097d48520ef45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0749aa1e373929dc9ce2bc153e4097d48520ef45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2599b0110159beeec0cdbf18b8682ed8bc3e0a78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJca0bQCRBK7hj4Ov3rIwAAdHIIAAsX4fwpzQgimYGpdWN9pY4g\nwJWxo32dCv+Q28EdsxMsqXow5vOkQUHhdKaR73BRQ4Js9Na11IyH8gOSbHWUv/Jk\nd+jTg1VAx2obm+AhVYqzt+gd96Fv96eP3sgJutCIYzn6rD4/XHCwj0EPYgSacDw4\nPM2RM3Pm5yAqFXMByzNA/ApiXEx9idbnuO9k5i4cIs8v9iSjs/V5VGV2ypR7YQc9\nMy0wko1cNOmAN2pD1TDYMhg9Lsmp+otu0OwK3a80OPDcUJb8js5jjyRREQoQKWqg\n0T4dvYMqDYxmTl3VWWyD01GMo6zr9PPFPCy2J+5CoEbsoI1qcvI0Ag5dStW9Ros=\n=YfaI\n-----END PGP SIGNATURE-----\n", "payload": "tree 0749aa1e373929dc9ce2bc153e4097d48520ef45\nparent 2c221b6912d914c9fb5a8fb1bf2f39e8675ca0db\nparent 2b08b73f56ab966aed25e1df9c073cbf469e8fc5\nauthor Seiichi Uchida <seuchida@gmail.com> 1550534352 +0900\ncommitter GitHub <noreply@github.com> 1550534352 +0900\n\nMerge pull request #3408 from scampi/issue-3111\n\ndo not put tracking issue as part of the option's title"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2599b0110159beeec0cdbf18b8682ed8bc3e0a78", "html_url": "https://github.com/rust-lang/rust/commit/2599b0110159beeec0cdbf18b8682ed8bc3e0a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2599b0110159beeec0cdbf18b8682ed8bc3e0a78/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c221b6912d914c9fb5a8fb1bf2f39e8675ca0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c221b6912d914c9fb5a8fb1bf2f39e8675ca0db", "html_url": "https://github.com/rust-lang/rust/commit/2c221b6912d914c9fb5a8fb1bf2f39e8675ca0db"}, {"sha": "2b08b73f56ab966aed25e1df9c073cbf469e8fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b08b73f56ab966aed25e1df9c073cbf469e8fc5", "html_url": "https://github.com/rust-lang/rust/commit/2b08b73f56ab966aed25e1df9c073cbf469e8fc5"}], "stats": {"total": 206, "additions": 103, "deletions": 103}, "files": [{"sha": "d081bfd6a02c3a226751b7ba0f943890b5d556cc", "filename": "Configurations.md", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/2599b0110159beeec0cdbf18b8682ed8bc3e0a78/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/2599b0110159beeec0cdbf18b8682ed8bc3e0a78/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=2599b0110159beeec0cdbf18b8682ed8bc3e0a78", "patch": "@@ -18,13 +18,13 @@ To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or\n Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n \n \n-## `indent_style` (tracking issue #3346)\n+## `indent_style`\n \n Indent on expressions or items.\n \n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3346)\n \n ### Array\n \n@@ -355,13 +355,13 @@ fn main() {\n }\n ```\n \n-## `binop_separator` (tracking issue #3368)\n+## `binop_separator`\n \n Where to put a binary operator when a binary expression goes multiline.\n \n - **Default value**: `\"Front\"`\n - **Possible values**: `\"Front\"`, `\"Back\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3368)\n \n #### `\"Front\"` (default):\n \n@@ -395,13 +395,13 @@ fn main() {\n }\n ```\n \n-## `combine_control_expr` (tracking issue #3369)\n+## `combine_control_expr`\n \n Combine control expressions with function calls.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3369)\n \n #### `true` (default):\n \n@@ -503,13 +503,13 @@ fn example() {\n }\n ```\n \n-## `comment_width` (tracking issue #3349)\n+## `comment_width`\n \n Maximum length of comments. No effect unless`wrap_comments = true`.\n \n - **Default value**: `80`\n - **Possible values**: any positive integer\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3349)\n \n **Note:** A value of `0` results in [`wrap_comments`](#wrap_comments) being applied regardless of a line's width.\n \n@@ -526,13 +526,13 @@ Maximum length of comments. No effect unless`wrap_comments = true`.\n \n See also [`wrap_comments`](#wrap_comments).\n \n-## `condense_wildcard_suffixes` (tracking issue #3384)\n+## `condense_wildcard_suffixes`\n \n Replace strings of _ wildcards by a single .. in tuple patterns\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3384)\n \n #### `false` (default):\n \n@@ -551,13 +551,13 @@ fn main() {\n }\n ```\n \n-## `control_brace_style` (tracking issue #3377)\n+## `control_brace_style`\n \n Brace style for control flow constructs\n \n - **Default value**: `\"AlwaysSameLine\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"AlwaysSameLine\"`, `\"ClosingNextLine\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3377)\n \n #### `\"AlwaysSameLine\"` (default):\n \n@@ -599,15 +599,15 @@ fn main() {\n }\n ```\n \n-## `disable_all_formatting` (tracking issue #3388)\n+## `disable_all_formatting`\n \n Don't reformat anything\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3388)\n \n-## `error_on_line_overflow` (tracking issue #3391)\n+## `error_on_line_overflow`\n \n Error if Rustfmt is unable to get all lines within `max_width`, except for comments and string\n literals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by\n@@ -616,26 +616,26 @@ using a shorter name.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3391)\n \n See also [`max_width`](#max_width).\n \n-## `error_on_unformatted` (tracking issue #3392)\n+## `error_on_unformatted`\n \n Error if unable to get comments or string literals within `max_width`, or they are left with\n trailing whitespaces.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3392)\n \n-## `fn_args_density` (tracking issue #3375)\n+## `fn_args_density`\n \n Argument density in functions\n \n - **Default value**: `\"Tall\"`\n - **Possible values**: `\"Compressed\"`, `\"Tall\"`, `\"Vertical\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3375)\n \n #### `\"Tall\"` (default):\n \n@@ -740,13 +740,13 @@ trait Lorem {\n ```\n \n \n-## `brace_style` (tracking issue #3376)\n+## `brace_style`\n \n Brace style for items\n \n - **Default value**: `\"SameLineWhere\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3376)\n \n ### Functions\n \n@@ -856,13 +856,13 @@ where\n ```\n \n \n-## `empty_item_single_line` (tracking issue #3356)\n+## `empty_item_single_line`\n \n Put empty-body functions and impls on a single line\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3356)\n \n #### `true` (default):\n \n@@ -885,7 +885,7 @@ impl Lorem {\n See also [`brace_style`](#brace_style), [`control_brace_style`](#control_brace_style).\n \n \n-## `enum_discrim_align_threshold` (tracking issue #3372)\n+## `enum_discrim_align_threshold`\n \n The maximum length of enum variant having discriminant, that gets vertically aligned with others.\n Variants without discriminants would be ignored for the purpose of alignment.\n@@ -895,7 +895,7 @@ doesn't get ignored when aligning.\n \n - **Default value** : 0\n - **Possible values**: any positive integer\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3372)\n \n #### `0` (default):\n \n@@ -932,13 +932,13 @@ enum Bar {\n ```\n \n \n-## `fn_single_line` (tracking issue #3358)\n+## `fn_single_line`\n \n Put single-expression functions on a single line\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3358)\n \n #### `false` (default):\n \n@@ -967,13 +967,13 @@ fn lorem() -> usize {\n See also [`control_brace_style`](#control_brace_style).\n \n \n-## `where_single_line` (tracking issue #3359)\n+## `where_single_line`\n \n Forces the `where` clause to be laid out on a single line.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3359)\n \n #### `false` (default):\n \n@@ -1025,13 +1025,13 @@ extern {\n }\n ```\n \n-## `format_strings` (tracking issue #3353)\n+## `format_strings`\n \n Format string literals where necessary\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3353)\n \n #### `false` (default):\n \n@@ -1052,13 +1052,13 @@ fn main() {\n \n See also [`max_width`](#max_width).\n \n-## `format_macro_matchers` (tracking issue #3354)\n+## `format_macro_matchers`\n \n Format the metavariable matching patterns in macros.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3354)\n \n #### `false` (default):\n \n@@ -1089,13 +1089,13 @@ macro_rules! foo {\n See also [`format_macro_bodies`](#format_macro_bodies).\n \n \n-## `format_macro_bodies` (tracking issue #3355)\n+## `format_macro_bodies`\n \n Format the bodies of macros.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3355)\n \n #### `true` (default):\n \n@@ -1149,13 +1149,13 @@ fn lorem() -> usize {\n See also: [`tab_spaces`](#tab_spaces).\n \n \n-## `imports_indent` (tracking issue #3360)\n+## `imports_indent`\n \n Indent style of imports\n \n - **Default Value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3360)\n \n #### `\"Block\"` (default):\n \n@@ -1175,13 +1175,13 @@ use foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n \n See also: [`imports_layout`](#imports_layout).\n \n-## `imports_layout` (tracking issue #3361)\n+## `imports_layout`\n \n Item layout inside a imports block\n \n - **Default value**: \"Mixed\"\n - **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3361)\n \n #### `\"Mixed\"` (default):\n \n@@ -1238,13 +1238,13 @@ use foo::{\n };\n ```\n \n-## `merge_imports` (tracking issue #3362)\n+## `merge_imports`\n \n Merge multiple imports into a single nested import.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3362)\n \n #### `false` (default):\n \n@@ -1261,13 +1261,13 @@ use foo::{a, b, c, d, e, f, g};\n ```\n \n \n-## `match_block_trailing_comma` (tracking issue #3380)\n+## `match_block_trailing_comma`\n \n Put a trailing comma after a block based match arm (non-block arms are not affected)\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3380)\n \n #### `false` (default):\n \n@@ -1331,13 +1331,13 @@ pub enum Foo {}\n pub enum Foo {}\n ```\n \n-## `force_multiline_blocks` (tracking issue #3374)\n+## `force_multiline_blocks`\n \n Force multiline closure and match arm bodies to be wrapped in a block\n \n - **Default value**: `false`\n - **Possible values**: `false`, `true`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3374)\n \n #### `false` (default):\n \n@@ -1407,13 +1407,13 @@ Line endings will be converted to `\\n`.\n \n Line endings will be converted to `\\r\\n`.\n \n-## `normalize_comments` (tracking issue #3350)\n+## `normalize_comments`\n \n Convert /* */ comments to // comments where possible\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3350)\n \n #### `false` (default):\n \n@@ -1522,13 +1522,13 @@ mod sit;\n **Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\n of the original source code.\n \n-## `reorder_impl_items` (tracking issue #3363)\n+## `reorder_impl_items`\n \n Reorder impl items. `type` and `const` are put first, then macros and methods.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3363)\n \n #### `false` (default)\n \n@@ -1558,27 +1558,27 @@ impl Iterator for Dummy {\n }\n ```\n \n-## `report_todo` (tracking issue #3393)\n+## `report_todo`\n \n Report `TODO` items in comments.\n \n - **Default value**: `\"Never\"`\n - **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3393)\n \n Warns about any comments containing `TODO` in them when set to `\"Always\"`. If\n it contains a `#X` (with `X` being a number) in parentheses following the\n `TODO`, `\"Unnumbered\"` will ignore it.\n \n See also [`report_fixme`](#report_fixme).\n \n-## `report_fixme` (tracking issue #3394)\n+## `report_fixme`\n \n Report `FIXME` items in comments.\n \n - **Default value**: `\"Never\"`\n - **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3394)\n \n Warns about any comments containing `FIXME` in them when set to `\"Always\"`. If\n it contains a `#X` (with `X` being a number) in parentheses following the\n@@ -1587,21 +1587,21 @@ it contains a `#X` (with `X` being a number) in parentheses following the\n See also [`report_todo`](#report_todo).\n \n \n-## `skip_children` (tracking issue #3389)\n+## `skip_children`\n \n Don't reformat out of line modules\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3389)\n \n-## `space_after_colon` (tracking issue #3366)\n+## `space_after_colon`\n \n Leave a space after the colon.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3366)\n \n #### `true` (default):\n \n@@ -1627,13 +1627,13 @@ fn lorem<T:Eq>(t:T) {\n \n See also: [`space_before_colon`](#space_before_colon).\n \n-## `space_before_colon` (tracking issue #3365)\n+## `space_before_colon`\n \n Leave a space before the colon.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3365)\n \n #### `false` (default):\n \n@@ -1659,13 +1659,13 @@ fn lorem<T : Eq>(t : T) {\n \n See also: [`space_after_colon`](#space_after_colon).\n \n-## `struct_field_align_threshold` (tracking issue #3371)\n+## `struct_field_align_threshold`\n \n The maximum diff of width between struct fields to be aligned with each other.\n \n - **Default value** : 0\n - **Possible values**: any positive integer\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3371)\n \n #### `0` (default):\n \n@@ -1687,13 +1687,13 @@ struct Foo {\n }\n ```\n \n-## `spaces_around_ranges` (tracking issue #3367)\n+## `spaces_around_ranges`\n \n Put spaces around the .., ..=, and ... range operators\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3367)\n \n #### `false` (default):\n \n@@ -1743,13 +1743,13 @@ fn main() {\n }\n ```\n \n-## `struct_lit_single_line` (tracking issue #3357)\n+## `struct_lit_single_line`\n \n Put small struct literals on a single line\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3357)\n \n #### `true` (default):\n \n@@ -1808,13 +1808,13 @@ fn lorem() {\n See also: [`hard_tabs`](#hard_tabs).\n \n \n-## `trailing_comma` (tracking issue #3379)\n+## `trailing_comma`\n \n How to handle trailing commas for lists\n \n - **Default value**: `\"Vertical\"`\n - **Possible values**: `\"Always\"`, `\"Never\"`, `\"Vertical\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3379)\n \n #### `\"Vertical\"` (default):\n \n@@ -1866,13 +1866,13 @@ fn main() {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n \n-## `trailing_semicolon` (tracking issue #3378)\n+## `trailing_semicolon`\n \n Add trailing semicolon after break, continue and return\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3378)\n \n #### `true` (default):\n ```rust\n@@ -1888,13 +1888,13 @@ fn foo() -> usize {\n }\n ```\n \n-## `type_punctuation_density` (tracking issue #3364)\n+## `type_punctuation_density`\n \n Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n \n - **Default value**: `\"Wide\"`\n - **Possible values**: `\"Compressed\"`, `\"Wide\"`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3364)\n \n #### `\"Wide\"` (default):\n \n@@ -1978,13 +1978,13 @@ fn main() {\n }\n ```\n \n-## `format_doc_comments` (tracking issue #3348)\n+## `format_doc_comments`\n \n Format doc comments.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3348)\n \n #### `false` (default):\n \n@@ -2029,13 +2029,13 @@ fn add_one(x: i32) -> i32 {\n }\n ```\n \n-## `wrap_comments` (tracking issue #3347)\n+## `wrap_comments`\n \n Break comments to fit on the line\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3347)\n \n #### `false` (default):\n \n@@ -2053,13 +2053,13 @@ Break comments to fit on the line\n // commodo consequat.\n ```\n \n-## `match_arm_blocks`` (tracking issue #3373)\n+## `match_arm_blocks`\n \n Wrap the body of arms in blocks when it does not fit on the same line with the pattern of arms\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3373)\n \n #### `true` (default):\n \n@@ -2088,15 +2088,15 @@ fn main() {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n \n-## `overflow_delimited_expr` (tracking issue #3370)\n+## `overflow_delimited_expr`\n \n When structs, slices, arrays, and block/array-like macros are used as the last\n argument in an expression list, allow them to overflow (like blocks/closures)\n instead of being indented on a new line.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3370)\n \n #### `false` (default):\n \n@@ -2171,14 +2171,14 @@ fn example() {\n }\n ```\n \n-## `blank_lines_upper_bound` (tracking issue #3381)\n+## `blank_lines_upper_bound`\n \n Maximum number of blank lines which can be put between items. If more than this number of consecutive empty\n lines are found, they are trimmed down to match this integer.\n \n - **Default value**: `1`\n - **Possible values**: *unsigned integer*\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3381)\n \n ### Example\n Original Code:\n@@ -2230,14 +2230,14 @@ fn bar() {\n \n See also: [`blank_lines_lower_bound`](#blank_lines_lower_bound)\n \n-## `blank_lines_lower_bound` (tracking issue #3382)\n+## `blank_lines_lower_bound`\n \n Minimum number of blank lines which must be put between items. If two items have fewer blank lines between\n them, additional blank lines are inserted.\n \n - **Default value**: `0`\n - **Possible values**: *unsigned integer*\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3382)\n \n ### Example\n Original Code (rustfmt will not change it with the default value of `0`):\n@@ -2270,46 +2270,46 @@ fn bar() {\n ```\n \n \n-## `required_version` (tracking issue #3386)\n+## `required_version`\n \n Require a specific version of rustfmt. If you want to make sure that the\n specific version of rustfmt is used in your CI, use this option.\n \n - **Default value**: `CARGO_PKG_VERSION`\n - **Possible values**: any published version (e.g. `\"0.3.8\"`)\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3386)\n \n-## `hide_parse_errors` (tracking issue #3390)\n+## `hide_parse_errors`\n \n Do not show parse errors if the parser failed to parse files.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3390)\n \n-## `color` (tracking issue #3385)\n+## `color`\n \n Whether to use colored output or not.\n \n - **Default value**: `\"Auto\"`\n - **Possible values**: \"Auto\", \"Always\", \"Never\"\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3385)\n \n-## `unstable_features` (tracking issue #3387)\n+## `unstable_features`\n \n Enable unstable features on the unstable channel.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3387)\n \n-## `license_template_path` (tracking issue #3352)\n+## `license_template_path`\n \n Check whether beginnings of files match a license template.\n \n-- **Default value**: `\"\"``\n+- **Default value**: `\"\"`\n - **Possible values**: path to a license template file\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3352)\n \n A license template is a plain text file which is matched literally against the\n beginning of each source file, except for `{}`-delimited blocks, which are\n@@ -2323,13 +2323,13 @@ Copyright 2018 The Rust Project Developers.`, etc.:\n \n `\\{`, `\\}` and `\\\\` match literal braces / backslashes.\n \n-## `ignore` (tracking issue #3395)\n+## `ignore`\n \n Skip formatting the specified files and directories.\n \n - **Default value**: format every files\n - **Possible values**: See an example below\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3395)\n \n ### Example\n \n@@ -2366,29 +2366,29 @@ If you want to format code that requires edition 2018, add the following to your\n edition = \"2018\"\n ```\n \n-## `version` (tracking issue #3383)\n+## `version`\n \n Which version of the formatting rules to use. `Version::One` is backwards-compatible\n with Rustfmt 1.0. Other versions are only backwards compatible within a major\n version number.\n \n - **Default value**: `One`\n - **Possible values**: `One`, `Two`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3383)\n \n ### Example\n \n ```toml\n version = \"Two\"\n ```\n \n-## `normalize_doc_attributes` (tracking issue #3351)\n+## `normalize_doc_attributes`\n \n Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: #3351)\n \n #### `false` (default):\n \n@@ -2408,10 +2408,10 @@ pub enum Foo {}\n pub enum Foo {}\n ```\n \n-## `emit_mode` (tracking issue #3399)\n+## `emit_mode`\n \n Internal option\n \n-## `make_backup` (tracking issue #3400)\n+## `make_backup`\n \n Internal option, use `--backup`"}]}