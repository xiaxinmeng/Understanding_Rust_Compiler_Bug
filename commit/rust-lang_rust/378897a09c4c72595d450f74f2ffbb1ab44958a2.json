{"sha": "378897a09c4c72595d450f74f2ffbb1ab44958a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODg5N2EwOWM0YzcyNTk1ZDQ1MGY3NGYyZmZiYjFhYjQ0OTU4YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T20:56:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T20:56:36Z"}, "message": "auto merge of #10916 : alexcrichton/rust/nounwind, r=pcwalton\n\nWhen performing LTO, the rust compiler has an opportunity to completely strip\r\nall landing pads in all dependent libraries. I've modified the LTO pass to\r\nrecognize the -Z no-landing-pads option when also running an LTO pass to flag\r\neverything in LLVM as nothrow. I've verified that this prevents any and all\r\ninvoke instructions from being emitted.\r\n\r\nI believe that this is one of our best options for moving forward with\r\naccomodating use-cases where unwinding doesn't really make sense. This will\r\nallow libraries to be built with landing pads by default but allow usage of them\r\nin contexts where landing pads aren't necessary.", "tree": {"sha": "029b82798846a0addae26001a7fa831e5f40aa54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029b82798846a0addae26001a7fa831e5f40aa54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378897a09c4c72595d450f74f2ffbb1ab44958a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378897a09c4c72595d450f74f2ffbb1ab44958a2", "html_url": "https://github.com/rust-lang/rust/commit/378897a09c4c72595d450f74f2ffbb1ab44958a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378897a09c4c72595d450f74f2ffbb1ab44958a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae3078ca257fe39a7fdc84bdfb81778b2542c520", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3078ca257fe39a7fdc84bdfb81778b2542c520", "html_url": "https://github.com/rust-lang/rust/commit/ae3078ca257fe39a7fdc84bdfb81778b2542c520"}, {"sha": "667d114f47ae658894c496dbf07a8d29c737c877", "url": "https://api.github.com/repos/rust-lang/rust/commits/667d114f47ae658894c496dbf07a8d29c737c877", "html_url": "https://github.com/rust-lang/rust/commit/667d114f47ae658894c496dbf07a8d29c737c877"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "3efaa387358d0eb5fb462e3eb6b8c55e1620c28c", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -68,6 +68,12 @@ pub fn run(sess: session::Session, llmod: ModuleRef,\n                                          arr.len() as libc::size_t);\n     }\n \n+    if sess.no_landing_pads() {\n+        unsafe {\n+            llvm::LLVMRustMarkAllFunctionsNounwind(llmod);\n+        }\n+    }\n+\n     // Now we have one massive module inside of llmod. Time to run the\n     // LTO-specific optimization passes that LLVM provides.\n     //"}, {"sha": "00f39138f58ea54599362f5e12c35ca5bd0b7d0b", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -347,6 +347,9 @@ impl Session_ {\n     pub fn lto(&self) -> bool {\n         self.debugging_opt(lto)\n     }\n+    pub fn no_landing_pads(&self) -> bool {\n+        self.debugging_opt(no_landing_pads)\n+    }\n \n     // pointless function, now...\n     pub fn str_of(&self, id: ast::Ident) -> @str {"}, {"sha": "5b6c0c2b8658631a6392464ff8145c609f314488", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -1747,6 +1747,7 @@ pub mod llvm {\n         pub fn LLVMRustRunRestrictionPass(M: ModuleRef,\n                                           syms: **c_char,\n                                           len: size_t);\n+        pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);\n     }\n }\n "}, {"sha": "045330835dca64324bb986eefb4898c18077b8af", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -915,7 +915,7 @@ pub fn invoke(bcx: @mut Block, llfn: ValueRef, llargs: ~[ValueRef],\n }\n \n pub fn need_invoke(bcx: @mut Block) -> bool {\n-    if (bcx.ccx().sess.opts.debugging_opts & session::no_landing_pads != 0) {\n+    if bcx.ccx().sess.no_landing_pads() {\n         return false;\n     }\n \n@@ -1254,8 +1254,7 @@ pub fn trans_block_cleanups_(bcx: @mut Block,\n     let _icx = push_ctxt(\"trans_block_cleanups\");\n     // NB: Don't short-circuit even if this block is unreachable because\n     // GC-based cleanup needs to the see that the roots are live.\n-    let no_lpads =\n-        bcx.ccx().sess.opts.debugging_opts & session::no_landing_pads != 0;\n+    let no_lpads = bcx.ccx().sess.no_landing_pads();\n     if bcx.unreachable && !no_lpads { return bcx; }\n     let mut bcx = bcx;\n     for cu in cleanups.rev_iter() {"}, {"sha": "2a27a7cee3c20e78c4d153c558e5251d96d70a86", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -15,7 +15,6 @@\n \n use back::abi;\n use back::link::*;\n-use driver::session;\n use lib;\n use lib::llvm::{llvm, ValueRef, True};\n use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n@@ -274,8 +273,7 @@ pub fn call_tydesc_glue_full(bcx: @mut Block,\n     let ccx = bcx.ccx();\n     // NB: Don't short-circuit even if this block is unreachable because\n     // GC-based cleanup needs to the see that the roots are live.\n-    let no_lpads = ccx.sess.opts.debugging_opts & session::no_landing_pads != 0;\n-    if bcx.unreachable && !no_lpads { return; }\n+    if bcx.unreachable && !ccx.sess.no_landing_pads() { return; }\n \n     let static_glue_fn = match static_ti {\n       None => None,"}, {"sha": "4ac341a12e42a3ac1b03bd7d63a156c1371a4fdc", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/378897a09c4c72595d450f74f2ffbb1ab44958a2/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=378897a09c4c72595d450f74f2ffbb1ab44958a2", "patch": "@@ -219,3 +219,24 @@ LLVMRustRunRestrictionPass(LLVMModuleRef M, char **symbols, size_t len) {\n     passes.add(llvm::createInternalizePass(ref));\n     passes.run(*unwrap(M));\n }\n+\n+extern \"C\" void\n+LLVMRustMarkAllFunctionsNounwind(LLVMModuleRef M) {\n+    for (Module::iterator GV = unwrap(M)->begin(),\n+         E = unwrap(M)->end(); GV != E; ++GV) {\n+        GV->setDoesNotThrow();\n+        Function *F = dyn_cast<Function>(GV);\n+        if (F == NULL)\n+            continue;\n+\n+        for (Function::iterator B = F->begin(), BE = F->end(); B != BE; ++B) {\n+            for (BasicBlock::iterator I = B->begin(), IE = B->end();\n+                 I != IE; ++I) {\n+                if (isa<InvokeInst>(I)) {\n+                    InvokeInst *CI = cast<InvokeInst>(I);\n+                    CI->setDoesNotThrow();\n+                }\n+            }\n+        }\n+    }\n+}"}]}