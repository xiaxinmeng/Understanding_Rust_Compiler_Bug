{"sha": "f40272ca6f9cba29632406efde371dc5c9751fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDI3MmNhNmY5Y2JhMjk2MzI0MDZlZmRlMzcxZGM1Yzk3NTFmZTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-15T01:44:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T01:44:17Z"}, "message": "Rollup merge of #69498 - mark-i-m:describe-it-2, r=matthewjasper\n\nChange \"method\" to \"associated function\"\n\nr? @matthewjasper\n\ncc @Centril @eddyb #67742\n\nI'm opening this mostly as a test to see what the diagnostic changes would be. It seems that this makes them somewhat more verbose, and I'm not sure it's worth it...\n\nThe relevant changes are the last two commits (it is rebased on top of #67742)", "tree": {"sha": "4add1b7c3a2435d51b0cdd80aa45644036fccdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4add1b7c3a2435d51b0cdd80aa45644036fccdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40272ca6f9cba29632406efde371dc5c9751fe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebYhxCRBK7hj4Ov3rIwAAdHIIAJXOjmy0gNnnRjv/G79ehHqu\nHstcanw7p1pcj34A4WT49a8c2HT6gqorcNJd8I00aXH63pzSV7UBWeuCpQnJclnh\nCYGkxF7gsY02//4m/SzBC5GTg93dgaLV2DkPP40XWdYFE9E+NsLYrs9KvCVJBAUY\nchToTavY4kB1ebW5KQ/GlwtUVBydh2dJnDhhCLnlw+vnZl39M8X8Y/ypVZcPIF30\nbq9DFAKWp1WV5T5xA2meu6HIPMO4crcuiyLKcmddzuaRbcAdfJm9aP1vS6rZfiTY\npdlMBZvXfJvWDJUF0zN+dNmraGwW721qY+gMC9o4dllxackyGngnPC2FDuB1+Yw=\n=70bU\n-----END PGP SIGNATURE-----\n", "payload": "tree 4add1b7c3a2435d51b0cdd80aa45644036fccdbb\nparent 0619e4649d35e979afdc29277a7f8c048210e132\nparent b6518f0f66d2b24f0e65ca51f952457fd74a909a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584236657 +0100\ncommitter GitHub <noreply@github.com> 1584236657 +0100\n\nRollup merge of #69498 - mark-i-m:describe-it-2, r=matthewjasper\n\nChange \"method\" to \"associated function\"\n\nr? @matthewjasper\n\ncc @Centril @eddyb #67742\n\nI'm opening this mostly as a test to see what the diagnostic changes would be. It seems that this makes them somewhat more verbose, and I'm not sure it's worth it...\n\nThe relevant changes are the last two commits (it is rebased on top of #67742)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40272ca6f9cba29632406efde371dc5c9751fe9", "html_url": "https://github.com/rust-lang/rust/commit/f40272ca6f9cba29632406efde371dc5c9751fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40272ca6f9cba29632406efde371dc5c9751fe9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0619e4649d35e979afdc29277a7f8c048210e132", "url": "https://api.github.com/repos/rust-lang/rust/commits/0619e4649d35e979afdc29277a7f8c048210e132", "html_url": "https://github.com/rust-lang/rust/commit/0619e4649d35e979afdc29277a7f8c048210e132"}, {"sha": "b6518f0f66d2b24f0e65ca51f952457fd74a909a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6518f0f66d2b24f0e65ca51f952457fd74a909a", "html_url": "https://github.com/rust-lang/rust/commit/b6518f0f66d2b24f0e65ca51f952457fd74a909a"}], "stats": {"total": 354, "additions": 177, "deletions": 177}, "files": [{"sha": "696aa5c6f7dfeee850f2b4449731976e25de928e", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -107,8 +107,7 @@ impl DefKind {\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n-            // FIXME: Update the description to \"assoc fn\"\n-            DefKind::AssocFn => \"method\",\n+            DefKind::AssocFn => \"associated function\",\n             DefKind::Const => \"constant\",\n             DefKind::AssocConst => \"associated constant\",\n             DefKind::TyParam => \"type parameter\",\n@@ -123,6 +122,7 @@ impl DefKind {\n             DefKind::AssocTy\n             | DefKind::AssocConst\n             | DefKind::AssocOpaqueTy\n+            | DefKind::AssocFn\n             | DefKind::Enum\n             | DefKind::OpaqueTy => \"an\",\n             DefKind::Macro(macro_kind) => macro_kind.article(),"}, {"sha": "cadf55454a76ec8bee069592c2ee674d1c6f5f91", "filename": "src/test/ui/associated-item/associated-item-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -8,7 +8,7 @@ LL |     Enum::mispellable();\n    |           ^^^^^^^^^^^\n    |           |\n    |           variant or associated item not found in `Enum`\n-   |           help: there is a method with a similar name: `misspellable`\n+   |           help: there is an associated function with a similar name: `misspellable`\n \n error[E0599]: no variant or associated item named `mispellable_trait` found for enum `Enum` in the current scope\n   --> $DIR/associated-item-enum.rs:18:11"}, {"sha": "2a399540e5296cd779d75219a0ef33b57d1df95b", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -16,13 +16,13 @@ help: to force the closure to take ownership of `self` (and any other referenced\n LL |         foo(move || self.bar()).await;\n    |             ^^^^^^^\n \n-error[E0521]: borrowed data escapes outside of method\n+error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ----- `self` is a reference that is only valid in the method body\n+   |                               ----- `self` is a reference that is only valid in the associated function body\n LL |         foo(|| self.bar()).await;\n-   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the method body here\n+   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "464459d2d61ad095848c32690ad71427c00c3781", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -9,7 +9,7 @@ LL |       ) -> &dyn Foo\n LL | /     {\n LL | |         foo\n LL | |     }\n-   | |_____^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   | |_____^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "dc7deb8a7c7ac385783878cff2ddf6c0c48762c9", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `test_mut` found for struct `std::vec::Vec<{intege\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n-   |       ^^^^^^^^ help: there is a method with a similar name: `get_mut`\n+   |       ^^^^^^^^ help: there is an associated function with a similar name: `get_mut`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `MyIter` defines an item `test_mut`, perhaps you need to implement it"}, {"sha": "5255e48bee13b86adaada5ab2a17186e5e75459d", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `b` found for reference `&Self` in the current sco\n   --> $DIR/issue-3563.rs:3:17\n    |\n LL |         || self.b()\n-   |                 ^ help: there is a method with a similar name: `a`\n+   |                 ^ help: there is an associated function with a similar name: `a`\n \n error: aborting due to previous error\n "}, {"sha": "4c68b70fb165afe0295e13ae1839d6e93e7c25de", "filename": "src/test/ui/error-codes/E0624.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ferror-codes%2FE0624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ferror-codes%2FE0624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0624.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -8,5 +8,5 @@ mod inner {\n \n fn main() {\n     let foo = inner::Foo;\n-    foo.method(); //~ ERROR method `method` is private [E0624]\n+    foo.method(); //~ ERROR associated function `method` is private [E0624]\n }"}, {"sha": "65256c8dd2dd6f3b2b0f661fc4fb06355de877a3", "filename": "src/test/ui/error-codes/E0624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `method` is private\n+error[E0624]: associated function `method` is private\n   --> $DIR/E0624.rs:11:9\n    |\n LL |     foo.method();"}, {"sha": "94a2cfe013d190778b696ab943611b3365f63fbc", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -79,19 +79,19 @@ LL |     r.unstable_undeclared();\n    = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n-error[E0624]: method `pub_crate` is private\n+error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:50:7\n    |\n LL |     r.pub_crate();\n    |       ^^^^^^^^^\n \n-error[E0624]: method `pub_mod` is private\n+error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:51:7\n    |\n LL |     r.pub_mod();\n    |       ^^^^^^^\n \n-error[E0624]: method `private` is private\n+error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:52:7\n    |\n LL |     r.private();\n@@ -115,19 +115,19 @@ LL |     t.unstable_undeclared();\n    = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n-error[E0624]: method `pub_crate` is private\n+error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:63:7\n    |\n LL |     t.pub_crate();\n    |       ^^^^^^^^^\n \n-error[E0624]: method `pub_mod` is private\n+error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:64:7\n    |\n LL |     t.pub_mod();\n    |       ^^^^^^^\n \n-error[E0624]: method `private` is private\n+error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:65:7\n    |\n LL |     t.private();"}, {"sha": "2d7c86b8666f855347402710f07e3758d9b0d1f8", "filename": "src/test/ui/fn-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ffn-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ffn-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -8,7 +8,7 @@ fn hof<F>(_: F) where F: FnMut(()) {}\n \n fn ice() {\n     hof(|c| match c {\n-        A::new() => (), //~ ERROR expected tuple struct or tuple variant, found method\n+        A::new() => (), //~ ERROR expected tuple struct or tuple variant, found associated function\n         _ => ()\n     })\n }"}, {"sha": "2482d632695cce2d0a72aab2db5b04fe229ea7d6", "filename": "src/test/ui/fn-in-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `A::new`\n+error[E0164]: expected tuple struct or tuple variant, found associated function `A::new`\n   --> $DIR/fn-in-pat.rs:11:9\n    |\n LL |         A::new() => (),"}, {"sha": "b82b0b552e2dd6e15950b44356077a2f20e0ee24", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,10 +1,10 @@\n-error[E0521]: borrowed data escapes outside of method\n+error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-16683.rs:4:9\n    |\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the method body\n+   |          ----- `self` is a reference that is only valid in the associated function body\n LL |         self.a();\n-   |         ^^^^^^^^ `self` escapes the method body here\n+   |         ^^^^^^^^ `self` escapes the associated function body here\n \n error: aborting due to previous error\n "}, {"sha": "23557b4d956aa642ba76e155e43566b15dd12c96", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,10 +1,10 @@\n-error[E0521]: borrowed data escapes outside of method\n+error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-17758.rs:7:9\n    |\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the method body\n+   |            ----- `self` is a reference that is only valid in the associated function body\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the method body here\n+   |         ^^^^^^^^^^ `self` escapes the associated function body here\n \n error: aborting due to previous error\n "}, {"sha": "f62de7ce7dbe7651794abdf755b66b2d3494cb34", "filename": "src/test/ui/issues/issue-21202.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -8,7 +8,7 @@ mod B {\n     use crate1::A::Foo;\n     fn bar(f: Foo) {\n         Foo::foo(&f);\n-        //~^ ERROR: method `foo` is private\n+        //~^ ERROR: associated function `foo` is private\n     }\n }\n "}, {"sha": "18669add20551fd7d70be53dea61f981ed9c2c26", "filename": "src/test/ui/issues/issue-21202.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `foo` is private\n+error[E0624]: associated function `foo` is private\n   --> $DIR/issue-21202.rs:10:9\n    |\n LL |         Foo::foo(&f);"}, {"sha": "e34ac45e69db6b9940663f27b4853c416eb10e47", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -11,7 +11,7 @@ LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                         ^^^^^\n    |                         |\n    |                         function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |                         help: there is a method with a similar name: `bitxor`\n+   |                         help: there is an associated function with a similar name: `bitxor`\n \n error[E0191]: the value of the associated type `Output` (from trait `std::ops::BitXor`) must be specified\n   --> $DIR/issue-28344.rs:8:13\n@@ -26,7 +26,7 @@ LL |     let g = BitXor::bitor;\n    |                     ^^^^^\n    |                     |\n    |                     function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |                     help: there is a method with a similar name: `bitxor`\n+   |                     help: there is an associated function with a similar name: `bitxor`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "451321c55035d37a748bf38f47b707b0c341f04c", "filename": "src/test/ui/issues/issue-3763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -21,9 +21,9 @@ fn main() {\n     let _woohoo = (Box::new(my_struct)).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n \n-    (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n+    (&my_struct).happyfun();               //~ ERROR associated function `happyfun` is private\n \n-    (Box::new(my_struct)).happyfun();          //~ ERROR method `happyfun` is private\n+    (Box::new(my_struct)).happyfun();          //~ ERROR associated function `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "d548477a88ff80d1b1f585ce65771065704d4931", "filename": "src/test/ui/issues/issue-3763.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -10,13 +10,13 @@ error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0624]: method `happyfun` is private\n+error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:24:18\n    |\n LL |     (&my_struct).happyfun();\n    |                  ^^^^^^^^\n \n-error[E0624]: method `happyfun` is private\n+error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:26:27\n    |\n LL |     (Box::new(my_struct)).happyfun();"}, {"sha": "b97131a199227822d399b0481f5d3f189ad7170d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref` found for enum `std::option::Option<{in\n   --> $DIR/option-as_deref.rs:2:29\n    |\n LL |     let _result = &Some(42).as_deref();\n-   |                             ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n+   |                             ^^^^^^^^ help: there is an associated function with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::Deref`"}, {"sha": "f33e9c7823ee4fbd8e955a74e189fa8559910b8d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref` found for enum `std::result::Result<{in\n   --> $DIR/result-as_deref.rs:4:27\n    |\n LL |     let _result = &Ok(42).as_deref();\n-   |                           ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n+   |                           ^^^^^^^^ help: there is an associated function with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::Deref`"}, {"sha": "68ebfab95c47e79fddfd6632558ff62aad0e225e", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref_err` found for enum `std::result::Result\n   --> $DIR/result-as_deref_err.rs:4:28\n    |\n LL |     let _result = &Err(41).as_deref_err();\n-   |                            ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n+   |                            ^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::Deref`"}, {"sha": "d2ba1049b76ba0736ebd9982fa5eb135f7277d3d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref_mut` found for enum `std::result::Result\n   --> $DIR/result-as_deref_mut.rs:4:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();\n-   |                               ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_err`\n+   |                               ^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_err`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::DerefMut`"}, {"sha": "d724ae5c74bdefbc7ea94435c381d0db709e8f35", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref_mut_err` found for enum `std::result::Re\n   --> $DIR/result-as_deref_mut_err.rs:4:32\n    |\n LL |     let _result = &mut Err(41).as_deref_mut_err();\n-   |                                ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n+   |                                ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n            `{integer}: std::ops::DerefMut`"}, {"sha": "9e0437c46f4bdd826f7f79373826837ed542bef5", "filename": "src/test/ui/issues/issue-53498.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-53498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-53498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53498.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -13,5 +13,5 @@ pub mod test {\n }\n \n fn main() {\n-    test::Foo::<test::B>::foo(); //~ ERROR method `foo` is private\n+    test::Foo::<test::B>::foo(); //~ ERROR associated function `foo` is private\n }"}, {"sha": "042848c27bbdc083c1d8338a6ef106184d039b68", "filename": "src/test/ui/issues/issue-53498.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `foo` is private\n+error[E0624]: associated function `foo` is private\n   --> $DIR/issue-53498.rs:16:5\n    |\n LL |     test::Foo::<test::B>::foo();"}, {"sha": "faf78cfe8d9f88c461299c626ed543927d64fc18", "filename": "src/test/ui/issues/issue-55587.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n+error[E0164]: expected tuple struct or tuple variant, found associated function `Path::new`\n   --> $DIR/issue-55587.rs:4:9\n    |\n LL |     let Path::new();"}, {"sha": "4c78821157670e33099ddba363cbec96a8548b32", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            lifetime `'a` defined here\n LL | \n LL |         if x > y { x } else { y }\n-   |                    ^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |                    ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "11e7fa96d7ee947b5f329dde7bb5ffef96b6b620", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -7,7 +7,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          lifetime `'a` defined here\n LL | \n LL |     x\n-   |     ^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |     ^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "c41f08e691ac2f0c6723f5cd3157ea74ad1ae840", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            lifetime `'a` defined here\n LL | \n LL |         if true { x } else { self }\n-   |                              ^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |                              ^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "1a19e81f235ba5c984e9eb62d1aae52c11b2c08b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              |\n    |              let's call the lifetime of this reference `'2`\n LL |     x\n-   |     ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |     ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "87b13dc15914bf7dedf86d39bd37b6493add6a5f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                |\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self }\n-   |                   ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                   ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "297aa4cd95def012986e3929aa6b05f307a1e6a6", "filename": "src/test/ui/match/match-fn-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,12 +1,12 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n+error[E0164]: expected tuple struct or tuple variant, found associated function `Path::new`\n   --> $DIR/match-fn-call.rs:6:9\n    |\n LL |         Path::new(\"foo\") => println!(\"foo\"),\n    |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n    |\n    = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n-error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n+error[E0164]: expected tuple struct or tuple variant, found associated function `Path::new`\n   --> $DIR/match-fn-call.rs:8:9\n    |\n LL |         Path::new(\"bar\") => println!(\"bar\"),"}, {"sha": "40645309552ef16deb5b3e051e7aea217396a9ad", "filename": "src/test/ui/methods/method-path-in-pattern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -13,20 +13,20 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         Foo::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     }\n     match 0u32 {\n         <Foo>::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     }\n     match 0u32 {\n         <Foo>::trait_bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     }\n     if let Foo::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     if let <Foo>::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     if let Foo::trait_bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n }"}, {"sha": "1d1bdb6b052a8d7e247f0f2501cd4ad2a0331d14", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,34 +1,34 @@\n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:15:9\n    |\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n    |         ^^^^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:26:12\n    |\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}\n    |            ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:30:12\n    |\n LL |     if let Foo::trait_bar = 0u32 {}"}, {"sha": "2973800a4d43bea9a7832682eed2c525bc8aa7d1", "filename": "src/test/ui/methods/method-resolvable-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -9,6 +9,6 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         <Foo as MyTrait>::trait_bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `MyTrait::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n     }\n }"}, {"sha": "7c454a9a777c539e3ce20646d524f8cce54abe37", "filename": "src/test/ui/methods/method-resolvable-path-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected unit struct, unit variant or constant, found method `MyTrait::trait_bar`\n+error[E0532]: expected unit struct, unit variant or constant, found associated function `MyTrait::trait_bar`\n   --> $DIR/method-resolvable-path-in-pattern.rs:11:9\n    |\n LL |         <Foo as MyTrait>::trait_bar => {}"}, {"sha": "41e4d83aa9213be9d9fa07e704cd86e5757eb825", "filename": "src/test/ui/nll/outlives-suggestion-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -70,7 +70,7 @@ pub struct Foo2<'a> {\n impl<'a> Foo2<'a> {\n     // should not produce outlives suggestions to name 'self\n     fn get_bar(&self) -> Bar2 {\n-        Bar2::new(&self) //~ERROR borrowed data escapes outside of method\n+        Bar2::new(&self) //~ERROR borrowed data escapes outside of associated function\n     }\n }\n "}, {"sha": "6300ea66511fb9f7a0a1709c7a9f775a80772623", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -93,16 +93,16 @@ LL |         self.x\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-error[E0521]: borrowed data escapes outside of method\n+error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n LL |     fn get_bar(&self) -> Bar2 {\n    |                -----\n    |                |\n-   |                `self` declared here, outside of the method body\n-   |                `self` is a reference that is only valid in the method body\n+   |                `self` declared here, outside of the associated function body\n+   |                `self` is a reference that is only valid in the associated function body\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^ `self` escapes the method body here\n+   |         ^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e28fd13b97f2378d5d5a496136a4ca1392b6300b", "filename": "src/test/ui/privacy/privacy1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -74,7 +74,7 @@ mod bar {\n         }\n         self::baz::A;\n         self::baz::A::foo();\n-        self::baz::A::bar(); //~ ERROR: method `bar` is private\n+        self::baz::A::bar(); //~ ERROR: associated function `bar` is private\n         self::baz::A.foo2();\n \n         // this used to cause an ICE in privacy traversal.\n@@ -92,21 +92,21 @@ pub fn gpub() {}\n fn lol() {\n     bar::A;\n     bar::A::foo();\n-    bar::A::bar(); //~ ERROR: method `bar` is private\n+    bar::A::bar(); //~ ERROR: associated function `bar` is private\n     bar::A.foo2();\n }\n \n mod foo {\n     fn test() {\n         ::bar::A::foo();\n-        ::bar::A::bar();        //~ ERROR: method `bar` is private\n+        ::bar::A::bar();        //~ ERROR: associated function `bar` is private\n         ::bar::A.foo2();\n         ::bar::baz::A::foo();   //~ ERROR: module `baz` is private\n         ::bar::baz::A::bar();   //~ ERROR: module `baz` is private\n-                                //~^ ERROR: method `bar` is private\n+                                //~^ ERROR: associated function `bar` is private\n         ::bar::baz::A.foo2();   //~ ERROR: module `baz` is private\n         ::bar::baz::A.bar2();   //~ ERROR: module `baz` is private\n-                                //~^ ERROR: method `bar2` is private\n+                                //~^ ERROR: associated function `bar2` is private\n \n         let _: isize =\n         ::bar::B::foo();        //~ ERROR: trait `B` is private"}, {"sha": "ec2bc0d84ac0e32c82130d90b17131df24f028b3", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -154,31 +154,31 @@ note: the trait `B` is defined here\n LL |     trait B {\n    |     ^^^^^^^\n \n-error[E0624]: method `bar` is private\n+error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:77:9\n    |\n LL |         self::baz::A::bar();\n    |         ^^^^^^^^^^^^^^^^^\n \n-error[E0624]: method `bar` is private\n+error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:95:5\n    |\n LL |     bar::A::bar();\n    |     ^^^^^^^^^^^\n \n-error[E0624]: method `bar` is private\n+error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:102:9\n    |\n LL |         ::bar::A::bar();\n    |         ^^^^^^^^^^^^^\n \n-error[E0624]: method `bar` is private\n+error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:105:9\n    |\n LL |         ::bar::baz::A::bar();\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error[E0624]: method `bar2` is private\n+error[E0624]: associated function `bar2` is private\n   --> $DIR/privacy1.rs:108:23\n    |\n LL |         ::bar::baz::A.bar2();"}, {"sha": "f7be6726c5eaa73d99d7fafcda4334c4afc06f9c", "filename": "src/test/ui/privacy/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -17,5 +17,5 @@ fn f() {\n fn main() {\n     let s = a::Foo { x: 1 };\n     s.bar();\n-    s.foo();    //~ ERROR method `foo` is private\n+    s.foo();    //~ ERROR associated function `foo` is private\n }"}, {"sha": "6833cdb4df9db49f5cca022f5dae33b65e00d06a", "filename": "src/test/ui/privacy/private-impl-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `foo` is private\n+error[E0624]: associated function `foo` is private\n   --> $DIR/private-impl-method.rs:20:7\n    |\n LL |     s.foo();"}, {"sha": "ab3bbdfe496696ca0f6deca0ec69e87f1111966c", "filename": "src/test/ui/privacy/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,5 +4,5 @@ use cci_class_5::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  nyan.nap();   //~ ERROR method `nap` is private\n+  nyan.nap();   //~ ERROR associated function `nap` is private\n }"}, {"sha": "6b49063815a6691b23e2c93c2bc114ecc2a30727", "filename": "src/test/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `nap` is private\n+error[E0624]: associated function `nap` is private\n   --> $DIR/private-method-cross-crate.rs:7:8\n    |\n LL |   nyan.nap();"}, {"sha": "2f6454288ae6884a9e731e62f60d0874ccf0c27c", "filename": "src/test/ui/privacy/private-method-inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -10,5 +10,5 @@ mod a {\n \n fn main() {\n     let x = a::Foo;\n-    x.f();  //~ ERROR method `f` is private\n+    x.f();  //~ ERROR associated function `f` is private\n }"}, {"sha": "5551e1bd759078d0944bd2a67f861adb09dfa596", "filename": "src/test/ui/privacy/private-method-inherited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `f` is private\n+error[E0624]: associated function `f` is private\n   --> $DIR/private-method-inherited.rs:13:7\n    |\n LL |     x.f();"}, {"sha": "76a642cde1a8aff461601be2d06b8f138c9d71dc", "filename": "src/test/ui/privacy/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -19,5 +19,5 @@ mod kitties {\n \n fn main() {\n   let nyan : kitties::Cat = kitties::cat(52, 99);\n-  nyan.nap(); //~ ERROR method `nap` is private\n+  nyan.nap(); //~ ERROR associated function `nap` is private\n }"}, {"sha": "583dc123e246bb2de36d216e900ccce7bbb81ef3", "filename": "src/test/ui/privacy/private-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `nap` is private\n+error[E0624]: associated function `nap` is private\n   --> $DIR/private-method.rs:22:8\n    |\n LL |   nyan.nap();"}, {"sha": "e73f723ed0ab63bf7e65c31eb4d87fc1307d304f", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -52,13 +52,13 @@ error[E0616]: field `x` of struct `foo::bar::S` is private\n LL |     S::default().x;\n    |     ^^^^^^^^^^^^^^\n \n-error[E0624]: method `f` is private\n+error[E0624]: associated function `f` is private\n   --> $DIR/test.rs:32:18\n    |\n LL |     S::default().f();\n    |                  ^\n \n-error[E0624]: method `g` is private\n+error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:33:5\n    |\n LL |     S::g();\n@@ -76,13 +76,13 @@ error[E0616]: field `z` of struct `pub_restricted::Universe` is private\n LL |     let _ = u.z;\n    |             ^^^\n \n-error[E0624]: method `g` is private\n+error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:45:7\n    |\n LL |     u.g();\n    |       ^\n \n-error[E0624]: method `h` is private\n+error[E0624]: associated function `h` is private\n   --> $DIR/test.rs:46:7\n    |\n LL |     u.h();"}, {"sha": "65549d909d0470325eae3b48bcd1e6a16d0b320b", "filename": "src/test/ui/qualified/qualified-path-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -18,7 +18,7 @@ impl S {\n fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<<S as Tr>::A>::f<u8>`\n+    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n         0 ..= <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n     }\n }"}, {"sha": "7ff43f4404c54e6e9f920538eeac2c6cdd4e3f60", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found method `<<S as Tr>::A>::f<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<<S as Tr>::A>::f<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}, {"sha": "57374b7e3bb277d9e9c1bfe9010935e8bf57f43a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |         |\n    |                          |         let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -11,7 +11,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |          |\n    |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -20,7 +20,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              -                             ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  --              -                             ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |                  |               |\n    |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here"}, {"sha": "17099201d11107028f2dc985af767d7e9175c8d3", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                    -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |         |\n    |                    |         let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -11,7 +11,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                    -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |          |\n    |                    |          let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -20,7 +20,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |            |\n    |            lifetime `'a` defined here\n "}, {"sha": "c10b8824e6d63d6d36114d92016d1dab9f5025f2", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:19:9\n@@ -16,7 +16,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:23:9\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:27:9\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:31:9\n@@ -46,7 +46,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:35:9\n@@ -56,7 +56,7 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e2de743b8f63eb1aaf7f08432d56b33e9dd4b9f4", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:17:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:21:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:25:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:29:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:33:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   |\n    |                                   let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "19496a5ef6d326eaf10b8e28f00e12615cdf88be", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:19:9\n@@ -16,7 +16,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:23:9\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:27:9\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:31:9\n@@ -46,7 +46,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:35:9\n@@ -56,7 +56,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "94bfc5f4a818693776b35b4fc60e72b399d87f85", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:17:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:21:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:25:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:29:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:33:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "94671c7c87a5e516113ea7a986bf366ba70f3130", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:17:9\n@@ -16,7 +16,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:21:9\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:25:9\n@@ -36,7 +36,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:29:9\n@@ -46,7 +46,7 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c9e7479ea5dff46a2154088e44e1c877a74837c5", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:15:9\n@@ -16,7 +16,7 @@ LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:19:9\n@@ -26,7 +26,7 @@ LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:23:9\n@@ -36,7 +36,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:27:9\n@@ -46,7 +46,7 @@ LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d1fd209102e6952454549b03a34501e1b54ca321", "filename": "src/test/ui/self/elision/ref-self.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:27:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:31:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:35:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:39:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:43:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:47:9\n@@ -66,7 +66,7 @@ LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                      |\n    |                                      let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9361b6f3f81f429eb20393248016a3fcee3e6c9b", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:17:9\n@@ -16,7 +16,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:21:9\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:25:9\n@@ -36,7 +36,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:29:9\n@@ -46,7 +46,7 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           |\n    |                                           let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e1cc38b7c952f949b95ed227592ac40214e43e0d", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:15:9\n@@ -16,7 +16,7 @@ LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:19:9\n@@ -26,7 +26,7 @@ LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:23:9\n@@ -36,7 +36,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:27:9\n@@ -46,7 +46,7 @@ LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "35d994e194f3f9ec4c3f119767ca98f866cbb318", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n    |                                       ^^^\n    |                                       |\n-   |                                       cannot infer type for type parameter `S` declared on the method `sum`\n+   |                                       cannot infer type for type parameter `S` declared on the associated function `sum`\n    |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n    |\n    = note: type must be known at this point"}, {"sha": "9ee59b320edcdd5727d87b3b7031246086e0145d", "filename": "src/test/ui/static/static-method-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -6,5 +6,5 @@ mod a {\n }\n \n fn main() {\n-    let _ = a::S::new();    //~ ERROR method `new` is private\n+    let _ = a::S::new();    //~ ERROR associated function `new` is private\n }"}, {"sha": "78d211438cc920b84bb387c95924bda34e29c829", "filename": "src/test/ui/static/static-method-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `new` is private\n+error[E0624]: associated function `new` is private\n   --> $DIR/static-method-privacy.rs:9:13\n    |\n LL |     let _ = a::S::new();"}, {"sha": "c343071ac3e0c27ee9e56e0c9ed5a02e6ba16264", "filename": "src/test/ui/suggestions/suggest-methods.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -5,19 +5,19 @@ LL | struct Foo;\n    | ----------- method `bat` not found for this\n ...\n LL |     f.bat(1.0);\n-   |       ^^^ help: there is a method with a similar name: `bar`\n+   |       ^^^ help: there is an associated function with a similar name: `bar`\n \n error[E0599]: no method named `is_emtpy` found for struct `std::string::String` in the current scope\n   --> $DIR/suggest-methods.rs:21:15\n    |\n LL |     let _ = s.is_emtpy();\n-   |               ^^^^^^^^ help: there is a method with a similar name: `is_empty`\n+   |               ^^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n \n error[E0599]: no method named `count_eos` found for type `u32` in the current scope\n   --> $DIR/suggest-methods.rs:25:19\n    |\n LL |     let _ = 63u32.count_eos();\n-   |                   ^^^^^^^^^ help: there is a method with a similar name: `count_zeros`\n+   |                   ^^^^^^^^^ help: there is an associated function with a similar name: `count_zeros`\n \n error[E0599]: no method named `count_o` found for type `u32` in the current scope\n   --> $DIR/suggest-methods.rs:28:19"}, {"sha": "1ea1d65df627ce676c86db77ec75578b27d7bb4f", "filename": "src/test/ui/traits/trait-item-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -69,7 +69,7 @@ fn check_method() {\n     S.c(); // OK\n     // a, b, c are resolved as inherent items, their traits don't need to be in scope\n     let c = &S as &dyn C;\n-    c.a(); //~ ERROR method `a` is private\n+    c.a(); //~ ERROR associated function `a` is private\n     c.b(); // OK\n     c.c(); // OK\n \n@@ -81,7 +81,7 @@ fn check_method() {\n     //~^ ERROR no function or associated item named `b` found\n     S::c(&S); // OK\n     // a, b, c are resolved as inherent items, their traits don't need to be in scope\n-    C::a(&S); //~ ERROR method `a` is private\n+    C::a(&S); //~ ERROR associated function `a` is private\n     C::b(&S); // OK\n     C::c(&S); // OK\n }"}, {"sha": "4b40c6405c47b25d7c3f8add939a468789aeee09", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -36,7 +36,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use method::B;\n    |\n \n-error[E0624]: method `a` is private\n+error[E0624]: associated function `a` is private\n   --> $DIR/trait-item-privacy.rs:72:7\n    |\n LL |     c.a();\n@@ -73,7 +73,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use method::B;\n    |\n \n-error[E0624]: method `a` is private\n+error[E0624]: associated function `a` is private\n   --> $DIR/trait-item-privacy.rs:84:5\n    |\n LL |     C::a(&S);"}, {"sha": "035c1ea092b291efa79255136f41ad2a7c4864a5", "filename": "src/test/ui/traits/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,4 +1,4 @@\n-error[E0624]: method `method` is private\n+error[E0624]: associated function `method` is private\n   --> $DIR/trait-method-private.rs:19:9\n    |\n LL |     foo.method();"}, {"sha": "24122e658679a39df43f7d7b81b45b7e37d4d9ac", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |         .or_else(|err| {\n    |          ^^^^^^^\n    |          |\n-   |          cannot infer type for type parameter `F` declared on the method `or_else`\n+   |          cannot infer type for type parameter `F` declared on the associated function `or_else`\n    |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n \n error: aborting due to previous error"}, {"sha": "bb108adcd64af53d4568c5d31888ab4e024a3914", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n    |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n    |         |\n-   |         cannot infer type for type parameter `K` declared on the method `sort_by_key`\n+   |         cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n \n error: aborting due to previous error\n "}, {"sha": "e6470aa6d64f07d82110e9b503cbe8ca7d011327", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -49,8 +49,8 @@ fn main() {\n     <u8 as Tr::Y>::NN; //~ ERROR cannot find method or associated constant `NN` in `Tr::Y`\n     <u8 as E::Y>::NN; //~ ERROR failed to resolve: `Y` is a variant, not a module\n \n-    let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found method `Dr::Z`\n+    let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found associated function `Dr::Z`\n     <u8 as Dr>::X; //~ ERROR expected method or associated constant, found associated type `Dr::X`\n-    let _: <u8 as Dr>::Z::N; //~ ERROR expected associated type, found method `Dr::Z`\n+    let _: <u8 as Dr>::Z::N; //~ ERROR expected associated type, found associated function `Dr::Z`\n     <u8 as Dr>::X::N; //~ ERROR no associated item named `N` found for type `u16`\n }"}, {"sha": "7177ca4908545c64f554f4c94bd1c33023c54866", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -35,10 +35,10 @@ error[E0576]: cannot find method or associated constant `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:22:17\n    |\n LL |     fn Y() {}\n-   |     --------- similarly named method `Y` defined here\n+   |     --------- similarly named associated function `Y` defined here\n ...\n LL |     <u8 as Tr>::N;\n-   |                 ^ help: a method with a similar name exists: `Y`\n+   |                 ^ help: an associated function with a similar name exists: `Y`\n \n error[E0576]: cannot find method or associated constant `N` in enum `E`\n   --> $DIR/ufcs-partially-resolved.rs:23:16\n@@ -166,7 +166,7 @@ error[E0576]: cannot find method or associated constant `NN` in `Tr::Y`\n LL |     <u8 as Tr::Y>::NN;\n    |                    ^^ not found in `Tr::Y`\n \n-error[E0575]: expected associated type, found method `Dr::Z`\n+error[E0575]: expected associated type, found associated function `Dr::Z`\n   --> $DIR/ufcs-partially-resolved.rs:52:12\n    |\n LL |     type X = u16;\n@@ -181,16 +181,16 @@ error[E0575]: expected method or associated constant, found associated type `Dr:\n   --> $DIR/ufcs-partially-resolved.rs:53:5\n    |\n LL |     fn Z() {}\n-   |     --------- similarly named method `Z` defined here\n+   |     --------- similarly named associated function `Z` defined here\n ...\n LL |     <u8 as Dr>::X;\n    |     ^^^^^^^^^^^^-\n    |                 |\n-   |                 help: a method with a similar name exists: `Z`\n+   |                 help: an associated function with a similar name exists: `Z`\n    |\n    = note: can't use a type alias as a constructor\n \n-error[E0575]: expected associated type, found method `Dr::Z`\n+error[E0575]: expected associated type, found associated function `Dr::Z`\n   --> $DIR/ufcs-partially-resolved.rs:54:12\n    |\n LL |     type X = u16;"}, {"sha": "f05994646b3c489bb1882db2dd605457225856f8", "filename": "src/test/ui/xc-private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,8 +4,8 @@ extern crate xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct::static_meth_struct();\n-    //~^ ERROR: method `static_meth_struct` is private\n+    //~^ ERROR: associated function `static_meth_struct` is private\n \n     let _ = xc_private_method_lib::Enum::static_meth_enum();\n-    //~^ ERROR: method `static_meth_enum` is private\n+    //~^ ERROR: associated function `static_meth_enum` is private\n }"}, {"sha": "6a68bef90efd7a80349c6e530d54b44920d98e32", "filename": "src/test/ui/xc-private-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,10 +1,10 @@\n-error[E0624]: method `static_meth_struct` is private\n+error[E0624]: associated function `static_meth_struct` is private\n   --> $DIR/xc-private-method.rs:6:13\n    |\n LL |     let _ = xc_private_method_lib::Struct::static_meth_struct();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0624]: method `static_meth_enum` is private\n+error[E0624]: associated function `static_meth_enum` is private\n   --> $DIR/xc-private-method.rs:9:13\n    |\n LL |     let _ = xc_private_method_lib::Enum::static_meth_enum();"}, {"sha": "92946923f6e70ae0d04cc6c4ea18a09287811742", "filename": "src/test/ui/xc-private-method2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.rs?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -4,8 +4,8 @@ extern crate xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n-    //~^ ERROR method `meth_struct` is private\n+    //~^ ERROR associated function `meth_struct` is private\n \n     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n-    //~^ ERROR method `meth_enum` is private\n+    //~^ ERROR associated function `meth_enum` is private\n }"}, {"sha": "84a8b9817c0d076f79d8e9b711259918bd1dbe71", "filename": "src/test/ui/xc-private-method2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40272ca6f9cba29632406efde371dc5c9751fe9/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.stderr?ref=f40272ca6f9cba29632406efde371dc5c9751fe9", "patch": "@@ -1,10 +1,10 @@\n-error[E0624]: method `meth_struct` is private\n+error[E0624]: associated function `meth_struct` is private\n   --> $DIR/xc-private-method2.rs:6:52\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n    |                                                    ^^^^^^^^^^^\n \n-error[E0624]: method `meth_enum` is private\n+error[E0624]: associated function `meth_enum` is private\n   --> $DIR/xc-private-method2.rs:9:55\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();"}]}