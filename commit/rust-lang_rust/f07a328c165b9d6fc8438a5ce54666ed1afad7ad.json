{"sha": "f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2EzMjhjMTY1YjlkNmZjODQzOGE1Y2U1NDY2NmVkMWFmYWQ3YWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T22:51:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T22:51:47Z"}, "message": "Convert rust_list_files to istrs. Issue #855", "tree": {"sha": "28b3d64b491d9cebb6517e5b306576caa1ee62f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b3d64b491d9cebb6517e5b306576caa1ee62f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "html_url": "https://github.com/rust-lang/rust/commit/f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82634cd530cc539854454321dea7598f29f81815", "url": "https://api.github.com/repos/rust-lang/rust/commits/82634cd530cc539854454321dea7598f29f81815", "html_url": "https://github.com/rust-lang/rust/commit/82634cd530cc539854454321dea7598f29f81815"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "abc8c14ea3a9fb50cf834fe824dc9a41e6d8cd67", "filename": "src/lib/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "patch": "@@ -53,8 +53,7 @@ fn list_dir(p: &path) -> [istr] {\n     let pl = istr::byte_len(p);\n     if pl == 0u || p[pl - 1u] as char != os_fs::path_sep { p += path_sep(); }\n     let full_paths: [istr] = [];\n-    for filename: str in os_fs::list_dir(istr::to_estr(p)) {\n-        let filename = istr::from_estr(filename);\n+    for filename: istr in os_fs::list_dir(p) {\n         if !istr::eq(filename, ~\".\") {\n             if !istr::eq(filename, ~\"..\") { full_paths += [p + filename]; }\n         }"}, {"sha": "1a346ed661a8041373191a0245276ce636f4ce22", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "patch": "@@ -1,12 +1,11 @@\n \n native \"rust\" mod rustrt {\n-    fn rust_list_files(path: str) -> @[str];\n+    fn rust_list_files(path: &istr) -> [istr];\n     fn rust_dirent_filename(ent: os::libc::dirent) -> str;\n }\n \n-fn list_dir(path: str) -> [str] {\n-    ret *rustrt::rust_list_files(path);\n-    // TODO ensure this is always closed\n+fn list_dir(path: &istr) -> [istr] {\n+    ret rustrt::rust_list_files(path);\n \n     // FIXME: No idea why, but this appears to corrupt memory on OSX. I\n     // suspect it has to do with the tasking primitives somehow, or perhaps"}, {"sha": "228773ef6dbc7dcc3bfc4d71c3c0192a6cb3df8c", "filename": "src/lib/win32_fs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Flib%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_fs.rs?ref=f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "patch": "@@ -1,11 +1,14 @@\n \n \n native \"rust\" mod rustrt {\n-    fn rust_list_files(path: str) -> @[str];\n+    fn rust_list_files(path: &istr) -> [istr];\n     fn rust_file_is_dir(path: str) -> int;\n }\n \n-fn list_dir(path: str) -> [str] { ret *rustrt::rust_list_files(path + \"*\"); }\n+fn list_dir(path: &istr) -> [istr] {\n+    let path = path + ~\"*\";\n+    ret rustrt::rust_list_files(path);\n+}\n \n fn path_is_absolute(p: &istr) -> bool {\n     ret istr::char_at(p, 0u) == '/' ||"}, {"sha": "b864ade691105db5f7fa86be6504d373e452aa73", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "patch": "@@ -383,41 +383,42 @@ rust_str* c_str_to_rust(rust_task *task, char const *str) {\n     return vec_alloc_with_data(task, len, len, 1, (void*)str);\n }\n \n-extern \"C\" CDECL rust_box*\n-rust_list_files(rust_task *task, rust_str *path) {\n-    array_list<rust_str*> strings;\n+extern \"C\" CDECL rust_vec*\n+rust_list_files(rust_task *task, rust_vec **path) {\n+    array_list<rust_vec*> strings;\n #if defined(__WIN32__)\n     WIN32_FIND_DATA FindFileData;\n-    HANDLE hFind = FindFirstFile((char*)path->data, &FindFileData);\n+    HANDLE hFind = FindFirstFile((char*)(*path)->data, &FindFileData);\n     if (hFind != INVALID_HANDLE_VALUE) {\n         do {\n-            strings.push(c_str_to_rust(task, FindFileData.cFileName));\n+            rust_vec *str = make_istr(task->kernel, FindFileData.cFileName,\n+                                      strlen(FindFileData.cFileName),\n+                                      \"list_files_str\");\n+            strings.push(str);\n         } while (FindNextFile(hFind, &FindFileData));\n         FindClose(hFind);\n     }\n #else\n-  DIR *dirp = opendir((char*)path->data);\n+    DIR *dirp = opendir((char*)(*path)->data);\n   if (dirp) {\n       struct dirent *dp;\n-      while ((dp = readdir(dirp)))\n-          strings.push(c_str_to_rust(task, dp->d_name));\n+      while ((dp = readdir(dirp))) {\n+          rust_vec *str = make_istr(task->kernel, dp->d_name,\n+                                    strlen(dp->d_name),\n+                                    \"list_files_str\");\n+          strings.push(str);\n+      }\n       closedir(dirp);\n   }\n #endif\n-  rust_box *box =\n-      (rust_box *)task->malloc(sizeof(rust_box) + sizeof(rust_vec*),\n-                               \"rust_box(list_files_vec)\");\n-  rust_vec* vec =\n-      (rust_vec*)task->kernel->malloc(vec_size<rust_str*>(strings.size()),\n-                                       \"list_files_vec\");\n-\n-  box->ref_count = 1;\n-  rust_vec** box_content = (rust_vec**)&box->data[0];\n-  *box_content = vec;\n-  size_t alloc_sz = sizeof(rust_str*) * strings.size();\n+\n+  rust_vec *vec = (rust_vec *)\n+      task->kernel->malloc(vec_size<rust_vec*>(strings.size()),\n+                           \"list_files_vec\");\n+  size_t alloc_sz = sizeof(rust_vec*) * strings.size();\n   vec->fill = vec->alloc = alloc_sz;\n   memcpy(&vec->data[0], strings.data(), alloc_sz);\n-  return box;\n+  return vec;\n }\n \n #if defined(__WIN32__)"}, {"sha": "f2e4923280056630aabb58a883633379fffc1f27", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07a328c165b9d6fc8438a5ce54666ed1afad7ad/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=f07a328c165b9d6fc8438a5ce54666ed1afad7ad", "patch": "@@ -14,6 +14,17 @@ fn test_connect() {\n #[test]\n fn test_list_dir_no_invalid_memory_access() { fs::list_dir(~\".\"); }\n \n+#[test]\n+fn list_dir() {\n+    let dirs = fs::list_dir(~\".\");\n+    // Just assuming that we've got some contents in the current directory\n+    assert std::vec::len(dirs) > 0u;\n+\n+    for dir in dirs {\n+        log dir;\n+    }\n+}\n+\n #[test]\n fn file_is_dir() {\n     assert fs::file_is_dir(~\".\");"}]}