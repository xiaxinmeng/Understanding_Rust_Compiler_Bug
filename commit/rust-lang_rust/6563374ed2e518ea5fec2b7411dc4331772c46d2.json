{"sha": "6563374ed2e518ea5fec2b7411dc4331772c46d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NjMzNzRlZDJlNTE4ZWE1ZmVjMmI3NDExZGM0MzMxNzcyYzQ2ZDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-17T18:18:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-20T11:39:31Z"}, "message": "rustc: replace interior_unsafe with a Freeze trait.", "tree": {"sha": "6211971da9ad119e25d1b2c2e13960c65611a29d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6211971da9ad119e25d1b2c2e13960c65611a29d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6563374ed2e518ea5fec2b7411dc4331772c46d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6563374ed2e518ea5fec2b7411dc4331772c46d2", "html_url": "https://github.com/rust-lang/rust/commit/6563374ed2e518ea5fec2b7411dc4331772c46d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6563374ed2e518ea5fec2b7411dc4331772c46d2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5c311dc1dcb5bfe65d6eecd0dfda04d77c7594", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5c311dc1dcb5bfe65d6eecd0dfda04d77c7594", "html_url": "https://github.com/rust-lang/rust/commit/3f5c311dc1dcb5bfe65d6eecd0dfda04d77c7594"}], "stats": {"total": 103, "additions": 83, "deletions": 20}, "files": [{"sha": "c0aa650a1e854735b6aca0746e14bae1b65bd360", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -16,6 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use cell::UnsafeCell;\n use cmp;\n use hash::Hash;\n use hash::Hasher;\n@@ -553,3 +554,19 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n }\n+\n+/// Compiler-internal trait used to determine whether a type contains\n+/// any `UnsafeCell` internally, but not through an indirection.\n+/// This affects, for example, whether a `static` of that type is\n+/// placed in read-only static memory or writable static memory.\n+#[cfg_attr(not(stage0), lang = \"freeze\")]\n+unsafe trait Freeze {}\n+\n+unsafe impl Freeze for .. {}\n+\n+impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n+unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n+unsafe impl<T: ?Sized> Freeze for *const T {}\n+unsafe impl<T: ?Sized> Freeze for *mut T {}\n+unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n+unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}"}, {"sha": "32dfb63d6150a5933d13294120e30a459ed4487f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -274,6 +274,7 @@ language_item_table! {\n     UnsizeTraitLangItem,             \"unsize\",                  unsize_trait;\n     CopyTraitLangItem,               \"copy\",                    copy_trait;\n     SyncTraitLangItem,               \"sync\",                    sync_trait;\n+    FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n \n     DropTraitLangItem,               \"drop\",                    drop_trait;\n "}, {"sha": "a1cb848213a8f5043f973f5f07f6e8ff57e94b30", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -24,8 +24,7 @@ bitflags! {\n     /// easier for me (nmatsakis) to think about what is contained within\n     /// a type than to think about what is *not* contained within a type.\n     flags TypeContents: u8 {\n-        const INTERIOR_UNSAFE   = 0b01,\n-        const OWNS_DTOR         = 0b10,\n+        const OWNS_DTOR         = 0b1,\n     }\n }\n \n@@ -34,10 +33,6 @@ impl TypeContents {\n         if cond {*self} else {TypeContents::empty()}\n     }\n \n-    pub fn interior_unsafe(&self) -> bool {\n-        self.intersects(TypeContents::INTERIOR_UNSAFE)\n-    }\n-\n     pub fn needs_drop(&self, _: TyCtxt) -> bool {\n         self.intersects(TypeContents::OWNS_DTOR)\n     }\n@@ -124,17 +119,12 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                     // unions don't have destructors regardless of the child types\n                         - TypeContents::OWNS_DTOR.when(def.is_union())\n                         | TypeContents::OWNS_DTOR.when(def.has_dtor(tcx))\n-                        | TypeContents::INTERIOR_UNSAFE.when(\n-                            Some(def.did) == tcx.lang_items.unsafe_cell_type())\n                 }\n \n-\n                 ty::TyDynamic(..) |\n                 ty::TyProjection(..) |\n                 ty::TyParam(_) |\n-                ty::TyAnon(..) => {\n-                    TypeContents::INTERIOR_UNSAFE | TypeContents::OWNS_DTOR\n-                }\n+                ty::TyAnon(..) => TypeContents::OWNS_DTOR,\n \n                 ty::TyInfer(_) |\n                 ty::TyError => {"}, {"sha": "7325235ca7b7648c746a8d181c2f08932e99d1d9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -425,6 +425,8 @@ bitflags! {\n         const IS_SIZED          = 1 << 17,\n         const MOVENESS_CACHED   = 1 << 18,\n         const MOVES_BY_DEFAULT  = 1 << 19,\n+        const FREEZENESS_CACHED = 1 << 20,\n+        const IS_FREEZE         = 1 << 21,\n     }\n }\n \n@@ -1181,6 +1183,9 @@ pub struct ParameterEnvironment<'tcx> {\n \n     /// A cache for `type_is_sized`\n     pub is_sized_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n+\n+    /// A cache for `type_is_freeze`\n+    pub is_freeze_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n }\n \n impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n@@ -1195,6 +1200,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             free_id_outlive: self.free_id_outlive,\n             is_copy_cache: RefCell::new(FxHashMap()),\n             is_sized_cache: RefCell::new(FxHashMap()),\n+            is_freeze_cache: RefCell::new(FxHashMap()),\n         }\n     }\n \n@@ -2531,6 +2537,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             free_id_outlive: free_id_outlive,\n             is_copy_cache: RefCell::new(FxHashMap()),\n             is_sized_cache: RefCell::new(FxHashMap()),\n+            is_freeze_cache: RefCell::new(FxHashMap()),\n         }\n     }\n \n@@ -2603,6 +2610,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             free_id_outlive: free_id_outlive,\n             is_copy_cache: RefCell::new(FxHashMap()),\n             is_sized_cache: RefCell::new(FxHashMap()),\n+            is_freeze_cache: RefCell::new(FxHashMap()),\n         };\n \n         let cause = traits::ObligationCause::misc(span, free_id_outlive.node_id(&self.region_maps));"}, {"sha": "d43d570397b442d1e06de14b55e141414bdc022b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -655,6 +655,50 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         result\n     }\n \n+    /// Returns `true` if and only if there are no `UnsafeCell`s\n+    /// nested within the type (ignoring `PhantomData` or pointers).\n+    #[inline]\n+    pub fn is_freeze(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                     param_env: &ParameterEnvironment<'tcx>,\n+                     span: Span) -> bool\n+    {\n+        if self.flags.get().intersects(TypeFlags::FREEZENESS_CACHED) {\n+            return self.flags.get().intersects(TypeFlags::IS_FREEZE);\n+        }\n+\n+        self.is_freeze_uncached(tcx, param_env, span)\n+    }\n+\n+    fn is_freeze_uncached(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          param_env: &ParameterEnvironment<'tcx>,\n+                          span: Span) -> bool {\n+        assert!(!self.needs_infer());\n+\n+        // Fast-path for primitive types\n+        let result = match self.sty {\n+            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n+            TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n+            TyStr | TyNever => Some(true),\n+\n+            TyArray(..) | TySlice(_) |\n+            TyTuple(..) | TyClosure(..) | TyAdt(..) |\n+            TyDynamic(..) | TyProjection(..) | TyParam(..) |\n+            TyInfer(..) | TyAnon(..) | TyError => None\n+        }.unwrap_or_else(|| {\n+            self.impls_bound(tcx, param_env, tcx.require_lang_item(lang_items::FreezeTraitLangItem),\n+                              &param_env.is_freeze_cache, span) });\n+\n+        if !self.has_param_types() && !self.has_self_ty() {\n+            self.flags.set(self.flags.get() | if result {\n+                TypeFlags::FREEZENESS_CACHED | TypeFlags::IS_FREEZE\n+            } else {\n+                TypeFlags::FREEZENESS_CACHED\n+            });\n+        }\n+\n+        result\n+    }\n+\n     #[inline]\n     pub fn layout<'lcx>(&'tcx self, infcx: &InferCtxt<'a, 'tcx, 'lcx>)\n                         -> Result<&'tcx Layout, LayoutError<'tcx>> {"}, {"sha": "cc7d25628432efea45b8822da752ebea2374478e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> Qualif {\n     fn restrict(&mut self, ty: Ty<'tcx>,\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 param_env: &ty::ParameterEnvironment<'tcx>) {\n-        if !ty.type_contents(tcx).interior_unsafe() {\n+        if ty.is_freeze(tcx, param_env, DUMMY_SP) {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n         if !tcx.type_needs_drop_given_env(ty, param_env) {"}, {"sha": "535c6a7ab9e126f1e050c4845ecbd0f029544036", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -46,7 +46,7 @@ use rustc::lint::builtin::CONST_ERR;\n \n use rustc::hir::{self, PatKind, RangeEnd};\n use syntax::ast;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n \n use std::collections::hash_map::Entry;\n@@ -85,7 +85,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n     // Adds the worst effect out of all the values of one type.\n     fn add_type(&mut self, ty: Ty<'gcx>) {\n-        if ty.type_contents(self.tcx).interior_unsafe() {\n+        if !ty.is_freeze(self.tcx, &self.param_env, DUMMY_SP) {\n             self.promotable = false;\n         }\n "}, {"sha": "e0a75f3caa7b36976e003b274603bc5749bdf513", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -746,13 +746,13 @@ impl<'a, 'tcx> FnType<'tcx> {\n                 // `&T` where `T` contains no `UnsafeCell<U>` is immutable, and can be marked as\n                 // both `readonly` and `noalias`, as LLVM's definition of `noalias` is based solely\n                 // on memory dependencies rather than pointer equality\n-                let interior_unsafe = mt.ty.type_contents(ccx.tcx()).interior_unsafe();\n+                let is_freeze = ccx.shared().type_is_freeze(mt.ty);\n \n-                if mt.mutbl != hir::MutMutable && !interior_unsafe {\n+                if mt.mutbl != hir::MutMutable && is_freeze {\n                     arg.attrs.set(ArgAttribute::NoAlias);\n                 }\n \n-                if mt.mutbl == hir::MutImmutable && !interior_unsafe {\n+                if mt.mutbl == hir::MutImmutable && is_freeze {\n                     arg.attrs.set(ArgAttribute::ReadOnly);\n                 }\n "}, {"sha": "eb3ac309be16d252353b10468c59927b3dd4d133", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -261,8 +261,7 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // As an optimization, all shared statics which do not have interior\n         // mutability are placed into read-only memory.\n         if m != hir::MutMutable {\n-            let tcontents = ty.type_contents(ccx.tcx());\n-            if !tcontents.interior_unsafe() {\n+            if ccx.shared().type_is_freeze(ty) {\n                 llvm::LLVMSetGlobalConstant(g, llvm::True);\n             }\n         }"}, {"sha": "fd9ff17cc64891f5623801278b65cfd91bb98c24", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6563374ed2e518ea5fec2b7411dc4331772c46d2/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=6563374ed2e518ea5fec2b7411dc4331772c46d2", "patch": "@@ -399,6 +399,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         ty.is_sized(self.tcx, &self.empty_param_env, DUMMY_SP)\n     }\n \n+    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n+        ty.is_freeze(self.tcx, &self.empty_param_env, DUMMY_SP)\n+    }\n+\n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n         &self.exported_symbols\n     }"}]}