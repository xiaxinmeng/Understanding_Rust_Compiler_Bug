{"sha": "6b2aaaf6687c7435e4f7ec44a4ff198d788cc200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMmFhYWY2Njg3Yzc0MzVlNGY3ZWM0NGE0ZmYxOThkNzg4Y2MyMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-18T01:18:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-18T01:18:14Z"}, "message": "Auto merge of #41340 - eddyb:demand-assoc-defids, r=nikomatsakis\n\nrustc: move associated_item_def_ids to an on-demand query.\n\nr? @nikomatsakis", "tree": {"sha": "656f09b0ef50b5d071fc9c38559c2ad95dd3bdb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656f09b0ef50b5d071fc9c38559c2ad95dd3bdb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200", "html_url": "https://github.com/rust-lang/rust/commit/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235fe8313fd0ffec665f1400da781ab2cb1e13f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/235fe8313fd0ffec665f1400da781ab2cb1e13f9", "html_url": "https://github.com/rust-lang/rust/commit/235fe8313fd0ffec665f1400da781ab2cb1e13f9"}, {"sha": "17fce06c18b9f362b74fb8548b64e3e41991cda5", "url": "https://api.github.com/repos/rust-lang/rust/commits/17fce06c18b9f362b74fb8548b64e3e41991cda5", "html_url": "https://github.com/rust-lang/rust/commit/17fce06c18b9f362b74fb8548b64e3e41991cda5"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "e3d1a4cea98d5fb043cf685a18dd53ecc0511b09", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2aaaf6687c7435e4f7ec44a4ff198d788cc200/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6b2aaaf6687c7435e4f7ec44a4ff198d788cc200", "patch": "@@ -31,7 +31,6 @@ use ty;\n use ty::subst::{Subst, Substs};\n use ty::util::IntTypeExt;\n use ty::walk::TypeWalker;\n-use util::common::MemoizationMap;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use serialize::{self, Encodable, Encoder};\n@@ -2154,30 +2153,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn associated_item_def_ids(self, def_id: DefId) -> Rc<Vec<DefId>> {\n-        if !def_id.is_local() {\n-            return queries::associated_item_def_ids::get(self, DUMMY_SP, def_id);\n-        }\n-\n-        self.maps.associated_item_def_ids.memoize(def_id, || {\n-            let id = self.hir.as_local_node_id(def_id).unwrap();\n-            let item = self.hir.expect_item(id);\n-            let vec: Vec<_> = match item.node {\n-                hir::ItemTrait(.., ref trait_item_refs) => {\n-                    trait_item_refs.iter()\n-                                   .map(|trait_item_ref| trait_item_ref.id)\n-                                   .map(|id| self.hir.local_def_id(id.node_id))\n-                                   .collect()\n-                }\n-                hir::ItemImpl(.., ref impl_item_refs) => {\n-                    impl_item_refs.iter()\n-                                  .map(|impl_item_ref| impl_item_ref.id)\n-                                  .map(|id| self.hir.local_def_id(id.node_id))\n-                                  .collect()\n-                }\n-                _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\")\n-            };\n-            Rc::new(vec)\n-        })\n+        queries::associated_item_def_ids::get(self, DUMMY_SP, def_id)\n     }\n \n     #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n@@ -2708,9 +2684,33 @@ fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty\n }\n \n+fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                     def_id: DefId)\n+                                     -> Rc<Vec<DefId>> {\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let item = tcx.hir.expect_item(id);\n+    let vec: Vec<_> = match item.node {\n+        hir::ItemTrait(.., ref trait_item_refs) => {\n+            trait_item_refs.iter()\n+                           .map(|trait_item_ref| trait_item_ref.id)\n+                           .map(|id| tcx.hir.local_def_id(id.node_id))\n+                           .collect()\n+        }\n+        hir::ItemImpl(.., ref impl_item_refs) => {\n+            impl_item_refs.iter()\n+                          .map(|impl_item_ref| impl_item_ref.id)\n+                          .map(|id| tcx.hir.local_def_id(id.node_id))\n+                          .collect()\n+        }\n+        _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\")\n+    };\n+    Rc::new(vec)\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         associated_item,\n+        associated_item_def_ids,\n         adt_sized_constraint,\n         ..*providers\n     };"}]}