{"sha": "3d8d7341509e4868c91fa7fe24703e69c21a9869", "node_id": "C_kwDOAAsO6NoAKDNkOGQ3MzQxNTA5ZTQ4NjhjOTFmYTdmZTI0NzAzZTY5YzIxYTk4Njk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T17:10:57Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T23:09:49Z"}, "message": "Move `MatchOnVecItems` into `Matches` lint pass", "tree": {"sha": "83423886ed8e0b533801e926a6c73ca7b285ef18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83423886ed8e0b533801e926a6c73ca7b285ef18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d8d7341509e4868c91fa7fe24703e69c21a9869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8d7341509e4868c91fa7fe24703e69c21a9869", "html_url": "https://github.com/rust-lang/rust/commit/3d8d7341509e4868c91fa7fe24703e69c21a9869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d8d7341509e4868c91fa7fe24703e69c21a9869/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b337f9e62e8e8adee47684757c1ad101067beae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b337f9e62e8e8adee47684757c1ad101067beae2", "html_url": "https://github.com/rust-lang/rust/commit/b337f9e62e8e8adee47684757c1ad101067beae2"}], "stats": {"total": 211, "additions": 103, "deletions": 108}, "files": [{"sha": "fb44df57de676594d9a45c73e34b999e6b4bd149", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=3d8d7341509e4868c91fa7fe24703e69c21a9869", "patch": "@@ -258,7 +258,6 @@ store.register_lints(&[\n     map_err_ignore::MAP_ERR_IGNORE,\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     map_unit_fn::RESULT_MAP_UNIT_FN,\n-    match_on_vec_items::MATCH_ON_VEC_ITEMS,\n     match_result_ok::MATCH_RESULT_OK,\n     match_str_case_mismatch::MATCH_STR_CASE_MISMATCH,\n     matches::COLLAPSIBLE_MATCH,\n@@ -267,6 +266,7 @@ store.register_lints(&[\n     matches::MATCH_AS_REF,\n     matches::MATCH_BOOL,\n     matches::MATCH_LIKE_MATCHES_MACRO,\n+    matches::MATCH_ON_VEC_ITEMS,\n     matches::MATCH_OVERLAPPING_ARM,\n     matches::MATCH_REF_PATS,\n     matches::MATCH_SAME_ARMS,"}, {"sha": "a8b6c5a5d63fe5f5c249239af3697bb13982580d", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=3d8d7341509e4868c91fa7fe24703e69c21a9869", "patch": "@@ -51,8 +51,8 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n     LintId::of(manual_assert::MANUAL_ASSERT),\n     LintId::of(manual_ok_or::MANUAL_OK_OR),\n-    LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_BOOL),\n+    LintId::of(matches::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_SAME_ARMS),\n     LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n     LintId::of(matches::MATCH_WILD_ERR_ARM),"}, {"sha": "50b67918fc00d3b2f58cc73fc4ef35a2b17b93ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3d8d7341509e4868c91fa7fe24703e69c21a9869", "patch": "@@ -286,7 +286,6 @@ mod manual_strip;\n mod map_clone;\n mod map_err_ignore;\n mod map_unit_fn;\n-mod match_on_vec_items;\n mod match_result_ok;\n mod match_str_case_mismatch;\n mod matches;\n@@ -815,7 +814,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n-    store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n     store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n     store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));"}, {"sha": "583b577ffe25d51ea72332b2e130b77c07b7ba20", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b337f9e62e8e8adee47684757c1ad101067beae2/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b337f9e62e8e8adee47684757c1ad101067beae2/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=b337f9e62e8e8adee47684757c1ad101067beae2", "patch": "@@ -1,104 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, LangItem, MatchSource};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `match vec[idx]` or `match vec[n..m]`.\n-    ///\n-    /// ### Why is this bad?\n-    /// This can panic at runtime.\n-    ///\n-    /// ### Example\n-    /// ```rust, no_run\n-    /// let arr = vec![0, 1, 2, 3];\n-    /// let idx = 1;\n-    ///\n-    /// // Bad\n-    /// match arr[idx] {\n-    ///     0 => println!(\"{}\", 0),\n-    ///     1 => println!(\"{}\", 3),\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust, no_run\n-    /// let arr = vec![0, 1, 2, 3];\n-    /// let idx = 1;\n-    ///\n-    /// // Good\n-    /// match arr.get(idx) {\n-    ///     Some(0) => println!(\"{}\", 0),\n-    ///     Some(1) => println!(\"{}\", 3),\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.45.0\"]\n-    pub MATCH_ON_VEC_ITEMS,\n-    pedantic,\n-    \"matching on vector elements can panic\"\n-}\n-\n-declare_lint_pass!(MatchOnVecItems => [MATCH_ON_VEC_ITEMS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MatchOnVecItems {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Match(match_expr, _, MatchSource::Normal) = expr.kind;\n-            if let Some(idx_expr) = is_vec_indexing(cx, match_expr);\n-            if let ExprKind::Index(vec, idx) = idx_expr.kind;\n-\n-            then {\n-                // FIXME: could be improved to suggest surrounding every pattern with Some(_),\n-                // but only when `or_patterns` are stabilized.\n-                span_lint_and_sugg(\n-                    cx,\n-                    MATCH_ON_VEC_ITEMS,\n-                    match_expr.span,\n-                    \"indexing into a vector may panic\",\n-                    \"try this\",\n-                    format!(\n-                        \"{}.get({})\",\n-                        snippet(cx, vec.span, \"..\"),\n-                        snippet(cx, idx.span, \"..\")\n-                    ),\n-                    Applicability::MaybeIncorrect\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n-    if_chain! {\n-        if let ExprKind::Index(array, index) = expr.kind;\n-        if is_vector(cx, array);\n-        if !is_full_range(cx, index);\n-\n-        then {\n-            return Some(expr);\n-        }\n-    }\n-\n-    None\n-}\n-\n-fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = ty.peel_refs();\n-    is_type_diagnostic_item(cx, ty, sym::Vec)\n-}\n-\n-fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = ty.peel_refs();\n-    is_type_lang_item(cx, ty, LangItem::RangeFull)\n-}"}, {"sha": "2917f85c45f53250d889ec05242dfb5234ba15fa", "filename": "clippy_lints/src/matches/match_on_vec_items.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs?ref=3d8d7341509e4868c91fa7fe24703e69c21a9869", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::MATCH_ON_VEC_ITEMS;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let Some(idx_expr) = is_vec_indexing(cx, scrutinee);\n+        if let ExprKind::Index(vec, idx) = idx_expr.kind;\n+\n+        then {\n+            // FIXME: could be improved to suggest surrounding every pattern with Some(_),\n+            // but only when `or_patterns` are stabilized.\n+            span_lint_and_sugg(\n+                cx,\n+                MATCH_ON_VEC_ITEMS,\n+                scrutinee.span,\n+                \"indexing into a vector may panic\",\n+                \"try this\",\n+                format!(\n+                    \"{}.get({})\",\n+                    snippet(cx, vec.span, \"..\"),\n+                    snippet(cx, idx.span, \"..\")\n+                ),\n+                Applicability::MaybeIncorrect\n+            );\n+        }\n+    }\n+}\n+\n+fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n+    if_chain! {\n+        if let ExprKind::Index(array, index) = expr.kind;\n+        if is_vector(cx, array);\n+        if !is_full_range(cx, index);\n+\n+        then {\n+            return Some(expr);\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let ty = ty.peel_refs();\n+    is_type_diagnostic_item(cx, ty, sym::Vec)\n+}\n+\n+fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let ty = ty.peel_refs();\n+    is_type_lang_item(cx, ty, LangItem::RangeFull)\n+}"}, {"sha": "7fb449028e7a47620fe3e4523625e879399abb31", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8d7341509e4868c91fa7fe24703e69c21a9869/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=3d8d7341509e4868c91fa7fe24703e69c21a9869", "patch": "@@ -14,6 +14,7 @@ mod manual_unwrap_or;\n mod match_as_ref;\n mod match_bool;\n mod match_like_matches;\n+mod match_on_vec_items;\n mod match_ref_pats;\n mod match_same_arms;\n mod match_single_binding;\n@@ -678,6 +679,43 @@ declare_clippy_lint! {\n     \"finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `match vec[idx]` or `match vec[n..m]`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This can panic at runtime.\n+    ///\n+    /// ### Example\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Bad\n+    /// match arr[idx] {\n+    ///     0 => println!(\"{}\", 0),\n+    ///     1 => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Good\n+    /// match arr.get(idx) {\n+    ///     Some(0) => println!(\"{}\", 0),\n+    ///     Some(1) => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.45.0\"]\n+    pub MATCH_ON_VEC_ITEMS,\n+    pedantic,\n+    \"matching on vector elements can panic\"\n+}\n+\n #[derive(Default)]\n pub struct Matches {\n     msrv: Option<RustcVersion>,\n@@ -714,6 +752,7 @@ impl_lint_pass!(Matches => [\n     NEEDLESS_MATCH,\n     COLLAPSIBLE_MATCH,\n     MANUAL_UNWRAP_OR,\n+    MATCH_ON_VEC_ITEMS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n@@ -750,6 +789,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                     match_wild_enum::check(cx, ex, arms);\n                     match_as_ref::check(cx, ex, arms, expr);\n                     needless_match::check_match(cx, ex, arms, expr);\n+                    match_on_vec_items::check(cx, ex);\n \n                     if !in_constant(cx, expr.hir_id) {\n                         manual_unwrap_or::check(cx, expr, ex, arms);"}]}