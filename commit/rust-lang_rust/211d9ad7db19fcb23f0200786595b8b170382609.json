{"sha": "211d9ad7db19fcb23f0200786595b8b170382609", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWQ5YWQ3ZGIxOWZjYjIzZjAyMDA3ODY1OTViOGIxNzAzODI2MDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-21T16:24:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:07Z"}, "message": "introduce `tcx.normalize_erasing_regions(..)` operaton [VIC]", "tree": {"sha": "d66fc1df64c2767fa5c0dc42e08559dfd0eeae9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66fc1df64c2767fa5c0dc42e08559dfd0eeae9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211d9ad7db19fcb23f0200786595b8b170382609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211d9ad7db19fcb23f0200786595b8b170382609", "html_url": "https://github.com/rust-lang/rust/commit/211d9ad7db19fcb23f0200786595b8b170382609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211d9ad7db19fcb23f0200786595b8b170382609/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca87d24467c46c07961f1b6450dabfb9674913da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca87d24467c46c07961f1b6450dabfb9674913da", "html_url": "https://github.com/rust-lang/rust/commit/ca87d24467c46c07961f1b6450dabfb9674913da"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "3f52ecfc0999b5980e8c28498d5faf93f4f0413e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -179,6 +179,8 @@ pub struct PerfStats {\n     /// result had already been canonicalized.\n     pub canonicalized_values_allocated: Cell<usize>,\n     /// Number of times this query is invoked.\n+    pub normalize_ty_after_erasing_regions: Cell<usize>,\n+    /// Number of times this query is invoked.\n     pub normalize_projection_ty: Cell<usize>,\n }\n \n@@ -869,6 +871,8 @@ impl Session {\n                  self.perf_stats.queries_canonicalized.get());\n         println!(\"Total canonical values interned:               {}\",\n                  self.perf_stats.canonicalized_values_allocated.get());\n+        println!(\"normalize_ty_after_erasing_regions:            {}\",\n+                 self.perf_stats.normalize_ty_after_erasing_regions.get());\n         println!(\"normalize_projection_ty:                       {}\",\n                  self.perf_stats.normalize_projection_ty.get());\n     }\n@@ -1159,6 +1163,7 @@ pub fn build_session_(\n             decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n             queries_canonicalized: Cell::new(0),\n             canonicalized_values_allocated: Cell::new(0),\n+            normalize_ty_after_erasing_regions: Cell::new(0),\n             normalize_projection_ty: Cell::new(0),\n         },\n         code_stats: RefCell::new(CodeStats::new()),"}, {"sha": "f1f9256f825373bca5101446e98f9ca7318292aa", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -20,6 +20,7 @@ use ty::{self, Ty};\n \n pub mod dropck_outlives;\n pub mod normalize;\n+pub mod normalize_erasing_regions;\n \n pub type CanonicalProjectionGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::ProjectionTy<'tcx>>>;"}, {"sha": "d2d8da88e2de569d54109007bdf3e7156d0b37af", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Methods for normalizing when you don't care about regions (and\n+//! aren't doing type inference). If either of those things don't\n+//! apply to you, use `infcx.normalize(...)`.\n+//!\n+//! The methods in this file use a `TypeFolder` to recursively process\n+//! contents, invoking the underlying\n+//! `normalize_ty_after_erasing_regions` query for each type found\n+//! within. (This underlying query is what is cached.)\n+\n+use ty::{self, Ty, TyCtxt};\n+use ty::fold::{TypeFoldable, TypeFolder};\n+\n+impl<'cx, 'tcx> TyCtxt<'cx, 'tcx, 'tcx> {\n+    /// Erase the regions in `value` and then fully normalize all the\n+    /// types found within. The result will also have regions erased.\n+    ///\n+    /// This is appropriate to use only after type-check: it assumes\n+    /// that normalization will succeed, for example.\n+    pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        // Erase first before we do the real query -- this keeps the\n+        // cache from being too polluted.\n+        let value = self.erase_regions(&value);\n+        if !value.has_projections() {\n+            value\n+        } else {\n+            value.fold_with(&mut NormalizeAfterErasingRegionsFolder {\n+                tcx: self,\n+                param_env: param_env,\n+            })\n+        }\n+    }\n+\n+    /// If you have a `Binder<T>`, you can do this to strip out the\n+    /// late-bound regions and then normalize the result, yielding up\n+    /// a `T` (with regions erased). This is appropriate when the\n+    /// binder is being instantiated at the call site.\n+    ///\n+    /// NB. Currently, higher-ranked type bounds inhibit\n+    /// normalization. Therefore, each time we erase them in\n+    /// translation, we need to normalize the contents.\n+    pub fn normalize_erasing_late_bound_regions<T>(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: &ty::Binder<T>,\n+    ) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        assert!(!value.needs_subst());\n+        let value = self.erase_late_bound_regions(value);\n+        self.normalize_erasing_regions(param_env, value)\n+    }\n+}\n+\n+struct NormalizeAfterErasingRegionsFolder<'cx, 'tcx: 'cx> {\n+    tcx: TyCtxt<'cx, 'tcx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+impl<'cx, 'tcx> TypeFolder<'tcx, 'tcx> for NormalizeAfterErasingRegionsFolder<'cx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        self.tcx.normalize_ty_after_erasing_regions(self.param_env.and(ty))\n+    }\n+}"}, {"sha": "487bcf1f96ac8bf1667d898c8416c9737119817f", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -12,7 +12,7 @@ use dep_graph::SerializedDepNodeIndex;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId};\n use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal};\n-use ty::{self, Ty, TyCtxt};\n+use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::maps::queries;\n \n@@ -67,6 +67,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::dropck_outlives<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::normalize_ty_after_erasing_regions<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+        format!(\"normalizing `{:?}`\", goal)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "15e309c13d5323d012e4493e20ed0f060ee2a366", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -38,7 +38,7 @@ use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n-use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n+use ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n@@ -394,6 +394,11 @@ define_maps! { <'tcx>\n         NoSolution,\n     >,\n \n+    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n+    [] fn normalize_ty_after_erasing_regions: NormalizeTyAfterErasingRegions(\n+        ParamEnvAnd<'tcx, Ty<'tcx>>\n+    ) -> Ty<'tcx>,\n+\n     /// Do not call this query directly: invoke `infcx.at().dropck_outlives()` instead.\n     [] fn dropck_outlives: DropckOutlives(\n         CanonicalTyGoal<'tcx>"}, {"sha": "53a3bcdba3369798ab34f59332b8984ab69d1565", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -772,8 +772,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n         DepKind::EraseRegionsTy |\n-        DepKind::NormalizeTy |\n         DepKind::NormalizeProjectionTy |\n+        DepKind::NormalizeTyAfterErasingRegions |\n+        DepKind::NormalizeTy |\n         DepKind::DropckOutlives |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |"}, {"sha": "45d23a2733a2a3337d12c3020323e0b14072d6a3", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -19,13 +19,15 @@\n \n #[macro_use]\n extern crate log;\n+#[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate syntax;\n extern crate syntax_pos;\n \n mod dropck_outlives;\n mod normalize_projection_ty;\n+mod normalize_erasing_regions;\n mod util;\n \n use rustc::ty::maps::Providers;\n@@ -35,6 +37,8 @@ pub fn provide(p: &mut Providers) {\n         dropck_outlives: dropck_outlives::dropck_outlives,\n         adt_dtorck_constraint: dropck_outlives::adt_dtorck_constraint,\n         normalize_projection_ty: normalize_projection_ty::normalize_projection_ty,\n+        normalize_ty_after_erasing_regions:\n+            normalize_erasing_regions::normalize_ty_after_erasing_regions,\n         ..*p\n     };\n }"}, {"sha": "805bf1030b3f6b1448bf1cecbe036295d447aca0", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d9ad7db19fcb23f0200786595b8b170382609/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=211d9ad7db19fcb23f0200786595b8b170382609", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::traits::{Normalized, ObligationCause};\n+use rustc::traits::query::NoSolution;\n+use rustc::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use rustc::util::common::CellUsizeExt;\n+\n+crate fn normalize_ty_after_erasing_regions<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n+) -> Ty<'tcx> {\n+    let ParamEnvAnd { param_env, value } = goal;\n+    tcx.sess.perf_stats.normalize_ty_after_erasing_regions.increment();\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let cause = ObligationCause::dummy();\n+        match infcx.at(&cause, param_env).normalize(&value) {\n+            Ok(Normalized { value: normalized_value, obligations: _ }) => {\n+                //                                   ^^^^^^^^^^^\n+                //                   We don't care about the `obligations`,\n+                //                   they are always only region relations,\n+                //                   and we are about to erase those anyway.\n+                let normalized_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n+                let normalized_value = infcx.tcx.erase_regions(&normalized_value);\n+                tcx.lift_to_global(&normalized_value).unwrap()\n+            }\n+            Err(NoSolution) => bug!(\"could not fully normalize `{:?}`\", value),\n+        }\n+    })\n+}"}]}