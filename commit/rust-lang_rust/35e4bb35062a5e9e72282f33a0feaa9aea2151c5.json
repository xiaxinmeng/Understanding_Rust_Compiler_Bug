{"sha": "35e4bb35062a5e9e72282f33a0feaa9aea2151c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTRiYjM1MDYyYTVlOWU3MjI4MmYzM2EwZmVhYTlhZWEyMTUxYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T16:17:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T16:17:45Z"}, "message": "Document failed refactor", "tree": {"sha": "b0de14227dcd63b6629ff14911b5bcb276f54415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0de14227dcd63b6629ff14911b5bcb276f54415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e4bb35062a5e9e72282f33a0feaa9aea2151c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e4bb35062a5e9e72282f33a0feaa9aea2151c5", "html_url": "https://github.com/rust-lang/rust/commit/35e4bb35062a5e9e72282f33a0feaa9aea2151c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e4bb35062a5e9e72282f33a0feaa9aea2151c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a622a8e109e0f41f1b7cf869acb955eab8c95b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/a622a8e109e0f41f1b7cf869acb955eab8c95b43", "html_url": "https://github.com/rust-lang/rust/commit/a622a8e109e0f41f1b7cf869acb955eab8c95b43"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "1838226018400f57253731322a0f2104f82be69c", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35e4bb35062a5e9e72282f33a0feaa9aea2151c5/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e4bb35062a5e9e72282f33a0feaa9aea2151c5/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=35e4bb35062a5e9e72282f33a0feaa9aea2151c5", "patch": "@@ -93,9 +93,9 @@ pub trait FileLoader {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n     /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n-    /// so the input is guaranteed to be utf-8 string. We might introduce\n-    /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n-    /// get by with a `&str` for the time being.\n+    /// so the input is guaranteed to be utf-8 string. One might be tempted to\n+    /// introduce some kind of \"utf-8 path with / separators\", but that's a bad idea. Behold\n+    /// `#[path = \"C://no/way\"]`\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }"}]}