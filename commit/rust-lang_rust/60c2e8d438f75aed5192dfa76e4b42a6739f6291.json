{"sha": "60c2e8d438f75aed5192dfa76e4b42a6739f6291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzJlOGQ0MzhmNzVhZWQ1MTkyZGZhNzZlNGI0MmE2NzM5ZjYyOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-04T01:48:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-04T01:48:32Z"}, "message": "Auto merge of #75126 - JohnTitor:rollup-aejluzx, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #74759 (add `unsigned_abs` to signed integers)\n - #75043 (rustc_ast: `(Nested)MetaItem::check_name` -> `has_name`)\n - #75056 (Lint path statements to suggest using drop when the type needs drop)\n - #75081 (Fix logging for rustdoc)\n - #75083 (Do not trigger `unused_braces` for `while let`)\n - #75084 (Stabilize Ident::new_raw)\n - #75103 (Disable building rust-analyzer on riscv64)\n - #75106 (Enable docs on in the x86_64-unknown-linux-musl manifest)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "73b439e4b2a9e35a75bf9003ccd4736632955e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73b439e4b2a9e35a75bf9003ccd4736632955e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c2e8d438f75aed5192dfa76e4b42a6739f6291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c2e8d438f75aed5192dfa76e4b42a6739f6291", "html_url": "https://github.com/rust-lang/rust/commit/60c2e8d438f75aed5192dfa76e4b42a6739f6291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c2e8d438f75aed5192dfa76e4b42a6739f6291/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d601d6ff1879a20a25dda06b735cd44cd451f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d601d6ff1879a20a25dda06b735cd44cd451f61", "html_url": "https://github.com/rust-lang/rust/commit/1d601d6ff1879a20a25dda06b735cd44cd451f61"}, {"sha": "aa84a76150edaf4e912fca445d54a32f2d682d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa84a76150edaf4e912fca445d54a32f2d682d9d", "html_url": "https://github.com/rust-lang/rust/commit/aa84a76150edaf4e912fca445d54a32f2d682d9d"}], "stats": {"total": 446, "additions": 297, "deletions": 149}, "files": [{"sha": "eb50dc28b9f1101e8afe9d9c04de69fc4f3c947b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -1601,6 +1601,29 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Computes the absolute value of `self` without any wrapping\n+or panicking.\n+\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(unsigned_abs)]\n+assert_eq!(100\", stringify!($SelfT), \".unsigned_abs(), 100\", stringify!($UnsignedT), \");\n+assert_eq!((-100\", stringify!($SelfT), \").unsigned_abs(), 100\", stringify!($UnsignedT), \");\n+assert_eq!((-128i8).unsigned_abs(), 128u8);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"unsigned_abs\", issue = \"74913\")]\n+            #[inline]\n+            pub const fn unsigned_abs(self) -> $UnsignedT {\n+                 self.wrapping_abs() as $UnsignedT\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\n wrapping around at the boundary of the type."}, {"sha": "de3866d92fc3f181ee192baa930917031b51bef0", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -848,7 +848,7 @@ impl Ident {\n     /// Creates a new `Ident` with the given `string` as well as the specified\n     /// `span`.\n     /// The `string` argument must be a valid identifier permitted by the\n-    /// language, otherwise the function will panic.\n+    /// language (including keywords, e.g. `self` or `fn`). Otherwise, the function will panic.\n     ///\n     /// Note that `span`, currently in rustc, configures the hygiene information\n     /// for this identifier.\n@@ -870,7 +870,10 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"54723\")]\n+    /// The `string` argument be a valid identifier permitted by the language\n+    /// (including keywords, e.g. `fn`). Keywords which are usable in path segments\n+    /// (e.g. `self`, `super`) are not supported, and will cause a panic.\n+    #[stable(feature = \"proc_macro_raw_ident\", since = \"1.47.0\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         Ident(bridge::client::Ident::new(string, span.0, true))\n     }"}, {"sha": "98b6be29c073b80d337744658f75f50ad74e2ced", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -1355,7 +1355,7 @@ pub struct RustAnalyzer {\n }\n \n impl Step for RustAnalyzer {\n-    type Output = PathBuf;\n+    type Output = Option<PathBuf>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1373,11 +1373,17 @@ impl Step for RustAnalyzer {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n+        if target.contains(\"riscv64\") {\n+            // riscv64 currently has an LLVM bug that makes rust-analyzer unable\n+            // to build. See #74813 for details.\n+            return None;\n+        }\n+\n         let src = builder.src.join(\"src/tools/rust-analyzer\");\n         let release_num = builder.release_num(\"rust-analyzer/crates/rust-analyzer\");\n         let name = pkgname(builder, \"rust-analyzer\");\n@@ -1431,7 +1437,7 @@ impl Step for RustAnalyzer {\n         builder.info(&format!(\"Dist rust-analyzer stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }\n \n@@ -1789,7 +1795,7 @@ impl Step for Extended {\n         tarballs.push(rustc_installer);\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n-        tarballs.push(rust_analyzer_installer.clone());\n+        tarballs.extend(rust_analyzer_installer.clone());\n         tarballs.push(clippy_installer);\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n@@ -1867,7 +1873,9 @@ impl Step for Extended {\n             if rls_installer.is_none() {\n                 contents = filter(&contents, \"rls\");\n             }\n-            contents = filter(&contents, \"rust-analyzer\");\n+            if rust_analyzer_installer.is_none() {\n+                contents = filter(&contents, \"rust-analyzer\");\n+            }\n             if miri_installer.is_none() {\n                 contents = filter(&contents, \"miri\");\n             }\n@@ -1914,7 +1922,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n-            prepare(\"rust-analyzer\");\n+            if rust_analyzer_installer.is_some() {\n+                prepare(\"rust-analyzer\");\n+            }\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -1976,7 +1986,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n-            prepare(\"rust-analyzer\");\n+            if rust_analyzer_installer.is_some() {\n+                prepare(\"rust-analyzer\");\n+            }\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -2076,23 +2088,25 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            builder.run(\n-                Command::new(&heat)\n-                    .current_dir(&exe)\n-                    .arg(\"dir\")\n-                    .arg(\"rust-analyzer\")\n-                    .args(&heat_flags)\n-                    .arg(\"-cg\")\n-                    .arg(\"RustAnalyzerGroup\")\n-                    .arg(\"-dr\")\n-                    .arg(\"RustAnalyzer\")\n-                    .arg(\"-var\")\n-                    .arg(\"var.RustAnalyzerDir\")\n-                    .arg(\"-out\")\n-                    .arg(exe.join(\"RustAnalyzerGroup.wxs\"))\n-                    .arg(\"-t\")\n-                    .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n-            );\n+            if rust_analyzer_installer.is_some() {\n+                builder.run(\n+                    Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rust-analyzer\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\")\n+                        .arg(\"RustAnalyzerGroup\")\n+                        .arg(\"-dr\")\n+                        .arg(\"RustAnalyzer\")\n+                        .arg(\"-var\")\n+                        .arg(\"var.RustAnalyzerDir\")\n+                        .arg(\"-out\")\n+                        .arg(exe.join(\"RustAnalyzerGroup.wxs\"))\n+                        .arg(\"-t\")\n+                        .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+                );\n+            }\n             builder.run(\n                 Command::new(&heat)\n                     .current_dir(&exe)\n@@ -2186,7 +2200,9 @@ impl Step for Extended {\n                 if rls_installer.is_some() {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n-                cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n+                if rust_analyzer_installer.is_some() {\n+                    cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n+                }\n                 if miri_installer.is_some() {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n@@ -2206,7 +2222,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n-            candle(\"RustAnalyzerGroup.wxs\".as_ref());\n+            if rust_analyzer_installer.is_some() {\n+                candle(\"RustAnalyzerGroup.wxs\".as_ref());\n+            }\n             if miri_installer.is_some() {\n                 candle(\"MiriGroup.wxs\".as_ref());\n             }\n@@ -2244,7 +2262,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n-            cmd.arg(\"RustAnalyzerGroup.wixobj\");\n+            if rust_analyzer_installer.is_some() {\n+                cmd.arg(\"RustAnalyzerGroup.wixobj\");\n+            }\n             if miri_installer.is_some() {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }"}, {"sha": "809fda865422a8fea4c2bd94ec819fcd50cedc89", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -100,8 +100,8 @@ impl NestedMetaItem {\n     }\n \n     /// Returns `true` if this list item is a MetaItem with a name of `name`.\n-    pub fn check_name(&self, name: Symbol) -> bool {\n-        self.meta_item().map_or(false, |meta_item| meta_item.check_name(name))\n+    pub fn has_name(&self, name: Symbol) -> bool {\n+        self.meta_item().map_or(false, |meta_item| meta_item.has_name(name))\n     }\n \n     /// For a single-segment meta item, returns its name; otherwise, returns `None`.\n@@ -173,8 +173,13 @@ impl Attribute {\n         }\n     }\n \n-    /// Returns `true` if the attribute's path matches the argument. If it matches, then the\n-    /// attribute is marked as used.\n+    /// Returns `true` if the attribute's path matches the argument.\n+    /// If it matches, then the attribute is marked as used.\n+    /// Should only be used by rustc, other tools can use `has_name` instead,\n+    /// because only rustc is supposed to report the `unused_attributes` lint.\n+    /// `MetaItem` and `NestedMetaItem` are produced by \"lowering\" an `Attribute`\n+    /// and don't have identity, so they only has the `has_name` method,\n+    /// and you need to mark the original `Attribute` as used when necessary.\n     pub fn check_name(&self, name: Symbol) -> bool {\n         let matches = self.has_name(name);\n         if matches {\n@@ -278,7 +283,7 @@ impl MetaItem {\n         }\n     }\n \n-    pub fn check_name(&self, name: Symbol) -> bool {\n+    pub fn has_name(&self, name: Symbol) -> bool {\n         self.path == name\n     }\n \n@@ -405,7 +410,7 @@ pub fn mk_doc_comment(style: AttrStyle, comment: Symbol, span: Span) -> Attribut\n }\n \n pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {\n-    items.iter().any(|item| item.check_name(name))\n+    items.iter().any(|item| item.has_name(name))\n }\n \n pub fn contains_name(attrs: &[Attribute], name: Symbol) -> bool {"}, {"sha": "22eaca4f071e21748c62d7d25d80e92883fa28ca", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -243,7 +243,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if attr.check_name(sym::doc) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {\n                 macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {\n-                    $(if nested_meta.check_name(sym::$name) {\n+                    $(if nested_meta.has_name(sym::$name) {\n                         let msg = concat!(\"`#[doc(\", stringify!($name), \")]` is experimental\");\n                         gate_feature_post!(self, $feature, attr.span, msg);\n                     })*\n@@ -314,7 +314,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Struct(..) => {\n                 for attr in attr::filter_by_name(&i.attrs[..], sym::repr) {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                        if item.check_name(sym::simd) {\n+                        if item.has_name(sym::simd) {\n                             gate_feature_post!(\n                                 &self,\n                                 repr_simd,"}, {"sha": "983202aafabd58c4d12e8904d11c458e15af1487", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -92,9 +92,9 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n             if let Some(meta) = attr.meta() {\n                 if let MetaItemKind::List(items) = meta.kind {\n                     if items.len() == 1 {\n-                        if items[0].check_name(sym::allowed) {\n+                        if items[0].has_name(sym::allowed) {\n                             return Some(UnwindAttr::Allowed);\n-                        } else if items[0].check_name(sym::aborts) {\n+                        } else if items[0].has_name(sym::aborts) {\n                             return Some(UnwindAttr::Aborts);\n                         }\n                     }\n@@ -168,7 +168,7 @@ pub fn contains_feature_attr(attrs: &[Attribute], feature_name: Symbol) -> bool\n         item.check_name(sym::feature)\n             && item\n                 .meta_item_list()\n-                .map(|list| list.iter().any(|mi| mi.is_word() && mi.check_name(feature_name)))\n+                .map(|list| list.iter().any(|mi| mi.is_word() && mi.has_name(feature_name)))\n                 .unwrap_or(false)\n     })\n }\n@@ -505,7 +505,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n }\n \n fn try_gate_cfg(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) {\n-    let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+    let gate = find_gated_cfg(|sym| cfg.has_name(sym));\n     if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n         gate_cfg(&gated_cfg, cfg.span, sess, feats);\n     }\n@@ -898,7 +898,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                     }\n                 } else {\n                     if let Some(meta_item) = item.meta_item() {\n-                        if meta_item.check_name(sym::align) {\n+                        if meta_item.has_name(sym::align) {\n                             if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n                                 recognised = true;\n                                 let mut err = struct_span_err!("}, {"sha": "763bdca35ebe61c166aaf0dc70cc0a572c0b76fa", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -143,7 +143,7 @@ impl<'a> CollectProcMacros<'a> {\n \n         let attributes_attr = list.get(1);\n         let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n-            if !attr.check_name(sym::attributes) {\n+            if !attr.has_name(sym::attributes) {\n                 self.handler.span_err(attr.span(), \"second argument must be `attributes`\")\n             }\n             attr.meta_item_list()"}, {"sha": "29095034ba9f109205a7198f4f80986b11b4ecbe", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -336,7 +336,7 @@ fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n                 Some(list) => {\n                     let msg = list\n                         .iter()\n-                        .find(|mi| mi.check_name(sym::expected))\n+                        .find(|mi| mi.has_name(sym::expected))\n                         .and_then(|mi| mi.meta_item())\n                         .and_then(|mi| mi.value_str());\n                     if list.len() != 1 || msg.is_none() {"}, {"sha": "0cc340c205ac8db7daf5073f33b87712a7174f96", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -1644,14 +1644,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         if let Some(list) = at.meta_item_list() {\n-            if !list.iter().any(|it| it.check_name(sym::include)) {\n+            if !list.iter().any(|it| it.has_name(sym::include)) {\n                 return noop_visit_attribute(at, self);\n             }\n \n             let mut items = vec![];\n \n             for mut it in list {\n-                if !it.check_name(sym::include) {\n+                if !it.has_name(sym::include) {\n                     items.push({\n                         noop_visit_meta_list_item(&mut it, self);\n                         it"}, {"sha": "d451d9a22a48b359cf2ace4005e5f26e7551439b", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -149,7 +149,7 @@ impl AssertModuleSource<'tcx> {\n \n     fn field(&self, attr: &ast::Attribute, name: Symbol) -> Symbol {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-            if item.check_name(name) {\n+            if item.has_name(name) {\n                 if let Some(value) = item.value_str() {\n                     return value;\n                 } else {"}, {"sha": "02f37f82352a9b762ef180a2e19b3158281b860a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -231,7 +231,7 @@ impl DirtyCleanVisitor<'tcx> {\n \n     fn labels(&self, attr: &Attribute) -> Option<Labels> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-            if item.check_name(LABEL) {\n+            if item.has_name(LABEL) {\n                 let value = expect_associated_value(self.tcx, &item);\n                 return Some(self.resolve_labels(&item, value));\n             }\n@@ -242,7 +242,7 @@ impl DirtyCleanVisitor<'tcx> {\n     /// `except=` attribute value\n     fn except(&self, attr: &Attribute) -> Labels {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-            if item.check_name(EXCEPT) {\n+            if item.has_name(EXCEPT) {\n                 let value = expect_associated_value(self.tcx, &item);\n                 return self.resolve_labels(&item, value);\n             }\n@@ -474,15 +474,15 @@ fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {\n     debug!(\"check_config: config={:?}\", config);\n     let (mut cfg, mut except, mut label) = (None, false, false);\n     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-        if item.check_name(CFG) {\n+        if item.has_name(CFG) {\n             let value = expect_associated_value(tcx, &item);\n             debug!(\"check_config: searching for cfg {:?}\", value);\n             cfg = Some(config.contains(&(value, None)));\n         }\n-        if item.check_name(LABEL) {\n+        if item.has_name(LABEL) {\n             label = true;\n         }\n-        if item.check_name(EXCEPT) {\n+        if item.has_name(EXCEPT) {\n             except = true;\n         }\n     }"}, {"sha": "6515708e115a59101249b6a5951de08e6b123760", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -330,7 +330,7 @@ fn has_doc(attr: &ast::Attribute) -> bool {\n \n     if let Some(list) = attr.meta_item_list() {\n         for meta in list {\n-            if meta.check_name(sym::include) || meta.check_name(sym::hidden) {\n+            if meta.has_name(sym::include) || meta.has_name(sym::hidden) {\n                 return true;\n             }\n         }"}, {"sha": "1e98ddbd7db4a1849c988b9595e2a5cb206ce1b6", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -275,10 +275,26 @@ declare_lint_pass!(PathStatements => [PATH_STATEMENTS]);\n \n impl<'tcx> LateLintPass<'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        if let hir::StmtKind::Semi(ref expr) = s.kind {\n+        if let hir::StmtKind::Semi(expr) = s.kind {\n             if let hir::ExprKind::Path(_) = expr.kind {\n                 cx.struct_span_lint(PATH_STATEMENTS, s.span, |lint| {\n-                    lint.build(\"path statement with no effect\").emit()\n+                    let ty = cx.typeck_results().expr_ty(expr);\n+                    if ty.needs_drop(cx.tcx, cx.param_env) {\n+                        let mut lint = lint.build(\"path statement drops value\");\n+                        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(expr.span) {\n+                            lint.span_suggestion(\n+                                s.span,\n+                                \"use `drop` to clarify the intent\",\n+                                format!(\"drop({});\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            lint.span_help(s.span, \"use `drop` to clarify the intent\");\n+                        }\n+                        lint.emit()\n+                    } else {\n+                        lint.build(\"path statement with no effect\").emit()\n+                    }\n                 });\n             }\n         }\n@@ -520,7 +536,10 @@ trait UnusedDelimLint {\n                 (cond, UnusedDelimsCtx::IfCond, true, Some(left), Some(right))\n             }\n \n-            While(ref cond, ref block, ..) => {\n+            // Do not lint `unused_braces` in `while let` expressions.\n+            While(ref cond, ref block, ..)\n+                if !matches!(cond.kind, Let(_, _)) || Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX =>\n+            {\n                 let left = e.span.lo() + rustc_span::BytePos(5);\n                 let right = block.span.lo();\n                 (cond, UnusedDelimsCtx::WhileCond, true, Some(left), Some(right))"}, {"sha": "d01c598d059c0a468e6b0ffd17f2aedb39bd84d4", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -58,7 +58,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n             let mut kind_specified = false;\n \n             for item in items.iter() {\n-                if item.check_name(sym::kind) {\n+                if item.has_name(sym::kind) {\n                     kind_specified = true;\n                     let kind = match item.value_str() {\n                         Some(name) => name,\n@@ -84,9 +84,9 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             NativeLibKind::Unspecified\n                         }\n                     };\n-                } else if item.check_name(sym::name) {\n+                } else if item.has_name(sym::name) {\n                     lib.name = item.value_str();\n-                } else if item.check_name(sym::cfg) {\n+                } else if item.has_name(sym::cfg) {\n                     let cfg = match item.meta_item_list() {\n                         Some(list) => list,\n                         None => continue, // skip like historical compilers\n@@ -98,7 +98,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                     } else {\n                         self.tcx.sess.span_err(cfg[0].span(), \"invalid argument for `cfg(..)`\");\n                     }\n-                } else if item.check_name(sym::wasm_import_module) {\n+                } else if item.has_name(sym::wasm_import_module) {\n                     match item.value_str() {\n                         Some(s) => lib.wasm_import_module = Some(s),\n                         None => {"}, {"sha": "2113d40a594ebd3b237d7c79c155f847ae9491c7", "filename": "src/librustc_mir/dataflow/framework/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -339,7 +339,7 @@ impl RustcMirAttrs {\n             .flat_map(|attr| attr.meta_item_list().into_iter().flat_map(|v| v.into_iter()));\n \n         for attr in rustc_mir_attrs {\n-            let attr_result = if attr.check_name(sym::borrowck_graphviz_postflow) {\n+            let attr_result = if attr.has_name(sym::borrowck_graphviz_postflow) {\n                 Self::set_field(&mut ret.basename_and_suffix, tcx, &attr, |s| {\n                     let path = PathBuf::from(s.to_string());\n                     match path.file_name() {\n@@ -350,7 +350,7 @@ impl RustcMirAttrs {\n                         }\n                     }\n                 })\n-            } else if attr.check_name(sym::borrowck_graphviz_format) {\n+            } else if attr.has_name(sym::borrowck_graphviz_format) {\n                 Self::set_field(&mut ret.formatter, tcx, &attr, |s| match s {\n                     sym::gen_kill | sym::two_phase => Ok(s),\n                     _ => {"}, {"sha": "8a9edb23a10ef45b2ccaeca6d8cb0c645848540d", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn has_rustc_mir_with(attrs: &[ast::Attribute], name: Symbol) -> Opti\n             let items = attr.meta_item_list();\n             for item in items.iter().flat_map(|l| l.iter()) {\n                 match item.meta_item() {\n-                    Some(mi) if mi.check_name(name) => return Some(mi.clone()),\n+                    Some(mi) if mi.has_name(name) => return Some(mi.clone()),\n                     _ => continue,\n                 }\n             }"}, {"sha": "1ff47ee038d3bf9703f098431122dbc7d64dc93c", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -222,7 +222,7 @@ impl CheckAttrVisitor<'tcx> {\n         if let Some(mi) = attr.meta() {\n             if let Some(list) = mi.meta_item_list() {\n                 for meta in list {\n-                    if meta.check_name(sym::alias) {\n+                    if meta.has_name(sym::alias) {\n                         if !meta.is_value_str()\n                             || meta\n                                 .value_str()"}, {"sha": "8e379a3510038d916c88f34705ac5797fcb77710", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -832,10 +832,10 @@ impl<'tcx> SaveContext<'tcx> {\n                 if let Some(meta_list) = attr.meta_item_list() {\n                     meta_list\n                         .into_iter()\n-                        .filter(|it| it.check_name(sym::include))\n+                        .filter(|it| it.has_name(sym::include))\n                         .filter_map(|it| it.meta_item_list().map(|l| l.to_owned()))\n                         .flat_map(|it| it)\n-                        .filter(|meta| meta.check_name(sym::contents))\n+                        .filter(|meta| meta.has_name(sym::contents))\n                         .filter_map(|meta| meta.value_str())\n                         .for_each(|val| {\n                             result.push_str(&val.as_str());"}, {"sha": "446d5a489df48a6101c7547d638de1aabcea2dff", "filename": "src/librustc_trait_selection/traits/on_unimplemented.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -95,27 +95,27 @@ impl<'tcx> OnUnimplementedDirective {\n         };\n \n         for item in item_iter {\n-            if item.check_name(sym::message) && message.is_none() {\n+            if item.has_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n                     message = parse_value(message_)?;\n                     continue;\n                 }\n-            } else if item.check_name(sym::label) && label.is_none() {\n+            } else if item.has_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n                     label = parse_value(label_)?;\n                     continue;\n                 }\n-            } else if item.check_name(sym::note) && note.is_none() {\n+            } else if item.has_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n                     note = parse_value(note_)?;\n                     continue;\n                 }\n-            } else if item.check_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n+            } else if item.has_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n                 if let Some(enclosing_scope_) = item.value_str() {\n                     enclosing_scope = parse_value(enclosing_scope_)?;\n                     continue;\n                 }\n-            } else if item.check_name(sym::on)\n+            } else if item.has_name(sym::on)\n                 && is_root\n                 && message.is_none()\n                 && label.is_none()"}, {"sha": "97df065500a1666885a4a0446705649ff9716893", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -2231,7 +2231,7 @@ fn from_target_feature(\n     let rust_features = tcx.features();\n     for item in list {\n         // Only `enable = ...` is accepted in the meta-item list.\n-        if !item.check_name(sym::enable) {\n+        if !item.has_name(sym::enable) {\n             bad_item(item.span());\n             continue;\n         }\n@@ -2483,11 +2483,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             no_sanitize_span = Some(attr.span);\n             if let Some(list) = attr.meta_item_list() {\n                 for item in list.iter() {\n-                    if item.check_name(sym::address) {\n+                    if item.has_name(sym::address) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::ADDRESS;\n-                    } else if item.check_name(sym::memory) {\n+                    } else if item.has_name(sym::memory) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n-                    } else if item.check_name(sym::thread) {\n+                    } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else {\n                         tcx.sess"}, {"sha": "2a090d6efa5fd38a5bed05e08c4480e6d9bab3bb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -113,7 +113,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 let mut prim = None;\n                 for attr in attrs.lists(sym::doc) {\n                     if let Some(v) = attr.value_str() {\n-                        if attr.check_name(sym::primitive) {\n+                        if attr.has_name(sym::primitive) {\n                             prim = PrimitiveType::from_symbol(v);\n                             if prim.is_some() {\n                                 break;\n@@ -168,7 +168,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 let mut keyword = None;\n                 for attr in attrs.lists(sym::doc) {\n                     if let Some(v) = attr.value_str() {\n-                        if attr.check_name(sym::keyword) {\n+                        if attr.has_name(sym::keyword) {\n                             if v.is_doc_keyword() {\n                                 keyword = Some(v.to_string());\n                                 break;\n@@ -2157,7 +2157,7 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Vec<Item> {\n         let please_inline = self.vis.node.is_pub()\n             && self.attrs.iter().any(|a| {\n-                a.check_name(sym::doc)\n+                a.has_name(sym::doc)\n                     && match a.meta_item_list() {\n                         Some(l) => attr::list_contains_name(&l, sym::inline),\n                         None => false,\n@@ -2197,7 +2197,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n         // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n         let mut denied = !self.vis.node.is_pub()\n             || self.attrs.iter().any(|a| {\n-                a.check_name(sym::doc)\n+                a.has_name(sym::doc)\n                     && match a.meta_item_list() {\n                         Some(l) => {\n                             attr::list_contains_name(&l, sym::no_inline)"}, {"sha": "1bea41b658532f2d29e9e6d973713e7fef8e8cdb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -210,7 +210,7 @@ impl Item {\n     }\n \n     pub fn is_non_exhaustive(&self) -> bool {\n-        self.attrs.other_attrs.iter().any(|a| a.check_name(sym::non_exhaustive))\n+        self.attrs.other_attrs.iter().any(|a| a.has_name(sym::non_exhaustive))\n     }\n \n     /// Returns a documentation-level item type from the item.\n@@ -309,7 +309,7 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n         for attr in &mut self.attrs {\n             if let Some(list) = attr.meta_item_list() {\n-                if attr.check_name(self.name) {\n+                if attr.has_name(self.name) {\n                     self.current_list = list.into_iter();\n                     if let Some(nested) = self.current_list.next() {\n                         return Some(nested);\n@@ -345,7 +345,7 @@ pub trait NestedAttributesExt {\n \n impl<I: IntoIterator<Item = ast::NestedMetaItem>> NestedAttributesExt for I {\n     fn has_word(self, word: Symbol) -> bool {\n-        self.into_iter().any(|attr| attr.is_word() && attr.check_name(word))\n+        self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n \n@@ -425,7 +425,7 @@ impl Attributes {\n         if let ast::MetaItemKind::List(ref nmis) = mi.kind {\n             if nmis.len() == 1 {\n                 if let MetaItem(ref cfg_mi) = nmis[0] {\n-                    if cfg_mi.check_name(sym::cfg) {\n+                    if cfg_mi.has_name(sym::cfg) {\n                         if let ast::MetaItemKind::List(ref cfg_nmis) = cfg_mi.kind {\n                             if cfg_nmis.len() == 1 {\n                                 if let MetaItem(ref content_mi) = cfg_nmis[0] {\n@@ -447,7 +447,7 @@ impl Attributes {\n     pub fn extract_include(mi: &ast::MetaItem) -> Option<(String, String)> {\n         mi.meta_item_list().and_then(|list| {\n             for meta in list {\n-                if meta.check_name(sym::include) {\n+                if meta.has_name(sym::include) {\n                     // the actual compiled `#[doc(include=\"filename\")]` gets expanded to\n                     // `#[doc(include(file=\"filename\", contents=\"file contents\")]` so we need to\n                     // look for that instead\n@@ -456,11 +456,11 @@ impl Attributes {\n                         let mut contents: Option<String> = None;\n \n                         for it in list {\n-                            if it.check_name(sym::file) {\n+                            if it.has_name(sym::file) {\n                                 if let Some(name) = it.value_str() {\n                                     filename = Some(name.to_string());\n                                 }\n-                            } else if it.check_name(sym::contents) {\n+                            } else if it.has_name(sym::contents) {\n                                 if let Some(docs) = it.value_str() {\n                                     contents = Some(docs.to_string());\n                                 }\n@@ -482,12 +482,12 @@ impl Attributes {\n \n     pub fn has_doc_flag(&self, flag: Symbol) -> bool {\n         for attr in &self.other_attrs {\n-            if !attr.check_name(sym::doc) {\n+            if !attr.has_name(sym::doc) {\n                 continue;\n             }\n \n             if let Some(items) = attr.meta_item_list() {\n-                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(flag)) {\n+                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.has_name(flag)) {\n                     return true;\n                 }\n             }\n@@ -521,7 +521,7 @@ impl Attributes {\n                     }\n                     None\n                 } else {\n-                    if attr.check_name(sym::doc) {\n+                    if attr.has_name(sym::doc) {\n                         if let Some(mi) = attr.meta() {\n                             if let Some(cfg_mi) = Attributes::extract_cfg(&mi) {\n                                 // Extracted #[doc(cfg(...))]\n@@ -548,7 +548,7 @@ impl Attributes {\n         // treat #[target_feature(enable = \"feat\")] attributes as if they were\n         // #[doc(cfg(target_feature = \"feat\"))] attributes as well\n         for attr in attrs.lists(sym::target_feature) {\n-            if attr.check_name(sym::enable) {\n+            if attr.has_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {\n                     let meta = attr::mk_name_value_item_str(\n                         Ident::with_dummy_span(sym::target_feature),\n@@ -648,7 +648,7 @@ impl Attributes {\n     pub fn get_doc_aliases(&self) -> FxHashSet<String> {\n         self.other_attrs\n             .lists(sym::doc)\n-            .filter(|a| a.check_name(sym::alias))\n+            .filter(|a| a.has_name(sym::alias))\n             .filter_map(|a| a.value_str().map(|s| s.to_string().replace(\"\\\"\", \"\")))\n             .filter(|v| !v.is_empty())\n             .collect::<FxHashSet<_>>()"}, {"sha": "5a9e9dda6771ecb7854a6346768bb3c841f0f6b0", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -48,7 +48,7 @@ pub fn extern_location(\n     // external crate\n     e.attrs\n         .lists(sym::doc)\n-        .filter(|a| a.check_name(sym::html_root_url))\n+        .filter(|a| a.has_name(sym::html_root_url))\n         .filter_map(|a| a.value_str())\n         .map(|url| {\n             let mut url = url.to_string();"}, {"sha": "4f08452767a877011e96822de62b2ead67cf4272", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -43,7 +43,7 @@ extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n extern crate test as testing;\n #[macro_use]\n-extern crate log;\n+extern crate tracing as log;\n \n use std::default::Default;\n use std::env;"}, {"sha": "ba1341e652c395cf7f289ffb43694daf9b7d07a7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -175,17 +175,17 @@ fn scrape_test_config(krate: &::rustc_hir::Crate<'_>) -> TestOptions {\n         .item\n         .attrs\n         .iter()\n-        .filter(|a| a.check_name(sym::doc))\n+        .filter(|a| a.has_name(sym::doc))\n         .flat_map(|a| a.meta_item_list().unwrap_or_else(Vec::new))\n-        .filter(|a| a.check_name(sym::test))\n+        .filter(|a| a.has_name(sym::test))\n         .collect();\n     let attrs = test_attrs.iter().flat_map(|a| a.meta_item_list().unwrap_or(&[]));\n \n     for attr in attrs {\n-        if attr.check_name(sym::no_crate_inject) {\n+        if attr.has_name(sym::no_crate_inject) {\n             opts.no_crate_inject = true;\n         }\n-        if attr.check_name(sym::attr) {\n+        if attr.has_name(sym::attr) {\n             if let Some(l) = attr.meta_item_list() {\n                 for item in l {\n                     opts.attrs.push(pprust::meta_list_item_to_string(item));"}, {"sha": "cf57ffd0b4b305532d41bcda67bd6942a4ed0e9b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -165,11 +165,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) {\n         debug!(\"visiting fn\");\n         let macro_kind = item.attrs.iter().find_map(|a| {\n-            if a.check_name(sym::proc_macro) {\n+            if a.has_name(sym::proc_macro) {\n                 Some(MacroKind::Bang)\n-            } else if a.check_name(sym::proc_macro_derive) {\n+            } else if a.has_name(sym::proc_macro_derive) {\n                 Some(MacroKind::Derive)\n-            } else if a.check_name(sym::proc_macro_attribute) {\n+            } else if a.has_name(sym::proc_macro_attribute) {\n                 Some(MacroKind::Attr)\n             } else {\n                 None\n@@ -189,7 +189,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n                 let mut helpers = Vec::new();\n                 for mi in item.attrs.lists(sym::proc_macro_derive) {\n-                    if !mi.check_name(sym::attributes) {\n+                    if !mi.has_name(sym::attributes) {\n                         continue;\n                     }\n \n@@ -419,8 +419,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 // anything as it will probably be stripped anyway.\n                 if item.vis.node.is_pub() && self.inside_public_path {\n                     let please_inline = item.attrs.iter().any(|item| match item.meta_item_list() {\n-                        Some(ref list) if item.check_name(sym::doc) => {\n-                            list.iter().any(|i| i.check_name(sym::inline))\n+                        Some(ref list) if item.has_name(sym::doc) => {\n+                            list.iter().any(|i| i.has_name(sym::inline))\n                         }\n                         _ => false,\n                     });"}, {"sha": "8064c3a88d1d98c1ff2d84d1b71b1cd64c1a4600", "filename": "src/test/ui/lint/issue-74883-unused-paren-baren-yield.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -15,15 +15,8 @@ fn main() {\n         while let Some(_) = ((yield)) {} //~ ERROR: unnecessary parentheses\n         {{yield}}; //~ ERROR: unnecessary braces\n         {( yield )}; //~ ERROR: unnecessary parentheses\n-\n-        // FIXME: Reduce duplicate warnings.\n-        // Perhaps we should tweak checks in `BlockRetValue`?\n-        while let Some(_) = {(yield)} {}\n-        //~^ ERROR: unnecessary braces\n-        //~| ERROR: unnecessary parentheses\n-        while let Some(_) = {{yield}} {}\n-        //~^ ERROR: unnecessary braces\n-        //~| ERROR: unnecessary braces\n+        while let Some(_) = {(yield)} {} //~ ERROR: unnecessary parentheses\n+        while let Some(_) = {{yield}} {} //~ ERROR: unnecessary braces\n \n         // FIXME: It'd be great if we could also warn them.\n         ((yield));"}, {"sha": "3f6260dc6e19e29211f9207c03d0f306857a0a80", "filename": "src/test/ui/lint/issue-74883-unused-paren-baren-yield.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -34,29 +34,17 @@ error: unnecessary parentheses around block return value\n LL |         {( yield )};\n    |          ^^^^^^^^^ help: remove these parentheses\n \n-error: unnecessary braces around `let` scrutinee expression\n-  --> $DIR/issue-74883-unused-paren-baren-yield.rs:21:29\n-   |\n-LL |         while let Some(_) = {(yield)} {}\n-   |                             ^^^^^^^^^ help: remove these braces\n-\n error: unnecessary parentheses around block return value\n-  --> $DIR/issue-74883-unused-paren-baren-yield.rs:21:30\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:18:30\n    |\n LL |         while let Some(_) = {(yield)} {}\n    |                              ^^^^^^^ help: remove these parentheses\n \n-error: unnecessary braces around `let` scrutinee expression\n-  --> $DIR/issue-74883-unused-paren-baren-yield.rs:24:29\n-   |\n-LL |         while let Some(_) = {{yield}} {}\n-   |                             ^^^^^^^^^ help: remove these braces\n-\n error: unnecessary braces around block return value\n-  --> $DIR/issue-74883-unused-paren-baren-yield.rs:24:30\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:19:30\n    |\n LL |         while let Some(_) = {{yield}} {}\n    |                              ^^^^^^^ help: remove these braces\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "ac547293c583a4bc67d6865deb6f9e5c6fbc6e4e", "filename": "src/test/ui/lint/unused-braces-while-let-with-mutable-value.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Funused-braces-while-let-with-mutable-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Flint%2Funused-braces-while-let-with-mutable-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused-braces-while-let-with-mutable-value.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![deny(unused_braces)]\n+\n+fn main() {\n+    let mut a = Some(3);\n+    // Shouldn't warn below `a`.\n+    while let Some(ref mut v) = {a} {\n+        a.as_mut().map(|a| std::mem::swap(a, v));\n+        break;\n+    }\n+}"}, {"sha": "9daee21aa17d458aea9794d9eac5a09d57baadb0", "filename": "src/test/ui/proc-macro/auxiliary/raw-ident.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -0,0 +1,35 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, TokenTree, Ident, Punct, Spacing, Span};\n+\n+#[proc_macro]\n+pub fn make_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new_raw(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}\n+\n+#[proc_macro]\n+pub fn make_bad_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new_raw(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}"}, {"sha": "03cb4571496e90318056b03a11b63c7e9f0b127d", "filename": "src/test/ui/proc-macro/raw-ident.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:raw-ident.rs\n+\n+#[macro_use] extern crate raw_ident;\n+\n+fn main() {\n+    make_struct!(fn);\n+    make_struct!(Foo);\n+    make_struct!(await);\n+\n+    r#fn;\n+    r#Foo;\n+    Foo;\n+    r#await;\n+\n+    make_bad_struct!(S); //~ ERROR expected one of\n+}"}, {"sha": "e82a1226b5aef4be18bb0e1162297bc102641418", "filename": "src/test/ui/proc-macro/raw-ident.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `S`\n+  --> $DIR/raw-ident.rs:15:5\n+   |\n+LL |     make_bad_struct!(S);\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "2435be623f310312c7fbdac55161fc0f1454dd6b", "filename": "src/test/ui/warn-path-statement.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwarn-path-statement.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -1,6 +1,17 @@\n // compile-flags: -D path-statements\n-fn main() {\n+struct Droppy;\n+\n+impl Drop for Droppy {\n+    fn drop(&mut self) {}\n+}\n \n+fn main() {\n     let x = 10;\n     x; //~ ERROR path statement with no effect\n+\n+    let y = Droppy;\n+    y; //~ ERROR path statement drops value\n+\n+    let z = (Droppy,);\n+    z; //~ ERROR path statement drops value\n }"}, {"sha": "248d2ef299be38925b96cc0bd2c4bac429dc08eb", "filename": "src/test/ui/warn-path-statement.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fwarn-path-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftest%2Fui%2Fwarn-path-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwarn-path-statement.stderr?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -1,10 +1,22 @@\n error: path statement with no effect\n-  --> $DIR/warn-path-statement.rs:5:5\n+  --> $DIR/warn-path-statement.rs:10:5\n    |\n LL |     x;\n    |     ^^\n    |\n    = note: requested on the command line with `-D path-statements`\n \n-error: aborting due to previous error\n+error: path statement drops value\n+  --> $DIR/warn-path-statement.rs:13:5\n+   |\n+LL |     y;\n+   |     ^^ help: use `drop` to clarify the intent: `drop(y);`\n+\n+error: path statement drops value\n+  --> $DIR/warn-path-statement.rs:16:5\n+   |\n+LL |     z;\n+   |     ^^ help: use `drop` to clarify the intent: `drop(z);`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "5dede95a85823d63734eb9a4f28850b533ef02c0", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -156,6 +156,7 @@ static DOCS_TARGETS: &[&str] = &[\n     \"x86_64-pc-windows-gnu\",\n     \"x86_64-pc-windows-msvc\",\n     \"x86_64-unknown-linux-gnu\",\n+    \"x86_64-unknown-linux-musl\",\n ];\n \n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];"}, {"sha": "40af6bb3d7bcff06c605c0bd4a04238a3fc583e2", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -286,14 +286,14 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                     },\n                     _ => {},\n                 }\n-                if items.is_empty() || !attr.check_name(sym!(deprecated)) {\n+                if items.is_empty() || !attr.has_name(sym!(deprecated)) {\n                     return;\n                 }\n                 for item in items {\n                     if_chain! {\n                         if let NestedMetaItem::MetaItem(mi) = &item;\n                         if let MetaItemKind::NameValue(lit) = &mi.kind;\n-                        if mi.check_name(sym!(since));\n+                        if mi.has_name(sym!(since));\n                         then {\n                             check_semver(cx, item.span(), lit);\n                         }\n@@ -309,7 +309,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.check_name(sym!(macro_use)));\n+                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym!(macro_use)));\n \n                 for attr in item.attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n@@ -524,7 +524,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Name, attrs: &[Attribute]\n \n     for attr in attrs {\n         if let Some(values) = attr.meta_item_list() {\n-            if values.len() != 1 || !attr.check_name(sym!(inline)) {\n+            if values.len() != 1 || !attr.has_name(sym!(inline)) {\n                 continue;\n             }\n             if is_word(&values[0], sym!(always)) {\n@@ -558,7 +558,7 @@ fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n \n fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n     if let NestedMetaItem::MetaItem(mi) = &nmi {\n-        mi.is_word() && mi.check_name(expected)\n+        mi.is_word() && mi.has_name(expected)\n     } else {\n         false\n     }\n@@ -618,15 +618,15 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::as\n fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n     if_chain! {\n         // check cfg_attr\n-        if attr.check_name(sym!(cfg_attr));\n+        if attr.has_name(sym!(cfg_attr));\n         if let Some(items) = attr.meta_item_list();\n         if items.len() == 2;\n         // check for `rustfmt`\n         if let Some(feature_item) = items[0].meta_item();\n-        if feature_item.check_name(sym!(rustfmt));\n+        if feature_item.has_name(sym!(rustfmt));\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n-        if skip_item.check_name(sym!(rustfmt_skip)) ||\n+        if skip_item.has_name(sym!(rustfmt_skip)) ||\n             skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n@@ -685,7 +685,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n     }\n \n     if_chain! {\n-        if attr.check_name(sym!(cfg));\n+        if attr.has_name(sym!(cfg));\n         if let Some(list) = attr.meta_item_list();\n         let mismatched = find_mismatched_target_os(&list);\n         if !mismatched.is_empty();"}, {"sha": "e87c33d1b09dd42d6e688b0e079a7760817b4a36", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -323,7 +323,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n             let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n-        } else if attr.check_name(sym!(doc)) {\n+        } else if attr.has_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n             // don't trigger the safety or errors check\n             return DocHeaders {"}, {"sha": "4b605fdb366a91b0bdb5620ba81ee6c730f9bf83", "filename": "src/tools/clippy/clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> LateLintPass<'tcx> for InlineFnWithoutBody {\n \n fn check_attrs(cx: &LateContext<'_>, name: Symbol, attrs: &[Attribute]) {\n     for attr in attrs {\n-        if !attr.check_name(sym!(inline)) {\n+        if !attr.has_name(sym!(inline)) {\n             continue;\n         }\n "}, {"sha": "ca1381852daeead7d134f9edcebbc33d360c1e96", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -83,7 +83,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n     }\n \n     fn is_doc_hidden(attr: &Attribute) -> bool {\n-        attr.check_name(sym!(doc))\n+        attr.has_name(sym!(doc))\n             && match attr.meta_item_list() {\n                 Some(l) => attr::list_contains_name(&l, sym!(hidden)),\n                 None => false,"}, {"sha": "813f9c4394819034ded9055b97499207ef272c60", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn enter_lint_attrs(&mut self, _: &LateContext<'tcx>, attrs: &'tcx [ast::Attribute]) {\n         let doc_hidden = self.doc_hidden()\n             || attrs.iter().any(|attr| {\n-                attr.check_name(sym!(doc))\n+                attr.has_name(sym!(doc))\n                     && match attr.meta_item_list() {\n                         None => false,\n                         Some(l) => attr::list_contains_name(&l[..], sym!(hidden)),"}, {"sha": "3eae45b2819d849510a5b47f3d1e8e2f7ef93f2b", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -57,7 +57,7 @@ declare_clippy_lint! {\n }\n \n fn check_missing_inline_attrs(cx: &LateContext<'_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n-    let has_inline = attrs.iter().any(|a| a.check_name(sym!(inline)));\n+    let has_inline = attrs.iter().any(|a| a.has_name(sym!(inline)));\n     if !has_inline {\n         span_lint(\n             cx,"}, {"sha": "9391049c6e8f95d6513b0c8444bdcd94b5d3224a", "filename": "src/tools/clippy/clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n     }\n \n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if item.attrs.iter().any(|a| a.check_name(sym!(automatically_derived))) {\n+        if item.attrs.iter().any(|a| a.has_name(sym!(automatically_derived))) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.hir_id);\n         }"}, {"sha": "a7f7c97fc487cf0e937a681c84c32662c3b37e5e", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -312,7 +312,7 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| {\n         [sym!(proc_macro), sym!(proc_macro_attribute), sym!(proc_macro_derive)]\n             .iter()\n-            .any(|&allow| attr.check_name(allow))\n+            .any(|&allow| attr.has_name(allow))\n     })\n }\n "}, {"sha": "8ed20995a70af1257708ba3b8b278dc08adbec8d", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -235,7 +235,7 @@ impl EarlyLintPass for Return {\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n-    attr.meta_item_list().is_some() && attr.check_name(sym!(cfg))\n+    attr.meta_item_list().is_some() && attr.has_name(sym!(cfg))\n }\n \n // get the def site"}, {"sha": "7948d99162b8116b91b6236a8f0a1d1945406b34", "filename": "src/tools/clippy/clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for TriviallyCopyPassByRef {\n                     return;\n                 }\n                 for a in attrs {\n-                    if a.meta_item_list().is_some() && a.check_name(sym!(proc_macro_derive)) {\n+                    if a.meta_item_list().is_some() && a.has_name(sym!(proc_macro_derive)) {\n                         return;\n                     }\n                 }"}, {"sha": "ba3492a6fff1136dc1d70fcce17ef362da35292d", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=60c2e8d438f75aed5192dfa76e4b42a6739f6291", "patch": "@@ -13,7 +13,7 @@ use std::{env, fmt, fs, io};\n /// Gets the configuration file from arguments.\n pub fn file_from_args(args: &[NestedMetaItem]) -> Result<Option<PathBuf>, (&'static str, Span)> {\n     for arg in args.iter().filter_map(NestedMetaItem::meta_item) {\n-        if arg.check_name(sym!(conf_file)) {\n+        if arg.has_name(sym!(conf_file)) {\n             return match arg.kind {\n                 MetaItemKind::Word | MetaItemKind::List(_) => Err((\"`conf_file` must be a named value\", arg.span)),\n                 MetaItemKind::NameValue(ref value) => {"}]}