{"sha": "dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMWUwOWJkYzFiMWZkZmUzNTI5M2VmZDlmYTY4ODRiMDY1ODFiNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T17:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T17:36:23Z"}, "message": "Auto merge of #5897 - matthiaskrgr:no_clone_tts, r=flip1995\n\nwrite.rs: don't clone TokenStream\n\nchangelog: none", "tree": {"sha": "5350b5972e38de2979b40807881b7e1c128c2e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5350b5972e38de2979b40807881b7e1c128c2e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "html_url": "https://github.com/rust-lang/rust/commit/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439bae62a48fee04b0655548d42e7076b6a5042f", "url": "https://api.github.com/repos/rust-lang/rust/commits/439bae62a48fee04b0655548d42e7076b6a5042f", "html_url": "https://github.com/rust-lang/rust/commit/439bae62a48fee04b0655548d42e7076b6a5042f"}, {"sha": "8a96b9cdfe408106fff94745fee1223b2e3ddb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a96b9cdfe408106fff94745fee1223b2e3ddb26", "html_url": "https://github.com/rust-lang/rust/commit/8a96b9cdfe408106fff94745fee1223b2e3ddb26"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "5f88dcb188a0bf75044a41eeac61df664357d4c9", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "patch": "@@ -237,7 +237,7 @@ impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n         if mac.path == sym!(println) {\n             span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n-            if let (Some(fmt_str), _) = self.check_tts(cx, &mac.args.inner_tokens(), false) {\n+            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n                         cx,\n@@ -252,7 +252,7 @@ impl EarlyLintPass for Write {\n             }\n         } else if mac.path == sym!(print) {\n             span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n-            if let (Some(fmt_str), _) = self.check_tts(cx, &mac.args.inner_tokens(), false) {\n+            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -273,7 +273,7 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(write) {\n-            if let (Some(fmt_str), _) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n+            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -294,7 +294,7 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n+            if let (Some(fmt_str), expr) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else(\n@@ -364,17 +364,11 @@ impl Write {\n     /// (Some(\"string to write: {}\"), Some(buf))\n     /// ```\n     #[allow(clippy::too_many_lines)]\n-    fn check_tts<'a>(\n-        &self,\n-        cx: &EarlyContext<'a>,\n-        tts: &TokenStream,\n-        is_write: bool,\n-    ) -> (Option<StrLit>, Option<Expr>) {\n+    fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n         use rustc_parse_format::{\n             AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, ParseMode, Parser,\n             Piece,\n         };\n-        let tts = tts.clone();\n \n         let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n         let mut expr: Option<Expr> = None;"}]}