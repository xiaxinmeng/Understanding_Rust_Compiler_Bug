{"sha": "8937faa83795ccd55b19a5cb1869ce3b1097fe43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MzdmYWE4Mzc5NWNjZDU1YjE5YTVjYjE4NjljZTNiMTA5N2ZlNDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-26T12:08:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:15Z"}, "message": "Reenable `const_let` feature gate", "tree": {"sha": "5d0818f2625c8cfbf3c71113c734c5fcd9f48a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0818f2625c8cfbf3c71113c734c5fcd9f48a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8937faa83795ccd55b19a5cb1869ce3b1097fe43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8937faa83795ccd55b19a5cb1869ce3b1097fe43", "html_url": "https://github.com/rust-lang/rust/commit/8937faa83795ccd55b19a5cb1869ce3b1097fe43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8937faa83795ccd55b19a5cb1869ce3b1097fe43/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866664c8bb1a3f1eb7fa60c8d8243535675ea78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/866664c8bb1a3f1eb7fa60c8d8243535675ea78f", "html_url": "https://github.com/rust-lang/rust/commit/866664c8bb1a3f1eb7fa60c8d8243535675ea78f"}], "stats": {"total": 1266, "additions": 871, "deletions": 395}, "files": [{"sha": "0f174d6da1fc3524854b964da3ce8f492b858d78", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 191, "deletions": 39, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -30,7 +30,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUs\n use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -114,6 +114,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n+    const_fn_arg_vars: BitSet<Local>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -148,6 +149,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             param_env,\n             local_qualif,\n             qualif: Qualif::empty(),\n+            const_fn_arg_vars: BitSet::new_empty(mir.local_decls.len()),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -176,6 +178,26 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n+    /// Error about extra statements in a constant.\n+    fn statement_like(&mut self) {\n+        self.add(Qualif::NOT_CONST);\n+        if self.mode != Mode::Fn {\n+            let mut err = feature_err(\n+                &self.tcx.sess.parse_sess,\n+                \"const_let\",\n+                self.span,\n+                GateIssue::Language,\n+                &format!(\"statements in {}s are unstable\", self.mode),\n+            );\n+            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\"Blocks in constants may only contain items (such as constant, function \\\n+                          definition, etc...) and a tail expression.\");\n+                err.help(\"To avoid it, you have to replace the non-item object.\");\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     /// Add the given qualification to self.qualif.\n     fn add(&mut self, qualif: Qualif) {\n         self.qualif = self.qualif | qualif;\n@@ -221,46 +243,85 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        let mut dest = dest;\n-        let index = loop {\n-            match dest {\n-                Place::Local(index) => break *index,\n-                // projections are transparent for assignments\n-                // we qualify the entire destination at once, even if just a field would have\n-                // stricter qualification\n-                Place::Projection(proj) => {\n-                    // Catch more errors in the destination. `visit_place` also checks various\n-                    // projection rules like union field access and raw pointer deref\n-                    self.visit_place(\n-                        dest,\n-                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                        location\n-                    );\n-                    dest = &proj.base;\n-                },\n-                Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n-                Place::Static(..) => {\n-                    // Catch more errors in the destination. `visit_place` also checks that we\n-                    // do not try to access statics from constants or try to mutate statics\n-                    self.visit_place(\n-                        dest,\n-                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                        location\n-                    );\n-                    return;\n+        if self.const_let_allowed() {\n+            let mut dest = dest;\n+            let index = loop {\n+                match dest {\n+                    // with `const_let` active, we treat all locals equal\n+                    Place::Local(index) => break *index,\n+                    // projections are transparent for assignments\n+                    // we qualify the entire destination at once, even if just a field would have\n+                    // stricter qualification\n+                    Place::Projection(proj) => {\n+                        // Catch more errors in the destination. `visit_place` also checks various\n+                        // projection rules like union field access and raw pointer deref\n+                        self.visit_place(\n+                            dest,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        );\n+                        dest = &proj.base;\n+                    },\n+                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                    Place::Static(..) => {\n+                        // Catch more errors in the destination. `visit_place` also checks that we\n+                        // do not try to access statics from constants or try to mutate statics\n+                        self.visit_place(\n+                            dest,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        );\n+                        return;\n+                    }\n                 }\n+            };\n+            debug!(\"store to var {:?}\", index);\n+            match &mut self.local_qualif[index] {\n+                // this is overly restrictive, because even full assignments do not clear the qualif\n+                // While we could special case full assignments, this would be inconsistent with\n+                // aggregates where we overwrite all fields via assignments, which would not get\n+                // that feature.\n+                Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n+                // insert new qualification\n+                qualif @ None => *qualif = Some(self.qualif),\n             }\n-        };\n-        debug!(\"store to var {:?}\", index);\n-        match &mut self.local_qualif[index] {\n-            // this is overly restrictive, because even full assignments do not clear the qualif\n-            // While we could special case full assignments, this would be inconsistent with\n-            // aggregates where we overwrite all fields via assignments, which would not get\n-            // that feature.\n-            Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n-            // insert new qualification\n-            qualif @ None => *qualif = Some(self.qualif),\n+            return;\n         }\n+\n+        match *dest {\n+            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n+                                   self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n+                debug!(\"store to {:?} (temp or return pointer)\", index);\n+                store(&mut self.local_qualif[index])\n+            }\n+\n+            Place::Projection(box Projection {\n+                base: Place::Local(index),\n+                elem: ProjectionElem::Deref\n+            }) if self.mir.local_kind(index) == LocalKind::Temp\n+               && self.mir.local_decls[index].ty.is_box()\n+               && self.local_qualif[index].map_or(false, |qualif| {\n+                    qualif.contains(Qualif::NOT_CONST)\n+               }) => {\n+                // Part of `box expr`, we should've errored\n+                // already for the Box allocation Rvalue.\n+            }\n+\n+            // This must be an explicit assignment.\n+            _ => {\n+                // Catch more errors in the destination.\n+                self.visit_place(\n+                    dest,\n+                    PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                    location\n+                );\n+                self.statement_like();\n+            }\n+        }\n+    }\n+\n+    fn const_let_allowed(&self) -> bool {\n+        self.tcx.features().const_let\n     }\n \n     /// Qualify a whole const, static initializer or const fn.\n@@ -299,7 +360,48 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseEdges { .. } |\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n-                TerminatorKind::Return => break,\n+                TerminatorKind::Return => {\n+                    if !self.const_let_allowed() {\n+                        // Check for unused values. This usually means\n+                        // there are extra statements in the AST.\n+                        for temp in mir.temps_iter() {\n+                            if self.local_qualif[temp].is_none() {\n+                                continue;\n+                            }\n+\n+                            let state = self.temp_promotion_state[temp];\n+                            if let TempState::Defined { location, uses: 0 } = state {\n+                                let data = &mir[location.block];\n+                                let stmt_idx = location.statement_index;\n+\n+                                // Get the span for the initialization.\n+                                let source_info = if stmt_idx < data.statements.len() {\n+                                    data.statements[stmt_idx].source_info\n+                                } else {\n+                                    data.terminator().source_info\n+                                };\n+                                self.span = source_info.span;\n+\n+                                // Treat this as a statement in the AST.\n+                                self.statement_like();\n+                            }\n+                        }\n+\n+                        // Make sure there are no extra unassigned variables.\n+                        self.qualif = Qualif::NOT_CONST;\n+                        for index in mir.vars_iter() {\n+                            if !self.const_fn_arg_vars.contains(index) {\n+                                debug!(\"unassigned variable {:?}\", index);\n+                                self.assign(&Place::Local(index), Location {\n+                                    block: bb,\n+                                    statement_index: usize::MAX,\n+                                });\n+                            }\n+                        }\n+                    }\n+\n+                    break;\n+                }\n             };\n \n             match target {\n@@ -366,6 +468,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n+            LocalKind::Var if !self.const_let_allowed() => {\n+                if self.mode != Mode::Fn {\n+                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n+                                    self.span, GateIssue::Language,\n+                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n+                }\n+                self.add(Qualif::NOT_CONST);\n+            }\n             LocalKind::Var |\n             LocalKind::Arg |\n             LocalKind::Temp => {\n@@ -448,6 +558,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         ProjectionElem::Deref => {\n                             if context.is_mutating_use() {\n                                 this.not_const()\n+                            } else {\n+                                this.qualif = Qualif::NOT_CONST;\n                             }\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             match this.mode {\n@@ -1050,6 +1162,46 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n         self.visit_rvalue(rvalue, location);\n \n+        // Check the allowed const fn argument forms.\n+        if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n+            if self.mir.local_kind(index) == LocalKind::Var &&\n+               self.const_fn_arg_vars.insert(index) &&\n+               !self.tcx.sess.features_untracked().const_let {\n+                // Direct use of an argument is permitted.\n+                match *rvalue {\n+                    Rvalue::Use(Operand::Copy(Place::Local(local))) |\n+                    Rvalue::Use(Operand::Move(Place::Local(local))) => {\n+                        if self.mir.local_kind(local) == LocalKind::Arg {\n+                            return;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+                // Avoid a generic error for other uses of arguments.\n+                if self.qualif.contains(Qualif::FN_ARGUMENT) {\n+                    let decl = &self.mir.local_decls[index];\n+                    let mut err = feature_err(\n+                        &self.tcx.sess.parse_sess,\n+                        \"const_let\",\n+                        decl.source_info.span,\n+                        GateIssue::Language,\n+                        \"arguments of constant functions can only be immutable by-value bindings\"\n+                    );\n+                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                        err.note(\"Constant functions are not allowed to mutate anything. Thus, \\\n+                                  binding to an argument with a mutable pattern is not allowed.\");\n+                        err.note(\"Remove any mutable bindings from the argument list to fix this \\\n+                                  error. In case you need to mutate the argument, try lazily \\\n+                                  initializing a global variable instead of using a const fn, or \\\n+                                  refactoring the code to a functional style to avoid mutation if \\\n+                                  possible.\");\n+                    }\n+                    err.emit();\n+                    return;\n+                }\n+            }\n+        }\n+\n         self.assign(dest, location);\n     }\n "}, {"sha": "9e5d75a746e85e55fc0487ef62c7e7dc64c7aea0", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -64,6 +64,12 @@ pub fn is_min_const_fn(\n         }\n     }\n \n+    for local in mir.vars_iter() {\n+        return Err((\n+            mir.local_decls[local].source_info.span,\n+            \"local variables in const fn are unstable\".into(),\n+        ));\n+    }\n     for local in &mir.local_decls {\n         check_ty(tcx, local.ty, local.source_info.span)?;\n     }\n@@ -264,8 +270,15 @@ fn check_place(\n     mode: PlaceMode,\n ) -> McfResult {\n     match place {\n-        // assignments to locals, arguments, temporaries or the return slot are fine\n-        Place::Local(_) => Ok(()),\n+        Place::Local(l) => match mode {\n+            PlaceMode::Assign => match mir.local_kind(*l) {\n+                LocalKind::Temp | LocalKind::ReturnPointer => Ok(()),\n+                LocalKind::Arg | LocalKind::Var => {\n+                    Err((span, \"assignments in const fn are unstable\".into()))\n+                }\n+            },\n+            PlaceMode::Read => Ok(()),\n+        },\n         // promoteds are always fine, they are essentially constants\n         Place::Promoted(_) => Ok(()),\n         Place::Static(_) => Err((span, \"cannot access `static` items in const fn\".into())),"}, {"sha": "3bc349170514cbc8f2146695b1d74a8fc0a180a8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -209,6 +209,9 @@ declare_features! (\n     // Allows the definition of `const fn` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n+    // Allows let bindings and destructuring in `const fn` functions and constants.\n+    (active, const_let, \"1.22.1\", Some(48821), None),\n+\n     // Allows accessing fields of unions inside const fn.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n "}, {"sha": "0fcf9a5acbdb192b07427da49ab0218b93babedf", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -11,6 +11,8 @@\n // run-pass\n #![allow(dead_code)]\n \n+#![feature(const_let)]\n+\n type Array = [u32; {  let x = 2; 5 }];\n \n pub fn main() {}"}, {"sha": "b7ed8af35d4c1de056bdba84d0a6e7f0255ae570", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -11,6 +11,8 @@\n // run-pass\n #![allow(dead_code)]\n \n+#![feature(const_let)]\n+\n enum Foo {\n     Bar = { let x = 1; 3 }\n }"}, {"sha": "d10465b9dcd266e39c3a43d3edc35ba52b6ca939", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,7 +12,7 @@\n \n // https://github.com/rust-lang/rust/issues/48821\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_let)]\n \n const fn foo(i: usize) -> usize {\n     let x = i;"}, {"sha": "5522e22fb1fa28089a33a6c8851a39b7b52cf70a", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 10, "deletions": 52, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -13,80 +13,44 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:89:37\n-   |\n-LL | static STATIC11: Box<MyOwned> = box MyOwned;\n-   |                                     ^^^^^^^\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:100:32\n+  --> $DIR/check-static-values-constraints.rs:99:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:105:5\n+  --> $DIR/check-static-values-constraints.rs:104:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:105:9\n-   |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |         ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:107:5\n+  --> $DIR/check-static-values-constraints.rs:105:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:107:9\n-   |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |         ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:112:6\n+  --> $DIR/check-static-values-constraints.rs:109:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:112:10\n-   |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |          ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:114:6\n+  --> $DIR/check-static-values-constraints.rs:110:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:114:10\n-   |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |          ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:121:5\n+  --> $DIR/check-static-values-constraints.rs:116:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:121:9\n-   |\n-LL |     box 3;\n-   |         ^\n-\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:126:45\n+  --> $DIR/check-static-values-constraints.rs:120:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n@@ -95,18 +59,12 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:126:38\n+  --> $DIR/check-static-values-constraints.rs:120:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:126:42\n-   |\n-LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                          ^\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "37f665960c8c821aada4c30e4382363ca050b46d", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -88,7 +88,6 @@ struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR contains unimplemented expression type\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n@@ -103,28 +102,22 @@ static mut STATIC14: SafeStruct = SafeStruct {\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~^ ERROR contains unimplemented expression type\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~^ ERROR contains unimplemented expression type\n ];\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~^ ERROR contains unimplemented expression type\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~^ ERROR contains unimplemented expression type\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR contains unimplemented expression type\n \n pub fn main() {\n     let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR allocations are not allowed in statics\n     //~^^ ERROR cannot move out of static item\n-    //~| ERROR contains unimplemented expression type\n }"}, {"sha": "ac979a3fa7cfcebf711441bee02b65bf6ab6e0e6", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 10, "deletions": 52, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -13,97 +13,55 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:89:37\n-   |\n-LL | static STATIC11: Box<MyOwned> = box MyOwned;\n-   |                                     ^^^^^^^\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:100:32\n+  --> $DIR/check-static-values-constraints.rs:99:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:105:5\n+  --> $DIR/check-static-values-constraints.rs:104:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:105:9\n-   |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |         ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:107:5\n+  --> $DIR/check-static-values-constraints.rs:105:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:107:9\n-   |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |         ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:112:6\n+  --> $DIR/check-static-values-constraints.rs:109:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:112:10\n-   |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |          ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:114:6\n+  --> $DIR/check-static-values-constraints.rs:110:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:114:10\n-   |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-   |          ^^^^^^^\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:121:5\n+  --> $DIR/check-static-values-constraints.rs:116:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:121:9\n-   |\n-LL |     box 3;\n-   |         ^\n-\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:126:45\n+  --> $DIR/check-static-values-constraints.rs:120:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^ cannot move out of static item\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:126:38\n+  --> $DIR/check-static-values-constraints.rs:120:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:126:42\n-   |\n-LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                          ^\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "f80d55cb342676dd96ec04aef47d924f65a0300f", "filename": "src/test/ui/consts/const-block-non-item-statement-2.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,17 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-\n const A: usize = { 1; 2 };\n+//~^ ERROR statements in constants are unstable\n \n const B: usize = { { } 2 };\n+//~^ ERROR statements in constants are unstable\n \n macro_rules! foo {\n-    () => (())\n+    () => (()) //~ ERROR statements in constants are unstable\n }\n const C: usize = { foo!(); 2 };\n \n const D: usize = { let x = 4; 2 };\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "580f7e039d1c35f55709ebed193e7cfd1317f11b", "filename": "src/test/ui/consts/const-block-non-item-statement-2.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,62 @@\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:11:20\n+   |\n+LL | const A: usize = { 1; 2 };\n+   |                    ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:14:20\n+   |\n+LL | const B: usize = { { } 2 };\n+   |                    ^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:18:12\n+   |\n+LL |     () => (()) //~ ERROR statements in constants are unstable\n+   |            ^^\n+LL | }\n+LL | const C: usize = { foo!(); 2 };\n+   |                    ------- in this macro invocation\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:22:28\n+   |\n+LL | const D: usize = { let x = 4; 2 };\n+   |                            ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:22:28\n+   |\n+LL | const D: usize = { let x = 4; 2 };\n+   |                            ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:22:1\n+   |\n+LL | const D: usize = { let x = 4; 2 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-2.rs:22:1\n+   |\n+LL | const D: usize = { let x = 4; 2 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "cfa4b778dde80b48324cb17de35c5eebdaa18610", "filename": "src/test/ui/consts/const-block-non-item-statement-3.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-\n type Array = [u32; {  let x = 2; 5 }];\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "0124288d43d575caa4c6d3668b0cbdccec94f4c2", "filename": "src/test/ui/consts/const-block-non-item-statement-3.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-3.rs:11:31\n+   |\n+LL | type Array = [u32; {  let x = 2; 5 }];\n+   |                               ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-3.rs:11:31\n+   |\n+LL | type Array = [u32; {  let x = 2; 5 }];\n+   |                               ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-3.rs:11:20\n+   |\n+LL | type Array = [u32; {  let x = 2; 5 }];\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement-3.rs:11:20\n+   |\n+LL | type Array = [u32; {  let x = 2; 5 }];\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f974a24c26f72f40511317056bc0c089e6a5c8f3", "filename": "src/test/ui/consts/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-\n enum Foo {\n     Bar = { let x = 1; 3 }\n+    //~^ ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n+    //~| ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n }\n \n pub fn main() {}"}, {"sha": "b367a9d99374eedcf42f1fcaa69db3254d66214d", "filename": "src/test/ui/consts/const-block-non-item-statement.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement.rs:12:21\n+   |\n+LL |     Bar = { let x = 1; 3 }\n+   |                     ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement.rs:12:21\n+   |\n+LL |     Bar = { let x = 1; 3 }\n+   |                     ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement.rs:12:11\n+   |\n+LL |     Bar = { let x = 1; 3 }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/const-block-non-item-statement.rs:12:11\n+   |\n+LL |     Bar = { let x = 1; 3 }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "63e5bcccf5d3488a3e7e10d8c523d541cfcac7a7", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,6 +12,7 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n \n@@ -23,7 +24,7 @@ unsafe impl Sync for Foo {}\n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n static BAR: () = unsafe {\n-    *FOO.0.get() = 5; //~ ERROR static contains unimplemented expression type\n+    *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n };\n \n fn main() {}"}, {"sha": "740954c6c66239bf92bda010b1e9c4645eeec5ae", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,7 +1,7 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/assign-to-static-within-other-static-2.rs:26:5\n+  --> $DIR/assign-to-static-within-other-static-2.rs:27:5\n    |\n-LL |     *FOO.0.get() = 5; //~ ERROR static contains unimplemented expression type\n+LL |     *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n    |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "6f16f644eec68177c7d9161f7c29d7b0c6589cb3", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,6 +12,7 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "ca652c9df32adb2c1f6869e2fcfc35d5118dbdca", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/assign-to-static-within-other-static.rs:20:5\n+  --> $DIR/assign-to-static-within-other-static.rs:21:5\n    |\n LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n    |     ^^^^^^^"}, {"sha": "602d4da24f3836c6760463224762b24e0ccaa6b8", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_let)]\n+\n fn main() {}\n \n struct FakeNeedsDrop;"}, {"sha": "86e3482fda6b949b6c270ad4f48c4c005851e581", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:23:55\n+  --> $DIR/const_let.rs:25:55\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                                       ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:27:35\n+  --> $DIR/const_let.rs:29:35\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                                   ^"}, {"sha": "d23b6250b4df2e8830042120b1498c8f4c29f2e7", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_let)]\n+\n fn main() {\n     // Tests the Collatz conjecture with an incorrect base case (0 instead of 1).\n     // The value of `n` will loop indefinitely (4 - 2 - 1 - 4)."}, {"sha": "2ff80e5efb57d49852b91cf4d0e71e924dc1f6b3", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:17:9\n+  --> $DIR/infinite_loop.rs:19:9\n    |\n LL | /         while n != 0 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/infinite_loop.rs:14:18\n+  --> $DIR/infinite_loop.rs:16:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:18:20\n+  --> $DIR/infinite_loop.rs:20:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "b21c1827e2ba2ef4b40ebbf9fd41e3a0e4925d03", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_let)]\n+\n fn main() {\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time"}, {"sha": "c0cd98b2fca1e1f5dc58c84bbceef2affa5b64fd", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52475.rs:16:9\n+  --> $DIR/issue-52475.rs:18:9\n    |\n LL | /         while n < 5 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/issue-52475.rs:12:18\n+  --> $DIR/issue-52475.rs:14:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:17:17\n+  --> $DIR/issue-52475.rs:19:17\n    |\n LL |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "6c2fdcc8615c893f89b60507b675c212268cb1bf", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,6 +12,7 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n \n@@ -26,7 +27,7 @@ fn foo() {}\n \n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ ERROR static contains unimplemented expression\n+    //~^ contains unimplemented expression\n \n     foo();\n     //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants"}, {"sha": "49b39e2f5c6c933b115e25ec314cdec2a5ccf475", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mod-static-with-const-fn.rs:28:5\n+  --> $DIR/mod-static-with-const-fn.rs:29:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:31:5\n+  --> $DIR/mod-static-with-const-fn.rs:32:5\n    |\n LL |     foo();\n    |     ^^^^^"}, {"sha": "7141d7ac8b8625396852c91bb6cee85fc7598781", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -20,6 +20,17 @@ LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR doe\n LL | }\n    | - temporary value is freed at the end of this statement\n \n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:17:28\n+   |\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:18:29\n    |\n@@ -30,6 +41,6 @@ LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "6661de4ab2cb586bcaa737211848c2a56d51ca7b", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_transmute)]\n+#![feature(const_transmute,const_let)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "fce1688716d30bde6833f9eb01ea0f2a1a326459", "filename": "src/test/ui/consts/const-fn-destructuring-arg.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,10 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n+// test that certain things are disallowed in constant functions\n \n-const fn i((a, b): (u32, u32)) -> u32 {\n+#![feature(const_fn)]\n+\n+// no destructuring\n+const fn i((\n+            a,\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n+            b\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n+           ): (u32, u32)) -> u32 {\n     a + b\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "029d63a7720a80976192256b0158059aa99d6657", "filename": "src/test/ui/consts/const-fn-destructuring-arg.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n+  --> $DIR/const-fn-destructuring-arg.rs:17:13\n+   |\n+LL |             a,\n+   |             ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n+  --> $DIR/const-fn-destructuring-arg.rs:19:13\n+   |\n+LL |             b\n+   |             ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-destructuring-arg.rs:22:5\n+   |\n+LL |     a + b\n+   |     ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-destructuring-arg.rs:22:9\n+   |\n+LL |     a + b\n+   |         ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2f7e2ecaa4e40085336a7db5dc67b05d65e948bc", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -37,9 +37,13 @@ const fn get_Y_addr() -> &'static u32 {\n }\n \n const fn get() -> u32 {\n-    let x = 22;\n-    let y = 44;\n+    let x = 22; //~ ERROR let bindings in constant functions are unstable\n+//~^ ERROR statements in constant functions\n+    let y = 44; //~ ERROR let bindings in constant functions are unstable\n+//~^ ERROR statements in constant functions\n     x + y\n+//~^ ERROR let bindings in constant functions are unstable\n+//~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "1a8c5f558a212a305e8f49a908f55223e1bfa6a1", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -16,7 +16,55 @@ error[E0013]: constant functions cannot refer to statics, use a constant instead\n LL |     &Y\n    |     ^^\n \n-error: aborting due to 3 previous errors\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:40:13\n+   |\n+LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:40:13\n+   |\n+LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:42:13\n+   |\n+LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:42:13\n+   |\n+LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:44:5\n+   |\n+LL |     x + y\n+   |     ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-not-safe-for-const.rs:44:9\n+   |\n+LL |     x + y\n+   |         ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 9 previous errors\n \n-Some errors occurred: E0013, E0015.\n+Some errors occurred: E0013, E0015, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "a3c53a451e106732063ff34e2a8f89fc11fba354", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,7 @@\n // compile-pass\n \n+#![feature(const_let)]\n+\n struct S(i32);\n \n const A: () = {"}, {"sha": "0de7396501adc053762a4e2a6b15b06cccd1bdd9", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n \n+#![feature(const_let)]\n+#![feature(const_fn)]\n+\n pub struct AA {\n     pub data: [u8; 10],\n }"}, {"sha": "c2ed6cd85ab5c176b795a4ad4d8eba8453cbd8da", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,4 @@\n+#![feature(const_let)]\n #![feature(const_fn)]\n \n struct S {\n@@ -7,7 +8,7 @@ struct S {\n impl S {\n     const fn foo(&mut self, x: u32) {\n         self.state = x;\n-        //~^ ERROR constant function contains unimplemented expression\n+        //~^ contains unimplemented expression\n     }\n }\n "}, {"sha": "0f294616d255c3f73c7eba1f3b2687a53702427e", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:9:9\n+  --> $DIR/const_let_assign3.rs:10:9\n    |\n LL |         self.state = x;\n    |         ^^^^^^^^^^^^^^\n \n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/const_let_assign3.rs:16:5\n+  --> $DIR/const_let_assign3.rs:17:5\n    |\n LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n    |     ^ constants require immutable values"}, {"sha": "8739cb80e9403cf6d780d51f9d01931f8b9ca511", "filename": "src/test/ui/consts/const_let_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let, const_fn)]\n+\n // run-pass\n \n struct Foo<T>(T);"}, {"sha": "e644886b923e7ed83bebd376b4cd5a75e2612eec", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,4 +1,4 @@\n-#![feature(underscore_const_names)]\n+#![feature(underscore_const_names, const_let)]\n \n const _: bool = false && false; //~ WARN boolean short circuiting operators in constants\n const _: bool = true && false; //~ WARN boolean short circuiting operators in constants\n@@ -13,4 +13,4 @@ const _: bool = {\n     x\n };\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "695d33b6908984b4c7e6874c1b1965c51aaa2447", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,7 @@\n // https://github.com/rust-lang/rust/issues/55223\n \n+#![feature(const_let)]\n+\n union Foo<'a> {\n     y: &'a (),\n     long_live_the_unit: &'static (),"}, {"sha": "a5fa88e5e683242f6089a4f91fc7eddc6c924e31", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling-alloc-id-ice.rs:8:1\n+  --> $DIR/dangling-alloc-id-ice.rs:10:1\n    |\n LL | / const FOO: &() = { //~ ERROR any use of this value will cause an error\n LL | |     let y = ();"}, {"sha": "7fc773412f2f8e55f87de5331c9090c3cc852514", "filename": "src/test/ui/consts/dangling_raw_ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let)]\n+\n const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n     let x = 42;\n     &x"}, {"sha": "3b20936f8ae971a293050214cbd1141e0b660696", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling_raw_ptr.rs:1:1\n+  --> $DIR/dangling_raw_ptr.rs:3:1\n    |\n LL | / const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n LL | |     let x = 42;"}, {"sha": "b5a8fe8819cdd6091b2be1b41244549cd6aad7e2", "filename": "src/test/ui/consts/issue-54224.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,8 +1,6 @@\n-// compile-pass\n-\n #![feature(nll)]\n \n-const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n+const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n \n use std::borrow::Cow;\n \n@@ -11,5 +9,6 @@ pub const Y: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[X]);\n \n \n pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n+//~^ ERROR temporary value dropped while borrowed\n \n fn main() {}"}, {"sha": "451f49c1cb57abecf1253e7298ccedeabcc1b9e6", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,23 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-54224.rs:3:39\n+   |\n+LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n+   |                                 ------^^^^^^^^^-\n+   |                                 |     |        |\n+   |                                 |     |        temporary value is freed at the end of this statement\n+   |                                 |     creates a temporary which is freed while still in use\n+   |                                 using this value as a constant requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-54224.rs:11:57\n+   |\n+LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n+   |                                          ---------------^^^^^^^^^-\n+   |                                          |              |        |\n+   |                                          |              |        temporary value is freed at the end of this statement\n+   |                                          |              creates a temporary which is freed while still in use\n+   |                                          using this value as a constant requires that borrow lasts for `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "6c4e9e0a067d7dcf74c6249fa1b49e2a5808d3b0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -112,6 +112,12 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n+error: local variables in const fn are unstable\n+  --> $DIR/min_const_fn.rs:109:34\n+   |\n+LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n+   |                                  ^\n+\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:110:44\n    |\n@@ -215,7 +221,7 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 35 previous errors\n \n Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "ba6989f8b417a1374e4255426f241947ddcc731f", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -106,7 +106,7 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n-const fn foo30_6() -> bool { let x = true; x }\n+const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n const fn foo36(a: bool, b: bool) -> bool { a && b }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo37(a: bool, b: bool) -> bool { a || b }"}, {"sha": "a93a4f817fc14d1aaeaaeca770572a81e5889287", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -112,6 +112,12 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n+error: local variables in const fn are unstable\n+  --> $DIR/min_const_fn.rs:109:34\n+   |\n+LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n+   |                                  ^\n+\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:110:44\n    |\n@@ -202,6 +208,6 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "7a0cd939c145cb6560ed13184b4032127f3e8d2f", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.nll.stderr", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/866664c8bb1a3f1eb7fa60c8d8243535675ea78f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866664c8bb1a3f1eb7fa60c8d8243535675ea78f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr?ref=866664c8bb1a3f1eb7fa60c8d8243535675ea78f", "patch": "@@ -1,51 +0,0 @@\n-error: mutable references in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:3:9\n-   |\n-LL |     let b = &mut a; //~ ERROR mutable references in const fn are unstable\n-   |         ^\n-\n-error: mutable references in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:12:13\n-   |\n-LL |         let b = &mut a; //~ ERROR mutable references in const fn are unstable\n-   |             ^\n-\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:19:13\n-   |\n-LL |     let b = &mut a; //~ references in statics may only refer to immutable\n-   |             ^^^^^^ statics require immutable values\n-\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:26:15\n-   |\n-LL |     { let b = &mut a; }  //~ references in statics may only refer to immutable\n-   |               ^^^^^^ statics require immutable values\n-\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:37:17\n-   |\n-LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n-   |                 ^^^^^^^^^ statics require immutable values\n-\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mutable_borrow.rs:39:5\n-   |\n-LL |     *a = Some(Foo); //~ unimplemented expression type\n-   |     ^^\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mutable_borrow.rs:37:22\n-   |\n-LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n-   |                      ^^^^ creates a temporary which is freed while still in use\n-...\n-LL |     a\n-   |     - using this value as a static requires that borrow lasts for `'static`\n-LL | };\n-   | - temporary value is freed at the end of this statement\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors occurred: E0017, E0019, E0716.\n-For more information about an error, try `rustc --explain E0017`."}, {"sha": "3dd76b630a883401acf05ed0179268d498c7fb3a", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,43 +1,17 @@\n const fn mutable_ref_in_const() -> u8 {\n-    let mut a = 0;\n-    let b = &mut a; //~ ERROR mutable references in const fn are unstable\n+    let mut a = 0; //~ ERROR local variables in const fn\n+    let b = &mut a;\n     *b\n }\n \n struct X;\n \n impl X {\n     const fn inherent_mutable_ref_in_const() -> u8 {\n-        let mut a = 0;\n-        let b = &mut a; //~ ERROR mutable references in const fn are unstable\n+        let mut a = 0; //~ ERROR local variables in const fn\n+        let b = &mut a;\n         *b\n     }\n }\n \n-static mut FOO: u32 = {\n-    let mut a = 0;\n-    let b = &mut a; //~ references in statics may only refer to immutable\n-    *b\n-};\n-\n-static mut BAR: Option<String> = {\n-    let mut a = None;\n-    // taking a mutable reference erases everything we know about `a`\n-    { let b = &mut a; }  //~ references in statics may only refer to immutable\n-    a\n-};\n-\n-struct Foo;\n-\n-impl Drop for Foo {\n-    fn drop(&mut self) {}\n-}\n-\n-static mut BAR2: &mut Option<Foo> = {\n-    let mut a = &mut None; //~ references in statics may only refer to immutable values\n-    //~^ does not live long enough\n-    *a = Some(Foo); //~ unimplemented expression type\n-    a\n-};\n-\n fn main() {}"}, {"sha": "fa46f5c804fe0eaed14f4360e024bfa122ed4a6a", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 9, "deletions": 46, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,51 +1,14 @@\n-error: mutable references in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:3:9\n+error: local variables in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:2:9\n    |\n-LL |     let b = &mut a; //~ ERROR mutable references in const fn are unstable\n-   |         ^\n+LL |     let mut a = 0; //~ ERROR local variables in const fn\n+   |         ^^^^^\n \n-error: mutable references in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:12:13\n+error: local variables in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:11:13\n    |\n-LL |         let b = &mut a; //~ ERROR mutable references in const fn are unstable\n-   |             ^\n+LL |         let mut a = 0; //~ ERROR local variables in const fn\n+   |             ^^^^^\n \n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:19:13\n-   |\n-LL |     let b = &mut a; //~ references in statics may only refer to immutable\n-   |             ^^^^^^ statics require immutable values\n-\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:26:15\n-   |\n-LL |     { let b = &mut a; }  //~ references in statics may only refer to immutable\n-   |               ^^^^^^ statics require immutable values\n-\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/mutable_borrow.rs:37:17\n-   |\n-LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n-   |                 ^^^^^^^^^ statics require immutable values\n-\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mutable_borrow.rs:39:5\n-   |\n-LL |     *a = Some(Foo); //~ unimplemented expression type\n-   |     ^^\n-\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/mutable_borrow.rs:37:22\n-   |\n-LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n-   |                      ^^^^ temporary value does not live long enough\n-...\n-LL | };\n-   | - temporary value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0017, E0019, E0597.\n-For more information about an error, try `rustc --explain E0017`."}, {"sha": "4ce41f80f82c8dff332491835619331abdf21e40", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let)]\n+\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "d695f64e2c3b55a6a1d9fddf1372cfc6f9ba6856", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:6:5\n+  --> $DIR/partial_qualif.rs:8:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "5863429a2f2c5ddd19ad6e7efc57eb130582155f", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,11 +1,13 @@\n+#![feature(const_let)]\n+\n use std::cell::Cell;\n \n const FOO: &u32 = {\n     let mut a = 42;\n     {\n         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n-        //~^ ERROR constant contains unimplemented expression\n+        //~^ contains unimplemented expression\n     }\n     &{a}\n };"}, {"sha": "cc3635a979b370f792afd0c1e34da3b5a3141daa", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,17 +1,17 @@\n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/projection_qualif.rs:6:27\n+  --> $DIR/projection_qualif.rs:8:27\n    |\n LL |         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n    |                           ^^^^^^ constants require immutable values\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:7:18\n+  --> $DIR/projection_qualif.rs:9:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^\n \n error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n-  --> $DIR/projection_qualif.rs:7:18\n+  --> $DIR/projection_qualif.rs:9:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^"}, {"sha": "d8749bb5fd90bff0251e2c94a71fe0ffd246fa9d", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:4:9\n+  --> $DIR/promote_const_let.rs:6:9\n    |\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`"}, {"sha": "8de9b00eb111d3bb0baca2e63cd9278d0ba68ced", "filename": "src/test/ui/consts/promote_const_let.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let)]\n+\n fn main() {\n     let x: &'static u32 = {\n         let y = 42;"}, {"sha": "6bbb7495fb0dca1035a811a19ddc173f98730315", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:4:10\n+  --> $DIR/promote_const_let.rs:6:10\n    |\n LL |         &y //~ ERROR does not live long enough\n    |          ^ borrowed value does not live long enough"}, {"sha": "806a74ee4530b0f798783a60930668b78d6c0ccc", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let)]\n+\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications"}, {"sha": "4fac64bf8063f19dbec23b44a35eb5278989fee8", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:10:5\n+  --> $DIR/qualif_overwrite.rs:12:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "29557a3da47811d491291021e7fc49bc339d5872", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_let)]\n+\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "181b728c7b76f2746f63f1e59a150238eccc4359", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:8:5\n+  --> $DIR/qualif_overwrite_2.rs:10:5\n    |\n LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^^^"}, {"sha": "e5ccf32af1473e44693414e08e0220636fbccfd5", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -14,6 +14,5 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n-//~^ ERROR contains unimplemented expression type\n \n fn main() {}"}, {"sha": "fa5c767caf24d6d3eb41de0e767be7fb2ac960c4", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -6,16 +6,6 @@ LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/E0010-teach.rs:16:28\n-   |\n-LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n-   |                            ^\n-   |\n-   = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n-   = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "66a9319a7df4345c03a622818760910fb8adc696", "filename": "src/test/ui/error-codes/E0010.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,6 +12,5 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n-//~^ ERROR contains unimplemented expression type\n \n fn main() {}"}, {"sha": "83c1b409a5174aba042fd73b872726425b2d641b", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -4,13 +4,6 @@ error[E0010]: allocations are not allowed in constants\n LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/E0010.rs:14:28\n-   |\n-LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n-   |                            ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "b283e28651487c427bec09e160c8ab4806bcbd94", "filename": "src/test/ui/feature-gate-underscore_const_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(const_let)]\n \n trait Trt {}\n struct Str {}"}, {"sha": "ab90ef8f11f7cf22bcc5ef847013210b9ff5bb59", "filename": "src/test/ui/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/feature-gate-underscore_const_names.rs:16:1\n+  --> $DIR/feature-gate-underscore_const_names.rs:17:1\n    |\n LL | / const _ : () = {\n LL | |     use std::marker::PhantomData;"}, {"sha": "9bf957a5f1e05988a3f0de479442d264e8f86000", "filename": "src/test/ui/feature-gates/feature-gate-const_let.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const let without feature gate.\n+\n+const FOO: usize = {\n+    //~^ ERROR statements in constants are unstable\n+    //~| ERROR: let bindings in constants are unstable\n+    let x = 42;\n+    //~^ ERROR statements in constants are unstable\n+    //~| ERROR: let bindings in constants are unstable\n+    42\n+};\n+\n+static BAR: usize = {\n+    //~^ ERROR statements in statics are unstable\n+    //~| ERROR: let bindings in statics are unstable\n+    let x = 42;\n+    //~^ ERROR statements in statics are unstable\n+    //~| ERROR: let bindings in statics are unstable\n+    42\n+};\n+\n+fn main() {}"}, {"sha": "9e680e87f79a89aa81b69556dcd94fb5610b67b0", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,14 +1,68 @@\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:15:17\n+   |\n+LL |         let p = 3;\n+   |                 ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:15:17\n+   |\n+LL |         let p = 3;\n+   |                 ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:18:9\n+   |\n+LL |         &p //~ ERROR `p` does not live long enough\n+   |         ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:12:5\n+   |\n+LL | /     const z: &'static isize = {\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |         //~| ERROR statements in constants are unstable\n+LL | |         let p = 3;\n+...  |\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |     };\n+   | |______^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:12:5\n+   |\n+LL | /     const z: &'static isize = {\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |         //~| ERROR statements in constants are unstable\n+LL | |         let p = 3;\n+...  |\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |     };\n+   | |______^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:14:9\n+  --> $DIR/issue-18118.rs:18:9\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^\n    |         |\n    |         borrowed value does not live long enough\n    |         using this value as a constant requires that `p` is borrowed for `'static`\n+LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - `p` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0658.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "7194c159c1e98a79409b7c11ff291cc36f66c68d", "filename": "src/test/ui/issues/issue-18118.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -10,7 +10,12 @@\n \n pub fn main() {\n     const z: &'static isize = {\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         let p = 3;\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n+        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "2d83b86e5f40bf9c608638bee12c80e02c75a203", "filename": "src/test/ui/issues/issue-18118.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,13 +1,67 @@\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:15:17\n+   |\n+LL |         let p = 3;\n+   |                 ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:15:17\n+   |\n+LL |         let p = 3;\n+   |                 ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:18:9\n+   |\n+LL |         &p //~ ERROR `p` does not live long enough\n+   |         ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: let bindings in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:12:5\n+   |\n+LL | /     const z: &'static isize = {\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |         //~| ERROR statements in constants are unstable\n+LL | |         let p = 3;\n+...  |\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |     };\n+   | |______^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-18118.rs:12:5\n+   |\n+LL | /     const z: &'static isize = {\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |         //~| ERROR statements in constants are unstable\n+LL | |         let p = 3;\n+...  |\n+LL | |         //~^ ERROR let bindings in constants are unstable\n+LL | |     };\n+   | |______^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:14:10\n+  --> $DIR/issue-18118.rs:18:10\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |          ^ borrowed value does not live long enough\n+LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to previous error\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0658.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "2b223bac8e67b7d849f19e6387a916c404878107", "filename": "src/test/ui/issues/issue-32829-2.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -15,28 +15,32 @@\n const bad : u32 = {\n     {\n         5;\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR statements in constants are unstable\n+        //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n const bad_three : u32 = {\n     {\n         valid();\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n         5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n@@ -45,35 +49,40 @@ static bad_five : u32 = {\n     {\n         invalid();\n         //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n         5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR statements in statics are unstable\n+        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "6d6b94ca4bc6d2c36db553142a8b13e176ca42c2", "filename": "src/test/ui/issues/issue-32829-2.stderr", "status": "modified", "additions": 78, "deletions": 5, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,21 +1,94 @@\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:17:9\n+   |\n+LL |         5;\n+   |         ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:24:9\n+  --> $DIR/issue-32829-2.rs:25:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:25:9\n+   |\n+LL |         invalid();\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constants are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:34:9\n+   |\n+LL |         valid();\n+   |         ^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:42:9\n+   |\n+LL |         5;\n+   |         ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:46:9\n+  --> $DIR/issue-32829-2.rs:50:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:50:9\n+   |\n+LL |         invalid();\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:59:9\n+   |\n+LL |         valid();\n+   |         ^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:67:9\n+   |\n+LL |         5;\n+   |         ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:68:9\n+  --> $DIR/issue-32829-2.rs:75:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:75:9\n+   |\n+LL |         invalid();\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in statics are unstable (see issue #48821)\n+  --> $DIR/issue-32829-2.rs:84:9\n+   |\n+LL |         valid();\n+   |         ^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors occurred: E0015, E0658.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "a2f40b3f5396c2f48461809aa96ae1b502108071", "filename": "src/test/ui/issues/issue-37550.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n const fn x() {\n-    let t = true;\n-    let x = || t; //~ ERROR function pointers in const fn are unstable\n+    let t = true; //~ ERROR local variables in const fn\n+    let x = || t;\n }\n \n fn main() {}"}, {"sha": "5a7d1ad043ee47a0cbd2aaf51ac0869d87481cf5", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,7 +1,7 @@\n-error: function pointers in const fn are unstable\n-  --> $DIR/issue-37550.rs:13:9\n+error: local variables in const fn are unstable\n+  --> $DIR/issue-37550.rs:12:9\n    |\n-LL |     let x = || t; //~ ERROR function pointers in const fn are unstable\n+LL |     let t = true; //~ ERROR local variables in const fn\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "801a1301ad77496fcdcf6fa9991ec4a95bf5e29f", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -16,6 +16,5 @@ use std::cell::RefCell;\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `std::cell::RefCell<isize>` cannot be shared between threads safely [E0277]\n-//~| ERROR contains unimplemented expression type\n \n fn main() { }"}, {"sha": "b0d732bdb6fa6eb5a73dc011b12dc9544e2ed383", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -4,12 +4,6 @@ error[E0010]: allocations are not allowed in statics\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/issue-7364.rs:16:41\n-   |\n-LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n-   |                                         ^^^^^^^^^^^^^^^\n-\n error[E0277]: `std::cell::RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:16:1\n    |\n@@ -21,7 +15,7 @@ LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    = note: required because it appears within the type `std::boxed::Box<std::cell::RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0010, E0019, E0277.\n+Some errors occurred: E0010, E0277.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "7e6ced12fe69aad1a6e08b03243e72a0d44c53ad", "filename": "src/test/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -12,6 +12,5 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR static contains unimplemented expression\n \n fn main() {}"}, {"sha": "ad44121e76316d5ac37a480ce465f525dc6ee79c", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -4,13 +4,6 @@ error[E0010]: allocations are not allowed in statics\n LL | static mut a: Box<isize> = box 3;\n    |                            ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static-mut-not-constant.rs:13:32\n-   |\n-LL | static mut a: Box<isize> = box 3;\n-   |                                ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "8d31fd0b1e93d6dd415804ba2dfa4309e99bef8d", "filename": "src/test/ui/underscore_const_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore_const_names.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -10,6 +10,7 @@\n \n // compile-pass\n \n+#![feature(const_let)]\n #![feature(underscore_const_names)]\n \n trait Trt {}"}, {"sha": "191f09b54ee7324a334877e8dc4405af6586dd81", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_let)]\n+\n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n //~^ ERROR cannot mutate statics in the initializer of another static"}, {"sha": "673a71b4642f39028ae47e1a13b093819a9fc8ef", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8937faa83795ccd55b19a5cb1869ce3b1097fe43/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=8937faa83795ccd55b19a5cb1869ce3b1097fe43", "patch": "@@ -1,11 +1,11 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/write-to-static-mut-in-static.rs:12:33\n+  --> $DIR/write-to-static-mut-in-static.rs:14:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^\n \n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/write-to-static-mut-in-static.rs:15:34\n+  --> $DIR/write-to-static-mut-in-static.rs:17:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^"}]}