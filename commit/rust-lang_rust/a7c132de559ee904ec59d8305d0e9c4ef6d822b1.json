{"sha": "a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "node_id": "C_kwDOAAsO6NoAKGE3YzEzMmRlNTU5ZWU5MDRlYzU5ZDgzMDVkMGU5YzRlZjZkODIyYjE", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-09T02:55:06Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-15T16:13:35Z"}, "message": "Move push_outlives_components to rustc_infer", "tree": {"sha": "3a79a79adb366410ceb545a8f6eda8811dfc1f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a79a79adb366410ceb545a8f6eda8811dfc1f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "html_url": "https://github.com/rust-lang/rust/commit/a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dafe6d1c328d2f0580763e8438a227e490deb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dafe6d1c328d2f0580763e8438a227e490deb10", "html_url": "https://github.com/rust-lang/rust/commit/1dafe6d1c328d2f0580763e8438a227e490deb10"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "98f926e9d76d5c8fd079b7edb07f626df4dc2b61", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -2,10 +2,10 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n-use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sso::SsoHashSet;\n-use smallvec::SmallVec;\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {\n@@ -47,14 +47,16 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Push onto `out` all the things that must outlive `'a` for the condition\n-    /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-    pub fn push_outlives_components(self, ty0: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-        let mut visited = SsoHashSet::new();\n-        compute_components(self, ty0, out, &mut visited);\n-        debug!(\"components({:?}) = {:?}\", ty0, out);\n-    }\n+/// Push onto `out` all the things that must outlive `'a` for the condition\n+/// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n+pub fn push_outlives_components(\n+    tcx: TyCtxt<'tcx>,\n+    ty0: Ty<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+) {\n+    let mut visited = SsoHashSet::new();\n+    compute_components(tcx, ty0, out, &mut visited);\n+    debug!(\"components({:?}) = {:?}\", ty0, out);\n }\n \n fn compute_components(", "previous_filename": "compiler/rustc_middle/src/ty/outlives.rs"}, {"sha": "03d6c45a653459220fe75c4fbffe369549a44678", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -1,5 +1,6 @@\n //! Various code related to computing outlives relations.\n \n+pub mod components;\n pub mod env;\n pub mod obligations;\n pub mod verify;"}, {"sha": "91a22ecc5a994186a4e41990785999fc51a177ea", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -1,5 +1,5 @@\n //! Code that handles \"type-outlives\" constraints like `T: 'a`. This\n-//! is based on the `push_outlives_components` function defined on the tcx,\n+//! is based on the `push_outlives_components` function defined in rustc_infer,\n //! but it adds a bit of heuristics on top, in particular to deal with\n //! associated types and projections.\n //!\n@@ -59,13 +59,13 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{\n     self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n@@ -271,7 +271,7 @@ where\n         assert!(!ty.has_escaping_bound_vars());\n \n         let mut components = smallvec![];\n-        self.tcx.push_outlives_components(ty, &mut components);\n+        push_outlives_components(self.tcx, ty, &mut components);\n         self.components_must_outlive(origin, &components, region);\n     }\n "}, {"sha": "c839f824d1c9c57501111431e430180269c3c517", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -1,8 +1,8 @@\n use smallvec::smallvec;\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n \n@@ -200,7 +200,7 @@ impl Elaborator<'tcx> {\n \n                 let visited = &mut self.visited;\n                 let mut components = smallvec![];\n-                tcx.push_outlives_components(ty_max, &mut components);\n+                push_outlives_components(tcx, ty_max, &mut components);\n                 self.stack.extend(\n                     components\n                         .into_iter()"}, {"sha": "20d07bdc48a622d171947fbfe2ed7f1b3e813748", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -92,7 +92,6 @@ pub mod fold;\n pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n-pub mod outlives;\n pub mod print;\n pub mod query;\n pub mod relate;"}, {"sha": "f2fc4e59d46492320e473991dc61446a0cc8e467", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -4,9 +4,9 @@\n \n use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n@@ -118,7 +118,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, r_b)) => {\n                         let ty_a = infcx.resolve_vars_if_possible(ty_a);\n                         let mut components = smallvec![];\n-                        tcx.push_outlives_components(ty_a, &mut components);\n+                        push_outlives_components(tcx, ty_a, &mut components);\n                         implied_bounds_from_components(r_b, components)\n                     }\n                 },"}, {"sha": "76ae2ee43566e9d0ac28a7cf6c49fca342159d70", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c132de559ee904ec59d8305d0e9c4ef6d822b1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::outlives::Component;\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Region, RegionKind, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -35,7 +35,7 @@ pub fn insert_outlives_predicate<'tcx>(\n             // Or if within `struct Foo<U>` you had `T = Vec<U>`, then\n             // we would want to add `U: 'outlived_region`\n             let mut components = smallvec![];\n-            tcx.push_outlives_components(ty, &mut components);\n+            push_outlives_components(tcx, ty, &mut components);\n             for component in components {\n                 match component {\n                     Component::Region(r) => {"}]}