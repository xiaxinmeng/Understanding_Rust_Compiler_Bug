{"sha": "32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZDY0ZWRjZjlkMzFkZWQ2MDlhYjcwYjMxYmQzNzc5ZDZmODVlYzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-11T15:44:02Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-17T09:33:14Z"}, "message": "Simplfy color availability check", "tree": {"sha": "685f3663dfc9d72589f64553192033702657051c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/685f3663dfc9d72589f64553192033702657051c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "html_url": "https://github.com/rust-lang/rust/commit/32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704001b929b9e93f67d4affa9cae27bdb64d1aeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/704001b929b9e93f67d4affa9cae27bdb64d1aeb", "html_url": "https://github.com/rust-lang/rust/commit/704001b929b9e93f67d4affa9cae27bdb64d1aeb"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "bb33404e69072c0e6ffd143d6dc5cfee4a82fe38", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -4301,7 +4301,6 @@ dependencies = [\n  \"serde_json\",\n  \"smallvec 1.4.2\",\n  \"tempfile\",\n- \"termcolor\",\n ]\n \n [[package]]"}, {"sha": "32104e6f00d44f5471c7b99f74ee4087f0cbfbbc", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -200,6 +200,11 @@ pub trait Emitter {\n         true\n     }\n \n+    /// Checks if we can use colors in the current output stream.\n+    fn supports_color(&self) -> bool {\n+        false\n+    }\n+\n     fn source_map(&self) -> Option<&Lrc<SourceMap>>;\n \n     /// Formats the substitutions of the primary_span\n@@ -504,6 +509,10 @@ impl Emitter for EmitterWriter {\n     fn should_show_explain(&self) -> bool {\n         !self.short_message\n     }\n+\n+    fn supports_color(&self) -> bool {\n+        self.dst.supports_color()\n+    }\n }\n \n /// An emitter that does nothing when emitting a diagnostic.\n@@ -2057,6 +2066,14 @@ impl Destination {\n             Destination::Raw(ref mut t, true) => WritableDst::ColoredRaw(Ansi::new(t)),\n         }\n     }\n+\n+    fn supports_color(&self) -> bool {\n+        match *self {\n+            Self::Terminal(ref stream) => stream.supports_color(),\n+            Self::Buffered(ref buffer) => buffer.buffer().supports_color(),\n+            Self::Raw(_, supports_color) => supports_color,\n+        }\n+    }\n }\n \n impl<'a> WritableDst<'a> {"}, {"sha": "b0f5bac6abd0fc069d431fef32ddc4733697a1bd", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -20,6 +20,3 @@ regex = \"1\"\n \n [dev-dependencies]\n expect-test = \"1.0\"\n-\n-[target.'cfg(windows)'.dependencies]\n-termcolor = \"1.0\""}, {"sha": "8ac24fdc8af2dbbba8e7bd6b8492d7014c2f0b02", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -249,7 +249,8 @@ fn run_test(\n     outdir: DirState,\n     path: PathBuf,\n ) -> Result<(), TestFailure> {\n-    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts, edition);\n+    let (test, line_offset, supports_color) =\n+        make_test(test, Some(cratename), as_test_harness, opts, edition);\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -294,38 +295,19 @@ fn run_test(\n             path.to_str().expect(\"target path must be valid unicode\").to_string()\n         }\n     });\n-    match options.error_format {\n-        ErrorOutputType::HumanReadable(kind) => {\n-            let (_, color_config) = kind.unzip();\n-            match color_config {\n-                ColorConfig::Never => {\n-                    compiler.arg(\"--color\").arg(\"never\");\n-                }\n-                ColorConfig::Always => {\n-                    compiler.arg(\"--color\").arg(\"always\");\n-                }\n-                ColorConfig::Auto => {\n-                    #[cfg(windows)]\n-                    {\n-                        // This specific check is because old windows consoles require a connection\n-                        // to be able to display colors (and they don't support ANSI), which we\n-                        // cannot in here, so in case this is an old windows console, we can't\n-                        // display colors.\n-                        use crate::termcolor::{ColorChoice, StandardStream, WriteColor};\n-                        if StandardStream::stdout(ColorChoice::Auto).is_synchronous() {\n-                            compiler.arg(\"--color\").arg(\"never\");\n-                        } else {\n-                            compiler.arg(\"--color\").arg(\"always\");\n-                        }\n-                    }\n-                    #[cfg(not(windows))]\n-                    {\n-                        compiler.arg(\"--color\").arg(\"always\");\n-                    }\n-                }\n+    if let ErrorOutputType::HumanReadable(kind) = options.error_format {\n+        let (_, color_config) = kind.unzip();\n+        match color_config {\n+            ColorConfig::Never => {\n+                compiler.arg(\"--color\").arg(\"never\");\n+            }\n+            ColorConfig::Always => {\n+                compiler.arg(\"--color\").arg(\"always\");\n+            }\n+            ColorConfig::Auto => {\n+                compiler.arg(\"--color\").arg(if supports_color { \"always\" } else { \"never\" });\n             }\n         }\n-        _ => {}\n     }\n \n     compiler.arg(\"-\");\n@@ -396,18 +378,19 @@ fn run_test(\n }\n \n /// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n-/// lines before the test code begins.\n+/// lines before the test code begins as well as if the output stream supports colors or not.\n crate fn make_test(\n     s: &str,\n     cratename: Option<&str>,\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n-) -> (String, usize) {\n+) -> (String, usize, bool) {\n     let (crate_attrs, everything_else, crates) = partition_source(s);\n     let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n+    let mut supports_color = false;\n \n     if opts.attrs.is_empty() && !opts.display_warnings {\n         // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n@@ -433,7 +416,7 @@ crate fn make_test(\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n         rustc_span::with_session_globals(edition, || {\n-            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n             use rustc_session::parse::ParseSess;\n@@ -447,6 +430,9 @@ crate fn make_test(\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let emitter =\n                 EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+\n+            supports_color = emitter.supports_color();\n+\n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n             let handler = Handler::with_emitter(false, None, box emitter);\n             let sess = ParseSess::with_span_handler(handler, sm);\n@@ -516,7 +502,7 @@ crate fn make_test(\n         Err(ErrorReported) => {\n             // If the parser panicked due to a fatal error, pass the test code through unchanged.\n             // The error will be reported during compilation.\n-            return (s.to_owned(), 0);\n+            return (s.to_owned(), 0, false);\n         }\n     };\n \n@@ -566,7 +552,7 @@ crate fn make_test(\n \n     debug!(\"final doctest:\\n{}\", prog);\n \n-    (prog, line_offset)\n+    (prog, line_offset, supports_color)\n }\n \n // FIXME(aburka): use a real parser to deal with multiline attributes"}, {"sha": "880c859dd1b23e8fd5642bd38e23cf0bb374bad2", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -243,7 +243,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 .collect::<Vec<Cow<'_, str>>>()\n                 .join(\"\\n\");\n             let krate = krate.as_ref().map(|s| &**s);\n-            let (test, _) = doctest::make_test(&test, krate, false, &Default::default(), edition);\n+            let (test, _, _) =\n+                doctest::make_test(&test, krate, false, &Default::default(), edition);\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n             let edition_string = format!(\"&amp;edition={}\", edition);"}, {"sha": "a88efba77b41cc7efb0406d4971166a098c0022e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d64edcf9d31ded609ab70b31bd3779d6f85ec1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=32d64edcf9d31ded609ab70b31bd3779d6f85ec1", "patch": "@@ -54,10 +54,6 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n extern crate test as testing;\n-#[macro_use]\n-extern crate tracing;\n-#[cfg(windows)]\n-extern crate termcolor;\n \n use std::default::Default;\n use std::env;"}]}