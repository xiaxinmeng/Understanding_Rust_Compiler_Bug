{"sha": "19a38de68a8de14fe49e96b315db026bd57b9696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTM4ZGU2OGE4ZGUxNGZlNDllOTZiMzE1ZGIwMjZiZDU3Yjk2OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T06:49:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T06:49:15Z"}, "message": "Auto merge of #63402 - estebank:strip-margin, r=oli-obk\n\nStrip code to the left and right in diagnostics for long lines\n\nFix #62999.", "tree": {"sha": "6719abd3ec46dbff6b320d65b2cbe451cd8a2300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6719abd3ec46dbff6b320d65b2cbe451cd8a2300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a38de68a8de14fe49e96b315db026bd57b9696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a38de68a8de14fe49e96b315db026bd57b9696", "html_url": "https://github.com/rust-lang/rust/commit/19a38de68a8de14fe49e96b315db026bd57b9696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a38de68a8de14fe49e96b315db026bd57b9696/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "html_url": "https://github.com/rust-lang/rust/commit/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae"}, {"sha": "aaf4dc35e33eea8b658b82a307b81e63e8b214f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf4dc35e33eea8b658b82a307b81e63e8b214f4", "html_url": "https://github.com/rust-lang/rust/commit/aaf4dc35e33eea8b658b82a307b81e63e8b214f4"}], "stats": {"total": 736, "additions": 580, "deletions": 156}, "files": [{"sha": "ae641d6ae32b110b3b968b6fcbc305675df58b25", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -3232,6 +3232,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"serialize\",\n  \"syntax_pos\",\n+ \"term_size\",\n  \"termcolor\",\n  \"unicode-width\",\n ]\n@@ -4107,6 +4108,17 @@ dependencies = [\n  \"winapi 0.3.6\",\n ]\n \n+[[package]]\n+name = \"term_size\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9e5b9a66db815dcfd2da92db471106457082577c3c278d4138ab3e3b4e189327\"\n+dependencies = [\n+ \"kernel32-sys\",\n+ \"libc\",\n+ \"winapi 0.2.8\",\n+]\n+\n [[package]]\n name = \"termcolor\"\n version = \"1.0.4\""}, {"sha": "740d9db7edcf77d2a909008489af2728f16bafaf", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -1292,6 +1292,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help\"),\n+    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+        \"set the current terminal width\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n         \"attempt to recover from parse errors (experimental)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "f01883d9634cdf3f501f2df8dd564a4d6865af2d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -1055,13 +1055,15 @@ fn default_emitter(\n                         Some(source_map.clone()),\n                         short,\n                         sopts.debugging_opts.teach,\n+                        sopts.debugging_opts.terminal_width,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n                         Some(source_map.clone()),\n                         short,\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n+                        None,  // no terminal width\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n@@ -1375,7 +1377,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered)),\n@@ -1389,7 +1391,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered)),"}, {"sha": "e3ea92dc8ab381a2c2ee97e62ef8beb466a48762", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -1156,11 +1156,13 @@ pub fn report_ices_to_stderr_if_any<F: FnOnce() -> R, R>(f: F) -> Result<R, Erro\n             // Thread panicked without emitting a fatal diagnostic\n             eprintln!(\"\");\n \n-            let emitter =\n-                Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                                None,\n-                                                                false,\n-                                                                false));\n+            let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n+                errors::ColorConfig::Auto,\n+                None,\n+                false,\n+                false,\n+                None,\n+            ));\n             let handler = errors::Handler::with_emitter(true, None, emitter);\n \n             // a .span_bug or .bug call has already printed what"}, {"sha": "1541845bb55f62f5a39a577e34e053967bee8d53", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -18,3 +18,4 @@ unicode-width = \"0.1.4\"\n atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.6.1\"\n+term_size = \"0.3.1\""}, {"sha": "77d373e7a8ca83af1c7dee8fa821e93d22eedfb9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 370, "deletions": 92, "changes": 462, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n-use std::cmp::{min, Reverse};\n+use std::cmp::{min, max, Reverse};\n use std::path::Path;\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n@@ -51,9 +51,127 @@ impl HumanReadableErrorType {\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMapperDyn>>,\n         teach: bool,\n+        terminal_width: Option<usize>,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n-        EmitterWriter::new(dst, source_map, short, teach, color_config.suggests_using_colors())\n+        let color = color_config.suggests_using_colors();\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width)\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug)]\n+struct Margin {\n+    /// The available whitespace in the left that can be consumed when centering.\n+    pub whitespace_left: usize,\n+    /// The column of the beginning of left-most span.\n+    pub span_left: usize,\n+    /// The column of the end of right-most span.\n+    pub span_right: usize,\n+    /// The beginning of the line to be displayed.\n+    pub computed_left: usize,\n+    /// The end of the line to be displayed.\n+    pub computed_right: usize,\n+    /// The current width of the terminal. 140 by default and in tests.\n+    pub column_width: usize,\n+    /// The end column of a span label, including the span. Doesn't account for labels not in the\n+    /// same line as the span.\n+    pub label_right: usize,\n+}\n+\n+impl Margin {\n+    fn new(\n+        whitespace_left: usize,\n+        span_left: usize,\n+        span_right: usize,\n+        label_right: usize,\n+        column_width: usize,\n+        max_line_len: usize,\n+    ) -> Self {\n+        // The 6 is padding to give a bit of room for `...` when displaying:\n+        // ```\n+        // error: message\n+        //   --> file.rs:16:58\n+        //    |\n+        // 16 | ... fn foo(self) -> Self::Bar {\n+        //    |                     ^^^^^^^^^\n+        // ```\n+\n+        let mut m = Margin {\n+            whitespace_left: if whitespace_left >= 6 { whitespace_left - 6 } else { 0 },\n+            span_left: if span_left >= 6 { span_left - 6 } else { 0 },\n+            span_right: span_right + 6,\n+            computed_left: 0,\n+            computed_right: 0,\n+            column_width,\n+            label_right: label_right + 6,\n+        };\n+        m.compute(max_line_len);\n+        m\n+    }\n+\n+    fn was_cut_left(&self) -> bool {\n+        self.computed_left > 0\n+    }\n+\n+    fn was_cut_right(&self, line_len: usize) -> bool {\n+        let right = if self.computed_right == self.span_right ||\n+            self.computed_right == self.label_right\n+        {\n+            // Account for the \"...\" padding given above. Otherwise we end up with code lines that\n+            // do fit but end in \"...\" as if they were trimmed.\n+            self.computed_right - 6\n+        } else {\n+            self.computed_right\n+        };\n+        right < line_len && line_len > self.computed_left + self.column_width\n+    }\n+\n+    fn compute(&mut self, max_line_len: usize) {\n+        // When there's a lot of whitespace (>20), we want to trim it as it is useless.\n+        self.computed_left = if self.whitespace_left > 20 {\n+            self.whitespace_left - 16 // We want some padding.\n+        } else {\n+            0\n+        };\n+        // We want to show as much as possible, max_line_len is the right-most boundary for the\n+        // relevant code.\n+        self.computed_right = max(max_line_len, self.computed_left);\n+\n+        if self.computed_right - self.computed_left > self.column_width {\n+            // Trimming only whitespace isn't enough, let's get craftier.\n+            if self.label_right - self.whitespace_left <= self.column_width {\n+                // Attempt to fit the code window only trimming whitespace.\n+                self.computed_left = self.whitespace_left;\n+                self.computed_right = self.computed_left + self.column_width;\n+            } else if self.label_right - self.span_left <= self.column_width {\n+                // Attempt to fit the code window considering only the spans and labels.\n+                let padding_left = (self.column_width - (self.label_right - self.span_left)) / 2;\n+                self.computed_left = self.span_left - padding_left;\n+                self.computed_right = self.computed_left + self.column_width;\n+            } else if self.span_right - self.span_left <= self.column_width {\n+                // Attempt to fit the code window considering the spans and labels plus padding.\n+                let padding_left = (self.column_width - (self.span_right - self.span_left)) / 5 * 2;\n+                self.computed_left = self.span_left - padding_left;\n+                self.computed_right = self.computed_left + self.column_width;\n+            } else { // Mostly give up but still don't show the full line.\n+                self.computed_left = self.span_left;\n+                self.computed_right = self.span_right;\n+            }\n+        }\n+    }\n+\n+    fn left(&self, line_len: usize) -> usize {\n+        min(self.computed_left, line_len)\n+    }\n+\n+    fn right(&self, line_len: usize) -> usize {\n+        if max(line_len, self.computed_left) - self.computed_left <= self.column_width {\n+            line_len\n+        } else if self.computed_right > line_len {\n+            line_len\n+        } else {\n+            self.computed_right\n+        }\n     }\n }\n \n@@ -180,6 +298,7 @@ pub struct EmitterWriter {\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n+    terminal_width: Option<usize>,\n }\n \n #[derive(Debug)]\n@@ -190,18 +309,21 @@ pub struct FileWithAnnotatedLines {\n }\n \n impl EmitterWriter {\n-    pub fn stderr(color_config: ColorConfig,\n-                  source_map: Option<Lrc<SourceMapperDyn>>,\n-                  short_message: bool,\n-                  teach: bool)\n-                  -> EmitterWriter {\n+    pub fn stderr(\n+        color_config: ColorConfig,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        short_message: bool,\n+        teach: bool,\n+        terminal_width: Option<usize>,\n+    ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n             dst,\n             sm: source_map,\n             short_message,\n             teach,\n             ui_testing: false,\n+            terminal_width,\n         }\n     }\n \n@@ -211,13 +333,15 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         colored: bool,\n+        terminal_width: Option<usize>,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n             sm: source_map,\n             short_message,\n             teach,\n             ui_testing: false,\n+            terminal_width,\n         }\n     }\n \n@@ -234,12 +358,70 @@ impl EmitterWriter {\n         }\n     }\n \n-    fn render_source_line(&self,\n-                          buffer: &mut StyledBuffer,\n-                          file: Lrc<SourceFile>,\n-                          line: &Line,\n-                          width_offset: usize,\n-                          code_offset: usize) -> Vec<(usize, Style)> {\n+    fn draw_line(\n+        &self,\n+        buffer: &mut StyledBuffer,\n+        source_string: &str,\n+        line_index: usize,\n+        line_offset: usize,\n+        width_offset: usize,\n+        code_offset: usize,\n+        margin: Margin,\n+    ) {\n+        let line_len = source_string.len();\n+        // Create the source line we will highlight.\n+        let left = margin.left(line_len);\n+        let right = margin.right(line_len);\n+        // On long lines, we strip the source line, accounting for unicode.\n+        let mut taken = 0;\n+        let code: String = source_string.chars().skip(left).take_while(|ch| {\n+            // Make sure that the trimming on the right will fall within the terminal width.\n+            // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n+            // For now, just accept that sometimes the code line will be longer than desired.\n+            let next = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n+            if taken + next > right - left {\n+                return false;\n+            }\n+            taken += next;\n+            true\n+        }).collect();\n+        buffer.puts(line_offset, code_offset, &code, Style::Quotation);\n+        if margin.was_cut_left() {\n+            // We have stripped some code/whitespace from the beginning, make it clear.\n+            buffer.puts(line_offset, code_offset, \"...\", Style::LineNumber);\n+        }\n+        if margin.was_cut_right(line_len) {\n+            // We have stripped some code after the right-most span end, make it clear we did so.\n+            buffer.puts(line_offset, code_offset + taken - 3, \"...\", Style::LineNumber);\n+        }\n+        buffer.puts(line_offset, 0, &self.maybe_anonymized(line_index), Style::LineNumber);\n+\n+        draw_col_separator(buffer, line_offset, width_offset - 2);\n+    }\n+\n+    fn render_source_line(\n+        &self,\n+        buffer: &mut StyledBuffer,\n+        file: Lrc<SourceFile>,\n+        line: &Line,\n+        width_offset: usize,\n+        code_offset: usize,\n+        margin: Margin,\n+    ) -> Vec<(usize, Style)> {\n+        // Draw:\n+        //\n+        //   LL | ... code ...\n+        //      |     ^^-^ span label\n+        //      |       |\n+        //      |       secondary span label\n+        //\n+        //   ^^ ^ ^^^ ^^^^ ^^^ we don't care about code too far to the right of a span, we trim it\n+        //   |  | |   |\n+        //   |  | |   actual code found in your source code and the spans we use to mark it\n+        //   |  | when there's too much wasted space to the left, trim it\n+        //   |  vertical divider between the column number and the code\n+        //   column number\n+\n         if line.line_index == 0 {\n             return Vec::new();\n         }\n@@ -251,14 +433,21 @@ impl EmitterWriter {\n \n         let line_offset = buffer.num_lines();\n \n-        // First create the source line we will highlight.\n-        buffer.puts(line_offset, code_offset, &source_string, Style::Quotation);\n-        buffer.puts(line_offset,\n-                    0,\n-                    &self.maybe_anonymized(line.line_index),\n-                    Style::LineNumber);\n+        let left = margin.left(source_string.len()); // Left trim\n+        // Account for unicode characters of width !=0 that were removed.\n+        let left = source_string.chars().take(left).fold(0, |acc, ch| {\n+            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n+        });\n \n-        draw_col_separator(buffer, line_offset, width_offset - 2);\n+        self.draw_line(\n+            buffer,\n+            &source_string,\n+            line.line_index,\n+            line_offset,\n+            width_offset,\n+            code_offset,\n+            margin,\n+        );\n \n         // Special case when there's only one annotation involved, it is the start of a multiline\n         // span and there's no text at the beginning of the code line. Instead of doing the whole\n@@ -279,18 +468,13 @@ impl EmitterWriter {\n         if line.annotations.len() == 1 {\n             if let Some(ref ann) = line.annotations.get(0) {\n                 if let AnnotationType::MultilineStart(depth) = ann.annotation_type {\n-                    if source_string.chars()\n-                                    .take(ann.start_col)\n-                                    .all(|c| c.is_whitespace()) {\n+                    if source_string.chars().take(ann.start_col).all(|c| c.is_whitespace()) {\n                         let style = if ann.is_primary {\n                             Style::UnderlinePrimary\n                         } else {\n                             Style::UnderlineSecondary\n                         };\n-                        buffer.putc(line_offset,\n-                                    width_offset + depth - 1,\n-                                    '/',\n-                                    style);\n+                        buffer.putc(line_offset, width_offset + depth - 1, '/', style);\n                         return vec![(depth, style)];\n                     }\n                 }\n@@ -511,19 +695,23 @@ impl EmitterWriter {\n             match annotation.annotation_type {\n                 AnnotationType::MultilineStart(depth) |\n                 AnnotationType::MultilineEnd(depth) => {\n-                    draw_range(buffer,\n-                               '_',\n-                               line_offset + pos,\n-                               width_offset + depth,\n-                               code_offset + annotation.start_col,\n-                               style);\n+                    draw_range(\n+                        buffer,\n+                        '_',\n+                        line_offset + pos,\n+                        width_offset + depth,\n+                        code_offset + annotation.start_col - left,\n+                        style,\n+                    );\n                 }\n                 _ if self.teach => {\n-                    buffer.set_style_range(line_offset,\n-                                           code_offset + annotation.start_col,\n-                                           code_offset + annotation.end_col,\n-                                           style,\n-                                           annotation.is_primary);\n+                    buffer.set_style_range(\n+                        line_offset,\n+                        code_offset + annotation.start_col - left,\n+                        code_offset + annotation.end_col - left,\n+                        style,\n+                        annotation.is_primary,\n+                    );\n                 }\n                 _ => {}\n             }\n@@ -551,7 +739,7 @@ impl EmitterWriter {\n             if pos > 1 && (annotation.has_label() || annotation.takes_space()) {\n                 for p in line_offset + 1..=line_offset + pos {\n                     buffer.putc(p,\n-                                code_offset + annotation.start_col,\n+                                code_offset + annotation.start_col - margin.computed_left,\n                                 '|',\n                                 style);\n                 }\n@@ -595,15 +783,20 @@ impl EmitterWriter {\n                 Style::LabelSecondary\n             };\n             let (pos, col) = if pos == 0 {\n-                (pos + 1, annotation.end_col + 1)\n+                (pos + 1, if annotation.end_col + 1 > left {\n+                    annotation.end_col + 1 - left\n+                } else {\n+                    0\n+                })\n             } else {\n-                (pos + 2, annotation.start_col)\n+                (pos + 2, if annotation.start_col > left {\n+                    annotation.start_col - left\n+                } else {\n+                    0\n+                })\n             };\n             if let Some(ref label) = annotation.label {\n-                buffer.puts(line_offset + pos,\n-                            code_offset + col,\n-                            &label,\n-                            style);\n+                buffer.puts(line_offset + pos, code_offset + col, &label, style);\n             }\n         }\n \n@@ -638,10 +831,16 @@ impl EmitterWriter {\n                 ('-', Style::UnderlineSecondary)\n             };\n             for p in annotation.start_col..annotation.end_col {\n-                buffer.putc(line_offset + 1,\n-                            code_offset + p,\n-                            underline,\n-                            style);\n+                buffer.putc(\n+                    line_offset + 1,\n+                    if code_offset + p > left {\n+                        code_offset + p - left\n+                    } else {\n+                        0\n+                    },\n+                    underline,\n+                    style,\n+                );\n             }\n         }\n         annotations_position.iter().filter_map(|&(_, annotation)| {\n@@ -979,22 +1178,30 @@ impl EmitterWriter {\n                     let buffer_msg_line_offset = buffer.num_lines();\n \n                     buffer.prepend(buffer_msg_line_offset, \"--> \", Style::LineNumber);\n-                    buffer.append(buffer_msg_line_offset,\n-                                  &format!(\"{}:{}:{}\",\n-                                           loc.file.name,\n-                                           sm.doctest_offset_line(&loc.file.name, loc.line),\n-                                           loc.col.0 + 1),\n-                                  Style::LineAndColumn);\n+                    buffer.append(\n+                        buffer_msg_line_offset,\n+                        &format!(\n+                            \"{}:{}:{}\",\n+                            loc.file.name,\n+                            sm.doctest_offset_line(&loc.file.name, loc.line),\n+                            loc.col.0 + 1,\n+                        ),\n+                        Style::LineAndColumn,\n+                    );\n                     for _ in 0..max_line_num_len {\n                         buffer.prepend(buffer_msg_line_offset, \" \", Style::NoStyle);\n                     }\n                 } else {\n-                    buffer.prepend(0,\n-                                   &format!(\"{}:{}:{}: \",\n-                                            loc.file.name,\n-                                            sm.doctest_offset_line(&loc.file.name, loc.line),\n-                                            loc.col.0 + 1),\n-                                   Style::LineAndColumn);\n+                    buffer.prepend(\n+                        0,\n+                        &format!(\n+                            \"{}:{}:{}: \",\n+                            loc.file.name,\n+                            sm.doctest_offset_line(&loc.file.name, loc.line),\n+                            loc.col.0 + 1,\n+                        ),\n+                        Style::LineAndColumn,\n+                    );\n                 }\n             } else if !self.short_message {\n                 // remember where we are in the output buffer for easy reference\n@@ -1037,22 +1244,94 @@ impl EmitterWriter {\n                 // Contains the vertical lines' positions for active multiline annotations\n                 let mut multilines = FxHashMap::default();\n \n+                // Get the left-side margin to remove it\n+                let mut whitespace_margin = std::usize::MAX;\n+                for line_idx in 0..annotated_file.lines.len() {\n+                    let file = annotated_file.file.clone();\n+                    let line = &annotated_file.lines[line_idx];\n+                    if let Some(source_string) = file.get_line(line.line_index - 1) {\n+                        let leading_whitespace = source_string\n+                            .chars()\n+                            .take_while(|c| c.is_whitespace())\n+                            .count();\n+                        if source_string.chars().any(|c| !c.is_whitespace()) {\n+                            whitespace_margin = min(\n+                                whitespace_margin,\n+                                leading_whitespace,\n+                            );\n+                        }\n+                    }\n+                }\n+                if whitespace_margin == std::usize::MAX {\n+                    whitespace_margin = 0;\n+                }\n+\n+                // Left-most column any visible span points at.\n+                let mut span_left_margin = std::usize::MAX;\n+                for line in &annotated_file.lines {\n+                    for ann in &line.annotations {\n+                        span_left_margin = min(span_left_margin, ann.start_col);\n+                        span_left_margin = min(span_left_margin, ann.end_col);\n+                    }\n+                }\n+                if span_left_margin == std::usize::MAX {\n+                    span_left_margin = 0;\n+                }\n+\n+                // Right-most column any visible span points at.\n+                let mut span_right_margin = 0;\n+                let mut label_right_margin = 0;\n+                let mut max_line_len = 0;\n+                for line in &annotated_file.lines {\n+                    max_line_len = max(max_line_len, annotated_file.file\n+                        .get_line(line.line_index - 1)\n+                        .map(|s| s.len())\n+                        .unwrap_or(0));\n+                    for ann in &line.annotations {\n+                        span_right_margin = max(span_right_margin, ann.start_col);\n+                        span_right_margin = max(span_right_margin, ann.end_col);\n+                        // FIXME: account for labels not in the same line\n+                        let label_right = ann.label.as_ref().map(|l| l.len() + 1).unwrap_or(0);\n+                        label_right_margin = max(label_right_margin, ann.end_col + label_right);\n+                    }\n+                }\n+\n+                let width_offset = 3 + max_line_num_len;\n+                let code_offset = if annotated_file.multiline_depth == 0 {\n+                    width_offset\n+                } else {\n+                    width_offset + annotated_file.multiline_depth + 1\n+                };\n+\n+                let column_width = if let Some(width) = self.terminal_width {\n+                    width\n+                } else if self.ui_testing {\n+                    140\n+                } else {\n+                    term_size::dimensions().map(|(w, _)| w - code_offset).unwrap_or(140)\n+                };\n+\n+                let margin = Margin::new(\n+                    whitespace_margin,\n+                    span_left_margin,\n+                    span_right_margin,\n+                    label_right_margin,\n+                    column_width,\n+                    max_line_len,\n+                );\n+\n                 // Next, output the annotate source for this file\n                 for line_idx in 0..annotated_file.lines.len() {\n                     let previous_buffer_line = buffer.num_lines();\n \n-                    let width_offset = 3 + max_line_num_len;\n-                    let code_offset = if annotated_file.multiline_depth == 0 {\n-                        width_offset\n-                    } else {\n-                        width_offset + annotated_file.multiline_depth + 1\n-                    };\n-\n-                    let depths = self.render_source_line(&mut buffer,\n-                                                         annotated_file.file.clone(),\n-                                                         &annotated_file.lines[line_idx],\n-                                                         width_offset,\n-                                                         code_offset);\n+                    let depths = self.render_source_line(\n+                        &mut buffer,\n+                        annotated_file.file.clone(),\n+                        &annotated_file.lines[line_idx],\n+                        width_offset,\n+                        code_offset,\n+                        margin,\n+                    );\n \n                     let mut to_add = FxHashMap::default();\n \n@@ -1099,25 +1378,24 @@ impl EmitterWriter {\n \n                             let last_buffer_line_num = buffer.num_lines();\n \n-                            buffer.puts(last_buffer_line_num,\n-                                        0,\n-                                        &self.maybe_anonymized(annotated_file.lines[line_idx + 1]\n-                                                                             .line_index - 1),\n-                                        Style::LineNumber);\n-                            draw_col_separator(&mut buffer,\n-                                               last_buffer_line_num,\n-                                               1 + max_line_num_len);\n-                            buffer.puts(last_buffer_line_num,\n-                                        code_offset,\n-                                        &unannotated_line,\n-                                        Style::Quotation);\n+                            self.draw_line(\n+                                &mut buffer,\n+                                &unannotated_line,\n+                                annotated_file.lines[line_idx + 1].line_index - 1,\n+                                last_buffer_line_num,\n+                                width_offset,\n+                                code_offset,\n+                                margin,\n+                            );\n \n                             for (depth, style) in &multilines {\n-                                draw_multiline_line(&mut buffer,\n-                                                    last_buffer_line_num,\n-                                                    width_offset,\n-                                                    *depth,\n-                                                    *style);\n+                                draw_multiline_line(\n+                                    &mut buffer,\n+                                    last_buffer_line_num,\n+                                    width_offset,\n+                                    *depth,\n+                                    *style,\n+                                );\n                             }\n                         }\n                     }\n@@ -1207,7 +1485,7 @@ impl EmitterWriter {\n                         // ...or trailing spaces. Account for substitutions containing unicode\n                         // characters.\n                         let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n                         });\n \n                         let underline_start = (span_start_pos + start) as isize + offset;\n@@ -1230,7 +1508,7 @@ impl EmitterWriter {\n \n                         // length of the code after substitution\n                         let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0) as isize\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1) as isize\n                         });\n \n                         // length of the code to be substituted"}, {"sha": "6585633e00af85dda299db9e58629f800d3d0970", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -383,7 +383,7 @@ impl Handler {\n                                       cm: Option<Lrc<SourceMapperDyn>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false));\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false, None));\n         Handler::with_emitter_and_flags(emitter, flags)\n     }\n "}, {"sha": "9cfcad4271966b212a72f7bfd8a71d2daf183af2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -193,6 +193,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     source_map.map(|cm| cm as _),\n                     short,\n                     sessopts.debugging_opts.teach,\n+                    sessopts.debugging_opts.terminal_width,\n                 ).ui_testing(ui_testing)\n             )\n         },"}, {"sha": "c344765506298b036656fcad3111987dcc81fcb1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -433,7 +433,7 @@ pub fn make_test(s: &str,\n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false);\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);"}, {"sha": "ada46f7bc5a746f62814866ee3fd37f8565aef33", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -219,7 +219,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false)\n+        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false, None)\n             .ui_testing(je.ui_testing).emit_diagnostic(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();"}, {"sha": "652ae95c8534973587e884d152fc7769fee0d862", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -10,7 +10,14 @@ use errors::{Handler, emitter::EmitterWriter};\n use syntax_pos::{BytePos, Span};\n \n fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n-    let emitter = EmitterWriter::new(Box::new(io::sink()), Some(sm.clone()), false, false, false);\n+    let emitter = EmitterWriter::new(\n+        Box::new(io::sink()),\n+        Some(sm.clone()),\n+        false,\n+        false,\n+        false,\n+        None,\n+    );\n     ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n }\n \n@@ -28,10 +35,11 @@ fn t1() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        let mut string_reader = setup(&sm,\n-                                    &sh,\n-                                    \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\"\n-                                        .to_string());\n+        let mut string_reader = setup(\n+            &sm,\n+            &sh,\n+            \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\".to_string(),\n+        );\n         assert_eq!(string_reader.next_token(), token::Comment);\n         assert_eq!(string_reader.next_token(), token::Whitespace);\n         let tok1 = string_reader.next_token();\n@@ -127,8 +135,10 @@ fn character_a() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token(),\n-                    mk_lit(token::Char, \"a\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'a'\".to_string()).next_token(),\n+            mk_lit(token::Char, \"a\", None),\n+        );\n     })\n }\n \n@@ -137,8 +147,10 @@ fn character_space() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token(),\n-                    mk_lit(token::Char, \" \", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"' '\".to_string()).next_token(),\n+            mk_lit(token::Char, \" \", None),\n+        );\n     })\n }\n \n@@ -147,8 +159,10 @@ fn character_escaped() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token(),\n-                    mk_lit(token::Char, \"\\\\n\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token(),\n+            mk_lit(token::Char, \"\\\\n\", None),\n+        );\n     })\n }\n \n@@ -157,8 +171,10 @@ fn lifetime_name() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n-                    token::Lifetime(Symbol::intern(\"'abc\")));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n+            token::Lifetime(Symbol::intern(\"'abc\")),\n+        );\n     })\n }\n \n@@ -167,8 +183,10 @@ fn raw_string() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string()).next_token(),\n-                    mk_lit(token::StrRaw(3), \"\\\"#a\\\\b\\x00c\\\"\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string()).next_token(),\n+            mk_lit(token::StrRaw(3), \"\\\"#a\\\\b\\x00c\\\"\", None),\n+        );\n     })\n }\n \n@@ -179,11 +197,15 @@ fn literal_suffixes() {\n         let sh = mk_sess(sm.clone());\n         macro_rules! test {\n             ($input: expr, $tok_type: ident, $tok_contents: expr) => {{\n-                assert_eq!(setup(&sm, &sh, format!(\"{}suffix\", $input)).next_token(),\n-                            mk_lit(token::$tok_type, $tok_contents, Some(\"suffix\")));\n+                assert_eq!(\n+                    setup(&sm, &sh, format!(\"{}suffix\", $input)).next_token(),\n+                    mk_lit(token::$tok_type, $tok_contents, Some(\"suffix\")),\n+                );\n                 // with a whitespace separator:\n-                assert_eq!(setup(&sm, &sh, format!(\"{} suffix\", $input)).next_token(),\n-                            mk_lit(token::$tok_type, $tok_contents, None));\n+                assert_eq!(\n+                    setup(&sm, &sh, format!(\"{} suffix\", $input)).next_token(),\n+                    mk_lit(token::$tok_type, $tok_contents, None),\n+                );\n             }}\n         }\n \n@@ -197,12 +219,18 @@ fn literal_suffixes() {\n         test!(\"1.0\", Float, \"1.0\");\n         test!(\"1.0e10\", Float, \"1.0e10\");\n \n-        assert_eq!(setup(&sm, &sh, \"2us\".to_string()).next_token(),\n-                    mk_lit(token::Integer, \"2\", Some(\"us\")));\n-        assert_eq!(setup(&sm, &sh, \"r###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-                    mk_lit(token::StrRaw(3), \"raw\", Some(\"suffix\")));\n-        assert_eq!(setup(&sm, &sh, \"br###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-                    mk_lit(token::ByteStrRaw(3), \"raw\", Some(\"suffix\")));\n+        assert_eq!(\n+            setup(&sm, &sh, \"2us\".to_string()).next_token(),\n+            mk_lit(token::Integer, \"2\", Some(\"us\")),\n+        );\n+        assert_eq!(\n+            setup(&sm, &sh, \"r###\\\"raw\\\"###suffix\".to_string()).next_token(),\n+            mk_lit(token::StrRaw(3), \"raw\", Some(\"suffix\")),\n+        );\n+        assert_eq!(\n+            setup(&sm, &sh, \"br###\\\"raw\\\"###suffix\".to_string()).next_token(),\n+            mk_lit(token::ByteStrRaw(3), \"raw\", Some(\"suffix\")),\n+        );\n     })\n }\n "}, {"sha": "c472212bc20962b6bc202ea8184b3562e46a65b5", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -144,11 +144,14 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             println!(\"text: {:?}\", source_map.span_to_snippet(span));\n         }\n \n-        let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n-                                        Some(source_map.clone()),\n-                                        false,\n-                                        false,\n-                                        false);\n+        let emitter = EmitterWriter::new(\n+            Box::new(Shared { data: output.clone() }),\n+            Some(source_map.clone()),\n+            false,\n+            false,\n+            false,\n+            None,\n+        );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");\n "}, {"sha": "55523bad6c5076d9020534e0eb9de3471308126f", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -37,8 +37,8 @@ LL |         asm!(\"mov sp, $0\"::\"r\"(addr),\n error[E0669]: invalid value for constraint in inline assembly\n   --> $DIR/inline-asm-bad-operand.rs:56:32\n    |\n-LL |                            \"r\"(\"hello e0669\"));\n-   |                                ^^^^^^^^^^^^^\n+LL | ...                   \"r\"(\"hello e0669\"));\n+   |                           ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "62380135b333b029475fd057433ab0074960ba74", "filename": "src/test/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -67,14 +67,14 @@ LL |         deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:57:9\n    |\n-LL |         Trait::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:59:9\n    |\n-LL |         <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct': text\n   --> $DIR/lint-stability-deprecated.rs:106:17\n@@ -181,14 +181,14 @@ LL |         <Foo as Trait>::trait_deprecated_unstable(&foo);\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:155:9\n    |\n-LL |         Trait::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:157:9\n    |\n-LL |         <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedTrait': text\n   --> $DIR/lint-stability-deprecated.rs:185:10\n@@ -421,20 +421,20 @@ LL |         <Foo>::trait_deprecated_unstable(&foo);\n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:53:13\n    |\n-LL |         foo.method_deprecated_unstable_text();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   foo.method_deprecated_unstable_text();\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:54:9\n    |\n-LL |         Foo::method_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Foo::method_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:55:9\n    |\n-LL |         <Foo>::method_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::method_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:56:13\n@@ -445,8 +445,8 @@ LL |         foo.trait_deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:58:9\n    |\n-LL |         <Foo>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct::i': text\n   --> $DIR/lint-stability-deprecated.rs:107:13\n@@ -505,8 +505,8 @@ LL |         foo.trait_deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:156:9\n    |\n-LL |         <Foo>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n   --> $DIR/lint-stability-deprecated.rs:173:13"}, {"sha": "5f6a48a35f3683f7fff41efda7b6fab478d3e913", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -49,14 +49,14 @@ LL | fn fn_types(a: &'a isize,\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:42:36\n    |\n-LL |                                   &'b isize,\n-   |                                    ^^ undeclared lifetime\n+LL | ...                   &'b isize,\n+   |                        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:45:36\n    |\n-LL |                                   &'b isize)>,\n-   |                                    ^^ undeclared lifetime\n+LL | ...                   &'b isize)>,\n+   |                        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:46:17"}, {"sha": "abd9e189a75378d59123d8feec47890d2a69cc3e", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _: usize = 4; let _: usize = 5; let _: usize = 6; let _: usize = 7; let _: usize = 8; let _: usize = 9; let _: usize = 10; let _: usize = 11; let _: usize = 12; let _: usize = 13; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _: usize = 4; let _: usize = 5; let _: usize = 6; let _: usize = 7; let _: usize = 8; let _: usize = 9; let _: usize = 10; let _: usize = 11; let _: usize = 12; let _: usize = 13; let _: usize = 14; let _: usize = 15;\n+//~^ ERROR mismatched types\n+}"}, {"sha": "bf1699f5cabbb5d61ac29c8055f749901b780471", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming-2.rs:4:311\n+   |\n+LL | ...; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _:...\n+   |                                                        ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8d4d1b1627940c2ab2e5d5b08f1d1c9e01b7e57f", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\ud83e\udd80\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\ud83e\udd80\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\";\n+//~^ ERROR mismatched types\n+}"}, {"sha": "b56b1948d9e07bfe8aee267844e644f883935ae7", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming-unicode.rs:4:415\n+   |\n+LL | ...\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646...\n+   |                                               ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f6c8d345c652e89226f96b5c0bdc157679bebb44", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n+//~^ ERROR mismatched types\n+}"}, {"sha": "622713eb5f6fc432939263c51f2d9c24c4f6ce71", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming.rs:4:241\n+   |\n+LL | ...) = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ()...\n+   |                                                        ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c68f678aab3495a7dcc4cd6fc7f9c627a96326bf", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,8 @@\n+// ignore-tidy-linelength\n+\n+fn foo() -> usize {\n+                                                                                                                                                                                          ()\n+//~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "38df5a9e9a01f4b4739e2cf1205e49b0f1f3699d", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/whitespace-trimming-2.rs:4:187\n+   |\n+LL | ...-> usize {\n+   |       ----- expected `usize` because of return type\n+LL | ...                                                                                                                                                                                 ()\n+   |                                                                                                                                                                                     ^^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f747bcf17e0b427992a72926029dba912cd0b181", "filename": "src/test/ui/terminal-width/whitespace-trimming.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+                                                                                                                                                                                    let _: () = 42;\n+//~^ ERROR mismatched types\n+}"}, {"sha": "45a804b9f6a46b97866bb51cf096c43be2aa0b21", "filename": "src/test/ui/terminal-width/whitespace-trimming.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/whitespace-trimming.rs:4:193\n+   |\n+LL | ...                   let _: () = 42;\n+   |                                   ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a564b991c404b16565ff981ed25530144597ecc0", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a38de68a8de14fe49e96b315db026bd57b9696/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=19a38de68a8de14fe49e96b315db026bd57b9696", "patch": "@@ -162,6 +162,7 @@ const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"termcolor\"),\n     Crate(\"terminon\"),\n     Crate(\"termion\"),\n+    Crate(\"term_size\"),\n     Crate(\"thread_local\"),\n     Crate(\"ucd-util\"),\n     Crate(\"unicode-width\"),"}]}