{"sha": "c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "node_id": "C_kwDOAAsO6NoAKGM4Yzg0OWVmNWM0OTMyZDVhZWM1YmE2ZGJmOTM2ZDNkMTg4NTZmNzE", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-30T20:03:24Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-30T20:37:48Z"}, "message": "Use more consistent progress messages in bootstrap\n\nBefore:\n```\nTesting [\"rustc_interface\"] stage0 (aarch64-unknown-linux-gnu -> aarch64-unknown-linux-gnu)\n```\n\nAfter:\n```\nTesting {rustc_interface} stage0 (aarch64-unknown-linux-gnu -> aarch64-unknown-linux-gnu)\n```\n\nNote there is a slight consistency between `build` and `test`: The\nformer doesn't print \"compiler artifacts\". It would be annoying to fix\nand doesn't hurt anything, so I left it be.\n\n```\n; x t rustc_interface --stage 0 --dry-run\nTesting {rustc_interface} stage0 (aarch64-unknown-linux-gnu -> aarch64-unknown-linux-gnu)\n; x b rustc_interface --stage 0 --dry-run\nBuilding {rustc_interface} stage0 compiler artifacts (aarch64-unknown-linux-gnu -> aarch64-unknown-linux-gnu)\n```", "tree": {"sha": "05eeb36c8bf268de6894b9025d288f864dc130fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05eeb36c8bf268de6894b9025d288f864dc130fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "html_url": "https://github.com/rust-lang/rust/commit/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbede85538d3ee59819c5d069ffe8d2dd7931749", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbede85538d3ee59819c5d069ffe8d2dd7931749", "html_url": "https://github.com/rust-lang/rust/commit/cbede85538d3ee59819c5d069ffe8d2dd7931749"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "66bc0f023b6c9833c610b93d1386fbfde3412d01", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -97,13 +97,13 @@ impl RunConfig<'_> {\n         self.builder.build.build\n     }\n \n-    /// Return a `-p=x -p=y` string suitable for passing to a cargo invocation.\n+    /// Return a list of crate names selected by `run.paths`.\n     pub fn cargo_crates_in_set(&self) -> Interned<Vec<String>> {\n         let mut crates = Vec::new();\n         for krate in &self.paths {\n             let path = krate.assert_single_path();\n             let crate_name = self.builder.crate_paths[&path.path];\n-            crates.push(format!(\"-p={crate_name}\"));\n+            crates.push(crate_name.to_string());\n         }\n         INTERNER.intern_list(crates)\n     }\n@@ -112,18 +112,17 @@ impl RunConfig<'_> {\n /// A description of the crates in this set, suitable for passing to `builder.info`.\n ///\n /// `crates` should be generated by [`RunConfig::cargo_crates_in_set`].\n-pub fn crate_description(crates: Interned<Vec<String>>) -> String {\n+pub fn crate_description(crates: &[impl AsRef<str>]) -> String {\n     if crates.is_empty() {\n         return \"\".into();\n     }\n \n-    let mut descr = String::from(\": {\");\n-    for krate in &*crates {\n-        write!(descr, \"{}, \", krate.strip_prefix(\"-p=\").unwrap()).unwrap();\n+    let mut descr = String::from(\" {\");\n+    descr.push_str(crates[0].as_ref());\n+    for krate in &crates[1..] {\n+        descr.push_str(\", \");\n+        descr.push_str(krate.as_ref());\n     }\n-\n-    descr.pop();\n-    descr.pop();\n     descr.push('}');\n     descr\n }"}, {"sha": "188c0a43e50d766065f5925bbdabb70cc61e115a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -101,7 +101,7 @@ impl Step for Std {\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\n-            \"Checking stage{} std artifacts ({} -> {})\",\n+            \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n         run_cargo(\n@@ -157,7 +157,7 @@ impl Step for Std {\n         }\n \n         builder.info(&format!(\n-            \"Checking stage{} std test/bench/example targets ({} -> {})\",\n+            \"Checking stage{} library test/bench/example targets ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n         run_cargo("}, {"sha": "468efc1114c43f3ff8e6735b4e87313a8f5739bb", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -66,8 +66,8 @@ macro_rules! clean_crate_tree {\n                 }\n \n                 builder.info(&format!(\n-                    \"Cleaning stage{} {} artifacts ({} -> {}){}\",\n-                    compiler.stage, stringify!($name).to_lowercase(), &compiler.host, target, crate_description(self.crates),\n+                    \"Cleaning{} stage{} {} artifacts ({} -> {})\",\n+                    crate_description(&self.crates), compiler.stage, stringify!($name).to_lowercase(), &compiler.host, target,\n                 ));\n \n                 // NOTE: doesn't use `run_cargo` because we don't want to save a stamp file,"}, {"sha": "35bdfbfa0ed1a3bf1f10013c36b9be84e3aa3ef0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -111,7 +111,10 @@ impl Step for Std {\n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         if compiler_to_use != compiler {\n             builder.ensure(Std::new(compiler_to_use, target));\n-            builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", compiler_to_use.host, target));\n+            builder.info(&format!(\n+                \"Uplifting stage1 library ({} -> {})\",\n+                compiler_to_use.host, target\n+            ));\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the third party objects needed by various targets.\n@@ -127,18 +130,21 @@ impl Step for Std {\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"build\");\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n \n         builder.info(&format!(\n-            \"Building stage{} std artifacts ({} -> {}){}\",\n+            \"Building{} stage{} library artifacts ({} -> {})\",\n+            crate_description(&self.crates),\n             compiler.stage,\n             &compiler.host,\n             target,\n-            crate_description(self.crates),\n         ));\n         run_cargo(\n             builder,\n             cargo,\n-            self.crates.to_vec(),\n+            vec![],\n             &libstd_stamp(builder, compiler, target),\n             target_deps,\n             false,\n@@ -429,7 +435,7 @@ impl Step for StdLink {\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n         builder.info(&format!(\n-            \"Copying stage{} std from stage{} ({} -> {} / {})\",\n+            \"Copying stage{} library from stage{} ({} -> {} / {})\",\n             target_compiler.stage, compiler.stage, &compiler.host, target_compiler.host, target\n         ));\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n@@ -718,17 +724,21 @@ impl Step for Rustc {\n             }\n         }\n \n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n         builder.info(&format!(\n-            \"Building stage{} compiler artifacts ({} -> {}){}\",\n+            \"Building{} stage{} compiler artifacts ({} -> {})\",\n+            crate_description(&self.crates),\n             compiler.stage,\n             &compiler.host,\n             target,\n-            crate_description(self.crates),\n         ));\n         run_cargo(\n             builder,\n             cargo,\n-            self.crates.to_vec(),\n+            vec![],\n             &librustc_stamp(builder, compiler, target),\n             vec![],\n             false,"}, {"sha": "0562c270d54c069d95346655e4b593534d962915", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -12,6 +12,7 @@ use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n+use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n@@ -554,7 +555,8 @@ fn doc_std(\n     requested_crates: &[String],\n ) {\n     builder.info(&format!(\n-        \"Documenting stage{} std ({}) in {} format\",\n+        \"Documenting{} stage{} library ({}) in {} format\",\n+        crate_description(requested_crates),\n         stage,\n         target,\n         format.as_str()"}, {"sha": "d5bec268a45672365183fb1b4fb7df694f23d5ca", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c849ef5c4932d5aec5ba6dbf936d3d18856f71/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c8c849ef5c4932d5aec5ba6dbf936d3d18856f71", "patch": "@@ -11,6 +11,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile;\n@@ -2154,8 +2155,12 @@ impl Step for Crate {\n         }\n \n         builder.info(&format!(\n-            \"{} {:?} stage{} ({} -> {})\",\n-            test_kind, self.crates, compiler.stage, &compiler.host, target\n+            \"{}{} stage{} ({} -> {})\",\n+            test_kind,\n+            crate_description(&self.crates),\n+            compiler.stage,\n+            &compiler.host,\n+            target\n         ));\n         let _time = util::timeit(&builder);\n         try_run(builder, &mut cargo.into());"}]}