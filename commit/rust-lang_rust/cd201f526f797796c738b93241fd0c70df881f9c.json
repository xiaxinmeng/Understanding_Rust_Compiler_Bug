{"sha": "cd201f526f797796c738b93241fd0c70df881f9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjAxZjUyNmY3OTc3OTZjNzM4YjkzMjQxZmQwYzcwZGY4ODFmOWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-06T07:41:15Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-07T09:38:12Z"}, "message": "Update lintlist", "tree": {"sha": "660cf5f6972f0536eb065d0d0d333746b35ffee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660cf5f6972f0536eb065d0d0d333746b35ffee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd201f526f797796c738b93241fd0c70df881f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd201f526f797796c738b93241fd0c70df881f9c", "html_url": "https://github.com/rust-lang/rust/commit/cd201f526f797796c738b93241fd0c70df881f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd201f526f797796c738b93241fd0c70df881f9c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e33633a3c7095b873258ea3a2428574820b975", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e33633a3c7095b873258ea3a2428574820b975", "html_url": "https://github.com/rust-lang/rust/commit/07e33633a3c7095b873258ea3a2428574820b975"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "af89a473b6a6dacd4d846fa4002b2fde9a2de571", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cd201f526f797796c738b93241fd0c70df881f9c/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd201f526f797796c738b93241fd0c70df881f9c/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=cd201f526f797796c738b93241fd0c70df881f9c", "patch": "@@ -87,7 +87,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"borrow_interior_mutable_const\",\n         group: \"correctness\",\n-        desc: \"referencing const with interior mutability\",\n+        desc: \"referencing `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n     },\n@@ -178,7 +178,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"char_lit_as_u8\",\n         group: \"complexity\",\n-        desc: \"casting a character literal to u8 truncates\",\n+        desc: \"casting a character literal to `u8` truncates\",\n         deprecation: None,\n         module: \"types\",\n     },\n@@ -227,7 +227,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"cmp_nan\",\n         group: \"correctness\",\n-        desc: \"comparisons to NAN, which will always return false, probably not intended\",\n+        desc: \"comparisons to `NAN`, which will always return false, probably not intended\",\n         deprecation: None,\n         module: \"misc\",\n     },\n@@ -304,14 +304,14 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"declare_interior_mutable_const\",\n         group: \"correctness\",\n-        desc: \"declaring const with interior mutability\",\n+        desc: \"declaring `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n     },\n     Lint {\n         name: \"default_trait_access\",\n         group: \"pedantic\",\n-        desc: \"checks for literal calls to Default::default()\",\n+        desc: \"checks for literal calls to `Default::default()`\",\n         deprecation: None,\n         module: \"default_trait_access\",\n     },\n@@ -423,7 +423,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"else_if_without_else\",\n         group: \"restriction\",\n-        desc: \"if expression with an `else if`, but without a final `else` branch\",\n+        desc: \"`if` expression with an `else if`, but without a final `else` branch\",\n         deprecation: None,\n         module: \"else_if_without_else\",\n     },\n@@ -710,14 +710,14 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"if_same_then_else\",\n         group: \"correctness\",\n-        desc: \"if with the same *then* and *else* blocks\",\n+        desc: \"`if` with the same `then` and `else` blocks\",\n         deprecation: None,\n         module: \"copies\",\n     },\n     Lint {\n         name: \"ifs_same_cond\",\n         group: \"correctness\",\n-        desc: \"consecutive `ifs` with the same condition\",\n+        desc: \"consecutive `if`s with the same condition\",\n         deprecation: None,\n         module: \"copies\",\n     },\n@@ -766,7 +766,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"infallible_destructuring_match\",\n         group: \"style\",\n-        desc: \"a match statement with a single infallible arm instead of a `let`\",\n+        desc: \"a `match` statement with a single infallible arm instead of a `let`\",\n         deprecation: None,\n         module: \"infallible_destructuring_match\",\n     },\n@@ -787,7 +787,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"inherent_to_string_shadow_display\",\n         group: \"correctness\",\n-        desc: \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \",\n+        desc: \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait\",\n         deprecation: None,\n         module: \"inherent_to_string\",\n     },\n@@ -808,7 +808,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"int_plus_one\",\n         group: \"complexity\",\n-        desc: \"instead of using x >= y + 1, use x > y\",\n+        desc: \"instead of using `x >= y + 1`, use `x > y`\",\n         deprecation: None,\n         module: \"int_plus_one\",\n     },\n@@ -955,21 +955,21 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"let_underscore_must_use\",\n         group: \"restriction\",\n-        desc: \"non-binding let on a #[must_use] expression\",\n+        desc: \"non-binding let on a `#[must_use]` expression\",\n         deprecation: None,\n         module: \"let_underscore\",\n     },\n     Lint {\n         name: \"let_unit_value\",\n         group: \"style\",\n-        desc: \"creating a let binding to a value of unit type, which usually can\\'t be used afterwards\",\n+        desc: \"creating a `let` binding to a value of unit type, which usually can\\'t be used afterwards\",\n         deprecation: None,\n         module: \"types\",\n     },\n     Lint {\n         name: \"linkedlist\",\n         group: \"pedantic\",\n-        desc: \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\",\n+        desc: \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`\",\n         deprecation: None,\n         module: \"types\",\n     },\n@@ -1046,28 +1046,28 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"match_as_ref\",\n         group: \"complexity\",\n-        desc: \"a match on an Option value instead of using `as_ref()` or `as_mut`\",\n+        desc: \"a `match` on an Option value instead of using `as_ref()` or `as_mut`\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_bool\",\n         group: \"style\",\n-        desc: \"a match on a boolean expression instead of an `if..else` block\",\n+        desc: \"a `match` on a boolean expression instead of an `if..else` block\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_overlapping_arm\",\n         group: \"style\",\n-        desc: \"a match with overlapping arms\",\n+        desc: \"a `match` with overlapping arms\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_ref_pats\",\n         group: \"style\",\n-        desc: \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\",\n+        desc: \"a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -1081,7 +1081,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"match_wild_err_arm\",\n         group: \"style\",\n-        desc: \"a match with `Err(_)` arm and take drastic actions\",\n+        desc: \"a `match` with `Err(_)` arm and take drastic actions\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -1095,7 +1095,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"mem_discriminant_non_enum\",\n         group: \"correctness\",\n-        desc: \"calling mem::descriminant on non-enum type\",\n+        desc: \"calling `mem::descriminant` on non-enum type\",\n         deprecation: None,\n         module: \"mem_discriminant\",\n     },\n@@ -1165,7 +1165,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"missing_inline_in_public_items\",\n         group: \"restriction\",\n-        desc: \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\",\n+        desc: \"detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)\",\n         deprecation: None,\n         module: \"missing_inline\",\n     },\n@@ -1270,7 +1270,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"mutable_key_type\",\n         group: \"correctness\",\n-        desc: \"Check for mutable Map/Set key type\",\n+        desc: \"Check for mutable `Map`/`Set` key type\",\n         deprecation: None,\n         module: \"mut_key\",\n     },\n@@ -1382,7 +1382,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"neg_multiply\",\n         group: \"style\",\n-        desc: \"multiplying integers with -1\",\n+        desc: \"multiplying integers with `-1`\",\n         deprecation: None,\n         module: \"neg_multiply\",\n     },\n@@ -1480,7 +1480,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"option_map_unit_fn\",\n         group: \"complexity\",\n-        desc: \"using `option.map(f)`, where f is a function or closure that returns ()\",\n+        desc: \"using `option.map(f)`, where `f` is a function or closure that returns `()`\",\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n@@ -1550,7 +1550,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"panicking_unwrap\",\n         group: \"correctness\",\n-        desc: \"checks for calls of unwrap[_err]() that will always fail\",\n+        desc: \"checks for calls of `unwrap[_err]()` that will always fail\",\n         deprecation: None,\n         module: \"unwrap\",\n     },\n@@ -1746,7 +1746,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\",\n-        desc: \"using `result.map(f)`, where f is a function or closure that returns ()\",\n+        desc: \"using `result.map(f)`, where `f` is a function or closure that returns `()`\",\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n@@ -1774,7 +1774,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"same_functions_in_if_condition\",\n         group: \"pedantic\",\n-        desc: \"consecutive `ifs` with the same function call\",\n+        desc: \"consecutive `if`s with the same function call\",\n         deprecation: None,\n         module: \"copies\",\n     },\n@@ -1844,14 +1844,14 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"single_match\",\n         group: \"style\",\n-        desc: \"a match statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\",\n+        desc: \"a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"single_match_else\",\n         group: \"pedantic\",\n-        desc: \"a match statement with two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n+        desc: \"a `match` statement with two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -2159,7 +2159,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"unnecessary_unwrap\",\n         group: \"complexity\",\n-        desc: \"checks for calls of unwrap[_err]() that cannot fail\",\n+        desc: \"checks for calls of `unwrap[_err]()` that cannot fail\",\n         deprecation: None,\n         module: \"unwrap\",\n     },\n@@ -2390,7 +2390,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"zero_divided_by_zero\",\n         group: \"complexity\",\n-        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\",\n+        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\",\n         deprecation: None,\n         module: \"zero_div_zero\",\n     },\n@@ -2404,7 +2404,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"zero_ptr\",\n         group: \"style\",\n-        desc: \"using 0 as *{const, mut} T\",\n+        desc: \"using `0 as *{const, mut} T`\",\n         deprecation: None,\n         module: \"misc\",\n     },"}]}