{"sha": "fc152cd67e0b6d3f11f49eae43183d03a3b8bf17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTUyY2Q2N2UwYjZkM2YxMWY0OWVhZTQzMTgzZDAzYTNiOGJmMTc=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-08T21:04:03Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-21T19:50:26Z"}, "message": "move 'test zip ...' tests", "tree": {"sha": "0cc15530c2511b46e5ef05df9c1a959040f786ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc15530c2511b46e5ef05df9c1a959040f786ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17", "html_url": "https://github.com/rust-lang/rust/commit/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af44a2a857618150b180dabe9c3383a3911b3640", "url": "https://api.github.com/repos/rust-lang/rust/commits/af44a2a857618150b180dabe9c3383a3911b3640", "html_url": "https://github.com/rust-lang/rust/commit/af44a2a857618150b180dabe9c3383a3911b3640"}], "stats": {"total": 198, "additions": 95, "deletions": 103}, "files": [{"sha": "6680205c26ca0249e0e5ae66b621410802b68923", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc152cd67e0b6d3f11f49eae43183d03a3b8bf17/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=fc152cd67e0b6d3f11f49eae43183d03a3b8bf17", "patch": "@@ -376,6 +376,101 @@ fn test_zip_next_back_side_effects_exhausted() {\n     assert_eq!(b, vec![200, 300, 400]);\n }\n \n+#[derive(Debug)]\n+struct CountClone(Cell<i32>);\n+\n+fn count_clone() -> CountClone { CountClone(Cell::new(0)) }\n+\n+impl PartialEq<i32> for CountClone {\n+    fn eq(&self, rhs: &i32) -> bool {\n+        self.0.get() == *rhs\n+    }\n+}\n+\n+impl Clone for CountClone {\n+    fn clone(&self) -> Self {\n+        let ret = CountClone(self.0.clone());\n+        let n = self.0.get();\n+        self.0.set(n + 1);\n+        ret\n+    }\n+}\n+\n+#[test]\n+fn test_zip_cloned_sideffectful() {\n+    let xs = [count_clone(), count_clone(), count_clone(), count_clone()];\n+    let ys = [count_clone(), count_clone()];\n+\n+    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n+\n+    assert_eq!(&xs, &[1, 1, 1, 0][..]);\n+    assert_eq!(&ys, &[1, 1][..]);\n+\n+    let xs = [count_clone(), count_clone()];\n+    let ys = [count_clone(), count_clone(), count_clone(), count_clone()];\n+\n+    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n+\n+    assert_eq!(&xs, &[1, 1][..]);\n+    assert_eq!(&ys, &[1, 1, 0, 0][..]);\n+}\n+\n+#[test]\n+fn test_zip_map_sideffectful() {\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n+\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n+    assert_eq!(&ys, &[1, 1, 1, 1]);\n+\n+    let mut xs = [0; 4];\n+    let mut ys = [0; 6];\n+\n+    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n+\n+    assert_eq!(&xs, &[1, 1, 1, 1]);\n+    assert_eq!(&ys, &[1, 1, 1, 1, 0, 0]);\n+}\n+\n+#[test]\n+fn test_zip_map_rev_sideffectful() {\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    {\n+        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n+        it.next_back();\n+    }\n+    assert_eq!(&xs, &[0, 0, 0, 1, 1, 1]);\n+    assert_eq!(&ys, &[0, 0, 0, 1]);\n+\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    {\n+        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n+        (&mut it).take(5).count();\n+        it.next_back();\n+    }\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 1]);\n+    assert_eq!(&ys, &[1, 1, 1, 1]);\n+}\n+\n+#[test]\n+fn test_zip_nested_sideffectful() {\n+    let mut xs = [0; 6];\n+    let ys = [0; 4];\n+\n+    {\n+        // test that it has the side effect nested inside enumerate\n+        let it = xs.iter_mut().map(|x| *x = 1).enumerate().zip(&ys);\n+        it.count();\n+    }\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n+}\n+\n #[test]\n fn test_zip_nth_back_side_effects_exhausted() {\n     let mut a = Vec::new();"}, {"sha": "a76fa2408bb8a4c26caac427f6302ece1d3c17cf", "filename": "src/test/ui/iterators/iter-zip.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/af44a2a857618150b180dabe9c3383a3911b3640/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af44a2a857618150b180dabe9c3383a3911b3640/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs?ref=af44a2a857618150b180dabe9c3383a3911b3640", "patch": "@@ -1,103 +0,0 @@\n-// run-pass\n-// Test that .zip() specialization preserves side effects\n-// in sideeffectful iterator adaptors.\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct CountClone(Cell<i32>);\n-\n-fn count_clone() -> CountClone { CountClone(Cell::new(0)) }\n-\n-impl PartialEq<i32> for CountClone {\n-    fn eq(&self, rhs: &i32) -> bool {\n-        self.0.get() == *rhs\n-    }\n-}\n-\n-impl Clone for CountClone {\n-    fn clone(&self) -> Self {\n-        let ret = CountClone(self.0.clone());\n-        let n = self.0.get();\n-        self.0.set(n + 1);\n-        ret\n-    }\n-}\n-\n-fn test_zip_cloned_sideffectful() {\n-    let xs = [count_clone(), count_clone(), count_clone(), count_clone()];\n-    let ys = [count_clone(), count_clone()];\n-\n-    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 0][..]);\n-    assert_eq!(&ys, &[1, 1][..]);\n-\n-    let xs = [count_clone(), count_clone()];\n-    let ys = [count_clone(), count_clone(), count_clone(), count_clone()];\n-\n-    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n-\n-    assert_eq!(&xs, &[1, 1][..]);\n-    assert_eq!(&ys, &[1, 1, 0, 0][..]);\n-}\n-\n-fn test_zip_map_sideffectful() {\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n-    assert_eq!(&ys, &[1, 1, 1, 1]);\n-\n-    let mut xs = [0; 4];\n-    let mut ys = [0; 6];\n-\n-    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 1]);\n-    assert_eq!(&ys, &[1, 1, 1, 1, 0, 0]);\n-}\n-\n-fn test_zip_map_rev_sideffectful() {\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    {\n-        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n-        it.next_back();\n-    }\n-    assert_eq!(&xs, &[0, 0, 0, 1, 1, 1]);\n-    assert_eq!(&ys, &[0, 0, 0, 1]);\n-\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    {\n-        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n-        (&mut it).take(5).count();\n-        it.next_back();\n-    }\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 1]);\n-    assert_eq!(&ys, &[1, 1, 1, 1]);\n-}\n-\n-fn test_zip_nested_sideffectful() {\n-    let mut xs = [0; 6];\n-    let ys = [0; 4];\n-\n-    {\n-        // test that it has the side effect nested inside enumerate\n-        let it = xs.iter_mut().map(|x| *x = 1).enumerate().zip(&ys);\n-        it.count();\n-    }\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n-}\n-\n-fn main() {\n-    test_zip_cloned_sideffectful();\n-    test_zip_map_sideffectful();\n-    test_zip_map_rev_sideffectful();\n-    test_zip_nested_sideffectful();\n-}"}]}