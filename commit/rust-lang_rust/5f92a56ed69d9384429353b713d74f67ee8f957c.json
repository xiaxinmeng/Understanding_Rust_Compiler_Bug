{"sha": "5f92a56ed69d9384429353b713d74f67ee8f957c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTJhNTZlZDY5ZDkzODQ0MjkzNTNiNzEzZDc0ZjY3ZWU4Zjk1N2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-11T10:39:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:19Z"}, "message": "Introduce `#![feature(bindings_after_at)]`.\nUnder the gate, `x @ Some(y)` is allowed.\nThis is subject to various restrictions for soundness.", "tree": {"sha": "da908b902c53cb63c03f8b2e5a98209691737cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da908b902c53cb63c03f8b2e5a98209691737cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f92a56ed69d9384429353b713d74f67ee8f957c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f92a56ed69d9384429353b713d74f67ee8f957c", "html_url": "https://github.com/rust-lang/rust/commit/5f92a56ed69d9384429353b713d74f67ee8f957c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f92a56ed69d9384429353b713d74f67ee8f957c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "url": "https://api.github.com/repos/rust-lang/rust/commits/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "html_url": "https://github.com/rust-lang/rust/commit/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018"}], "stats": {"total": 1248, "additions": 1156, "deletions": 92}, "files": [{"sha": "06dbc8faf1dabd813dc74fc8bae345c441075d95", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -539,6 +539,10 @@ declare_features! (\n     /// Allows the use of `loop` and `while` in constants.\n     (active, const_loop, \"1.41.0\", Some(52000), None),\n \n+    /// Allows bindings in the subpattern of a binding pattern.\n+    /// For example, you can write `x @ Some(y)`.\n+    (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -554,4 +558,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::or_patterns,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::bindings_after_at,\n ];"}, {"sha": "a740b507b3a1627e309f163d9cd403c952556c21", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -4,23 +4,22 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::lint;\n-use rustc::session::Session;\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc::ty::{self, Ty, TyCtxt};\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n-\n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::HirId;\n use rustc::hir::{self, Pat};\n-\n-use std::slice;\n-\n+use rustc::lint;\n+use rustc::session::Session;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_error_codes::*;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use syntax::feature_gate::feature_err;\n+use syntax_pos::symbol::sym;\n use syntax_pos::{MultiSpan, Span};\n \n-use rustc_error_codes::*;\n+use std::slice;\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match tcx.hir().as_local_hir_id(def_id) {\n@@ -123,7 +122,9 @@ impl PatCtxt<'_, '_> {\n impl<'tcx> MatchVisitor<'_, 'tcx> {\n     fn check_patterns(&mut self, has_guard: bool, pat: &Pat) {\n         check_legality_of_move_bindings(self, has_guard, pat);\n-        check_legality_of_bindings_in_at_patterns(self, pat);\n+        if !self.tcx.features().bindings_after_at {\n+            check_legality_of_bindings_in_at_patterns(self, pat);\n+        }\n     }\n \n     fn check_match(&mut self, scrut: &hir::Expr, arms: &'tcx [hir::Arm], source: hir::MatchSource) {\n@@ -656,13 +657,12 @@ impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n         match pat.kind {\n             hir::PatKind::Binding(.., ref subpat) => {\n                 if !self.bindings_allowed {\n-                    struct_span_err!(\n-                        self.cx.tcx.sess,\n+                    feature_err(\n+                        &self.cx.tcx.sess.parse_sess,\n+                        sym::bindings_after_at,\n                         pat.span,\n-                        E0303,\n-                        \"pattern bindings are not allowed after an `@`\"\n+                        \"pattern bindings after an `@` are unstable\",\n                     )\n-                    .span_label(pat.span, \"not allowed after `@`\")\n                     .emit();\n                 }\n "}, {"sha": "1540e6d7c053f63e86cd4217362b039bc9404006", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -406,6 +406,7 @@ impl<'a> Parser<'a> {\n         if let PatKind::Ident(_, _, ref mut sub @ None) = rhs.kind {\n             // The user inverted the order, so help them fix that.\n             let mut applicability = Applicability::MachineApplicable;\n+            // FIXME(bindings_after_at): Remove this code when stabilizing the feature.\n             lhs.walk(&mut |p| match p.kind {\n                 // `check_match` is unhappy if the subpattern has a binding anywhere.\n                 PatKind::Ident(..) => {"}, {"sha": "8fdc199d9ed7ce2cdb8bea2578c02d0e824d3e44", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -165,6 +165,7 @@ symbols! {\n         bench,\n         bin,\n         bind_by_move_pattern_guards,\n+        bindings_after_at,\n         block,\n         bool,\n         borrowck_graphviz_postflow,"}, {"sha": "4f7fc0dc2326cadcc2bb1c276ed202d92286fb8d", "filename": "src/test/ui/error-codes/E0007.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -1,9 +1,11 @@\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n fn main() {\n     let x = Some(\"s\".to_string());\n     match x {\n         op_string @ Some(s) => {},\n         //~^ ERROR E0007\n-        //~| ERROR E0303\n         //~| ERROR E0382\n         None => {},\n     }"}, {"sha": "d7b8050c3a4cdc24df7563b88cd183a6d982b67a", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -1,17 +1,19 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/E0007.rs:4:9\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/E0007.rs:1:12\n    |\n-LL |         op_string @ Some(s) => {},\n-   |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0303]: pattern bindings are not allowed after an `@`\n-  --> $DIR/E0007.rs:4:26\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/E0007.rs:7:9\n    |\n LL |         op_string @ Some(s) => {},\n-   |                          ^ not allowed after `@`\n+   |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/E0007.rs:4:26\n+  --> $DIR/E0007.rs:7:26\n    |\n LL |     let x = Some(\"s\".to_string());\n    |         - move occurs because `x` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait\n@@ -22,7 +24,7 @@ LL |         op_string @ Some(s) => {},\n    |         |                value used here after move\n    |         value moved here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0007, E0303, E0382.\n+Some errors have detailed explanations: E0007, E0382.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "0530d43b653f5153ab670a38a03561da73154024", "filename": "src/test/ui/error-codes/E0303.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0303.rs?ref=a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "patch": "@@ -1,8 +0,0 @@\n-fn main() {\n-    match Some(\"hi\".to_string()) {\n-        ref op_string_ref @ Some(s) => {},\n-        //~^ ERROR pattern bindings are not allowed after an `@` [E0303]\n-        //~| ERROR E0009\n-        None => {},\n-    }\n-}"}, {"sha": "af537ce5625ca8a9a572b8bfc92ca43cc90c3191", "filename": "src/test/ui/error-codes/E0303.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0303.stderr?ref=a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "patch": "@@ -1,19 +0,0 @@\n-error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/E0303.rs:3:34\n-   |\n-LL |         ref op_string_ref @ Some(s) => {},\n-   |         -------------------------^-\n-   |         |                        |\n-   |         |                        by-move pattern here\n-   |         both by-ref and by-move used\n-\n-error[E0303]: pattern bindings are not allowed after an `@`\n-  --> $DIR/E0303.rs:3:34\n-   |\n-LL |         ref op_string_ref @ Some(s) => {},\n-   |                                  ^ not allowed after `@`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0009, E0303.\n-For more information about an error, try `rustc --explain E0009`."}, {"sha": "53d16e7ad3ec7624b04b53398013fb6d5312b1b1", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,12 @@\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+struct X { x: () }\n+\n+fn main() {\n+    let x = Some(X { x: () });\n+    match x {\n+        Some(ref _y @ _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+        None => panic!()\n+    }\n+}"}, {"sha": "c4afdc576a16a908ee1d2c7ca92c37464b915ffc", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:1:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:9:23\n+   |\n+LL |         Some(ref _y @ _z) => { },\n+   |              ---------^^\n+   |              |        |\n+   |              |        by-move pattern here\n+   |              both by-ref and by-move used\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0009`."}, {"sha": "bfaab69a776b6e969be6ab3a2315a2151fbb270a", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,15 @@\n+// See issue #12534.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {}\n+\n+struct A(Box<u8>);\n+\n+fn f(a @ A(u): A) -> Box<u8> {\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+    drop(a);\n+    u\n+}"}, {"sha": "15b0d5e2cb4487a5c21100eebfd17498400778f8", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:6\n+   |\n+LL | fn f(a @ A(u): A) -> Box<u8> {\n+   |      ^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0382]: use of moved value\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:12\n+   |\n+LL | fn f(a @ A(u): A) -> Box<u8> {\n+   |      ------^-\n+   |      |     |\n+   |      |     value used here after move\n+   |      value moved here\n+   |      move occurs because value has type `A`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0007, E0382.\n+For more information about an error, try `rustc --explain E0007`."}, {"sha": "e18d3bc06a933dc9f64527662021e826b610e523", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,24 @@\n+// Test that moving on both sides of an `@` pattern is not allowed.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    struct U; // Not copy!\n+\n+    let a @ b = U;\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    let a @ (b, c) = (U, U);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    match Ok(U) {\n+        a @ Ok(b) | a @ Err(b) => {}\n+        //~^ ERROR cannot bind by-move with sub-bindings\n+        //~| ERROR use of moved value\n+        //~| ERROR cannot bind by-move with sub-bindings\n+        //~| ERROR use of moved value\n+    }\n+}"}, {"sha": "0b69ff0b8392ce0538a659745fb759d67ee2fa37", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,76 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-move-and-move.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:9:9\n+   |\n+LL |     let a @ b = U;\n+   |         ^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:13:9\n+   |\n+LL |     let a @ (b, c) = (U, U);\n+   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:18:9\n+   |\n+LL |         a @ Ok(b) | a @ Err(b) => {}\n+   |         ^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:18:21\n+   |\n+LL |         a @ Ok(b) | a @ Err(b) => {}\n+   |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:9:13\n+   |\n+LL |     let a @ b = U;\n+   |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+   |         |   |\n+   |         |   value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:13:17\n+   |\n+LL |     let a @ (b, c) = (U, U);\n+   |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |       |\n+   |         |       value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:18:16\n+   |\n+LL |     match Ok(U) {\n+   |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n+LL |         a @ Ok(b) | a @ Err(b) => {}\n+   |         -------^-\n+   |         |      |\n+   |         |      value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:18:29\n+   |\n+LL |     match Ok(U) {\n+   |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n+LL |         a @ Ok(b) | a @ Err(b) => {}\n+   |                     --------^-\n+   |                     |       |\n+   |                     |       value used here after move\n+   |                     value moved here\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0007, E0382.\n+For more information about an error, try `rustc --explain E0007`."}, {"sha": "4d94d94ae0e184007aed3d2150253602b05aabf9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,44 @@\n+// Test `@` patterns combined with `box` patterns.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(box_patterns)]\n+\n+#[derive(Copy, Clone)]\n+struct C;\n+\n+fn main() {\n+    let a @ box &b = Box::new(&C);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    let a @ box b = Box::new(C);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    let ref a @ box b = Box::new(C); // OK; the type is `Copy`.\n+    drop(b);\n+    drop(b);\n+    drop(a);\n+\n+    struct NC;\n+\n+    let ref a @ box b = Box::new(NC); //~ ERROR cannot bind by-move and by-ref in the same pattern\n+\n+    let ref a @ box ref b = Box::new(NC); // OK.\n+    drop(a);\n+    drop(b);\n+\n+    let ref a @ box ref mut b = Box::new(NC); // FIXME: This should not compile.\n+    let ref a @ box ref mut b = Box::new(NC); // FIXME: This should not compile.\n+    *b = NC;\n+    let ref a @ box ref mut b = Box::new(NC);\n+    //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    *b = NC;\n+    drop(a);\n+\n+    let ref mut a @ box ref b = Box::new(NC);\n+    //~^ ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+    *a = Box::new(NC);\n+    drop(b);\n+}"}, {"sha": "fbf9dfff7feec7d13c5a105b2d057dd4b3b9b6a5", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,75 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-at-and-box.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-at-and-box.rs:11:9\n+   |\n+LL |     let a @ box &b = Box::new(&C);\n+   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-at-and-box.rs:15:9\n+   |\n+LL |     let a @ box b = Box::new(C);\n+   |         ^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/borrowck-pat-at-and-box.rs:26:21\n+   |\n+LL |     let ref a @ box b = Box::new(NC);\n+   |         ------------^\n+   |         |           |\n+   |         |           by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:11:18\n+   |\n+LL |     let a @ box &b = Box::new(&C);\n+   |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n+   |         |        |\n+   |         |        value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:15:17\n+   |\n+LL |     let a @ box b = Box::new(C);\n+   |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n+   |         |       |\n+   |         |       value used here after move\n+   |         value moved here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:35:21\n+   |\n+LL |     let ref a @ box ref mut b = Box::new(NC);\n+   |         ------------^^^^^^^^^\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:40:25\n+   |\n+LL |     let ref mut a @ box ref b = Box::new(NC);\n+   |         ----------------^^^^^\n+   |         |               |\n+   |         |               immutable borrow occurs here\n+   |         mutable borrow occurs here\n+LL |\n+LL |     *a = Box::new(NC);\n+   |     -- mutable borrow later used here\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n+For more information about an error, try `rustc --explain E0007`."}, {"sha": "1115dd5b5a2898356872d73e5d3f0a678ab36822", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+\n+// Test `Copy` bindings in the rhs of `@` patterns.\n+\n+#![feature(slice_patterns)]\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+#[derive(Copy, Clone)]\n+struct C;\n+\n+#[derive(Copy, Clone)]\n+struct P<A, B>(A, B);\n+\n+enum E<A, B> { L(A), R(B) }\n+\n+fn main() {\n+    let a @ b @ c @ d = C;\n+    let a @ (b, c) = (C, C);\n+    let a @ P(b, P(c, d)) = P(C, P(C, C));\n+    let a @ [b, c] = [C, C];\n+    let a @ [b, .., c] = [C, C, C];\n+    let a @ &(b, c) = &(C, C);\n+    let a @ &(b, &P(c, d)) = &(C, &P(C, C));\n+\n+    use self::E::*;\n+    match L(C) {\n+        L(a) | R(a) => {\n+            let a: C = a;\n+            drop(a);\n+            drop(a);\n+        }\n+    }\n+    match R(&L(&C)) {\n+        L(L(&a)) | L(R(&a)) | R(L(&a)) | R(R(&a)) => {\n+            let a: C = a;\n+            drop(a);\n+            drop(a);\n+        }\n+    }\n+}"}, {"sha": "e5bbc112bb138764e833b336dc60ff3a4139b992", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-by-copy-bindings-in-at.rs:6:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "4b7f61c365e34c65c967117f53d5894396a2953f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,10 @@\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    match Some(\"hi\".to_string()) {\n+        ref op_string_ref @ Some(s) => {},\n+        //~^ ERROR E0009\n+        None => {},\n+    }\n+}"}, {"sha": "9c8a4e25fb8447a08d728e59663dffa9cbb378e0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:1:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:6:34\n+   |\n+LL |         ref op_string_ref @ Some(s) => {},\n+   |         -------------------------^-\n+   |         |                        |\n+   |         |                        by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0009`."}, {"sha": "5fbedd02d25e5d80c84501267cf3114f1850eeba", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+\n+// Test that `ref` patterns may be used on both sides\n+// of an `@` pattern according to NLL borrowck.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    struct U; // Not copy!\n+\n+    let ref a @ ref b = U;\n+    let _: &U = a;\n+    let _: &U = b;\n+\n+    let ref a @ (ref b, [ref c, ref d]) = (U, [U, U]);\n+    let _: &(U, [U; 2]) = a;\n+    let _: &U = b;\n+    let _: &U = c;\n+    let _: &U = d;\n+\n+    let a @ (b, [c, d]) = &(U, [U, U]);\n+    let _: &(U, [U; 2]) = a;\n+    let _: &U = b;\n+    let _: &U = c;\n+    let _: &U = d;\n+\n+    let ref a @ &ref b = &U;\n+    let _: &&U = a;\n+    let _: &U = b;\n+\n+    match Ok(U) {\n+        ref a @ Ok(ref b) | ref a @ Err(ref b) => {\n+            let _: &Result<U, U> = a;\n+            let _: &U = b;\n+        }\n+    }\n+}"}, {"sha": "7a500df77cd899f561338d03a99256cece72bfaf", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-ref-both-sides.rs:6:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "3ea3d93f862f57be787856a0775cfe0eec3a0238", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,87 @@\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+fn main() {\n+    match &mut Some(1) {\n+        ref mut z @ &mut Some(ref a) => {\n+        //~^ ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+            **z = None;\n+            println!(\"{}\", *a);\n+        }\n+        _ => ()\n+    }\n+\n+    struct U;\n+\n+    let ref a @ ref mut b = U; // FIXME: This should not compile.\n+    let ref mut a @ ref b = U; // FIXME: This should not compile.\n+    let ref a @ (ref mut b, ref mut c) = (U, U); // FIXME: This should not compile.\n+    let ref mut a @ (ref b, ref c) = (U, U); // FIXME: This should not compile.\n+\n+    // FIXME: Seems like we have a soundness hole here.\n+    let ref mut a @ ref b = U;\n+    *a = U; // We are mutating...\n+    drop(b); // ..but at the same time we are holding a live shared borrow.\n+    // FIXME: Inverted; seems like the same issue exists here as well.\n+    let ref a @ ref mut b = U;\n+    *b = U;\n+    drop(a);\n+\n+    match Ok(U) {\n+        ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n+            *a = Err(U); // FIXME: ^ should not compile.\n+            drop(b);\n+        }\n+    }\n+\n+    match Ok(U) {\n+        ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n+            //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+            //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+            *b = U;\n+            drop(a);\n+        }\n+    }\n+\n+    match Ok(U) {\n+        ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n+        //~^ ERROR cannot assign to `*b`, as it is immutable for the pattern guard\n+        _ => {}\n+    }\n+    match Ok(U) {\n+        ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n+        //~^ ERROR cannot assign to `*a`, as it is immutable for the pattern guard\n+        _ => {}\n+    }\n+    match Ok(U) {\n+        ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n+        //~^ ERROR cannot move out of `b` in pattern guard\n+        _ => {}\n+    }\n+    match Ok(U) {\n+        ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n+        //~^ ERROR cannot move out of `a` in pattern guard\n+        _ => {}\n+    }\n+\n+    let ref a @ (ref mut b, ref mut c) = (U, U);\n+    *b = U; // FIXME: ^ should not compile.\n+    *c = U;\n+\n+    let ref a @ (ref mut b, ref mut c) = (U, U);\n+    //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    *b = U;\n+    drop(a);\n+\n+    let ref a @ (ref mut b, ref mut c) = (U, U);\n+    *b = U; //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    *c = U; //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    drop(a);\n+    let ref mut a @ (ref b, ref c) = (U, U); // FIXME: This should not compile.\n+}"}, {"sha": "ce79b562ec99bc013926608d924d8a3cbb877897", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,128 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:1:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n+   |\n+LL |         ref mut z @ &mut Some(ref a) => {\n+   |         ----------------------^^^^^-\n+   |         |                     |\n+   |         |                     immutable borrow occurs here\n+   |         mutable borrow occurs here\n+LL |\n+LL |             **z = None;\n+   |             ---------- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:20\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n+   |         -----------^^^^^^^^^-\n+   |         |          |\n+   |         |          mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |             drop(a);\n+   |                  - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:45\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n+   |                                 ------------^^^^^^^^^-\n+   |                                 |           |\n+   |                                 |           mutable borrow occurs here\n+   |                                 immutable borrow occurs here\n+...\n+LL |             drop(a);\n+   |                  - immutable borrow later used here\n+\n+error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:61\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n+   |                                                             ^^^^^^ cannot assign\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:61\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n+   |                                                             ^^^^^^^^^^^ cannot assign\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error[E0507]: cannot move out of `b` in pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:62:66\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n+   |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error[E0507]: cannot move out of `a` in pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:66\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n+   |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:18\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         ---------^^^^^^^^^------------\n+   |         |        |\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:29\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         --------------------^^^^^^^^^-\n+   |         |                   |\n+   |         |                   mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:18\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         ---------^^^^^^^^^------------\n+   |         |        |\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:29\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         --------------------^^^^^^^^^-\n+   |         |                   |\n+   |         |                   mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors have detailed explanations: E0502, E0507.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "482fa0497f5716506140f22f31bfc1051236a15f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,68 @@\n+// Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    struct U;\n+\n+    let ref mut a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+    drop(a);\n+    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+    drop(b);\n+    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+\n+    let ref mut a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+    *a = U;\n+    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+    *b = U;\n+\n+    let ref mut a @ (ref mut b, [ref mut c, ref mut d]) = (U, [U, U]);\n+    // FIXME: This should not compile.\n+\n+    let a @ (ref mut b, ref mut c) = (U, U);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR borrow of moved value\n+    let mut val = (U, [U, U]);\n+    let a @ (b, [c, d]) = &mut val; // Same as ^--\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR borrow of moved value\n+\n+    let a @ &mut ref mut b = &mut U;\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR borrow of moved value\n+    let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR borrow of moved value\n+\n+    match Ok(U) {\n+        ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+            // FIXME: This should not compile.\n+        }\n+    }\n+    match Ok(U) {\n+        ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+            *b = U;\n+            // FIXME: This should not compile.\n+        }\n+    }\n+    match Ok(U) {\n+        ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+            //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+            //~| ERROR cannot borrow `_` as mutable more than once at a time\n+            *a = Err(U);\n+\n+            // FIXME: The binding name `_` used above makes for problematic diagnostics.\n+            // Resolve that somehow...\n+        }\n+    }\n+    match Ok(U) {\n+        ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+            //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+            //~| ERROR cannot borrow `_` as mutable more than once at a time\n+            drop(a);\n+        }\n+    }\n+}"}, {"sha": "c9bfba867787e673b237e3a8c67f4064359b50c3", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,144 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n+   |\n+LL |     let a @ (ref mut b, ref mut c) = (U, U);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n+   |\n+LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n+   |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n+   |\n+LL |     let a @ &mut ref mut b = &mut U;\n+   |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n+   |\n+LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:9:21\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ------------^^^^^^^^^\n+   |         |           |\n+   |         |           second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+LL |\n+LL |     drop(a);\n+   |          - first borrow later used here\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:21\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ------------^^^^^^^^^\n+   |         |           |\n+   |         |           second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+LL |\n+LL |     *a = U;\n+   |     ------ first borrow later used here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:25\n+   |\n+LL |     let a @ (ref mut b, ref mut c) = (U, U);\n+   |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |               |\n+   |         |               value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:21\n+   |\n+LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n+   |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n+   |         |           |\n+   |         |           value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:18\n+   |\n+LL |     let a @ &mut ref mut b = &mut U;\n+   |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:30\n+   |\n+LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n+   |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |                    |\n+   |         |                    value borrowed here after move\n+   |         value moved here\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:24\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------------^^^^^^^^^-\n+   |         |              |\n+   |         |              second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+...\n+LL |             *a = Err(U);\n+   |             ----------- first borrow later used here\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:53\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ----------------^^^^^^^^^-\n+   |                                     |               |\n+   |                                     |               second mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+...\n+LL |             *a = Err(U);\n+   |             ----------- first borrow later used here\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:24\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------------^^^^^^^^^-\n+   |         |              |\n+   |         |              second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+...\n+LL |             drop(a);\n+   |                  - first borrow later used here\n+\n+error[E0499]: cannot borrow `_` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:53\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ----------------^^^^^^^^^-\n+   |                                     |               |\n+   |                                     |               second mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+...\n+LL |             drop(a);\n+   |                  - first borrow later used here\n+\n+error: aborting due to 14 previous errors\n+\n+Some errors have detailed explanations: E0007, E0382, E0499.\n+For more information about an error, try `rustc --explain E0007`."}, {"sha": "b517ed71c7344a3689ff0317f2a9167c6f5f21de", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,21 @@\n+// Test that mixing `Copy` and non-`Copy` types in `@` patterns is forbidden.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+#[derive(Copy, Clone)]\n+struct C;\n+\n+struct NC<A, B>(A, B);\n+\n+fn main() {\n+    let a @ NC(b, c) = NC(C, C);\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+    //~| ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+}"}, {"sha": "89993a48e193ea9b2be3283ec3c090213824b5a2", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,59 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/copy-and-move-mixed.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/copy-and-move-mixed.rs:12:9\n+   |\n+LL |     let a @ NC(b, c) = NC(C, C);\n+   |         ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/copy-and-move-mixed.rs:16:9\n+   |\n+LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/copy-and-move-mixed.rs:16:19\n+   |\n+LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n+   |                   ^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0382]: use of moved value\n+  --> $DIR/copy-and-move-mixed.rs:12:19\n+   |\n+LL |     let a @ NC(b, c) = NC(C, C);\n+   |         ----------^-   -------- move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n+   |         |         |\n+   |         |         value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/copy-and-move-mixed.rs:16:19\n+   |\n+LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n+   |         ----------^^^^^^^^^^^^-   --------------- move occurs because value has type `NC<C, NC<C, C>>`, which does not implement the `Copy` trait\n+   |         |         |\n+   |         |         value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/copy-and-move-mixed.rs:16:29\n+   |\n+LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n+   |                   ----------^-\n+   |                   |         |\n+   |                   |         value used here after move\n+   |                   value moved here\n+   |\n+   = note: move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0007, E0382.\n+For more information about an error, try `rustc --explain E0007`."}, {"sha": "df2efd08b9b25ec6ee531503492a7fde2549bf12", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,31 @@\n+// Ensures the independence of each side in `binding @ subpat`\n+// determine their binding modes independently of each other.\n+//\n+// That is, `binding` does not influence `subpat`.\n+// This is important because we might want to allow `p1 @ p2`,\n+// where both `p1` and `p2` are syntactically unrestricted patterns.\n+// If `binding` is allowed to influence `subpat`,\n+// this would create problems for the generalization aforementioned.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    struct NotCopy;\n+\n+    let a @ b = &NotCopy; // OK\n+    let _: &NotCopy = a;\n+    let ref a @ b = &NotCopy; // OK\n+    let _: &&NotCopy = a;\n+\n+    let ref a @ b = NotCopy; //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    let ref mut a @ b = NotCopy; //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    match Ok(NotCopy) {\n+        Ok(ref a @ b) | Err(ref a @ b) => {}\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+    }\n+    match NotCopy {\n+        ref a @ b => {}\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+    }\n+}"}, {"sha": "bb0d893887e29d8b973d88b2d265f85a8c8e2ad4", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,48 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:10:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:21:17\n+   |\n+LL |     let ref a @ b = NotCopy;\n+   |         --------^\n+   |         |       |\n+   |         |       by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:22:21\n+   |\n+LL |     let ref mut a @ b = NotCopy;\n+   |         ------------^\n+   |         |           |\n+   |         |           by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:24:20\n+   |\n+LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n+   |                    ^        --------^\n+   |                    |        |       |\n+   |                    |        |       by-move pattern here\n+   |                    |        both by-ref and by-move used\n+   |                    by-move pattern here\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:28:17\n+   |\n+LL |         ref a @ b => {}\n+   |         --------^\n+   |         |       |\n+   |         |       by-move pattern here\n+   |         both by-ref and by-move used\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0009`."}, {"sha": "d655f15af1ebab8300b94d8197dc707df7d05dbf", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let x @ y = 0; //~ ERROR pattern bindings after an `@` are unstable\n+}"}, {"sha": "5408f6b5fb56d9a72cd9395597f97d096766f0ac", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: pattern bindings after an `@` are unstable\n+  --> $DIR/feature-gate-bindings_after_at.rs:2:13\n+   |\n+LL |     let x @ y = 0;\n+   |             ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65490\n+   = help: add `#![feature(bindings_after_at)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "63e07842b1ab0aac1fa4bcbf01b9c23b85f0ee2f", "filename": "src/test/ui/pattern/bindings-after-at/nested-patterns.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+\n+struct A { a: u8, b: u8 }\n+\n+pub fn main() {\n+    match (A { a: 10, b: 20 }) {\n+        ref x @ A { ref a, b: 20 } => {\n+            assert_eq!(x.a, 10);\n+            assert_eq!(*a, 10);\n+        }\n+        A { b: ref _b, .. } => panic!(),\n+    }\n+}"}, {"sha": "1864a8e2af7331f66a7864a8f0a5f93c3c8d2fb6", "filename": "src/test/ui/pattern/bindings-after-at/nested-patterns.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/nested-patterns.rs:3:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "2b5528f49a6bb28d2757fe3e1a6892875facafda", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,21 @@\n+// Test that `binding @ subpat` acts as a product context with respect to duplicate binding names.\n+// The code that is tested here lives in resolve (see `resolve_pattern_inner`).\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    let a @ a @ a = ();\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+    let ref a @ ref a = ();\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    let ref mut a @ ref mut a = ();\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let a @ (Ok(a) | Err(a)) = Ok(());\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+}"}, {"sha": "92a97becc8424acef3efc84e3100b87964cc7667", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92a56ed69d9384429353b713d74f67ee8f957c/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=5f92a56ed69d9384429353b713d74f67ee8f957c", "patch": "@@ -0,0 +1,53 @@\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:10:13\n+   |\n+LL |     let a @ a @ a = ();\n+   |             ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:10:17\n+   |\n+LL |     let a @ a @ a = ();\n+   |                 ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:13:21\n+   |\n+LL |     let ref a @ ref a = ();\n+   |                     ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:15:29\n+   |\n+LL |     let ref mut a @ ref mut a = ();\n+   |                             ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:18:17\n+   |\n+LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n+   |                 ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:18:26\n+   |\n+LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n+   |                          ^ used in a pattern more than once\n+\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/pat-at-same-name-both.rs:4:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/pat-at-same-name-both.rs:6:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0416`."}, {"sha": "aff7264752de268b7204e288e083b9edc56e9252", "filename": "src/test/ui/pattern/pattern-bindings-after-at.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs?ref=a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "patch": "@@ -1,16 +0,0 @@\n-enum Option<T> {\n-    None,\n-    Some(T),\n-}\n-\n-fn main() {\n-    match &mut Some(1) {\n-        ref mut z @ &mut Some(ref a) => {\n-        //~^ ERROR pattern bindings are not allowed after an `@`\n-        //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n-            **z = None;\n-            println!(\"{}\", *a);\n-        }\n-        _ => ()\n-    }\n-}"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr?ref=a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "patch": "@@ -1,22 +0,0 @@\n-error[E0303]: pattern bindings are not allowed after an `@`\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |                               ^^^^^ not allowed after `@`\n-\n-error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ----------------------^^^^^-\n-   |         |                     |\n-   |         |                     immutable borrow occurs here\n-   |         mutable borrow occurs here\n-...\n-LL |             **z = None;\n-   |             ---------- mutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0303, E0502.\n-For more information about an error, try `rustc --explain E0303`."}]}