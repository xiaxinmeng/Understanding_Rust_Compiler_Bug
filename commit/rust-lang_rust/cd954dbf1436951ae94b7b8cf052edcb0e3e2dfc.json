{"sha": "cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc", "node_id": "C_kwDOAAsO6NoAKGNkOTU0ZGJmMTQzNjk1MWFlOTRiN2I4Y2YwNTJlZGNiMGUzZTJkZmM", "commit": {"author": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:42:52Z"}, "committer": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:52:46Z"}, "message": "TB: public interface to permissions", "tree": {"sha": "7cddb3fa66611ce01514a36d964276ffc32e9646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cddb3fa66611ce01514a36d964276ffc32e9646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc", "html_url": "https://github.com/rust-lang/rust/commit/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc/comments", "author": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362863787bbddbad3e6784f29328382e440cda7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/362863787bbddbad3e6784f29328382e440cda7c", "html_url": "https://github.com/rust-lang/rust/commit/362863787bbddbad3e6784f29328382e440cda7c"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "04b8e1df576147092d501905136f34080a8c124c", "filename": "src/tools/miri/src/borrow_tracker/tree_borrows/perms.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fperms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fperms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fperms.rs?ref=cd954dbf1436951ae94b7b8cf052edcb0e3e2dfc", "patch": "@@ -1,6 +1,9 @@\n use std::cmp::{Ordering, PartialOrd};\n use std::fmt;\n \n+use crate::borrow_tracker::tree_borrows::tree::AccessRelatedness;\n+use crate::borrow_tracker::AccessKind;\n+\n /// The activation states of a pointer\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n enum PermissionPriv {\n@@ -92,6 +95,21 @@ mod transition {\n             _ => Disabled,\n         })\n     }\n+\n+    /// Dispatch handler depending on the kind of access and its position.\n+    pub(super) fn perform_access(\n+        kind: AccessKind,\n+        rel_pos: AccessRelatedness,\n+        child: PermissionPriv,\n+        protected: bool,\n+    ) -> Option<PermissionPriv> {\n+        match (kind, rel_pos.is_foreign()) {\n+            (AccessKind::Write, true) => foreign_write(child, protected),\n+            (AccessKind::Read, true) => foreign_read(child, protected),\n+            (AccessKind::Write, false) => child_write(child, protected),\n+            (AccessKind::Read, false) => child_read(child, protected),\n+        }\n+    }\n }\n \n impl PermissionPriv {\n@@ -117,6 +135,81 @@ impl PermissionPriv {\n     }\n }\n \n+/// Public interface to the state machine that controls read-write permissions.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub struct Permission(PermissionPriv);\n+\n+impl fmt::Display for Permission {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}\",\n+            match self.0 {\n+                PermissionPriv::Reserved { .. } => \"Reserved\",\n+                PermissionPriv::Active => \"Active\",\n+                PermissionPriv::Frozen => \"Frozen\",\n+                PermissionPriv::Disabled => \"Disabled\",\n+            }\n+        )\n+    }\n+}\n+\n+impl Permission {\n+    /// Default initial permission of the root of a new tree.\n+    pub fn new_root() -> Self {\n+        Self(Active)\n+    }\n+\n+    /// Default initial permission of a reborrowed mutable reference.\n+    pub fn new_unique_2phase(ty_is_freeze: bool) -> Self {\n+        Self(Reserved { ty_is_freeze })\n+    }\n+\n+    /// Default initial permission of a reborrowed shared reference\n+    pub fn new_frozen() -> Self {\n+        Self(Frozen)\n+    }\n+\n+    /// Pretty-printing. Needs to be here and not in diagnostics.rs\n+    /// because `Self` is private.\n+    pub fn short_name(self) -> &'static str {\n+        // Make sure there are all of the same length as each other\n+        // and also as `diagnostics::DisplayFmtPermission.uninit` otherwise\n+        // alignment will be incorrect.\n+        match self.0 {\n+            Reserved { ty_is_freeze: true } => \"Res\",\n+            Reserved { ty_is_freeze: false } => \"Re*\",\n+            Active => \"Act\",\n+            Frozen => \"Frz\",\n+            Disabled => \"Dis\",\n+        }\n+    }\n+\n+    /// Check that there are no complaints from a possible protector.\n+    ///\n+    /// Note: this is not in charge of checking that there *is* a protector,\n+    /// it should be used as\n+    /// ```\n+    /// let no_protector_error = if is_protected(tag) {\n+    ///     old_perm.protector_allows_transition(new_perm)\n+    /// };\n+    /// ```\n+    pub fn protector_allows_transition(self, new: Self) -> bool {\n+        self.0.protector_allows_transition(new.0)\n+    }\n+\n+    /// Apply the transition to the inner PermissionPriv.\n+    pub fn perform_access(\n+        kind: AccessKind,\n+        rel_pos: AccessRelatedness,\n+        old_perm: Self,\n+        protected: bool,\n+    ) -> Option<Self> {\n+        let old_state = old_perm.0;\n+        transition::perform_access(kind, rel_pos, old_state, protected).map(Self)\n+    }\n+}\n+\n #[cfg(test)]\n mod propagation_optimization_checks {\n     pub use super::*;"}]}