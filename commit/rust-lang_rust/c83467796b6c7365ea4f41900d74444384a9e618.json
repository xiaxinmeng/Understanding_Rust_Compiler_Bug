{"sha": "c83467796b6c7365ea4f41900d74444384a9e618", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzQ2Nzc5NmI2YzczNjVlYTRmNDE5MDBkNzQ0NDQzODRhOWU2MTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T16:17:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T16:17:28Z"}, "message": "Finalize Trait grammar", "tree": {"sha": "6eb770e4c9751813cc0530e7c645fed8914eed12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb770e4c9751813cc0530e7c645fed8914eed12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83467796b6c7365ea4f41900d74444384a9e618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83467796b6c7365ea4f41900d74444384a9e618", "html_url": "https://github.com/rust-lang/rust/commit/c83467796b6c7365ea4f41900d74444384a9e618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83467796b6c7365ea4f41900d74444384a9e618/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2cdb0b22631a66a00be25ba4b2e9c0b34ff426a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cdb0b22631a66a00be25ba4b2e9c0b34ff426a", "html_url": "https://github.com/rust-lang/rust/commit/b2cdb0b22631a66a00be25ba4b2e9c0b34ff426a"}], "stats": {"total": 184, "additions": 92, "deletions": 92}, "files": [{"sha": "724daa93f41b75b5d12330f123336b02d3b14c37", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{CONST, ENUM, FN, MODULE, STATIC, STRUCT, TRAIT_DEF, VISIBILITY},\n+    SyntaxKind::{CONST, ENUM, FN, MODULE, STATIC, STRUCT, TRAIT, VISIBILITY},\n     T,\n };\n use test_utils::mark;\n@@ -36,7 +36,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent();\n-        let def_kws = vec![CONST, STATIC, FN, MODULE, STRUCT, ENUM, TRAIT_DEF];\n+        let def_kws = vec![CONST, STATIC, FN, MODULE, STRUCT, ENUM, TRAIT];\n         // Parent is not a definition, can't add visibility\n         if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n             return None;"}, {"sha": "fd1d87423a12d2342e3252906e534d3fba9f7d07", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n     let anchor = match_ast! {\n         match parent {\n             ast::Fn(it) => it.body()?.syntax().clone().into(),\n-            ast::TraitDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n+            ast::Trait(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::ImplDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::Enum(it) => it.variant_list()?.syntax().clone().into(),\n             ast::Struct(it) => {"}, {"sha": "057f6e32fb7b00cc17e1d5c45e3525dc7f5de62f", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -99,8 +99,8 @@ impl HasSource for Static {\n     }\n }\n impl HasSource for Trait {\n-    type Ast = ast::TraitDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TraitDef> {\n+    type Ast = ast::Trait;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n@@ -127,7 +127,7 @@ impl HasSource for ImplDef {\n }\n \n impl HasSource for TypeParam {\n-    type Ast = Either<ast::TraitDef, ast::TypeParam>;\n+    type Ast = Either<ast::Trait, ast::TypeParam>;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())"}, {"sha": "5f5104dab4a10d61d656ca4efc8b479410649379", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -583,7 +583,7 @@ to_def_impls![\n     (crate::Struct, ast::Struct, struct_to_def),\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n-    (crate::Trait, ast::TraitDef, trait_to_def),\n+    (crate::Trait, ast::Trait, trait_to_def),\n     (crate::ImplDef, ast::ImplDef, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n     (crate::Const, ast::Const, const_to_def),"}, {"sha": "ae41d3ddf79a0df3f7fa8d4296ee8bf0d3d1fe8c", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -65,7 +65,7 @@ impl SourceToDefCtx<'_, '_> {\n         Some(ModuleId { krate: parent_module.krate, local_id: child_id })\n     }\n \n-    pub(super) fn trait_to_def(&mut self, src: InFile<ast::TraitDef>) -> Option<TraitId> {\n+    pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }\n     pub(super) fn impl_to_def(&mut self, src: InFile<ast::ImplDef>) -> Option<ImplId> {\n@@ -154,7 +154,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.module_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::TraitDef(it) => {\n+                    ast::Trait(it) => {\n                         let def = self.trait_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -207,7 +207,7 @@ impl SourceToDefCtx<'_, '_> {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n                     ast::Struct(it) => self.struct_to_def(container.with_value(it))?.into(),\n                     ast::Enum(it) => self.enum_to_def(container.with_value(it))?.into(),\n-                    ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n+                    ast::Trait(it) => self.trait_to_def(container.with_value(it))?.into(),\n                     ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n                     ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),\n                     _ => continue,"}, {"sha": "0d02421737326153821a0b161831455412662479", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -664,7 +664,7 @@ impl ExprCollector<'_> {\n                         let id = self.find_inner_item(&def)?;\n                         (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::Item::TraitDef(def) => {\n+                    ast::Item::Trait(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }"}, {"sha": "8ea61fcf237d4539e991ddddc81ffbe9d7474cfa", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -66,7 +66,7 @@ pub enum WherePredicateTarget {\n     TypeParam(LocalTypeParamId),\n }\n \n-type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::TraitDef, ast::TypeParam>>;\n+type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>;\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -317,7 +317,7 @@ impl GenericParams {\n \n impl HasChildSource for GenericDefId {\n     type ChildId = LocalTypeParamId;\n-    type Value = Either<ast::TraitDef, ast::TypeParam>;\n+    type Value = Either<ast::Trait, ast::TypeParam>;\n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<SourceMap> {\n         let (_, sm) = GenericParams::new(db, *self);\n         sm"}, {"sha": "11002b1ad5ec6dfed699946ef1078abc8b601ebf", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -419,7 +419,7 @@ mod_items! {\n     Enum in enums -> ast::Enum,\n     Const in consts -> ast::Const,\n     Static in statics -> ast::Static,\n-    Trait in traits -> ast::TraitDef,\n+    Trait in traits -> ast::Trait,\n     Impl in impls -> ast::ImplDef,\n     TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n@@ -571,7 +571,7 @@ pub struct Trait {\n     pub generic_params: GenericParamsId,\n     pub auto: bool,\n     pub items: Box<[AssocItem]>,\n-    pub ast_id: FileAstId<ast::TraitDef>,\n+    pub ast_id: FileAstId<ast::Trait>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "aaf3cfd3ad20695cc3918162e49827aa2732d708", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -95,7 +95,7 @@ impl Ctx {\n \n             // These are handled in their respective `lower_X` method (since we can't just blindly\n             // walk them).\n-            ast::Item::TraitDef(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n+            ast::Item::Trait(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n             ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n@@ -111,7 +111,7 @@ impl Ctx {\n             ast::Item::Static(ast) => self.lower_static(ast).map(Into::into),\n             ast::Item::Const(ast) => Some(self.lower_const(ast).into()),\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n-            ast::Item::TraitDef(ast) => self.lower_trait(ast).map(Into::into),\n+            ast::Item::Trait(ast) => self.lower_trait(ast).map(Into::into),\n             ast::Item::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n             ast::Item::Use(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n@@ -413,7 +413,7 @@ impl Ctx {\n         Some(id(self.data().mods.alloc(res)))\n     }\n \n-    fn lower_trait(&mut self, trait_def: &ast::TraitDef) -> Option<FileItemTreeId<Trait>> {\n+    fn lower_trait(&mut self, trait_def: &ast::Trait) -> Option<FileItemTreeId<Trait>> {\n         let name = trait_def.name()?.as_name();\n         let visibility = self.lower_visibility(trait_def);\n         let generic_params =\n@@ -698,7 +698,7 @@ enum GenericsOwner<'a> {\n     Enum,\n     Union,\n     /// The `TraitDef` is needed to fill the source map for the implicit `Self` parameter.\n-    Trait(&'a ast::TraitDef),\n+    Trait(&'a ast::Trait),\n     TypeAlias,\n     Impl,\n }"}, {"sha": "40a9bd53dff1ff48aac0b81046f5c2a89ce79706", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -234,7 +234,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n             ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n-            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n+            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Trait>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n             > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAlias>(8) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n@@ -327,7 +327,7 @@ fn trait_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n-            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n+            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Trait>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n             > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]"}, {"sha": "0bed0887512c9278584b076f02368c4bbb440942", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -19,7 +19,7 @@ pub const CONST: Key<ast::Const, ConstId> = Key::new();\n pub const STATIC: Key<ast::Static, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n-pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n+pub const TRAIT: Key<ast::Trait, TraitId> = Key::new();\n pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();\n pub const ENUM: Key<ast::Enum, EnumId> = Key::new();"}, {"sha": "6c11f5830b30a4d748d47bb1e4c155e3cc45cb91", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n         .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == TRAIT_DEF)\n+        .filter(|it| it.kind() == TRAIT)\n         .is_some()\n }\n #[test]\n@@ -113,7 +113,7 @@ fn test_if_is_prev() {\n }\n \n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT_DEF).is_some()\n+    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT).is_some()\n }\n #[test]\n fn test_has_trait_as_prev_sibling() {"}, {"sha": "45fbc86ef1baf88745034dcdf48c525a6bf18ead", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -382,7 +382,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n             ast::Fn(it) => it.doc_comment_text(),\n             ast::Struct(it) => it.doc_comment_text(),\n             ast::Enum(it) => it.doc_comment_text(),\n-            ast::TraitDef(it) => it.doc_comment_text(),\n+            ast::Trait(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n             ast::TypeAlias(it) => it.doc_comment_text(),\n             ast::Const(it) => it.doc_comment_text(),\n@@ -407,7 +407,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n             ast::Fn(it) => it.short_label(),\n             ast::Struct(it) => it.short_label(),\n             ast::Enum(it) => it.short_label(),\n-            ast::TraitDef(it) => it.short_label(),\n+            ast::Trait(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),\n             ast::TypeAlias(it) => it.short_label(),\n             ast::Const(it) => it.short_label(),"}, {"sha": "c600908a48b08aa6d5992e9befdf555b35b96251", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -31,7 +31,7 @@ impl ShortLabel for ast::Enum {\n     }\n }\n \n-impl ShortLabel for ast::TraitDef {\n+impl ShortLabel for ast::Trait {\n     fn short_label(&self) -> Option<String> {\n         if self.unsafe_token().is_some() {\n             short_label_from_node(self, \"unsafe trait \")"}, {"sha": "3fc97246038cc16016e9fbdd04237284ba64a389", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -130,7 +130,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::Union(it) => decl(it),\n             ast::Enum(it) => decl(it),\n             ast::Variant(it) => decl(it),\n-            ast::TraitDef(it) => decl(it),\n+            ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n             ast::TypeAlias(it) => {\n                 let ty = it.type_ref();"}, {"sha": "9912b714214e8b4e338b664c86c7faa665c1a86a", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn goto_implementation(\n             nominal_def.syntax().text_range(),\n             impls_for_def(&sema, &nominal_def, krate)?,\n         ));\n-    } else if let Some(trait_def) = find_node_at_offset::<ast::TraitDef>(&syntax, position.offset) {\n+    } else if let Some(trait_def) = find_node_at_offset::<ast::Trait>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             trait_def.syntax().text_range(),\n             impls_for_trait(&sema, &trait_def, krate)?,\n@@ -62,7 +62,7 @@ fn impls_for_def(\n \n fn impls_for_trait(\n     sema: &Semantics<RootDatabase>,\n-    node: &ast::TraitDef,\n+    node: &ast::Trait,\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let tr = sema.to_def(node)?;"}, {"sha": "aa48cb412ff8659763549236ae88120e3b7f2843", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1678,7 +1678,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1718,7 +1718,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1777,7 +1777,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1796,7 +1796,7 @@ fn main() { let s<|>t = foo(); }\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1839,7 +1839,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1858,7 +1858,7 @@ fn main() { let s<|>t = foo(); }\n                                         22..25,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1933,7 +1933,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1973,7 +1973,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1992,7 +1992,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2049,7 +2049,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2130,7 +2130,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2167,7 +2167,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2205,7 +2205,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2265,7 +2265,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         6..15,\n                                     ),\n                                     name: \"ImplTrait\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait ImplTrait\",\n@@ -2303,7 +2303,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         28..36,\n                                     ),\n                                     name: \"DynTrait\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait DynTrait\",\n@@ -2370,7 +2370,7 @@ fn main() { let s<|>t = test().get(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\","}, {"sha": "a66453c04b1945ba044e262d3545f2ed079962e1", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -708,7 +708,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n         STRUCT => HighlightTag::Struct,\n         ENUM => HighlightTag::Enum,\n         UNION => HighlightTag::Union,\n-        TRAIT_DEF => HighlightTag::Trait,\n+        TRAIT => HighlightTag::Trait,\n         TYPE_ALIAS => HighlightTag::TypeAlias,\n         TYPE_PARAM => HighlightTag::TypeParam,\n         RECORD_FIELD => HighlightTag::Field,"}, {"sha": "df56f2d9e609be87ef15531a00a72fe24cc52ae9", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -162,7 +162,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def: hir::Enum = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::TraitDef(it) => {\n+            ast::Trait(it) => {\n                 let def: hir::Trait = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "35a2c5be3b2769eb4ee3463c5fd98b04e4b9dea5", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -344,7 +344,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT | ENUM | TRAIT_DEF | TYPE_ALIAS)\n+    matches!(kind, STRUCT | ENUM | TRAIT | TYPE_ALIAS)\n }\n \n /// The actual data that is stored in the index. It should be as compact as\n@@ -400,7 +400,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::Fn(it) => decl(it),\n             ast::Struct(it) => decl(it),\n             ast::Enum(it) => decl(it),\n-            ast::TraitDef(it) => decl(it),\n+            ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n             ast::TypeAlias(it) => decl(it),\n             ast::Const(it) => decl(it),"}, {"sha": "cd4b2381d604052267c48828c360374a634f3d1d", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -151,7 +151,7 @@ pub(crate) fn reparser(\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ASSOC_ITEM_LIST => match parent? {\n             IMPL_DEF => items::impl_item_list,\n-            TRAIT_DEF => items::trait_item_list,\n+            TRAIT => items::trait_item_list,\n             _ => return None,\n         },\n         ITEM_LIST => items::mod_item_list,"}, {"sha": "5603d61a99ef1d34e5763bf971a1a11a43132609", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -193,7 +193,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // unsafe auto trait T {}\n         T![trait] => {\n             traits::trait_def(p);\n-            m.complete(p, TRAIT_DEF);\n+            m.complete(p, TRAIT);\n         }\n \n         // test unsafe_impl"}, {"sha": "27eed009030ccf7ec72520c7a24e49045f182113", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -133,7 +133,7 @@ pub enum SyntaxKind {\n     USE,\n     STATIC,\n     CONST,\n-    TRAIT_DEF,\n+    TRAIT,\n     IMPL_DEF,\n     TYPE_ALIAS,\n     MACRO_CALL,"}, {"sha": "3adb6b2d42d5c8bb1c946519e8abda1e391a55e2", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -169,15 +169,15 @@ impl Struct {\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitDef {\n+pub struct Trait {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TraitDef {}\n-impl ast::NameOwner for TraitDef {}\n-impl ast::VisibilityOwner for TraitDef {}\n-impl ast::GenericParamsOwner for TraitDef {}\n-impl ast::TypeBoundsOwner for TraitDef {}\n-impl TraitDef {\n+impl ast::AttrsOwner for Trait {}\n+impl ast::NameOwner for Trait {}\n+impl ast::VisibilityOwner for Trait {}\n+impl ast::GenericParamsOwner for Trait {}\n+impl ast::TypeBoundsOwner for Trait {}\n+impl Trait {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n     pub fn trait_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trait]) }\n@@ -1283,7 +1283,7 @@ pub enum Item {\n     Module(Module),\n     Static(Static),\n     Struct(Struct),\n-    TraitDef(TraitDef),\n+    Trait(Trait),\n     TypeAlias(TypeAlias),\n     Union(Union),\n     Use(Use),\n@@ -1532,8 +1532,8 @@ impl AstNode for Struct {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TraitDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_DEF }\n+impl AstNode for Trait {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2805,8 +2805,8 @@ impl From<Static> for Item {\n impl From<Struct> for Item {\n     fn from(node: Struct) -> Item { Item::Struct(node) }\n }\n-impl From<TraitDef> for Item {\n-    fn from(node: TraitDef) -> Item { Item::TraitDef(node) }\n+impl From<Trait> for Item {\n+    fn from(node: Trait) -> Item { Item::Trait(node) }\n }\n impl From<TypeAlias> for Item {\n     fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n@@ -2821,7 +2821,7 @@ impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL | MODULE\n-            | STATIC | STRUCT | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n+            | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n@@ -2837,7 +2837,7 @@ impl AstNode for Item {\n             MODULE => Item::Module(Module { syntax }),\n             STATIC => Item::Static(Static { syntax }),\n             STRUCT => Item::Struct(Struct { syntax }),\n-            TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n+            TRAIT => Item::Trait(Trait { syntax }),\n             TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n             UNION => Item::Union(Union { syntax }),\n             USE => Item::Use(Use { syntax }),\n@@ -2857,7 +2857,7 @@ impl AstNode for Item {\n             Item::Module(it) => &it.syntax,\n             Item::Static(it) => &it.syntax,\n             Item::Struct(it) => &it.syntax,\n-            Item::TraitDef(it) => &it.syntax,\n+            Item::Trait(it) => &it.syntax,\n             Item::TypeAlias(it) => &it.syntax,\n             Item::Union(it) => &it.syntax,\n             Item::Use(it) => &it.syntax,\n@@ -3516,7 +3516,7 @@ impl std::fmt::Display for Struct {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TraitDef {\n+impl std::fmt::Display for Trait {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "a8d8955de531b6f97a00a791338bb2e1c089eaf2", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -481,7 +481,7 @@ impl ast::DocCommentsOwner for ast::RecordField {}\n impl ast::DocCommentsOwner for ast::TupleField {}\n impl ast::DocCommentsOwner for ast::Enum {}\n impl ast::DocCommentsOwner for ast::Variant {}\n-impl ast::DocCommentsOwner for ast::TraitDef {}\n+impl ast::DocCommentsOwner for ast::Trait {}\n impl ast::DocCommentsOwner for ast::Module {}\n impl ast::DocCommentsOwner for ast::Static {}\n impl ast::DocCommentsOwner for ast::Const {}"}, {"sha": "6d1828d203946b0d7fe9b69731ee71c593be5301", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -146,7 +146,7 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT_DEF | MODULE\n+        MACRO_CALL | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT | MODULE\n         | RECORD_FIELD | STATIC => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();"}, {"sha": "a6e304b789bc0c214dedfcd40b1a1a340d9f47d8", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -133,7 +133,7 @@ SOURCE_FILE@0..112\n         ERROR@96..97\n           COMMA@96..97 \",\"\n       WHITESPACE@97..98 \" \"\n-      TRAIT_DEF@98..104\n+      TRAIT@98..104\n         TRAIT_KW@98..103 \"trait\"\n         ERROR@103..104\n           COMMA@103..104 \",\""}, {"sha": "51ad2a846fadef0e193f9d85719c729cb4fd116f", "filename": "crates/ra_syntax/test_data/parser/err/0043_default_const.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..39\n-  TRAIT_DEF@0..38\n+  TRAIT@0..38\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7"}, {"sha": "acd72094b95a27e10b855df56ea19453fcbfeda7", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..62\n-  TRAIT_DEF@0..61\n+  TRAIT@0..61\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7"}, {"sha": "625ab4c2d9f6ac80b06ad841948a708b200457c5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0016_unsafe_trait.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  TRAIT_DEF@0..17\n+  TRAIT@0..17\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     TRAIT_KW@7..12 \"trait\""}, {"sha": "3638462f8b2664dc05099eb744c9d7cd70c50c12", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0041_trait_item.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..101\n-  TRAIT_DEF@0..41\n+  TRAIT@0..41\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n@@ -52,7 +52,7 @@ SOURCE_FILE@0..101\n       L_CURLY@39..40 \"{\"\n       R_CURLY@40..41 \"}\"\n   WHITESPACE@41..42 \"\\n\"\n-  TRAIT_DEF@42..100\n+  TRAIT@42..100\n     TRAIT_KW@42..47 \"trait\"\n     WHITESPACE@47..48 \" \"\n     NAME@48..49"}, {"sha": "a5bf55131dd5d7aa883e3376c9683d1c42d6ddc0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0050_fn_decl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..22\n-  TRAIT_DEF@0..21\n+  TRAIT@0..21\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7"}, {"sha": "0cac9ac431fd5fe797e58b9b9757d8710979ae05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0091_auto_trait.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TRAIT_DEF@0..15\n+  TRAIT@0..15\n     AUTO_KW@0..4 \"auto\"\n     WHITESPACE@4..5 \" \"\n     TRAIT_KW@5..10 \"trait\""}, {"sha": "0ef11c6825e925f5e5d65eb1407107da4048f4fd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0094_unsafe_auto_trait.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..23\n-  TRAIT_DEF@0..22\n+  TRAIT@0..22\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     AUTO_KW@7..11 \"auto\""}, {"sha": "cc220e5348aa01e2d50ddef08a84015f91adf9ca", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0151_trait_alias.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  TRAIT_DEF@0..18\n+  TRAIT@0..18\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..83\n                 R_ANGLE@16..17 \">\"\n     SEMICOLON@17..18 \";\"\n   WHITESPACE@18..19 \"\\n\"\n-  TRAIT_DEF@19..51\n+  TRAIT@19..51\n     TRAIT_KW@19..24 \"trait\"\n     WHITESPACE@24..25 \" \"\n     NAME@25..26\n@@ -82,7 +82,7 @@ SOURCE_FILE@0..83\n                     IDENT@46..50 \"Copy\"\n     SEMICOLON@50..51 \";\"\n   WHITESPACE@51..52 \"\\n\"\n-  TRAIT_DEF@52..82\n+  TRAIT@52..82\n     TRAIT_KW@52..57 \"trait\"\n     WHITESPACE@57..58 \" \"\n     NAME@58..59"}, {"sha": "280d4cb82b3dcae13cd2432a33924fd3ecc6a401", "filename": "crates/ra_syntax/test_data/parser/ok/0030_traits.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..96\n-  TRAIT_DEF@0..36\n+  TRAIT@0..36\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..14\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..96\n       WHITESPACE@34..35 \"\\n\"\n       R_CURLY@35..36 \"}\"\n   WHITESPACE@36..38 \"\\n\\n\"\n-  TRAIT_DEF@38..95\n+  TRAIT@38..95\n     TRAIT_KW@38..43 \"trait\"\n     WHITESPACE@43..44 \" \"\n     NAME@44..57"}, {"sha": "7a574ebb41ec7871bcd379f2141aaba0cf7f9047", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -186,7 +186,7 @@ SOURCE_FILE@0..519\n       L_CURLY@170..171 \"{\"\n       R_CURLY@171..172 \"}\"\n   WHITESPACE@172..174 \"\\n\\n\"\n-  TRAIT_DEF@174..236\n+  TRAIT@174..236\n     TRAIT_KW@174..179 \"trait\"\n     WHITESPACE@179..180 \" \"\n     NAME@180..183"}, {"sha": "facce8167f6243cc095a50b9fbdebeb76d1e6756", "filename": "crates/ra_syntax/test_data/parser/ok/0063_trait_fn_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..170\n-  TRAIT_DEF@0..169\n+  TRAIT@0..169\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7"}, {"sha": "62ed6880b325ae2779f58fb36c63cabf063e07dc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -924,7 +924,7 @@ pub(crate) fn handle_code_lens(\n                 .filter(|it| {\n                     matches!(\n                         it.kind,\n-                        SyntaxKind::TRAIT_DEF\n+                        SyntaxKind::TRAIT\n                             | SyntaxKind::STRUCT\n                             | SyntaxKind::ENUM\n                             | SyntaxKind::UNION"}, {"sha": "3889ebed188b88109efe058601588a51e506f2f1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n         SyntaxKind::STRUCT => lsp_types::SymbolKind::Struct,\n         SyntaxKind::ENUM => lsp_types::SymbolKind::Enum,\n         SyntaxKind::VARIANT => lsp_types::SymbolKind::EnumMember,\n-        SyntaxKind::TRAIT_DEF => lsp_types::SymbolKind::Interface,\n+        SyntaxKind::TRAIT => lsp_types::SymbolKind::Interface,\n         SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,\n         SyntaxKind::MODULE => lsp_types::SymbolKind::Module,\n         SyntaxKind::TYPE_ALIAS => lsp_types::SymbolKind::TypeParameter,"}, {"sha": "ea8bf50edc53270dd2eaeea24e1b3b297357a485", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -103,7 +103,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"USE\",\n         \"STATIC\",\n         \"CONST\",\n-        \"TRAIT_DEF\",\n+        \"TRAIT\",\n         \"IMPL_DEF\",\n         \"TYPE_ALIAS\",\n         \"MACRO_CALL\","}, {"sha": "b3065839797a8710f088c1de814f25efe8a27998", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83467796b6c7365ea4f41900d74444384a9e618/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/c83467796b6c7365ea4f41900d74444384a9e618/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=c83467796b6c7365ea4f41900d74444384a9e618", "patch": "@@ -14,7 +14,7 @@ Item =\n | Module\n | Static\n | Struct\n-| TraitDef\n+| Trait\n | TypeAlias\n | Union\n | Use\n@@ -123,7 +123,7 @@ Static =\n   Attr* Visibility? 'static'? 'mut'? Name ':' ascribed_type:TypeRef\n   '=' body:Expr ';'\n \n-TraitDef =\n+Trait =\n   Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList\n   (':' TypeBoundList?)? WhereClause\n   AssocItemList"}]}