{"sha": "9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "node_id": "C_kwDOAAsO6NoAKDljZmQxNjFjZDViMmUzYjUzYzQ4ODA4NmY4MDAwYWVhMGMyMWIwYjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-30T11:26:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T11:26:07Z"}, "message": "Rollup merge of #99928 - compiler-errors:issue-99914, r=oli-obk\n\nDo not leak type variables from opaque type relation\n\nThe \"root cause\" is that we call `InferCtxt::resolve_vars_if_possible` (3d9dd681f520d1d59f38aed0056cf9474894cc74) on the types we get back in `TypeError::Sorts` since I added a call to it in `InferCtxt::same_type_modulo_infer`. However if this `TypeError` comes from a `InferCtxt::commit_if_ok`, then it may reference type variables that do not exist anymore, which is problematic.\n\nWe avoid this by substituting the `TypeError` with the types we had before being generalized while handling opaques.\n\nThis is kinda gross, and I feel like we can get the same issue from other places where we generalize type/const inference variables. Maybe not? I don't know.\n\nFixes #99914\nFixes #99970\nFixes #100463", "tree": {"sha": "1a05c18d4790c085dcab0deb7a156a2a632291ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a05c18d4790c085dcab0deb7a156a2a632291ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDfPPCRBK7hj4Ov3rIwAALcAIAHGw97zN5GrQJQZLxqQIkeU4\nu5Gan/ggdQl1N74E47RYm9mwVlisUXHkCsXblPxAZMgC4JOHHiO5FywNwNLJnq9e\n26RDicfNE1tuPjWIjQLZRYYxcrFfblg8s/q0dD4j0Ix4YWkG9bjdOMjyebRt/wRA\nJ+hugQzN6N6Tg3Uxp/DsunuRIHcjDUScVO6aanyWpZ8KvmgY+q0U5vI/ZPaZAVFN\nZk2zt/fmM1qLp6PsCfm3r1cXeocQbT57t5/yCn0ygIw/evlVvsr3GvSlxP8w6BWA\nlYFMIQU+8IKSjv47BpTP5dV11Apt6BaQiS7OLdtXFevc2O1v4oaCYnOWSXy3YXE=\n=mWky\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a05c18d4790c085dcab0deb7a156a2a632291ad\nparent 548ed409af7fc161859ffd864cedacd7af8748d6\nparent fb12f40f3b157b0f7dafe393b09bbdcf2e156c11\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661858767 +0530\ncommitter GitHub <noreply@github.com> 1661858767 +0530\n\nRollup merge of #99928 - compiler-errors:issue-99914, r=oli-obk\n\nDo not leak type variables from opaque type relation\n\nThe \"root cause\" is that we call `InferCtxt::resolve_vars_if_possible` (3d9dd681f520d1d59f38aed0056cf9474894cc74) on the types we get back in `TypeError::Sorts` since I added a call to it in `InferCtxt::same_type_modulo_infer`. However if this `TypeError` comes from a `InferCtxt::commit_if_ok`, then it may reference type variables that do not exist anymore, which is problematic.\n\nWe avoid this by substituting the `TypeError` with the types we had before being generalized while handling opaques.\n\nThis is kinda gross, and I feel like we can get the same issue from other places where we generalize type/const inference variables. Maybe not? I don't know.\n\nFixes #99914\nFixes #99970\nFixes #100463\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "html_url": "https://github.com/rust-lang/rust/commit/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548ed409af7fc161859ffd864cedacd7af8748d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/548ed409af7fc161859ffd864cedacd7af8748d6", "html_url": "https://github.com/rust-lang/rust/commit/548ed409af7fc161859ffd864cedacd7af8748d6"}, {"sha": "fb12f40f3b157b0f7dafe393b09bbdcf2e156c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb12f40f3b157b0f7dafe393b09bbdcf2e156c11", "html_url": "https://github.com/rust-lang/rust/commit/fb12f40f3b157b0f7dafe393b09bbdcf2e156c11"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "b7eab5d43285b121e16f34f0ec291e42f31703a7", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "patch": "@@ -4,6 +4,7 @@ use super::SubregionOrigin;\n use crate::infer::combine::ConstEquateRelation;\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::traits::Obligation;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n@@ -141,17 +142,27 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                     Ok(infcx.tcx.mk_ty_var(var))\n                 };\n                 let (a, b) = if self.a_is_expected { (a, b) } else { (b, a) };\n-                let (a, b) = match (a.kind(), b.kind()) {\n+                let (ga, gb) = match (a.kind(), b.kind()) {\n                     (&ty::Opaque(..), _) => (a, generalize(b, true)?),\n                     (_, &ty::Opaque(..)) => (generalize(a, false)?, b),\n                     _ => unreachable!(),\n                 };\n                 self.fields.obligations.extend(\n                     infcx\n-                        .handle_opaque_type(a, b, true, &self.fields.trace.cause, self.param_env())?\n+                        .handle_opaque_type(ga, gb, true, &self.fields.trace.cause, self.param_env())\n+                        // Don't leak any generalized type variables out of this\n+                        // subtyping relation in the case of a type error.\n+                        .map_err(|err| {\n+                            let (ga, gb) = self.fields.infcx.resolve_vars_if_possible((ga, gb));\n+                            if let TypeError::Sorts(sorts) = err && sorts.expected == ga && sorts.found == gb {\n+                                TypeError::Sorts(ExpectedFound { expected: a, found: b })\n+                            } else {\n+                                err\n+                            }\n+                        })?\n                         .obligations,\n                 );\n-                Ok(a)\n+                Ok(ga)\n             }\n \n             _ => {"}, {"sha": "4324a0229a6ff2673fe5211bf501500e904bfe3a", "filename": "src/test/ui/impl-trait/issue-99914.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.rs?ref=9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+fn main() {}\n+\n+struct Error;\n+struct Okay;\n+\n+fn foo(t: Result<Okay, Error>) {\n+    t.and_then(|t| -> _ { bar(t) });\n+    //~^ ERROR mismatched types\n+}\n+\n+async fn bar(t: Okay) {}"}, {"sha": "074d5d58d9a301afe0a265956ca5a0991fda1c2e", "filename": "src/test/ui/impl-trait/issue-99914.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-99914.rs:9:27\n+   |\n+LL |     t.and_then(|t| -> _ { bar(t) });\n+   |                           ^^^^^^ expected enum `Result`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-99914.rs:13:23\n+   |\n+LL | async fn bar(t: Okay) {}\n+   |                       ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:     expected enum `Result<_, Error>`\n+           found opaque type `impl Future<Output = ()>`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     t.and_then(|t| -> _ { Ok(bar(t)) });\n+   |                           +++      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}