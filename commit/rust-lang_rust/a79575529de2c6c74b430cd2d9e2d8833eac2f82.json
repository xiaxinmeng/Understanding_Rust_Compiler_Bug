{"sha": "a79575529de2c6c74b430cd2d9e2d8833eac2f82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OTU3NTUyOWRlMmM2Yzc0YjQzMGNkMmQ5ZTJkODgzM2VhYzJmODI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-27T12:17:58Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-27T12:24:34Z"}, "message": "std: use ArcData rather than c_void in UnsafeArc.\n\nThis means that fewer `transmute`s are required, so there is less\nchance of a `transmute` not having the corresponding `forget`\n(possibly leading to use-after-free, etc).", "tree": {"sha": "223b7c93ccac59d985c787512b2c2f6a43cd86c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223b7c93ccac59d985c787512b2c2f6a43cd86c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79575529de2c6c74b430cd2d9e2d8833eac2f82", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79575529de2c6c74b430cd2d9e2d8833eac2f82", "html_url": "https://github.com/rust-lang/rust/commit/a79575529de2c6c74b430cd2d9e2d8833eac2f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79575529de2c6c74b430cd2d9e2d8833eac2f82/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71448d7c37b84a0d4713441bc4c9ef6d851df62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71448d7c37b84a0d4713441bc4c9ef6d851df62b", "html_url": "https://github.com/rust-lang/rust/commit/71448d7c37b84a0d4713441bc4c9ef6d851df62b"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "cf8ec968e920301bf099b52f7bc2248f0b21c882", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a79575529de2c6c74b430cd2d9e2d8833eac2f82/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79575529de2c6c74b430cd2d9e2d8833eac2f82/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=a79575529de2c6c74b430cd2d9e2d8833eac2f82", "patch": "@@ -27,7 +27,7 @@ use vec;\n ///\n /// Enforces no shared-memory safety.\n pub struct UnsafeArc<T> {\n-    data: *mut libc::c_void,\n+    data: *mut ArcData<T>,\n }\n \n struct ArcData<T> {\n@@ -41,7 +41,7 @@ struct ArcData<T> {\n     data: Option<T>,\n }\n \n-unsafe fn new_inner<T: Send>(data: T, refcount: uint) -> *mut libc::c_void {\n+unsafe fn new_inner<T: Send>(data: T, refcount: uint) -> *mut ArcData<T> {\n     let data = ~ArcData { count: AtomicUint::new(refcount),\n                           unwrapper: AtomicOption::empty(),\n                           data: Some(data) };\n@@ -79,12 +79,11 @@ impl<T: Send> UnsafeArc<T> {\n             ~[] // The \"num_handles - 1\" trick (below) fails in the 0 case.\n         } else {\n             unsafe {\n-                let mut data: ~ArcData<T> = cast::transmute(self.data);\n                 // Minus one because we are recycling the given handle's refcount.\n-                let old_count = data.count.fetch_add(num_handles - 1, Acquire);\n-                // let old_count = data.count.fetch_add(num_handles, Acquire);\n+                let old_count = (*self.data).count.fetch_add(num_handles - 1, Acquire);\n+                // let old_count = (*self.data).count.fetch_add(num_handles, Acquire);\n                 assert!(old_count >= 1);\n-                let ptr = cast::transmute(data);\n+                let ptr = self.data;\n                 cast::forget(self); // Don't run the destructor on this handle.\n                 vec::from_fn(num_handles, |_| UnsafeArc { data: ptr })\n             }\n@@ -94,21 +93,17 @@ impl<T: Send> UnsafeArc<T> {\n     #[inline]\n     pub fn get(&self) -> *mut T {\n         unsafe {\n-            let mut data: ~ArcData<T> = cast::transmute(self.data);\n-            assert!(data.count.load(Relaxed) > 0);\n-            let r: *mut T = data.data.get_mut_ref();\n-            cast::forget(data);\n+            assert!((*self.data).count.load(Relaxed) > 0);\n+            let r: *mut T = (*self.data).data.get_mut_ref();\n             return r;\n         }\n     }\n \n     #[inline]\n     pub fn get_immut(&self) -> *T {\n         unsafe {\n-            let data: ~ArcData<T> = cast::transmute(self.data);\n-            assert!(data.count.load(Relaxed) > 0);\n-            let r: *T = data.data.get_ref();\n-            cast::forget(data);\n+            assert!((*self.data).count.load(Relaxed) > 0);\n+            let r: *T = (*self.data).data.get_ref();\n             return r;\n         }\n     }\n@@ -122,6 +117,7 @@ impl<T: Send> UnsafeArc<T> {\n         do task::unkillable {\n             unsafe {\n                 let mut this = this.take();\n+                // The ~ dtor needs to run if this code succeeds.\n                 let mut data: ~ArcData<T> = cast::transmute(this.data);\n                 // Set up the unwrap protocol.\n                 let (p1,c1) = comm::oneshot(); // ()\n@@ -186,6 +182,7 @@ impl<T: Send> UnsafeArc<T> {\n     pub fn try_unwrap(self) -> Either<UnsafeArc<T>, T> {\n         unsafe {\n             let mut this = self; // FIXME(#4330) mutable self\n+            // The ~ dtor needs to run if this code succeeds.\n             let mut data: ~ArcData<T> = cast::transmute(this.data);\n             // This can of course race with anybody else who has a handle, but in\n             // such a case, the returned count will always be at least 2. If we\n@@ -212,11 +209,9 @@ impl<T: Send> UnsafeArc<T> {\n impl<T: Send> Clone for UnsafeArc<T> {\n     fn clone(&self) -> UnsafeArc<T> {\n         unsafe {\n-            let mut data: ~ArcData<T> = cast::transmute(self.data);\n             // This barrier might be unnecessary, but I'm not sure...\n-            let old_count = data.count.fetch_add(1, Acquire);\n+            let old_count = (*self.data).count.fetch_add(1, Acquire);\n             assert!(old_count >= 1);\n-            cast::forget(data);\n             return UnsafeArc { data: self.data };\n         }\n     }"}]}