{"sha": "860448f070d56885317bbe1d9ae81871008a9143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDQ0OGYwNzBkNTY4ODUzMTdiYmUxZDlhZTgxODcxMDA4YTkxNDM=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-25T10:58:19Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-25T10:58:19Z"}, "message": "Fix interchanged names of to_arg_ty and from_arg_ty", "tree": {"sha": "9b646769b07716abd72efbeed4180b3ea85cec51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b646769b07716abd72efbeed4180b3ea85cec51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/860448f070d56885317bbe1d9ae81871008a9143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/860448f070d56885317bbe1d9ae81871008a9143", "html_url": "https://github.com/rust-lang/rust/commit/860448f070d56885317bbe1d9ae81871008a9143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/860448f070d56885317bbe1d9ae81871008a9143/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc0bf2586952350128b5abf94ae52a80c61efb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc0bf2586952350128b5abf94ae52a80c61efb2", "html_url": "https://github.com/rust-lang/rust/commit/2bc0bf2586952350128b5abf94ae52a80c61efb2"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "c26fa77a10f93c52160d339ea957492a86a9812f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/860448f070d56885317bbe1d9ae81871008a9143/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/860448f070d56885317bbe1d9ae81871008a9143/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=860448f070d56885317bbe1d9ae81871008a9143", "patch": "@@ -785,7 +785,7 @@ pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n         if !global.is_null() && llvm::LLVMIsGlobalConstant(global) == llvm::True {\n             let val = llvm::LLVMGetInitializer(global);\n             if !val.is_null() {\n-                return from_arg_ty(cx, val, t);\n+                return to_arg_ty(cx, val, t);\n             }\n         }\n     }\n@@ -807,7 +807,7 @@ pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n         llvm::LLVMSetAlignment(val, align);\n     }\n \n-    from_arg_ty(cx, val, t)\n+    to_arg_ty(cx, val, t)\n }\n \n /// Helper for storing values in memory. Does the necessary conversion if the in-memory type\n@@ -817,21 +817,21 @@ pub fn store_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, dst: ValueRef, t\n         return;\n     }\n \n-    let store = Store(cx, to_arg_ty(cx, v, t), to_arg_ty_ptr(cx, dst, t));\n+    let store = Store(cx, from_arg_ty(cx, v, t), to_arg_ty_ptr(cx, dst, t));\n     unsafe {\n         llvm::LLVMSetAlignment(store, type_of::align_of(cx.ccx(), t));\n     }\n }\n \n-pub fn to_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef {\n+pub fn from_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef {\n     if ty::type_is_bool(ty) {\n         ZExt(bcx, val, Type::i8(bcx.ccx()))\n     } else {\n         val\n     }\n }\n \n-pub fn from_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef {\n+pub fn to_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef {\n     if ty::type_is_bool(ty) {\n         Trunc(bcx, val, Type::i1(bcx.ccx()))\n     } else {"}, {"sha": "18c7390933b6f905750c4c4dfff21dabe1263336", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/860448f070d56885317bbe1d9ae81871008a9143/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/860448f070d56885317bbe1d9ae81871008a9143/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=860448f070d56885317bbe1d9ae81871008a9143", "patch": "@@ -490,12 +490,12 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             unsafe {\n                 llvm::LLVMSetAlignment(load, type_of::align_of(ccx, tp_ty));\n             }\n-            from_arg_ty(bcx, load, tp_ty)\n+            to_arg_ty(bcx, load, tp_ty)\n         },\n         (_, \"volatile_store\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n             let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n-            let val = to_arg_ty(bcx, llargs[1], tp_ty);\n+            let val = from_arg_ty(bcx, llargs[1], tp_ty);\n             let store = VolatileStore(bcx, val, ptr);\n             unsafe {\n                 llvm::LLVMSetAlignment(store, type_of::align_of(ccx, tp_ty));\n@@ -777,8 +777,8 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n-                    let cmp = to_arg_ty(bcx, llargs[1], tp_ty);\n-                    let src = to_arg_ty(bcx, llargs[2], tp_ty);\n+                    let cmp = from_arg_ty(bcx, llargs[1], tp_ty);\n+                    let src = from_arg_ty(bcx, llargs[2], tp_ty);\n                     let res = AtomicCmpXchg(bcx, ptr, cmp, src, order,\n                                             strongest_failure_ordering);\n                     ExtractValue(bcx, res, 0)\n@@ -787,12 +787,12 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 \"load\" => {\n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n-                    from_arg_ty(bcx, AtomicLoad(bcx, ptr, order), tp_ty)\n+                    to_arg_ty(bcx, AtomicLoad(bcx, ptr, order), tp_ty)\n                 }\n                 \"store\" => {\n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n-                    let val = to_arg_ty(bcx, llargs[1], tp_ty);\n+                    let val = from_arg_ty(bcx, llargs[1], tp_ty);\n                     AtomicStore(bcx, val, ptr, order);\n                     C_nil(ccx)\n                 }\n@@ -826,7 +826,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n-                    let val = to_arg_ty(bcx, llargs[1], tp_ty);\n+                    let val = from_arg_ty(bcx, llargs[1], tp_ty);\n                     AtomicRMW(bcx, atom_op, ptr, val, order)\n                 }\n             }"}]}