{"sha": "4f6f6af281b47a95576b648ac924d79835f16db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmY2YWYyODFiNDdhOTU1NzZiNjQ4YWM5MjRkNzk4MzVmMTZkYjI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T02:05:30Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcollections: fix fallout", "tree": {"sha": "3a4badfd0e485425c8f3e21451bb578d75cd8467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a4badfd0e485425c8f3e21451bb578d75cd8467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6f6af281b47a95576b648ac924d79835f16db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f6af281b47a95576b648ac924d79835f16db2", "html_url": "https://github.com/rust-lang/rust/commit/4f6f6af281b47a95576b648ac924d79835f16db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f6af281b47a95576b648ac924d79835f16db2/comments", "author": null, "committer": null, "parents": [{"sha": "eede5d2bce06cd0546864b279389ec48e8ad7917", "url": "https://api.github.com/repos/rust-lang/rust/commits/eede5d2bce06cd0546864b279389ec48e8ad7917", "html_url": "https://github.com/rust-lang/rust/commit/eede5d2bce06cd0546864b279389ec48e8ad7917"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "ce5817e8d9e1adfc4583e7634af314a0f9ebf60a", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f6af281b47a95576b648ac924d79835f16db2/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f6af281b47a95576b648ac924d79835f16db2/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=4f6f6af281b47a95576b648ac924d79835f16db2", "patch": "@@ -234,10 +234,12 @@ impl<V> VecMap<V> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(&mut self) -> MoveItems<V> {\n-        let values = replace(&mut self.v, vec!());\n-        values.into_iter().enumerate().filter_map(|(i, v)| {\n+        fn filter<A>((i, v): (uint, Option<A>)) -> Option<(uint, A)> {\n             v.map(|v| (i, v))\n-        })\n+        }\n+\n+        let values = replace(&mut self.v, vec!());\n+        values.into_iter().enumerate().filter_map(filter)\n     }\n \n     /// Return the number of elements in the map.\n@@ -631,8 +633,11 @@ pub type Values<'a, V> =\n     iter::Map<(uint, &'a V), &'a V, Entries<'a, V>, fn((uint, &'a V)) -> &'a V>;\n \n /// Iterator over the key-value pairs of a map, the iterator consumes the map\n-pub type MoveItems<V> =\n-    FilterMap<'static, (uint, Option<V>), (uint, V), Enumerate<vec::MoveItems<Option<V>>>>;\n+pub type MoveItems<V> = FilterMap<\n+    (uint, Option<V>),\n+    (uint, V),\n+    Enumerate<vec::MoveItems<Option<V>>>,\n+    fn((uint, Option<V>)) -> Option<(uint, V)>>;\n \n #[cfg(test)]\n mod test_map {"}]}