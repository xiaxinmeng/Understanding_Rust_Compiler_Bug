{"sha": "dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTA4N2RkMTdkNTdlN2E1ZTg4NjNmMzlkZmM4NmYyZjhhNGIzMDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-17T19:24:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-17T19:24:03Z"}, "message": "Merge branch 'pr-394'", "tree": {"sha": "42036eabd375868d82219d5776952c1b37e86bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42036eabd375868d82219d5776952c1b37e86bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "html_url": "https://github.com/rust-lang/rust/commit/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853368c1d3c92fa699ba5d1bd1cca2cd2703d4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/853368c1d3c92fa699ba5d1bd1cca2cd2703d4d1", "html_url": "https://github.com/rust-lang/rust/commit/853368c1d3c92fa699ba5d1bd1cca2cd2703d4d1"}, {"sha": "80639164770bd5755443b52073d358c7496a030a", "url": "https://api.github.com/repos/rust-lang/rust/commits/80639164770bd5755443b52073d358c7496a030a", "html_url": "https://github.com/rust-lang/rust/commit/80639164770bd5755443b52073d358c7496a030a"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "e50407eaaaa38c353a6bfa92bd719bf95584247d", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 64 lints included in this crate:\n+There are 66 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -68,6 +68,8 @@ name\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                     | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                   | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)       | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n+[unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)         | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n+[unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                 | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention"}, {"sha": "a3657460fe9924d8c3d0ac13635a4a62133ffcde", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "patch": "@@ -50,6 +50,7 @@ pub mod precedence;\n pub mod mutex_atomic;\n pub mod zero_div_zero;\n pub mod open_options;\n+pub mod needless_features;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -94,6 +95,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box open_options::NonSensicalOpenOptions);\n     reg.register_late_lint_pass(box zero_div_zero::ZeroDivZeroPass);\n     reg.register_late_lint_pass(box mutex_atomic::MutexAtomic);\n+    reg.register_late_lint_pass(box needless_features::NeedlessFeaturesPass);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -150,6 +152,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::NEEDLESS_BOOL,\n+        needless_features::UNSTABLE_AS_MUT_SLICE,\n+        needless_features::UNSTABLE_AS_SLICE,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         precedence::PRECEDENCE,\n         ptr_arg::PTR_ARG,"}, {"sha": "b1d38df73113cc671dd07f28bb88177d63ca7dfb", "filename": "src/needless_features.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_features.rs?ref=dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "patch": "@@ -0,0 +1,53 @@\n+//! Checks for usage of nightly features that have simple stable equivalents\n+//!\n+//! This lint is **warn** by default\n+\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+\n+use utils::{span_lint};\n+use utils;\n+\n+declare_lint! {\n+    pub UNSTABLE_AS_SLICE,\n+    Warn,\n+    \"as_slice is not stable and can be replaced by & v[..]\\\n+see https://github.com/rust-lang/rust/issues/27729\"\n+}\n+\n+declare_lint! {\n+    pub UNSTABLE_AS_MUT_SLICE,\n+    Warn,\n+    \"as_mut_slice is not stable and can be replaced by &mut v[..]\\\n+see https://github.com/rust-lang/rust/issues/27729\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct NeedlessFeaturesPass;\n+\n+impl LintPass for NeedlessFeaturesPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNSTABLE_AS_SLICE,UNSTABLE_AS_MUT_SLICE)\n+    }\n+}\n+\n+impl LateLintPass for NeedlessFeaturesPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprMethodCall(ref name, _, _) = expr.node {\n+            if name.node.as_str() == \"as_slice\" && check_paths(cx, expr) {\n+                span_lint(cx, UNSTABLE_AS_SLICE, expr.span,\n+                          \"used as_slice() from the 'convert' nightly feature. Use &[..] \\\n+                           instead\");\n+            }\n+            if name.node.as_str() == \"as_mut_slice\" && check_paths(cx, expr) {\n+                span_lint(cx, UNSTABLE_AS_MUT_SLICE, expr.span,\n+                          \"used as_mut_slice() from the 'convert' nightly feature. Use &mut [..] \\\n+                           instead\");\n+            }\n+        }\n+    }\n+}\n+\n+fn check_paths(cx: &LateContext, expr: &Expr) -> bool {\n+    utils::match_impl_method(cx, expr, &[\"collections\", \"vec\", \"Vec<T>\"])\n+}"}, {"sha": "80b8c88361af685c3900b72d1f47d66d81c0c878", "filename": "src/utils.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "patch": "@@ -118,6 +118,19 @@ pub fn match_type(cx: &LateContext, ty: ty::Ty, path: &[&str]) -> bool {\n     }\n }\n \n+/// check if method call given in \"expr\" belongs to given trait\n+pub fn match_impl_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n+    let method_call = ty::MethodCall::expr(expr.id);\n+\n+    let trt_id = cx.tcx.tables\n+                       .borrow().method_map.get(&method_call)\n+                       .and_then(|callee| cx.tcx.impl_of_method(callee.def_id));\n+    if let Some(trt_id) = trt_id {\n+        match_def_path(cx, trt_id, path)\n+    } else {\n+        false\n+    }\n+}\n /// check if method call given in \"expr\" belongs to given trait\n pub fn match_trait_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n     let method_call = ty::MethodCall::expr(expr.id);"}, {"sha": "dee2a19d5d0f32263baa942080523b50621d0ddc", "filename": "tests/compile-fail/needless_features.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/tests%2Fcompile-fail%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309/tests%2Fcompile-fail%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_features.rs?ref=dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "patch": "@@ -0,0 +1,29 @@\n+#![feature(plugin)]\n+#![feature(convert)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+\n+fn test_as_slice() {\n+    let v = vec![1];\n+    v.as_slice(); //~ERROR used as_slice() from the 'convert' nightly feature. Use &[..]\n+\n+    let mut v2 = vec![1];\n+    v2.as_mut_slice(); //~ERROR used as_mut_slice() from the 'convert' nightly feature. Use &mut [..]\n+}\n+\n+struct ShouldWork;\n+\n+impl ShouldWork {\n+    fn as_slice(&self) -> &ShouldWork { self }\n+}\n+\n+fn test_should_work() {\n+    let sw = ShouldWork;\n+    sw.as_slice();\n+}\n+\n+fn main() {\n+    test_as_slice();\n+    test_should_work();\n+}"}]}