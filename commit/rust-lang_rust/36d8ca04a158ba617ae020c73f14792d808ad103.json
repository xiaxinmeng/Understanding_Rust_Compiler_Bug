{"sha": "36d8ca04a158ba617ae020c73f14792d808ad103", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDhjYTA0YTE1OGJhNjE3YWUwMjBjNzNmMTQ3OTJkODA4YWQxMDM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-23T16:09:37Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-23T16:28:39Z"}, "message": "Add a `MISSING_DOCS_IN_PRIVATE_ITEMS` lint", "tree": {"sha": "2fec95da54e8db156203b16cf0c21f555b31fbbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fec95da54e8db156203b16cf0c21f555b31fbbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d8ca04a158ba617ae020c73f14792d808ad103", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJXvHm4AAoJEF5CfHlMukXoLdYP/jIYDkmbUNNVa2G6EA575bKZ\nOUfCE1CGjnJNA/bJ9vwftaJxZb+/tWRN8S6Z0BkD+eNgh249mRB1/t1qbKNwTYTQ\nFwZNBN0XMOWrRYau7/8lcYjRswCRZdbtmNazS7A8/XWije13yxxBTf423TMX2GEc\nAxt05UiuEFp+nnBqUw2o0o18AAWOrdmJJJ3RWBFZXsBH99L4bwtRDdG8SJJnj8tM\nOF5hBSW1alxIfQhK3DYjL/1//9wBhRiJMHbI/gylKPXbKczhIkCTu1AzmOXKCmHO\noo7+ZP7AWhj2UgKbFx1Cqrgvuo/uXT7IqREwpjlaCE3xx54UM7V7nhG6k2FGYJhf\nxCiJHBotFS2pbYlg0kMaORG9U5jFqwY7jxlc7mCd4rJINT5mV08sF6iUY3rXou/P\nUiuw+/Ywm9JyBjrxBv6k0fP/y7swrqW/4VX7WFwPbGSPh9Hz5ZkS+PriYYkbNwN2\nfB+X/lww9GziSg4xDQXJXRe2hqixIJJXv4N/SnJqic3QFMlDneSQ14vt6j1Z0cps\nXg7tajbA1txmf5eNo5W6zsYowtiTxd0Vx1sESfWeBeDCtNS/pSBUWa3qECVSAoYe\nfXWqLH8NVaCbQLVd0Zpuyq7mG2Omp5q1Osln/46tovLHu2KvPF3truIwVIleLUGv\nQUpMsFmhuYV3p674ZxsH\n=a7rJ\n-----END PGP SIGNATURE-----", "payload": "tree 2fec95da54e8db156203b16cf0c21f555b31fbbb\nparent 507b626b36131f226423ca9219d4ac611f398c09\nauthor mcarton <cartonmartin+git@gmail.com> 1471968577 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1471969719 +0200\n\nAdd a `MISSING_DOCS_IN_PRIVATE_ITEMS` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8ca04a158ba617ae020c73f14792d808ad103", "html_url": "https://github.com/rust-lang/rust/commit/36d8ca04a158ba617ae020c73f14792d808ad103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d8ca04a158ba617ae020c73f14792d808ad103/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507b626b36131f226423ca9219d4ac611f398c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/507b626b36131f226423ca9219d4ac611f398c09", "html_url": "https://github.com/rust-lang/rust/commit/507b626b36131f226423ca9219d4ac611f398c09"}], "stats": {"total": 396, "additions": 390, "deletions": 6}, "files": [{"sha": "7723b558376f2e260bfd6ab3662e30ee2365bb94", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -2,7 +2,7 @@\n All notable changes to this project will be documented in this file.\n \n ## 0.0.86 \u2014 ?\n-* New lint: [`zero_prefixed_literal`]\n+* New lints: [`missing_docs_in_private_items`], [`zero_prefixed_literal`]\n \n ## 0.0.85 \u2014 2016-08-19\n * Fix ICE with [`useless_attribute`]\n@@ -241,6 +241,7 @@ All notable changes to this project will be documented in this file.\n [`mem_forget`]: https://github.com/Manishearth/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/Manishearth/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op\n+[`missing_docs_in_private_items`]: https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items\n [`mixed_case_hex_literals`]: https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals\n [`module_inception`]: https://github.com/Manishearth/rust-clippy/wiki#module_inception\n [`modulo_one`]: https://github.com/Manishearth/rust-clippy/wiki#modulo_one"}, {"sha": "45c20f06c0611b4d3c3fcb3bee82eed503eebec8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 167 lints included in this crate:\n+There are 168 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -100,6 +100,7 @@ name\n [mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                             | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                   | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                   | warn    | having a variable on both sides of an assign op\n+[missing_docs_in_private_items](https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items)       | allow   | detects missing documentation for public and private members\n [mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                   | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                 | warn    | modules that have the same name as their parent module\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                             | warn    | taking a number modulo 1, which always returns 0"}, {"sha": "f7b1dcb40f4f6fabe2199ef6171ce7913d5f9849", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -10,7 +10,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(type_macros)]\n \n-#![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n+#![allow(indexing_slicing, shadow_reuse, unknown_lints, missing_docs_in_private_items)]\n \n #[macro_use]\n extern crate syntax;\n@@ -96,6 +96,7 @@ pub mod methods;\n pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n+pub mod missing_doc;\n pub mod module_inception;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -260,6 +261,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box assign_ops::AssignOps);\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n+    reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -282,6 +284,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::USED_UNDERSCORE_BINDING,\n         misc_early::UNSEPARATED_LITERAL_SUFFIX,\n+        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         mut_mut::MUT_MUT,\n         mutex_atomic::MUTEX_INTEGER,\n         non_expressive_names::SIMILAR_NAMES,"}, {"sha": "b2b526770387a93237b90f792c52b0643c096ff4", "filename": "clippy_lints/src/missing_doc.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -0,0 +1,172 @@\n+/* This file incorporates work covered by the following copyright and\n+ * permission notice:\n+ *   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+ *   file at the top-level directory of this distribution and at\n+ *   http://rust-lang.org/COPYRIGHT.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ *   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ *   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ *   option. This file may not be copied, modified, or distributed\n+ *   except according to those terms.\n+ */\n+\n+/* Note: More specifically this lint is largely inspired (aka copied) from *rustc*'s\n+ * [`missing_doc`].\n+ *\n+ * [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n+ */\n+use rustc::hir;\n+use rustc::lint::*;\n+use rustc::ty;\n+use syntax::ast;\n+use syntax::attr::{self, AttrMetaMethods};\n+use syntax::codemap::Span;\n+\n+/// **What it does:** Warns if there is missing doc for any documentable item (public or private).\n+///\n+/// **Why is this bad?** Doc is good. *rustc* has a `MISSING_DOCS` allowed-by-default lint for\n+/// public members, but has no way to enforce documentation of private items. This lint fixes that.\n+///\n+/// **Known problems:** None.\n+declare_lint! {\n+    pub MISSING_DOCS_IN_PRIVATE_ITEMS,\n+    Allow,\n+    \"detects missing documentation for public and private members\"\n+}\n+\n+pub struct MissingDoc {\n+    /// Stack of whether #[doc(hidden)] is set\n+    /// at each level which has lint attributes.\n+    doc_hidden_stack: Vec<bool>,\n+}\n+\n+impl ::std::default::Default for MissingDoc {\n+    fn default() -> MissingDoc {\n+        MissingDoc::new()\n+    }\n+}\n+\n+impl MissingDoc {\n+    pub fn new() -> MissingDoc {\n+        MissingDoc {\n+            doc_hidden_stack: vec![false],\n+        }\n+    }\n+\n+    fn doc_hidden(&self) -> bool {\n+        *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n+    }\n+\n+    fn check_missing_docs_attrs(&self,\n+                               cx: &LateContext,\n+                               attrs: &[ast::Attribute],\n+                               sp: Span,\n+                               desc: &'static str) {\n+        // If we're building a test harness, then warning about\n+        // documentation is probably not really relevant right now.\n+        if cx.sess().opts.test {\n+            return;\n+        }\n+\n+        // `#[doc(hidden)]` disables missing_docs check.\n+        if self.doc_hidden() {\n+            return;\n+        }\n+\n+        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.name() == \"doc\");\n+        if !has_doc {\n+            cx.span_lint(MISSING_DOCS_IN_PRIVATE_ITEMS, sp,\n+                         &format!(\"missing documentation for {}\", desc));\n+        }\n+    }\n+}\n+\n+impl LintPass for MissingDoc {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MISSING_DOCS_IN_PRIVATE_ITEMS]\n+    }\n+}\n+\n+impl LateLintPass for MissingDoc {\n+    fn enter_lint_attrs(&mut self, _: &LateContext, attrs: &[ast::Attribute]) {\n+        let doc_hidden = self.doc_hidden() || attrs.iter().any(|attr| {\n+            attr.check_name(\"doc\") && match attr.meta_item_list() {\n+                None => false,\n+                Some(l) => attr::contains_name(&l[..], \"hidden\"),\n+            }\n+        });\n+        self.doc_hidden_stack.push(doc_hidden);\n+    }\n+\n+    fn exit_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) {\n+        self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n+    }\n+\n+    fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n+        self.check_missing_docs_attrs(cx, &krate.attrs, krate.span, \"crate\");\n+    }\n+\n+    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        let desc = match it.node {\n+            hir::ItemConst(..) => \"a constant\",\n+            hir::ItemEnum(..) => \"an enum\",\n+            hir::ItemFn(..) => \"a function\",\n+            hir::ItemMod(..) => \"a module\",\n+            hir::ItemStatic(..) => \"a static\",\n+            hir::ItemStruct(..) => \"a struct\",\n+            hir::ItemTrait(..) => \"a trait\",\n+            hir::ItemTy(..) => \"a type alias\",\n+            hir::ItemDefaultImpl(..) |\n+            hir::ItemExternCrate(..) |\n+            hir::ItemForeignMod(..) |\n+            hir::ItemImpl(..) |\n+            hir::ItemUse(..) => return,\n+        };\n+\n+        self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext, trait_item: &hir::TraitItem) {\n+        let desc = match trait_item.node {\n+            hir::ConstTraitItem(..) => \"an associated constant\",\n+            hir::MethodTraitItem(..) => \"a trait method\",\n+            hir::TypeTraitItem(..) => \"an associated type\",\n+        };\n+\n+        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n+        // If the method is an impl for a trait, don't doc.\n+        let def_id = cx.tcx.map.local_def_id(impl_item.id);\n+        match cx.tcx.impl_or_trait_items.borrow()\n+                                         .get(&def_id)\n+                                         .expect(\"missing method descriptor?!\")\n+                                         .container() {\n+            ty::TraitContainer(_) => return,\n+            ty::ImplContainer(cid) => {\n+                if cx.tcx.impl_trait_ref(cid).is_some() {\n+                    return\n+                }\n+            }\n+        }\n+\n+        let desc = match impl_item.node {\n+            hir::ImplItemKind::Const(..) => \"an associated constant\",\n+            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Type(_) => \"an associated type\",\n+        };\n+        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+    }\n+\n+    fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n+        if !sf.is_positional() {\n+            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a struct field\");\n+        }\n+    }\n+\n+    fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n+        self.check_missing_docs_attrs(cx, &v.node.attrs, v.span, \"a variant\");\n+    }\n+}"}, {"sha": "e0a6cc28a02efebf622795a84e319886bdbc16d1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -2,6 +2,7 @@\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n #![allow(unknown_lints)]\n+#![allow(missing_docs_in_private_items)]\n \n extern crate rustc_plugin;\n use rustc_plugin::Registry;"}, {"sha": "efe6459f5877b405d2dce0386ee2a5e7a0bf87bb", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -2,6 +2,8 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n+#![allow(unknown_lints, missing_docs_in_private_items)]\n+\n extern crate clippy_lints;\n extern crate getopts;\n extern crate rustc;"}, {"sha": "12fd104312a9f9bea3fa4c06f80e2b02432c5af6", "filename": "tests/compile-fail/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_glob_use.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy, clippy_pedantic)]\n-#![allow(unused_imports, dead_code)]\n+#![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n \n use std::cmp::Ordering::*; //~ ERROR: don't use glob imports for enum variants\n "}, {"sha": "20803c8d0e858c01f068d5a6664c759e9bb28ff5", "filename": "tests/compile-fail/filter_methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffilter_methods.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -2,6 +2,8 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n+#![allow(missing_docs_in_private_items)]\n+\n fn main() {\n     let _: Vec<_> = vec![5; 6].into_iter() //~ERROR called `filter(p).map(q)` on an `Iterator`\n                               .filter(|&x| x == 0)"}, {"sha": "0412dfecac11d2a23d9e2b38730061b80e8fe51a", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -3,7 +3,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "acd86f18ea3d5cb6b1b8213c6807485eda755655", "filename": "tests/compile-fail/missing-doc.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmissing-doc.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -0,0 +1,202 @@\n+/* This file incorporates work covered by the following copyright and\n+ * permission notice:\n+ *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+ *   file at the top-level directory of this distribution and at\n+ *   http://rust-lang.org/COPYRIGHT.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ *   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ *   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ *   option. This file may not be copied, modified, or distributed\n+ *   except according to those terms.\n+ */\n+\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(missing_docs_in_private_items)]\n+\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+#![allow(dead_code)]\n+#![feature(associated_type_defaults)]\n+\n+//! Some garbage docs for the crate here\n+#![doc=\"More garbage\"]\n+\n+type Typedef = String; //~ ERROR: missing documentation for a type alias\n+pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n+\n+struct Foo { //~ ERROR: missing documentation for a struct\n+    a: isize, //~ ERROR: missing documentation for a struct field\n+    b: isize, //~ ERROR: missing documentation for a struct field\n+}\n+\n+pub struct PubFoo { //~ ERROR: missing documentation for a struct\n+    pub a: isize,      //~ ERROR: missing documentation for a struct field\n+    b: isize, //~ ERROR: missing documentation for a struct field\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub struct PubFoo2 {\n+    pub a: isize,\n+    pub c: isize,\n+}\n+\n+mod module_no_dox {} //~ ERROR: missing documentation for a module\n+pub mod pub_module_no_dox {} //~ ERROR: missing documentation for a module\n+\n+/// dox\n+pub fn foo() {}\n+pub fn foo2() {} //~ ERROR: missing documentation for a function\n+fn foo3() {} //~ ERROR: missing documentation for a function\n+#[allow(missing_docs_in_private_items)] pub fn foo4() {}\n+\n+/// dox\n+pub trait A {\n+    /// dox\n+    fn foo(&self);\n+    /// dox\n+    fn foo_with_impl(&self) {}\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+trait B {\n+    fn foo(&self);\n+    fn foo_with_impl(&self) {}\n+}\n+\n+pub trait C { //~ ERROR: missing documentation for a trait\n+    fn foo(&self); //~ ERROR: missing documentation for a trait method\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub trait D {\n+    fn dummy(&self) { }\n+}\n+\n+/// dox\n+pub trait E {\n+    type AssociatedType; //~ ERROR: missing documentation for an associated type\n+    type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n+\n+    /// dox\n+    type DocumentedType;\n+    /// dox\n+    type DocumentedTypeDef = Self;\n+    /// dox\n+    fn dummy(&self) {}\n+}\n+\n+impl Foo {\n+    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    fn bar() {} //~ ERROR: missing documentation for a method\n+}\n+\n+impl PubFoo {\n+    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    /// dox\n+    pub fn foo1() {}\n+    fn foo2() {} //~ ERROR: missing documentation for a method\n+    #[allow(missing_docs_in_private_items)] pub fn foo3() {}\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+trait F {\n+    fn a();\n+    fn b(&self);\n+}\n+\n+// should need to redefine documentation for implementations of traits\n+impl F for Foo {\n+    fn a() {}\n+    fn b(&self) {}\n+}\n+\n+// It sure is nice if doc(hidden) implies allow(missing_docs), and that it\n+// applies recursively\n+#[doc(hidden)]\n+mod a {\n+    pub fn baz() {}\n+    pub mod b {\n+        pub fn baz() {}\n+    }\n+}\n+\n+enum Baz { //~ ERROR: missing documentation for an enum\n+    BazA { //~ ERROR: missing documentation for a variant\n+        a: isize, //~ ERROR: missing documentation for a struct field\n+        b: isize //~ ERROR: missing documentation for a struct field\n+    },\n+    BarB //~ ERROR: missing documentation for a variant\n+}\n+\n+pub enum PubBaz { //~ ERROR: missing documentation for an enum\n+    PubBazA { //~ ERROR: missing documentation for a variant\n+        a: isize, //~ ERROR: missing documentation for a struct field\n+    },\n+}\n+\n+/// dox\n+pub enum PubBaz2 {\n+    /// dox\n+    PubBaz2A {\n+        /// dox\n+        a: isize,\n+    },\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub enum PubBaz3 {\n+    PubBaz3A {\n+        b: isize\n+    },\n+}\n+\n+#[doc(hidden)]\n+pub fn baz() {}\n+\n+\n+const FOO: u32 = 0; //~ ERROR: missing documentation for a const\n+/// dox\n+pub const FOO1: u32 = 0;\n+#[allow(missing_docs_in_private_items)]\n+pub const FOO2: u32 = 0;\n+#[doc(hidden)]\n+pub const FOO3: u32 = 0;\n+pub const FOO4: u32 = 0; //~ ERROR: missing documentation for a const\n+\n+\n+static BAR: u32 = 0; //~ ERROR: missing documentation for a static\n+/// dox\n+pub static BAR1: u32 = 0;\n+#[allow(missing_docs_in_private_items)]\n+pub static BAR2: u32 = 0;\n+#[doc(hidden)]\n+pub static BAR3: u32 = 0;\n+pub static BAR4: u32 = 0; //~ ERROR: missing documentation for a static\n+\n+\n+mod internal_impl { //~ ERROR: missing documentation for a module\n+    /// dox\n+    pub fn documented() {}\n+    pub fn undocumented1() {} //~ ERROR: missing documentation for a function\n+    pub fn undocumented2() {} //~ ERROR: missing documentation for a function\n+    fn undocumented3() {} //~ ERROR: missing documentation for a function\n+    /// dox\n+    pub mod globbed {\n+        /// dox\n+        pub fn also_documented() {}\n+        pub fn also_undocumented1() {} //~ ERROR: missing documentation for a function\n+        fn also_undocumented2() {} //~ ERROR: missing documentation for a function\n+    }\n+}\n+/// dox\n+pub mod public_interface {\n+    pub use internal_impl::documented as foo;\n+    pub use internal_impl::undocumented1 as bar;\n+    pub use internal_impl::{documented, undocumented2};\n+    pub use internal_impl::globbed::*;\n+}\n+\n+fn main() {} //~ ERROR: missing documentation for a function"}, {"sha": "fae87cd97503aa6bc65034fe06fa812ddc8bccae", "filename": "tests/compile-fail/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8ca04a158ba617ae020c73f14792d808ad103/tests%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshadow.rs?ref=36d8ca04a158ba617ae020c73f14792d808ad103", "patch": "@@ -1,8 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(unused_parens, unused_variables)]\n #![deny(clippy, clippy_pedantic)]\n+#![allow(unused_parens, unused_variables, missing_docs_in_private_items)]\n \n fn id<T>(x: T) -> T { x }\n "}]}