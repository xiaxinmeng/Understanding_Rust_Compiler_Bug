{"sha": "d59dcb261ecdc47d8afaac532050dadf86f3c898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OWRjYjI2MWVjZGM0N2Q4YWZhYWM1MzIwNTBkYWRmODZmM2M4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T02:45:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T02:45:35Z"}, "message": "Auto merge of #61361 - estebank:infer-type, r=varkor\n\nAdd more detail to type inference error\n\nWhen encountering code where type inference fails, add more actionable\ninformation:\n\n```\nfn main() {\n    let foo = Vec::new();\n}\n```\n\n```\nerror[E0282]: type annotations needed in `std::vec::Vec<T>`\n  --> $DIR/vector-no-ann.rs:2:16\n   |\nLL |     let foo = Vec::new();\n   |         ---   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n   |         |\n   |         consider giving `foo` a type\n```\n\nFix #25633.", "tree": {"sha": "49c24f0e4cdfb7b6edd7e2e6300e0679b952c28f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c24f0e4cdfb7b6edd7e2e6300e0679b952c28f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59dcb261ecdc47d8afaac532050dadf86f3c898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59dcb261ecdc47d8afaac532050dadf86f3c898", "html_url": "https://github.com/rust-lang/rust/commit/d59dcb261ecdc47d8afaac532050dadf86f3c898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59dcb261ecdc47d8afaac532050dadf86f3c898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6bef0cbd01227bbcf593e8504164120a984fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6bef0cbd01227bbcf593e8504164120a984fdc", "html_url": "https://github.com/rust-lang/rust/commit/3a6bef0cbd01227bbcf593e8504164120a984fdc"}, {"sha": "e420f4410ba44b3e39f54c755f456f4f65406e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/e420f4410ba44b3e39f54c755f456f4f65406e25", "html_url": "https://github.com/rust-lang/rust/commit/e420f4410ba44b3e39f54c755f456f4f65406e25"}], "stats": {"total": 186, "additions": 136, "deletions": 50}, "files": [{"sha": "b3ff25a695f2fd9e1218f207bb999126abeb3293", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 83, "deletions": 18, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -15,17 +15,18 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n+    found_ty: Option<Ty<'tcx>>,\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n-    fn node_matches_type(&mut self, hir_id: HirId) -> bool {\n+    fn node_matches_type(&mut self, hir_id: HirId) -> Option<Ty<'tcx>> {\n         let ty_opt = self.infcx.in_progress_tables.and_then(|tables| {\n             tables.borrow().node_type_opt(hir_id)\n         });\n         match ty_opt {\n             Some(ty) => {\n                 let ty = self.infcx.resolve_vars_if_possible(&ty);\n-                ty.walk().any(|inner_ty| {\n+                if ty.walk().any(|inner_ty| {\n                     inner_ty == self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n                         (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => {\n                             self.infcx\n@@ -35,9 +36,13 @@ impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n                         }\n                         _ => false,\n                     }\n-                })\n+                }) {\n+                    Some(ty)\n+                } else {\n+                    None\n+                }\n             }\n-            None => false,\n+            None => None,\n         }\n     }\n }\n@@ -48,16 +53,21 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &'gcx Local) {\n-        if self.found_local_pattern.is_none() && self.node_matches_type(local.hir_id) {\n+        if let (None, Some(ty)) = (self.found_local_pattern, self.node_matches_type(local.hir_id)) {\n             self.found_local_pattern = Some(&*local.pat);\n+            self.found_ty = Some(ty);\n         }\n         intravisit::walk_local(self, local);\n     }\n \n     fn visit_body(&mut self, body: &'gcx Body) {\n         for argument in &body.arguments {\n-            if self.found_arg_pattern.is_none() && self.node_matches_type(argument.hir_id) {\n+            if let (None, Some(ty)) = (\n+                self.found_arg_pattern,\n+                self.node_matches_type(argument.hir_id),\n+            ) {\n                 self.found_arg_pattern = Some(&*argument.pat);\n+                self.found_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);\n@@ -98,21 +108,68 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let name = self.extract_type_name(&ty, None);\n \n         let mut err_span = span;\n-        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name))];\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,\n             target_ty: ty,\n             hir_map: &self.tcx.hir(),\n             found_local_pattern: None,\n             found_arg_pattern: None,\n+            found_ty: None,\n+        };\n+        let ty_to_string = |ty: Ty<'tcx>| -> String {\n+            let mut s = String::new();\n+            let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+            let ty_vars = self.type_variables.borrow();\n+            let getter = move |ty_vid| {\n+                if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n+                    *ty_vars.var_origin(ty_vid) {\n+                    return Some(name.to_string());\n+                }\n+                None\n+            };\n+            printer.name_resolver = Some(Box::new(&getter));\n+            let _ = ty.print(printer);\n+            s\n         };\n \n         if let Some(body_id) = body_id {\n             let expr = self.tcx.hir().expect_expr_by_hir_id(body_id.hir_id);\n             local_visitor.visit_expr(expr);\n         }\n \n+        // When `name` corresponds to a type argument, show the path of the full type we're\n+        // trying to infer. In the following example, `ty_msg` contains\n+        // \" in `std::result::Result<i32, E>`\":\n+        // ```\n+        // error[E0282]: type annotations needed for `std::result::Result<i32, E>`\n+        //  --> file.rs:L:CC\n+        //   |\n+        // L |     let b = Ok(4);\n+        //   |         -   ^^ cannot infer type for `E` in `std::result::Result<i32, E>`\n+        //   |         |\n+        //   |         consider giving `b` the explicit type `std::result::Result<i32, E>`, where\n+        //   |         the type parameter `E` is specified\n+        // ```\n+        let (ty_msg, suffix) = match &local_visitor.found_ty {\n+            Some(ty) if &ty.to_string() != \"_\" && name == \"_\" => {\n+                let ty = ty_to_string(ty);\n+                (format!(\" for `{}`\", ty),\n+                 format!(\"the explicit type `{}`, with the type parameters specified\", ty))\n+            }\n+            Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n+                let ty = ty_to_string(ty);\n+                (format!(\" for `{}`\", ty),\n+                 format!(\n+                     \"the explicit type `{}`, where the type parameter `{}` is specified\",\n+                    ty,\n+                    name,\n+                 ))\n+            }\n+            _ => (String::new(), \"a type\".to_owned()),\n+        };\n+        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name))];\n+\n         if let Some(pattern) = local_visitor.found_arg_pattern {\n             err_span = pattern.span;\n             // We don't want to show the default label for closures.\n@@ -128,31 +185,39 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // After clearing, it looks something like this:\n             // ```\n             // let x = |_| {  };\n-            //          ^ consider giving this closure parameter a type\n+            //          ^ consider giving this closure parameter the type `[_; 0]`\n+            //            with the type parameter `_` specified\n             // ```\n             labels.clear();\n-            labels.push(\n-                (pattern.span, \"consider giving this closure parameter a type\".to_owned()));\n+            labels.push((\n+                pattern.span,\n+                format!(\"consider giving this closure parameter {}\", suffix),\n+            ));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.compiler_desugaring_kind() {\n-                    None => labels.push((pattern.span,\n-                                         format!(\"consider giving `{}` a type\", simple_ident))),\n+                    None => labels.push((\n+                        pattern.span,\n+                        format!(\"consider giving `{}` {}\", simple_ident, suffix),\n+                    )),\n                     Some(CompilerDesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n                         \"the element type for this iterator is not specified\".to_owned(),\n                     )),\n                     _ => {}\n                 }\n             } else {\n-                labels.push((pattern.span, \"consider giving the pattern a type\".to_owned()));\n+                labels.push((pattern.span, format!(\"consider giving this pattern {}\", suffix)));\n             }\n-        }\n+        };\n \n-        let mut err = struct_span_err!(self.tcx.sess,\n-                                       err_span,\n-                                       E0282,\n-                                       \"type annotations needed\");\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            err_span,\n+            E0282,\n+            \"type annotations needed{}\",\n+            ty_msg,\n+        );\n \n         for (target_span, label_message) in labels {\n             err.span_label(target_span, label_message);"}, {"sha": "513ffd69ccaadfc58309b79de33da5cb3ec21e16", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -483,7 +483,17 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             ty::FnPtr(ref bare_fn) => {\n                 p!(print(bare_fn))\n             }\n-            ty::Infer(infer_ty) => p!(write(\"{}\", infer_ty)),\n+            ty::Infer(infer_ty) => {\n+                if let ty::TyVar(ty_vid) = infer_ty {\n+                    if let Some(name) = self.infer_ty_name(ty_vid) {\n+                        p!(write(\"{}\", name))\n+                    } else {\n+                        p!(write(\"{}\", infer_ty))\n+                    }\n+                } else {\n+                    p!(write(\"{}\", infer_ty))\n+                }\n+            },\n             ty::Error => p!(write(\"[type error]\")),\n             ty::Param(ref param_ty) => p!(write(\"{}\", param_ty)),\n             ty::Bound(debruijn, bound_ty) => {\n@@ -681,6 +691,10 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n         Ok(self)\n     }\n \n+    fn infer_ty_name(&self, _: ty::TyVid) -> Option<String> {\n+        None\n+    }\n+\n     fn pretty_print_dyn_existential(\n         mut self,\n         predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n@@ -931,6 +945,8 @@ pub struct FmtPrinterData<'a, 'gcx, 'tcx, F> {\n     binder_depth: usize,\n \n     pub region_highlight_mode: RegionHighlightMode,\n+\n+    pub name_resolver: Option<Box<&'a dyn Fn(ty::sty::TyVid) -> Option<String>>>,\n }\n \n impl<F> Deref for FmtPrinter<'a, 'gcx, 'tcx, F> {\n@@ -957,6 +973,7 @@ impl<F> FmtPrinter<'a, 'gcx, 'tcx, F> {\n             region_index: 0,\n             binder_depth: 0,\n             region_highlight_mode: RegionHighlightMode::default(),\n+            name_resolver: None,\n         }))\n     }\n }\n@@ -1206,6 +1223,10 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n }\n \n impl<F: fmt::Write> PrettyPrinter<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n+    fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n+        self.0.name_resolver.as_ref().and_then(|func| func(id))\n+    }\n+\n     fn print_value_path(\n         mut self,\n         def_id: DefId,"}, {"sha": "86128ed94bd71f5d90ea8029714152b239143682", "filename": "src/test/ui/issues/issue-12187-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -4,5 +4,5 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "3ea15439df25a69276b8239ea62fe125587282e2", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&T`\n   --> $DIR/issue-12187-1.rs:6:10\n    |\n LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the explicit type `&T`, with the type parameters specified\n \n error: aborting due to previous error\n "}, {"sha": "080a6206be76df188986bb11f8c12b367e2f7ebf", "filename": "src/test/ui/issues/issue-12187-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -4,5 +4,5 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "a5e65c65beb2fe6b059a635330bea9468d0bf030", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&T`\n   --> $DIR/issue-12187-2.rs:6:10\n    |\n LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the explicit type `&T`, with the type parameters specified\n \n error: aborting due to previous error\n "}, {"sha": "ce16f0f58eaf0cacff150cf9b4c1a18237cfa26a", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `B<T>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n    |         ---   ^ cannot infer type for `T`\n    |         |\n-   |         consider giving `foo` a type\n+   |         consider giving `foo` the explicit type `B<T>`, where the type parameter `T` is specified\n \n error: aborting due to previous error\n "}, {"sha": "c6c3f32dfe7d8f3a8a8f8fe6a578dd16acc9bb24", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&(_,)`\n   --> $DIR/issue-20261.rs:4:11\n    |\n LL |     for (ref i,) in [].iter() {"}, {"sha": "12b2eb48e7eaa2987d341590f80595f040d88ba6", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `Expr<'_, VAR>`\n   --> $DIR/issue-23046.rs:17:15\n    |\n LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter a type\n+   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n \n error: aborting due to previous error\n "}, {"sha": "0b890b573da131ad77cba13b3d3642f82b8fee92", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();\n-   |         -------- consider giving the pattern a type\n+   |         -------- consider giving this pattern the explicit type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`, where the type parameter `T` is specified\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n    |                 ^^^ cannot infer type for `T`"}, {"sha": "59be0f3be11e6a2d3a408778bbb3af3a6e9b0999", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&[_; 0]`\n   --> $DIR/issue-7813.rs:2:13\n    |\n LL |     let v = &[];\n    |         -   ^^^ cannot infer type\n    |         |\n-   |         consider giving `v` a type\n+   |         consider giving `v` the explicit type `&[_; 0]`, with the type parameters specified\n \n error: aborting due to previous error\n "}, {"sha": "e33f23c64dbe14a33fcea4afa6d6236bb07d1ca4", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -22,7 +22,7 @@ impl Foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n     x.foo();\n }\n "}, {"sha": "b1bd749bef4a254e9f121ffcfcd27e61e4ce8f30", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n    |         -----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "04c2870d8329740c841dcfda86e97ce2eb01f8ac", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::option::Option<_>`\n   --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n    |\n LL |     let x: Option<_> = None;\n-   |         - consider giving `x` a type\n+   |         - consider giving `x` the explicit type `std::option::Option<_>`, where the type parameter `T` is specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n    |     ^^^^^^^^^^ cannot infer type for `T`\n    |"}, {"sha": "8edec6e0ea3fd0a662a705e601d15ffae563f783", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/cannot_infer_local_or_array.rs:2:13\n    |\n LL |     let x = [];\n    |         -   ^^ cannot infer type\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the explicit type `[_; 0]`, with the type parameters specified\n \n error: aborting due to previous error\n "}, {"sha": "6524bf5dd2bc52c81b4481cafd6179fc17e8f269", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n    |         -   ^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "6d1ef240da60c03cb3461fa84deab1c7646cf603", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `(std::vec::Vec<T>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );\n    |         -----    ^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the explicit type `(std::vec::Vec<T>,)`, where the type parameter `T` is specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "18af3dc640d1c9108d00ec31812d15992c1b2d41", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::option::Option<T>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;\n-   |         ------------ consider giving `closure0` a type\n+   |         ------------ consider giving `closure0` the explicit type `std::option::Option<T>`, with the type parameters specified\n ...\n LL |                         return c();\n    |                                ^^^ cannot infer type"}, {"sha": "1f11d9c8dffc7e044eecf357059b4b7b77c8a744", "filename": "src/test/ui/vector-no-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.rs?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "28100d7c89e71e6e8e091e5617a272846bd29d2b", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59dcb261ecdc47d8afaac532050dadf86f3c898/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=d59dcb261ecdc47d8afaac532050dadf86f3c898", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<T>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n    |         ----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `_foo` a type\n+   |         consider giving `_foo` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n \n error: aborting due to previous error\n "}]}