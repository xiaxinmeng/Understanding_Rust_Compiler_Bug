{"sha": "d4bf67dde638fdeea4361daf16bee421d479628e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmY2N2RkZTYzOGZkZWVhNDM2MWRhZjE2YmVlNDIxZDQ3OTYyOGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-16T02:16:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-16T02:16:13Z"}, "message": "Translate record extension.", "tree": {"sha": "9ed7ccd2ec3a948f9777d8867b47925d4bd06411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed7ccd2ec3a948f9777d8867b47925d4bd06411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bf67dde638fdeea4361daf16bee421d479628e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf67dde638fdeea4361daf16bee421d479628e", "html_url": "https://github.com/rust-lang/rust/commit/d4bf67dde638fdeea4361daf16bee421d479628e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf67dde638fdeea4361daf16bee421d479628e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "url": "https://api.github.com/repos/rust-lang/rust/commits/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "html_url": "https://github.com/rust-lang/rust/commit/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "544075faf15c5f25746ef23f32bf870d080b1751", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4bf67dde638fdeea4361daf16bee421d479628e/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d4bf67dde638fdeea4361daf16bee421d479628e/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=d4bf67dde638fdeea4361daf16bee421d479628e", "patch": "@@ -519,6 +519,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         readalias.rs \\\n                         rec.rs \\\n                         rec-auto.rs \\\n+                        rec-extend.rs \\\n                         rec-tup.rs \\\n                         return-nil.rs \\\n                         simple-obj.rs \\"}, {"sha": "7d3f9997437f92a62fef89ab77ff5a2a7c135523", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d4bf67dde638fdeea4361daf16bee421d479628e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bf67dde638fdeea4361daf16bee421d479628e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d4bf67dde638fdeea4361daf16bee421d479628e", "patch": "@@ -2998,9 +2998,6 @@ fn trans_vec(@block_ctxt cx, vec[@ast.expr] args,\n fn trans_rec(@block_ctxt cx, vec[ast.field] fields,\n              option.t[@ast.expr] base, &ast.ann ann) -> result {\n \n-    // FIXME: handle presence of a nonempty base.\n-    check (base == none[@ast.expr]);\n-\n     auto bcx = cx;\n     auto t = node_ann_type(bcx.fcx.ccx, ann);\n     auto llty = type_of(bcx.fcx.ccx, t);\n@@ -3011,13 +3008,44 @@ fn trans_rec(@block_ctxt cx, vec[ast.field] fields,\n     find_scope_cx(cx).cleanups += clean(bind drop_ty(_, rec_val, t));\n     let int i = 0;\n \n-    for (ast.field f in fields) {\n-        auto e_ty = ty.expr_ty(f.expr);\n-        auto src_res = trans_expr(bcx, f.expr);\n-        bcx = src_res.bcx;\n+    auto base_val = C_nil();\n+\n+    alt (base) {\n+        case (none[@ast.expr]) { }\n+        case (some[@ast.expr](?bexp)) {\n+            auto base_res = trans_expr(bcx, bexp);\n+            bcx = base_res.bcx;\n+            base_val = base_res.val;\n+        }\n+    }\n+\n+    let vec[ty.field] ty_fields = vec();\n+    alt (t.struct) {\n+        case (ty.ty_rec(?flds)) { ty_fields = flds; }\n+    }\n+\n+    for (ty.field tf in ty_fields) {\n+        auto e_ty = tf.ty;\n         auto dst_res = GEP_tup_like(bcx, t, rec_val, vec(0, i));\n         bcx = dst_res.bcx;\n-        bcx = copy_ty(src_res.bcx, INIT, dst_res.val, src_res.val, e_ty).bcx;\n+\n+        auto expr_provided = false;\n+        auto src_res = res(bcx, C_nil());\n+\n+        for (ast.field f in fields) {\n+            if (_str.eq(f.ident, tf.ident)) {\n+                expr_provided = true;\n+                src_res = trans_expr(bcx, f.expr);\n+            }\n+        }\n+        if (!expr_provided) {\n+            src_res = GEP_tup_like(bcx, t, base_val, vec(0, i));\n+            src_res = res(src_res.bcx,\n+                          load_scalar_or_boxed(bcx, src_res.val, e_ty));\n+        }\n+\n+        bcx = src_res.bcx;\n+        bcx = copy_ty(bcx, INIT, dst_res.val, src_res.val, e_ty).bcx;\n         i += 1;\n     }\n     ret res(bcx, rec_val);"}]}