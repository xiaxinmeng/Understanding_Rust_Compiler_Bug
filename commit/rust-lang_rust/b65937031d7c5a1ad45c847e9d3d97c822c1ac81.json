{"sha": "b65937031d7c5a1ad45c847e9d3d97c822c1ac81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTkzNzAzMWQ3YzVhMWFkNDVjODQ3ZTlkM2Q5N2M4MjJjMWFjODE=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-17T09:23:14Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-18T08:36:21Z"}, "message": "inline inner function of inlining methods", "tree": {"sha": "feb4134c770cf2bd96b7d31c60fc7491646ff4ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feb4134c770cf2bd96b7d31c60fc7491646ff4ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65937031d7c5a1ad45c847e9d3d97c822c1ac81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65937031d7c5a1ad45c847e9d3d97c822c1ac81", "html_url": "https://github.com/rust-lang/rust/commit/b65937031d7c5a1ad45c847e9d3d97c822c1ac81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65937031d7c5a1ad45c847e9d3d97c822c1ac81/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d5261c696bac17cecfb029f8578ce41d66ef13", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d5261c696bac17cecfb029f8578ce41d66ef13", "html_url": "https://github.com/rust-lang/rust/commit/53d5261c696bac17cecfb029f8578ce41d66ef13"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "546edef7f5753536c8cc9d38b055679453cd0c8e", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b65937031d7c5a1ad45c847e9d3d97c822c1ac81/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65937031d7c5a1ad45c847e9d3d97c822c1ac81/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=b65937031d7c5a1ad45c847e9d3d97c822c1ac81", "patch": "@@ -82,6 +82,7 @@ unsafe impl<T: Sync> Sync for Iter<'_, T> {}\n unsafe impl<T: Sync> Send for Iter<'_, T> {}\n \n impl<'a, T> Iter<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n         let ptr = slice.as_ptr();\n         // SAFETY: Similar to `IterMut::new`.\n@@ -200,6 +201,7 @@ unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n unsafe impl<T: Send> Send for IterMut<'_, T> {}\n \n impl<'a, T> IterMut<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T]) -> Self {\n         let ptr = slice.as_mut_ptr();\n         // SAFETY: There are several things here:\n@@ -330,6 +332,7 @@ where\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> Split<'a, T, P> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], pred: P) -> Self {\n         Self { v: slice, pred, finished: false }\n     }\n@@ -974,6 +977,7 @@ where\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitN<'a, T, P> {\n+    #[inline]\n     pub(super) fn new(s: Split<'a, T, P>, n: usize) -> Self {\n         Self { inner: GenericSplitN { iter: s, count: n } }\n     }\n@@ -1006,6 +1010,7 @@ where\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> RSplitN<'a, T, P> {\n+    #[inline]\n     pub(super) fn new(s: RSplit<'a, T, P>, n: usize) -> Self {\n         Self { inner: GenericSplitN { iter: s, count: n } }\n     }\n@@ -1037,6 +1042,7 @@ where\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitNMut<'a, T, P> {\n+    #[inline]\n     pub(super) fn new(s: SplitMut<'a, T, P>, n: usize) -> Self {\n         Self { inner: GenericSplitN { iter: s, count: n } }\n     }\n@@ -1069,6 +1075,7 @@ where\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> RSplitNMut<'a, T, P> {\n+    #[inline]\n     pub(super) fn new(s: RSplitMut<'a, T, P>, n: usize) -> Self {\n         Self { inner: GenericSplitN { iter: s, count: n } }\n     }\n@@ -1103,6 +1110,7 @@ pub struct Windows<'a, T: 'a> {\n }\n \n impl<'a, T: 'a> Windows<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], size: usize) -> Self {\n         Self { v: slice, size }\n     }\n@@ -1241,6 +1249,7 @@ pub struct Chunks<'a, T: 'a> {\n }\n \n impl<'a, T: 'a> Chunks<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], size: usize) -> Self {\n         Self { v: slice, chunk_size: size }\n     }\n@@ -1401,6 +1410,7 @@ pub struct ChunksMut<'a, T: 'a> {\n }\n \n impl<'a, T: 'a> ChunksMut<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T], size: usize) -> Self {\n         Self { v: slice, chunk_size: size }\n     }\n@@ -1561,6 +1571,7 @@ pub struct ChunksExact<'a, T: 'a> {\n }\n \n impl<'a, T> ChunksExact<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {\n         let rem = slice.len() % chunk_size;\n         let fst_len = slice.len() - rem;\n@@ -1709,6 +1720,7 @@ pub struct ChunksExactMut<'a, T: 'a> {\n }\n \n impl<'a, T> ChunksExactMut<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T], chunk_size: usize) -> Self {\n         let rem = slice.len() % chunk_size;\n         let fst_len = slice.len() - rem;\n@@ -1849,6 +1861,7 @@ pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n }\n \n impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n         let num_windows = slice.len().saturating_sub(N - 1);\n         Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }\n@@ -1960,6 +1973,7 @@ pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n }\n \n impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n         let len = slice.len() / N;\n         let (fst, snd) = slice.split_at(len * N);\n@@ -2077,6 +2091,7 @@ pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n }\n \n impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T]) -> Self {\n         let len = slice.len() / N;\n         let (fst, snd) = slice.split_at_mut(len * N);\n@@ -2185,6 +2200,7 @@ pub struct RChunks<'a, T: 'a> {\n }\n \n impl<'a, T: 'a> RChunks<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], size: usize) -> Self {\n         Self { v: slice, chunk_size: size }\n     }\n@@ -2341,6 +2357,7 @@ pub struct RChunksMut<'a, T: 'a> {\n }\n \n impl<'a, T: 'a> RChunksMut<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T], size: usize) -> Self {\n         Self { v: slice, chunk_size: size }\n     }\n@@ -2498,6 +2515,7 @@ pub struct RChunksExact<'a, T: 'a> {\n }\n \n impl<'a, T> RChunksExact<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {\n         let rem = slice.len() % chunk_size;\n         // SAFETY: 0 <= rem <= slice.len() by construction above\n@@ -2650,6 +2668,7 @@ pub struct RChunksExactMut<'a, T: 'a> {\n }\n \n impl<'a, T> RChunksExactMut<'a, T> {\n+    #[inline]\n     pub(super) fn new(slice: &'a mut [T], chunk_size: usize) -> Self {\n         let rem = slice.len() % chunk_size;\n         // SAFETY: 0 <= rem <= slice.len() by construction above"}]}