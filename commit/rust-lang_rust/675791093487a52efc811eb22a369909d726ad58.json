{"sha": "675791093487a52efc811eb22a369909d726ad58", "node_id": "C_kwDOAAsO6NoAKDY3NTc5MTA5MzQ4N2E1MmVmYzgxMWViMjJhMzY5OTA5ZDcyNmFkNTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-18T21:17:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-19T11:10:55Z"}, "message": "fix: Diagnose using `derive` on non-adt items", "tree": {"sha": "759b97950a06c0ac7fcfb286de65c375f1a39366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759b97950a06c0ac7fcfb286de65c375f1a39366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675791093487a52efc811eb22a369909d726ad58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675791093487a52efc811eb22a369909d726ad58", "html_url": "https://github.com/rust-lang/rust/commit/675791093487a52efc811eb22a369909d726ad58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675791093487a52efc811eb22a369909d726ad58/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966cae384f1ca4d62a9aa619f1e74e1161ad7236", "url": "https://api.github.com/repos/rust-lang/rust/commits/966cae384f1ca4d62a9aa619f1e74e1161ad7236", "html_url": "https://github.com/rust-lang/rust/commit/966cae384f1ca4d62a9aa619f1e74e1161ad7236"}], "stats": {"total": 126, "additions": 99, "deletions": 27}, "files": [{"sha": "5c4104baaef2b1b9bb2e8663897d767b8acae8e4", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -32,6 +32,7 @@ diagnostics![\n     BreakOutsideOfLoop,\n     InactiveCode,\n     IncorrectCase,\n+    InvalidDeriveTarget,\n     MacroError,\n     MismatchedArgCount,\n     MissingFields,\n@@ -98,6 +99,11 @@ pub struct UnimplementedBuiltinMacro {\n     pub node: InFile<SyntaxNodePtr>,\n }\n \n+#[derive(Debug)]\n+pub struct InvalidDeriveTarget {\n+    pub node: InFile<SyntaxNodePtr>,\n+}\n+\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub field: InFile<AstPtr<ast::RecordExprField>>,"}, {"sha": "7a1b4fd31c8c0d8257a1448bec886a20e81d382d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -83,10 +83,10 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n         AddReferenceHere, AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, IncorrectCase,\n-        MacroError, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n-        MissingUnsafe, NoSuchField, RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap,\n-        UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall,\n-        UnresolvedModule, UnresolvedProcMacro,\n+        InvalidDeriveTarget, MacroError, MismatchedArgCount, MissingFields, MissingMatchArms,\n+        MissingOkOrSomeInTailExpr, MissingUnsafe, NoSuchField, RemoveThisSemicolon,\n+        ReplaceFilterMapNextWithFindMap, UnimplementedBuiltinMacro, UnresolvedExternCrate,\n+        UnresolvedImport, UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope, TypeInfo},\n@@ -654,6 +654,21 @@ impl Module {\n                         .into(),\n                     );\n                 }\n+                DefDiagnosticKind::InvalidDeriveTarget { ast, id } => {\n+                    let node = ast.to_node(db.upcast());\n+                    let derive = node.attrs().nth(*id as usize);\n+                    match derive {\n+                        Some(derive) => {\n+                            acc.push(\n+                                InvalidDeriveTarget {\n+                                    node: ast.with_value(SyntaxNodePtr::from(AstPtr::new(&derive))),\n+                                }\n+                                .into(),\n+                            );\n+                        }\n+                        None => stdx::never!(\"derive diagnostic on item without derive attribute\"),\n+                    }\n+                }\n             }\n         }\n         for decl in self.declarations(db) {"}, {"sha": "343e189046e0e4a69c1b16299634c14823f916ea", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -1055,13 +1055,10 @@ impl DefCollector<'_> {\n                         &resolver,\n                         &mut |_err| (),\n                     );\n-                    match call_id {\n-                        Ok(Ok(call_id)) => {\n-                            resolved.push((directive.module_id, call_id, directive.depth));\n-                            res = ReachedFixedPoint::No;\n-                            return false;\n-                        }\n-                        Err(UnresolvedMacro { .. }) | Ok(Err(_)) => {}\n+                    if let Ok(Ok(call_id)) = call_id {\n+                        resolved.push((directive.module_id, call_id, directive.depth));\n+                        res = ReachedFixedPoint::No;\n+                        return false;\n                     }\n                 }\n                 MacroDirectiveKind::Derive { ast_id, derive_attr } => {\n@@ -1072,19 +1069,16 @@ impl DefCollector<'_> {\n                         self.def_map.krate,\n                         &resolver,\n                     );\n-                    match call_id {\n-                        Ok(call_id) => {\n-                            self.def_map.modules[directive.module_id].scope.add_derive_macro_invoc(\n-                                ast_id.ast_id,\n-                                call_id,\n-                                *derive_attr,\n-                            );\n+                    if let Ok(call_id) = call_id {\n+                        self.def_map.modules[directive.module_id].scope.add_derive_macro_invoc(\n+                            ast_id.ast_id,\n+                            call_id,\n+                            *derive_attr,\n+                        );\n \n-                            resolved.push((directive.module_id, call_id, directive.depth));\n-                            res = ReachedFixedPoint::No;\n-                            return false;\n-                        }\n-                        Err(UnresolvedMacro { .. }) => {}\n+                        resolved.push((directive.module_id, call_id, directive.depth));\n+                        res = ReachedFixedPoint::No;\n+                        return false;\n                     }\n                 }\n                 MacroDirectiveKind::Attr { ast_id, mod_item, attr } => {\n@@ -1125,16 +1119,19 @@ impl DefCollector<'_> {\n                         if expander.is_derive()\n                     ) {\n                         // Resolved to `#[derive]`\n-                        let file_id = ast_id.ast_id.file_id;\n                         let item_tree = self.db.file_item_tree(file_id);\n \n                         let ast_id: FileAstId<ast::Item> = match *mod_item {\n                             ModItem::Struct(it) => item_tree[it].ast_id.upcast(),\n                             ModItem::Union(it) => item_tree[it].ast_id.upcast(),\n                             ModItem::Enum(it) => item_tree[it].ast_id.upcast(),\n                             _ => {\n-                                // Cannot use derive on this item.\n-                                // FIXME: diagnose\n+                                let diag = DefDiagnostic::invalid_derive_target(\n+                                    directive.module_id,\n+                                    ast_id.ast_id,\n+                                    attr.id,\n+                                );\n+                                self.def_map.diagnostics.push(diag);\n                                 res = ReachedFixedPoint::No;\n                                 return false;\n                             }\n@@ -1194,7 +1191,6 @@ impl DefCollector<'_> {\n                                         ),\n                                     );\n \n-                                    let file_id = ast_id.ast_id.file_id;\n                                     let item_tree = self.db.file_item_tree(file_id);\n                                     return recollect_without(self, &item_tree);\n                                 }"}, {"sha": "1eb384473109baa8c0cf030d7088138d50ef435e", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -6,6 +6,7 @@ use la_arena::Idx;\n use syntax::ast;\n \n use crate::{\n+    attr::AttrId,\n     item_tree::{self, ItemTreeId},\n     nameres::LocalModuleId,\n     path::ModPath,\n@@ -29,6 +30,8 @@ pub enum DefDiagnosticKind {\n     MacroError { ast: MacroCallKind, message: String },\n \n     UnimplementedBuiltinMacro { ast: AstId<ast::Macro> },\n+\n+    InvalidDeriveTarget { ast: AstId<ast::Item>, id: u32 },\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -102,4 +105,15 @@ impl DefDiagnostic {\n     ) -> Self {\n         Self { in_module: container, kind: DefDiagnosticKind::UnimplementedBuiltinMacro { ast } }\n     }\n+\n+    pub(super) fn invalid_derive_target(\n+        container: LocalModuleId,\n+        ast: AstId<ast::Item>,\n+        id: AttrId,\n+    ) -> Self {\n+        Self {\n+            in_module: container,\n+            kind: DefDiagnosticKind::InvalidDeriveTarget { ast, id: id.ast_index },\n+        }\n+    }\n }"}, {"sha": "556d2dc0cbd02d8958b792b61b2070ca44230874", "filename": "crates/ide_diagnostics/src/handlers/invalid_derive_target.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -0,0 +1,39 @@\n+use crate::{Diagnostic, DiagnosticsContext, Severity};\n+\n+// Diagnostic: invalid-derive-target\n+//\n+// This diagnostic is shown when the derive attribute is used on an item other than a `struct`,\n+// `enum` or `union`.\n+pub(crate) fn invalid_derive_target(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::InvalidDeriveTarget,\n+) -> Diagnostic {\n+    // Use more accurate position if available.\n+    let display_range = ctx.sema.diagnostics_display_range(d.node.clone()).range;\n+\n+    Diagnostic::new(\n+        \"invalid-derive-target\",\n+        \"`derive` may only be applied to `struct`s, `enum`s and `union`s\",\n+        display_range,\n+    )\n+    .severity(Severity::Error)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_diagnostics;\n+\n+    #[test]\n+    fn fails_on_function() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore:derive\n+mod __ {\n+    #[derive()]\n+  //^^^^^^^^^^^ error: `derive` may only be applied to `struct`s, `enum`s and `union`s\n+    fn main() {}\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "5070f2400368f66dbd25373efeeb7b4c1e02315f", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/675791093487a52efc811eb22a369909d726ad58/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675791093487a52efc811eb22a369909d726ad58/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=675791093487a52efc811eb22a369909d726ad58", "patch": "@@ -28,6 +28,7 @@ mod handlers {\n     pub(crate) mod break_outside_of_loop;\n     pub(crate) mod inactive_code;\n     pub(crate) mod incorrect_case;\n+    pub(crate) mod invalid_derive_target;\n     pub(crate) mod macro_error;\n     pub(crate) mod mismatched_arg_count;\n     pub(crate) mod missing_fields;\n@@ -195,6 +196,7 @@ pub fn diagnostics(\n             AnyDiagnostic::UnresolvedMacroCall(d) => handlers::unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::UnresolvedModule(d) => handlers::unresolved_module::unresolved_module(&ctx, &d),\n             AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n+            AnyDiagnostic::InvalidDeriveTarget(d) => handlers::invalid_derive_target::invalid_derive_target(&ctx, &d),\n \n             AnyDiagnostic::InactiveCode(d) => match handlers::inactive_code::inactive_code(&ctx, &d) {\n                 Some(it) => it,"}]}