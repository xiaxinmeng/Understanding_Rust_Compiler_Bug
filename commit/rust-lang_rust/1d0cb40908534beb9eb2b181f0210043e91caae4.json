{"sha": "1d0cb40908534beb9eb2b181f0210043e91caae4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMGNiNDA5MDg1MzRiZWI5ZWIyYjE4MWYwMjEwMDQzZTkxY2FhZTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-14T16:43:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-18T15:10:25Z"}, "message": "rustc: remove leftover lifetimes with no bounds from where clauses.", "tree": {"sha": "8335495b2cc9a135d7b123babf711573ddd6915c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8335495b2cc9a135d7b123babf711573ddd6915c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d0cb40908534beb9eb2b181f0210043e91caae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0cb40908534beb9eb2b181f0210043e91caae4", "html_url": "https://github.com/rust-lang/rust/commit/1d0cb40908534beb9eb2b181f0210043e91caae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d0cb40908534beb9eb2b181f0210043e91caae4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25b466a887d8ceaef533e542431fdec7e70f10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25b466a887d8ceaef533e542431fdec7e70f10f", "html_url": "https://github.com/rust-lang/rust/commit/b25b466a887d8ceaef533e542431fdec7e70f10f"}], "stats": {"total": 35, "additions": 7, "deletions": 28}, "files": [{"sha": "2de52e0cfc5c37097c1ab2b2267ec6afec7ae22d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -207,8 +207,6 @@ macro_rules! define_dep_nodes {\n             pub fn new<'a, 'tcx>(tcx: TyCtxt<'tcx>,\n                                        dep: DepConstructor<'tcx>)\n                                        -> DepNode\n-                where 'tcx,\n-                      'tcx\n             {\n                 match dep {\n                     $("}, {"sha": "e55ce345bd9d3f8598f500078fd55670a3d51765", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -48,7 +48,6 @@ pub fn super_lattice_tys<'a, 'tcx, L>(\n ) -> RelateResult<'tcx, Ty<'tcx>>\n where\n     L: LatticeDir<'a, 'tcx>,\n-    'tcx,\n {\n     debug!(\"{}.lattice_tys({:?}, {:?})\",\n            this.tag(),"}, {"sha": "0e22db2b9f13d5d2576ffe9bd90f0899eb7301ac", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -697,7 +697,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError>\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>>,\n-        'tcx,\n     {\n         let mut result = EvaluatedToOk;\n         for obligation in predicates {"}, {"sha": "1684dac490f3c142b8c966513053df33bcf064de", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -511,7 +511,6 @@ fn decode_tagged<'a, 'tcx, D, T, V>(decoder: &mut D,\n     where T: Decodable + Eq + ::std::fmt::Debug,\n           V: Decodable,\n           D: DecoderWithPosition,\n-          'tcx,\n {\n     let start_pos = decoder.position();\n "}, {"sha": "8ed4a556ea97c96166f5d389c3cfe7599096806b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -1088,7 +1088,7 @@ impl TypeAliasBounds {\n \n         // We use a HIR visitor to walk the type.\n         use rustc::hir::intravisit::{self, Visitor};\n-        struct WalkAssocTypes<'a, 'db> where 'db {\n+        struct WalkAssocTypes<'a, 'db> {\n             err: &'a mut DiagnosticBuilder<'db>\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {"}, {"sha": "4564f220253355458f4e545ed4793e7fe694db9e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -293,10 +293,7 @@ impl<'a> CrateLoader<'a> {\n         &mut self,\n         locate_ctxt: &mut locator::Context<'b>,\n         path_kind: PathKind,\n-    ) -> Option<(LoadResult, Option<Library>)>\n-    where\n-        'a\n-    {\n+    ) -> Option<(LoadResult, Option<Library>)> {\n         // Use a new locator Context so trying to load a proc macro doesn't affect the error\n         // message we emit\n         let mut proc_macro_locator = locate_ctxt.clone();"}, {"sha": "288d69f097d3d0a2610a77b12d87b1954db6aca3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -1693,7 +1693,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn move_path_closest_to<'a>(\n         &mut self,\n         place: &'a Place<'tcx>,\n-    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> where 'cx {\n+    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> {\n         let mut last_prefix = place;\n         for prefix in self.prefixes(place, PrefixSet::All) {\n             if let Some(mpi) = self.move_path_for_place(prefix) {"}, {"sha": "f1d568f0cf24c85a29e57c5c2080a6f9e9a0fa5f", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -58,12 +58,7 @@ pub(super) fn trace(\n }\n \n /// Contextual state for the type-liveness generator.\n-struct LivenessContext<'me, 'typeck, 'flow, 'tcx>\n-where\n-    'typeck,\n-    'flow,\n-    'tcx,\n-{\n+struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     /// Current type-checker, giving us our inference context etc.\n     typeck: &'me mut TypeChecker<'typeck, 'tcx>,\n \n@@ -96,12 +91,7 @@ struct DropData<'tcx> {\n     region_constraint_data: Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>,\n }\n \n-struct LivenessResults<'me, 'typeck, 'flow, 'tcx>\n-where\n-    'typeck,\n-    'flow,\n-    'tcx,\n-{\n+struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     cx: LivenessContext<'me, 'typeck, 'flow, 'tcx>,\n \n     /// Set of points that define the current local."}, {"sha": "aa576030ef1dd93a072839c5b07eff518c6abe72", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -1691,7 +1691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         bindings: impl IntoIterator<Item = &'b Binding<'tcx>>,\n-    ) where 'tcx {\n+    ) {\n         debug!(\"bind_matched_candidate_for_arm_body(block={:?})\", block);\n \n         let re_erased = self.hir.tcx().lifetimes.re_erased;"}, {"sha": "84e23734be0e1a347cbc75b04833c3d4a15aa287", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -392,9 +392,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn is_non_exhaustive_variant<'p>(&self, pattern: &'p Pattern<'tcx>) -> bool\n-        where 'a\n-    {\n+    fn is_non_exhaustive_variant<'p>(&self, pattern: &'p Pattern<'tcx>) -> bool {\n         match *pattern.kind {\n             PatternKind::Variant { adt_def, variant_index, .. } => {\n                 let ref variant = adt_def.variants[variant_index];"}, {"sha": "0337f3f1da7b028e8be582485d88f2f3b1ac886c", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0cb40908534beb9eb2b181f0210043e91caae4/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=1d0cb40908534beb9eb2b181f0210043e91caae4", "patch": "@@ -769,7 +769,6 @@ fn numbered_codegen_unit_name(\n fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n where\n     I: Iterator<Item = &'b CodegenUnit<'tcx>>,\n-    'tcx,\n {\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);"}]}