{"sha": "22f4bbb20f373b0c3d47788f58c95d60656918f2", "node_id": "C_kwDOAAsO6NoAKDIyZjRiYmIyMGYzNzNiMGMzZDQ3Nzg4ZjU4Yzk1ZDYwNjU2OTE4ZjI", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-03-21T04:57:06Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:16Z"}, "message": "Apply formatting fixes", "tree": {"sha": "478ff4f6dae1a7afb05ce002c71bbb5bb1fd1dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478ff4f6dae1a7afb05ce002c71bbb5bb1fd1dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f4bbb20f373b0c3d47788f58c95d60656918f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f4bbb20f373b0c3d47788f58c95d60656918f2", "html_url": "https://github.com/rust-lang/rust/commit/22f4bbb20f373b0c3d47788f58c95d60656918f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f4bbb20f373b0c3d47788f58c95d60656918f2/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa30dd3cb18e4e6a1a5940addd8e744ab8d3eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa30dd3cb18e4e6a1a5940addd8e744ab8d3eef", "html_url": "https://github.com/rust-lang/rust/commit/8aa30dd3cb18e4e6a1a5940addd8e744ab8d3eef"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "3a43932f50cb5a39dfd4e965204466058548d868", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=22f4bbb20f373b0c3d47788f58c95d60656918f2", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, GeneratorSubsts};\n+use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::{Idx, IndexVec};\n@@ -486,32 +486,20 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             self.make_clone_call(dest_field, src_field, ity, next_block, unwind);\n             self.block(\n                 vec![],\n-                TerminatorKind::Drop {\n-                    place: dest_field,\n-                    target: unwind,\n-                    unwind: None,\n-                },\n+                TerminatorKind::Drop { place: dest_field, target: unwind, unwind: None },\n                 true,\n             );\n             unwind = next_unwind;\n         }\n-        self.block(\n-            vec![],\n-            TerminatorKind::Goto { target },\n-            false,\n-        );\n+        self.block(vec![], TerminatorKind::Goto { target }, false);\n         unwind\n     }\n \n     fn tuple_like_shim<I>(&mut self, dest: Place<'tcx>, src: Place<'tcx>, tys: I)\n     where\n         I: IntoIterator<Item = Ty<'tcx>>,\n     {\n-        self.block(\n-            vec![],\n-            TerminatorKind::Goto { target: self.block_index_offset(3) },\n-            false,\n-        );\n+        self.block(vec![], TerminatorKind::Goto { target: self.block_index_offset(3) }, false);\n         let unwind = self.block(vec![], TerminatorKind::Resume, true);\n         let target = self.block(vec![], TerminatorKind::Return, false);\n \n@@ -525,11 +513,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         gen_def_id: DefId,\n         substs: GeneratorSubsts<'tcx>,\n     ) {\n-        self.block(\n-            vec![],\n-            TerminatorKind::Goto { target: self.block_index_offset(3) },\n-            false,\n-        );\n+        self.block(vec![], TerminatorKind::Goto { target: self.block_index_offset(3) }, false);\n         let unwind = self.block(vec![], TerminatorKind::Resume, true);\n         // This will get overwritten with a switch once we know the target blocks\n         let switch = self.block(vec![], TerminatorKind::Unreachable, false);\n@@ -566,7 +550,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                     switch_ty: discr_ty,\n                     targets: SwitchTargets::new(cases.into_iter(), unreachable),\n                 };\n-            },\n+            }\n             BasicBlockData { terminator: None, .. } => unreachable!(),\n         }\n     }"}, {"sha": "b5e7a8b562ea6419e039a62cd62cfd58b1d494ef", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=22f4bbb20f373b0c3d47788f58c95d60656918f2", "patch": "@@ -1939,11 +1939,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ty::Generator(_, substs, hir::Movability::Movable) => {\n                 if self.tcx().features().generator_clone {\n-                    let resolved_upvars = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n-                    let resolved_witness = self.infcx.shallow_resolve(substs.as_generator().witness());\n+                    let resolved_upvars =\n+                        self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n+                    let resolved_witness =\n+                        self.infcx.shallow_resolve(substs.as_generator().witness());\n                     if {\n-                        matches!(resolved_upvars.kind(), ty::Infer(ty::TyVar(_))) ||\n-                        matches!(resolved_witness.kind(), ty::Infer(ty::TyVar(_)))\n+                        matches!(resolved_upvars.kind(), ty::Infer(ty::TyVar(_)))\n+                            || matches!(resolved_witness.kind(), ty::Infer(ty::TyVar(_)))\n                     } {\n                         // Not yet resolved.\n                         Ambiguous\n@@ -1967,14 +1969,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             if matches!(resolved.kind(), ty::Infer(ty::TyVar(_))) {\n                                 break Ambiguous;\n                             }\n-                        },\n+                        }\n                         Option::None => {\n                             // (*) binder moved here\n                             let all_vars = self.tcx().mk_bound_variable_kinds(\n-                                obligation.predicate.bound_vars().iter().chain(binder.bound_vars().iter())\n+                                obligation\n+                                    .predicate\n+                                    .bound_vars()\n+                                    .iter()\n+                                    .chain(binder.bound_vars().iter()),\n                             );\n-                            break Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars));\n-                        },\n+                            break Where(ty::Binder::bind_with_vars(\n+                                witness_tys.to_vec(),\n+                                all_vars,\n+                            ));\n+                        }\n                     }\n                 }\n             }"}, {"sha": "edf47403c0d655486a5da0ca06d6417e8adb876a", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f4bbb20f373b0c3d47788f58c95d60656918f2/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=22f4bbb20f373b0c3d47788f58c95d60656918f2", "patch": "@@ -263,10 +263,10 @@ fn resolve_associated_item<'tcx>(\n                     let is_copy = self_ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env);\n                     match self_ty.kind() {\n                         _ if is_copy => (),\n-                        ty::Generator(..) |\n-                        ty::GeneratorWitness(..) |\n-                        ty::Closure(..) |\n-                        ty::Tuple(..) => {},\n+                        ty::Generator(..)\n+                        | ty::GeneratorWitness(..)\n+                        | ty::Closure(..)\n+                        | ty::Tuple(..) => {}\n                         _ => return Ok(None),\n                     };\n "}]}