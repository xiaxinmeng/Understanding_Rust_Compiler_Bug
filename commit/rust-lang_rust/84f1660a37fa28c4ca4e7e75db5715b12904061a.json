{"sha": "84f1660a37fa28c4ca4e7e75db5715b12904061a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjE2NjBhMzdmYTI4YzRjYTRlN2U3NWRiNTcxNWIxMjkwNDA2MWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-27T21:13:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-27T21:13:08Z"}, "message": "Merge #8220\n\n8220: Reorder some ide_db imports r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "333db3209f9acb92601c4ab63a10c63322807a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333db3209f9acb92601c4ab63a10c63322807a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f1660a37fa28c4ca4e7e75db5715b12904061a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgX5/kCRBK7hj4Ov3rIwAAdHIIAHSV/59KsmvvKtM165uOhXzd\nGK3ZeWso8EMVjd/jVVYfEbg8KCaESLyyHyAqLiUZaWXvtAYB04xnRlVfQOD+EVYP\nzpGjbpPxl+njF8YivRLNnz4Qj6+JD8LW3h/hVr+VzVrHwwpPgyYc9/CHG6kRmlLW\ncBWYQpBV7ey/aeElTzAhAIXjwWPvwc+V1Ex2ahl0i6HilPCHo9Aw8dFppPzT07AD\n9CG3Vmt27DhljJpP6NuQP6ZFvlAYj7hNIOrs1pcyMfxXQDJCX7v1vExzHl4y4jEp\nmhk0c6kckMKkyTCJpHljlFOrE7iZ+wqL4L1/fu2Pi55zZcLI/MP1CC1Z40i5ntQ=\n=8NsT\n-----END PGP SIGNATURE-----\n", "payload": "tree 333db3209f9acb92601c4ab63a10c63322807a40\nparent 97dbbad482e3382da027f2f151354445d8af029a\nparent 1ef55002c2db4ca68df31306290b019c7fbfb4fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616879588 +0000\ncommitter GitHub <noreply@github.com> 1616879588 +0000\n\nMerge #8220\n\n8220: Reorder some ide_db imports r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f1660a37fa28c4ca4e7e75db5715b12904061a", "html_url": "https://github.com/rust-lang/rust/commit/84f1660a37fa28c4ca4e7e75db5715b12904061a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f1660a37fa28c4ca4e7e75db5715b12904061a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97dbbad482e3382da027f2f151354445d8af029a", "url": "https://api.github.com/repos/rust-lang/rust/commits/97dbbad482e3382da027f2f151354445d8af029a", "html_url": "https://github.com/rust-lang/rust/commit/97dbbad482e3382da027f2f151354445d8af029a"}, {"sha": "1ef55002c2db4ca68df31306290b019c7fbfb4fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef55002c2db4ca68df31306290b019c7fbfb4fb", "html_url": "https://github.com/rust-lang/rust/commit/1ef55002c2db4ca68df31306290b019c7fbfb4fb"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "281a081a38777d99bc3eeedeaad5c9df882c3862", "filename": "crates/ide_db/src/call_info/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -1,8 +1,9 @@\n-use crate::RootDatabase;\n use base_db::{fixture::ChangeFixture, FilePosition};\n use expect_test::{expect, Expect};\n use test_utils::RangeOrOffset;\n \n+use crate::RootDatabase;\n+\n /// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);"}, {"sha": "be3a22725ab1d6d0bce229f189e2bb695fafebfc", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -1,7 +1,6 @@\n //! Handle syntactic aspects of inserting a new `use`.\n use std::{cmp::Ordering, iter::successors};\n \n-use crate::RootDatabase;\n use hir::Semantics;\n use itertools::{EitherOrBoth, Itertools};\n use syntax::{\n@@ -14,6 +13,8 @@ use syntax::{\n     AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken,\n };\n \n+use crate::RootDatabase;\n+\n pub use hir::PrefixKind;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]"}, {"sha": "1f1e715c97f34db7b67ab5a743ff4c19e59eaef9", "filename": "crates/ide_db/src/label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Flabel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Flabel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flabel.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -1,4 +1,4 @@\n-//! See `Label`\n+//! See [`Label`]\n use std::fmt;\n \n /// A type to specify UI label, like an entry in the list of assists. Enforces"}, {"sha": "b55e3851ebbb3845a2853d4294bd094a6f8346ea", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -12,9 +12,8 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n-use crate::defs::NameClass;\n use crate::{\n-    defs::{Definition, NameRefClass},\n+    defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n "}, {"sha": "846530f784558d8250b1d3fabc9f8241e2f613f8", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -37,6 +37,8 @@ impl SourceChange {\n         }\n     }\n \n+    /// Inserts a [`TextEdit`] for the given [`FileId`]. This properly handles merging existing\n+    /// edits for a file if some already exist.\n     pub fn insert_source_edit(&mut self, file_id: FileId, edit: TextEdit) {\n         match self.source_file_edits.entry(file_id) {\n             Entry::Occupied(mut entry) => {"}, {"sha": "66ae81c73eacfd6c6f2f61b9f0e78e8f51508344", "filename": "crates/ide_db/src/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -61,7 +61,7 @@ pub fn get_missing_assoc_items(\n     resolve_target_trait(sema, impl_def).map_or(vec![], |target_trait| {\n         target_trait\n             .items(sema.db)\n-            .iter()\n+            .into_iter()\n             .filter(|i| match i {\n                 hir::AssocItem::Function(f) => {\n                     !impl_fns_consts.contains(&f.name(sema.db).to_string())\n@@ -72,7 +72,6 @@ pub fn get_missing_assoc_items(\n                     .map(|n| !impl_fns_consts.contains(&n.to_string()))\n                     .unwrap_or_default(),\n             })\n-            .cloned()\n             .collect()\n     })\n }"}, {"sha": "2a5482024dc0015ac204092395be617f652d50bc", "filename": "crates/ide_db/src/traits/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -1,10 +1,11 @@\n-use crate::RootDatabase;\n use base_db::{fixture::ChangeFixture, FilePosition};\n use expect_test::{expect, Expect};\n use hir::Semantics;\n use syntax::ast::{self, AstNode};\n use test_utils::RangeOrOffset;\n \n+use crate::RootDatabase;\n+\n /// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);"}, {"sha": "988ecd0607d4b0e0af710b451a06d868da5d1997", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1660a37fa28c4ca4e7e75db5715b12904061a/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=84f1660a37fa28c4ca4e7e75db5715b12904061a", "patch": "@@ -2,11 +2,13 @@\n //! Use case for structures in this module is, for example, situation when you need to process\n //! only certain `Enum`s.\n \n-use crate::RootDatabase;\n-use hir::{Adt, Semantics, Type};\n use std::iter;\n+\n+use hir::{Adt, Semantics, Type};\n use syntax::ast::{self, make};\n \n+use crate::RootDatabase;\n+\n /// Enum types that implement `std::ops::Try` trait.\n #[derive(Clone, Copy)]\n pub enum TryEnum {"}]}