{"sha": "6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNWMxZWUzNGZkNmU0ZTQ1NWY2NjkxYTA5ODhmYTAyMThmNWM2OGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-07T23:42:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-08T00:01:16Z"}, "message": "rustdoc: Don't strip #-lines if notrust\n\nOther languages may not want to have a leading #-line get stripped.", "tree": {"sha": "a03c9b47b2a90f976ebaa9c681c017244ea20661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a03c9b47b2a90f976ebaa9c681c017244ea20661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c", "html_url": "https://github.com/rust-lang/rust/commit/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dc574890c42a4e87665276d4cff1f69ca13e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dc574890c42a4e87665276d4cff1f69ca13e21", "html_url": "https://github.com/rust-lang/rust/commit/19dc574890c42a4e87665276d4cff1f69ca13e21"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "86f56660d3a64ed3bbaa6e59b972959ce031f395", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6c5c1ee34fd6e4e455f6691a0988fa0218f5c68c", "patch": "@@ -153,35 +153,25 @@ local_data_key!(test_idx: Cell<uint>)\n local_data_key!(pub playground_krate: Option<String>)\n \n pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n-    extern fn block(ob: *mut hoedown_buffer, text: *const hoedown_buffer,\n+    extern fn block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer, opaque: *mut libc::c_void) {\n         unsafe {\n-            if text.is_null() { return }\n+            if orig_text.is_null() { return }\n \n             let opaque = opaque as *mut hoedown_html_renderer_state;\n             let my_opaque: &MyOpaque = &*((*opaque).opaque as *const MyOpaque);\n-            slice::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n+            slice::raw::buf_as_slice((*orig_text).data, (*orig_text).size as uint,\n+                                     |text| {\n                 let origtext = str::from_utf8(text).unwrap();\n                 debug!(\"docblock: ==============\\n{}\\n=======\", text);\n-                let mut lines = origtext.lines().filter(|l| {\n-                    stripped_filtered_line(*l).is_none()\n-                });\n-                let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n-\n-                let buf = hoedown_buffer {\n-                    data: text.as_bytes().as_ptr(),\n-                    size: text.len() as libc::size_t,\n-                    asize: text.len() as libc::size_t,\n-                    unit: 0,\n-                };\n                 let rendered = if lang.is_null() {\n                     false\n                 } else {\n                     slice::raw::buf_as_slice((*lang).data,\n                                            (*lang).size as uint, |rlang| {\n                         let rlang = str::from_utf8(rlang).unwrap();\n                         if LangString::parse(rlang).notrust {\n-                            (my_opaque.dfltblk)(ob, &buf, lang,\n+                            (my_opaque.dfltblk)(ob, orig_text, lang,\n                                                 opaque as *mut libc::c_void);\n                             true\n                         } else {\n@@ -190,6 +180,10 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                     })\n                 };\n \n+                let mut lines = origtext.lines().filter(|l| {\n+                    stripped_filtered_line(*l).is_none()\n+                });\n+                let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n                 if !rendered {\n                     let mut s = String::new();\n                     let id = playground_krate.get().map(|krate| {"}]}