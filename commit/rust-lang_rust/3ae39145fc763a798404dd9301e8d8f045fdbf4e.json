{"sha": "3ae39145fc763a798404dd9301e8d8f045fdbf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTM5MTQ1ZmM3NjNhNzk4NDA0ZGQ5MzAxZThkOGYwNDVmZGJmNGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-08T22:24:44Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-09T21:34:16Z"}, "message": "Fix false-positive in `LET_AND_RETURN`\n\nIf the declaration has a type, it might be required for coercion to\nhappen.", "tree": {"sha": "4b5d4388e59ee5a5911b4a49e1a2f5bfa1fc3160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b5d4388e59ee5a5911b4a49e1a2f5bfa1fc3160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae39145fc763a798404dd9301e8d8f045fdbf4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXWeDZAAoJEF5CfHlMukXoZiAQAJ+/560g2qOxPivKg82gKKQa\nS63B0dMS1vbUzYbsOdIRyCXW4ijt9GlbnnCn8tqMr0EslBlkDEzBl8OL1ZMh4Toi\n4uSkND3XSUURl3ZnrtHfutWGTowuuiON6n4etBaqh5PyVims8KOJMqO1JpHrtLEa\nRw/ebaix62L8T9fiMO3RImALbGJKO07YNgt1/mC2MT1LjgbmaqjVzns/E32/qN11\nu1AK6EwYEwlm/I15pROSywZZ6c2CvHqOSdrBixgFENpxr8I9C5CZ2DKu2OiSjR6D\nI9eXgxhs1aA6vFJW+lZ4PpPI+ibON47WXCgNubqAlF5x77I+3MgRJXZByjem9QKi\nR3O7IyGvdkshxT4ZdXSe5eJljOMg5f1ngNhvJ2gtovwFbsVpxyM8PqVVnOPqomF5\n9jN0JVm4muCdOUa7ychZMZ9a2LGnvs993S4wEdFfZH1H/7+TEeN1wocBOQaSGU+Y\ns88iTB9R0FgOr6UafLQxEdqOlaNTr3g+RdyXCQkpjtu/E9Qs3cKlFlm4jq1DDqBK\nvmrT4Gap/gVeYqoCO4GsZvwz0yFKCvDCAY7LxIQJPpUjXG/T6Im/M7tZ3Xgk0ExP\npxKW+ywY28LE172L+Rmb6mNHYGAJAqBKm1ngKYFcGXWPNy4Llgxgd0vj4sVoZfmd\nm+6ejgrkZTc+Sh8fJ/28\n=sXmS\n-----END PGP SIGNATURE-----", "payload": "tree 4b5d4388e59ee5a5911b4a49e1a2f5bfa1fc3160\nparent ce2b96abe98ba23362d91094007b2b932cdd89e0\nauthor mcarton <cartonmartin+git@gmail.com> 1465424684 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1465508056 +0200\n\nFix false-positive in `LET_AND_RETURN`\n\nIf the declaration has a type, it might be required for coercion to\nhappen.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae39145fc763a798404dd9301e8d8f045fdbf4e", "html_url": "https://github.com/rust-lang/rust/commit/3ae39145fc763a798404dd9301e8d8f045fdbf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae39145fc763a798404dd9301e8d8f045fdbf4e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce2b96abe98ba23362d91094007b2b932cdd89e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2b96abe98ba23362d91094007b2b932cdd89e0", "html_url": "https://github.com/rust-lang/rust/commit/ce2b96abe98ba23362d91094007b2b932cdd89e0"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "7bb468166b8634f25918c9ff84477b444676eed6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ae39145fc763a798404dd9301e8d8f045fdbf4e/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae39145fc763a798404dd9301e8d8f045fdbf4e/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=3ae39145fc763a798404dd9301e8d8f045fdbf4e", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n \n-use utils::{span_lint, span_lint_and_then, snippet_opt, match_path_ast, in_external_macro};\n+use utils::{span_note_and_lint, span_lint_and_then, snippet_opt, match_path_ast, in_external_macro};\n \n /// **What it does:** This lint checks for return statements at the end of a block.\n ///\n@@ -95,29 +95,23 @@ impl ReturnPass {\n                 let Some(ref retexpr) = block.expr,\n                 let StmtKind::Decl(ref decl, _) = stmt.node,\n                 let DeclKind::Local(ref local) = decl.node,\n+                local.ty.is_none(),\n                 let Some(ref initexpr) = local.init,\n                 let PatKind::Ident(_, Spanned { node: id, .. }, _) = local.pat.node,\n                 let ExprKind::Path(_, ref path) = retexpr.node,\n-                match_path_ast(path, &[&id.name.as_str()])\n+                match_path_ast(path, &[&id.name.as_str()]),\n+                !in_external_macro(cx, initexpr.span),\n             ], {\n-                self.emit_let_lint(cx, retexpr.span, initexpr.span);\n+                span_note_and_lint(cx,\n+                                   LET_AND_RETURN,\n+                                   retexpr.span,\n+                                   \"returning the result of a let binding from a block. \\\n+                                   Consider returning the expression directly.\",\n+                                   initexpr.span,\n+                                   \"this expression can be directly returned\");\n             }\n         }\n     }\n-\n-    fn emit_let_lint(&mut self, cx: &EarlyContext, lint_span: Span, note_span: Span) {\n-        if in_external_macro(cx, note_span) {\n-            return;\n-        }\n-        let mut db = span_lint(cx,\n-                               LET_AND_RETURN,\n-                               lint_span,\n-                               \"returning the result of a let binding from a block. Consider returning the \\\n-                                expression directly.\");\n-        if cx.current_level(LET_AND_RETURN) != Level::Allow {\n-            db.span_note(note_span, \"this expression can be directly returned\");\n-        }\n-    }\n }\n \n impl LintPass for ReturnPass {"}]}