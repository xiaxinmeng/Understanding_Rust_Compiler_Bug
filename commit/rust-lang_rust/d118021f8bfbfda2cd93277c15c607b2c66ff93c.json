{"sha": "d118021f8bfbfda2cd93277c15c607b2c66ff93c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTgwMjFmOGJmYmZkYTJjZDkzMjc3YzE1YzYwN2IyYzY2ZmY5M2M=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T18:46:20Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-23T11:33:45Z"}, "message": "Permit mutable references in all const contexts", "tree": {"sha": "3bb47effb0df11fc428390a0bbdd7aace551b012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bb47effb0df11fc428390a0bbdd7aace551b012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d118021f8bfbfda2cd93277c15c607b2c66ff93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d118021f8bfbfda2cd93277c15c607b2c66ff93c", "html_url": "https://github.com/rust-lang/rust/commit/d118021f8bfbfda2cd93277c15c607b2c66ff93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d118021f8bfbfda2cd93277c15c607b2c66ff93c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "html_url": "https://github.com/rust-lang/rust/commit/1986b58c646a9523d0a8a0fa8a0bd20492e7795d"}], "stats": {"total": 469, "additions": 298, "deletions": 171}, "files": [{"sha": "23abd522cf0f3c660bf00ea61b674d3f7b8157e4", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -268,43 +268,41 @@ impl NonConstOp for CellBorrow {\n }\n \n #[derive(Debug)]\n+/// This op is for `&mut` borrows in the trailing expression of a constant\n+/// which uses the \"enclosing scopes rule\" to leak its locals into anonymous\n+/// static or const items.\n pub struct MutBorrow(pub hir::BorrowKind);\n \n impl NonConstOp for MutBorrow {\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Forbid everywhere except in const fn with a feature gate\n-        if ccx.const_kind() == hir::ConstContext::ConstFn {\n-            Status::Unstable(sym::const_mut_refs)\n-        } else {\n-            Status::Forbidden\n+        match ccx.const_kind() {\n+            // Mutable statics can handle mutable references in their final value\n+            hir::ConstContext::Static(hir::Mutability::Mut) => Status::Allowed,\n+            _ => Status::Forbidden,\n         }\n     }\n \n+    fn importance(&self) -> DiagnosticImportance {\n+        // If there were primary errors (like non-const function calls), do not emit further\n+        // errors about mutable references.\n+        DiagnosticImportance::Secondary\n+    }\n+\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let raw = match self.0 {\n             hir::BorrowKind::Raw => \"raw \",\n             hir::BorrowKind::Ref => \"\",\n         };\n \n-        let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_mut_refs,\n-                span,\n-                &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n-            )\n-        } else {\n-            let mut err = struct_span_err!(\n-                ccx.tcx.sess,\n-                span,\n-                E0764,\n-                \"{}mutable references are not allowed in {}s\",\n-                raw,\n-                ccx.const_kind(),\n-            );\n-            err.span_label(span, format!(\"`&{}mut` is only allowed in `const fn`\", raw));\n-            err\n-        };\n+        let mut err = struct_span_err!(\n+            ccx.tcx.sess,\n+            span,\n+            E0764,\n+            \"{}mutable references are not allowed in final value of {}s\",\n+            raw,\n+            ccx.const_kind(),\n+        );\n+\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"References in statics and constants may only refer \\\n@@ -321,6 +319,29 @@ impl NonConstOp for MutBorrow {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct TransientMutBorrow(pub hir::BorrowKind);\n+\n+impl NonConstOp for TransientMutBorrow {\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_mut_refs)\n+    }\n+\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let raw = match self.0 {\n+            hir::BorrowKind::Raw => \"raw \",\n+            hir::BorrowKind::Ref => \"\",\n+        };\n+\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_mut_refs,\n+            span,\n+            &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n+        )\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {\n@@ -329,7 +350,7 @@ impl NonConstOp for MutDeref {\n     }\n \n     fn importance(&self) -> DiagnosticImportance {\n-        // Usually a side-effect of a `MutBorrow` somewhere.\n+        // Usually a side-effect of a `TransientMutBorrow` somewhere.\n         DiagnosticImportance::Secondary\n     }\n "}, {"sha": "a92997dddac6aafe9af656a2452d6fa84cd3eebb", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -466,6 +466,29 @@ impl Validator<'mir, 'tcx> {\n             }\n         }\n     }\n+\n+    fn check_mut_borrow(&mut self, local: Local, kind: hir::BorrowKind) {\n+        match self.const_kind() {\n+            // In a const fn all borrows are transient or point to the places given via\n+            // references in the arguments (so we already checked them with\n+            // TransientMutBorrow/MutBorrow as appropriate).\n+            // The borrow checker guarantees that no new non-transient borrows are created.\n+            // NOTE: Once we have heap allocations during CTFE we need to figure out\n+            // how to prevent `const fn` to create long-lived allocations that point\n+            // to mutable memory.\n+            hir::ConstContext::ConstFn => self.check_op(ops::TransientMutBorrow(kind)),\n+            _ => {\n+                // Locals with StorageDead do not live beyond the evaluation and can\n+                // thus safely be borrowed without being able to be leaked to the final\n+                // value of the constant.\n+                if self.local_has_storage_dead(local) {\n+                    self.check_op(ops::TransientMutBorrow(kind));\n+                } else {\n+                    self.check_op(ops::MutBorrow(kind));\n+                }\n+            }\n+        }\n+    }\n }\n \n impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n@@ -562,15 +585,15 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                 if !is_allowed {\n                     if let BorrowKind::Mut { .. } = kind {\n-                        self.check_op(ops::MutBorrow(hir::BorrowKind::Ref));\n+                        self.check_mut_borrow(place.local, hir::BorrowKind::Ref)\n                     } else {\n                         self.check_op(ops::CellBorrow);\n                     }\n                 }\n             }\n \n-            Rvalue::AddressOf(Mutability::Mut, _) => {\n-                self.check_op(ops::MutBorrow(hir::BorrowKind::Raw))\n+            Rvalue::AddressOf(Mutability::Mut, ref place) => {\n+                self.check_mut_borrow(place.local, hir::BorrowKind::Raw)\n             }\n \n             Rvalue::Ref(_, BorrowKind::Shared | BorrowKind::Shallow, ref place)"}, {"sha": "8f9680778aa03d766e5f87f69798a9cb0a78c797", "filename": "src/test/ui/check-static-immutable-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,6 +1,6 @@\n // Checks that immutable static items can't have mutable slices\n \n static TEST: &'static mut [isize] = &mut [];\n-//~^ ERROR mutable references are not allowed in statics\n+//~^ ERROR mutable references are not allowed\n \n pub fn main() { }"}, {"sha": "fcc18cc584c54c3aa709c03ad2f20d53cc5b8871", "filename": "src/test/ui/check-static-immutable-mut-slices.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,8 @@\n-error[E0764]: mutable references are not allowed in statics\n+error[E0764]: mutable references are not allowed in final value of statics\n   --> $DIR/check-static-immutable-mut-slices.rs:3:37\n    |\n LL | static TEST: &'static mut [isize] = &mut [];\n-   |                                     ^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                     ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "60cdcc7df7449b2bf4f19027793bce91ad7f68dc", "filename": "src/test/ui/consts/const-address-of-mut.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,20 +1,29 @@\n-error[E0764]: raw mutable references are not allowed in constants\n+error[E0658]: raw mutable references are not allowed in constants\n   --> $DIR/const-address-of-mut.rs:3:32\n    |\n LL | const A: () = { let mut x = 2; &raw mut x; };\n-   |                                ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n+   |                                ^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0764]: raw mutable references are not allowed in statics\n+error[E0658]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:5:33\n    |\n LL | static B: () = { let mut x = 2; &raw mut x; };\n-   |                                 ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n+   |                                 ^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0764]: raw mutable references are not allowed in statics\n+error[E0658]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:7:37\n    |\n LL | static mut C: () = { let mut x = 2; &raw mut x; };\n-   |                                     ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n+   |                                     ^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/const-address-of-mut.rs:11:13\n@@ -27,5 +36,4 @@ LL |     let y = &raw mut x;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0658, E0764.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ec229d7f53a0fcb0257709bf2dd559ce5fbf1758", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,11 @@\n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/issue-65394.rs:8:13\n    |\n LL |     let r = &mut x;\n-   |             ^^^^^^ `&mut` is only allowed in `const fn`\n+   |             ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/issue-65394.rs:7:9\n@@ -15,5 +18,5 @@ LL | };\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0493, E0764.\n+Some errors have detailed explanations: E0493, E0658.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "dd5cadfe2951ec0e2bdf6c58c3058dcd9465c6af", "filename": "src/test/ui/consts/const-multi-ref.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,11 @@\n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/const-multi-ref.rs:6:13\n    |\n LL |     let p = &mut a;\n-   |             ^^^^^^ `&mut` is only allowed in `const fn`\n+   |             ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n   --> $DIR/const-multi-ref.rs:16:13\n@@ -15,5 +18,4 @@ LL |     let p = &a;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0764.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "24df647f05b7ee158838f61b4c3f6f377762c436", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(const_mut_refs)]\n #![feature(const_fn)]\n #![feature(raw_ref_op)]\n@@ -22,9 +23,7 @@ const fn baz(foo: &mut Foo)-> *mut usize {\n \n const _: () = {\n     foo().bar();\n-    //~^ ERROR mutable references are not allowed in constants\n     baz(&mut foo());\n-    //~^ ERROR mutable references are not allowed in constants\n };\n \n fn main() {}"}, {"sha": "2214ce6ee1c8768fafd979f9f2f1bbe6fb483a35", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,15 +0,0 @@\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/const_mut_address_of.rs:24:5\n-   |\n-LL |     foo().bar();\n-   |     ^^^^^ `&mut` is only allowed in `const fn`\n-\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/const_mut_address_of.rs:26:9\n-   |\n-LL |     baz(&mut foo());\n-   |         ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0764`."}, {"sha": "544458dfcd8bbd30ca7127348341ccc6b8e1429a", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(const_mut_refs)]\n \n struct Foo {\n@@ -29,9 +30,6 @@ const fn bazz(foo: &mut Foo) -> usize {\n \n fn main() {\n     let _: [(); foo().bar()] = [(); 1];\n-    //~^ ERROR mutable references are not allowed in constants\n     let _: [(); baz(&mut foo())] = [(); 2];\n-    //~^ ERROR mutable references are not allowed in constants\n     let _: [(); bazz(&mut foo())] = [(); 3];\n-    //~^ ERROR mutable references are not allowed in constants\n }"}, {"sha": "4ca7b128b7c4b8253ad5e8fa7a650229c0a6c2a6", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,21 +0,0 @@\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/const_mut_refs.rs:31:17\n-   |\n-LL |     let _: [(); foo().bar()] = [(); 1];\n-   |                 ^^^^^ `&mut` is only allowed in `const fn`\n-\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/const_mut_refs.rs:33:21\n-   |\n-LL |     let _: [(); baz(&mut foo())] = [(); 2];\n-   |                     ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n-\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/const_mut_refs.rs:35:22\n-   |\n-LL |     let _: [(); bazz(&mut foo())] = [(); 3];\n-   |                      ^^^^^^^^^^ `&mut` is only allowed in `const fn`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0764`."}, {"sha": "c85acd3b849873fad91d1713a92a465aed925647", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_mut_refs)]\n+#![feature(const_fn)]\n+#![feature(raw_ref_op)]\n+const NULL: *mut i32 = std::ptr::null_mut();\n+const A: *const i32 = &4;\n+\n+// It could be made sound to allow it to compile,\n+// but we do not want to allow this to compile,\n+// as that would be an enormous footgun in oli-obk's opinion.\n+const B: *mut i32 = &mut 4; //~ ERROR mutable references are not allowed\n+\n+// Could be ok, but the same analysis that prevents the mutable one above will also bail out here\n+// Using a block with some complex content, because just `&45` would get promoted,\n+// which is not what we want to test here.\n+const C: *const i32 = &{\n+    let mut x = 42;\n+    x += 3;\n+    x\n+};\n+\n+fn main() {\n+    println!(\"{}\", unsafe { *A });\n+    unsafe { *B = 4 } // Bad news\n+}"}, {"sha": "6d570052aebb103bcc3c220ee22d4992ec4ab036", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -0,0 +1,9 @@\n+error[E0764]: mutable references are not allowed in final value of constants\n+  --> $DIR/mut_ref_in_final.rs:10:21\n+   |\n+LL | const B: *mut i32 = &mut 4;\n+   |                     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "3f2995df2d769d8b91d342da619431ba17499c2e", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_ok.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_mut_refs)]\n+#![feature(const_fn)]\n+#![feature(raw_ref_op)]\n+\n+use std::cell::UnsafeCell;\n+struct NotAMutex<T>(UnsafeCell<T>);\n+\n+unsafe impl<T> Sync for NotAMutex<T> {}\n+\n+const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+//~^ ERROR temporary value dropped while borrowed\n+\n+// `BAR` works, because `&42` promotes immediately instead of relying on\n+// \"final value lifetime extension\".\n+const BAR: NotAMutex<&i32> = NotAMutex(UnsafeCell::new(&42));\n+\n+fn main() {\n+    unsafe {\n+        **FOO.0.get() = 99;\n+        assert_eq!(**FOO.0.get(), 99);\n+    }\n+}"}, {"sha": "8b51e44e16956e0215ea2f19f9bfe8514437ad04", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_ok.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -0,0 +1,13 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final_ok.rs:10:65\n+   |\n+LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+   |                                  -------------------------------^^--\n+   |                                  |                              |  |\n+   |                                  |                              |  temporary value is freed at the end of this statement\n+   |                                  |                              creates a temporary which is freed while still in use\n+   |                                  using this value as a constant requires that borrow lasts for `'static`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "3eac61c0ce670a67ba911a73795a3fdab62aaa98", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -7,19 +7,24 @@ LL |     const fn foo(&mut self, x: u32) {\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3);\n-   |     ^ `&mut` is only allowed in `const fn`\n+   |     ^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:22:13\n    |\n LL |     let y = &mut x;\n-   |             ^^^^^^ `&mut` is only allowed in `const fn`\n+   |             ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0658, E0764.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "62bbb3b569c37513645204d10f4fd626ad4a1dae", "filename": "src/test/ui/consts/issue-17718-const-bad-values.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,10 +1,9 @@\n const C1: &'static mut [usize] = &mut [];\n-//~^ ERROR: mutable references are not allowed in constants\n+//~^ ERROR: mutable references are not allowed\n \n static mut S: usize = 3;\n const C2: &'static mut usize = unsafe { &mut S };\n //~^ ERROR: constants cannot refer to statics\n //~| ERROR: constants cannot refer to statics\n-//~| ERROR: mutable references are not allowed in constants\n \n fn main() {}"}, {"sha": "7e02fa4686f2fae752b04bc28ce290fe0f5a6ccb", "filename": "src/test/ui/consts/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-const-bad-values.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,8 @@\n-error[E0764]: mutable references are not allowed in constants\n+error[E0764]: mutable references are not allowed in final value of constants\n   --> $DIR/issue-17718-const-bad-values.rs:1:34\n    |\n LL | const C1: &'static mut [usize] = &mut [];\n-   |                                  ^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                  ^^^^^^^\n \n error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-const-bad-values.rs:5:46\n@@ -20,13 +20,7 @@ LL | const C2: &'static mut usize = unsafe { &mut S };\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/issue-17718-const-bad-values.rs:5:41\n-   |\n-LL | const C2: &'static mut usize = unsafe { &mut S };\n-   |                                         ^^^^^^ `&mut` is only allowed in `const fn`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0013, E0764.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "0945a23f3b123fc9b83c532c70f7c4690d34f4a1", "filename": "src/test/ui/consts/projection_qualif.mut_refs.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,9 +1,3 @@\n-error[E0764]: mutable references are not allowed in constants\n-  --> $DIR/projection_qualif.rs:10:27\n-   |\n-LL |         let b: *mut u32 = &mut a;\n-   |                           ^^^^^^ `&mut` is only allowed in `const fn`\n-\n error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/projection_qualif.rs:11:18\n    |\n@@ -13,7 +7,6 @@ LL |         unsafe { *b = 5; }\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0658, E0764.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d35df330bb8c33c956480b628daf3b857019d1ca", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -7,7 +7,7 @@ use std::cell::Cell;\n const FOO: &u32 = {\n     let mut a = 42;\n     {\n-        let b: *mut u32 = &mut a; //~ ERROR mutable references are not allowed in constants\n+        let b: *mut u32 = &mut a; //[stock]~ ERROR mutable references are not allowed in constants\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n     }\n     &{a}"}, {"sha": "e451898caba43ffa9d73ccc197df248f4452518f", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,11 @@\n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/projection_qualif.rs:10:27\n    |\n LL |         let b: *mut u32 = &mut a;\n-   |                           ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                           ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/projection_qualif.rs:11:18\n@@ -15,5 +18,4 @@ LL |         unsafe { *b = 5; }\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0764.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "665c305e9617f0007768e3a60c0dea45ea044776", "filename": "src/test/ui/consts/read_from_static_mut_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,9 +1,8 @@\n-// We are keeping this test in case we decide to allow mutable references in statics again\n #![feature(const_mut_refs)]\n #![allow(const_err)]\n \n-static OH_NO: &mut i32 = &mut 42;\n-//~^ ERROR mutable references are not allowed in statics\n+static OH_NO: &mut i32 = &mut 42; //~ ERROR mutable references are not allowed\n fn main() {\n     assert_eq!(*OH_NO, 42);\n+    *OH_NO = 43; //~ ERROR cannot assign to `*OH_NO`, as `OH_NO` is an immutable static\n }"}, {"sha": "373220878ec2ab765c7f9f0573db33255beac5a2", "filename": "src/test/ui/consts/read_from_static_mut_ref.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,9 +1,16 @@\n-error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/read_from_static_mut_ref.rs:5:26\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/read_from_static_mut_ref.rs:4:26\n    |\n LL | static OH_NO: &mut i32 = &mut 42;\n-   |                          ^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                          ^^^^^^^\n \n-error: aborting due to previous error\n+error[E0594]: cannot assign to `*OH_NO`, as `OH_NO` is an immutable static item\n+  --> $DIR/read_from_static_mut_ref.rs:7:5\n+   |\n+LL |     *OH_NO = 43;\n+   |     ^^^^^^^^^^^ cannot assign\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0764`.\n+Some errors have detailed explanations: E0594, E0764.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "8db75dd63cf2a0e5357f7e65bf3ee69bd4d52a98", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.mut_refs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,9 +1,9 @@\n-error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/static_mut_containing_mut_ref2.rs:7:46\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0764`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "61368546083db1ff813282b4ab9d3d03e7eff136", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -5,6 +5,7 @@\n static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-//~^ ERROR  mutable references are not allowed in statics\n+//[mut_refs]~^ ERROR could not evaluate static initializer\n+//[stock]~^^ ERROR mutable references are not allowed in statics\n \n fn main() {}"}, {"sha": "5cdcea2323109fc5f346b7825be6579bbb985651", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,9 +1,12 @@\n-error[E0764]: mutable references are not allowed in statics\n+error[E0658]: mutable references are not allowed in statics\n   --> $DIR/static_mut_containing_mut_ref2.rs:7:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0764`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c211ad1a2f8f6e592fb1e2975f4f6d627d54a229", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -2,12 +2,13 @@ static X: i32 = 1;\n const C: i32 = 2;\n static mut M: i32 = 3;\n \n-const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+const CR: &'static mut i32 = &mut C; //~ ERROR mutable references are not allowed\n                                      //~| WARN taking a mutable\n-static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0764\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0658\n                                               //~| ERROR cannot borrow\n+                                              //~| ERROR mutable references are not allowed\n \n-static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR mutable references are not allowed\n                                               //~| WARN taking a mutable\n-static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0764\n+static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR mutable references are not\n fn main() {}"}, {"sha": "9b094b1975730109ca75f6117dacd16a76d2afe5", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -13,17 +13,26 @@ note: `const` item defined here\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0764]: mutable references are not allowed in constants\n+error[E0764]: mutable references are not allowed in final value of constants\n   --> $DIR/E0017.rs:5:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n-   |                              ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                              ^^^^^^\n \n-error[E0764]: mutable references are not allowed in statics\n+error[E0658]: mutation through a reference is not allowed in statics\n   --> $DIR/E0017.rs:7:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                       ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/E0017.rs:7:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n+   |                                       ^^^^^^\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:7:39\n@@ -32,7 +41,7 @@ LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/E0017.rs:10:38\n+  --> $DIR/E0017.rs:11:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^\n@@ -45,19 +54,19 @@ note: `const` item defined here\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0017.rs:10:38\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/E0017.rs:11:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n-   |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                      ^^^^^^\n \n-error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0017.rs:12:52\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/E0017.rs:13:52\n    |\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n-   |                                                    ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                                    ^^^^^^\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0596, E0764.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n For more information about an error, try `rustc --explain E0596`."}, {"sha": "6049d95f0d277e8327567babd1e7e2e4ead59b15", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,12 +1,13 @@\n static X: i32 = 1;\n const C: i32 = 2;\n \n-const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+const CR: &'static mut i32 = &mut C; //~ ERROR mutable references are not allowed\n                                      //~| WARN taking a mutable\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR cannot borrow\n-                                              //~| ERROR E0764\n+                                              //~| ERROR E0658\n+                                              //~| ERROR mutable references are not allowed\n \n-static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR mutable references are not allowed\n                                              //~| WARN taking a mutable\n \n fn main() {}"}, {"sha": "74d6a92e170d422bd514512f85a8a6c09e47b39b", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -13,17 +13,26 @@ note: `const` item defined here\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0764]: mutable references are not allowed in constants\n+error[E0764]: mutable references are not allowed in final value of constants\n   --> $DIR/E0388.rs:4:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n-   |                              ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                              ^^^^^^\n \n-error[E0764]: mutable references are not allowed in statics\n+error[E0658]: mutation through a reference is not allowed in statics\n   --> $DIR/E0388.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                       ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/E0388.rs:6:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n+   |                                       ^^^^^^\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:6:39\n@@ -32,7 +41,7 @@ LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/E0388.rs:9:38\n+  --> $DIR/E0388.rs:10:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^\n@@ -45,13 +54,13 @@ note: `const` item defined here\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0388.rs:9:38\n+error[E0764]: mutable references are not allowed in final value of statics\n+  --> $DIR/E0388.rs:10:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n-   |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n+   |                                      ^^^^^^\n \n-error: aborting due to 4 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0596, E0764.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n For more information about an error, try `rustc --explain E0596`."}, {"sha": "6ec6e7bdcb81e8cfb104d0c33963e25c8f718417", "filename": "src/test/ui/issues/issue-46604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,4 +1,4 @@\n-static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR E0764\n+static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR mutable references are not allowed\n fn write<T: AsRef<[u8]>>(buffer: T) { }\n \n fn main() {"}, {"sha": "488be0e7731e6819f311a66ec55e4f814f744732", "filename": "src/test/ui/issues/issue-46604.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -1,8 +1,8 @@\n-error[E0764]: mutable references are not allowed in statics\n+error[E0764]: mutable references are not allowed in final value of statics\n   --> $DIR/issue-46604.rs:1:25\n    |\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n-   |                         ^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:6:5"}, {"sha": "1683841e9d78137725b4e4ce37d9f37b2909cbb7", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -39,11 +39,14 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     [(); { for _ in 0usize.. {}; 0}];\n    |                     ^^^^^^^^\n \n-error[E0764]: mutable references are not allowed in constants\n+error[E0658]: mutable references are not allowed in constants\n   --> $DIR/issue-52443.rs:9:21\n    |\n LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^ `&mut` is only allowed in `const fn`\n+   |                     ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-52443.rs:9:21\n@@ -53,5 +56,5 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n \n error: aborting due to 6 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0015, E0308, E0744, E0764.\n+Some errors have detailed explanations: E0015, E0308, E0658, E0744.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "b7178c2b52bfbff8424977ee5d71a5c90ac0cbf7", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -18,3 +18,9 @@ const fn bar() -> NonZero<u32> {\n     let y = unsafe { &mut x.0 }; //~ ERROR mutable references\n     unsafe { NonZero(1) }\n }\n+\n+const fn boo() -> NonZero<u32> {\n+    let mut x = unsafe { NonZero(1) };\n+    unsafe { let y = &mut x.0; } //~ ERROR mutable references\n+    unsafe { NonZero(1) }\n+}"}, {"sha": "a0dc950e76dd1a4e631c8b809a26bf5d74f15618", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d118021f8bfbfda2cd93277c15c607b2c66ff93c/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=d118021f8bfbfda2cd93277c15c607b2c66ff93c", "patch": "@@ -16,6 +16,15 @@ LL |     let y = unsafe { &mut x.0 };\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/ranged_ints2_const.rs:24:22\n+   |\n+LL |     unsafe { let y = &mut x.0; }\n+   |                      ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13\n    |\n@@ -24,7 +33,7 @@ LL |     let y = &mut x.0;\n    |\n    = note: mutating layout constrained fields cannot statically be checked for valid values\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0133, E0658.\n For more information about an error, try `rustc --explain E0133`."}]}