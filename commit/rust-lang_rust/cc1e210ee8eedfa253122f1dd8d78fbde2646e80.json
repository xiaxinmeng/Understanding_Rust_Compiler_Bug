{"sha": "cc1e210ee8eedfa253122f1dd8d78fbde2646e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMWUyMTBlZThlZWRmYTI1MzEyMmYxZGQ4ZDc4ZmJkZTI2NDZlODA=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T04:14:23Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:28Z"}, "message": "Inline trans_exchange_free", "tree": {"sha": "1cc9f63dc4339d0ceb1fce2b2d569e6982b4bc88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc9f63dc4339d0ceb1fce2b2d569e6982b4bc88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1e210ee8eedfa253122f1dd8d78fbde2646e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1e210ee8eedfa253122f1dd8d78fbde2646e80", "html_url": "https://github.com/rust-lang/rust/commit/cc1e210ee8eedfa253122f1dd8d78fbde2646e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1e210ee8eedfa253122f1dd8d78fbde2646e80/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c38a54cae966cd56db7358479a0d612572dc6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c38a54cae966cd56db7358479a0d612572dc6f9", "html_url": "https://github.com/rust-lang/rust/commit/9c38a54cae966cd56db7358479a0d612572dc6f9"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "13dbac85c54fdabdb762c7f98db652b55d878126", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc1e210ee8eedfa253122f1dd8d78fbde2646e80/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1e210ee8eedfa253122f1dd8d78fbde2646e80/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=cc1e210ee8eedfa253122f1dd8d78fbde2646e80", "patch": "@@ -46,15 +46,6 @@ pub fn trans_exchange_free_dyn<'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n         .call(bcx, &args, None, None).0\n }\n \n-pub fn trans_exchange_free<'blk, 'tcx>(cx: BlockAndBuilder<'blk, 'tcx>,\n-                                       v: ValueRef,\n-                                       size: u64,\n-                                       align: u32)\n-                                       -> BlockAndBuilder<'blk, 'tcx> {\n-    let ccx = cx.ccx();\n-    trans_exchange_free_dyn(cx, v, C_uint(ccx, size), C_uint(ccx, align))\n-}\n-\n pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n                                           ptr: ValueRef,\n                                           content_ty: Ty<'tcx>)\n@@ -66,19 +57,18 @@ pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n     // `Box<ZeroSizeType>` does not allocate.\n     if content_size != 0 {\n         let content_align = align_of(bcx.ccx(), content_ty);\n-        trans_exchange_free(bcx, ptr, content_size, content_align)\n+        let ccx = bcx.ccx();\n+        trans_exchange_free_dyn(bcx, ptr, C_uint(ccx, content_size), C_uint(ccx, content_align))\n     } else {\n         bcx\n     }\n }\n \n-pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 ty: Ty<'tcx>) -> bool {\n+pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n     tcx.type_needs_drop_given_env(ty, &tcx.empty_parameter_environment())\n }\n \n-pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                    t: Ty<'tcx>) -> Ty<'tcx> {\n+pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, t: Ty<'tcx>) -> Ty<'tcx> {\n     assert!(t.is_normalized_for_trans());\n \n     let t = tcx.erase_regions(&t);\n@@ -182,8 +172,7 @@ impl<'tcx> DropGlueKind<'tcx> {\n     }\n }\n \n-fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                g: DropGlueKind<'tcx>) -> ValueRef {\n+fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKind<'tcx>) -> ValueRef {\n     let g = g.map_ty(|t| get_drop_glue_type(ccx.tcx(), t));\n     match ccx.drop_glues().borrow().get(&g) {\n         Some(&(glue, _)) => glue,"}]}