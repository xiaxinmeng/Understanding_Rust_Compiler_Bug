{"sha": "777d936c17631dfc32a37bd919e45597b83349e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3N2Q5MzZjMTc2MzFkZmMzMmEzN2JkOTE5ZTQ1NTk3YjgzMzQ5ZTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-12T15:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T15:10:50Z"}, "message": "Merge #7653\n\n7653: Document config pattern r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c0fdc1ef41bdd8090cf46d3ce160278a6d6e7d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fdc1ef41bdd8090cf46d3ce160278a6d6e7d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777d936c17631dfc32a37bd919e45597b83349e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJpp6CRBK7hj4Ov3rIwAAdHIIAKvL+HvgEKRrcisVku+nsRgZ\nP24CK5XprxaMIEV0POJTh0YymIuv80BHiOQdcwnXx5YEkZ7OZdwj1Vm4Q8ySDFUQ\nqb9D3vCvsEvOUCp68fdTniM8gqOaaNg6yf59c6cFsPG0LIsUDM8Hk+K/TSDVuIB1\nqngsFJhFfzRz4iSn+JkJQibz/HY7TKgmT19gfWn5SX1JrWXNRZTezS6xKsMacb3T\nfb1ctMTJ5HTsU94/2rwACP4L6OstTQCU5Bb4yEaQ088GtINXonx00vy6QPJb2XRh\nAnZnBc7tgQSVNPRTUcb4bGCXjan+E9eyebwU4bBzmp0dBwY9uL6IGHoZcZlc29I=\n=+WcS\n-----END PGP SIGNATURE-----\n", "payload": "tree c0fdc1ef41bdd8090cf46d3ce160278a6d6e7d99\nparent dee5aba43a1b45131bf31268431fa71923f2ef2a\nparent 799810eaaa2ac9aa3a597575270bd81ea0ef88b9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613142650 +0000\ncommitter GitHub <noreply@github.com> 1613142650 +0000\n\nMerge #7653\n\n7653: Document config pattern r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777d936c17631dfc32a37bd919e45597b83349e4", "html_url": "https://github.com/rust-lang/rust/commit/777d936c17631dfc32a37bd919e45597b83349e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777d936c17631dfc32a37bd919e45597b83349e4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee5aba43a1b45131bf31268431fa71923f2ef2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee5aba43a1b45131bf31268431fa71923f2ef2a", "html_url": "https://github.com/rust-lang/rust/commit/dee5aba43a1b45131bf31268431fa71923f2ef2a"}, {"sha": "799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "html_url": "https://github.com/rust-lang/rust/commit/799810eaaa2ac9aa3a597575270bd81ea0ef88b9"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "73ce59b8701da549443eec3dbc779f8eb04d7cb3", "filename": "docs/dev/style.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/777d936c17631dfc32a37bd919e45597b83349e4/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/777d936c17631dfc32a37bd919e45597b83349e4/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=777d936c17631dfc32a37bd919e45597b83349e4", "patch": "@@ -368,6 +368,66 @@ impl ThingDoer {\n \n **Rationale:** not bothering the caller with irrelevant details, not mixing user API with implementor API.\n \n+## Functions with many parameters\n+\n+Avoid creating functions with many optional or boolean parameters.\n+Introduce a `Config` struct instead.\n+\n+```rust\n+// GOOD\n+pub struct AnnotationConfig {\n+    pub binary_target: bool,\n+    pub annotate_runnables: bool,\n+    pub annotate_impls: bool,\n+}\n+\n+pub fn annotations(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    config: AnnotationConfig\n+) -> Vec<Annotation> {\n+    ...\n+}\n+\n+// BAD\n+pub fn annotations(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    binary_target: bool,\n+    annotate_runnables: bool,\n+    annotate_impls: bool,\n+) -> Vec<Annotation> {\n+    ...\n+}\n+```\n+\n+**Rationale:** reducing churn.\n+If the function has many parameters, they most likely change frequently.\n+By packing them into a struct we protect all intermediary functions from changes.\n+\n+Do not implement `Default` for the `Config` struct, the caller has more context to determine better defaults.\n+Do not store `Config` as a part of the `state`, pass it explicitly.\n+This gives more flexibility for the caller.\n+\n+If there is variation not only in the input parameters, but in the return type as well, consider introducing a `Command` type.\n+\n+```rust\n+// MAYBE GOOD\n+pub struct Query {\n+    pub name: String,\n+    pub case_sensitive: bool,\n+}\n+\n+impl Query {\n+    pub fn all(self) -> Vec<Item> { ... }\n+    pub fn first(self) -> Option<Item> { ... }\n+}\n+\n+// MAYBE BAD\n+fn query_all(name: String, case_sensitive: bool) -> Vec<Item> { ... }\n+fn query_first(name: String, case_sensitive: bool) -> Option<Item> { ... }\n+```\n+\n ## Avoid Monomorphization\n \n Avoid making a lot of code type parametric, *especially* on the boundaries between crates."}]}