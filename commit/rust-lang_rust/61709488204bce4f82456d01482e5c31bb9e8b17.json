{"sha": "61709488204bce4f82456d01482e5c31bb9e8b17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzA5NDg4MjA0YmNlNGY4MjQ1NmQwMTQ4MmU1YzMxYmI5ZThiMTc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-17T04:26:01Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-02-18T02:14:46Z"}, "message": "Fix warnings\n\n- Fix nightly warning about `format!`\n- Remove unused functions and fields", "tree": {"sha": "24bb94bc5f5d71e1f4ecfd0956f20cb484c9838e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24bb94bc5f5d71e1f4ecfd0956f20cb484c9838e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61709488204bce4f82456d01482e5c31bb9e8b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61709488204bce4f82456d01482e5c31bb9e8b17", "html_url": "https://github.com/rust-lang/rust/commit/61709488204bce4f82456d01482e5c31bb9e8b17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61709488204bce4f82456d01482e5c31bb9e8b17/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b64e30d573b9be39c97eaa17082b7214eace4f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b64e30d573b9be39c97eaa17082b7214eace4f0", "html_url": "https://github.com/rust-lang/rust/commit/6b64e30d573b9be39c97eaa17082b7214eace4f0"}], "stats": {"total": 51, "additions": 12, "deletions": 39}, "files": [{"sha": "94d505a1465bf584ddf2880e485a9ffcc21b048a", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=61709488204bce4f82456d01482e5c31bb9e8b17", "patch": "@@ -1674,7 +1674,8 @@ fn remove_comment_header(comment: &str) -> &str {\n     } else {\n         assert!(\n             comment.starts_with(\"/*\"),\n-            format!(\"string '{}' is not a comment\", comment)\n+            \"string '{}' is not a comment\",\n+            comment\n         );\n         &comment[2..comment.len() - 2]\n     }"}, {"sha": "185b53b39874a60bd3d9255a57a8dd643faff871", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=61709488204bce4f82456d01482e5c31bb9e8b17", "patch": "@@ -76,7 +76,7 @@ fn format_project<T: FormatHandler>(\n     // Parse the crate.\n     let mut report = FormatReport::new();\n     let directory_ownership = input.to_directory_ownership();\n-    let krate = match Parser::parse_crate(config, input, directory_ownership, &parse_session) {\n+    let krate = match Parser::parse_crate(input, &parse_session) {\n         Ok(krate) => krate,\n         // Surface parse error via Session (errors are merged there from report)\n         Err(e) => {"}, {"sha": "936055e77221d2819654ff2d5597873f9bf73cb9", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=61709488204bce4f82456d01482e5c31bb9e8b17", "patch": "@@ -127,7 +127,6 @@ fn make_opts() -> Options {\n struct Config {\n     commits: String,\n     uncommitted: bool,\n-    check: bool,\n }\n \n impl Config {\n@@ -146,11 +145,9 @@ impl Config {\n         let mut config = Config {\n             commits: \"1\".to_owned(),\n             uncommitted: false,\n-            check: false,\n         };\n \n         if matches.opt_present(\"c\") {\n-            config.check = true;\n             unimplemented!();\n         }\n "}, {"sha": "5c555e06a8027751537605a426627452f883311a", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=61709488204bce4f82456d01482e5c31bb9e8b17", "patch": "@@ -12,7 +12,7 @@ use rustc_span::{sym, symbol::kw, Span};\n \n use crate::attr::first_attr_value_str_by_name;\n use crate::syntux::session::ParseSess;\n-use crate::{Config, Input};\n+use crate::Input;\n \n pub(crate) type DirectoryOwnership = rustc_expand::module::DirectoryOwnership;\n pub(crate) type ModulePathSuccess = rustc_expand::module::ModulePathSuccess;\n@@ -31,10 +31,8 @@ pub(crate) struct Parser<'a> {\n /// A builder for the `Parser`.\n #[derive(Default)]\n pub(crate) struct ParserBuilder<'a> {\n-    config: Option<&'a Config>,\n     sess: Option<&'a ParseSess>,\n     input: Option<Input>,\n-    directory_ownership: Option<DirectoryOwnership>,\n }\n \n impl<'a> ParserBuilder<'a> {\n@@ -48,19 +46,6 @@ impl<'a> ParserBuilder<'a> {\n         self\n     }\n \n-    pub(crate) fn config(mut self, config: &'a Config) -> ParserBuilder<'a> {\n-        self.config = Some(config);\n-        self\n-    }\n-\n-    pub(crate) fn directory_ownership(\n-        mut self,\n-        directory_ownership: Option<DirectoryOwnership>,\n-    ) -> ParserBuilder<'a> {\n-        self.directory_ownership = directory_ownership;\n-        self\n-    }\n-\n     pub(crate) fn build(self) -> Result<Parser<'a>, ParserError> {\n         let sess = self.sess.ok_or(ParserError::NoParseSess)?;\n         let input = self.input.ok_or(ParserError::NoInput)?;\n@@ -157,12 +142,10 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(crate) fn parse_crate(\n-        config: &'a Config,\n         input: Input,\n-        directory_ownership: Option<DirectoryOwnership>,\n         sess: &'a ParseSess,\n     ) -> Result<ast::Crate, ParserError> {\n-        let krate = Parser::parse_crate_inner(config, input, directory_ownership, sess)?;\n+        let krate = Parser::parse_crate_inner(input, sess)?;\n         if !sess.has_errors() {\n             return Ok(krate);\n         }\n@@ -175,19 +158,12 @@ impl<'a> Parser<'a> {\n         Err(ParserError::ParseError)\n     }\n \n-    fn parse_crate_inner(\n-        config: &'a Config,\n-        input: Input,\n-        directory_ownership: Option<DirectoryOwnership>,\n-        sess: &'a ParseSess,\n-    ) -> Result<ast::Crate, ParserError> {\n-        let mut parser = ParserBuilder::default()\n-            .config(config)\n+    fn parse_crate_inner(input: Input, sess: &'a ParseSess) -> Result<ast::Crate, ParserError> {\n+        ParserBuilder::default()\n             .input(input)\n-            .directory_ownership(directory_ownership)\n             .sess(sess)\n-            .build()?;\n-        parser.parse_crate_mod()\n+            .build()?\n+            .parse_crate_mod()\n     }\n \n     fn parse_crate_mod(&mut self) -> Result<ast::Crate, ParserError> {"}, {"sha": "ce56a223f2b04d671431bec25fdb41a0d84e521c", "filename": "src/test/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61709488204bce4f82456d01482e5c31bb9e8b17/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=61709488204bce4f82456d01482e5c31bb9e8b17", "patch": "@@ -133,10 +133,8 @@ fn verify_config_used(path: &Path, config_name: &str) {\n                     .map(Result::unwrap)\n                     .take_while(|l| l.starts_with(\"//\"))\n                     .any(|l| l.starts_with(&format!(\"// rustfmt-{}\", config_name))),\n-                format!(\n-                    \"config option file {} does not contain expected config name\",\n-                    path.display()\n-                )\n+                \"config option file {} does not contain expected config name\",\n+                path.display()\n             );\n         }\n     }\n@@ -884,6 +882,7 @@ fn rustfmt() -> PathBuf {\n     me.push(\"rustfmt\");\n     assert!(\n         me.is_file() || me.with_extension(\"exe\").is_file(),\n+        \"{}\",\n         if cfg!(release) {\n             \"no rustfmt bin, try running `cargo build --release` before testing\"\n         } else {"}]}