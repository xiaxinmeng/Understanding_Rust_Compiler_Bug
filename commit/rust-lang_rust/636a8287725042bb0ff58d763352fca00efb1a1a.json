{"sha": "636a8287725042bb0ff58d763352fca00efb1a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNmE4Mjg3NzI1MDQyYmIwZmY1OGQ3NjMzNTJmY2EwMGVmYjFhMWE=", "commit": {"author": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2016-10-13T15:48:22Z"}, "committer": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2016-10-13T16:28:18Z"}, "message": "Add support for spaces_within_angle_brackets\n\nEnabling the config adds spaces within type arguments: <>", "tree": {"sha": "dca883bdee8512e5603f5f0042132a0be078ae91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca883bdee8512e5603f5f0042132a0be078ae91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636a8287725042bb0ff58d763352fca00efb1a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636a8287725042bb0ff58d763352fca00efb1a1a", "html_url": "https://github.com/rust-lang/rust/commit/636a8287725042bb0ff58d763352fca00efb1a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636a8287725042bb0ff58d763352fca00efb1a1a/comments", "author": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be202fa3c53ab1d4e208245653fde033ec0131c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be202fa3c53ab1d4e208245653fde033ec0131c", "html_url": "https://github.com/rust-lang/rust/commit/7be202fa3c53ab1d4e208245653fde033ec0131c"}], "stats": {"total": 153, "additions": 148, "deletions": 5}, "files": [{"sha": "1220d43356e8ca49919259d2660444722b4569f9", "filename": "src/chains.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -416,7 +416,13 @@ fn rewrite_method_call(method_name: ast::Ident,\n             .map(|ty| ty.rewrite(context, width, offset))\n             .collect());\n \n-        (types.last().unwrap().span.hi, format!(\"::<{}>\", type_list.join(\", \")))\n+        let type_str = if context.config.spaces_within_angle_brackets && type_list.len() > 0 {\n+            format!(\"::< {} >\", type_list.join(\", \"))\n+        } else {\n+            format!(\"::<{}>\", type_list.join(\", \"))\n+        };\n+\n+        (types.last().unwrap().span.hi, type_str)\n     };\n \n     let callee_str = format!(\".{}{}\", method_name, type_str);"}, {"sha": "b02af269f04516fd27d32fe206adb41fb82e8c6b", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -416,6 +416,7 @@ create_config! {\n     space_after_bound_colon: bool, true,\n         \"Leave a space after the colon in a trait or lifetime bound\";\n     spaces_around_ranges: bool, false, \"Put spaces around the  .. and ... range operators\";\n+    spaces_within_angle_brackets: bool, false, \"Put spaces within non-empty generic arguments\";\n     spaces_within_parens: bool, false, \"Put spaces within non-empty parentheses\";\n     use_try_shorthand: bool, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Replace,"}, {"sha": "c24dde55189fce2f2f7356d227295a3529541ada", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -1800,7 +1800,11 @@ fn rewrite_generics(context: &RewriteContext,\n                              span.hi);\n     let list_str = try_opt!(format_item_list(items, h_budget, offset, context.config));\n \n-    Some(format!(\"<{}>\", list_str))\n+    Some(if context.config.spaces_within_angle_brackets {\n+        format!(\"< {} >\", list_str)\n+    } else {\n+        format!(\"<{}>\", list_str)\n+    })\n }\n \n fn rewrite_trait_bounds(context: &RewriteContext,"}, {"sha": "c210ae4627f9af14be8a54dd434f99d2c27af961", "filename": "src/types.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -45,6 +45,10 @@ pub fn rewrite_path(context: &RewriteContext,\n \n     if let Some(qself) = qself {\n         result.push('<');\n+        if context.config.spaces_within_angle_brackets {\n+            result.push_str(\" \")\n+        }\n+\n         let fmt_ty = try_opt!(qself.ty.rewrite(context, width, offset));\n         result.push_str(&fmt_ty);\n \n@@ -68,6 +72,10 @@ pub fn rewrite_path(context: &RewriteContext,\n                                                     offset + extra_offset));\n         }\n \n+        if context.config.spaces_within_angle_brackets {\n+            result.push_str(\" \")\n+        }\n+\n         result.push_str(\">::\");\n         span_lo = qself.ty.span.hi + BytePos(1);\n     }\n@@ -212,7 +220,11 @@ fn rewrite_segment(expr_context: bool,\n             // Update position of last bracket.\n             *span_lo = next_span_lo;\n \n-            format!(\"{}<{}>\", separator, list_str)\n+            if context.config.spaces_within_angle_brackets && list_str.len() > 0 {\n+                format!(\"{}< {} >\", separator, list_str)\n+            } else {\n+                format!(\"{}<{}>\", separator, list_str)\n+            }\n         }\n         ast::PathParameters::Parenthesized(ref data) => {\n             let output = match data.output {\n@@ -350,7 +362,11 @@ impl Rewrite for ast::WherePredicate {\n                                                     .intersperse(Some(\" + \".to_string()))\n                                                     .collect());\n \n-                    format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n+                    if context.config.spaces_within_angle_brackets && lifetime_str.len() > 0 {\n+                        format!(\"for< {} > {}: {}\", lifetime_str, type_str, bounds_str)\n+                    } else {\n+                        format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n+                    }\n                 } else {\n                     // 2 = \": \".len()\n                     let used_width = type_str.len() + 2;\n@@ -513,7 +529,11 @@ impl Rewrite for ast::PolyTraitRef {\n             let path_str = try_opt!(self.trait_ref\n                 .rewrite(context, max_path_width, offset + extra_offset));\n \n-            Some(format!(\"for<{}> {}\", lifetime_str, path_str))\n+            Some(if context.config.spaces_within_angle_brackets && lifetime_str.len() > 0 {\n+                format!(\"for< {} > {}\", lifetime_str, path_str)\n+            } else {\n+                format!(\"for<{}> {}\", lifetime_str, path_str)\n+            })\n         } else {\n             self.trait_ref.rewrite(context, width, offset)\n         }"}, {"sha": "07640e11e0e5ac36eb0ad6e5dd781938e2b7a628", "filename": "tests/source/spaces-within-angle-brackets.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-angle-brackets.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -0,0 +1,56 @@\n+// rustfmt-spaces_within_angle_brackets: true\n+\n+struct Foo<T> {\n+    i: T,\n+}\n+\n+struct Bar<T, E> {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo<'a> {\n+    i: &'a str,\n+}\n+\n+enum E<T> {\n+    T(T),\n+}\n+\n+enum E<T, S> {\n+    T(T),\n+    S(S),\n+}\n+\n+fn foo<T>(a: T) {\n+    foo::<u32>(10);\n+}\n+\n+fn foo<T, E>(a: T, b: E) {\n+    foo::<u32, str>(10, \"bar\");\n+}\n+\n+fn foo<T: Send, E: Send>(a: T, b: E) {\n+\n+    foo::<u32, str>(10, \"bar\");\n+\n+    let opt: Option<u32>;\n+    let res: Result<u32, String>;\n+}\n+\n+fn foo<'a>(a: &'a str) {\n+    foo(\"foo\");\n+}\n+\n+fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n+    foo(\"foo\", \"bar\");\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        <Foo as Foo>::bar();\n+    }\n+}\n+\n+trait MyTrait<A, D> {}\n+impl<A: Send, D: Send> MyTrait<A, D> for Foo {}"}, {"sha": "67cfc1fac7f67b4293c7839d248bfac55466dfd7", "filename": "tests/target/spaces-within-angle-brackets.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/636a8287725042bb0ff58d763352fca00efb1a1a/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636a8287725042bb0ff58d763352fca00efb1a1a/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-angle-brackets.rs?ref=636a8287725042bb0ff58d763352fca00efb1a1a", "patch": "@@ -0,0 +1,56 @@\n+// rustfmt-spaces_within_angle_brackets: true\n+\n+struct Foo< T > {\n+    i: T,\n+}\n+\n+struct Bar< T, E > {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo< 'a > {\n+    i: &'a str,\n+}\n+\n+enum E< T > {\n+    T(T),\n+}\n+\n+enum E< T, S > {\n+    T(T),\n+    S(S),\n+}\n+\n+fn foo< T >(a: T) {\n+    foo::< u32 >(10);\n+}\n+\n+fn foo< T, E >(a: T, b: E) {\n+    foo::< u32, str >(10, \"bar\");\n+}\n+\n+fn foo< T: Send, E: Send >(a: T, b: E) {\n+\n+    foo::< u32, str >(10, \"bar\");\n+\n+    let opt: Option< u32 >;\n+    let res: Result< u32, String >;\n+}\n+\n+fn foo< 'a >(a: &'a str) {\n+    foo(\"foo\");\n+}\n+\n+fn foo< 'a, 'b >(a: &'a str, b: &'b str) {\n+    foo(\"foo\", \"bar\");\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        < Foo as Foo >::bar();\n+    }\n+}\n+\n+trait MyTrait< A, D > {}\n+impl< A: Send, D: Send > MyTrait< A, D > for Foo {}"}]}