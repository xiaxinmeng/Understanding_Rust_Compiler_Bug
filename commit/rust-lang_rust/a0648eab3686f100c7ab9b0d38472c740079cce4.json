{"sha": "a0648eab3686f100c7ab9b0d38472c740079cce4", "node_id": "C_kwDOAAsO6NoAKGEwNjQ4ZWFiMzY4NmYxMDBjN2FiOWIwZDM4NDcyYzc0MDA3OWNjZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T11:54:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T11:54:29Z"}, "message": "Auto merge of #88835 - FabianWolff:issue-88770, r=petrochenkov\n\nFix error recovery in format macro parsing\n\nFixes #88770. Basically, the assumption in the following comment is incorrect:\nhttps://github.com/rust-lang/rust/blob/b69fe57261086e70aea9d5b58819a1794bf7c121/compiler/rustc_builtin_macros/src/format.rs#L167-L172\n\nThis is only true in the first iteration of the loop, when [`p.clear_expected_tokens()`](https://github.com/rust-lang/rust/blob/b69fe57261086e70aea9d5b58819a1794bf7c121/compiler/rustc_builtin_macros/src/format.rs#L164) is called. In subsequent iterations, `p.expected_tokens` won't be empty, so `p.expect()` won't actually call `unexpected_try_recover()`:\nhttps://github.com/rust-lang/rust/blob/b69fe57261086e70aea9d5b58819a1794bf7c121/compiler/rustc_parse/src/parser/mod.rs#L487-L498\n\nInstead, it will call `expect_one_of()`, which _can_ recover and return `Ok()`. This PR handles this case to fix the ICE in #88770.", "tree": {"sha": "2f0983f6033f3a568ab04ada0bfe7be61fee121d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0983f6033f3a568ab04ada0bfe7be61fee121d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0648eab3686f100c7ab9b0d38472c740079cce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0648eab3686f100c7ab9b0d38472c740079cce4", "html_url": "https://github.com/rust-lang/rust/commit/a0648eab3686f100c7ab9b0d38472c740079cce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0648eab3686f100c7ab9b0d38472c740079cce4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d8da1f4ba24679e92b7939a26c681a5d2d3548", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d8da1f4ba24679e92b7939a26c681a5d2d3548", "html_url": "https://github.com/rust-lang/rust/commit/91d8da1f4ba24679e92b7939a26c681a5d2d3548"}, {"sha": "a8421cacfec5798f600549508545b85003c2143c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8421cacfec5798f600549508545b85003c2143c", "html_url": "https://github.com/rust-lang/rust/commit/a8421cacfec5798f600549508545b85003c2143c"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "1c9c6834c100c5c8c3db35461c19a9d0cec4c38e", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a0648eab3686f100c7ab9b0d38472c740079cce4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0648eab3686f100c7ab9b0d38472c740079cce4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a0648eab3686f100c7ab9b0d38472c740079cce4", "patch": "@@ -164,23 +164,22 @@ fn parse_args<'a>(\n                 p.clear_expected_tokens();\n             }\n \n-            // `Parser::expect` tries to recover using the\n-            // `Parser::unexpected_try_recover` function. This function is able\n-            // to recover if the expected token is a closing delimiter.\n-            //\n-            // As `,` is not a closing delimiter, it will always return an `Err`\n-            // variant.\n-            let mut err = p.expect(&token::Comma).unwrap_err();\n-\n-            match token::TokenKind::Comma.similar_tokens() {\n-                Some(tks) if tks.contains(&p.token.kind) => {\n-                    // If a similar token is found, then it may be a typo. We\n-                    // consider it as a comma, and continue parsing.\n-                    err.emit();\n-                    p.bump();\n+            match p.expect(&token::Comma) {\n+                Err(mut err) => {\n+                    match token::TokenKind::Comma.similar_tokens() {\n+                        Some(tks) if tks.contains(&p.token.kind) => {\n+                            // If a similar token is found, then it may be a typo. We\n+                            // consider it as a comma, and continue parsing.\n+                            err.emit();\n+                            p.bump();\n+                        }\n+                        // Otherwise stop the parsing and return the error.\n+                        _ => return Err(err),\n+                    }\n+                }\n+                Ok(recovered) => {\n+                    assert!(recovered);\n                 }\n-                // Otherwise stop the parsing and return the error.\n-                _ => return Err(err),\n             }\n         }\n         first = false;"}, {"sha": "8095f386fa3615144125bca5a0ebd9897a81789b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0648eab3686f100c7ab9b0d38472c740079cce4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0648eab3686f100c7ab9b0d38472c740079cce4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a0648eab3686f100c7ab9b0d38472c740079cce4", "patch": "@@ -277,7 +277,7 @@ impl<'a> Parser<'a> {\n                 self.struct_span_err(sp, &msg)\n                     .span_suggestion_short(sp, \"change this to `;`\", \";\".to_string(), appl)\n                     .emit();\n-                return Ok(false);\n+                return Ok(true);\n             } else if self.look_ahead(0, |t| {\n                 t == &token::CloseDelim(token::Brace)\n                     || (\n@@ -295,7 +295,7 @@ impl<'a> Parser<'a> {\n                     .span_label(self.token.span, \"unexpected token\")\n                     .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n                     .emit();\n-                return Ok(false);\n+                return Ok(true);\n             }\n         }\n "}, {"sha": "bf89033f560e9da8b477a44384b31d04eabf4328", "filename": "src/test/ui/parser/issue-88770.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a0648eab3686f100c7ab9b0d38472c740079cce4/src%2Ftest%2Fui%2Fparser%2Fissue-88770.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0648eab3686f100c7ab9b0d38472c740079cce4/src%2Ftest%2Fui%2Fparser%2Fissue-88770.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88770.rs?ref=a0648eab3686f100c7ab9b0d38472c740079cce4", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for the ICE described in #88770.\n+\n+// error-pattern:this file contains an unclosed delimiter\n+// error-pattern:expected one of\n+// error-pattern:missing `in` in `for` loop\n+// error-pattern:expected `;`, found `e`\n+\n+fn m(){print!(\"\",(c for&g\n+u\n+e\n+e"}, {"sha": "c7e24155d16929fbb5c02b8fe0b5bba0549bddc7", "filename": "src/test/ui/parser/issue-88770.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a0648eab3686f100c7ab9b0d38472c740079cce4/src%2Ftest%2Fui%2Fparser%2Fissue-88770.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0648eab3686f100c7ab9b0d38472c740079cce4/src%2Ftest%2Fui%2Fparser%2Fissue-88770.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88770.stderr?ref=a0648eab3686f100c7ab9b0d38472c740079cce4", "patch": "@@ -0,0 +1,66 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-88770.rs:11:3\n+   |\n+LL | fn m(){print!(\"\",(c for&g\n+   |       -      -   - unclosed delimiter\n+   |       |      |\n+   |       |      unclosed delimiter\n+   |       unclosed delimiter\n+...\n+LL | e\n+   |   ^\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-88770.rs:11:3\n+   |\n+LL | fn m(){print!(\"\",(c for&g\n+   |       -      -   - unclosed delimiter\n+   |       |      |\n+   |       |      unclosed delimiter\n+   |       unclosed delimiter\n+...\n+LL | e\n+   |   ^\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-88770.rs:11:3\n+   |\n+LL | fn m(){print!(\"\",(c for&g\n+   |       -      -   - unclosed delimiter\n+   |       |      |\n+   |       |      unclosed delimiter\n+   |       unclosed delimiter\n+...\n+LL | e\n+   |   ^\n+\n+error: missing `in` in `for` loop\n+  --> $DIR/issue-88770.rs:8:26\n+   |\n+LL |   fn m(){print!(\"\",(c for&g\n+   |  __________________________^\n+LL | | u\n+   | |_ help: try adding `in` here\n+\n+error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found keyword `for`\n+  --> $DIR/issue-88770.rs:8:21\n+   |\n+LL | fn m(){print!(\"\",(c for&g\n+   |                     ^^^ expected one of 8 possible tokens\n+\n+error: expected `;`, found `e`\n+  --> $DIR/issue-88770.rs:10:2\n+   |\n+LL | e\n+   |  ^ help: add `;` here\n+LL | e\n+   | - unexpected token\n+\n+error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `)`\n+  --> $DIR/issue-88770.rs:11:3\n+   |\n+LL | e\n+   |   ^ expected one of 7 possible tokens\n+\n+error: aborting due to 7 previous errors\n+"}]}