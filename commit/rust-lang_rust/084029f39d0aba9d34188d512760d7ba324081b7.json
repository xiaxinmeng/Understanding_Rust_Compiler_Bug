{"sha": "084029f39d0aba9d34188d512760d7ba324081b7", "node_id": "C_kwDOAAsO6NoAKDA4NDAyOWYzOWQwYWJhOWQzNDE4OGQ1MTI3NjBkN2JhMzI0MDgxYjc", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-09-25T14:06:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-25T14:06:37Z"}, "message": "Rollup merge of #101431 - compiler-errors:move-place-ty-for-move-place-sugg, r=cjgillot\n\nLook at move place's type when suggesting mutable reborrow\n\nNot sure why we are looking at the use site's ty instead of the move site's ty in order to suggest reborrowing the move site, but it was suppressing a perfectly valid reborrow suggestion.\n\nr? `@estebank` who i think touched this last in 520461f1fb2730f8edb17922f3bcc74fccdc52d3, though that was quite a while ago so feel free to reassign.", "tree": {"sha": "98118d2942ead8151b4e2a531e8f042692ab70f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98118d2942ead8151b4e2a531e8f042692ab70f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084029f39d0aba9d34188d512760d7ba324081b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMGBtCRBK7hj4Ov3rIwAAxnYIABq21sgEWqV/kG52xUDc7qU1\nqyGQKSZzVnLmvoD7K6m1pX9MUEJxHd1WKjGSNiiIOyKpDGRJlOjjLCXuDcbvUPz8\nUIaezbCGgacVo1Fwp4MXkXrpKiY78jLHg1k8nWAT0OjOlpndD6g3Ekzuq9y2WSyQ\nbxYxDjz+PYsJjyPLMyehFM5qXeOYY4hoLW7tPZxyvPBS90KMBA1SJmBna5RL7prk\n8aZobPEe/sBmV+TDr1GNNJEEmJG3fDNk06J/ymXE8sx/ed0OWk49/Lary7BVuEmS\nybibOTG1sVUz/BKklyLODW/xM3RIWLms0ZZ8KV4QEjj2oDdtJR7splM2lOeJMuc=\n=oqpp\n-----END PGP SIGNATURE-----\n", "payload": "tree 98118d2942ead8151b4e2a531e8f042692ab70f5\nparent 033f93fbb98c3fb9bd09858f5b822789a4339de8\nparent 7e226e6d3f5dc5c39a222091f7a234c1480e1cbd\nauthor fee1-dead <ent3rm4n@gmail.com> 1664114797 +0800\ncommitter GitHub <noreply@github.com> 1664114797 +0800\n\nRollup merge of #101431 - compiler-errors:move-place-ty-for-move-place-sugg, r=cjgillot\n\nLook at move place's type when suggesting mutable reborrow\n\nNot sure why we are looking at the use site's ty instead of the move site's ty in order to suggest reborrowing the move site, but it was suppressing a perfectly valid reborrow suggestion.\n\nr? `@estebank` who i think touched this last in 520461f1fb2730f8edb17922f3bcc74fccdc52d3, though that was quite a while ago so feel free to reassign.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084029f39d0aba9d34188d512760d7ba324081b7", "html_url": "https://github.com/rust-lang/rust/commit/084029f39d0aba9d34188d512760d7ba324081b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084029f39d0aba9d34188d512760d7ba324081b7/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033f93fbb98c3fb9bd09858f5b822789a4339de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/033f93fbb98c3fb9bd09858f5b822789a4339de8", "html_url": "https://github.com/rust-lang/rust/commit/033f93fbb98c3fb9bd09858f5b822789a4339de8"}, {"sha": "7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd", "html_url": "https://github.com/rust-lang/rust/commit/7e226e6d3f5dc5c39a222091f7a234c1480e1cbd"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "799b3f7f5756fe4c3a33cde4cd0364894ad1542a", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=084029f39d0aba9d34188d512760d7ba324081b7", "patch": "@@ -198,7 +198,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     move_span,\n                     move_spans,\n                     *moved_place,\n-                    Some(used_place),\n                     partially_str,\n                     loop_message,\n                     move_msg,"}, {"sha": "7ccb679d88b2dc021e8fb445d4be31c6177bd920", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=084029f39d0aba9d34188d512760d7ba324081b7", "patch": "@@ -972,7 +972,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_span: Span,\n         move_spans: UseSpans<'tcx>,\n         moved_place: Place<'tcx>,\n-        used_place: Option<PlaceRef<'tcx>>,\n         partially_str: &str,\n         loop_message: &str,\n         move_msg: &str,\n@@ -1060,9 +1059,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n-                        // If we have a `&mut` ref, we need to reborrow.\n-                        if let Some(ty::Ref(_, _, hir::Mutability::Mut)) = used_place\n-                            .map(|used_place| used_place.ty(self.body, self.infcx.tcx).ty.kind())\n+                        // If the moved place was a `&mut` ref, then we can\n+                        // suggest to reborrow it where it was moved, so it\n+                        // will still be valid by the time we get to the usage.\n+                        if let ty::Ref(_, _, hir::Mutability::Mut) =\n+                            moved_place.ty(self.body, self.infcx.tcx).ty.kind()\n                         {\n                             // If we are in a loop this will be suggested later.\n                             if !is_loop_move {"}, {"sha": "5a47f45677ecbfd1b546f4f74f5ec83e833687cf", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084029f39d0aba9d34188d512760d7ba324081b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=084029f39d0aba9d34188d512760d7ba324081b7", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n         if let Some(use_spans) = use_spans {\n             self.explain_captures(\n-                &mut err, span, span, use_spans, move_place, None, \"\", \"\", \"\", false, true,\n+                &mut err, span, span, use_spans, move_place, \"\", \"\", \"\", false, true,\n             );\n         }\n         err"}, {"sha": "31eba074008467132fce9e876ee75016cbe5948b", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/084029f39d0aba9d34188d512760d7ba324081b7/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084029f39d0aba9d34188d512760d7ba324081b7/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs?ref=084029f39d0aba9d34188d512760d7ba324081b7", "patch": "@@ -0,0 +1,26 @@\n+// Tests the suggestion to reborrow the first move site\n+// when we move then borrow a `&mut` ref.\n+\n+struct State;\n+\n+impl IntoIterator for &mut State {\n+    type IntoIter = std::vec::IntoIter<()>;\n+    type Item = ();\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        vec![].into_iter()\n+    }\n+}\n+\n+fn once(f: impl FnOnce()) {}\n+\n+fn fill_memory_blocks_mt(state: &mut State) {\n+    for _ in state {}\n+    //~^ HELP consider creating a fresh reborrow of `state` here\n+    fill_segment(state);\n+    //~^ ERROR borrow of moved value: `state`\n+}\n+\n+fn fill_segment(state: &mut State) {}\n+\n+fn main() {}"}, {"sha": "13a2005e2ef4c40ef38abd3ee3034f7fb972f656", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/084029f39d0aba9d34188d512760d7ba324081b7/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084029f39d0aba9d34188d512760d7ba324081b7/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr?ref=084029f39d0aba9d34188d512760d7ba324081b7", "patch": "@@ -0,0 +1,24 @@\n+error[E0382]: borrow of moved value: `state`\n+  --> $DIR/reborrow-sugg-move-then-borrow.rs:20:18\n+   |\n+LL | fn fill_memory_blocks_mt(state: &mut State) {\n+   |                          ----- move occurs because `state` has type `&mut State`, which does not implement the `Copy` trait\n+LL |     for _ in state {}\n+   |              ----- `state` moved due to this implicit call to `.into_iter()`\n+LL |\n+LL |     fill_segment(state);\n+   |                  ^^^^^ value borrowed here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `state`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+help: consider creating a fresh reborrow of `state` here\n+   |\n+LL |     for _ in &mut *state {}\n+   |              ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}