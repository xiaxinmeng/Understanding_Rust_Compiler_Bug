{"sha": "33e928c9ca456f36ac662657333d6ca046be17bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTkyOGM5Y2E0NTZmMzZhYzY2MjY1NzMzM2Q2Y2EwNDZiZTE3YmQ=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-07T15:54:39Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-07T15:54:39Z"}, "message": "Review comments", "tree": {"sha": "9a9a4d72714bde01c62bf5b3d8e7aa186001670b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a9a4d72714bde01c62bf5b3d8e7aa186001670b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e928c9ca456f36ac662657333d6ca046be17bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e928c9ca456f36ac662657333d6ca046be17bd", "html_url": "https://github.com/rust-lang/rust/commit/33e928c9ca456f36ac662657333d6ca046be17bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e928c9ca456f36ac662657333d6ca046be17bd/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417ac2939a87b84c70f4c8b3c2a343c253a5c5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/417ac2939a87b84c70f4c8b3c2a343c253a5c5d1", "html_url": "https://github.com/rust-lang/rust/commit/417ac2939a87b84c70f4c8b3c2a343c253a5c5d1"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "f5094b169f9ed0e0956568dbe0b9ffda03886091", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=33e928c9ca456f36ac662657333d6ca046be17bd", "patch": "@@ -42,9 +42,6 @@ fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId\n         })\n }\n \n-/// This error indicates that the value in a `timespec` C struct was invalid.\n-pub struct TimespecError;\n-\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Gets an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n@@ -517,14 +514,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_scalar(value, value_place.into())\n     }\n \n-    /// Parse a `timespec` struct and return it as a `std::time::Duration`. The outer `Result` is\n-    /// for interpreter errors encountered while reading memory, and the inner `Result` indicates\n-    /// whether the value in the `timespec` struct is invalid. Some libc functions will return\n-    /// `EINVAL` if the struct's value is invalid.\n+    /// Parse a `timespec` struct and return it as a `std::time::Duration`. It returns `None`\n+    /// if the value in the `timespec` struct is invalid. Some libc functions will return\n+    /// `EINVAL` in this case.\n     fn read_timespec(\n         &mut self,\n         timespec_ptr_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, Result<Duration, TimespecError>> {\n+    ) -> InterpResult<'tcx, Option<Duration>> {\n         let this = self.eval_context_mut();\n         let tp = this.deref_operand(timespec_ptr_op)?;\n         let seconds_place = this.mplace_field(tp, 0)?;\n@@ -537,17 +533,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let seconds: u64 = if let Ok(s) = seconds.try_into() {\n             s\n         } else {\n-            return Ok(Err(TimespecError));\n+            // tv_sec must be non-negative.\n+            return Ok(None);\n         };\n         let nanoseconds: u32 = if let Ok(ns) = nanoseconds.try_into() {\n             if ns >= 1_000_000_000 {\n-                return Ok(Err(TimespecError));\n+                // tv_nsec must not be greater than 999,999,999.\n+                return Ok(None);\n             }\n             ns\n         } else {\n-            return Ok(Err(TimespecError));\n+            // tv_nsec must be non-negative.\n+            return Ok(None);\n         };\n-        Ok(Ok(Duration::new(seconds, nanoseconds)))\n+        Ok(Some(Duration::new(seconds, nanoseconds)))\n     }\n }\n "}, {"sha": "6918fb7fd7eca0316d0e3fc98afcbec56710a03a", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=33e928c9ca456f36ac662657333d6ca046be17bd", "patch": "@@ -1,7 +1,6 @@\n use std::time::SystemTime;\n \n use crate::*;\n-use helpers::TimespecError;\n use stacked_borrows::Tag;\n use thread::Time;\n \n@@ -700,8 +699,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Extract the timeout.\n         let clock_id = cond_get_clock_id(this, cond_op)?.to_i32()?;\n         let duration = match this.read_timespec(abstime_op)? {\n-            Ok(duration) => duration,\n-            Err(TimespecError) => {\n+            Some(duration) => duration,\n+            None => {\n                 let einval = this.eval_libc(\"EINVAL\")?;\n                 this.write_scalar(einval, dest)?;\n                 return Ok(());"}, {"sha": "9d6d6ed38daab68ff5e272cd4a555e8dcfcca459", "filename": "src/shims/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e928c9ca456f36ac662657333d6ca046be17bd/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=33e928c9ca456f36ac662657333d6ca046be17bd", "patch": "@@ -3,7 +3,7 @@ use std::convert::TryFrom;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n-use helpers::{immty_from_int_checked, immty_from_uint_checked, TimespecError};\n+use helpers::{immty_from_int_checked, immty_from_uint_checked};\n use thread::Time;\n \n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n@@ -191,14 +191,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"nanosleep\")?;\n \n         let duration = match this.read_timespec(req_op)? {\n-            Ok(duration) => duration,\n-            Err(TimespecError) => {\n+            Some(duration) => duration,\n+            None => {\n                 let einval = this.eval_libc(\"EINVAL\")?;\n                 this.set_last_error(einval)?;\n                 return Ok(-1);\n             }\n         };\n-        let timeout_time = Time::RealTime(SystemTime::now().checked_add(duration).unwrap());\n+        let timeout_time = Time::Monotonic(Instant::now().checked_add(duration).unwrap());\n \n         let active_thread = this.get_active_thread();\n         this.block_thread(active_thread);"}, {"sha": "d4e52bb3a97b0bb538479acb926b8ac72ad9a571", "filename": "tests/run-pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33e928c9ca456f36ac662657333d6ca046be17bd/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e928c9ca456f36ac662657333d6ca046be17bd/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=33e928c9ca456f36ac662657333d6ca046be17bd", "patch": "@@ -38,6 +38,8 @@ fn test_timed_wait_timeout(clock_id: i32) {\n         let elapsed_time = current_time.elapsed().as_millis();\n         assert!(900 <= elapsed_time && elapsed_time <= 1300);\n \n+        // Test that invalid nanosecond values (above 10^9 or negative) are rejected with the\n+        // correct error code.\n         let invalid_timeout_1 = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: 1_000_000_000 };\n         assert_eq!(\n             libc::pthread_cond_timedwait(\n@@ -56,6 +58,16 @@ fn test_timed_wait_timeout(clock_id: i32) {\n             ),\n             libc::EINVAL\n         );\n+        // Test that invalid second values (negative) are rejected with the correct error code.\n+        let invalid_timeout_3 = libc::timespec { tv_sec: -1, tv_nsec: 0 };\n+        assert_eq!(\n+            libc::pthread_cond_timedwait(\n+                &mut cond as *mut _,\n+                &mut mutex as *mut _,\n+                &invalid_timeout_3\n+            ),\n+            libc::EINVAL\n+        );\n \n         assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n         assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);"}, {"sha": "e76c8573c5162a79d39891eb05c08a771fe67430", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33e928c9ca456f36ac662657333d6ca046be17bd/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e928c9ca456f36ac662657333d6ca046be17bd/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=33e928c9ca456f36ac662657333d6ca046be17bd", "patch": "@@ -8,6 +8,7 @@ fn duration_sanity(diff: Duration) {\n     assert!(diff.as_millis() < 500);\n }\n \n+// Thus far, only `libc::nanosleep`, is implemented, not `c::Sleep`.\n #[cfg(unix)]\n fn test_sleep() {\n     let before = Instant::now();"}]}