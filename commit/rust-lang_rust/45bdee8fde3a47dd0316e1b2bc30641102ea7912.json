{"sha": "45bdee8fde3a47dd0316e1b2bc30641102ea7912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YmRlZThmZGUzYTQ3ZGQwMzE2ZTFiMmJjMzA2NDExMDJlYTc5MTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-05T14:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-05T14:28:32Z"}, "message": "Rollup merge of #76258 - Mark-Simulacrum:check-tests, r=ehuss\n\nx.py check checks tests/examples/benches\n\nThis also adds a check for bootstrap to x.py.\n\nr? @ehuss", "tree": {"sha": "19527e8d5a3517bef8847a106980571d25f3dbb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19527e8d5a3517bef8847a106980571d25f3dbb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45bdee8fde3a47dd0316e1b2bc30641102ea7912", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfU6CRCRBK7hj4Ov3rIwAAdHIIAJ2f1DFIrrDy9+iwBxtn0V4R\nMRZNLsGx8dJjbBi88M2rFAYVTuYMfMT+LQ1ob2T9ryk8p28bgRxw+4U5uvV4APdJ\na0kUOKRqQYHqn2iQRczTZglA41qSRtuDSBsdOL5YVboBk4KDTYYZSOVrkGSLwVMF\nHlelup95epttCMcaoX8PmdQC6rBwAcwMC/IyZ+NiKDCNHKMkjoZXKmxFA6JLY8qz\nknvBcIb7lIzf5OadzvKf+2BLYfmMmMSs0rhHYO9YcjdiVX7z5wCHjBBZVzmRfr7p\nbiG1bMXtiHeLCJkBTyXxkP+7Ot9Ol35JToPDAJ89n/yGR/5lTr0aMtYuQ5e06Iw=\n=VQFT\n-----END PGP SIGNATURE-----\n", "payload": "tree 19527e8d5a3517bef8847a106980571d25f3dbb5\nparent 79b8f59185c09b862757553a037c5f0282d20eed\nparent af133382f20b2e506b9e14b93e714fb76c7f6902\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599316112 +0200\ncommitter GitHub <noreply@github.com> 1599316112 +0200\n\nRollup merge of #76258 - Mark-Simulacrum:check-tests, r=ehuss\n\nx.py check checks tests/examples/benches\n\nThis also adds a check for bootstrap to x.py.\n\nr? @ehuss\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45bdee8fde3a47dd0316e1b2bc30641102ea7912", "html_url": "https://github.com/rust-lang/rust/commit/45bdee8fde3a47dd0316e1b2bc30641102ea7912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45bdee8fde3a47dd0316e1b2bc30641102ea7912/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b8f59185c09b862757553a037c5f0282d20eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b8f59185c09b862757553a037c5f0282d20eed", "html_url": "https://github.com/rust-lang/rust/commit/79b8f59185c09b862757553a037c5f0282d20eed"}, {"sha": "af133382f20b2e506b9e14b93e714fb76c7f6902", "url": "https://api.github.com/repos/rust-lang/rust/commits/af133382f20b2e506b9e14b93e714fb76c7f6902", "html_url": "https://github.com/rust-lang/rust/commit/af133382f20b2e506b9e14b93e714fb76c7f6902"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "4708b207156c97b3e71646a534f02f02553557a2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45bdee8fde3a47dd0316e1b2bc30641102ea7912/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bdee8fde3a47dd0316e1b2bc30641102ea7912/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=45bdee8fde3a47dd0316e1b2bc30641102ea7912", "patch": "@@ -382,7 +382,7 @@ impl<'a> Builder<'a> {\n                 native::Lld\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => {\n-                describe!(check::Std, check::Rustc, check::Rustdoc, check::Clippy)\n+                describe!(check::Std, check::Rustc, check::Rustdoc, check::Clippy, check::Bootstrap)\n             }\n             Kind::Test => describe!(\n                 crate::toolstate::ToolStateCheck,"}, {"sha": "ead0bd0413b9c168f6e0e44a5c5d8cde561081df", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/45bdee8fde3a47dd0316e1b2bc30641102ea7912/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bdee8fde3a47dd0316e1b2bc30641102ea7912/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=45bdee8fde3a47dd0316e1b2bc30641102ea7912", "patch": "@@ -66,6 +66,43 @@ impl Step for Std {\n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n         add_to_sysroot(&builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+\n+        // Then run cargo again, once we've put the rmeta files for the library\n+        // crates into the sysroot. This is needed because e.g., core's tests\n+        // depend on `libtest` -- Cargo presumes it will exist, but it doesn't\n+        // since we initialize with an empty sysroot.\n+        //\n+        // Currently only the \"libtest\" tree of crates does this.\n+\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n+        cargo.arg(\"--all-targets\");\n+\n+        // Explicitly pass -p for all dependencies krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"test\") {\n+            cargo.arg(\"-p\").arg(krate.name);\n+        }\n+\n+        builder.info(&format!(\n+            \"Checking std test/bench/example targets ({} -> {})\",\n+            &compiler.host, target\n+        ));\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder.kind),\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+        );\n     }\n }\n \n@@ -106,6 +143,14 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n+        cargo.arg(\"--all-targets\");\n+\n+        // Explicitly pass -p for all compiler krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"rustc-main\") {\n+            cargo.arg(\"-p\").arg(krate.name);\n+        }\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(\n@@ -149,7 +194,7 @@ macro_rules! tool_check_step {\n \n                 builder.ensure(Rustc { target });\n \n-                let cargo = prepare_tool_cargo(\n+                let mut cargo = prepare_tool_cargo(\n                     builder,\n                     compiler,\n                     Mode::ToolRustc,\n@@ -160,12 +205,14 @@ macro_rules! tool_check_step {\n                     &[],\n                 );\n \n-                println!(\n+                cargo.arg(\"--all-targets\");\n+\n+                builder.info(&format!(\n                     \"Checking {} artifacts ({} -> {})\",\n                     stringify!($name).to_lowercase(),\n                     &compiler.host.triple,\n                     target.triple\n-                );\n+                ));\n                 run_cargo(\n                     builder,\n                     cargo,\n@@ -202,12 +249,24 @@ tool_check_step!(Rustdoc, \"src/tools/rustdoc\", SourceType::InTree);\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n \n+tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree);\n+\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n fn libstd_stamp(builder: &Builder<'_>, compiler: Compiler, target: TargetSelection) -> PathBuf {\n     builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n+/// Cargo's output path for the standard library in a given stage, compiled\n+/// by a particular compiler for the specified target.\n+fn libstd_test_stamp(\n+    builder: &Builder<'_>,\n+    compiler: Compiler,\n+    target: TargetSelection,\n+) -> PathBuf {\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check-test.stamp\")\n+}\n+\n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n fn librustc_stamp(builder: &Builder<'_>, compiler: Compiler, target: TargetSelection) -> PathBuf {"}]}