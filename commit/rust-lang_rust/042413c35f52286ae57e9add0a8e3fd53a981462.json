{"sha": "042413c35f52286ae57e9add0a8e3fd53a981462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjQxM2MzNWY1MjI4NmFlNTdlOWFkZDBhOGUzZmQ1M2E5ODE0NjI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-29T09:25:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-29T09:25:15Z"}, "message": "Keep generic annotations when qualifying things", "tree": {"sha": "18ee5b12d372b75373061591058de360457b0b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ee5b12d372b75373061591058de360457b0b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042413c35f52286ae57e9add0a8e3fd53a981462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042413c35f52286ae57e9add0a8e3fd53a981462", "html_url": "https://github.com/rust-lang/rust/commit/042413c35f52286ae57e9add0a8e3fd53a981462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042413c35f52286ae57e9add0a8e3fd53a981462/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2c379baeeb2f676540368f89d77390c967541f", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2c379baeeb2f676540368f89d77390c967541f", "html_url": "https://github.com/rust-lang/rust/commit/db2c379baeeb2f676540368f89d77390c967541f"}], "stats": {"total": 182, "additions": 169, "deletions": 13}, "files": [{"sha": "d5bc4e574f180063989fb48e394cee275e78555c", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 169, "deletions": 13, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/042413c35f52286ae57e9add0a8e3fd53a981462/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042413c35f52286ae57e9add0a8e3fd53a981462/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=042413c35f52286ae57e9add0a8e3fd53a981462", "patch": "@@ -56,12 +56,14 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         ImportCandidate::QualifierStart(_) => {\n             mark::hit!(qualify_path_qualifier_start);\n             let path = ast::Path::cast(import_assets.syntax_under_caret().clone())?;\n-            let segment = path.segment()?;\n-            QualifyCandidate::QualifierStart(segment)\n+            let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n+            QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n         }\n         ImportCandidate::UnqualifiedName(_) => {\n             mark::hit!(qualify_path_unqualified_name);\n-            QualifyCandidate::UnqualifiedName\n+            let path = ast::Path::cast(import_assets.syntax_under_caret().clone())?;\n+            let generics = path.segment()?.generic_arg_list();\n+            QualifyCandidate::UnqualifiedName(generics)\n         }\n         ImportCandidate::TraitAssocItem(_) => {\n             mark::hit!(qualify_path_trait_assoc_item);\n@@ -96,22 +98,25 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n }\n \n enum QualifyCandidate<'db> {\n-    QualifierStart(ast::PathSegment),\n-    UnqualifiedName,\n+    QualifierStart(ast::PathSegment, Option<ast::GenericArgList>),\n+    UnqualifiedName(Option<ast::GenericArgList>),\n     TraitAssocItem(ast::Path, ast::PathSegment),\n     TraitMethod(&'db RootDatabase, ast::MethodCallExpr),\n }\n \n impl QualifyCandidate<'_> {\n     fn qualify(&self, mut replacer: impl FnMut(String), import: hir::ModPath, item: hir::ItemInNs) {\n+        let import = mod_path_to_ast(&import);\n         match self {\n-            QualifyCandidate::QualifierStart(segment) => {\n-                let import = mod_path_to_ast(&import);\n-                replacer(format!(\"{}::{}\", import, segment));\n+            QualifyCandidate::QualifierStart(segment, generics) => {\n+                let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n+                replacer(format!(\"{}{}::{}\", import, generics, segment));\n+            }\n+            QualifyCandidate::UnqualifiedName(generics) => {\n+                let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n+                replacer(format!(\"{}{}\", import.to_string(), generics));\n             }\n-            QualifyCandidate::UnqualifiedName => replacer(mod_path_to_ast(&import).to_string()),\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n-                let import = mod_path_to_ast(&import);\n                 replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));\n             }\n             &QualifyCandidate::TraitMethod(db, ref mcall_expr) => {\n@@ -124,25 +129,27 @@ impl QualifyCandidate<'_> {\n         db: &RootDatabase,\n         mcall_expr: &ast::MethodCallExpr,\n         mut replacer: impl FnMut(String),\n-        import: hir::ModPath,\n+        import: ast::Path,\n         item: hir::ItemInNs,\n     ) -> Option<()> {\n         let receiver = mcall_expr.receiver()?;\n         let trait_method_name = mcall_expr.name_ref()?;\n+        let generics =\n+            mcall_expr.generic_arg_list().as_ref().map_or_else(String::new, ToString::to_string);\n         let arg_list = mcall_expr.arg_list().map(|arg_list| arg_list.args());\n         let trait_ = item_as_trait(item)?;\n         let method = find_trait_method(db, trait_, &trait_method_name)?;\n         if let Some(self_access) = method.self_param(db).map(|sp| sp.access(db)) {\n-            let import = mod_path_to_ast(&import);\n             let receiver = match self_access {\n                 hir::Access::Shared => make::expr_ref(receiver, false),\n                 hir::Access::Exclusive => make::expr_ref(receiver, true),\n                 hir::Access::Owned => receiver,\n             };\n             replacer(format!(\n-                \"{}::{}{}\",\n+                \"{}::{}{}{}\",\n                 import,\n                 trait_method_name,\n+                generics,\n                 match arg_list.clone() {\n                     Some(args) => make::arg_list(iter::once(receiver).chain(args)),\n                     None => make::arg_list(iter::once(receiver)),\n@@ -1045,4 +1052,153 @@ fn main() {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn keep_generic_annotations() {\n+        check_assist(\n+            qualify_path,\n+            r\"\n+//- /lib.rs crate:dep\n+pub mod generic { pub struct Thing<'a, T>(&'a T); }\n+\n+//- /main.rs crate:main deps:dep\n+fn foo() -> Thin<|>g<'static, ()> {}\n+\n+fn main() {}\n+\",\n+            r\"\n+fn foo() -> dep::generic::Thing<'static, ()> {}\n+\n+fn main() {}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn keep_generic_annotations_leading_colon() {\n+        check_assist(\n+            qualify_path,\n+            r\"\n+//- /lib.rs crate:dep\n+pub mod generic { pub struct Thing<'a, T>(&'a T); }\n+\n+//- /main.rs crate:main deps:dep\n+fn foo() -> Thin<|>g::<'static, ()> {}\n+\n+fn main() {}\n+\",\n+            r\"\n+fn foo() -> dep::generic::Thing::<'static, ()> {}\n+\n+fn main() {}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn associated_struct_const_generic() {\n+        check_assist(\n+            qualify_path,\n+            r\"\n+            mod test_mod {\n+                pub struct TestStruct<T> {}\n+                impl<T> TestStruct<T> {\n+                    const TEST_CONST: u8 = 42;\n+                }\n+            }\n+\n+            fn main() {\n+                TestStruct::<()>::TEST_CONST<|>\n+            }\n+            \",\n+            r\"\n+            mod test_mod {\n+                pub struct TestStruct<T> {}\n+                impl<T> TestStruct<T> {\n+                    const TEST_CONST: u8 = 42;\n+                }\n+            }\n+\n+            fn main() {\n+                test_mod::TestStruct::<()>::TEST_CONST\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn associated_trait_const_generic() {\n+        check_assist(\n+            qualify_path,\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    const TEST_CONST: u8;\n+                }\n+                pub struct TestStruct<T> {}\n+                impl<T> TestTrait for TestStruct<T> {\n+                    const TEST_CONST: u8 = 42;\n+                }\n+            }\n+\n+            fn main() {\n+                test_mod::TestStruct::<()>::TEST_CONST<|>\n+            }\n+            \",\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    const TEST_CONST: u8;\n+                }\n+                pub struct TestStruct<T> {}\n+                impl<T> TestTrait for TestStruct<T> {\n+                    const TEST_CONST: u8 = 42;\n+                }\n+            }\n+\n+            fn main() {\n+                <test_mod::TestStruct::<()> as test_mod::TestTrait>::TEST_CONST\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn trait_method_generic() {\n+        check_assist(\n+            qualify_path,\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_method<T>(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method<T>(&self) {}\n+                }\n+            }\n+\n+            fn main() {\n+                let test_struct = test_mod::TestStruct {};\n+                test_struct.test_meth<|>od::<()>()\n+            }\n+            \",\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_method<T>(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method<T>(&self) {}\n+                }\n+            }\n+\n+            fn main() {\n+                let test_struct = test_mod::TestStruct {};\n+                test_mod::TestTrait::test_method::<()>(&test_struct)\n+            }\n+            \",\n+        );\n+    }\n }"}]}