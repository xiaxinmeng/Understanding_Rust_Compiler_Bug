{"sha": "75e920f847557acef9b6f5425262ea5dc72ed685", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTkyMGY4NDc1NTdhY2VmOWI2ZjU0MjUyNjJlYTVkYzcyZWQ2ODU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-11T04:32:01Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-11T04:32:01Z"}, "message": "Rollup merge of #55630 - petrochenkov:noprelude, r=Centril\n\nresolve: Filter away macro prelude in modules with `#[no_implicit_prelude]` on 2018 edition\n\nThis is a tiny thing.\nFor historical reasons macro prelude (macros from `#[macro_use] extern crate ...`, including `extern crate std`) is still available in modules with `#[no_implicit_prelude]`.\nThis PR provides proper isolation and removes those names from scope.\n\n`#[no_implicit_prelude]` modules still have built-in types (`u8`), built-in attributes (`#[inline]`) and built-in macros (`env!(\"PATH\")`) in scope. We can introduce some `#[no_implicit_prelude_at_all]` to remove those as well, but that's a separate issue.\n\nThe change is done only on 2018 edition for backward compatibility.\nI'm pretty sure this can be done on 2015 as well because `#[no_implicit_prelude]` is rarely used, but I don't want to go through the crater/deprecation process right now, maybe later.\n\ncc https://github.com/rust-lang/rust/issues/53977\nr? @ghost", "tree": {"sha": "217542ec027f7a5cbca1a37d7903e2ba447deda6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217542ec027f7a5cbca1a37d7903e2ba447deda6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e920f847557acef9b6f5425262ea5dc72ed685", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvnsMIACgkQ/vbIBR0O\nATxXNhAAkIEteVwPK70e0trwLhaegs0yP7s6Bx2Ztt+b1HcdEKFTJI/QYT1sVcNI\nqRF2GXSmcID1FPRTvO9FBWIJryJQs65z8of5vcXRd/UOZatYcCPpwTEYIv5vxGj5\ndU2pYyARwQnJZkKI1V/2Wf1F4ISoO3mkd9YEU5lr7RCsIKxH2DPcZZXsLN32bRL0\nfL9upI758IzzVLF2dSv7m/25JrsMhwq8FjPrLP3EQRe8+evCM7auaD2NsbRmpwEu\nwU8Cc23eSCcv/Hk1CboXtobtwxNoNcnL6jRjjC9peX3k4CHhpihqpdZqt+PunwU3\nwXzN+G3fs2zDhew9cFzoYeoEbIcwgJPB1bSOL6VF6SRQvTD604g652p26MnzswBu\nROMjRJtW8ajfWxdilUnyWIwJnK9I6cmVOoLVpO8Shtc3VNgYeNsxno2/oY8Es4H/\nDGM13tSY+ZV3wn9xyyOVTaC3D/x4e8/9w2tmCb2t+Fj61Kwv/cq5ilDVNyOvUAfO\n00LfjeN+gYJDHFDpcFXK+KPRxO5/ft3axuVbJIumlIeDIeygk33b4xxrXiF5R09M\nRaweD0KkM0649+10BWbjAtPVu+WgYvQyriBXmOpxCwAaIis6z+YHpcByXa0hhosy\nocmzINhfEC+8BvdwVowvuG/x4cAluva5sBVX0wasvZg2b781UDw=\n=2mWf\n-----END PGP SIGNATURE-----", "payload": "tree 217542ec027f7a5cbca1a37d7903e2ba447deda6\nparent 17ae50765ea73e2cd05c152f235f3e41efa5f518\nparent 9ed9d6d0d09a690e81841f1fc2e02f16bc9ee2c5\nauthor kennytm <kennytm@gmail.com> 1541910721 +0800\ncommitter kennytm <kennytm@gmail.com> 1541910721 +0800\n\nRollup merge of #55630 - petrochenkov:noprelude, r=Centril\n\nresolve: Filter away macro prelude in modules with `#[no_implicit_prelude]` on 2018 edition\n\nThis is a tiny thing.\nFor historical reasons macro prelude (macros from `#[macro_use] extern crate ...`, including `extern crate std`) is still available in modules with `#[no_implicit_prelude]`.\nThis PR provides proper isolation and removes those names from scope.\n\n`#[no_implicit_prelude]` modules still have built-in types (`u8`), built-in attributes (`#[inline]`) and built-in macros (`env!(\"PATH\")`) in scope. We can introduce some `#[no_implicit_prelude_at_all]` to remove those as well, but that's a separate issue.\n\nThe change is done only on 2018 edition for backward compatibility.\nI'm pretty sure this can be done on 2015 as well because `#[no_implicit_prelude]` is rarely used, but I don't want to go through the crater/deprecation process right now, maybe later.\n\ncc https://github.com/rust-lang/rust/issues/53977\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e920f847557acef9b6f5425262ea5dc72ed685", "html_url": "https://github.com/rust-lang/rust/commit/75e920f847557acef9b6f5425262ea5dc72ed685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e920f847557acef9b6f5425262ea5dc72ed685/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ae50765ea73e2cd05c152f235f3e41efa5f518", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ae50765ea73e2cd05c152f235f3e41efa5f518", "html_url": "https://github.com/rust-lang/rust/commit/17ae50765ea73e2cd05c152f235f3e41efa5f518"}, {"sha": "9ed9d6d0d09a690e81841f1fc2e02f16bc9ee2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed9d6d0d09a690e81841f1fc2e02f16bc9ee2c5", "html_url": "https://github.com/rust-lang/rust/commit/9ed9d6d0d09a690e81841f1fc2e02f16bc9ee2c5"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "efd7e8b610efc787290e7b977c9e81b95f507951", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=75e920f847557acef9b6f5425262ea5dc72ed685", "patch": "@@ -963,6 +963,10 @@ impl Session {\n         self.opts.debugging_opts.teach && self.diagnostic().must_teach(code)\n     }\n \n+    pub fn rust_2015(&self) -> bool {\n+        self.opts.edition == Edition::Edition2015\n+    }\n+\n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n         self.opts.edition >= Edition::Edition2018"}, {"sha": "db5b516e7b23b4c3fe5441a8876098b5e51177d7", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=75e920f847557acef9b6f5425262ea5dc72ed685", "patch": "@@ -663,10 +663,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     binding.map(|binding| (binding, Flags::MODULE, Flags::empty()))\n                 }\n                 WhereToResolve::MacroUsePrelude => {\n-                    match self.macro_use_prelude.get(&ident.name).cloned() {\n-                        Some(binding) => Ok((binding, Flags::PRELUDE, Flags::empty())),\n-                        None => Err(Determinacy::Determined),\n+                    let mut result = Err(Determinacy::Determined);\n+                    if use_prelude || self.session.rust_2015() {\n+                        if let Some(binding) = self.macro_use_prelude.get(&ident.name).cloned() {\n+                            result = Ok((binding, Flags::PRELUDE, Flags::empty()));\n+                        }\n                     }\n+                    result\n                 }\n                 WhereToResolve::BuiltinMacros => {\n                     match self.builtin_macros.get(&ident.name).cloned() {\n@@ -685,7 +688,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::LegacyPluginHelpers => {\n-                    if self.session.plugin_attributes.borrow().iter()\n+                    if (use_prelude || self.session.rust_2015()) &&\n+                       self.session.plugin_attributes.borrow().iter()\n                                                      .any(|(name, _)| ident.name == &**name) {\n                         let binding = (Def::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper),\n                                        ty::Visibility::Public, ident.span, Mark::root())"}, {"sha": "3ad7435fecf29790d20ea7d1b500432b6b48f817", "filename": "src/test/ui/hygiene/no_implicit_prelude-2018.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.rs?ref=75e920f847557acef9b6f5425262ea5dc72ed685", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+#[no_implicit_prelude]\n+mod bar {\n+    fn f() {\n+        ::std::print!(\"\"); // OK\n+        print!(); //~ ERROR cannot find macro `print!` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "370fc9784ad4da3357ec5bf7722d94ef2d4b8d86", "filename": "src/test/ui/hygiene/no_implicit_prelude-2018.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr?ref=75e920f847557acef9b6f5425262ea5dc72ed685", "patch": "@@ -0,0 +1,10 @@\n+error: cannot find macro `print!` in this scope\n+  --> $DIR/no_implicit_prelude-2018.rs:7:9\n+   |\n+LL |         print!(); //~ ERROR cannot find macro `print!` in this scope\n+   |         ^^^^^\n+   |\n+   = help: have you added the `#[macro_use]` on the module/import?\n+\n+error: aborting due to previous error\n+"}, {"sha": "5b6041945abea76a2f9d57e39d0b591a66ab9798", "filename": "src/test/ui/hygiene/no_implicit_prelude.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e920f847557acef9b6f5425262ea5dc72ed685/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs?ref=75e920f847557acef9b6f5425262ea5dc72ed685", "patch": "@@ -21,7 +21,10 @@ mod bar {\n         Vec::new(); //~ ERROR failed to resolve\n         ().clone() //~ ERROR no method named `clone` found\n     }\n-    fn f() { ::foo::m!(); }\n+    fn f() {\n+        ::foo::m!();\n+        println!(); // OK on 2015 edition (at least for now)\n+    }\n }\n \n fn main() {}"}]}