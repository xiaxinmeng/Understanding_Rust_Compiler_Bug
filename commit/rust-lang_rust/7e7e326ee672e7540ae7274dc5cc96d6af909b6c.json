{"sha": "7e7e326ee672e7540ae7274dc5cc96d6af909b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2UzMjZlZTY3MmU3NTQwYWU3Mjc0ZGM1Y2M5NmQ2YWY5MDliNmM=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-04T03:38:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-04T04:46:17Z"}, "message": "Make use of demand::simple instead of manually checking fail expr type.", "tree": {"sha": "b3899894f0ba26e03e16bcfb63089d58420cb15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3899894f0ba26e03e16bcfb63089d58420cb15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7e326ee672e7540ae7274dc5cc96d6af909b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7e326ee672e7540ae7274dc5cc96d6af909b6c", "html_url": "https://github.com/rust-lang/rust/commit/7e7e326ee672e7540ae7274dc5cc96d6af909b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7e326ee672e7540ae7274dc5cc96d6af909b6c/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "html_url": "https://github.com/rust-lang/rust/commit/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f"}], "stats": {"total": 12, "additions": 1, "deletions": 11}, "files": [{"sha": "41a2daf0e448cc645c3c6ea932c639980e404c7f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7e326ee672e7540ae7274dc5cc96d6af909b6c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7e326ee672e7540ae7274dc5cc96d6af909b6c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7e7e326ee672e7540ae7274dc5cc96d6af909b6c", "patch": "@@ -229,11 +229,6 @@ fn type_is_scalar(&@fn_ctxt fcx, &span sp, ty::t typ) -> bool {\n     ret ty::type_is_scalar(fcx.ccx.tcx, typ_s);\n }\n \n-fn type_is_str(&@fn_ctxt fcx, &span sp, ty::t typ) -> bool {\n-    auto typ_s = structurally_resolved_type(fcx, sp, typ);\n-    ret ty::type_is_str(fcx.ccx.tcx, typ_s);    \n-}\n-\n \n // Parses the programmer's textual representation of a type into our internal\n // notion of a type. `getter` is a function that returns the type\n@@ -1667,12 +1662,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                     check_expr(fcx, e);\n                     auto tcx = fcx.ccx.tcx;\n                     auto ety = expr_ty(tcx, e);\n-                    if (!type_is_str(fcx, e.span, ety)) {\n-                        tcx.sess.span_fatal(e.span,\n-                                            #fmt(\"mismatched types: expected \\\n-                                                  str, found %s\",\n-                                                 ty_to_str(tcx, ety)));\n-                    }\n+                    demand::simple(fcx, e.span, ty::mk_str(tcx), ety);\n                 }\n             }\n             write::bot_ty(fcx.ccx.tcx, id);"}]}