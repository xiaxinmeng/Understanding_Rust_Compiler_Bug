{"sha": "8d1e4323b33ca438643b7aeaba330b19829231c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWU0MzIzYjMzY2E0Mzg2NDNiN2FlYWJhMzMwYjE5ODI5MjMxYzI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-19T17:13:21Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-20T03:58:31Z"}, "message": "Rollup merge of #58409 - euclio:impl-trait-wrapping, r=QuietMisdreavus\n\nrustdoc: respect alternate flag when formatting impl trait\n\nFixes #58226.\n\nBefore:\n<img width=\"963\" alt=\"screen shot 2019-02-12 at 3 23 30 pm\" src=\"https://user-images.githubusercontent.com/1372438/52665732-4496ea00-2eda-11e9-9e29-efffe43b2abf.png\">\n\nAfter:\n<img width=\"964\" alt=\"screen shot 2019-02-12 at 3 23 51 pm\" src=\"https://user-images.githubusercontent.com/1372438/52665733-452f8080-2eda-11e9-999a-dd1fb28dee16.png\">", "tree": {"sha": "f46c6c01be5f97473664c68072f3af58633f752b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46c6c01be5f97473664c68072f3af58633f752b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1e4323b33ca438643b7aeaba330b19829231c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxs0GgACgkQ/vbIBR0O\nATyr8Q/9GhFCcEqqtz1Noa0W46go/JOIZLk1a3/AX3SV7ZOD0ShNJXFbcHU849Du\ngiwGWC+j99PdE0uZcKkWEldI45/zv5V7SH/fJ/9zy+oPZFrbMBALJE94unb5JUPp\nz8c1laSagl4d5PbofJIUE2enk/xC67sgwKQy4BFzYwuybAViVdGYKaozfOYBAm5h\nOL9WqH7k/V6DmkQ1aSECQqoDrYaBBYbQIkchDhe9FSuYH8mkZYETIKEIdJIQmmFC\noP4g9z8j2/oTu2dGOW2R/iQvVArk327MUPujIKfvUKAEsCFA3ADsFbQ5DuVEiptv\nPqjQFBwHW0kWy+pjV4eBvCdZPEPwrLwgzqTDH8OGUwQi7RHQDqblEOvjePkTMMwR\nXCdJKUK+PoHJOvO82OZMEl1INyMyPZChksawetbxgcj2qvCWkMO1eUuiwCtqnuER\nb98JdXA9v8sj3lN5nEq3SoTU7IdDQh5LjGmUgf3qw84wmT7rkEaxtiNgeeFMB5UM\ng3XI6HKVzB/OMKvFaDGUlOlzszjJh3WEJttkauLQt6nHX9avSbsTG7ZrlP3ZUE+Q\nXFUpVLrdLu0f/Kq+Zha27ptecONtQO2gLpAcUMAAzPav8UCB818e0+mh4MKcSvxJ\nsEolioItGHqjZRrqP6P61WRdNdIxI1p3SxrYIY5LSq6iGK9aNXY=\n=V9rS\n-----END PGP SIGNATURE-----", "payload": "tree f46c6c01be5f97473664c68072f3af58633f752b\nparent 98a6e720d082b6c936758689c08c3c7dd2e9860e\nparent e827c9ab3c3af14f336ef4ab527fd4a22d0cda80\nauthor kennytm <kennytm@gmail.com> 1550596401 +0800\ncommitter kennytm <kennytm@gmail.com> 1550635111 +0800\n\nRollup merge of #58409 - euclio:impl-trait-wrapping, r=QuietMisdreavus\n\nrustdoc: respect alternate flag when formatting impl trait\n\nFixes #58226.\n\nBefore:\n<img width=\"963\" alt=\"screen shot 2019-02-12 at 3 23 30 pm\" src=\"https://user-images.githubusercontent.com/1372438/52665732-4496ea00-2eda-11e9-9e29-efffe43b2abf.png\">\n\nAfter:\n<img width=\"964\" alt=\"screen shot 2019-02-12 at 3 23 51 pm\" src=\"https://user-images.githubusercontent.com/1372438/52665733-452f8080-2eda-11e9-999a-dd1fb28dee16.png\">\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e4323b33ca438643b7aeaba330b19829231c2", "html_url": "https://github.com/rust-lang/rust/commit/8d1e4323b33ca438643b7aeaba330b19829231c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e4323b33ca438643b7aeaba330b19829231c2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a6e720d082b6c936758689c08c3c7dd2e9860e", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a6e720d082b6c936758689c08c3c7dd2e9860e", "html_url": "https://github.com/rust-lang/rust/commit/98a6e720d082b6c936758689c08c3c7dd2e9860e"}, {"sha": "e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "url": "https://api.github.com/repos/rust-lang/rust/commits/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "html_url": "https://github.com/rust-lang/rust/commit/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "df7835214ebb6d3183a90ab3cbd43ae29b10dd88", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8d1e4323b33ca438643b7aeaba330b19829231c2", "patch": "@@ -49,8 +49,11 @@ pub struct AbiSpace(pub Abi);\n pub struct Function<'a> {\n     /// The declaration to emit.\n     pub decl: &'a clean::FnDecl,\n-    /// The length of the function's \"name\", used to determine line-wrapping.\n-    pub name_len: usize,\n+    /// The length of the function header and name. In other words, the number of characters in the\n+    /// function declaration up to but not including the parentheses.\n+    ///\n+    /// Used to determine line-wrapping.\n+    pub header_len: usize,\n     /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n     pub indent: usize,\n     /// Whether the function is async or not.\n@@ -675,7 +678,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl {}\", GenericBounds(bounds))\n+            if f.alternate() {\n+                write!(f, \"impl {:#}\", GenericBounds(bounds))\n+            } else {\n+                write!(f, \"impl {}\", GenericBounds(bounds))\n+            }\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {\n@@ -844,7 +851,7 @@ impl fmt::Display for clean::FnDecl {\n \n impl<'a> fmt::Display for Function<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &Function { decl, name_len, indent, asyncness } = self;\n+        let &Function { decl, header_len, indent, asyncness } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -899,6 +906,8 @@ impl<'a> fmt::Display for Function<'a> {\n             }\n         }\n \n+        let mut args_plain = format!(\"({})\", args_plain);\n+\n         if decl.variadic {\n             args.push_str(\",<br> ...\");\n             args_plain.push_str(\", ...\");\n@@ -917,13 +926,8 @@ impl<'a> fmt::Display for Function<'a> {\n             output.to_string()\n         };\n \n-        let pad = \" \".repeat(name_len);\n-        let plain = format!(\"{pad}({args}){arrow}\",\n-                        pad = pad,\n-                        args = args_plain,\n-                        arrow = arrow_plain);\n-\n-        let output = if plain.len() > 80 {\n+        let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n+        let output = if declaration_len > 80 {\n             let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n             let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n             format!(\"({args}{close}){arrow}\","}, {"sha": "d037154272db6cdfbb384ffb08e2f841cd8c28c9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8d1e4323b33ca438643b7aeaba330b19829231c2", "patch": "@@ -2984,14 +2984,16 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    let name_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                           VisSpace(&it.visibility),\n-                           ConstnessSpace(f.header.constness),\n-                           UnsafetySpace(f.header.unsafety),\n-                           AsyncSpace(f.header.asyncness),\n-                           AbiSpace(f.header.abi),\n-                           it.name.as_ref().unwrap(),\n-                           f.generics).len();\n+    let header_len = format!(\n+        \"{}{}{}{}{:#}fn {}{:#}\",\n+        VisSpace(&it.visibility),\n+        ConstnessSpace(f.header.constness),\n+        UnsafetySpace(f.header.unsafety),\n+        AsyncSpace(f.header.asyncness),\n+        AbiSpace(f.header.abi),\n+        it.name.as_ref().unwrap(),\n+        f.generics\n+    ).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n@@ -3007,7 +3009,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n            decl = Function {\n               decl: &f.decl,\n-              name_len,\n+              header_len,\n               indent: 0,\n               asyncness: f.header.asyncness,\n            })?;\n@@ -3422,16 +3424,18 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                 href(did).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n-        let mut head_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                                   VisSpace(&meth.visibility),\n-                                   ConstnessSpace(header.constness),\n-                                   UnsafetySpace(header.unsafety),\n-                                   AsyncSpace(header.asyncness),\n-                                   AbiSpace(header.abi),\n-                                   name,\n-                                   *g).len();\n+        let mut header_len = format!(\n+            \"{}{}{}{}{:#}fn {}{:#}\",\n+            VisSpace(&meth.visibility),\n+            ConstnessSpace(header.constness),\n+            UnsafetySpace(header.unsafety),\n+            AsyncSpace(header.asyncness),\n+            AbiSpace(header.abi),\n+            name,\n+            *g\n+        ).len();\n         let (indent, end_newline) = if parent == ItemType::Trait {\n-            head_len += 4;\n+            header_len += 4;\n             (4, false)\n         } else {\n             (0, true)\n@@ -3449,7 +3453,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                generics = *g,\n                decl = Function {\n                    decl: d,\n-                   name_len: head_len,\n+                   header_len,\n                    indent,\n                    asyncness: header.asyncness,\n                },"}, {"sha": "8d8221bcdf29342cd9a66fa6c73e392ec87c99df", "filename": "src/test/rustdoc/wrapping.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Ftest%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e4323b33ca438643b7aeaba330b19829231c2/src%2Ftest%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwrapping.rs?ref=8d1e4323b33ca438643b7aeaba330b19829231c2", "patch": "@@ -0,0 +1,5 @@\n+use std::fmt::Debug;\n+\n+// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust fn\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//pre[@class=\"rust fn\"]/br' 0\n+pub fn foo() -> impl Debug {}"}]}