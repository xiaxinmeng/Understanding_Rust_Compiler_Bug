{"sha": "dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYmY0ZWMyYTFjZmQ5ZjUyMWM5NmI5ZGFiNjJhMmQyN2RlZDFiMjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-17T23:00:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-20T21:24:31Z"}, "message": "librustc: Put `#[unsafe_destructor]` behind a feature gate.\n\nCloses #8142.\n\nThis is not the semantics we want long-term. You can continue to use\n`#[unsafe_destructor]`, but you'll need to add\n`#![feature(unsafe_destructor)]` to the crate attributes.\n\n[breaking-change]", "tree": {"sha": "c8a77671439e27d37b6432d25009a3549f02ec67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8a77671439e27d37b6432d25009a3549f02ec67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "html_url": "https://github.com/rust-lang/rust/commit/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6750eb5a05042fe3fb84708909074f33ad86d3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/6750eb5a05042fe3fb84708909074f33ad86d3ec", "html_url": "https://github.com/rust-lang/rust/commit/6750eb5a05042fe3fb84708909074f33ad86d3ec"}], "stats": {"total": 111, "additions": 78, "deletions": 33}, "files": [{"sha": "def96c62deb006c4e658b9984d1bf0acbe340a5f", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -192,6 +192,8 @@ As an example, we give a reimplementation of owned boxes by wrapping\n reimplementation is as safe as the `Box` type.\n \n ```\n+#![feature(unsafe_destructor)]\n+\n extern crate libc;\n use libc::{c_void, size_t, malloc, free};\n use std::mem;\n@@ -242,10 +244,12 @@ impl<T: Send> Unique<T> {\n // A key ingredient for safety, we associate a destructor with\n // Unique<T>, making the struct manage the raw pointer: when the\n // struct goes out of scope, it will automatically free the raw pointer.\n+//\n // NB: This is an unsafe destructor, because rustc will not normally\n-// allow destructors to be associated with parametrized types, due to\n+// allow destructors to be associated with parameterized types, due to\n // bad interaction with managed boxes. (With the Send restriction,\n-// we don't have this problem.)\n+// we don't have this problem.) Note that the `#[unsafe_destructor]`\n+// feature gate is required to use unsafe destructors.\n #[unsafe_destructor]\n impl<T: Send> Drop for Unique<T> {\n     fn drop(&mut self) {"}, {"sha": "ca5ecc191cc9aa33af1dc6a2eb07ee8d7840adda", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -1940,12 +1940,13 @@ interpreted:\n   enum representation in C is undefined, and this may be incorrect when the C\n   code is compiled with certain flags.\n - `simd` - on certain tuple structs, derive the arithmetic operators, which\n-  lower to the target's SIMD instructions, if any.\n+  lower to the target's SIMD instructions, if any; the `simd` feature gate\n+  is necessary to use this attribute.\n - `static_assert` - on statics whose type is `bool`, terminates compilation\n   with an error if it is not initialized to `true`.\n - `unsafe_destructor` - allow implementations of the \"drop\" language item\n   where the type it is implemented for does not implement the \"send\" language\n-  item.\n+  item; the `unsafe_destructor` feature gate is needed to use this attribute\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute."}, {"sha": "53a79217241bac76cce5d349e7120550b687086e", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -69,7 +69,8 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(phase)]\n+#![feature(phase, unsafe_destructor)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "5ddb088c8c840d4a351b86fe9ddd66b1bb7cb380", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -27,7 +27,10 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n+\n+#![feature(unsafe_destructor)]\n #![allow(missing_doc)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n use std::cell::{Cell, RefCell};\n use std::cmp;"}, {"sha": "ca7de131dc212c902736c87281ac7d60a9cc9238", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -22,7 +22,9 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase, globs)]\n+#![feature(unsafe_destructor)]\n #![no_std]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "3d2382e6208b421f7122f8224c42c76cd846fe2b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -55,8 +55,9 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(globs, macro_rules, managed_boxes, phase, simd)]\n+#![feature(globs, macro_rules, managed_boxes, phase, simd, unsafe_destructor)]\n #![deny(missing_doc)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[cfg(test)] extern crate realcore = \"core\";\n #[cfg(test)] extern crate libc;"}, {"sha": "b44673a24ef053a84851dc975ffeb3a5d497bdd9", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -52,15 +52,17 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n+\n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types)]\n #![allow(deprecated)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n #![feature(default_type_params)]\n \n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the\n //    answer is that you don't need them)\n-#![feature(macro_rules)]\n+#![feature(macro_rules, unsafe_destructor)]\n \n extern crate alloc;\n extern crate libc;"}, {"sha": "07926ee112d5ae70543e68943e46521c8520ce64", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -50,6 +50,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"log_syntax\", Active),\n     (\"trace_macros\", Active),\n     (\"concat_idents\", Active),\n+    (\"unsafe_destructor\", Active),\n \n     (\"simd\", Active),\n     (\"default_type_params\", Active),\n@@ -220,6 +221,17 @@ impl<'a> Visitor<()> for Context<'a> {\n                 }\n             }\n \n+            ast::ItemImpl(..) => {\n+                if attr::contains_name(i.attrs.as_slice(),\n+                                       \"unsafe_destructor\") {\n+                    self.gate_feature(\"unsafe_destructor\",\n+                                      i.span,\n+                                      \"`#[unsafe_destructor]` allows too \\\n+                                       many unsafe patterns and may be \\\n+                                       removed in the future\");\n+                }\n+            }\n+\n             _ => {}\n         }\n "}, {"sha": "fff0ae9e40c0d606a14ec5d0c93effbf42575ea1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -29,8 +29,9 @@ This API is completely unstable and subject to change.\n       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![allow(deprecated)]\n-#![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n-           default_type_params, phase)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n+#![feature(macro_rules, globs, struct_variant, managed_boxes, quote)]\n+#![feature(default_type_params, phase, unsafe_destructor)]\n \n extern crate arena;\n extern crate debug;"}, {"sha": "f5521886f52df2e70b9b15b374497f94f60d2564", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -15,10 +15,12 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n-#![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm,\n-           linkage)]\n+\n+#![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm)]\n+#![feature(linkage, unsafe_destructor)]\n #![no_std]\n #![experimental]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "74caf86a6310242832f360dbb893eb7a61792cc7", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -40,7 +40,7 @@ via `close` and `delete` methods.\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n \n-#![feature(macro_rules)]\n+#![feature(macro_rules, unsafe_destructor)]\n #![deny(unused_result, unused_must_use)]\n #![allow(visible_private_types)]\n "}, {"sha": "a99fa016aef1d3cff0cfe3d1d96742f8fdc2e424", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -103,14 +103,16 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(macro_rules, globs, managed_boxes,\n-           linkage, default_type_params, phase)]\n+\n+#![feature(macro_rules, globs, managed_boxes)]\n+#![feature(linkage, default_type_params, phase, unsafe_destructor)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![allow(deprecated)]\n #![deny(missing_doc)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "a2f22bcaa681682ff43ce01cbf27c195688a139c", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -26,10 +26,11 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(phase, globs, macro_rules)]\n \n+#![feature(phase, globs, macro_rules, unsafe_destructor)]\n #![deny(missing_doc)]\n #![no_std]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "1fbc6e41e55c9b032a728fad75dab0f42bfc3d78", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -27,9 +27,10 @@ This API is completely unstable and subject to change.\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n \n-#![feature(macro_rules, globs, managed_boxes, default_type_params, phase,\n-           quote)]\n+#![feature(macro_rules, globs, managed_boxes, default_type_params, phase)]\n+#![feature(quote, unsafe_destructor)]\n #![allow(deprecated)]\n+#![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n extern crate serialize;\n extern crate term;"}, {"sha": "c6ca0f3ed7bdda799a50543bcc6d27a6a24f17d5", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -11,6 +11,8 @@\n #![crate_id=\"issue_2526#0.2\"]\n #![crate_type = \"lib\"]\n \n+#![feature(unsafe_destructor)]\n+\n struct arc_destruct<T> {\n   _data: int,\n }"}, {"sha": "a3d788238161da439dd0dbde797c8d7a92000a55", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n extern crate collections;\n extern crate time;"}, {"sha": "081dc61d9fc974438f12efe04a46d96ab960d032", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsafe_destructor)]\n+\n extern crate debug;\n \n struct defer<'a> {"}, {"sha": "c086f44d08b9009052e902f0cc0926d2bf255dbd", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n extern crate debug;\n "}, {"sha": "d6e8507d0200bc979b7818016c800e708b3fb850", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n extern crate debug;\n "}, {"sha": "a2adb55a2dd09b68081b5f6aaf55826b03934fbe", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n extern crate debug;\n use std::cell::Cell;"}, {"sha": "8186c6263ca74fa3d268cb4ca238e086b0fdcf63", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n // error-pattern:quux\n "}, {"sha": "b3fb162790072d2168e0a37aea7f68b6b551d422", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsafe_destructor)]\n+\n use std::mem::size_of;\n \n #[unsafe_no_drop_flag]"}, {"sha": "4ba3aa70dfcdfbdf04521319e6c5d2edea109245", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsafe_destructor)]\n+\n struct S<T> {\n     x: T\n }"}, {"sha": "5e0aeeb6bed7612a37f1ecb0eb4e3d41e3a08cee", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{Gc, GC};"}, {"sha": "5eb9453134dea74705ea791c013ebe818377ffeb", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -9,6 +9,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsafe_destructor)]\n+\n pub type Task = int;\n \n // tjc: I don't know why"}, {"sha": "744ab45adc4596c96d7a07692a184e4ccece3022", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{Gc, GC};"}, {"sha": "a69ec1dac7270b41c51ca1384f000123e6c82bcc", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{Gc, GC};"}, {"sha": "186dd0363eeb65d0bbc090c382a0a7a3b1017609", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsafe_destructor)]\n+\n extern crate debug;\n \n trait X {"}, {"sha": "fc29299a4a97ef4097fd2e5edd7d73a453a1c169", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{GC, Gc};"}, {"sha": "efa151c6606c3062751345ac74866e9caa60ec5a", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n // Make sure the destructor is run for newtype structs.\n "}, {"sha": "e9df731fbbf3cb1af07ecb71847c7d81c62b3667", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{GC, Gc};"}, {"sha": "dc6dac15bb2b1fb8547802e00c5b7c2f62f3101b", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n extern crate debug;\n "}, {"sha": "60526faef509bf577919232dd775de68dbe1349c", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{GC, Gc};"}, {"sha": "253a2c0c7123e8bef7820d9dd4e6b5d7c13d7163", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n // Ensures that class dtors run if the object is inside an enum\n // variant"}, {"sha": "2739b898f9f4f46e70bef4aec950e8e7d7513963", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::task;\n use std::gc::{Gc, GC};"}, {"sha": "9e5fc6d0518d17b60352d95014573da5ddb49515", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=dcbf4ec2a1cfd9f521c96b9dab62a2d27ded1b24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(managed_boxes)]\n+#![feature(managed_boxes, unsafe_destructor)]\n \n use std::cell::Cell;\n use std::gc::{Gc, GC};"}]}