{"sha": "1e2458e1baf987ee67b4c48c0583dfad65f7dcd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMjQ1OGUxYmFmOTg3ZWU2N2I0YzQ4YzA1ODNkZmFkNjVmN2RjZDc=", "commit": {"author": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-26T13:25:31Z"}, "committer": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-26T13:25:31Z"}, "message": "Add is_whitespace and is_alphanumeric to str.\n\nThe other methods from `UnicodeStr` are already stable inherent\nmethods on str, but these have not been included.", "tree": {"sha": "819b08a43351240eac08243c7c5d341a3054d89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/819b08a43351240eac08243c7c5d341a3054d89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSrtBlUz85gHk4onJKSU3shEQpoSwUCWrj06AAKCRCSU3shEQpo\nS0uvAQDD5NIPmLNPaNA6kCcQTYAxmwh+74x60J12wF2pnC4V1gEAoiN1Ra5TTyQv\nfG1rxsyQs8azoiWPi66N+gu+ZvgmTwM=\n=lgwq\n-----END PGP SIGNATURE-----", "payload": "tree 819b08a43351240eac08243c7c5d341a3054d89d\nparent 5e4603f99066eaf2c1cf19ac3afbac9057b1e177\nauthor boats <boats@mozilla.com> 1522070731 -0700\ncommitter boats <boats@mozilla.com> 1522070731 -0700\n\nAdd is_whitespace and is_alphanumeric to str.\n\nThe other methods from `UnicodeStr` are already stable inherent\nmethods on str, but these have not been included.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7", "html_url": "https://github.com/rust-lang/rust/commit/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7/comments", "author": null, "committer": null, "parents": [{"sha": "5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "html_url": "https://github.com/rust-lang/rust/commit/5e4603f99066eaf2c1cf19ac3afbac9057b1e177"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d5ef41df0d850d5804299a328f617f411f3abdd2", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2458e1baf987ee67b4c48c0583dfad65f7dcd7/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=1e2458e1baf987ee67b4c48c0583dfad65f7dcd7", "patch": "@@ -2122,6 +2122,48 @@ impl str {\n         unsafe { String::from_utf8_unchecked(buf) }\n     }\n \n+    /// Returns true if this `str` is entirely whitespace, and false otherwise.\n+    ///\n+    /// 'Whitespace' is defined according to the terms of the Unicode Derived Core\n+    /// Property `White_Space`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert!(\"    \\t \".is_whitespace());\n+    ///\n+    /// // a non-breaking space\n+    /// assert!(\"\\u{A0}\".is_whitespace());\n+    ///\n+    /// assert!(!\"   \u8d8a\".is_whitespace());\n+    /// ```\n+    #[stable(feature = \"unicode_methods_on_intrinsics\", since = \"1.27.0\")]\n+    #[inline]\n+    pub fn is_whitespace(&self) -> bool {\n+        UnicodeStr::is_whitespace(self)\n+    }\n+\n+    /// Returns true if this `str` is entirely alphanumeric, and false otherwise.\n+    ///\n+    /// 'Alphanumeric'-ness is defined in terms of the Unicode General Categories\n+    /// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert!(\"\u06637\u09ecK\u0648\u85cf\".is_alphanumeric());\n+    /// assert!(!\"\u00be\u2460\".is_alphanumeric());\n+    /// ```\n+    #[stable(feature = \"unicode_methods_on_intrinsics\", since = \"1.27.0\")]\n+    #[inline]\n+    pub fn is_alphanumeric(&self) -> bool {\n+        UnicodeStr::is_alphanumeric(self)\n+    }\n+\n     /// Checks if all characters in this string are within the ASCII range.\n     ///\n     /// # Examples"}]}