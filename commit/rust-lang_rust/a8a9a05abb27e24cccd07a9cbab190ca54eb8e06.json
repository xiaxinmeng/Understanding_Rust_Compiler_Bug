{"sha": "a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTlhMDVhYmIyN2UyNGNjY2QwN2E5Y2JhYjE5MGNhNTRlYjhlMDY=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-22T14:31:51Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Convert codegen-unit tests to use `start` instead of `main`\n\nThe new Termination traits brings in the unwinding machinery and that\nblows up the required `TRANS_ITEM`s.", "tree": {"sha": "caaf83f8cb834e095c6b1dbe12783bb210974f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caaf83f8cb834e095c6b1dbe12783bb210974f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "html_url": "https://github.com/rust-lang/rust/commit/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "html_url": "https://github.com/rust-lang/rust/commit/c7a57d285517f1e22d34ace98fbb0c64e40b12bc"}], "stats": {"total": 602, "additions": 148, "deletions": 454}, "files": [{"sha": "320be27819812960490598bf1cb21bde455e0ab0", "filename": "src/test/codegen-units/item-collection/cross-crate-closures.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -17,12 +17,14 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_extern_closures.rs\n extern crate cgu_extern_closures;\n \n-//~ TRANS_ITEM fn cross_crate_closures::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn cross_crate_closures::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]\n     //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]::{{closure}}[0]\n@@ -35,6 +37,8 @@ fn main() {\n     // Nothing should be generated for this call, we just link to the instance\n     // in the extern crate.\n     let _ = cgu_extern_closures::non_inlined_fn(6, 7);\n+\n+    0\n }\n \n //~ TRANS_ITEM drop-glue i8"}, {"sha": "bcb3b7b1dadf485c491efec11b63b8f97729433a", "filename": "src/test/codegen-units/item-collection/cross-crate-generic-functions.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,32 +12,14 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_generic_function.rs\n extern crate cgu_generic_function;\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ cross_crate_generic_functions0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ cross_crate_generic_functions0[Internal]\n-//~ TRANS_ITEM fn cross_crate_generic_functions::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn cross_crate_generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn cgu_generic_function::bar[0]<u32>\n     //~ TRANS_ITEM fn cgu_generic_function::foo[0]<u32>\n     let _ = cgu_generic_function::foo(1u32);\n@@ -48,4 +30,6 @@ fn main()\n \n     // This should not introduce a codegen item\n     let _ = cgu_generic_function::exported_but_not_generic(3);\n+\n+    0\n }"}, {"sha": "910ae000848e59860888af9490fa827dc5459c3f", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,34 +12,16 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_export_trait_method.rs\n extern crate cgu_export_trait_method;\n \n use cgu_export_trait_method::Trait;\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ cross_crate_trait_method0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ cross_crate_trait_method0[Internal]\n-//~ TRANS_ITEM fn cross_crate_trait_method::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn cross_crate_trait_method::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     // The object code of these methods is contained in the external crate, so\n     // calling them should *not* introduce codegen items in the current crate.\n     let _: (u32, u32) = Trait::without_default_impl(0);\n@@ -74,4 +56,6 @@ fn main()\n     let _: (char, char) = Trait::without_default_impl_generic('c');\n     //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<bool>\n     let _: (char, bool) = Trait::without_default_impl_generic(false);\n+\n+    0\n }"}, {"sha": "52af81650329cdfe3064d0d90f335b3febe269e4", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,8 @@\n // compile-flags:-Zprint-trans-items=eager\n // compile-flags:-Zinline-in-all-cgus\n \n+#![feature(start)]\n+\n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<drop_in_place_intrinsic::StructWithDtor[0]> @@ drop_in_place_intrinsic0[Internal]\n struct StructWithDtor(u32);\n \n@@ -20,32 +22,16 @@ impl Drop for StructWithDtor {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ drop_in_place_intrinsic0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ drop_in_place_intrinsic0[Internal]\n-//~ TRANS_ITEM fn drop_in_place_intrinsic::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn drop_in_place_intrinsic::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<[drop_in_place_intrinsic::StructWithDtor[0]; 2]> @@ drop_in_place_intrinsic0[Internal]\n     let x = [StructWithDtor(0), StructWithDtor(1)];\n \n     drop_slice_in_place(&x);\n+\n+    0\n }\n \n //~ TRANS_ITEM fn drop_in_place_intrinsic::drop_slice_in_place[0]"}, {"sha": "65707c1aa4d65ce2b344962ef684be9637486a50", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn take_fn_once<T1, T2, F: FnOnce(T1, T2)>(f: F, x: T1, y: T2) {\n     (f)(x, y)\n@@ -23,27 +24,9 @@ fn take_fn_pointer<T1, T2>(f: fn(T1, T2), x: T1, y: T2) {\n     (f)(x, y)\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ function_as_argument0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ function_as_argument0[Internal]\n-//~ TRANS_ITEM fn function_as_argument::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn function_as_argument::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn function_as_argument::take_fn_once[0]<u32, &str, fn(u32, &str)>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<u32, &str>\n@@ -62,4 +45,6 @@ fn main() {\n     //~ TRANS_ITEM fn function_as_argument::take_fn_pointer[0]<f32, i64>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<f32, i64>\n     take_fn_pointer(function, 0f32, 0i64);\n+\n+    0\n }"}, {"sha": "d3d9aa3aefc77313a933939236db2973cc81d712", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n struct StructWithDrop<T1, T2> {\n     x: T1,\n@@ -53,27 +54,9 @@ impl Drop for NonGenericWithDrop {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ generic_drop_glue0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn generic_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::StructWithDrop[0]<i8, char>> @@ generic_drop_glue0[Internal]\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<i8, char>\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n@@ -113,4 +96,6 @@ fn main() {\n         EnumNoDrop::A(x) => x,\n         EnumNoDrop::B(x) => x as f64\n     };\n+\n+    0\n }"}, {"sha": "8efe4b2762a564a31de7260955c1e121bb0d6360", "filename": "src/test/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn foo1<T1>(a: T1) -> (T1, u32) {\n     (a, 1)\n@@ -31,27 +32,9 @@ pub fn lifetime_only<'a>(a: &'a u32) -> &'a u32 {\n     a\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ generic_functions0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ generic_functions0[Internal]\n-//~ TRANS_ITEM fn generic_functions::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn generic_functions::foo1[0]<i32>\n     let _ = foo1(2i32);\n     //~ TRANS_ITEM fn generic_functions::foo1[0]<i64>\n@@ -78,4 +61,6 @@ fn main() {\n     let _ = foo3(0i16, \"a\", 2usize);\n     //~ TRANS_ITEM fn generic_functions::foo3[0]<char, (), ()>\n     let _ = foo3('v', (), ());\n+\n+    0\n }"}, {"sha": "d1ee8ee624c28cbdbaa309677b7556a872eb964e", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n struct Struct<T> {\n     x: T,\n@@ -50,27 +51,9 @@ impl<'a> LifeTimeOnly<'a> {\n     pub fn non_instantiated<T>(&self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ generic_impl0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ generic_impl0[Internal]\n-//~ TRANS_ITEM fn generic_impl::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_impl::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<i32>\n     //~ TRANS_ITEM fn generic_impl::id[0]<i32>\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<i32, i16>\n@@ -94,4 +77,6 @@ fn main() {\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<generic_impl::Struct[0]<&str>>\n     //~ TRANS_ITEM fn generic_impl::id[0]<generic_impl::Struct[0]<&str>>\n     let _ = (Struct::new(Struct::new(\"str\")).f)(Struct::new(\"str\"));\n+\n+    0\n }"}, {"sha": "c07d26c3f8d8b7693d117a8264474df39093e37c", "filename": "src/test/codegen-units/item-collection/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait SomeTrait {\n     fn foo(&self);\n@@ -28,26 +29,10 @@ pub fn generic_function<T>(x: T) -> (T, i32) {\n     (x, 0)\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ impl_in_non_instantiated_generic0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ impl_in_non_instantiated_generic0[Internal]\n-//~ TRANS_ITEM fn impl_in_non_instantiated_generic::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn impl_in_non_instantiated_generic::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     0i64.foo();\n+\n+    0\n }"}, {"sha": "2e1138ef1283ef119f8d772f70f0e147700c8192", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait Trait {\n     fn foo(&self) -> u32;\n@@ -28,27 +29,9 @@ impl<T> Trait for Struct<T> {\n     fn bar(&self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ instantiation_through_vtable0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ instantiation_through_vtable0[Internal]\n-//~ TRANS_ITEM fn instantiation_through_vtable::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn instantiation_through_vtable::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let s1 = Struct { _a: 0u32 };\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<instantiation_through_vtable::Struct[0]<u32>> @@ instantiation_through_vtable0[Internal]\n@@ -61,4 +44,6 @@ fn main() {\n     //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u64>\n     //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u64>\n     let _ = &s1 as &Trait;\n+\n+    0\n }"}, {"sha": "04b54de3ce23e207fd6e2a50fbdee51c1934eddd", "filename": "src/test/codegen-units/item-collection/items-within-generic-items.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn generic_fn<T>(a: T) -> (T, i32) {\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]::nested_fn[0]\n@@ -31,31 +32,15 @@ fn generic_fn<T>(a: T) -> (T, i32) {\n     return (a, x + nested_fn(0));\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ items_within_generic_items0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ items_within_generic_items0[Internal]\n-//~ TRANS_ITEM fn items_within_generic_items::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn items_within_generic_items::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<i64>\n     let _ = generic_fn(0i64);\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<u16>\n     let _ = generic_fn(0u16);\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<i8>\n     let _ = generic_fn(0i8);\n+\n+    0\n }"}, {"sha": "f0121d56cec6068c338e188d34f9c5888bbe1c88", "filename": "src/test/codegen-units/item-collection/non-generic-closures.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -17,6 +17,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn non_generic_closures::temporary[0]\n fn temporary() {\n@@ -52,12 +53,15 @@ fn assigned_to_variable_executed_directly() {\n     f(4);\n }\n \n-//~ TRANS_ITEM fn non_generic_closures::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_closures::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     temporary();\n     assigned_to_variable_but_not_executed();\n     assigned_to_variable_executed_directly();\n     assigned_to_variable_executed_indirectly();\n+\n+    0\n }\n \n //~ TRANS_ITEM fn non_generic_closures::run_closure[0]"}, {"sha": "bf084aa96eafec1de7874c0b7d9ff3924210a6a0", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<non_generic_drop_glue::StructWithDrop[0]> @@ non_generic_drop_glue0[Internal]\n struct StructWithDrop {\n@@ -42,27 +43,9 @@ enum EnumNoDrop {\n     A(i32)\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ non_generic_drop_glue0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ non_generic_drop_glue0[Internal]\n-//~ TRANS_ITEM fn non_generic_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = StructWithDrop { x: 0 }.x;\n     let _ = StructNoDrop { x: 0 }.x;\n     let _ = match EnumWithDrop::A(0) {\n@@ -71,4 +54,6 @@ fn main() {\n     let _ = match EnumNoDrop::A(0) {\n         EnumNoDrop::A(x) => x\n     };\n+\n+    0\n }"}, {"sha": "8c487db5c96111a3772642ea137f76cdaec23706", "filename": "src/test/codegen-units/item-collection/non-generic-functions.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn non_generic_functions::foo[0]\n fn foo() {\n@@ -69,30 +70,14 @@ impl Struct {\n     }\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ non_generic_functions0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ non_generic_functions0[Internal]\n-//~ TRANS_ITEM fn non_generic_functions::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     foo();\n     bar();\n     Struct::foo();\n     let x = Struct { _x: 0 };\n     x.bar();\n+\n+    0\n }"}, {"sha": "5ff7c3480b12653c7b3b8272d12e62a577dc823b", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -11,32 +11,18 @@\n // compile-flags:-Zprint-trans-items=eager\n // ignore-tidy-linelength\n \n+#![feature(start)]\n+\n pub static FN : fn() = foo::<i32>;\n \n pub fn foo<T>() { }\n \n //~ TRANS_ITEM fn static_init::foo[0]<i32>\n //~ TRANS_ITEM static static_init::FN[0]\n \n-fn main() { }\n+//~ TRANS_ITEM fn static_init::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    0\n+}\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ static_init0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ static_init0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ static_init0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ static_init0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ static_init0[Internal]\n-//~ TRANS_ITEM fn static_init::main[0]"}, {"sha": "11df1da3a78b959b2dc510e2ad0639cf1b2e0ffa", "filename": "src/test/codegen-units/item-collection/statics-and-consts.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n static STATIC1: i64 = {\n     const STATIC1_CONST1: i64 = 2;\n@@ -47,9 +48,13 @@ fn foo() {\n     };\n }\n \n-fn main() {\n+//~ TRANS_ITEM fn statics_and_consts::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     foo();\n     let _ = STATIC1;\n+\n+    0\n }\n \n //~ TRANS_ITEM static statics_and_consts::STATIC1[0]\n@@ -58,24 +63,3 @@ fn main() {\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[0]\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[1]\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[2]\n-\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ statics_and_consts0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ statics_and_consts0[Internal]\n-//~ TRANS_ITEM fn statics_and_consts::main[0]"}, {"sha": "8eb33dd647f64cf872faa721f8914ad8557b9feb", "filename": "src/test/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n pub trait SomeTrait {\n     fn foo(&self);\n@@ -55,27 +56,9 @@ impl<T> SomeGenericTrait<T> for f32 {\n     fn bar<T2>(&self, _: T, _: T2) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ trait_implementations0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ trait_implementations0[Internal]\n-//~ TRANS_ITEM fn trait_implementations::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_implementations::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n    //~ TRANS_ITEM fn trait_implementations::{{impl}}[1]::bar[0]<char>\n    0i32.bar('x');\n \n@@ -96,4 +79,6 @@ fn main() {\n \n    //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<&str, &str>\n    0f32.bar(\"&str\", \"&str\");\n+\n+   0\n }"}, {"sha": "10b216303087ce30bb3072c2ef2c9b31436416f0", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait Trait : Sized {\n     fn foo(self) -> Self { self }\n@@ -36,27 +37,9 @@ fn take_foo_mut<T, F: FnMut(T) -> T>(mut f: F, arg: T) -> T {\n     (f)(arg)\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ trait_method_as_argument0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ trait_method_as_argument0[Internal]\n-//~ TRANS_ITEM fn trait_method_as_argument::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_method_as_argument::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<u32, fn(u32) -> u32>\n     //~ TRANS_ITEM fn trait_method_as_argument::{{impl}}[0]::foo[0]\n     //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32) -> u32, (u32)>\n@@ -82,4 +65,6 @@ fn main() {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_mut[0]<char, fn(char) -> char>\n     //~ TRANS_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(u32) -> u32, (u32)>\n     take_foo_mut(Trait::foo, 'c');\n+\n+    0\n }"}, {"sha": "a6ae3765b2ed70d17e50762281cefbefaa40099b", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait SomeTrait {\n     fn foo(&self) { }\n@@ -46,27 +47,9 @@ impl<T1> SomeGenericTrait<T1> for u32 {\n     // since nothing is monomorphic here, nothing should be generated unless used somewhere.\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ trait_method_default_impl0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ trait_method_default_impl0[Internal]\n-//~ TRANS_ITEM fn trait_method_default_impl::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_method_default_impl::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn trait_method_default_impl::SomeTrait[0]::bar[0]<i8, char>\n     let _ = 1i8.bar('c');\n \n@@ -84,4 +67,6 @@ fn main() {\n \n     //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i16, ()>\n     0u32.bar(0i16, ());\n+\n+    0\n }"}, {"sha": "57cd10187a2679fc25f9b34f1d6525d4f8d7f8a4", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::Root[0]> @@ transitive_drop_glue0[Internal]\n struct Root(Intermediate);\n@@ -34,28 +35,9 @@ impl<T> Drop for LeafGen<T> {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ transitive_drop_glue0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ transitive_drop_glue0[Internal]\n-//~ TRANS_ITEM fn transitive_drop_glue::main[0]\n-fn main() {\n-\n+//~ TRANS_ITEM fn transitive_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = Root(Intermediate(Leaf));\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::RootGen[0]<u32>> @@ transitive_drop_glue0[Internal]\n@@ -69,4 +51,6 @@ fn main() {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::LeafGen[0]<i16>> @@ transitive_drop_glue0[Internal]\n     //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<i16>\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n+\n+    0\n }"}, {"sha": "a5f2409b8aea3ab4f023ccc70ea69fda85e9bbe1", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<tuple_drop_glue::Dropped[0]> @@ tuple_drop_glue0[Internal]\n struct Dropped;\n@@ -22,31 +23,15 @@ impl Drop for Dropped {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ tuple_drop_glue0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ tuple_drop_glue0[Internal]\n-//~ TRANS_ITEM fn tuple_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn tuple_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, tuple_drop_glue::Dropped[0])> @@ tuple_drop_glue0[Internal]\n     let x = (0u32, Dropped);\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(i16, (tuple_drop_glue::Dropped[0], bool))> @@ tuple_drop_glue0[Internal]\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(tuple_drop_glue::Dropped[0], bool)> @@ tuple_drop_glue0[Internal]\n     let x = (0i16, (Dropped, true));\n+\n+    0\n }"}, {"sha": "87d2581e1f81b76808e8f7a67be8e41b9b829466", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -15,6 +15,7 @@\n #![deny(dead_code)]\n #![feature(coerce_unsized)]\n #![feature(unsize)]\n+#![feature(start)]\n \n use std::marker::Unsize;\n use std::ops::CoerceUnsized;\n@@ -53,28 +54,9 @@ struct Wrapper<T: ?Sized>(*const T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ unsizing0[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ unsizing0[Internal]\n-//~ TRANS_ITEM fn unsizing::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn unsizing::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     // simple case\n     let bool_sized = &true;\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<bool> @@ unsizing0[Internal]\n@@ -102,4 +84,6 @@ fn main()\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ unsizing0[Internal]\n     //~ TRANS_ITEM fn unsizing::{{impl}}[3]::foo[0]\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n+\n+    0\n }"}, {"sha": "aa01289de592cec8ee0a307016d6d04dc2dd2fcc", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -19,6 +19,7 @@\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/methods-are-with-self-type\n \n #![allow(dead_code)]\n+#![feature(start)]\n \n struct SomeType;\n \n@@ -63,9 +64,9 @@ mod type2 {\n     pub struct Struct;\n }\n \n-//~ TRANS_ITEM fn methods_are_with_self_type::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn methods_are_with_self_type::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[1]::method[0]<u32, u64> @@ methods_are_with_self_type.volatile[WeakODR]\n     SomeGenericType(0u32, 0u64).method();\n     //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[1]::associated_fn[0]<char, &str> @@ methods_are_with_self_type.volatile[WeakODR]\n@@ -80,6 +81,8 @@ fn main()\n     type1::Struct.default();\n     //~ TRANS_ITEM fn methods_are_with_self_type::Trait[0]::default[0]<methods_are_with_self_type::type2[0]::Struct[0]> @@ methods_are_with_self_type-type2.volatile[WeakODR]\n     type2::Struct.default();\n+\n+    0\n }\n \n //~ TRANS_ITEM drop-glue i8"}, {"sha": "d0acddda63714b9aae34e7609118f0cb0a756758", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a9a05abb27e24cccd07a9cbab190ca54eb8e06/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=a8a9a05abb27e24cccd07a9cbab190ca54eb8e06", "patch": "@@ -18,6 +18,8 @@\n // This test case makes sure, that references made through constants are\n // recorded properly in the InliningMap.\n \n+#![feature(start)]\n+\n mod mod1 {\n     pub trait Trait1 {\n         fn do_something(&self) {}\n@@ -38,7 +40,7 @@ mod mod1 {\n \n     fn id<T>(x: T) -> T { x }\n \n-    // These are referenced, so they produce trans-items (see main())\n+    // These are referenced, so they produce trans-items (see start())\n     pub const TRAIT1_REF: &'static Trait1 = &0u32 as &Trait1;\n     pub const TRAIT1_GEN_REF: &'static Trait1Gen<u8> = &0u32 as &Trait1Gen<u8>;\n     pub const ID_CHAR: fn(char) -> char = id::<char>;\n@@ -68,27 +70,9 @@ mod mod1 {\n     pub const ID_I64: fn(i64) -> i64 = id::<i64>;\n }\n \n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::align[0] @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::from_size_align_unchecked[0] @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn alloc::allocator[0]::{{impl}}[0]::size[0] @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::box_free[0]<core::any[0]::Any[0]> @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn alloc::heap[0]::{{impl}}[0]::dealloc[0] @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn core::mem[0]::uninitialized[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ std-panicking.volatile[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::any[0]::Any[0]> @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<core::result[0]::Result[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>>> @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::read[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ std-panicking.volatile[Internal]\n-//~ TRANS_ITEM fn core::ptr[0]::write[0]<i32> @@ std-panicking.volatile[Internal]\n-//~ TRANS_ITEM fn core::result[0]::{{impl}}[0]::unwrap_or[0]<i32, alloc::boxed[0]::Box[0]<core::any[0]::Any[0]>> @@ std-rt.volatile[Internal]\n-//~ TRANS_ITEM fn std::panic[0]::catch_unwind[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ std-panic.volatile[External]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]::do_call[0]<std::rt[0]::lang_start[0]::{{closure}}[0]<()>, i32> @@ std-panicking.volatile[Internal]\n-//~ TRANS_ITEM fn std::panicking[0]::try[0]<i32, std::rt[0]::lang_start[0]::{{closure}}[0]<()>> @@ std-panicking.volatile[External]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, fn()> @@ std-sys_common-backtrace.volatile[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]::{{closure}}[0]<(), i32, extern \"rust-call\" fn(()) -> i32, &fn()> @@ std-panicking.volatile[Internal]\n-//~ TRANS_ITEM fn std::rt[0]::lang_start[0]<()> @@ std-rt.volatile[External]\n-//~ TRANS_ITEM fn std::sys_common[0]::backtrace[0]::__rust_begin_short_backtrace[0]<std::rt[0]::lang_start[0]::{{closure}}[0]::{{closure}}[0]<()>, i32> @@ std-sys_common-backtrace.volatile[External]\n-//~ TRANS_ITEM fn vtable_through_const::main[0] @@ vtable_through_const[Internal]\n-fn main() {\n+//~ TRANS_ITEM fn vtable_through_const::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ vtable_through_const[Internal]\n \n     // Since Trait1::do_something() is instantiated via its default implementation,\n@@ -109,4 +93,6 @@ fn main() {\n \n     //~ TRANS_ITEM fn vtable_through_const::mod1[0]::id[0]<char> @@ vtable_through_const-mod1.volatile[External]\n     mod1::ID_CHAR('x');\n+\n+    0\n }"}]}