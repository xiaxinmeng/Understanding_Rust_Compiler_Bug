{"sha": "877cfbacf98d9d803aa5e0f54be560c7da7acbca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2NmYmFjZjk4ZDlkODAzYWE1ZTBmNTRiZTU2MGM3ZGE3YWNiY2E=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T02:21:43Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T02:21:43Z"}, "message": "Started to refactor the trigger of the trait_impl completion.", "tree": {"sha": "f742916f028079c0a2a60134448d597cbabd65ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f742916f028079c0a2a60134448d597cbabd65ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877cfbacf98d9d803aa5e0f54be560c7da7acbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877cfbacf98d9d803aa5e0f54be560c7da7acbca", "html_url": "https://github.com/rust-lang/rust/commit/877cfbacf98d9d803aa5e0f54be560c7da7acbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877cfbacf98d9d803aa5e0f54be560c7da7acbca/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f130e7ef8fea374bbcfb2c9c60009f558ce3ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f130e7ef8fea374bbcfb2c9c60009f558ce3ecf", "html_url": "https://github.com/rust-lang/rust/commit/6f130e7ef8fea374bbcfb2c9c60009f558ce3ecf"}], "stats": {"total": 110, "additions": 77, "deletions": 33}, "files": [{"sha": "b1017e57a696e77a2324e07bca17380181f3595a", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 77, "deletions": 33, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/877cfbacf98d9d803aa5e0f54be560c7da7acbca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877cfbacf98d9d803aa5e0f54be560c7da7acbca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=877cfbacf98d9d803aa5e0f54be560c7da7acbca", "patch": "@@ -16,19 +16,63 @@ use ra_syntax::{\n use ra_assists::utils::get_missing_impl_items;\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    // it is possible to have a parent `fn` and `impl` block. Ignore completion\n-    // attempts from within a `fn` block.\n-    if ctx.function_syntax.is_some() {\n-        return;\n-    }\n+    let trigger = ctx.token\n+        .ancestors()\n+        .find(|p| match p.kind() {\n+            SyntaxKind::FN_DEF |\n+            SyntaxKind::TYPE_ALIAS_DEF |\n+            SyntaxKind::CONST_DEF |\n+            SyntaxKind::ITEM_LIST => true,\n+            _ => false\n+        });\n+\n+    let impl_block = trigger\n+        .as_ref()\n+        .and_then(|node| node.parent())\n+        .and_then(|node| node.parent())\n+        .and_then(|node| ast::ImplBlock::cast(node));\n+\n+    if let (Some(trigger), Some(impl_block)) = (trigger, impl_block) {\n+        match trigger.kind() {\n+            SyntaxKind::FN_DEF => {\n+                for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n+                    .iter()\n+                    .filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                            _ => None\n+                        }\n+                    }) \n+                {\n+                    add_function_impl(acc, ctx, &missing_fn);\n+                }\n+            },\n \n-    if let Some(ref impl_block) = ctx.impl_block {\n-        for item in get_missing_impl_items(ctx.db, &ctx.analyzer, impl_block) {\n-            match item {\n-                hir::AssocItem::Function(f) => add_function_impl(acc, ctx, &f),\n-                hir::AssocItem::TypeAlias(t) => add_type_alias_impl(acc, ctx, &t),\n-                hir::AssocItem::Const(c) => add_const_impl(acc, ctx, &c),\n-            }\n+            SyntaxKind::TYPE_ALIAS_DEF => {\n+                for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n+                    .iter()\n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n+                        _ => None\n+                    }) \n+                {\n+                    add_type_alias_impl(acc, ctx, &missing_fn);\n+                }\n+            },\n+\n+            SyntaxKind::CONST_DEF => {\n+                for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n+                    .iter()\n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::Const(const_item) => Some(const_item),\n+                        _ => None\n+                    }) \n+                {\n+                    add_const_impl(acc, ctx, &missing_fn);\n+                }\n+            },\n+\n+            _ => {}\n         }\n     }\n }\n@@ -126,16 +170,16 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                <|>\n+                fn<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [138; 138),\n-                delete: [138; 138),\n+                source_range: [140; 140),\n+                delete: [140; 140),\n                 insert: \"fn foo() {}\",\n                 kind: Function,\n             },\n@@ -157,16 +201,16 @@ mod tests {\n             impl Test for T1 {\n                 fn foo() {}\n \n-                <|>\n+                fn<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn bar()\",\n-                source_range: [193; 193),\n-                delete: [193; 193),\n+                source_range: [195; 195),\n+                delete: [195; 195),\n                 insert: \"fn bar() {}\",\n                 kind: Function,\n             },\n@@ -185,16 +229,16 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                <|>\n+                fn<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [141; 141),\n-                delete: [141; 141),\n+                source_range: [143; 143),\n+                delete: [143; 143),\n                 insert: \"fn foo<T>() {}\",\n                 kind: Function,\n             },\n@@ -213,16 +257,16 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                <|>\n+                fn<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [163; 163),\n-                delete: [163; 163),\n+                source_range: [165; 165),\n+                delete: [165; 165),\n                 insert: \"fn foo<T>()\\nwhere T: Into<String> {}\",\n                 kind: Function,\n             },\n@@ -239,16 +283,16 @@ mod tests {\n             }\n \n             impl Test for () {\n-                <|>\n+                type<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"type SomeType = \",\n-                source_range: [119; 119),\n-                delete: [119; 119),\n+                source_range: [123; 123),\n+                delete: [123; 123),\n                 insert: \"type SomeType = \",\n                 kind: TypeAlias,\n             },\n@@ -265,16 +309,16 @@ mod tests {\n             }\n \n             impl Test for () {\n-                <|>\n+                const<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n-                source_range: [127; 127),\n-                delete: [127; 127),\n+                source_range: [132; 132),\n+                delete: [132; 132),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },\n@@ -291,16 +335,16 @@ mod tests {\n             }\n \n             impl Test for () {\n-                <|>\n+                const<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n-                source_range: [132; 132),\n-                delete: [132; 132),\n+                source_range: [137; 137),\n+                delete: [137; 137),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },"}]}