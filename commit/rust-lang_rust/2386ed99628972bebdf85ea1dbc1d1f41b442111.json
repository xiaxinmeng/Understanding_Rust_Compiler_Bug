{"sha": "2386ed99628972bebdf85ea1dbc1d1f41b442111", "node_id": "C_kwDOAAsO6NoAKDIzODZlZDk5NjI4OTcyYmViZGY4NWVhMWRiYzFkMWY0MWI0NDIxMTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-10T13:26:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-10T13:26:07Z"}, "message": "Rollup merge of #101578 - lcnr:resolve-hack, r=jackh726\n\nremove bound var hack in `resolve`\n\nsomehow dropped that change from #98900.\n\nr? `@jackh726`", "tree": {"sha": "59553ec15eec7ce9dcc2ab6162fdbecf2854274d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59553ec15eec7ce9dcc2ab6162fdbecf2854274d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2386ed99628972bebdf85ea1dbc1d1f41b442111", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHJBvCRBK7hj4Ov3rIwAAUIAIAFq07ne1qq3CihNN/whHh81f\ncYyujolBool0D1QM+7OTP3FC0o+kqJQxg05mq4/+UvPYVetQmRE1t7Vtc83z+gdU\nWxZe1tT3g+xHJmEVc4Vw+rJGzbN9nt9znDyKlkHaXhWyKFvoB/ZKYexFKHGiLtCt\nHABSjwmz0fgePPbgLQ1NEsUkZD8BD80VqMkO+daoVVSstTrVt86qXDbyttupWOau\n4wPmLWksSfoiglKjL3SBi0FmJRG0TLOgxbd2Tn4A/2cwAs4rWne8uwHWhE8PPp6+\nUEWJx9diyCBm8GS0uBaDZasoFnST/nf3hi83l3bq4/taza77LmZUqFh6B4BLQwM=\n=1XjR\n-----END PGP SIGNATURE-----\n", "payload": "tree 59553ec15eec7ce9dcc2ab6162fdbecf2854274d\nparent 5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c\nparent c63020a7c3e624f610f1f402a44a0db92bd21a88\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662816367 +0530\ncommitter GitHub <noreply@github.com> 1662816367 +0530\n\nRollup merge of #101578 - lcnr:resolve-hack, r=jackh726\n\nremove bound var hack in `resolve`\n\nsomehow dropped that change from #98900.\n\nr? `@jackh726`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2386ed99628972bebdf85ea1dbc1d1f41b442111", "html_url": "https://github.com/rust-lang/rust/commit/2386ed99628972bebdf85ea1dbc1d1f41b442111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2386ed99628972bebdf85ea1dbc1d1f41b442111/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c", "html_url": "https://github.com/rust-lang/rust/commit/5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c"}, {"sha": "c63020a7c3e624f610f1f402a44a0db92bd21a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63020a7c3e624f610f1f402a44a0db92bd21a88", "html_url": "https://github.com/rust-lang/rust/commit/c63020a7c3e624f610f1f402a44a0db92bd21a88"}], "stats": {"total": 132, "additions": 11, "deletions": 121}, "files": [{"sha": "f72e7389fc606d9b935fd257aff85ff0ee03d384", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -1202,14 +1202,11 @@ rustc_queries! {\n         }\n     }\n \n-    query codegen_fulfill_obligation(\n+    query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n     ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n         cache_on_disk_if { true }\n-        desc { |tcx|\n-            \"checking if `{}` fulfills its obligations\",\n-            tcx.def_path_str(key.1.def_id())\n-        }\n+        desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n \n     /// Return all `impl` blocks in the current crate."}, {"sha": "755d9f8f696675859c387125c2181a95b95f3921", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -1024,7 +1024,7 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver(Option<Span>),\n }\n \n-/// These are the error cases for `codegen_fulfill_obligation`.\n+/// These are the error cases for `codegen_select_candidate`.\n #[derive(Copy, Clone, Debug, Hash, HashStable, Encodable, Decodable)]\n pub enum CodegenObligationError {\n     /// Ambiguity can happen when monomorphizing during trans"}, {"sha": "3afff7bcabf7de1cbfe2fc8dc48810290c7c41f4", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -35,7 +35,7 @@ fn custom_coerce_unsize_info<'tcx>(\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n     });\n \n-    match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n+    match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {\n             impl_def_id,\n             .."}, {"sha": "08adbcbd410c679ac9c444831ab594185a14c0ae", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n ///\n /// This also expects that `trait_ref` is fully normalized.\n-pub fn codegen_fulfill_obligation<'tcx>(\n+pub fn codegen_select_candidate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {"}, {"sha": "40596078f0414f551e862d702cecd21df0ece38e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -971,7 +971,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n-        codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n+        codegen_select_candidate: codegen::codegen_select_candidate,\n         own_existential_vtable_entries,\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,"}, {"sha": "b55302de2a733891ad6d72010240747a68559acf", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 110, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -3,113 +3,11 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{\n-    self, Binder, Instance, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n-};\n+use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitable};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n-use rustc_data_structures::sso::SsoHashSet;\n-use std::collections::btree_map::Entry;\n-use std::collections::BTreeMap;\n-use std::ops::ControlFlow;\n-\n-// FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n-// outside of `resolve_associated_item`. It's just to address #64494,\n-// #83765, and #85848 which are creating bound types/regions that lose\n-// their `Binder` *unintentionally*.\n-// It's ideal to remove `BoundVarsCollector` and just use\n-// `ty::Binder::*` methods but we use this stopgap until we figure out\n-// the \"real\" fix.\n-struct BoundVarsCollector<'tcx> {\n-    binder_index: ty::DebruijnIndex,\n-    vars: BTreeMap<u32, ty::BoundVariableKind>,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> BoundVarsCollector<'tcx> {\n-    fn new() -> Self {\n-        BoundVarsCollector {\n-            binder_index: ty::INNERMOST,\n-            vars: BTreeMap::new(),\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-\n-    fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or(0);\n-        for i in 0..max {\n-            if let None = self.vars.get(&i) {\n-                panic!(\"Unknown variable: {:?}\", i);\n-            }\n-        }\n-\n-        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder() < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::CONTINUE;\n-        }\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                match self.vars.entry(bound_ty.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Ty(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match *r {\n-            ty::ReLateBound(index, br) if index == self.binder_index => {\n-                match self.vars.entry(br.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Region(br.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Region(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -201,19 +99,14 @@ fn resolve_associated_item<'tcx>(\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n \n-    // See FIXME on `BoundVarsCollector`.\n-    let mut bound_vars_collector = BoundVarsCollector::new();\n-    trait_ref.visit_with(&mut bound_vars_collector);\n-    let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n-    let vtbl = match tcx.codegen_fulfill_obligation((param_env, trait_binder)) {\n+    let vtbl = match tcx.codegen_select_candidate((param_env, ty::Binder::dummy(trait_ref))) {\n         Ok(vtbl) => vtbl,\n         Err(CodegenObligationError::Ambiguity) => {\n             let reported = tcx.sess.delay_span_bug(\n                 tcx.def_span(trait_item_id),\n                 &format!(\n-                    \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n+                    \"encountered ambiguity selecting `{trait_ref:?}` during codegen, presuming due to \\\n                      overflow or prior type error\",\n-                    trait_binder\n                 ),\n             );\n             return Err(reported);"}, {"sha": "d5f914f46f873bd1fb2fd77f4545108a756c8bc3", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2386ed99628972bebdf85ea1dbc1d1f41b442111/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2386ed99628972bebdf85ea1dbc1d1f41b442111/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=2386ed99628972bebdf85ea1dbc1d1f41b442111", "patch": "@@ -4,13 +4,13 @@ error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, { T::DIM },\n LL |     const DIM: usize;\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires checking if `TensorDimension` fulfills its obligations...\n+note: ...which requires computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`...\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires resolving instance `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>::DIM`, completing the cycle\n-note: cycle used when checking if `TensorDimension` fulfills its obligations\n+note: cycle used when computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {"}]}