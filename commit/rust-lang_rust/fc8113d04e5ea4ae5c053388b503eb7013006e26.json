{"sha": "fc8113d04e5ea4ae5c053388b503eb7013006e26", "node_id": "C_kwDOAAsO6NoAKGZjODExM2QwNGU1ZWE0YWU1YzA1MzM4OGI1MDNlYjcwMTMwMDZlMjY", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-05T01:26:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-05T01:26:47Z"}, "message": "handle case of a variable not captured", "tree": {"sha": "44ef2fd0d531adfc2113f6183c831aad48e0c288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ef2fd0d531adfc2113f6183c831aad48e0c288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8113d04e5ea4ae5c053388b503eb7013006e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8113d04e5ea4ae5c053388b503eb7013006e26", "html_url": "https://github.com/rust-lang/rust/commit/fc8113d04e5ea4ae5c053388b503eb7013006e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8113d04e5ea4ae5c053388b503eb7013006e26/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76bc02715e3495f66860e1d470d224d2607336a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/76bc02715e3495f66860e1d470d224d2607336a6", "html_url": "https://github.com/rust-lang/rust/commit/76bc02715e3495f66860e1d470d224d2607336a6"}], "stats": {"total": 125, "additions": 117, "deletions": 8}, "files": [{"sha": "a141fdd7b88da1e5d1ab5de76140fb45d3bea75d", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc8113d04e5ea4ae5c053388b503eb7013006e26/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8113d04e5ea4ae5c053388b503eb7013006e26/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=fc8113d04e5ea4ae5c053388b503eb7013006e26", "patch": "@@ -90,10 +90,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n enum CapturesInfo {\n     /// We previously captured all of `x`, but now we capture some sub-path.\n     CapturingLess { source_expr: Option<hir::HirId>, var_name: String },\n-    //CapturingNothing {\n-    //    // where the variable appears in the closure (but is not captured)\n-    //    use_span: Span,\n-    //},\n+    CapturingNothing {\n+        // where the variable appears in the closure (but is not captured)\n+        use_span: Span,\n+    },\n }\n \n /// Reasons that we might issue a migration warning.\n@@ -758,6 +758,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         captured_name,\n                                     ));\n                                 }\n+                                CapturesInfo::CapturingNothing { use_span } => {\n+                                    diagnostics_builder.span_label(*use_span, format!(\"in Rust 2018, this causes the closure to capture `{}`, but in Rust 2021, it has no effect\",\n+                                        self.tcx.hir().name(*var_hir_id),\n+                                    ));\n+                                }\n+\n                                 _ => { }\n                             }\n \n@@ -773,6 +779,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             captured_name,\n                                         ));\n                                     }\n+                                    CapturesInfo::CapturingNothing { use_span: _ } => {\n+                                        diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{v}` is dropped here along with the closure, but in Rust 2021 `{v}` is not part of the closure\",\n+                                            v = self.tcx.hir().name(*var_hir_id),\n+                                        ));\n+                                    }\n                                 }\n                             }\n \n@@ -787,6 +798,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             p = captured_name,\n                                         ));\n                                     }\n+\n+                                    // Cannot happen: if we don't capture a variable, we impl strictly more traits\n+                                    CapturesInfo::CapturingNothing { use_span } => span_bug!(*use_span, \"missing trait from not capturing something\"),\n                                 }\n                             }\n                         }\n@@ -1051,10 +1065,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match closure_clause {\n                 // Only migrate if closure is a move closure\n                 hir::CaptureBy::Value => {\n-                    let diagnostics_info = FxHashSet::default();\n-                    //diagnostics_info.insert(CapturesInfo::CapturingNothing);\n-                    //let upvars = self.tcx.upvars_mentioned(closure_def_id).expect(\"must be an upvar\");\n-                    //let _span = upvars[&var_hir_id];\n+                    let mut diagnostics_info = FxHashSet::default();\n+                    let upvars = self.tcx.upvars_mentioned(closure_def_id).expect(\"must be an upvar\");\n+                    let upvar = upvars[&var_hir_id];\n+                    diagnostics_info.insert(CapturesInfo::CapturingNothing { use_span: upvar.span });\n                     return Some(diagnostics_info);\n                 }\n                 hir::CaptureBy::Ref => {}"}, {"sha": "4e0b18e72338ad881e95e67d708c90dcd70b56fa", "filename": "src/test/ui/closures/2229_closure_analysis/issue-90465.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.fixed?ref=fc8113d04e5ea4ae5c053388b503eb7013006e26", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE lint level is defined here\n+\n+fn main() {\n+    struct Foo(u32);\n+    impl Drop for Foo {\n+        fn drop(&mut self) {\n+            println!(\"dropped {}\", self.0);\n+        }\n+    }\n+\n+    let f0 = Foo(0);\n+    let f1 = Foo(1);\n+\n+    let c0 = move || {\n+        let _ = &f0;\n+        //~^ ERROR changes to closure capture in Rust 2021 will affect drop order\n+        //~| NOTE for more information\n+        let _ = f0;\n+        //~^ NOTE in Rust 2018, this causes the closure to capture `f0`, but in Rust 2021, it has no effect\n+    };\n+\n+    let c1 = move || {\n+        let _ = &f1;\n+    };\n+\n+    println!(\"dropping 0\");\n+    drop(c0);\n+    println!(\"dropping 1\");\n+    drop(c1);\n+    println!(\"dropped all\");\n+}\n+//~^ NOTE in Rust 2018, `f0` is dropped here along with the closure, but in Rust 2021 `f0` is not part of the closure"}, {"sha": "466e6dbabc5021ac47d7748c57cb2787909e5bca", "filename": "src/test/ui/closures/2229_closure_analysis/issue-90465.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.rs?ref=fc8113d04e5ea4ae5c053388b503eb7013006e26", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE lint level is defined here\n+\n+fn main() {\n+    struct Foo(u32);\n+    impl Drop for Foo {\n+        fn drop(&mut self) {\n+            println!(\"dropped {}\", self.0);\n+        }\n+    }\n+\n+    let f0 = Foo(0);\n+    let f1 = Foo(1);\n+\n+    let c0 = move || {\n+        //~^ ERROR changes to closure capture in Rust 2021 will affect drop order\n+        //~| NOTE for more information\n+        let _ = f0;\n+        //~^ NOTE in Rust 2018, this causes the closure to capture `f0`, but in Rust 2021, it has no effect\n+    };\n+\n+    let c1 = move || {\n+        let _ = &f1;\n+    };\n+\n+    println!(\"dropping 0\");\n+    drop(c0);\n+    println!(\"dropping 1\");\n+    drop(c1);\n+    println!(\"dropped all\");\n+}\n+//~^ NOTE in Rust 2018, `f0` is dropped here along with the closure, but in Rust 2021 `f0` is not part of the closure"}, {"sha": "3e921dc0f8a664f299e8fb2be5a31811234de677", "filename": "src/test/ui/closures/2229_closure_analysis/issue-90465.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8113d04e5ea4ae5c053388b503eb7013006e26/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr?ref=fc8113d04e5ea4ae5c053388b503eb7013006e26", "patch": "@@ -0,0 +1,26 @@\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/issue-90465.rs:17:14\n+   |\n+LL |     let c0 = move || {\n+   |              ^^^^^^^\n+...\n+LL |         let _ = f0;\n+   |                 -- in Rust 2018, this causes the closure to capture `f0`, but in Rust 2021, it has no effect\n+...\n+LL | }\n+   | - in Rust 2018, `f0` is dropped here along with the closure, but in Rust 2021 `f0` is not part of the closure\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-90465.rs:3:9\n+   |\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `f0` to be fully captured\n+   |\n+LL ~     let c0 = move || {\n+LL +         let _ = &f0;\n+   |\n+\n+error: aborting due to previous error\n+"}]}