{"sha": "eef510865acf2bd77cdd10f43226e320eefa0509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZjUxMDg2NWFjZjJiZDc3Y2RkMTBmNDMyMjZlMzIwZWVmYTA1MDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-18T05:21:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-18T05:21:55Z"}, "message": "Rollup merge of #86889 - jyn514:crate-cleanup, r=camelid\n\nrustdoc: Cleanup ExternalCrate\n\n- Remove unnecessary CrateNum from Cache.externs\n- Remove trival impl Clean for CrateNum", "tree": {"sha": "59b4ec0b5ac278a3c82c5af559263e378c61543c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b4ec0b5ac278a3c82c5af559263e378c61543c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eef510865acf2bd77cdd10f43226e320eefa0509", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg87pzCRBK7hj4Ov3rIwAAByUIAFYWIaeR+9U1Dp/pnPx0k8a8\nbFzu2bmBnbSn+eJ7ZlzTTOh7sq34tcizVvE+3wYxZVNKTuh2VL0tv+015jmMtySF\n/gvAeraovGfwvHbT3OgakPRMo4fzLd+XraMYas/nD5764rhGpk/N/HoCjGP90ptd\nLadwb2U4Q3Bm2cM3+LFP+h94E7+po7Vaqz6pv+gV5X+7Ns8VgoJUguRkZvJr61we\nf8ibgZbA9NfGMO3/oM4Ey0hKyAkghyWJ/ySDHZ+nTmUW0E3yrb/srlq04UVrg7U1\nMpBe8iTsQxjcOhDE6vfAUS/2Q2f3JripTTKlyCTgDRp8T1HOgpK/OFKsRDh0KoQ=\n=kofk\n-----END PGP SIGNATURE-----\n", "payload": "tree 59b4ec0b5ac278a3c82c5af559263e378c61543c\nparent 783efd29ae71fccc7dcc220fbca37765423f6e58\nparent a30fa08928426ee6f78a4f984a379dbfb57c4096\nauthor Yuki Okushi <jtitor@2k36.org> 1626585715 +0900\ncommitter GitHub <noreply@github.com> 1626585715 +0900\n\nRollup merge of #86889 - jyn514:crate-cleanup, r=camelid\n\nrustdoc: Cleanup ExternalCrate\n\n- Remove unnecessary CrateNum from Cache.externs\n- Remove trival impl Clean for CrateNum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eef510865acf2bd77cdd10f43226e320eefa0509", "html_url": "https://github.com/rust-lang/rust/commit/eef510865acf2bd77cdd10f43226e320eefa0509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eef510865acf2bd77cdd10f43226e320eefa0509/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783efd29ae71fccc7dcc220fbca37765423f6e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/783efd29ae71fccc7dcc220fbca37765423f6e58", "html_url": "https://github.com/rust-lang/rust/commit/783efd29ae71fccc7dcc220fbca37765423f6e58"}, {"sha": "a30fa08928426ee6f78a4f984a379dbfb57c4096", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30fa08928426ee6f78a4f984a379dbfb57c4096", "html_url": "https://github.com/rust-lang/rust/commit/a30fa08928426ee6f78a4f984a379dbfb57c4096"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "1a2852dc6c724e4aa662f73eb2929793d3147e76", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=eef510865acf2bd77cdd10f43226e320eefa0509", "patch": "@@ -14,7 +14,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n@@ -85,12 +85,6 @@ impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n     }\n }\n \n-impl Clean<ExternalCrate> for CrateNum {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> ExternalCrate {\n-        ExternalCrate { crate_num: *self }\n-    }\n-}\n-\n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let mut items: Vec<Item> = vec![];"}, {"sha": "2fd2d14bcabc3ec25a6ace935a70a58246cb57aa", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=eef510865acf2bd77cdd10f43226e320eefa0509", "patch": "@@ -118,7 +118,7 @@ crate struct Crate {\n     crate name: Symbol,\n     crate src: FileName,\n     crate module: Item,\n-    crate externs: Vec<(CrateNum, ExternalCrate)>,\n+    crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n@@ -133,14 +133,14 @@ crate struct TraitWithExtraInfo {\n     crate is_notable: bool,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug)]\n crate struct ExternalCrate {\n     crate crate_num: CrateNum,\n }\n \n impl ExternalCrate {\n     #[inline]\n-    fn def_id(&self) -> DefId {\n+    crate fn def_id(&self) -> DefId {\n         DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n     }\n "}, {"sha": "bdd5350aab2cb1571f81bf8ed1e8c8bcecf21e9a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=eef510865acf2bd77cdd10f43226e320eefa0509", "patch": "@@ -1,9 +1,9 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    Visibility,\n+    inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n+    ItemKind, Lifetime, Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type,\n+    TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -35,11 +35,11 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates(()).iter() {\n-        externs.push((cnum, cnum.clean(cx)));\n+        externs.push(ExternalCrate { crate_num: cnum });\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n-    externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n+    externs.sort_unstable_by_key(|e| e.crate_num);\n \n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n@@ -61,7 +61,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         _ => unreachable!(),\n     }\n \n-    let local_crate = LOCAL_CRATE.clean(cx);\n+    let local_crate = ExternalCrate { crate_num: LOCAL_CRATE };\n     let src = local_crate.src(cx.tcx);\n     let name = local_crate.name(cx.tcx);\n     let primitives = local_crate.primitives(cx.tcx);"}, {"sha": "5ea2cdc2ad9093a239b8615303e409af1b828a72", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef510865acf2bd77cdd10f43226e320eefa0509/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=eef510865acf2bd77cdd10f43226e320eefa0509", "patch": "@@ -151,19 +151,18 @@ impl Cache {\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for &(n, ref e) in &krate.externs {\n+        for &e in &krate.externs {\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            self.extern_locations.insert(n, e.location(extern_url, &dst, tcx));\n-            self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n+            self.extern_locations.insert(e.crate_num, e.location(extern_url, &dst, tcx));\n+            self.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }\n \n         // Cache where all known primitives have their documentation located.\n         //\n         // Favor linking to as local extern as possible, so iterate all crates in\n         // reverse topological order.\n-        for &(_, ref e) in krate.externs.iter().rev() {\n+        for &e in krate.externs.iter().rev() {\n             for &(def_id, prim) in &e.primitives(tcx) {\n                 self.primitive_locations.insert(prim, def_id);\n             }"}]}