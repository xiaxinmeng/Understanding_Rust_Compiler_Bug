{"sha": "d1ec703329614af5e892605c47be08e7d0e15b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWM3MDMzMjk2MTRhZjVlODkyNjA1YzQ3YmUwOGU3ZDBlMTViOGY=", "commit": {"author": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-11-04T10:05:12Z"}, "committer": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-11-05T09:01:24Z"}, "message": "Added more documentation on ToSocketAddr trait", "tree": {"sha": "ea6b11a62d4def6a7ac363240a343fbb62452188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea6b11a62d4def6a7ac363240a343fbb62452188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ec703329614af5e892605c47be08e7d0e15b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec703329614af5e892605c47be08e7d0e15b8f", "html_url": "https://github.com/rust-lang/rust/commit/d1ec703329614af5e892605c47be08e7d0e15b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec703329614af5e892605c47be08e7d0e15b8f/comments", "author": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7af0cb8af79ea6abd683c61d77e41b14a1242d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/7af0cb8af79ea6abd683c61d77e41b14a1242d23", "html_url": "https://github.com/rust-lang/rust/commit/7af0cb8af79ea6abd683c61d77e41b14a1242d23"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "4289ce5bea3823fe5abeef44b2dc425d604f0260", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=d1ec703329614af5e892605c47be08e7d0e15b8f", "patch": "@@ -352,7 +352,80 @@ impl FromStr for SocketAddr {\n     }\n }\n \n+/// A trait for objects which can be converted or resolved to one or more `SocketAddr` values.\n+///\n+/// Implementing types minimally have to implement either `to_socket_addr` or `to_socket_addr_all`\n+/// method, and its trivial counterpart will be available automatically.\n+///\n+/// This trait is used for generic address resolution when constructing network objects.\n+/// By default it is implemented for the following types:\n+///\n+///  * `SocketAddr` - `to_socket_addr` is identity function.\n+///\n+///  * `(IpAddr, u16)` - `to_socket_addr` constructs `SocketAddr` trivially.\n+///\n+///  * `(&str, u16)` - the string should be either a string representation of an IP address\n+///    expected by `FromStr` implementation for `IpAddr` or a host name.\n+///\n+///    For the former, `to_socket_addr_all` returns a vector with a single element corresponding\n+///    to that IP address joined with the given port.\n+///\n+///    For the latter, it tries to resolve the host name and returns a vector of all IP addresses\n+///    for the host name, each joined with the given port.\n+///\n+///  * `&str` - the string should be either a string representation of a `SocketAddr` as\n+///    expected by its `FromStr` implementation or a string like `<host_name>:<port>` pair\n+///    where `<port>` is a `u16` value.\n+///\n+///    For the former, `to_socker_addr_all` returns a vector with a single element corresponding\n+///    to that socker address.\n+///\n+///    For the latter, it tries to resolve the host name and returns a vector of all IP addresses\n+///    for the host name, each joined with the port.\n+///\n+///\n+/// This trait allows constructing network objects like `TcpStream` or `UdpSocket` easily with\n+/// values of various types for the bind/connection address. It is needed because sometimes\n+/// one type is more appropriate than the other: for simple uses a string like `\"localhost:12345\"`\n+/// is much nicer than manual construction of the corresponding `SocketAddr`, but sometimes\n+/// `SocketAddr` value is *the* main source of the address, and converting it to some other type\n+/// (e.g. a string) just for it to be converted back to `SocketAddr` in constructor methods\n+/// is pointless.\n+///\n+/// Some examples:\n+///\n+/// ```rust,no_run\n+/// # #![allow(unused_must_use)]\n+///\n+/// use std::io::{TcpStream, TcpListener};\n+/// use std::io::net::udp::UdpSocket;\n+/// use std::io::net::ip::{ToSocketAddr, Ipv4Addr, SocketAddr};\n+///\n+/// fn main() {\n+///     // The following lines are equivalent modulo possible \"localhost\" name resolution\n+///     // differences\n+///     let tcp_s = TcpStream::connect(SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 12345 });\n+///     let tcp_s = TcpStream::connect((Ipv4Addr(127, 0, 0, 1), 12345u16));\n+///     let tcp_s = TcpStream::connect((\"127.0.0.1\", 12345u16));\n+///     let tcp_s = TcpStream::connect((\"localhost\", 12345u16));\n+///     let tcp_s = TcpStream::connect(\"127.0.0.1:12345\");\n+///     let tcp_s = TcpStream::connect(\"localhost:12345\");\n+///\n+///     // TcpListener::bind(), UdpSocket::bind() and UdpSocket::send_to() behave similarly\n+///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n+///\n+///     let udp_s = UdpSocket::bind((\"127.0.0.1\", 23451u16));\n+///     udp_s.send_to([7u8, 7u8, 7u8].as_slice(), (Ipv4Addr(127, 0, 0, 1), 23451u16));\n+/// }\n+/// ```\n pub trait ToSocketAddr {\n+    /// Converts this object to single socket address value.\n+    ///\n+    /// If more than one value is available, this method returns the first one. If no\n+    /// values are available, this method returns an `IoError`.\n+    ///\n+    /// By default this method delegates to `to_socket_addr_all` method, taking the first\n+    /// item from its result.\n     fn to_socket_addr(&self) -> IoResult<SocketAddr> {\n         self.to_socket_addr_all()\n             .and_then(|v| v.into_iter().next().ok_or_else(|| IoError {\n@@ -362,6 +435,13 @@ pub trait ToSocketAddr {\n             }))\n     }\n \n+    /// Converts this object to all available socket address values.\n+    ///\n+    /// Some values like host name string naturally corrrespond to multiple IP addresses.\n+    /// This method tries to return all available addresses corresponding to this object.\n+    ///\n+    /// By default this method delegates to `to_socket_addr` method, creating a singleton\n+    /// vector from its result.\n     #[inline]\n     fn to_socket_addr_all(&self) -> IoResult<Vec<SocketAddr>> {\n         self.to_socket_addr().map(|a| vec![a])"}, {"sha": "928c858673963773ee02d9d5cc5f1475125ce867", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=d1ec703329614af5e892605c47be08e7d0e15b8f", "patch": "@@ -74,8 +74,8 @@ impl TcpStream {\n     /// specified elapses before a connection is made an error will be\n     /// returned. The error's kind will be `TimedOut`.\n     ///\n-    /// Same as the `connect` method, `addr` argument type can vary as defined\n-    /// by `ToSocketAddr` trait.\n+    /// Same as the `connect` method, `addr` argument type can be anything which\n+    /// implements `ToSocketAddr` trait.\n     ///\n     /// If a `timeout` with zero or negative duration is specified then\n     /// the function returns `Err`, with the error kind set to `TimedOut`.\n@@ -320,6 +320,9 @@ impl TcpListener {\n     /// Binding with a port number of 0 will request that the OS assigns a port\n     /// to this listener. The port allocated can be queried via the\n     /// `socket_name` function.\n+    ///\n+    /// The address type can be any implementor of `ToSocketAddr` trait. See its\n+    /// documentation for concrete examples.\n     pub fn bind<A: ToSocketAddr>(addr: A) -> IoResult<TcpListener> {\n         super::with_addresses_io(addr, |io, addr| io.tcp_bind(addr).map(|l| TcpListener { obj: l }))\n     }"}, {"sha": "4ae054beadb966415d36590ce9eb6c8915db8c13", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec703329614af5e892605c47be08e7d0e15b8f/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=d1ec703329614af5e892605c47be08e7d0e15b8f", "patch": "@@ -64,7 +64,10 @@ pub struct UdpSocket {\n }\n \n impl UdpSocket {\n-    /// Creates a UDP socket from the given socket address.\n+    /// Creates a UDP socket from the given address.\n+    ///\n+    /// Address type can be any implementor of `ToSocketAddr` trait. See its\n+    /// documentation for concrete examples.\n     pub fn bind<A: ToSocketAddr>(addr: A) -> IoResult<UdpSocket> {\n         super::with_addresses_io(addr, |io, addr| io.udp_bind(addr).map(|s| UdpSocket { obj: s }))\n     }\n@@ -82,6 +85,9 @@ impl UdpSocket {\n \n     /// Sends data on the socket to the given address. Returns nothing on\n     /// success.\n+    ///\n+    /// Address type can be any implementor of `ToSocketAddr` trait. See its\n+    /// documentation for concrete examples.\n     pub fn send_to<A: ToSocketAddr>(&mut self, buf: &[u8], addr: A) -> IoResult<()> {\n         super::with_addresses(addr, |addr| self.obj.send_to(buf, rtio::SocketAddr {\n             ip: super::to_rtio(addr.ip),"}]}