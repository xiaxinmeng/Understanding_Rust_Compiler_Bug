{"sha": "bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMGNlMzI0MjNhZWZjYjhiOWViNTg3ODgxOTczZjU2YTZhNmIwZWU=", "commit": {"author": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-15T22:22:35Z"}, "committer": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-17T14:12:51Z"}, "message": "Lint unnecessary int-to-int and float-to-float casts", "tree": {"sha": "018e946728ffe6dee5e55662263c407e2ac3eb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018e946728ffe6dee5e55662263c407e2ac3eb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "html_url": "https://github.com/rust-lang/rust/commit/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/comments", "author": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febd0086a5ea6475d8243c7651908ddd96711896", "url": "https://api.github.com/repos/rust-lang/rust/commits/febd0086a5ea6475d8243c7651908ddd96711896", "html_url": "https://github.com/rust-lang/rust/commit/febd0086a5ea6475d8243c7651908ddd96711896"}], "stats": {"total": 152, "additions": 111, "deletions": 41}, "files": [{"sha": "716d027e434d8e2f17b89cedba9aff579ad8c807", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -3,6 +3,7 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n+use std::fmt::Display;\n \n use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n@@ -1608,18 +1609,23 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     let to_nbits = fp_ty_mantissa_nbits(cast_to);\n                     if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits && num_lit.is_decimal();\n                     then {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            UNNECESSARY_CAST,\n-                            expr.span,\n-                            &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n-                            \"try\",\n-                            format!(\"{}_{}\", n, cast_to),\n-                            Applicability::MachineApplicable,\n-                        );\n+                        show_unnecessary_cast(cx, expr, n , cast_from, cast_to);\n                         return;\n                     }\n                 }\n+\n+                match lit.node {\n+                    LitKind::Int(num, LitIntType::Unsuffixed) if cast_to.is_integral() => {\n+                        show_unnecessary_cast(cx, expr, num, cast_from, cast_to);\n+                        return;\n+                    },\n+                    LitKind::Float(num, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n+                        show_unnecessary_cast(cx, expr, num, cast_from, cast_to);\n+                        return;\n+                    },\n+                    _ => (),\n+                };\n+\n                 match lit.node {\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n@@ -1646,6 +1652,25 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n     }\n }\n \n+fn show_unnecessary_cast<Num: Display>(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    num: Num,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+) {\n+    let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n+    span_lint_and_sugg(\n+        cx,\n+        UNNECESSARY_CAST,\n+        expr.span,\n+        &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n+        \"try\",\n+        format!(\"{}_{}\", num, cast_to),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n fn lint_numeric_casts<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &Expr<'tcx>,"}, {"sha": "4e09d19ea214572f70adbeba6142268609c7a2f7", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -6,6 +6,7 @@\n #[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n #[allow(clippy::nonminimal_bool)]\n #[allow(unused)]\n+#[allow(clippy::unnecessary_cast)]\n fn main() {\n     // simple values and comparisons\n     1 == 1;"}, {"sha": "ad81b35a766493c9e81e61bca13a8540ef1e6f91", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -1,163 +1,163 @@\n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:11:5\n+  --> $DIR/eq_op.rs:12:5\n    |\n LL |     1 == 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:12:5\n+  --> $DIR/eq_op.rs:13:5\n    |\n LL |     \"no\" == \"no\";\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:14:5\n+  --> $DIR/eq_op.rs:15:5\n    |\n LL |     false != false;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:15:5\n+  --> $DIR/eq_op.rs:16:5\n    |\n LL |     1.5 < 1.5;\n    |     ^^^^^^^^^\n \n error: equal expressions as operands to `>=`\n-  --> $DIR/eq_op.rs:16:5\n+  --> $DIR/eq_op.rs:17:5\n    |\n LL |     1u64 >= 1u64;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:19:5\n+  --> $DIR/eq_op.rs:20:5\n    |\n LL |     (1 as u64) & (1 as u64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `^`\n-  --> $DIR/eq_op.rs:20:5\n+  --> $DIR/eq_op.rs:21:5\n    |\n LL |     1 ^ ((((((1))))));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:23:5\n+  --> $DIR/eq_op.rs:24:5\n    |\n LL |     (-(2) < -(2));\n    |     ^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:24:5\n+  --> $DIR/eq_op.rs:25:5\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:24:6\n+  --> $DIR/eq_op.rs:25:6\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |      ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:24:27\n+  --> $DIR/eq_op.rs:25:27\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |                           ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:25:5\n+  --> $DIR/eq_op.rs:26:5\n    |\n LL |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:28:5\n+  --> $DIR/eq_op.rs:29:5\n    |\n LL |     ([1] != [1]);\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:29:5\n+  --> $DIR/eq_op.rs:30:5\n    |\n LL |     ((1, 2) != (1, 2));\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:33:5\n+  --> $DIR/eq_op.rs:34:5\n    |\n LL |     1 + 1 == 2;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:35:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:35:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:36:5\n+  --> $DIR/eq_op.rs:37:5\n    |\n LL |     1 - 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:37:5\n+  --> $DIR/eq_op.rs:38:5\n    |\n LL |     1 / 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:38:5\n+  --> $DIR/eq_op.rs:39:5\n    |\n LL |     true && true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `||`\n-  --> $DIR/eq_op.rs:40:5\n+  --> $DIR/eq_op.rs:41:5\n    |\n LL |     true || true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:46:5\n+  --> $DIR/eq_op.rs:47:5\n    |\n LL |     a == b && b == a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:47:5\n+  --> $DIR/eq_op.rs:48:5\n    |\n LL |     a != b && b != a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:48:5\n+  --> $DIR/eq_op.rs:49:5\n    |\n LL |     a < b && b > a;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:49:5\n+  --> $DIR/eq_op.rs:50:5\n    |\n LL |     a <= b && b >= a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:52:5\n+  --> $DIR/eq_op.rs:53:5\n    |\n LL |     a == a;\n    |     ^^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:62:20\n+  --> $DIR/eq_op.rs:63:20\n    |\n LL |     const D: u32 = A / A;\n    |                    ^^^^^"}, {"sha": "ba52fc2703f22cfb951512ac22f974c996987fb3", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -12,12 +12,19 @@ fn main() {\n     #[rustfmt::skip]\n     let v = vec!(1);\n     &v as &[i32];\n-    1.0 as f64;\n-    1 as u64;\n     0x10 as f32;\n     0o10 as f32;\n     0b10 as f32;\n     0x11 as f64;\n     0o11 as f64;\n     0b11 as f64;\n+\n+    1_u32;\n+    16_i32;\n+    2_usize;\n+\n+    1.0_f64;\n+    0.5_f32;\n+\n+    1.0 as u16;\n }"}, {"sha": "0d2115548fd2110df7be480e6fc4ae91ac777169", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -12,12 +12,19 @@ fn main() {\n     #[rustfmt::skip]\n     let v = vec!(1);\n     &v as &[i32];\n-    1.0 as f64;\n-    1 as u64;\n     0x10 as f32;\n     0o10 as f32;\n     0b10 as f32;\n     0x11 as f64;\n     0o11 as f64;\n     0b11 as f64;\n+\n+    1 as u32;\n+    0x10 as i32;\n+    0b10 as usize;\n+\n+    1.0 as f64;\n+    0.5 as f32;\n+\n+    1.0 as u16;\n }"}, {"sha": "474e62c30d500f98fa8b30e12207ec269c33b821", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "patch": "@@ -18,5 +18,35 @@ error: casting integer literal to `f64` is unnecessary\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n-error: aborting due to 3 previous errors\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:22:5\n+   |\n+LL |     1 as u32;\n+   |     ^^^^^^^^ help: try: `1_u32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:23:5\n+   |\n+LL |     0x10 as i32;\n+   |     ^^^^^^^^^^^ help: try: `16_i32`\n+\n+error: casting integer literal to `usize` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:24:5\n+   |\n+LL |     0b10 as usize;\n+   |     ^^^^^^^^^^^^^ help: try: `2_usize`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:26:5\n+   |\n+LL |     1.0 as f64;\n+   |     ^^^^^^^^^^ help: try: `1.0_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+   |\n+LL |     0.5 as f32;\n+   |     ^^^^^^^^^^ help: try: `0.5_f32`\n+\n+error: aborting due to 8 previous errors\n "}]}