{"sha": "5162282b6060349a672419fb86cdb2a46b59d113", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNjIyODJiNjA2MDM0OWE2NzI0MTlmYjg2Y2RiMmE0NmI1OWQxMTM=", "commit": {"author": {"name": "mwiczer", "email": "wiczerm@gmail.com", "date": "2015-10-07T23:23:07Z"}, "committer": {"name": "mwiczer", "email": "wiczerm@gmail.com", "date": "2015-10-08T21:22:57Z"}, "message": "Support pre- and post-comments for enums\n\nUse lists to format enum variants rather than special formatting.\nAdd tests for enums mostly around block comments.", "tree": {"sha": "ad21dc82debc3ffddad10f3b790a9c49a2f1d539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad21dc82debc3ffddad10f3b790a9c49a2f1d539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5162282b6060349a672419fb86cdb2a46b59d113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5162282b6060349a672419fb86cdb2a46b59d113", "html_url": "https://github.com/rust-lang/rust/commit/5162282b6060349a672419fb86cdb2a46b59d113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5162282b6060349a672419fb86cdb2a46b59d113/comments", "author": {"login": "mwiczer", "id": 9419335, "node_id": "MDQ6VXNlcjk0MTkzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/9419335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiczer", "html_url": "https://github.com/mwiczer", "followers_url": "https://api.github.com/users/mwiczer/followers", "following_url": "https://api.github.com/users/mwiczer/following{/other_user}", "gists_url": "https://api.github.com/users/mwiczer/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiczer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiczer/subscriptions", "organizations_url": "https://api.github.com/users/mwiczer/orgs", "repos_url": "https://api.github.com/users/mwiczer/repos", "events_url": "https://api.github.com/users/mwiczer/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiczer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiczer", "id": 9419335, "node_id": "MDQ6VXNlcjk0MTkzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/9419335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiczer", "html_url": "https://github.com/mwiczer", "followers_url": "https://api.github.com/users/mwiczer/followers", "following_url": "https://api.github.com/users/mwiczer/following{/other_user}", "gists_url": "https://api.github.com/users/mwiczer/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiczer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiczer/subscriptions", "organizations_url": "https://api.github.com/users/mwiczer/orgs", "repos_url": "https://api.github.com/users/mwiczer/repos", "events_url": "https://api.github.com/users/mwiczer/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiczer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8880c0e5d3963c2ec75e22e70421d7185e746c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8880c0e5d3963c2ec75e22e70421d7185e746c7c", "html_url": "https://github.com/rust-lang/rust/commit/8880c0e5d3963c2ec75e22e70421d7185e746c7c"}], "stats": {"total": 352, "additions": 310, "deletions": 42}, "files": [{"sha": "816bfac0fb3ce9dde6f996c7336694b9ee2ccc4a", "filename": "src/items.rs", "status": "modified", "additions": 87, "deletions": 38, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -592,31 +592,88 @@ impl<'a> FmtVisitor<'a> {\n         self.buffer.push_str(&generics_str);\n \n         self.last_pos = body_start;\n-        self.block_indent = self.block_indent.block_indent(self.config);\n-        for (i, f) in enum_def.variants.iter().enumerate() {\n-            let next_span_start: BytePos = if i == enum_def.variants.len() - 1 {\n-                span.hi\n-            } else {\n-                enum_def.variants[i + 1].span.lo\n-            };\n \n-            self.visit_variant(f, i == enum_def.variants.len() - 1, next_span_start);\n+        self.block_indent = self.block_indent.block_indent(self.config);\n+        let variant_list = self.format_variant_list(enum_def, body_start, span.hi - BytePos(1));\n+        match variant_list {\n+            Some(ref body_str) => self.buffer.push_str(&body_str),\n+            None => self.format_missing(span.hi - BytePos(1)),\n         }\n         self.block_indent = self.block_indent.block_unindent(self.config);\n \n-        self.format_missing_with_indent(span.hi - BytePos(1));\n+        if variant_list.is_some() {\n+            self.buffer.push_str(&self.block_indent.to_string(self.config));\n+        }\n         self.buffer.push_str(\"}\");\n+        self.last_pos = span.hi;\n+    }\n+\n+    // Format the body of an enum definition\n+    fn format_variant_list(&self,\n+                           enum_def: &ast::EnumDef,\n+                           body_lo: BytePos,\n+                           body_hi: BytePos)\n+                           -> Option<String> {\n+        if enum_def.variants.is_empty() {\n+            return None;\n+        }\n+        let mut result = String::with_capacity(1024);\n+        result.push('\\n');\n+        let indentation = self.block_indent.to_string(self.config);\n+        result.push_str(&indentation);\n+\n+        let items = itemize_list(self.codemap,\n+                                 enum_def.variants.iter(),\n+                                 \"}\",\n+                                 |f| {\n+                                     if !f.node.attrs.is_empty() {\n+                                         f.node.attrs[0].span.lo\n+                                     } else {\n+                                         f.span.lo\n+                                     }\n+                                 },\n+                                 |f| f.span.hi,\n+                                 |f| self.format_variant(f),\n+                                 body_lo,\n+                                 body_hi);\n+\n+        let budget = self.config.max_width - self.block_indent.width() - 2;\n+        let fmt = ListFormatting {\n+            tactic: DefinitiveListTactic::Vertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Always,\n+            indent: self.block_indent,\n+            width: budget,\n+            ends_with_newline: true,\n+            config: self.config,\n+        };\n+\n+        let list = try_opt!(write_list(items, &fmt));\n+        result.push_str(&list);\n+        result.push('\\n');\n+        Some(result)\n     }\n \n     // Variant of an enum.\n-    fn visit_variant(&mut self, field: &ast::Variant, last_field: bool, next_span_start: BytePos) {\n-        if self.visit_attrs(&field.node.attrs) {\n-            return;\n+    fn format_variant(&self, field: &ast::Variant) -> Option<String> {\n+        if contains_skip(&field.node.attrs) {\n+            let lo = field.node.attrs[0].span.lo;\n+            let span = codemap::mk_sp(lo, field.span.hi);\n+            return Some(self.snippet(span));\n         }\n \n-        self.format_missing_with_indent(field.span.lo);\n+        let indent = self.block_indent;\n+        let mut result = try_opt!(field.node\n+                                       .attrs\n+                                       .rewrite(&self.get_context(),\n+                                                self.config.max_width - indent.width(),\n+                                                indent));\n+        if !result.is_empty() {\n+            result.push('\\n');\n+            result.push_str(&indent.to_string(self.config));\n+        }\n \n-        let result = match field.node.kind {\n+        let variant_body = match field.node.kind {\n             ast::VariantKind::TupleVariantKind(ref types) => {\n                 let mut result = field.node.name.to_string();\n \n@@ -633,12 +690,12 @@ impl<'a> FmtVisitor<'a> {\n                                                                 Indent::empty())\n                                              },\n                                              span_after(field.span, \"(\", self.codemap),\n-                                             next_span_start);\n+                                             field.span.hi);\n                     let item_vec = items.collect::<Vec<_>>();\n \n                     result.push('(');\n \n-                    let indent = self.block_indent + field.node.name.to_string().len() + \"(\".len();\n+                    let indent = indent + field.node.name.to_string().len() + \"(\".len();\n \n                     let comma_cost = if self.config.enum_trailing_comma {\n                         1\n@@ -659,10 +716,7 @@ impl<'a> FmtVisitor<'a> {\n                         ends_with_newline: true,\n                         config: self.config,\n                     };\n-                    let list_str = match write_list(&item_vec, &fmt) {\n-                        Some(list_str) => list_str,\n-                        None => return,\n-                    };\n+                    let list_str = try_opt!(write_list(&item_vec, &fmt));\n \n                     result.push_str(&list_str);\n                     result.push(')');\n@@ -674,31 +728,26 @@ impl<'a> FmtVisitor<'a> {\n                     result.push_str(&expr_snippet);\n                 }\n \n-                result\n+                Some(result)\n             }\n             ast::VariantKind::StructVariantKind(ref struct_def) => {\n                 // TODO: Should limit the width, as we have a trailing comma\n-                let struct_rewrite = self.format_struct(\"\",\n-                                                        field.node.name,\n-                                                        ast::Visibility::Inherited,\n-                                                        struct_def,\n-                                                        None,\n-                                                        field.span,\n-                                                        self.block_indent);\n-\n-                match struct_rewrite {\n-                    Some(struct_str) => struct_str,\n-                    None => return,\n-                }\n+                self.format_struct(\"\",\n+                                   field.node.name,\n+                                   ast::Visibility::Inherited,\n+                                   struct_def,\n+                                   None,\n+                                   field.span,\n+                                   indent)\n             }\n         };\n-        self.buffer.push_str(&result);\n \n-        if !last_field || self.config.enum_trailing_comma {\n-            self.buffer.push_str(\",\");\n+        if let Some(variant_str) = variant_body {\n+            result.push_str(&variant_str);\n+            Some(result)\n+        } else {\n+            None\n         }\n-\n-        self.last_pos = field.span.hi + BytePos(1);\n     }\n \n     fn format_struct(&self,"}, {"sha": "35705611f1e29d7901025de2d30d93ac8be82f55", "filename": "src/lists.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -208,7 +208,18 @@ pub fn write_list<'b, I, T>(items: I, formatting: &ListFormatting<'b>) -> Option\n         } else {\n             0\n         };\n-        let item_width = inner_item.len() + item_sep_len;\n+\n+        // Item string may be multi-line. Its length (used for block comment alignment)\n+        // Should be only the length of the last line.\n+        let item_last_line = if item.is_multiline() {\n+            inner_item.lines().last().unwrap_or(\"\")\n+        } else {\n+            inner_item.as_ref()\n+        };\n+        let mut item_last_line_width = item_last_line.len() + item_sep_len;\n+        if item_last_line.starts_with(indent_str) {\n+            item_last_line_width -= indent_str.len();\n+        }\n \n         match tactic {\n             DefinitiveListTactic::Horizontal if !first => {\n@@ -284,10 +295,12 @@ pub fn write_list<'b, I, T>(items: I, formatting: &ListFormatting<'b>) -> Option\n \n         if tactic == DefinitiveListTactic::Vertical && item.post_comment.is_some() {\n             // 1 = space between item and comment.\n-            let width = formatting.width.checked_sub(item_width + 1).unwrap_or(1);\n+            let width = formatting.width.checked_sub(item_last_line_width + 1).unwrap_or(1);\n             let mut offset = formatting.indent;\n-            offset.alignment += item_width + 1;\n+            offset.alignment += item_last_line_width + 1;\n             let comment = item.post_comment.as_ref().unwrap();\n+\n+            debug!(\"Width = {}, offset = {:?}\", width, offset);\n             // Use block-style only for the last item or multiline comments.\n             let block_style = !formatting.ends_with_newline && last ||\n                               comment.trim().contains('\\n') ||"}, {"sha": "30b1ddadf3f8ae75f694817c0303ba05203dc94f", "filename": "tests/source/enum.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -0,0 +1,94 @@\n+// Enums test\n+\n+#[atrr]\n+pub enum Test {\n+    A, B(u32, \n+         A /* comment */, \n+         SomeType),\n+    /// Doc comment\n+    C,\n+}\n+\n+pub enum Foo<'a, Y: Baz> where X: Whatever\n+{ A, }\n+\n+enum EmtpyWithComment {\n+    // Some comment\n+}\n+\n+// C-style enum\n+enum Bar {\n+    A = 1,\n+    #[someAttr(test)]\n+    B = 2, // comment\n+    C,\n+}\n+\n+enum LongVariants {\n+First(LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n+VARIANT),\n+    // This is the second variant\n+    Second\n+}\n+\n+enum StructLikeVariants {\n+    Normal(u32, String, ),\n+    StructLike { x: i32, // Test comment\n+        // Pre-comment\n+        #[Attr50] y: SomeType, // Aanother Comment\n+    }, SL { a: A }\n+}\n+\n+enum X {\n+    CreateWebGLPaintTask(Size2D<i32>, GLContextAttributes, IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>), // This is a post comment\n+}\n+\n+pub enum EnumWithAttributes {\n+    //This is a pre comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    TupleVar(usize, usize, usize), // AAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    // Pre Comment\n+    #[rustfmt_skip]\n+    SkippedItem(String,String,), // Post-comment\n+    #[another_attr]\n+    #[attr2]\n+    ItemStruct {x: usize, y: usize}, // Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    // And another\n+    ForcedPreflight // AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+}\n+\n+pub enum SingleTuple {\n+    // Pre Comment AAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    Match(usize, usize, String) // Post-comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+}\n+\n+pub enum SingleStruct {\n+    Match {name: String, loc: usize} // Post-comment\n+}\n+\n+pub enum GenericEnum<I, T>\n+where I: Iterator<Item = T> {\n+    // Pre Comment\n+    Left {list: I, root: T}, // Post-comment\n+    Right {list: I, root: T} // Post Comment\n+}\n+\n+\n+enum EmtpyWithComment {\n+    // Some comment\n+}\n+\n+enum TestFormatFails {\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+}\n+\n+fn nested_enum_test() {\n+    if true {\n+        enum TestEnum {\n+            One(usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize,), // AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAA\n+            Two // AAAAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAA\n+        }\n+        enum TestNestedFormatFail {\n+            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+        }\n+    }\n+}"}, {"sha": "26578bf8c23acac28eeeebe107f1fecaedaf8ff8", "filename": "tests/source/structs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -105,3 +105,13 @@ pub struct State<F: FnMut()> { now: F }\n \n struct Palette { /// A map of indizes in the palette to a count of pixels in approximately that color\n                     foo: i32}\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+struct FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    //Another pre comment\n+    #[attr1]\n+    #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC\n+}"}, {"sha": "72a0266b23c344668693e6aa730488fa954aacf4", "filename": "tests/target/enum.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -49,5 +49,94 @@ enum StructLikeVariants {\n enum X {\n     CreateWebGLPaintTask(Size2D<i32>,\n                          GLContextAttributes,\n-                         IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>),\n+                         IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>), /* This is\n+                                                                                     * a post c\n+                                                                                     * omment */\n+}\n+\n+pub enum EnumWithAttributes {\n+    // This is a pre comment\n+    // AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    TupleVar(usize, usize, usize), /* AAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA\n+                                    * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n+    // Pre Comment\n+    #[rustfmt_skip]\n+    SkippedItem(String,String,), // Post-comment\n+    #[another_attr]\n+    #[attr2]\n+    ItemStruct {\n+        x: usize,\n+        y: usize,\n+    }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+        * AAAAAAAAAAAAAAAAAAA */\n+    // And another\n+    ForcedPreflight, /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+                      * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n+}\n+\n+pub enum SingleTuple {\n+    // Pre Comment AAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    // AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    Match(usize, usize, String), /* Post-comment\n+                                  * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+                                  * A */\n+}\n+\n+pub enum SingleStruct {\n+    Match {\n+        name: String,\n+        loc: usize,\n+    }, // Post-comment\n+}\n+\n+pub enum GenericEnum<I, T>\n+    where I: Iterator<Item = T>\n+{\n+    // Pre Comment\n+    Left {\n+        list: I,\n+        root: T,\n+    }, // Post-comment\n+    Right {\n+        list: I,\n+        root: T,\n+    }, // Post Comment\n+}\n+\n+\n+enum EmtpyWithComment {\n+    // Some comment\n+}\n+\n+enum TestFormatFails {\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+}\n+\n+fn nested_enum_test() {\n+    if true {\n+        enum TestEnum {\n+            One(usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize,\n+                usize), /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA\n+                         * AAAAAAAAAAAAAAAAAAAAAA */\n+            Two, /* AAAAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+                  * AAAAAAAAAAAAAAAAAA */\n+        }\n+        enum TestNestedFormatFail {\n+            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+        }\n+    }\n }"}, {"sha": "5ea4a21bad5dbef82b741dbe946f5bd3ce04b524", "filename": "tests/target/structs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5162282b6060349a672419fb86cdb2a46b59d113/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=5162282b6060349a672419fb86cdb2a46b59d113", "patch": "@@ -100,3 +100,16 @@ struct Palette {\n     /// A map of indizes in the palette to a count of pixels in approximately that color\n     foo: i32,\n }\n+\n+// Splitting a single line comment into a block previously had a misalignment\n+// when the field had attributes\n+struct FieldsWithAttributes {\n+    // Pre Comment\n+    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                      * BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    // Another pre comment\n+    #[attr1]\n+    #[attr2]\n+    pub id: usize, /* CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC\n+                    * CCCCCCCCCCCCCC CCCCCCCCCCCC */\n+}"}]}