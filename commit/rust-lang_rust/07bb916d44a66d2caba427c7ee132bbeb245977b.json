{"sha": "07bb916d44a66d2caba427c7ee132bbeb245977b", "node_id": "C_kwDOAAsO6NoAKDA3YmI5MTZkNDRhNjZkMmNhYmE0MjdjN2VlMTMyYmJlYjI0NTk3N2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T06:55:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T06:55:28Z"}, "message": "Auto merge of #92364 - jackh726:Quantumplation/65853/param-heuristics, r=estebank\n\nBetter method call error messages\n\nRebase/continuation of #71827\n\n~Based on #92360~\n~Based on #93118~\n\nThere's a decent description in #71827 that I won't copy here (for now at least)\n\nIn addition to rebasing, I've tried to restore most of the original suggestions for invalid arguments. Unfortunately, this does make some of the errors a bit verbose. To fix this will require a bit of refactoring to some of the generalized error suggestion functions, and I just don't have the time to go into it right now.\n\nI think this is in a state that the error messages are overall better than before without a reduction in the suggestions given.\n\n~I've tried to split out some of the easier and self-contained changes into separate commits (mostly in #92360, but also one here). There might be more than can be done here, but again just lacking time.~\n\nr? `@estebank` as the original reviewer of #71827", "tree": {"sha": "81950b54d9588bdfb9ecd7d96233b2e4865f66e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81950b54d9588bdfb9ecd7d96233b2e4865f66e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bb916d44a66d2caba427c7ee132bbeb245977b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bb916d44a66d2caba427c7ee132bbeb245977b", "html_url": "https://github.com/rust-lang/rust/commit/07bb916d44a66d2caba427c7ee132bbeb245977b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bb916d44a66d2caba427c7ee132bbeb245977b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "html_url": "https://github.com/rust-lang/rust/commit/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b"}, {"sha": "b6c87c555f3b664f558d137d5f7696a07488157e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c87c555f3b664f558d137d5f7696a07488157e", "html_url": "https://github.com/rust-lang/rust/commit/b6c87c555f3b664f558d137d5f7696a07488157e"}], "stats": {"total": 13501, "additions": 10440, "deletions": 3061}, "files": [{"sha": "f2dd4f5d5cbcae1273fa0d4d3a7bf5d91d9d7ca2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1448,6 +1448,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n+        force_label: bool,\n     ) {\n         let span = cause.span(self.tcx);\n         debug!(\"note_type_err cause={:?} values={:?}, terr={:?}\", cause, values, terr);\n@@ -1623,7 +1624,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             TypeError::ObjectUnsafeCoercion(_) => {}\n             _ => {\n                 let mut label_or_note = |span: Span, msg: &str| {\n-                    if &[span] == diag.span.primary_spans() {\n+                    if force_label || &[span] == diag.span.primary_spans() {\n                         diag.span_label(span, msg);\n                     } else {\n                         diag.span_note(span, msg);\n@@ -2171,7 +2172,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0644, \"{}\", failure_str)\n             }\n         };\n-        self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr, false);\n+        self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr, false, false);\n         diag\n     }\n \n@@ -2765,15 +2766,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n }\n \n-enum FailureCode {\n+pub enum FailureCode {\n     Error0038(DefId),\n     Error0317(&'static str),\n     Error0580(&'static str),\n     Error0308(&'static str),\n     Error0644(&'static str),\n }\n \n-trait ObligationCauseExt<'tcx> {\n+pub trait ObligationCauseExt<'tcx> {\n     fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode;\n     fn as_requirement_str(&self) -> &'static str;\n }"}, {"sha": "919b89396d678407820d9bce8eeca0ad2772fdaa", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -385,8 +385,8 @@ impl<'tcx> ValuePairs<'tcx> {\n /// See the `error_reporting` module for more details.\n #[derive(Clone, Debug)]\n pub struct TypeTrace<'tcx> {\n-    cause: ObligationCause<'tcx>,\n-    values: ValuePairs<'tcx>,\n+    pub cause: ObligationCause<'tcx>,\n+    pub values: ValuePairs<'tcx>,\n }\n \n /// The origin of a `r1 <= r2` constraint."}, {"sha": "50e4fafdd6c829c44fe8212e244993f5689a0b3b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1654,7 +1654,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     }),\n                 _ => None,\n             };\n-            self.note_type_err(&mut diag, &obligation.cause, secondary_span, values, err, true);\n+            self.note_type_err(\n+                &mut diag,\n+                &obligation.cause,\n+                secondary_span,\n+                values,\n+                err,\n+                true,\n+                false,\n+            );\n             self.note_obligation_cause(&mut diag, obligation);\n             diag.emit();\n         });"}, {"sha": "b44baf83cbe1e61fecbf61c6e31debf86eb6f6c7", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1499,7 +1499,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         found,\n                         expected,\n                         None,\n-                        coercion_error,\n+                        Some(coercion_error),\n                     );\n                 }\n "}, {"sha": "4ab6f2cdafbc7ee7140b29442a81bd03a7069c02", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -384,6 +384,7 @@ fn compare_predicate_entailment<'tcx>(\n                 })),\n                 &terr,\n                 false,\n+                false,\n             );\n \n             return Err(diag.emit());\n@@ -1072,6 +1073,7 @@ crate fn compare_const_impl<'tcx>(\n                 })),\n                 &terr,\n                 false,\n+                false,\n             );\n             diag.emit();\n         }"}, {"sha": "f377cf3678e40e7a3e0e92d39cd0c2b15869e848", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n-        error: TypeError<'tcx>,\n+        error: Option<TypeError<'tcx>>,\n     ) {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n@@ -150,7 +150,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e.clone());\n \n-        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr, e);\n+        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr, Some(e));\n \n         (expected, Some(err))\n     }\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n-        error: TypeError<'_>,\n+        error: Option<TypeError<'_>>,\n     ) {\n         let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n         match (self.tcx.hir().find(parent), error) {\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Assign(lhs, rhs, _), ..\n                 })),\n-                TypeError::Sorts(ExpectedFound { expected, .. }),\n+                Some(TypeError::Sorts(ExpectedFound { expected, .. })),\n             ) if rhs.hir_id == expr.hir_id && !expected.is_closure() => {\n                 // We ignore closures explicitly because we already point at them elsewhere.\n                 // Point at the assigned-to binding."}, {"sha": "e88082dbb9744e36c57a8b3c7f558c0a37333a16", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self, expr), level = \"debug\")]\n-    fn check_expr_kind(\n+    pub(super) fn check_expr_kind(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n@@ -1366,11 +1366,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        let adt_ty_hint = self\n-            .expected_inputs_for_expected_output(span, expected, adt_ty, &[adt_ty])\n-            .get(0)\n-            .cloned()\n-            .unwrap_or(adt_ty);\n+        let expected_inputs =\n+            self.expected_inputs_for_expected_output(span, expected, adt_ty, &[adt_ty]);\n+        let adt_ty_hint = if let Some(expected_inputs) = expected_inputs {\n+            expected_inputs.get(0).cloned().unwrap_or(adt_ty)\n+        } else {\n+            adt_ty\n+        };\n         // re-link the regions that EIfEO can erase.\n         self.demand_eqtype(span, adt_ty_hint, adt_ty);\n "}, {"sha": "152be4bd5382906b728fb6d67fa9eb2f606bd640", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -755,9 +755,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ret: Expectation<'tcx>,\n         formal_ret: Ty<'tcx>,\n         formal_args: &[Ty<'tcx>],\n-    ) -> Vec<Ty<'tcx>> {\n+    ) -> Option<Vec<Ty<'tcx>>> {\n         let formal_ret = self.resolve_vars_with_obligations(formal_ret);\n-        let Some(ret_ty) = expected_ret.only_has_type(self) else { return Vec::new() };\n+        let Some(ret_ty) = expected_ret.only_has_type(self) else { return None };\n \n         // HACK(oli-obk): This is a hack to keep RPIT and TAIT in sync wrt their behaviour.\n         // Without it, the inference\n@@ -779,7 +779,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack() {\n                     if let ty::Opaque(def_id, _) = *ty.kind() {\n                         if self.infcx.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n-                            return Vec::new();\n+                            return None;\n                         }\n                     }\n                 }\n@@ -820,7 +820,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Record all the argument types, with the substitutions\n                 // produced from the above subtyping unification.\n-                Ok(formal_args.iter().map(|&ty| self.resolve_vars_if_possible(ty)).collect())\n+                Ok(Some(formal_args.iter().map(|&ty| self.resolve_vars_if_possible(ty)).collect()))\n             })\n             .unwrap_or_default();\n         debug!(?formal_args, ?formal_ret, ?expect_args, ?expected_ret);"}, {"sha": "48a66e8026beedd0b129434fef0853b641a6f490", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/arg_matrix.rs", "status": "added", "additions": 343, "deletions": 0, "changes": 343, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,343 @@\n+use std::cmp;\n+\n+use rustc_middle::ty::error::TypeError;\n+\n+// An issue that might be found in the compatibility matrix\n+enum Issue {\n+    /// The given argument is the invalid type for the input\n+    Invalid(usize),\n+    /// There is a missing input\n+    Missing(usize),\n+    /// There's a superfluous argument\n+    Extra(usize),\n+    /// Two arguments should be swapped\n+    Swap(usize, usize),\n+    /// Several arguments should be reordered\n+    Permutation(Vec<Option<usize>>),\n+}\n+\n+#[derive(Clone, Debug)]\n+pub(crate) enum Compatibility<'tcx> {\n+    Compatible,\n+    Incompatible(Option<TypeError<'tcx>>),\n+}\n+\n+/// Similar to `Issue`, but contains some extra information\n+pub(crate) enum Error<'tcx> {\n+    /// The given argument is the invalid type for the input\n+    Invalid(usize, Compatibility<'tcx>),\n+    /// There is a missing input\n+    Missing(usize),\n+    /// There's a superfluous argument\n+    Extra(usize),\n+    /// Two arguments should be swapped\n+    Swap(usize, usize, usize, usize),\n+    /// Several arguments should be reordered\n+    Permutation(Vec<(usize, usize)>), // dest_arg, dest_input\n+}\n+\n+pub(crate) struct ArgMatrix<'tcx> {\n+    input_indexes: Vec<usize>,\n+    arg_indexes: Vec<usize>,\n+    compatibility_matrix: Vec<Vec<Compatibility<'tcx>>>,\n+}\n+\n+impl<'tcx> ArgMatrix<'tcx> {\n+    pub(crate) fn new<F: FnMut(usize, usize) -> Compatibility<'tcx>>(\n+        minimum_input_count: usize,\n+        provided_arg_count: usize,\n+        mut is_compatible: F,\n+    ) -> Self {\n+        let compatibility_matrix = (0..provided_arg_count)\n+            .map(|i| (0..minimum_input_count).map(|j| is_compatible(i, j)).collect())\n+            .collect();\n+        ArgMatrix {\n+            input_indexes: (0..minimum_input_count).collect(),\n+            arg_indexes: (0..provided_arg_count).collect(),\n+            compatibility_matrix,\n+        }\n+    }\n+\n+    /// Remove a given input from consideration\n+    fn eliminate_input(&mut self, idx: usize) {\n+        self.input_indexes.remove(idx);\n+        for row in &mut self.compatibility_matrix {\n+            row.remove(idx);\n+        }\n+    }\n+\n+    /// Remove a given argument from consideration\n+    fn eliminate_arg(&mut self, idx: usize) {\n+        self.arg_indexes.remove(idx);\n+        self.compatibility_matrix.remove(idx);\n+    }\n+\n+    /// \"satisfy\" an input with a given arg, removing both from consideration\n+    fn satisfy_input(&mut self, input_idx: usize, arg_idx: usize) {\n+        self.eliminate_input(input_idx);\n+        self.eliminate_arg(arg_idx);\n+    }\n+\n+    fn eliminate_satisfied(&mut self) -> Vec<(usize, usize)> {\n+        let mut i = cmp::min(self.input_indexes.len(), self.arg_indexes.len());\n+        let mut eliminated = vec![];\n+        while i > 0 {\n+            let idx = i - 1;\n+            if matches!(self.compatibility_matrix[idx][idx], Compatibility::Compatible) {\n+                eliminated.push((self.arg_indexes[idx], self.input_indexes[idx]));\n+                self.satisfy_input(idx, idx);\n+            }\n+            i -= 1;\n+        }\n+        return eliminated;\n+    }\n+\n+    // Check for the above mismatch cases\n+    fn find_issue(&self) -> Option<Issue> {\n+        let mat = &self.compatibility_matrix;\n+        let ai = &self.arg_indexes;\n+        let ii = &self.input_indexes;\n+\n+        for i in 0..cmp::max(ai.len(), ii.len()) {\n+            // If we eliminate the last row, any left-over inputs are considered missing\n+            if i >= mat.len() {\n+                return Some(Issue::Missing(i));\n+            }\n+            // If we eliminate the last column, any left-over arguments are extra\n+            if mat[i].len() == 0 {\n+                return Some(Issue::Extra(i));\n+            }\n+\n+            // Make sure we don't pass the bounds of our matrix\n+            let is_arg = i < ai.len();\n+            let is_input = i < ii.len();\n+            if is_arg && is_input && matches!(mat[i][i], Compatibility::Compatible) {\n+                // This is a satisfied input, so move along\n+                continue;\n+            }\n+\n+            let mut useless = true;\n+            let mut unsatisfiable = true;\n+            if is_arg {\n+                for j in 0..ii.len() {\n+                    // If we find at least one input this argument could satisfy\n+                    // this argument isn't completely useless\n+                    if matches!(mat[i][j], Compatibility::Compatible) {\n+                        useless = false;\n+                        break;\n+                    }\n+                }\n+            }\n+            if is_input {\n+                for j in 0..ai.len() {\n+                    // If we find at least one argument that could satisfy this input\n+                    // this argument isn't unsatisfiable\n+                    if matches!(mat[j][i], Compatibility::Compatible) {\n+                        unsatisfiable = false;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            match (is_arg, is_input, useless, unsatisfiable) {\n+                // If an input is unsatisfied, and the argument in its position is useless\n+                // then the most likely explanation is that we just got the types wrong\n+                (true, true, true, true) => return Some(Issue::Invalid(i)),\n+                // Otherwise, if an input is useless, then indicate that this is an extra argument\n+                (true, _, true, _) => return Some(Issue::Extra(i)),\n+                // Otherwise, if an argument is unsatisfiable, indicate that it's missing\n+                (_, true, _, true) => return Some(Issue::Missing(i)),\n+                (true, true, _, _) => {\n+                    // The argument isn't useless, and the input isn't unsatisfied,\n+                    // so look for a parameter we might swap it with\n+                    // We look for swaps explicitly, instead of just falling back on permutations\n+                    // so that cases like (A,B,C,D) given (B,A,D,C) show up as two swaps,\n+                    // instead of a large permutation of 4 elements.\n+                    for j in 0..cmp::min(ai.len(), ii.len()) {\n+                        if i == j || matches!(mat[j][j], Compatibility::Compatible) {\n+                            continue;\n+                        }\n+                        if matches!(mat[i][j], Compatibility::Compatible)\n+                            && matches!(mat[j][i], Compatibility::Compatible)\n+                        {\n+                            return Some(Issue::Swap(i, j));\n+                        }\n+                    }\n+                }\n+                _ => {\n+                    continue;\n+                }\n+            };\n+        }\n+\n+        // We didn't find any of the individual issues above, but\n+        // there might be a larger permutation of parameters, so we now check for that\n+        // by checking for cycles\n+        // We use a double option at position i in this vec to represent:\n+        // - None: We haven't computed anything about this argument yet\n+        // - Some(None): This argument definitely doesn't participate in a cycle\n+        // - Some(Some(x)): the i-th argument could permute to the x-th position\n+        let mut permutation: Vec<Option<Option<usize>>> = vec![None; mat.len()];\n+        let mut permutation_found = false;\n+        for i in 0..mat.len() {\n+            if permutation[i].is_some() {\n+                // We've already decided whether this argument is or is not in a loop\n+                continue;\n+            }\n+\n+            let mut stack = vec![];\n+            let mut j = i;\n+            let mut last = i;\n+            let mut is_cycle = true;\n+            loop {\n+                stack.push(j);\n+                // Look for params this one could slot into\n+                let compat: Vec<_> =\n+                    mat[j]\n+                        .iter()\n+                        .enumerate()\n+                        .filter_map(|(i, c)| {\n+                            if matches!(c, Compatibility::Compatible) { Some(i) } else { None }\n+                        })\n+                        .collect();\n+                if compat.len() != 1 {\n+                    // this could go into multiple slots, don't bother exploring both\n+                    is_cycle = false;\n+                    break;\n+                }\n+                j = compat[0];\n+                if stack.contains(&j) {\n+                    last = j;\n+                    break;\n+                }\n+            }\n+            if stack.len() <= 2 {\n+                // If we encounter a cycle of 1 or 2 elements, we'll let the\n+                // \"satisfy\" and \"swap\" code above handle those\n+                is_cycle = false;\n+            }\n+            // We've built up some chain, some of which might be a cycle\n+            // ex: [1,2,3,4]; last = 2; j = 2;\n+            // So, we want to mark 4, 3, and 2 as part of a permutation\n+            permutation_found = is_cycle;\n+            while let Some(x) = stack.pop() {\n+                if is_cycle {\n+                    permutation[x] = Some(Some(j));\n+                    j = x;\n+                    if j == last {\n+                        // From here on out, we're a tail leading into a cycle,\n+                        // not the cycle itself\n+                        is_cycle = false;\n+                    }\n+                } else {\n+                    // Some(None) ensures we save time by skipping this argument again\n+                    permutation[x] = Some(None);\n+                }\n+            }\n+        }\n+\n+        if permutation_found {\n+            // Map unwrap to remove the first layer of Some\n+            let final_permutation: Vec<Option<usize>> =\n+                permutation.into_iter().map(|x| x.unwrap()).collect();\n+            return Some(Issue::Permutation(final_permutation));\n+        }\n+        return None;\n+    }\n+\n+    // Obviously, detecting exact user intention is impossible, so the goal here is to\n+    // come up with as likely of a story as we can to be helpful.\n+    //\n+    // We'll iteratively removed \"satisfied\" input/argument pairs,\n+    // then check for the cases above, until we've eliminated the entire grid\n+    //\n+    // We'll want to know which arguments and inputs these rows and columns correspond to\n+    // even after we delete them.\n+    pub(crate) fn find_errors(mut self) -> (Vec<Error<'tcx>>, Vec<Option<usize>>) {\n+        let provided_arg_count = self.arg_indexes.len();\n+\n+        let mut errors: Vec<Error<'tcx>> = vec![];\n+        // For each expected argument, the matched *actual* input\n+        let mut matched_inputs: Vec<Option<usize>> = vec![None; self.input_indexes.len()];\n+\n+        // Before we start looking for issues, eliminate any arguments that are already satisfied,\n+        // so that an argument which is already spoken for by the input it's in doesn't\n+        // spill over into another similarly typed input\n+        // ex:\n+        //   fn some_func(_a: i32, _b: i32) {}\n+        //   some_func(1, \"\");\n+        // Without this elimination, the first argument causes the second argument\n+        // to show up as both a missing input and extra argument, rather than\n+        // just an invalid type.\n+        for (arg, inp) in self.eliminate_satisfied() {\n+            matched_inputs[inp] = Some(arg);\n+        }\n+\n+        while self.input_indexes.len() > 0 || self.arg_indexes.len() > 0 {\n+            // Check for the first relevant issue\n+            match self.find_issue() {\n+                Some(Issue::Invalid(idx)) => {\n+                    let compatibility = self.compatibility_matrix[idx][idx].clone();\n+                    let input_idx = self.input_indexes[idx];\n+                    self.satisfy_input(idx, idx);\n+                    errors.push(Error::Invalid(input_idx, compatibility));\n+                }\n+                Some(Issue::Extra(idx)) => {\n+                    let arg_idx = self.arg_indexes[idx];\n+                    self.eliminate_arg(idx);\n+                    errors.push(Error::Extra(arg_idx));\n+                }\n+                Some(Issue::Missing(idx)) => {\n+                    let input_idx = self.input_indexes[idx];\n+                    self.eliminate_input(idx);\n+                    errors.push(Error::Missing(input_idx));\n+                }\n+                Some(Issue::Swap(idx, other)) => {\n+                    let input_idx = self.input_indexes[idx];\n+                    let other_input_idx = self.input_indexes[other];\n+                    let arg_idx = self.arg_indexes[idx];\n+                    let other_arg_idx = self.arg_indexes[other];\n+                    let (min, max) = (cmp::min(idx, other), cmp::max(idx, other));\n+                    self.satisfy_input(min, max);\n+                    // Subtract 1 because we already removed the \"min\" row\n+                    self.satisfy_input(max - 1, min);\n+                    errors.push(Error::Swap(input_idx, other_input_idx, arg_idx, other_arg_idx));\n+                    matched_inputs[input_idx] = Some(other_arg_idx);\n+                    matched_inputs[other_input_idx] = Some(arg_idx);\n+                }\n+                Some(Issue::Permutation(args)) => {\n+                    // FIXME: If satisfy_input ever did anything non-trivial (emit obligations to help type checking, for example)\n+                    // we'd want to call this function with the correct arg/input pairs, but for now, we just throw them in a bucket.\n+                    // This works because they force a cycle, so each row is guaranteed to also be a column\n+                    let mut idxs: Vec<usize> = args.iter().filter_map(|&a| a).collect();\n+\n+                    let mut real_idxs = vec![None; provided_arg_count];\n+                    for (src, dst) in\n+                        args.iter().enumerate().filter_map(|(src, dst)| dst.map(|dst| (src, dst)))\n+                    {\n+                        let src_arg = self.arg_indexes[src];\n+                        let dst_arg = self.arg_indexes[dst];\n+                        let dest_input = self.input_indexes[dst];\n+                        real_idxs[src_arg] = Some((dst_arg, dest_input));\n+                        matched_inputs[dest_input] = Some(src_arg);\n+                    }\n+                    idxs.sort();\n+                    idxs.reverse();\n+                    for i in idxs {\n+                        self.satisfy_input(i, i);\n+                    }\n+                    errors.push(Error::Permutation(real_idxs.into_iter().flatten().collect()));\n+                }\n+                None => {\n+                    // We didn't find any issues, so we need to push the algorithm forward\n+                    // First, eliminate any arguments that currently satisfy their inputs\n+                    for (arg, inp) in self.eliminate_satisfied() {\n+                        matched_inputs[inp] = Some(arg);\n+                    }\n+                }\n+            };\n+        }\n+\n+        return (errors, matched_inputs);\n+    }\n+}"}, {"sha": "80f6190732ac2a273fba37ba057898525803ccfb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 740, "deletions": 183, "changes": 923, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,5 +1,6 @@\n use crate::astconv::AstConv;\n use crate::check::coercion::CoerceMany;\n+use crate::check::fn_ctxt::arg_matrix::{ArgMatrix, Compatibility, Error};\n use crate::check::gather_locals::Declaration;\n use crate::check::method::MethodCallee;\n use crate::check::Expectation::*;\n@@ -8,6 +9,7 @@ use crate::check::{\n     potentially_plural_count, struct_span_err, BreakableCtxt, Diverges, Expectation, FnCtxt,\n     LocalTy, Needs, TupleArgumentsFlag,\n };\n+use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n use rustc_data_structures::sync::Lrc;\n@@ -16,23 +18,27 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ExprKind, Node, QPath};\n+use rustc_infer::infer::error_reporting::{FailureCode, ObligationCauseExt};\n+use rustc_infer::infer::InferOk;\n+use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n+use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n-use crate::structured_errors::StructuredDiagnostic;\n use std::iter;\n use std::slice;\n \n-struct FnArgsAsTuple<'hir> {\n-    first: &'hir hir::Expr<'hir>,\n-    last: &'hir hir::Expr<'hir>,\n+enum TupleMatchFound {\n+    None,\n+    Single,\n+    /// Beginning and end Span\n+    Multiple(Span, Span),\n }\n-\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&self) {\n         let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n@@ -67,7 +73,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 sp,\n                 expr,\n                 &err_inputs,\n-                vec![],\n+                None,\n                 args_no_rcvr,\n                 false,\n                 tuple_arguments,\n@@ -108,7 +114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Types (as defined in the *signature* of the target function)\n         formal_input_tys: &[Ty<'tcx>],\n         // More specific expected types, after unifying with caller output types\n-        expected_input_tys: Vec<Ty<'tcx>>,\n+        expected_input_tys: Option<Vec<Ty<'tcx>>>,\n         // The expressions for each provided argument\n         provided_args: &'tcx [hir::Expr<'tcx>],\n         // Whether the function is variadic, for example when imported from C\n@@ -119,22 +125,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fn_def_id: Option<DefId>,\n     ) {\n         let tcx = self.tcx;\n-        // Grab the argument types, supplying fresh type variables\n-        // if the wrong number of arguments were supplied\n-        let supplied_arg_count =\n-            if tuple_arguments == DontTupleArguments { provided_args.len() } else { 1 };\n+\n+        // Conceptually, we've got some number of expected inputs, and some number of provided aguments\n+        // and we can form a grid of whether each argument could satisfy a given input:\n+        //      in1 | in2 | in3 | ...\n+        // arg1  ?  |     |     |\n+        // arg2     |  ?  |     |\n+        // arg3     |     |  ?  |\n+        // ...\n+        // Initially, we just check the diagonal, because in the case of correct code\n+        // these are the only checks that matter\n+        // However, in the unhappy path, we'll fill in this whole grid to attempt to provide\n+        // better error messages about invalid method calls.\n \n         // All the input types from the fn signature must outlive the call\n         // so as to validate implied bounds.\n         for (&fn_input_ty, arg_expr) in iter::zip(formal_input_tys, provided_args) {\n             self.register_wf_obligation(fn_input_ty.into(), arg_expr.span, traits::MiscObligation);\n         }\n \n-        let expected_arg_count = formal_input_tys.len();\n-\n-        // expected_count, arg_count, error_code, sugg_unit, sugg_tuple_wrap_args\n-        let mut arg_count_error: Option<(usize, usize, &str, bool, Option<FnArgsAsTuple<'_>>)> =\n-            None;\n+        let mut err_code = \"E0061\";\n \n         // If the arguments should be wrapped in a tuple (ex: closures), unwrap them here\n         let (formal_input_tys, expected_input_tys) = if tuple_arguments == TupleArguments {\n@@ -144,15 +154,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Tuple(arg_types) => {\n                     // Argument length differs\n                     if arg_types.len() != provided_args.len() {\n-                        arg_count_error =\n-                            Some((arg_types.len(), provided_args.len(), \"E0057\", false, None));\n+                        err_code = \"E0057\";\n                     }\n-                    let expected_input_tys = match expected_input_tys.get(0) {\n-                        Some(&ty) => match ty.kind() {\n-                            ty::Tuple(tys) => tys.iter().collect(),\n-                            _ => vec![],\n+                    let expected_input_tys = match expected_input_tys {\n+                        Some(expected_input_tys) => match expected_input_tys.get(0) {\n+                            Some(ty) => match ty.kind() {\n+                                ty::Tuple(tys) => Some(tys.iter().collect()),\n+                                _ => None,\n+                            },\n+                            None => None,\n                         },\n-                        None => vec![],\n+                        None => None,\n                     };\n                     (arg_types.iter().collect(), expected_input_tys)\n                 }\n@@ -167,67 +179,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                          for the function trait is neither a tuple nor unit\"\n                     )\n                     .emit();\n-                    (self.err_args(provided_args.len()), vec![])\n+                    (self.err_args(provided_args.len()), None)\n                 }\n             }\n-        } else if expected_arg_count == supplied_arg_count {\n-            (formal_input_tys.to_vec(), expected_input_tys)\n-        } else if c_variadic {\n-            if supplied_arg_count >= expected_arg_count {\n-                (formal_input_tys.to_vec(), expected_input_tys)\n-            } else {\n-                arg_count_error =\n-                    Some((expected_arg_count, supplied_arg_count, \"E0060\", false, None));\n-                (self.err_args(supplied_arg_count), vec![])\n-            }\n         } else {\n-            // is the missing argument of type `()`?\n-            let sugg_unit = if expected_input_tys.len() == 1 && supplied_arg_count == 0 {\n-                self.resolve_vars_if_possible(expected_input_tys[0]).is_unit()\n-            } else if formal_input_tys.len() == 1 && supplied_arg_count == 0 {\n-                self.resolve_vars_if_possible(formal_input_tys[0]).is_unit()\n-            } else {\n-                false\n-            };\n-\n-            // are we passing elements of a tuple without the tuple parentheses?\n-            let expected_input_tys = if expected_input_tys.is_empty() {\n-                // In most cases we can use expected_input_tys, but some callers won't have the type\n-                // information, in which case we fall back to the types from the input expressions.\n-                formal_input_tys\n-            } else {\n-                &*expected_input_tys\n-            };\n-\n-            let sugg_tuple_wrap_args = self.suggested_tuple_wrap(expected_input_tys, provided_args);\n-\n-            arg_count_error = Some((\n-                expected_arg_count,\n-                supplied_arg_count,\n-                \"E0061\",\n-                sugg_unit,\n-                sugg_tuple_wrap_args,\n-            ));\n-            (self.err_args(supplied_arg_count), vec![])\n+            (formal_input_tys.to_vec(), expected_input_tys)\n         };\n \n-        debug!(\n-            \"check_argument_types: formal_input_tys={:?}\",\n-            formal_input_tys.iter().map(|t| self.ty_to_string(*t)).collect::<Vec<String>>()\n-        );\n-\n-        // If there is no expectation, expect formal_input_tys.\n-        let expected_input_tys = if !expected_input_tys.is_empty() {\n+        // If there are no external expectations at the call site, just use the types from the function defn\n+        let expected_input_tys = if let Some(expected_input_tys) = expected_input_tys {\n+            assert_eq!(expected_input_tys.len(), formal_input_tys.len());\n             expected_input_tys\n         } else {\n             formal_input_tys.clone()\n         };\n \n-        assert_eq!(expected_input_tys.len(), formal_input_tys.len());\n-\n-        let provided_arg_count: usize = provided_args.len();\n+        let minimum_input_count = expected_input_tys.len();\n+        let provided_arg_count = provided_args.len();\n \n-        // Keep track of the fully coerced argument types\n+        // We'll also want to keep track of the fully coerced argument types, for an awkward hack near the end\n         let mut final_arg_types: Vec<Option<(Ty<'_>, Ty<'_>)>> = vec![None; provided_arg_count];\n \n         // We introduce a helper function to demand that a given argument satisfy a given input\n@@ -240,8 +210,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             debug!(\"checking argument {}: {:?} = {:?}\", idx, provided_arg, formal_input_ty);\n \n-            // The special-cased logic below has three functions:\n-            // 1. Provide as good of an expected type as possible.\n+            // We're on the happy path here, so we'll do a more involved check and write back types\n+            // To check compatibility, we'll do 3 things:\n+            // 1. Unify the provided argument with the expected type\n             let expectation = Expectation::rvalue_hint(self, expected_input_ty);\n \n             let checked_ty = self.check_expr_with_expectation(provided_arg, expectation);\n@@ -255,8 +226,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             final_arg_types[idx] = Some((checked_ty, coerced_ty));\n \n             // Cause selection errors caused by resolving a single argument to point at the\n-            // argument and not the call. This is otherwise redundant with the `demand_coerce`\n-            // call immediately after, but it lets us customize the span pointed to in the\n+            // argument and not the call. This lets us customize the span pointed to in the\n             // fulfillment error to be more accurate.\n             let coerced_ty =\n                 self.resolve_vars_with_obligations_and_mutate_fulfillment(coerced_ty, |errors| {\n@@ -270,18 +240,95 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 });\n \n+            // Make sure we store the resolved type\n             final_arg_types[idx] = Some((checked_ty, coerced_ty));\n \n-            // We're processing function arguments so we definitely want to use\n-            // two-phase borrows.\n-            self.demand_coerce(&provided_arg, checked_ty, coerced_ty, None, AllowTwoPhase::Yes);\n+            let coerce_error = self\n+                .try_coerce(provided_arg, checked_ty, coerced_ty, AllowTwoPhase::Yes, None)\n+                .err();\n+\n+            if coerce_error.is_some() {\n+                return Compatibility::Incompatible(coerce_error);\n+            }\n+\n+            // 3. Check if the formal type is a supertype of the checked one\n+            //    and register any such obligations for future type checks\n+            let supertype_error = self\n+                .at(&self.misc(provided_arg.span), self.param_env)\n+                .sup(formal_input_ty, coerced_ty);\n+            let subtyping_error = match supertype_error {\n+                Ok(InferOk { obligations, value: () }) => {\n+                    self.register_predicates(obligations);\n+                    None\n+                }\n+                Err(err) => Some(err),\n+            };\n \n-            // 3. Relate the expected type and the formal one,\n-            //    if the expected type was used for the coercion.\n-            self.demand_suptype(provided_arg.span, formal_input_ty, coerced_ty);\n+            // If neither check failed, the types are compatible\n+            match subtyping_error {\n+                None => Compatibility::Compatible,\n+                Some(_) => Compatibility::Incompatible(subtyping_error),\n+            }\n         };\n \n-        let minimum_input_count = formal_input_tys.len();\n+        // A \"softer\" version of the helper above, which checks types without persisting them,\n+        // and treats error types differently\n+        // This will allow us to \"probe\" for other argument orders that would likely have been correct\n+        let check_compatible = |arg_idx, input_idx| {\n+            let formal_input_ty: Ty<'tcx> = formal_input_tys[input_idx];\n+            let expected_input_ty: Ty<'tcx> = expected_input_tys[input_idx];\n+\n+            // If either is an error type, we defy the usual convention and consider them to *not* be\n+            // coercible.  This prevents our error message heuristic from trying to pass errors into\n+            // every argument.\n+            if formal_input_ty.references_error() || expected_input_ty.references_error() {\n+                return Compatibility::Incompatible(None);\n+            }\n+\n+            let provided_arg: &hir::Expr<'tcx> = &provided_args[arg_idx];\n+            let expectation = Expectation::rvalue_hint(self, expected_input_ty);\n+            // FIXME: check that this is safe; I don't believe this commits any of the obligations, but I can't be sure.\n+            //\n+            //   I had another method of \"soft\" type checking before,\n+            //   but it was failing to find the type of some expressions (like \"\")\n+            //   so I prodded this method and made it pub(super) so I could call it, and it seems to work well.\n+            let checked_ty = self.check_expr_kind(provided_arg, expectation);\n+\n+            let coerced_ty = expectation.only_has_type(self).unwrap_or(formal_input_ty);\n+            let can_coerce = self.can_coerce(checked_ty, coerced_ty);\n+\n+            if !can_coerce {\n+                return Compatibility::Incompatible(None);\n+            }\n+\n+            let subtyping_result = self\n+                .at(&self.misc(provided_arg.span), self.param_env)\n+                .sup(formal_input_ty, coerced_ty);\n+\n+            // Same as above: if either the coerce type or the checked type is an error type,\n+            // consider them *not* compatible.\n+            let coercible =\n+                !coerced_ty.references_error() && !checked_ty.references_error() && can_coerce;\n+\n+            match (coercible, &subtyping_result) {\n+                (true, Ok(_)) => Compatibility::Compatible,\n+                _ => Compatibility::Incompatible(subtyping_result.err()),\n+            }\n+        };\n+\n+        // To start, we only care \"along the diagonal\", where we expect every\n+        // provided arg to be in the right spot\n+        let mut compatibility = vec![Compatibility::Incompatible(None); provided_args.len()];\n+\n+        // Keep track of whether we *could possibly* be satisfied, i.e. whether we're on the happy path\n+        // if the wrong number of arguments were supplied, we CAN'T be satisfied,\n+        // and if we're c_variadic, the supplied arguments must be >= the minimum count from the function\n+        // otherwise, they need to be identical, because rust doesn't currently support variadic functions\n+        let mut call_appears_satisfied = if c_variadic {\n+            provided_arg_count >= minimum_input_count\n+        } else {\n+            provided_arg_count == minimum_input_count\n+        };\n \n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n@@ -305,6 +352,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n             }\n \n+            // Check each argument, to satisfy the input it was provided for\n+            // Visually, we're traveling down the diagonal of the compatibility matrix\n             for (idx, arg) in provided_args.iter().enumerate() {\n                 // Warn only for the first loop (the \"no closures\" one).\n                 // Closure arguments themselves can't be diverging, but\n@@ -327,15 +376,82 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n \n-                demand_compatible(idx, &mut final_arg_types);\n+                let compatible = demand_compatible(idx, &mut final_arg_types);\n+                let is_compatible = matches!(compatible, Compatibility::Compatible);\n+                compatibility[idx] = compatible;\n+\n+                if !is_compatible {\n+                    call_appears_satisfied = false;\n+                }\n             }\n         }\n \n-        // If there was an error in parameter count, emit that here\n-        if let Some((expected_count, arg_count, err_code, sugg_unit, sugg_tuple_wrap_args)) =\n-            arg_count_error\n-        {\n-            let (span, start_span, args, ctor_of) = match &call_expr.kind {\n+        // Logic here is a bit hairy\n+        'errors: {\n+            // If something above didn't typecheck, we've fallen off the happy path\n+            // and we should make some effort to provide better error messages\n+            if call_appears_satisfied {\n+                break 'errors;\n+            }\n+\n+            // The algorithm here is inspired by levenshtein distance and longest common subsequence.\n+            // We'll try to detect 4 different types of mistakes:\n+            // - An extra parameter has been provided that doesn't satisfy *any* of the other inputs\n+            // - An input is missing, which isn't satisfied by *any* of the other arguments\n+            // - Some number of arguments have been provided in the wrong order\n+            // - A type is straight up invalid\n+\n+            // First, let's find the errors\n+            let mut compatibility: Vec<_> = compatibility.into_iter().map(Some).collect();\n+            let (mut errors, matched_inputs) =\n+                ArgMatrix::new(minimum_input_count, provided_arg_count, |i, j| {\n+                    if i == j { compatibility[i].take().unwrap() } else { check_compatible(i, j) }\n+                })\n+                .find_errors();\n+\n+            // Okay, so here's where it gets complicated in regards to what errors\n+            // we emit and how.\n+            // There are 3 different \"types\" of errors we might encounter.\n+            //   1) Missing/extra/swapped arguments\n+            //   2) Valid but incorrect arguments\n+            //   3) Invalid arguments\n+            //      - Currently I think this only comes up with `CyclicTy`\n+            //\n+            // We first need to go through, remove those from (3) and emit those\n+            // as their own error, particularly since they're error code and\n+            // message is special. From what I can tell, we *must* emit these\n+            // here (vs somewhere prior to this function) since the arguments\n+            // become invalid *because* of how they get used in the function.\n+            // It is what it is.\n+\n+            let found_errors = !errors.is_empty();\n+\n+            errors.drain_filter(|error| {\n+                let Error::Invalid(input_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let expected_ty = expected_input_tys[*input_idx];\n+                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let cause = &self.misc(provided_args[*input_idx].span);\n+                let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                if let Some(e) = error {\n+                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                        self.report_and_explain_type_error(trace, e).emit();\n+                        return true;\n+                    }\n+                }\n+                false\n+            });\n+\n+            // We're done if we found errors, but we already emitted them.\n+            // I don't think we *should* be able to enter this bit of code\n+            // (`!call_appears_satisfied`) without *also* finding errors, but we\n+            // don't want to accidentally not emit an error if there is some\n+            // logic bug in the `ArgMatrix` code.\n+            if found_errors && errors.is_empty() {\n+                break 'errors;\n+            }\n+\n+            // Next, let's construct the error\n+            let (error_span, full_call_span, ctor_of) = match &call_expr.kind {\n                 hir::ExprKind::Call(\n                     hir::Expr {\n                         span,\n@@ -346,67 +462,484 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             )),\n                         ..\n                     },\n-                    args,\n-                ) => (*span, *span, &args[..], Some(of)),\n-                hir::ExprKind::Call(hir::Expr { span, .. }, args) => {\n-                    (*span, *span, &args[..], None)\n+                    _,\n+                ) => (call_span, *span, Some(of)),\n+                hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None),\n+                hir::ExprKind::MethodCall(path_segment, _, span) => {\n+                    let ident_span = path_segment.ident.span;\n+                    let ident_span = if let Some(args) = path_segment.args {\n+                        ident_span.with_hi(args.span_ext.hi())\n+                    } else {\n+                        ident_span\n+                    };\n+                    (\n+                        *span, ident_span, None, // methods are never ctors\n+                    )\n                 }\n-                hir::ExprKind::MethodCall(path_segment, args, _) => (\n-                    path_segment.ident.span,\n-                    // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n-                    path_segment\n-                        .args\n-                        .and_then(|args| args.args.iter().last())\n-                        // Account for `foo.bar::<T>()`.\n-                        .map(|arg| {\n-                            // Skip the closing `>`.\n-                            tcx.sess\n-                                .source_map()\n-                                .next_point(tcx.sess.source_map().next_point(arg.span()))\n-                        })\n-                        .unwrap_or(path_segment.ident.span),\n-                    &args[1..], // Skip the receiver.\n-                    None,       // methods are never ctors\n-                ),\n                 k => span_bug!(call_span, \"checking argument types on a non-call: `{:?}`\", k),\n             };\n-            let arg_spans = if provided_args.is_empty() {\n-                // foo()\n-                // ^^^-- supplied 0 arguments\n-                // |\n-                // expected 2 arguments\n-                vec![tcx.sess.source_map().next_point(start_span).with_hi(call_span.hi())]\n-            } else {\n-                // foo(1, 2, 3)\n-                // ^^^ -  -  - supplied 3 arguments\n-                // |\n-                // expected 2 arguments\n-                args.iter().map(|arg| arg.span).collect::<Vec<Span>>()\n-            };\n+            let args_span = error_span.trim_start(full_call_span).unwrap_or(error_span);\n             let call_name = match ctor_of {\n                 Some(CtorOf::Struct) => \"struct\",\n                 Some(CtorOf::Variant) => \"enum variant\",\n                 None => \"function\",\n             };\n-            let mut err = tcx.sess.struct_span_err_with_code(\n-                span,\n-                &format!(\n-                    \"this {} takes {}{} but {} {} supplied\",\n+            if c_variadic && provided_arg_count < minimum_input_count {\n+                err_code = \"E0060\";\n+            }\n+\n+            // Next special case: The case where we expect a single tuple and\n+            // wrapping all the args in parentheses (or adding a comma to\n+            // already existing parentheses) will result in a tuple that\n+            // satisfies the call.\n+            // This isn't super ideal code, because we copy code from elsewhere\n+            // and somewhat duplicate this. We also delegate to the general type\n+            // mismatch suggestions for the single arg case.\n+            let sugg_tuple_wrap_args =\n+                self.suggested_tuple_wrap(&expected_input_tys, provided_args);\n+            match sugg_tuple_wrap_args {\n+                TupleMatchFound::None => {}\n+                TupleMatchFound::Single => {\n+                    let expected_ty = expected_input_tys[0];\n+                    let provided_ty = final_arg_types[0].map(|ty| ty.0).unwrap();\n+                    let cause = &self.misc(provided_args[0].span);\n+                    let compatibility = demand_compatible(0, &mut final_arg_types);\n+                    let type_error = match compatibility {\n+                        Compatibility::Incompatible(Some(error)) => error,\n+                        _ => TypeError::Mismatch,\n+                    };\n+                    let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                    let mut err = self.report_and_explain_type_error(trace, &type_error);\n+                    self.emit_coerce_suggestions(\n+                        &mut err,\n+                        &provided_args[0],\n+                        final_arg_types[0].map(|ty| ty.0).unwrap(),\n+                        final_arg_types[0].map(|ty| ty.1).unwrap(),\n+                        None,\n+                        None,\n+                    );\n+                    err.span_label(\n+                        full_call_span,\n+                        format!(\"arguments to this {} are incorrect\", call_name),\n+                    );\n+                    // Call out where the function is defined\n+                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n+                        let mut spans: MultiSpan = def_span.into();\n+\n+                        let params = tcx\n+                            .hir()\n+                            .get_if_local(def_id)\n+                            .and_then(|node| node.body_id())\n+                            .into_iter()\n+                            .map(|id| tcx.hir().body(id).params)\n+                            .flatten();\n+\n+                        for param in params {\n+                            spans.push_span_label(param.span, String::new());\n+                        }\n+\n+                        let def_kind = tcx.def_kind(def_id);\n+                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+                    }\n+                    err.emit();\n+                    break 'errors;\n+                }\n+                TupleMatchFound::Multiple(start, end) => {\n+                    let mut err = tcx.sess.struct_span_err_with_code(\n+                        full_call_span,\n+                        &format!(\n+                            \"this {} takes {}{} but {} {} supplied\",\n+                            call_name,\n+                            if c_variadic { \"at least \" } else { \"\" },\n+                            potentially_plural_count(minimum_input_count, \"argument\"),\n+                            potentially_plural_count(provided_arg_count, \"argument\"),\n+                            if provided_arg_count == 1 { \"was\" } else { \"were\" }\n+                        ),\n+                        DiagnosticId::Error(err_code.to_owned()),\n+                    );\n+                    // Call out where the function is defined\n+                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n+                        let mut spans: MultiSpan = def_span.into();\n+\n+                        let params = tcx\n+                            .hir()\n+                            .get_if_local(def_id)\n+                            .and_then(|node| node.body_id())\n+                            .into_iter()\n+                            .map(|id| tcx.hir().body(id).params)\n+                            .flatten();\n+\n+                        for param in params {\n+                            spans.push_span_label(param.span, String::new());\n+                        }\n+\n+                        let def_kind = tcx.def_kind(def_id);\n+                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+                    }\n+                    err.multipart_suggestion(\n+                        \"use parentheses to construct a tuple\",\n+                        vec![(start, '('.to_string()), (end, ')'.to_string())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                    err.emit();\n+                    break 'errors;\n+                }\n+            }\n+\n+            // Okay, now that we've emitted the special errors separately, we\n+            // are only left missing/extra/swapped and mismatched arguments, both\n+            // can be collated pretty easily if needed.\n+\n+            // Next special case: if there is only one \"Incompatible\" error, just emit that\n+            if errors.len() == 1 {\n+                if let Some(Error::Invalid(input_idx, Compatibility::Incompatible(Some(error)))) =\n+                    errors.iter().next()\n+                {\n+                    let expected_ty = expected_input_tys[*input_idx];\n+                    let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                    let cause = &self.misc(provided_args[*input_idx].span);\n+                    let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                    let mut err = self.report_and_explain_type_error(trace, error);\n+                    self.emit_coerce_suggestions(\n+                        &mut err,\n+                        &provided_args[*input_idx],\n+                        final_arg_types[*input_idx].map(|ty| ty.0).unwrap(),\n+                        final_arg_types[*input_idx].map(|ty| ty.1).unwrap(),\n+                        None,\n+                        None,\n+                    );\n+                    err.span_label(\n+                        full_call_span,\n+                        format!(\"arguments to this {} are incorrect\", call_name),\n+                    );\n+                    // Call out where the function is defined\n+                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n+                        let mut spans: MultiSpan = def_span.into();\n+\n+                        let params = tcx\n+                            .hir()\n+                            .get_if_local(def_id)\n+                            .and_then(|node| node.body_id())\n+                            .into_iter()\n+                            .map(|id| tcx.hir().body(id).params)\n+                            .flatten();\n+\n+                        for param in params {\n+                            spans.push_span_label(param.span, String::new());\n+                        }\n+\n+                        let def_kind = tcx.def_kind(def_id);\n+                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+                    }\n+                    err.emit();\n+                    break 'errors;\n+                }\n+            }\n+\n+            let mut err = if minimum_input_count == provided_arg_count {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    full_call_span,\n+                    E0308,\n+                    \"arguments to this {} are incorrect\",\n                     call_name,\n-                    if c_variadic { \"at least \" } else { \"\" },\n-                    potentially_plural_count(expected_count, \"argument\"),\n-                    potentially_plural_count(arg_count, \"argument\"),\n-                    if arg_count == 1 { \"was\" } else { \"were\" }\n-                ),\n-                DiagnosticId::Error(err_code.to_owned()),\n-            );\n-            let label = format!(\"supplied {}\", potentially_plural_count(arg_count, \"argument\"));\n-            for (i, span) in arg_spans.into_iter().enumerate() {\n-                err.span_label(\n-                    span,\n-                    if arg_count == 0 || i + 1 == arg_count { &label } else { \"\" },\n-                );\n+                )\n+            } else {\n+                tcx.sess.struct_span_err_with_code(\n+                    full_call_span,\n+                    &format!(\n+                        \"this {} takes {}{} but {} {} supplied\",\n+                        call_name,\n+                        if c_variadic { \"at least \" } else { \"\" },\n+                        potentially_plural_count(minimum_input_count, \"argument\"),\n+                        potentially_plural_count(provided_arg_count, \"argument\"),\n+                        if provided_arg_count == 1 { \"was\" } else { \"were\" }\n+                    ),\n+                    DiagnosticId::Error(err_code.to_owned()),\n+                )\n+            };\n+\n+            // As we encounter issues, keep track of what we want to provide for the suggestion\n+            let mut labels = vec![];\n+            // If there is a single error, we give a specific suggestion; otherwise, we change to\n+            // \"did you mean\" with the suggested function call\n+            enum SuggestionText {\n+                None,\n+                Provide(bool),\n+                Remove(bool),\n+                Swap,\n+                Reorder,\n+                DidYouMean,\n             }\n+            let mut suggestion_text = SuggestionText::None;\n+\n+            let mut errors = errors.into_iter().peekable();\n+            while let Some(error) = errors.next() {\n+                match error {\n+                    Error::Invalid(input_idx, compatibility) => {\n+                        let expected_ty = expected_input_tys[input_idx];\n+                        if let Compatibility::Incompatible(error) = &compatibility {\n+                            let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n+                            let cause = &self.misc(provided_args[input_idx].span);\n+                            let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                            if let Some(e) = error {\n+                                self.note_type_err(\n+                                    &mut err,\n+                                    &trace.cause,\n+                                    None,\n+                                    Some(trace.values),\n+                                    e,\n+                                    false,\n+                                    true,\n+                                );\n+                            }\n+                        }\n+\n+                        self.emit_coerce_suggestions(\n+                            &mut err,\n+                            &provided_args[input_idx],\n+                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n+                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                            None,\n+                            None,\n+                        );\n+                    }\n+                    Error::Extra(arg_idx) => {\n+                        let arg_type = if let Some((_, ty)) = final_arg_types[arg_idx] {\n+                            if ty.references_error() || ty.has_infer_types() {\n+                                \"\".into()\n+                            } else {\n+                                format!(\" of type `{}`\", ty)\n+                            }\n+                        } else {\n+                            \"\".into()\n+                        };\n+                        labels.push((\n+                            provided_args[arg_idx].span,\n+                            format!(\"argument{} unexpected\", arg_type),\n+                        ));\n+                        suggestion_text = match suggestion_text {\n+                            SuggestionText::None => SuggestionText::Remove(false),\n+                            SuggestionText::Remove(_) => SuggestionText::Remove(true),\n+                            _ => SuggestionText::DidYouMean,\n+                        };\n+                    }\n+                    Error::Missing(input_idx) => {\n+                        // If there are multiple missing arguments adjacent to each other,\n+                        // then we can provide a single error.\n+\n+                        let mut missing_idxs = vec![input_idx];\n+                        while let Some(e) = errors.next_if(|e| matches!(e, Error::Missing(input_idx) if *input_idx == (missing_idxs.last().unwrap() + 1))) {\n+                            match e {\n+                                Error::Missing(input_idx) => missing_idxs.push(input_idx),\n+                                _ => unreachable!(),\n+                            }\n+                        }\n+\n+                        // NOTE: Because we might be re-arranging arguments, might have extra\n+                        // arguments, etc. it's hard to *really* know where we should provide\n+                        // this error label, so as a heuristic, we point to the provided arg, or\n+                        // to the call if the missing inputs pass the provided args.\n+                        match &missing_idxs[..] {\n+                            &[input_idx] => {\n+                                let expected_ty = expected_input_tys[input_idx];\n+                                let input_ty = self.resolve_vars_if_possible(expected_ty);\n+                                let span = if input_idx < provided_arg_count {\n+                                    let arg_span = provided_args[input_idx].span;\n+                                    Span::new(arg_span.lo(), arg_span.hi(), arg_span.ctxt(), None)\n+                                } else {\n+                                    args_span\n+                                };\n+                                let arg_type =\n+                                    if input_ty.references_error() || input_ty.has_infer_types() {\n+                                        \"\".into()\n+                                    } else {\n+                                        format!(\" of type `{}`\", input_ty)\n+                                    };\n+                                labels.push((span, format!(\"an argument{} is missing\", arg_type)));\n+                                suggestion_text = match suggestion_text {\n+                                    SuggestionText::None => SuggestionText::Provide(false),\n+                                    SuggestionText::Provide(_) => SuggestionText::Provide(true),\n+                                    _ => SuggestionText::DidYouMean,\n+                                };\n+                            }\n+                            &[first_idx, second_idx] => {\n+                                let first_input_ty =\n+                                    self.resolve_vars_if_possible(expected_input_tys[first_idx]);\n+                                let second_input_ty =\n+                                    self.resolve_vars_if_possible(expected_input_tys[second_idx]);\n+\n+                                let span = if second_idx < provided_arg_count {\n+                                    let first_arg_span = provided_args[first_idx].span;\n+                                    let second_arg_span = provided_args[second_idx].span;\n+                                    Span::new(\n+                                        first_arg_span.lo(),\n+                                        second_arg_span.hi(),\n+                                        first_arg_span.ctxt(),\n+                                        None,\n+                                    )\n+                                } else {\n+                                    args_span\n+                                };\n+                                let any_unnameable = false\n+                                    || first_input_ty.references_error()\n+                                    || first_input_ty.has_infer_types()\n+                                    || second_input_ty.references_error()\n+                                    || second_input_ty.has_infer_types();\n+                                let arg_type = if any_unnameable {\n+                                    \"\".into()\n+                                } else {\n+                                    format!(\n+                                        \" of type `{}` and `{}`\",\n+                                        first_input_ty, second_input_ty\n+                                    )\n+                                };\n+                                labels\n+                                    .push((span, format!(\"two arguments{} are missing\", arg_type)));\n+                                suggestion_text = match suggestion_text {\n+                                    SuggestionText::None | SuggestionText::Provide(_) => {\n+                                        SuggestionText::Provide(true)\n+                                    }\n+                                    _ => SuggestionText::DidYouMean,\n+                                };\n+                            }\n+                            &[first_idx, second_idx, third_idx] => {\n+                                let first_input_ty =\n+                                    self.resolve_vars_if_possible(expected_input_tys[first_idx]);\n+                                let second_input_ty =\n+                                    self.resolve_vars_if_possible(expected_input_tys[second_idx]);\n+                                let third_input_ty =\n+                                    self.resolve_vars_if_possible(expected_input_tys[second_idx]);\n+                                let span = if third_idx < provided_arg_count {\n+                                    let first_arg_span = provided_args[first_idx].span;\n+                                    let third_arg_span = provided_args[third_idx].span;\n+                                    Span::new(\n+                                        first_arg_span.lo(),\n+                                        third_arg_span.hi(),\n+                                        first_arg_span.ctxt(),\n+                                        None,\n+                                    )\n+                                } else {\n+                                    args_span\n+                                };\n+                                let any_unnameable = false\n+                                    || first_input_ty.references_error()\n+                                    || first_input_ty.has_infer_types()\n+                                    || second_input_ty.references_error()\n+                                    || second_input_ty.has_infer_types()\n+                                    || third_input_ty.references_error()\n+                                    || third_input_ty.has_infer_types();\n+                                let arg_type = if any_unnameable {\n+                                    \"\".into()\n+                                } else {\n+                                    format!(\n+                                        \" of type `{}`, `{}`, and `{}`\",\n+                                        first_input_ty, second_input_ty, third_input_ty\n+                                    )\n+                                };\n+                                labels.push((\n+                                    span,\n+                                    format!(\"three arguments{} are missing\", arg_type),\n+                                ));\n+                                suggestion_text = match suggestion_text {\n+                                    SuggestionText::None | SuggestionText::Provide(_) => {\n+                                        SuggestionText::Provide(true)\n+                                    }\n+                                    _ => SuggestionText::DidYouMean,\n+                                };\n+                            }\n+                            missing_idxs => {\n+                                let first_idx = *missing_idxs.first().unwrap();\n+                                let second_idx = *missing_idxs.last().unwrap();\n+                                // NOTE: Because we might be re-arranging arguments, might have extra arguments, etc.\n+                                // It's hard to *really* know where we should provide this error label, so this is a\n+                                // decent heuristic\n+                                let span = if first_idx < provided_arg_count {\n+                                    let first_arg_span = provided_args[first_idx].span;\n+                                    let second_arg_span = provided_args[second_idx].span;\n+                                    Span::new(\n+                                        first_arg_span.lo(),\n+                                        second_arg_span.hi(),\n+                                        first_arg_span.ctxt(),\n+                                        None,\n+                                    )\n+                                } else {\n+                                    // Otherwise just label the whole function\n+                                    args_span\n+                                };\n+                                labels.push((span, format!(\"multiple arguments are missing\")));\n+                                suggestion_text = match suggestion_text {\n+                                    SuggestionText::None | SuggestionText::Provide(_) => {\n+                                        SuggestionText::Provide(true)\n+                                    }\n+                                    _ => SuggestionText::DidYouMean,\n+                                };\n+                            }\n+                        }\n+                    }\n+                    Error::Swap(input_idx, other_input_idx, arg_idx, other_arg_idx) => {\n+                        let first_span = provided_args[arg_idx].span;\n+                        let second_span = provided_args[other_arg_idx].span;\n+\n+                        let first_expected_ty =\n+                            self.resolve_vars_if_possible(expected_input_tys[input_idx]);\n+                        let first_provided_ty = if let Some((ty, _)) = final_arg_types[arg_idx] {\n+                            format!(\",found `{}`\", ty)\n+                        } else {\n+                            \"\".into()\n+                        };\n+                        labels.push((\n+                            first_span,\n+                            format!(\"expected `{}`{}\", first_expected_ty, first_provided_ty),\n+                        ));\n+                        let other_expected_ty =\n+                            self.resolve_vars_if_possible(expected_input_tys[other_input_idx]);\n+                        let other_provided_ty =\n+                            if let Some((ty, _)) = final_arg_types[other_arg_idx] {\n+                                format!(\",found `{}`\", ty)\n+                            } else {\n+                                \"\".into()\n+                            };\n+                        labels.push((\n+                            second_span,\n+                            format!(\"expected `{}`{}\", other_expected_ty, other_provided_ty),\n+                        ));\n+                        suggestion_text = match suggestion_text {\n+                            SuggestionText::None => SuggestionText::Swap,\n+                            _ => SuggestionText::DidYouMean,\n+                        };\n+                    }\n+                    Error::Permutation(args) => {\n+                        for (dst_arg, dest_input) in args {\n+                            let expected_ty =\n+                                self.resolve_vars_if_possible(expected_input_tys[dest_input]);\n+                            let provided_ty = if let Some((ty, _)) = final_arg_types[dst_arg] {\n+                                format!(\",found `{}`\", ty)\n+                            } else {\n+                                \"\".into()\n+                            };\n+                            labels.push((\n+                                provided_args[dst_arg].span,\n+                                format!(\"expected `{}`{}\", expected_ty, provided_ty),\n+                            ));\n+                        }\n+\n+                        suggestion_text = match suggestion_text {\n+                            SuggestionText::None => SuggestionText::Reorder,\n+                            _ => SuggestionText::DidYouMean,\n+                        };\n+                    }\n+                }\n+            }\n+\n+            // If we have less than 5 things to say, it would be useful to call out exactly what's wrong\n+            if labels.len() <= 5 {\n+                for (span, label) in labels {\n+                    err.span_label(span, label);\n+                }\n+            }\n+\n+            // Call out where the function is defined\n             if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n                 let mut spans: MultiSpan = def_span.into();\n \n@@ -425,33 +958,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let def_kind = tcx.def_kind(def_id);\n                 err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n             }\n-            if sugg_unit {\n-                let sugg_span = tcx.sess.source_map().end_point(call_expr.span);\n-                // remove closing `)` from the span\n-                let sugg_span = sugg_span.shrink_to_lo();\n-                err.span_suggestion(\n-                    sugg_span,\n-                    \"expected the unit value `()`; create it with empty parentheses\",\n-                    String::from(\"()\"),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else if let Some(FnArgsAsTuple { first, last }) = sugg_tuple_wrap_args {\n-                err.multipart_suggestion(\n-                    \"use parentheses to construct a tuple\",\n-                    vec![\n-                        (first.span.shrink_to_lo(), '('.to_string()),\n-                        (last.span.shrink_to_hi(), ')'.to_string()),\n-                    ],\n-                    Applicability::MachineApplicable,\n+\n+            // And add a suggestion block for all of the parameters\n+            let suggestion_text = match suggestion_text {\n+                SuggestionText::None => None,\n+                SuggestionText::Provide(plural) => {\n+                    Some(format!(\"provide the argument{}\", if plural { \"s\" } else { \"\" }))\n+                }\n+                SuggestionText::Remove(plural) => {\n+                    Some(format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }))\n+                }\n+                SuggestionText::Swap => Some(format!(\"swap these arguments\")),\n+                SuggestionText::Reorder => Some(format!(\"reorder these arguments\")),\n+                SuggestionText::DidYouMean => Some(format!(\"did you mean\")),\n+            };\n+            if let Some(suggestion_text) = suggestion_text {\n+                let source_map = self.sess().source_map();\n+                let mut suggestion = format!(\n+                    \"{}(\",\n+                    source_map.span_to_snippet(full_call_span).unwrap_or_else(|_| String::new())\n                 );\n-            } else {\n-                err.span_label(\n-                    span,\n-                    format!(\n-                        \"expected {}{}\",\n-                        if c_variadic { \"at least \" } else { \"\" },\n-                        potentially_plural_count(expected_count, \"argument\")\n-                    ),\n+                for (idx, arg) in matched_inputs.iter().enumerate() {\n+                    let suggestion_text = if let Some(arg) = arg {\n+                        let arg_span = provided_args[*arg].span;\n+                        let arg_text = source_map.span_to_snippet(arg_span).unwrap();\n+                        arg_text\n+                    } else {\n+                        // Propose a placeholder of the correct type\n+                        let expected_ty = expected_input_tys[idx];\n+                        let input_ty = self.resolve_vars_if_possible(expected_ty);\n+                        if input_ty.is_unit() {\n+                            \"()\".to_string()\n+                        } else {\n+                            format!(\"{{{}}}\", input_ty)\n+                        }\n+                    };\n+                    suggestion += &suggestion_text;\n+                    if idx < minimum_input_count - 1 {\n+                        suggestion += \", \";\n+                    }\n+                }\n+                suggestion += \")\";\n+                err.span_suggestion_verbose(\n+                    error_span,\n+                    &suggestion_text,\n+                    suggestion,\n+                    Applicability::HasPlaceholders,\n                 );\n             }\n             err.emit();\n@@ -460,10 +1012,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for arg in provided_args.iter().skip(minimum_input_count) {\n             let arg_ty = self.check_expr(&arg);\n \n+            // If the function is c-style variadic, we skipped a bunch of arguments\n+            // so we need to check those, and write out the types\n+            // Ideally this would be folded into the above, for uniform style\n+            // but c-variadic is already a corner case\n             if c_variadic {\n-                // We also need to make sure we at least write the ty of the other\n-                // arguments which we skipped above, either because they were additional\n-                // c_variadic args, or because we had an argument count mismatch.\n                 fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n                     use crate::structured_errors::MissingCastForVariadicArg;\n \n@@ -498,27 +1051,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expected_input_tys: &[Ty<'tcx>],\n         provided_args: &'tcx [hir::Expr<'tcx>],\n-    ) -> Option<FnArgsAsTuple<'_>> {\n-        let [expected_arg_type] = expected_input_tys[..] else { return None };\n-\n+    ) -> TupleMatchFound {\n+        // Only handle the case where we expect only one tuple arg\n+        let [expected_arg_type] = expected_input_tys[..] else { return TupleMatchFound::None };\n         let &ty::Tuple(expected_types) = self.resolve_vars_if_possible(expected_arg_type).kind()\n-            else { return None };\n+            else { return TupleMatchFound::None };\n+\n+        // First check that there are the same number of types.\n+        if expected_types.len() != provided_args.len() {\n+            return TupleMatchFound::None;\n+        }\n \n         let supplied_types: Vec<_> = provided_args.iter().map(|arg| self.check_expr(arg)).collect();\n \n         let all_match = iter::zip(expected_types, supplied_types)\n             .all(|(expected, supplied)| self.can_eq(self.param_env, expected, supplied).is_ok());\n \n-        if all_match {\n-            match provided_args {\n-                [] => None,\n-                [_] => unreachable!(\n-                    \"shouldn't reach here - need count mismatch between 1-tuple and 1-argument\"\n-                ),\n-                [first, .., last] => Some(FnArgsAsTuple { first, last }),\n+        if !all_match {\n+            return TupleMatchFound::None;\n+        }\n+        match provided_args {\n+            [] => TupleMatchFound::None,\n+            [_] => TupleMatchFound::Single,\n+            [first, .., last] => {\n+                TupleMatchFound::Multiple(first.span.shrink_to_lo(), last.span.shrink_to_hi())\n             }\n-        } else {\n-            None\n         }\n     }\n "}, {"sha": "ce9ff61bd9e6f0ada69ba401eab3e39265cbcc9f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,9 +1,9 @@\n mod _impl;\n+mod arg_matrix;\n mod checks;\n mod suggestions;\n \n pub use _impl::*;\n-pub use checks::*;\n pub use suggestions::*;\n \n use crate::astconv::AstConv;"}, {"sha": "9fb9652b849c9142b87d47fb8f8a90ce30e915a0", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -61,9 +61,11 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n+#![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n+#![feature(label_break_value)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]"}, {"sha": "18926f5daf71a7a91f8db9357c9d548421bf64f0", "filename": "src/test/ui/arg-count-mismatch.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.rs?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern: arguments were supplied\n-\n-fn f(x: isize) { }\n-\n-fn main() { let i: (); i = f(); }"}, {"sha": "d0577e4864a78bb238eca750617de5665d2901dc", "filename": "src/test/ui/arg-count-mismatch.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.stderr?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,17 +0,0 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n-  --> $DIR/arg-count-mismatch.rs:5:28\n-   |\n-LL | fn main() { let i: (); i = f(); }\n-   |                            ^-- supplied 0 arguments\n-   |                            |\n-   |                            expected 1 argument\n-   |\n-note: function defined here\n-  --> $DIR/arg-count-mismatch.rs:3:4\n-   |\n-LL | fn f(x: isize) { }\n-   |    ^ --------\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0061`."}, {"sha": "04ce2888785be266d48de1153d8c52857a9f284f", "filename": "src/test/ui/arg-type-mismatch.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.rs?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern: mismatched types\n-\n-fn f(x: isize) { }\n-\n-fn main() { let i: (); i = f(()); }"}, {"sha": "05b21efeecec48b6ad3c9496804153eff903daef", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,9 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/arg-type-mismatch.rs:5:30\n-   |\n-LL | fn main() { let i: (); i = f(()); }\n-   |                              ^^ expected `isize`, found `()`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "765b2d5d68e4abf4e9f3f1af499cde8755e65e8d", "filename": "src/test/ui/argument-suggestions/basic.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,25 @@\n+// Some basic \"obvious\" cases for the heuristic error messages added for #65853\n+// One for each of the detected cases\n+\n+enum E { X, Y }\n+enum F { X2, Y2 }\n+struct G {}\n+struct H {}\n+struct X {}\n+struct Y {}\n+struct Z {}\n+\n+\n+fn invalid(_i: u32) {}\n+fn extra() {}\n+fn missing(_i: u32) {}\n+fn swapped(_i: u32, _s: &str) {}\n+fn permuted(_x: X, _y: Y, _z: Z) {}\n+\n+fn main() {\n+    invalid(1.0); //~ ERROR mismatched types\n+    extra(\"\"); //~ ERROR this function takes\n+    missing(); //~ ERROR this function takes\n+    swapped(\"\", 1); //~ ERROR arguments to this function are incorrect\n+    permuted(Y {}, Z {}, X {}); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "78f82b076198a91b812e944b91f1c11db32f4a5f", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,87 @@\n+error[E0308]: mismatched types\n+  --> $DIR/basic.rs:20:13\n+   |\n+LL |     invalid(1.0);\n+   |     ------- ^^^ expected `u32`, found floating-point number\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/basic.rs:13:4\n+   |\n+LL | fn invalid(_i: u32) {}\n+   |    ^^^^^^^ -------\n+\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/basic.rs:21:5\n+   |\n+LL |     extra(\"\");\n+   |     ^^^^^ -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/basic.rs:14:4\n+   |\n+LL | fn extra() {}\n+   |    ^^^^^\n+help: remove the extra argument\n+   |\n+LL |     extra();\n+   |     ~~~~~~~\n+\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/basic.rs:22:5\n+   |\n+LL |     missing();\n+   |     ^^^^^^^-- an argument of type `u32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/basic.rs:15:4\n+   |\n+LL | fn missing(_i: u32) {}\n+   |    ^^^^^^^ -------\n+help: provide the argument\n+   |\n+LL |     missing({u32});\n+   |     ~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/basic.rs:23:5\n+   |\n+LL |     swapped(\"\", 1);\n+   |     ^^^^^^^ --  - expected `&str`,found `{integer}`\n+   |             |\n+   |             expected `u32`,found `&'static str`\n+   |\n+note: function defined here\n+  --> $DIR/basic.rs:16:4\n+   |\n+LL | fn swapped(_i: u32, _s: &str) {}\n+   |    ^^^^^^^ -------  --------\n+help: swap these arguments\n+   |\n+LL |     swapped(1, \"\");\n+   |     ~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/basic.rs:24:5\n+   |\n+LL |     permuted(Y {}, Z {}, X {});\n+   |     ^^^^^^^^ ----  ----  ---- expected `Z`,found `X`\n+   |              |     |\n+   |              |     expected `Y`,found `Z`\n+   |              expected `X`,found `Y`\n+   |\n+note: function defined here\n+  --> $DIR/basic.rs:17:4\n+   |\n+LL | fn permuted(_x: X, _y: Y, _z: Z) {}\n+   |    ^^^^^^^^ -----  -----  -----\n+help: reorder these arguments\n+   |\n+LL |     permuted(X {}, Y {}, Z {});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "384cdca7e4fdc16477efb872e6b9e0b024113822", "filename": "src/test/ui/argument-suggestions/complex.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,16 @@\n+// A complex case with mixed suggestions from #65853\n+\n+enum E { X, Y }\n+enum F { X2, Y2 }\n+struct G {}\n+struct H {}\n+struct X {}\n+struct Y {}\n+struct Z {}\n+\n+fn complex(_i: u32, _s: &str, _e: E, _f: F, _g: G, _x: X, _y: Y, _z: Z ) {}\n+\n+fn main() {\n+  complex(1.0, H {}, &\"\", G{}, F::X2, Z {}, X {}, Y {});\n+  //~^ ERROR arguments to this function are incorrect\n+}"}, {"sha": "c628f7dff346649ef8758dc96a72598ea7320104", "filename": "src/test/ui/argument-suggestions/complex.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fcomplex.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/complex.rs:14:3\n+   |\n+LL |   complex(1.0, H {}, &\"\", G{}, F::X2, Z {}, X {}, Y {});\n+   |   ^^^^^^^ --- expected `u32`, found floating-point number\n+   |\n+note: function defined here\n+  --> $DIR/complex.rs:11:4\n+   |\n+LL | fn complex(_i: u32, _s: &str, _e: E, _f: F, _g: G, _x: X, _y: Y, _z: Z ) {}\n+   |    ^^^^^^^ -------  --------  -----  -----  -----  -----  -----  ------\n+help: did you mean\n+   |\n+LL |   complex({u32}, &\"\", {E}, F::X2, G{}, X {}, Y {}, Z {});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3706ac4e8e18d1b0fd61d8b4efc356f8f9cdc848", "filename": "src/test/ui/argument-suggestions/extra_arguments.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,35 @@\n+fn empty() {}\n+fn one_arg(_a: i32) {}\n+fn two_arg_same(_a: i32, _b: i32) {}\n+fn two_arg_diff(_a: i32, _b: &str) {}\n+\n+fn main() {\n+  empty(\"\"); //~ ERROR this function takes\n+\n+  one_arg(1, 1); //~ ERROR this function takes\n+  one_arg(1, \"\"); //~ ERROR this function takes\n+  one_arg(1, \"\", 1.0); //~ ERROR this function takes\n+\n+  two_arg_same(1, 1, 1); //~ ERROR this function takes\n+  two_arg_same(1, 1, 1.0); //~ ERROR this function takes\n+\n+  two_arg_diff(1, 1, \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, \"\", \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, 1, \"\", \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, \"\", 1, \"\"); //~ ERROR this function takes\n+\n+  // Check with weird spacing and newlines\n+  two_arg_same(1, 1,     \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, 1,     \"\"); //~ ERROR this function takes\n+  two_arg_same( //~ ERROR this function takes\n+    1,\n+    1,\n+    \"\"\n+  );\n+\n+  two_arg_diff( //~ ERROR this function takes\n+    1,\n+    1,\n+    \"\"\n+  );\n+}"}, {"sha": "9b63f9bcbfae4c1e404ad071ab72b75f86613570", "filename": "src/test/ui/argument-suggestions/extra_arguments.stderr", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,239 @@\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/extra_arguments.rs:7:3\n+   |\n+LL |   empty(\"\");\n+   |   ^^^^^ -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:1:4\n+   |\n+LL | fn empty() {}\n+   |    ^^^^^\n+help: remove the extra argument\n+   |\n+LL |   empty();\n+   |   ~~~~~~~\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/extra_arguments.rs:9:3\n+   |\n+LL |   one_arg(1, 1);\n+   |   ^^^^^^^    - argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:2:4\n+   |\n+LL | fn one_arg(_a: i32) {}\n+   |    ^^^^^^^ -------\n+help: remove the extra argument\n+   |\n+LL |   one_arg(1);\n+   |   ~~~~~~~~~~\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/extra_arguments.rs:10:3\n+   |\n+LL |   one_arg(1, \"\");\n+   |   ^^^^^^^    -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:2:4\n+   |\n+LL | fn one_arg(_a: i32) {}\n+   |    ^^^^^^^ -------\n+help: remove the extra argument\n+   |\n+LL |   one_arg(1);\n+   |   ~~~~~~~~~~\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:11:3\n+   |\n+LL |   one_arg(1, \"\", 1.0);\n+   |   ^^^^^^^    --  --- argument unexpected\n+   |              |\n+   |              argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:2:4\n+   |\n+LL | fn one_arg(_a: i32) {}\n+   |    ^^^^^^^ -------\n+help: remove the extra arguments\n+   |\n+LL |   one_arg(1);\n+   |   ~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:13:3\n+   |\n+LL |   two_arg_same(1, 1, 1);\n+   |   ^^^^^^^^^^^^       - argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:3:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_same(1, 1);\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:14:3\n+   |\n+LL |   two_arg_same(1, 1, 1.0);\n+   |   ^^^^^^^^^^^^       --- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:3:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_same(1, 1);\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:16:3\n+   |\n+LL |   two_arg_diff(1, 1, \"\");\n+   |   ^^^^^^^^^^^^    - argument of type `&str` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:17:3\n+   |\n+LL |   two_arg_diff(1, \"\", \"\");\n+   |   ^^^^^^^^^^^^        -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n+  --> $DIR/extra_arguments.rs:18:3\n+   |\n+LL |   two_arg_diff(1, 1, \"\", \"\");\n+   |   ^^^^^^^^^^^^    -      -- argument unexpected\n+   |                   |\n+   |                   argument of type `&str` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra arguments\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n+  --> $DIR/extra_arguments.rs:19:3\n+   |\n+LL |   two_arg_diff(1, \"\", 1, \"\");\n+   |   ^^^^^^^^^^^^        -  -- argument unexpected\n+   |                       |\n+   |                       argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra arguments\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:22:3\n+   |\n+LL |   two_arg_same(1, 1,     \"\");\n+   |   ^^^^^^^^^^^^           -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:3:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_same(1, 1);\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:23:3\n+   |\n+LL |   two_arg_diff(1, 1,     \"\");\n+   |   ^^^^^^^^^^^^    - argument of type `&str` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:24:3\n+   |\n+LL |   two_arg_same(\n+   |   ^^^^^^^^^^^^\n+...\n+LL |     \"\"\n+   |     -- argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:3:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_same(1, 1);\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/extra_arguments.rs:30:3\n+   |\n+LL |   two_arg_diff(\n+   |   ^^^^^^^^^^^^\n+LL |     1,\n+LL |     1,\n+   |     - argument of type `&str` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:4:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: &str) {}\n+   |    ^^^^^^^^^^^^ -------  --------\n+help: remove the extra argument\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "53fbdd4b5da3ea45a48e0270135d8069ac459e96", "filename": "src/test/ui/argument-suggestions/invalid_arguments.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,43 @@\n+// More nuanced test cases for invalid arguments #65853\n+\n+struct X {}\n+\n+fn one_arg(_a: i32) {}\n+fn two_arg_same(_a: i32, _b: i32) {}\n+fn two_arg_diff(_a: i32, _b: f32) {}\n+fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+\n+fn main() {\n+  // Providing an incorrect argument for a single parameter function\n+  one_arg(1.0); //~ ERROR mismatched types\n+\n+  // Providing one or two invalid arguments to a two parameter function\n+  two_arg_same(1, \"\"); //~ ERROR mismatched types\n+  two_arg_same(\"\", 1); //~ ERROR mismatched types\n+  two_arg_same(\"\", \"\"); //~ ERROR arguments to this function are incorrect\n+  two_arg_diff(1, \"\"); //~ ERROR mismatched types\n+  two_arg_diff(\"\", 1.0); //~ ERROR mismatched types\n+  two_arg_diff(\"\", \"\"); //~ ERROR arguments to this function are incorrect\n+\n+  // Providing invalid arguments to a three parameter function\n+  three_arg_diff(X{}, 1.0, \"\"); //~ ERROR mismatched types\n+  three_arg_diff(1, X {}, \"\"); //~ ERROR mismatched types\n+  three_arg_diff(1, 1.0, X {}); //~ ERROR mismatched types\n+\n+  three_arg_diff(X {}, X {}, \"\"); //~ ERROR arguments to this function are incorrect\n+  three_arg_diff(X {}, 1.0, X {}); //~ ERROR arguments to this function are incorrect\n+  three_arg_diff(1, X {}, X {}); //~ ERROR arguments to this function are incorrect\n+\n+  three_arg_diff(X {}, X {}, X {}); //~ ERROR arguments to this function are incorrect\n+\n+  three_arg_repeat(X {}, 1, \"\"); //~ ERROR mismatched types\n+  three_arg_repeat(1, X {}, \"\"); //~ ERROR mismatched types\n+  three_arg_repeat(1, 1, X {}); //~ ERROR mismatched types\n+\n+  three_arg_repeat(X {}, X {}, \"\"); //~ ERROR arguments to this function are incorrect\n+  three_arg_repeat(X {}, 1, X {}); //~ ERROR arguments to this function are incorrect\n+  three_arg_repeat(1, X {}, X{}); //~ ERROR arguments to this function are incorrect\n+\n+  three_arg_repeat(X {}, X {}, X {}); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "33f27d48fec80341baad7b6babbfd89917995b31", "filename": "src/test/ui/argument-suggestions/invalid_arguments.stderr", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,299 @@\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:13:11\n+   |\n+LL |   one_arg(1.0);\n+   |   ------- ^^^ expected `i32`, found floating-point number\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:5:4\n+   |\n+LL | fn one_arg(_a: i32) {}\n+   |    ^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:16:19\n+   |\n+LL |   two_arg_same(1, \"\");\n+   |   ------------    ^^ expected `i32`, found `&str`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:6:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:17:16\n+   |\n+LL |   two_arg_same(\"\", 1);\n+   |   ------------ ^^ expected `i32`, found `&str`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:6:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:18:3\n+   |\n+LL |   two_arg_same(\"\", \"\");\n+   |   ^^^^^^^^^^^^ --  -- expected `i32`, found `&str`\n+   |                |\n+   |                expected `i32`, found `&str`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:6:4\n+   |\n+LL | fn two_arg_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:19:19\n+   |\n+LL |   two_arg_diff(1, \"\");\n+   |   ------------    ^^ expected `f32`, found `&str`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:7:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:20:16\n+   |\n+LL |   two_arg_diff(\"\", 1.0);\n+   |   ------------ ^^ expected `i32`, found `&str`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:7:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:21:3\n+   |\n+LL |   two_arg_diff(\"\", \"\");\n+   |   ^^^^^^^^^^^^ --  -- expected `f32`, found `&str`\n+   |                |\n+   |                expected `i32`, found `&str`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:7:4\n+   |\n+LL | fn two_arg_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^^^^^ -------  -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:24:18\n+   |\n+LL |   three_arg_diff(X{}, 1.0, \"\");\n+   |   -------------- ^^^ expected `i32`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:25:21\n+   |\n+LL |   three_arg_diff(1, X {}, \"\");\n+   |   --------------    ^^^^ expected `f32`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:26:26\n+   |\n+LL |   three_arg_diff(1, 1.0, X {});\n+   |   --------------         ^^^^ expected `&str`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:28:3\n+   |\n+LL |   three_arg_diff(X {}, X {}, \"\");\n+   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found struct `X`\n+   |                  |\n+   |                  expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:29:3\n+   |\n+LL |   three_arg_diff(X {}, 1.0, X {});\n+   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found struct `X`\n+   |                  |\n+   |                  expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:30:3\n+   |\n+LL |   three_arg_diff(1, X {}, X {});\n+   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found struct `X`\n+   |                     |\n+   |                     expected `f32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:32:3\n+   |\n+LL |   three_arg_diff(X {}, X {}, X {});\n+   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |                  |     |\n+   |                  |     expected `f32`, found struct `X`\n+   |                  expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:8:4\n+   |\n+LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:34:20\n+   |\n+LL |   three_arg_repeat(X {}, 1, \"\");\n+   |   ---------------- ^^^^ expected `i32`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:35:23\n+   |\n+LL |   three_arg_repeat(1, X {}, \"\");\n+   |   ----------------    ^^^^ expected `i32`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_arguments.rs:36:26\n+   |\n+LL |   three_arg_repeat(1, 1, X {});\n+   |   ----------------       ^^^^ expected `&str`, found struct `X`\n+   |   |\n+   |   arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:38:3\n+   |\n+LL |   three_arg_repeat(X {}, X {}, \"\");\n+   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found struct `X`\n+   |                    |\n+   |                    expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:39:3\n+   |\n+LL |   three_arg_repeat(X {}, 1, X {});\n+   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found struct `X`\n+   |                    |\n+   |                    expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:40:3\n+   |\n+LL |   three_arg_repeat(1, X {}, X{});\n+   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found struct `X`\n+   |                       |\n+   |                       expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/invalid_arguments.rs:42:3\n+   |\n+LL |   three_arg_repeat(X {}, X {}, X {});\n+   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |                    |     |\n+   |                    |     expected `i32`, found struct `X`\n+   |                    expected `i32`, found struct `X`\n+   |\n+note: function defined here\n+  --> $DIR/invalid_arguments.rs:9:4\n+   |\n+LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n+   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+\n+error: aborting due to 21 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ae0dabf27b1968f90ae25c415b0c3257bcb755be", "filename": "src/test/ui/argument-suggestions/missing_arguments.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,40 @@\n+fn one_arg(_a: i32) {}\n+fn two_same(_a: i32, _b: i32) {}\n+fn two_diff(_a: i32, _b: f32) {}\n+fn three_same(_a: i32, _b: i32, _c: i32) {}\n+fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+fn four_repeated(_a: i32, _b: f32, _c: f32, _d: &str) {}\n+fn complex(_a: i32, _b: f32, _c: i32, _d: f32, _e: &str) {}\n+\n+fn main() {\n+  one_arg(); //~ ERROR this function takes\n+  // The headers here show the types expected,\n+  // with formatting to emphasize which arguments are missing\n+  /*         i32     f32    */\n+  two_same(               ); //~ ERROR this function takes\n+  two_same(   1           ); //~ ERROR this function takes\n+  two_diff(               ); //~ ERROR this function takes\n+  two_diff(   1           ); //~ ERROR this function takes\n+  two_diff(          1.0  ); //~ ERROR this function takes\n+\n+  /*           i32     i32     i32    */\n+  three_same(                       ); //~ ERROR this function takes\n+  three_same(   1                   ); //~ ERROR this function takes\n+  three_same(   1,      1           ); //~ ERROR this function takes\n+\n+  /*           i32     f32     &str   */\n+  three_diff(          1.0,     \"\"  ); //~ ERROR this function takes\n+  three_diff(   1,              \"\"  ); //~ ERROR this function takes\n+  three_diff(   1,     1.0          ); //~ ERROR this function takes\n+  three_diff(                   \"\"  ); //~ ERROR this function takes\n+  three_diff(          1.0          ); //~ ERROR this function takes\n+  three_diff(   1                   ); //~ ERROR this function takes\n+\n+  /*              i32     f32     f32     &str   */\n+  four_repeated(                               ); //~ ERROR this function takes\n+  four_repeated(   1,                     \"\"   ); //~ ERROR this function takes\n+\n+  /*        i32   f32   i32   f32   &str   */\n+  complex(                               ); //~ ERROR this function takes\n+  complex(   1,                     \"\"   ); //~ ERROR this function takes\n+}"}, {"sha": "b4dadb1b9da00b35e9e31b4226605be2f427b217", "filename": "src/test/ui/argument-suggestions/missing_arguments.stderr", "status": "added", "additions": 310, "deletions": 0, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,310 @@\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:10:3\n+   |\n+LL |   one_arg();\n+   |   ^^^^^^^-- an argument of type `i32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:1:4\n+   |\n+LL | fn one_arg(_a: i32) {}\n+   |    ^^^^^^^ -------\n+help: provide the argument\n+   |\n+LL |   one_arg({i32});\n+   |   ~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:14:3\n+   |\n+LL |   two_same(               );\n+   |   ^^^^^^^^----------------- two arguments of type `i32` and `i32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:2:4\n+   |\n+LL | fn two_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: provide the arguments\n+   |\n+LL |   two_same({i32}, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:15:3\n+   |\n+LL |   two_same(   1           );\n+   |   ^^^^^^^^----------------- an argument of type `i32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:2:4\n+   |\n+LL | fn two_same(_a: i32, _b: i32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: provide the argument\n+   |\n+LL |   two_same(1, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:16:3\n+   |\n+LL |   two_diff(               );\n+   |   ^^^^^^^^----------------- two arguments of type `i32` and `f32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:3:4\n+   |\n+LL | fn two_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: provide the arguments\n+   |\n+LL |   two_diff({i32}, {f32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:17:3\n+   |\n+LL |   two_diff(   1           );\n+   |   ^^^^^^^^----------------- an argument of type `f32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:3:4\n+   |\n+LL | fn two_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: provide the argument\n+   |\n+LL |   two_diff(1, {f32});\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:18:3\n+   |\n+LL |   two_diff(          1.0  );\n+   |   ^^^^^^^^           --- an argument of type `i32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:3:4\n+   |\n+LL | fn two_diff(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: provide the argument\n+   |\n+LL |   two_diff({i32}, 1.0);\n+   |   ~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:21:3\n+   |\n+LL |   three_same(                       );\n+   |   ^^^^^^^^^^------------------------- three arguments of type `i32`, `i32`, and `i32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:4:4\n+   |\n+LL | fn three_same(_a: i32, _b: i32, _c: i32) {}\n+   |    ^^^^^^^^^^ -------  -------  -------\n+help: provide the arguments\n+   |\n+LL |   three_same({i32}, {i32}, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:22:3\n+   |\n+LL |   three_same(   1                   );\n+   |   ^^^^^^^^^^------------------------- two arguments of type `i32` and `i32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:4:4\n+   |\n+LL | fn three_same(_a: i32, _b: i32, _c: i32) {}\n+   |    ^^^^^^^^^^ -------  -------  -------\n+help: provide the arguments\n+   |\n+LL |   three_same(1, {i32}, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:23:3\n+   |\n+LL |   three_same(   1,      1           );\n+   |   ^^^^^^^^^^------------------------- an argument of type `i32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:4:4\n+   |\n+LL | fn three_same(_a: i32, _b: i32, _c: i32) {}\n+   |    ^^^^^^^^^^ -------  -------  -------\n+help: provide the argument\n+   |\n+LL |   three_same(1, 1, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:26:3\n+   |\n+LL |   three_diff(          1.0,     \"\"  );\n+   |   ^^^^^^^^^^           --- an argument of type `i32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the argument\n+   |\n+LL |   three_diff({i32}, 1.0, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:27:3\n+   |\n+LL |   three_diff(   1,              \"\"  );\n+   |   ^^^^^^^^^^                    -- an argument of type `f32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the argument\n+   |\n+LL |   three_diff(1, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:28:3\n+   |\n+LL |   three_diff(   1,     1.0          );\n+   |   ^^^^^^^^^^------------------------- an argument of type `&str` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the argument\n+   |\n+LL |   three_diff(1, 1.0, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:29:3\n+   |\n+LL |   three_diff(                   \"\"  );\n+   |   ^^^^^^^^^^------------------------- two arguments of type `i32` and `f32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   three_diff({i32}, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:30:3\n+   |\n+LL |   three_diff(          1.0          );\n+   |   ^^^^^^^^^^-------------------------\n+   |             |          |\n+   |             |          an argument of type `i32` is missing\n+   |             an argument of type `&str` is missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   three_diff({i32}, 1.0, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 1 argument was supplied\n+  --> $DIR/missing_arguments.rs:31:3\n+   |\n+LL |   three_diff(   1                   );\n+   |   ^^^^^^^^^^------------------------- two arguments of type `f32` and `&str` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:5:4\n+   |\n+LL | fn three_diff(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   three_diff(1, {f32}, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 4 arguments but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:34:3\n+   |\n+LL |   four_repeated(                               );\n+   |   ^^^^^^^^^^^^^--------------------------------- multiple arguments are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:6:4\n+   |\n+LL | fn four_repeated(_a: i32, _b: f32, _c: f32, _d: &str) {}\n+   |    ^^^^^^^^^^^^^ -------  -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   four_repeated({i32}, {f32}, {f32}, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 4 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:35:3\n+   |\n+LL |   four_repeated(   1,                     \"\"   );\n+   |   ^^^^^^^^^^^^^--------------------------------- two arguments of type `f32` and `f32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:6:4\n+   |\n+LL | fn four_repeated(_a: i32, _b: f32, _c: f32, _d: &str) {}\n+   |    ^^^^^^^^^^^^^ -------  -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   four_repeated(1, {f32}, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 5 arguments but 0 arguments were supplied\n+  --> $DIR/missing_arguments.rs:38:3\n+   |\n+LL |   complex(                               );\n+   |   ^^^^^^^--------------------------------- multiple arguments are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:7:4\n+   |\n+LL | fn complex(_a: i32, _b: f32, _c: i32, _d: f32, _e: &str) {}\n+   |    ^^^^^^^ -------  -------  -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   complex({i32}, {f32}, {i32}, {f32}, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 5 arguments but 2 arguments were supplied\n+  --> $DIR/missing_arguments.rs:39:3\n+   |\n+LL |   complex(   1,                     \"\"   );\n+   |   ^^^^^^^--------------------------------- three arguments of type `f32`, `i32`, and `i32` are missing\n+   |\n+note: function defined here\n+  --> $DIR/missing_arguments.rs:7:4\n+   |\n+LL | fn complex(_a: i32, _b: f32, _c: i32, _d: f32, _e: &str) {}\n+   |    ^^^^^^^ -------  -------  -------  -------  --------\n+help: provide the arguments\n+   |\n+LL |   complex(1, {f32}, {i32}, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 19 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "73678482b30256dc05b51228f80e4f47b7b08105", "filename": "src/test/ui/argument-suggestions/mixed_cases.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,24 @@\n+// Cases where multiple argument suggestions are mixed\n+\n+struct X {}\n+\n+fn two_args(_a: i32, _b: f32) {}\n+fn three_args(_a: i32, _b: f32, _c: &str) {}\n+\n+fn main() {\n+  // Extra + Invalid\n+  two_args(1, \"\", X {}); //~ ERROR this function takes\n+  three_args(1, \"\", X {}, \"\"); //~ ERROR this function takes\n+\n+  // Missing and Invalid\n+  three_args(1, X {}); //~ ERROR this function takes\n+\n+  // Missing and Extra\n+  three_args(1, \"\", X {}); //~ ERROR arguments to this function are incorrect\n+\n+  // Swapped and Invalid\n+  three_args(\"\", X {}, 1); //~ ERROR arguments to this function are incorrect\n+\n+  // Swapped and missing\n+  three_args(\"\", 1); //~ ERROR this function takes\n+}"}, {"sha": "61da02f583789b850ab626eaf2885d3fb90c357e", "filename": "src/test/ui/argument-suggestions/mixed_cases.stderr", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,117 @@\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/mixed_cases.rs:10:3\n+   |\n+LL |   two_args(1, \"\", X {});\n+   |   ^^^^^^^^    --  ---- argument unexpected\n+   |               |\n+   |               expected `f32`, found `&str`\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:5:4\n+   |\n+LL | fn two_args(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL |   two_args(1, {f32});\n+   |   ~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n+  --> $DIR/mixed_cases.rs:11:3\n+   |\n+LL |   three_args(1, \"\", X {}, \"\");\n+   |   ^^^^^^^^^^    --  ----  -- argument unexpected\n+   |                 |   |\n+   |                 |   argument of type `&str` unexpected\n+   |                 an argument of type `f32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:6:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: did you mean\n+   |\n+LL |   three_args(1, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/mixed_cases.rs:14:3\n+   |\n+LL |   three_args(1, X {});\n+   |   ^^^^^^^^^^---------\n+   |             |   |\n+   |             |   expected `f32`, found struct `X`\n+   |             an argument of type `&str` is missing\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:6:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: provide the argument\n+   |\n+LL |   three_args(1, {f32}, {&str});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/mixed_cases.rs:17:3\n+   |\n+LL |   three_args(1, \"\", X {});\n+   |   ^^^^^^^^^^    --  ---- argument of type `&str` unexpected\n+   |                 |\n+   |                 an argument of type `f32` is missing\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:6:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: did you mean\n+   |\n+LL |   three_args(1, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/mixed_cases.rs:20:3\n+   |\n+LL |   three_args(\"\", X {}, 1);\n+   |   ^^^^^^^^^^ --  ----  - expected `&str`,found `{integer}`\n+   |              |   |\n+   |              |   expected `f32`, found struct `X`\n+   |              expected `i32`,found `&'static str`\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:6:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: swap these arguments\n+   |\n+LL |   three_args(1, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/mixed_cases.rs:23:3\n+   |\n+LL |   three_args(\"\", 1);\n+   |   ^^^^^^^^^^ --  -\n+   |              |   |\n+   |              |   an argument of type `f32` is missing\n+   |              |   expected `&str`,found `{integer}`\n+   |              expected `i32`,found `&'static str`\n+   |\n+note: function defined here\n+  --> $DIR/mixed_cases.rs:6:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: did you mean\n+   |\n+LL |   three_args(1, {f32}, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "f512fde651cd93b52944c66064d659a2b571d2fb", "filename": "src/test/ui/argument-suggestions/permuted_arguments.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,13 @@\n+// More complicated permutations\n+struct X {}\n+struct Y {}\n+\n+fn three_args(_a: i32, _b: f32, _c: &str) {}\n+fn many_args(_a: i32, _b: f32, _c: &str, _d: X, _e: Y) {}\n+\n+fn main() {\n+  // b, c, a\n+  three_args(1.0, \"\", 1); //~ ERROR arguments to this function are incorrect\n+  // d, e, b, a, c\n+  many_args(X {}, Y {}, 1, 1.0, \"\"); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "52890f4e6a50e9bcce56e9144f4ff31e3de670d9", "filename": "src/test/ui/argument-suggestions/permuted_arguments.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,43 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/permuted_arguments.rs:10:3\n+   |\n+LL |   three_args(1.0, \"\", 1);\n+   |   ^^^^^^^^^^ ---  --  - expected `&str`,found `{integer}`\n+   |              |    |\n+   |              |    expected `f32`,found `&'static str`\n+   |              expected `i32`,found `{float}`\n+   |\n+note: function defined here\n+  --> $DIR/permuted_arguments.rs:5:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: reorder these arguments\n+   |\n+LL |   three_args(1, 1.0, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/permuted_arguments.rs:12:3\n+   |\n+LL |   many_args(X {}, Y {}, 1, 1.0, \"\");\n+   |   ^^^^^^^^^ ----  ----  -  ---  -- expected `Y`,found `&'static str`\n+   |             |     |     |  |\n+   |             |     |     |  expected `X`,found `{float}`\n+   |             |     |     expected `&str`,found `{integer}`\n+   |             |     expected `f32`,found `Y`\n+   |             expected `i32`,found `X`\n+   |\n+note: function defined here\n+  --> $DIR/permuted_arguments.rs:6:4\n+   |\n+LL | fn many_args(_a: i32, _b: f32, _c: &str, _d: X, _e: Y) {}\n+   |    ^^^^^^^^^ -------  -------  --------  -----  -----\n+help: reorder these arguments\n+   |\n+LL |   many_args(1, 1.0, \"\", X {}, Y {});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a21de610c6a1320820b7f6930809f9e42b542d1a", "filename": "src/test/ui/argument-suggestions/swapped_arguments.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,14 @@\n+struct X {}\n+\n+fn two_args(_a: i32, _b: f32) {}\n+fn three_args(_a: i32, _b: f32, _c: &str) {}\n+fn four_args(_a: i32, _b: f32, _c: &str, _d: X) {}\n+\n+fn main() {\n+  two_args(1.0, 1); //~ ERROR arguments to this function are incorrect\n+  three_args(1.0,   1,  \"\"); //~ ERROR arguments to this function are incorrect\n+  three_args(  1,  \"\", 1.0); //~ ERROR arguments to this function are incorrect\n+  three_args( \"\", 1.0,   1); //~ ERROR arguments to this function are incorrect\n+\n+  four_args(1.0, 1, X {}, \"\"); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "672f0d5bb56a65b238e7128b07255bbff05e134b", "filename": "src/test/ui/argument-suggestions/swapped_arguments.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,95 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/swapped_arguments.rs:8:3\n+   |\n+LL |   two_args(1.0, 1);\n+   |   ^^^^^^^^ ---  - expected `f32`,found `{integer}`\n+   |            |\n+   |            expected `i32`,found `{float}`\n+   |\n+note: function defined here\n+  --> $DIR/swapped_arguments.rs:3:4\n+   |\n+LL | fn two_args(_a: i32, _b: f32) {}\n+   |    ^^^^^^^^ -------  -------\n+help: swap these arguments\n+   |\n+LL |   two_args(1, 1.0);\n+   |   ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/swapped_arguments.rs:9:3\n+   |\n+LL |   three_args(1.0,   1,  \"\");\n+   |   ^^^^^^^^^^ ---    - expected `f32`,found `{integer}`\n+   |              |\n+   |              expected `i32`,found `{float}`\n+   |\n+note: function defined here\n+  --> $DIR/swapped_arguments.rs:4:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: swap these arguments\n+   |\n+LL |   three_args(1, 1.0, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/swapped_arguments.rs:10:3\n+   |\n+LL |   three_args(  1,  \"\", 1.0);\n+   |   ^^^^^^^^^^       --  --- expected `&str`,found `{float}`\n+   |                    |\n+   |                    expected `f32`,found `&'static str`\n+   |\n+note: function defined here\n+  --> $DIR/swapped_arguments.rs:4:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: swap these arguments\n+   |\n+LL |   three_args(1, 1.0, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/swapped_arguments.rs:11:3\n+   |\n+LL |   three_args( \"\", 1.0,   1);\n+   |   ^^^^^^^^^^  --         - expected `&str`,found `{integer}`\n+   |               |\n+   |               expected `i32`,found `&'static str`\n+   |\n+note: function defined here\n+  --> $DIR/swapped_arguments.rs:4:4\n+   |\n+LL | fn three_args(_a: i32, _b: f32, _c: &str) {}\n+   |    ^^^^^^^^^^ -------  -------  --------\n+help: swap these arguments\n+   |\n+LL |   three_args(1, 1.0, \"\");\n+   |   ~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/swapped_arguments.rs:13:3\n+   |\n+LL |   four_args(1.0, 1, X {}, \"\");\n+   |   ^^^^^^^^^ ---  -  ----  -- expected `X`,found `&'static str`\n+   |             |    |  |\n+   |             |    |  expected `&str`,found `X`\n+   |             |    expected `f32`,found `{integer}`\n+   |             expected `i32`,found `{float}`\n+   |\n+note: function defined here\n+  --> $DIR/swapped_arguments.rs:5:4\n+   |\n+LL | fn four_args(_a: i32, _b: f32, _c: &str, _d: X) {}\n+   |    ^^^^^^^^^ -------  -------  --------  -----\n+help: did you mean\n+   |\n+LL |   four_args(1, 1.0, \"\", X {});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b904ad102e97e794468a1281066144f9577e66ed", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,25 +2,57 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n-   |                       ^^^^ expected struct `Black`, found struct `Blue`\n+   |          ----         ^^^^ expected struct `Black`, found struct `Blue`\n+   |          |\n+   |          arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n+   |\n+LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n+   |    ^^^^        ----  ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n-   |                       ^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ----         ^^^^^ expected struct `Blue`, found struct `Black`\n+   |          |\n+   |          arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n+   |\n+LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n+   |    ^^^^        ----  ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n-   |                            ^^^^ expected struct `Black`, found struct `Blue`\n+   |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n+   |                 |\n+   |                 arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n+   |\n+LL |     fn chip_paint(&self, c: Self::Color) { }\n+   |        ^^^^^^^^^^ -----  --------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n-   |                            ^^^^^ expected struct `Blue`, found struct `Black`\n+   |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n+   |                 |\n+   |                 arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n+   |\n+LL |     fn chip_paint(&self, c: Self::Color) { }\n+   |        ^^^^^^^^^^ -----  --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1d0b84d31d4104e4331424a3618ca45d7e07670a", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:19:14\n    |\n LL |     f1(2i32, 4i32);\n-   |              ^^^^ expected `u32`, found `i32`\n+   |     --       ^^^^ expected `u32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/associated-types-path-2.rs:13:8\n    |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   |        ^^         ----  -------\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);"}, {"sha": "627bf05bba2d9c77110d0f7b00af849089c8b5d1", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n-   |                  ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found opaque type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/dont-suggest-missing-await.rs:7:24\n@@ -11,6 +13,11 @@ LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n+note: function defined here\n+  --> $DIR/dont-suggest-missing-await.rs:5:4\n+   |\n+LL | fn take_u32(x: u32) {}\n+   |    ^^^^^^^^ ------\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "b205fd619155e447de187a27327f1ef846728640", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,52 +2,67 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:10:25\n    |\n LL |     fun(async {}, async {});\n-   |               --        ^^ expected `async` block, found a different `async` block\n-   |               |\n+   |               --        ^^\n+   |               |         |\n+   |               |         expected `async` block, found a different `async` block\n+   |               |         arguments to this function are incorrect\n    |               the expected `async` block\n    |\n    = note: expected `async` block `[static generator@$DIR/generator-desc.rs:10:15: 10:17]`\n               found `async` block `[static generator@$DIR/generator-desc.rs:10:25: 10:27]`\n+note: function defined here\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |              ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n LL |     fun(one(), two());\n-   |                ^^^^^ expected opaque type, found a different opaque type\n-   |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/generator-desc.rs:5:16\n+   |     ---        ^^^^^ expected opaque type, found a different opaque type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-LL | async fn one() {}\n-   |                ^ checked the `Output` of this `async fn`, expected opaque type\n note: while checking the return type of the `async fn`\n   --> $DIR/generator-desc.rs:6:16\n    |\n LL | async fn two() {}\n    |                ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n+note: function defined here\n+  --> $DIR/generator-desc.rs:8:4\n+   |\n+LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n+   |    ^^^                         -----  -----\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:14:26\n    |\n LL |     fun((async || {})(), (async || {})());\n-   |                   --     ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n-   |                   |\n-   |                   the expected `async` closure body\n+   |     ---                  ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n   ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           -------------------------------\n-   |                                           |\n-   |                                           the expected opaque type\n-   |                                           the found opaque type\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note:     expected type `impl Future<Output = ()>` (`async` closure body)\n+           found opaque type `impl Future<Output = ()>` (`async` closure body)\n+note: function defined here\n+  --> $DIR/generator-desc.rs:8:4\n+   |\n+LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n+   |    ^^^                         -----  -----\n+help: consider `await`ing on the `Future`\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (`async` closure body)\n-              found opaque type `impl Future<Output = ()>` (`async` closure body)\n+LL |     fun((async || {})(), (async || {})().await);\n+   |                                         ++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a5958baffbaf72719eb8ba87c6f3f17163c2ea4b", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n LL |         take_u32(x)\n-   |                  ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found opaque type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await-closure.rs:8:24\n@@ -11,6 +13,11 @@ LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n+note: function defined here\n+  --> $DIR/suggest-missing-await-closure.rs:6:4\n+   |\n+LL | fn take_u32(_x: u32) {}\n+   |    ^^^^^^^^ -------\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "ba9ed5cb65fc9b716ec4ae1285ec1a5a695a8783", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n LL |     take_u32(x)\n-   |              ^ expected `u32`, found opaque type\n+   |     -------- ^ expected `u32`, found opaque type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await.rs:5:24\n@@ -11,6 +13,11 @@ LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n+note: function defined here\n+  --> $DIR/suggest-missing-await.rs:3:4\n+   |\n+LL | fn take_u32(_x: u32) {}\n+   |    ^^^^^^^^ -------\n help: consider `await`ing on the `Future`\n    |\n LL |     take_u32(x.await)"}, {"sha": "9acf1e93b077395a4f2e65daea7d26c987eb5946", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -8,29 +8,33 @@ error[E0060]: this function takes at least 2 arguments but 0 arguments were supp\n   --> $DIR/variadic-ffi-1.rs:20:9\n    |\n LL |         foo();\n-   |         ^^^-- supplied 0 arguments\n-   |         |\n-   |         expected at least 2 arguments\n+   |         ^^^-- two arguments of type `isize` and `u8` are missing\n    |\n note: function defined here\n   --> $DIR/variadic-ffi-1.rs:13:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n+help: provide the arguments\n+   |\n+LL |         foo({isize}, {u8});\n+   |         ~~~~~~~~~~~~~~~~~~\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n   --> $DIR/variadic-ffi-1.rs:21:9\n    |\n LL |         foo(1);\n-   |         ^^^ - supplied 1 argument\n-   |         |\n-   |         expected at least 2 arguments\n+   |         ^^^--- an argument of type `u8` is missing\n    |\n note: function defined here\n   --> $DIR/variadic-ffi-1.rs:13:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n+help: provide the argument\n+   |\n+LL |         foo(1, {u8});\n+   |         ~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:23:56"}, {"sha": "ef606b6ae5fd4e5e687a7d72b615388b184373e3", "filename": "src/test/ui/cast/cast-int-to-char.stderr", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/cast-int-to-char.rs:4:16\n    |\n LL |     foo::<u32>('0');\n-   |                ^^^ expected `u32`, found `char`\n+   |     ---------- ^^^ expected `u32`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/cast-int-to-char.rs:1:4\n+   |\n+LL | fn foo<T>(_t: T) {}\n+   |    ^^^    -----\n help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n    |\n LL |     foo::<u32>('0' as u32);\n@@ -13,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/cast-int-to-char.rs:5:16\n    |\n LL |     foo::<i32>('0');\n-   |                ^^^ expected `i32`, found `char`\n+   |     ---------- ^^^ expected `i32`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/cast-int-to-char.rs:1:4\n    |\n+LL | fn foo<T>(_t: T) {}\n+   |    ^^^    -----\n help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n    |\n LL |     foo::<i32>('0' as i32);\n@@ -24,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/cast-int-to-char.rs:6:16\n    |\n LL |     foo::<u64>('0');\n-   |                ^^^ expected `u64`, found `char`\n+   |     ---------- ^^^ expected `u64`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/cast-int-to-char.rs:1:4\n    |\n+LL | fn foo<T>(_t: T) {}\n+   |    ^^^    -----\n help: you can cast a `char` to a `u64`, since a `char` always occupies 4 bytes\n    |\n LL |     foo::<u64>('0' as u64);\n@@ -35,8 +56,15 @@ error[E0308]: mismatched types\n   --> $DIR/cast-int-to-char.rs:7:16\n    |\n LL |     foo::<i64>('0');\n-   |                ^^^ expected `i64`, found `char`\n+   |     ---------- ^^^ expected `i64`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/cast-int-to-char.rs:1:4\n+   |\n+LL | fn foo<T>(_t: T) {}\n+   |    ^^^    -----\n help: you can cast a `char` to an `i64`, since a `char` always occupies 4 bytes\n    |\n LL |     foo::<i64>('0' as i64);\n@@ -46,7 +74,15 @@ error[E0308]: mismatched types\n   --> $DIR/cast-int-to-char.rs:8:17\n    |\n LL |     foo::<char>(0u32);\n-   |                 ^^^^ expected `char`, found `u32`\n+   |     ----------- ^^^^ expected `char`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/cast-int-to-char.rs:1:4\n+   |\n+LL | fn foo<T>(_t: T) {}\n+   |    ^^^    -----\n \n error: aborting due to 5 previous errors\n "}, {"sha": "534828ab348fd32e09ba5d6b0583698272329c4b", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,7 +4,9 @@ error[E0308]: mismatched types\n LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n    |             ------------------------------------- the found closure\n LL |     call_bare(f)\n-   |               ^ expected fn pointer, found closure\n+   |     --------- ^ expected fn pointer, found closure\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `for<'r> fn(&'r str)`\n                  found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n@@ -13,6 +15,11 @@ note: closures can only be coerced to `fn` types if they do not capture any vari\n    |\n LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n    |                                           ^^^^^^ `string` captured here\n+note: function defined here\n+  --> $DIR/closure-reform-bad.rs:4:4\n+   |\n+LL | fn call_bare(f: fn(&str)) {\n+   |    ^^^^^^^^^ -----------\n \n error: aborting due to previous error\n "}, {"sha": "09c44d261af0c449f373aeef4850a883f9d5761c", "filename": "src/test/ui/closures/issue-84128.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,13 +2,20 @@ error[E0308]: mismatched types\n   --> $DIR/issue-84128.rs:13:13\n    |\n LL |         Foo(())\n-   |             ^^ expected integer, found `()`\n+   |         --- ^^ expected integer, found `()`\n+   |         |\n+   |         arguments to this struct are incorrect\n    |\n note: return type inferred to be `{integer}` here\n   --> $DIR/issue-84128.rs:10:20\n    |\n LL |             return Foo(0);\n    |                    ^^^^^^\n+note: tuple struct defined here\n+  --> $DIR/issue-84128.rs:5:8\n+   |\n+LL | struct Foo<T>(T);\n+   |        ^^^\n \n error: aborting due to previous error\n "}, {"sha": "b35fa2b8c9aba0951f7547f2f0d8bb26eef2e611", "filename": "src/test/ui/closures/issue-87461.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,19 +2,25 @@ error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:10:8\n    |\n LL |     Ok(())\n-   |        ^^ expected `u16`, found `()`\n+   |     -- ^^ expected `u16`, found `()`\n+   |     |\n+   |     arguments to this enum variant are incorrect\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:17:8\n    |\n LL |     Ok(())\n-   |        ^^ expected `u16`, found `()`\n+   |     -- ^^ expected `u16`, found `()`\n+   |     |\n+   |     arguments to this enum variant are incorrect\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:26:12\n    |\n LL |         Ok(())\n-   |            ^^ expected `u16`, found `()`\n+   |         -- ^^ expected `u16`, found `()`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n \n error: aborting due to 3 previous errors\n "}, {"sha": "11a4f310154c539a8e40b72406e6639feef6c809", "filename": "src/test/ui/coercion/coerce-mut.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-mut.rs:5:7\n    |\n LL |     f(&x);\n-   |       ^^ types differ in mutability\n+   |     - ^^ types differ in mutability\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut i32`\n                       found reference `&{integer}`\n+note: function defined here\n+  --> $DIR/coerce-mut.rs:1:4\n+   |\n+LL | fn f(x: &mut i32) {}\n+   |    ^ -----------\n \n error: aborting due to previous error\n "}, {"sha": "4f266b166d6987753d81957f2371962a8121661e", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-reborrow-multi-arg-fail.rs:4:18\n    |\n LL |     test(&mut 7, &7);\n-   |                  ^^ types differ in mutability\n+   |     ----         ^^ types differ in mutability\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected mutable reference `&mut {integer}`\n-                      found reference `&{integer}`\n+   = note:   expected type `&mut {integer}`\n+           found reference `&{integer}`\n+note: function defined here\n+  --> $DIR/coerce-reborrow-multi-arg-fail.rs:1:4\n+   |\n+LL | fn test<T>(_a: T, _b: T) {}\n+   |    ^^^^    -----  -----\n \n error: aborting due to previous error\n "}, {"sha": "add8f14cfa591884a3ee3fb8805313d85ec8144b", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,46 +2,81 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:6:17\n    |\n LL |     foo(return, 22, 44);\n-   |                 ^^ expected `!`, found integer\n+   |     ---         ^^ expected `!`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `!`\n               found type `{integer}`\n+note: function defined here\n+  --> $DIR/coerce-to-bang.rs:3:4\n+   |\n+LL | fn foo(x: usize, y: !, z: usize) { }\n+   |    ^^^ --------  ----  --------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:18:13\n    |\n LL |     foo(22, 44, return);\n-   |             ^^ expected `!`, found integer\n+   |     ---     ^^ expected `!`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `!`\n               found type `{integer}`\n+note: function defined here\n+  --> $DIR/coerce-to-bang.rs:3:4\n+   |\n+LL | fn foo(x: usize, y: !, z: usize) { }\n+   |    ^^^ --------  ----  --------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:26:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n-   |            ^ expected `!`, found integer\n+   |     ---    ^ expected `!`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `!`\n               found type `{integer}`\n+note: function defined here\n+  --> $DIR/coerce-to-bang.rs:3:4\n+   |\n+LL | fn foo(x: usize, y: !, z: usize) { }\n+   |    ^^^ --------  ----  --------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected `!`, found integer\n+   |     ---    ^ expected `!`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `!`\n               found type `{integer}`\n+note: function defined here\n+  --> $DIR/coerce-to-bang.rs:3:4\n+   |\n+LL | fn foo(x: usize, y: !, z: usize) { }\n+   |    ^^^ --------  ----  --------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected `!`, found integer\n+   |     ---    ^ expected `!`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `!`\n               found type `{integer}`\n+note: function defined here\n+  --> $DIR/coerce-to-bang.rs:3:4\n+   |\n+LL | fn foo(x: usize, y: !, z: usize) { }\n+   |    ^^^ --------  ----  --------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21"}, {"sha": "e9854f0b9b53b2ece8b1a347a94159de2217d1f9", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:7:41\n+   |\n+LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^----------^\n+   |                                                                   |\n+   |                                                                   expected `[u8; 3]`, found `[u8; 2]`\n+   |\n+help: provide an argument of the correct type\n+   |\n+LL |     let _ = const_generic_lib::function(({[u8; 3]}));\n+   |                                         ^^^^^^^^^^^\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:39\n+   |\n+LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^---------------^\n+   |                                                                 |\n+   |                                                                 expected `[u8; 2]`, found `[u8; 3]`\n+   |\n+help: provide an argument of the correct type\n+   |\n+LL |     let _: const_generic_lib::Alias = ({[u8; 2]});\n+   |                                       ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "42f469d9817813c0a5fdec0a33d6f42562ab2f01", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n-   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+   |                                         ------------------------- ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+   |                                         |\n+   |                                         arguments to this struct are incorrect\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n-   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n+   |                                       ------------------------- ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n+   |                                       |\n+   |                                       arguments to this struct are incorrect\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9bea4105d58b06099a7a07cfe46e581acea61060", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-62504.min.stderr", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,19 +1,26 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62504.rs:18:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-62504.rs:18:21\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n-   |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n+   |         ----------- ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n+   |         |\n+   |         arguments to this struct are incorrect\n    |\n    = note: expected array `[u32; X]`\n               found array `[u32; _]`\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62504.rs:18:25\n+note: tuple struct defined here\n+  --> $DIR/issue-62504.rs:14:8\n    |\n-LL |         ArrayHolder([0; Self::SIZE])\n-   |                         ^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n+LL | struct ArrayHolder<const X: usize>([u32; X]);\n+   |        ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95b572133c5f7a5248549d12f1accfd7a322c66b", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:11:43\n    |\n LL |     this_function_expects_a_double_option(n);\n-   |                                           ^ expected enum `DoubleOption`, found `usize`\n+   |     ------------------------------------- ^ expected enum `DoubleOption`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected enum `DoubleOption<_>`\n               found type `usize`\n+note: function defined here\n+  --> $DIR/issue-42764.rs:7:4\n+   |\n+LL | fn this_function_expects_a_double_option<T>(d: DoubleOption<T>) {}\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ------------------\n help: try wrapping the expression in a variant of `DoubleOption`\n    |\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));"}, {"sha": "42925cfed5507f2ec6cc2e3b8fa4dc79eb20003d", "filename": "src/test/ui/disambiguate-identical-names.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/disambiguate-identical-names.rs:13:10\n    |\n LL |     test(&v);\n-   |          ^^ expected struct `std::vec::Vec`, found struct `HashMap`\n+   |     ---- ^^ expected struct `std::vec::Vec`, found struct `HashMap`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&std::vec::Vec<std::vec::Vec<u32>>`\n               found reference `&HashMap<u8, u8>`\n+note: function defined here\n+  --> $DIR/disambiguate-identical-names.rs:6:4\n+   |\n+LL | fn test(_v: &Vec<Vec<u32>>) {\n+   |    ^^^^ ------------------\n \n error: aborting due to previous error\n "}, {"sha": "a151b20f865b22866e7e6ed8ee906486b145f241", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,17 +2,23 @@ error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0057.rs:3:13\n    |\n LL |     let a = f();\n-   |             ^-- supplied 0 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^-- an argument is missing\n+   |\n+help: provide the argument\n+   |\n+LL |     let a = f({_});\n+   |             ~~~~~~\n \n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^ -  - supplied 2 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^    - argument unexpected\n+   |\n+help: remove the extra argument\n+   |\n+LL |     let c = f(2);\n+   |             ~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7050a1dff6c2faa54225ed4deef9d46a3626eaa6", "filename": "src/test/ui/error-codes/E0060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,5 +5,4 @@ extern \"C\" {\n fn main() {\n     unsafe { printf(); }\n     //~^ ERROR E0060\n-    //~| expected at least 1 argument\n }"}, {"sha": "9dd649239e29f9ca1397d27fa322588314ddfb03", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,17 @@ error[E0060]: this function takes at least 1 argument but 0 arguments were suppl\n   --> $DIR/E0060.rs:6:14\n    |\n LL |     unsafe { printf(); }\n-   |              ^^^^^^-- supplied 0 arguments\n-   |              |\n-   |              expected at least 1 argument\n+   |              ^^^^^^-- an argument of type `*const u8` is missing\n    |\n note: function defined here\n   --> $DIR/E0060.rs:2:8\n    |\n LL |     fn printf(_: *const u8, ...) -> u32;\n    |        ^^^^^^\n+help: provide the argument\n+   |\n+LL |     unsafe { printf({*const u8}); }\n+   |              ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b6fae6c63d77a10cfe49a11793bc453b384d196b", "filename": "src/test/ui/error-codes/E0061.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,9 +5,7 @@ fn f2(a: u16) {}\n fn main() {\n     f(0);\n     //~^ ERROR E0061\n-    //~| expected 2 arguments\n \n     f2();\n     //~^ ERROR E0061\n-    //~| expected 1 argument\n }"}, {"sha": "f92c548f2de1f2ec67060d583fc18498d6400dd4", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,29 +2,33 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/E0061.rs:6:5\n    |\n LL |     f(0);\n-   |     ^ - supplied 1 argument\n-   |     |\n-   |     expected 2 arguments\n+   |     ^--- an argument of type `&str` is missing\n    |\n note: function defined here\n   --> $DIR/E0061.rs:1:4\n    |\n LL | fn f(a: u16, b: &str) {}\n    |    ^ ------  -------\n+help: provide the argument\n+   |\n+LL |     f(0, {&str});\n+   |     ~~~~~~~~~~~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n-  --> $DIR/E0061.rs:10:5\n+  --> $DIR/E0061.rs:9:5\n    |\n LL |     f2();\n-   |     ^^-- supplied 0 arguments\n-   |     |\n-   |     expected 1 argument\n+   |     ^^-- an argument of type `u16` is missing\n    |\n note: function defined here\n   --> $DIR/E0061.rs:3:4\n    |\n LL | fn f2(a: u16) {}\n    |    ^^ ------\n+help: provide the argument\n+   |\n+LL |     f2({u16});\n+   |     ~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9c5825fff8552456c33f6003babdf82fbeedef92", "filename": "src/test/ui/estr-subtyping.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Festr-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Festr-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,15 @@\n+fn wants_uniq(x: String) { }\n+fn wants_slice(x: &str) { }\n+\n+fn has_uniq(x: String) {\n+   wants_uniq(x);\n+   wants_slice(&*x);\n+}\n+\n+fn has_slice(x: &str) {\n+   wants_uniq(x); //~ ERROR mismatched types\n+   wants_slice(x);\n+}\n+\n+fn main() {\n+}"}, {"sha": "adebb7d1e63ab896467f620dda03cfe8c4af1de7", "filename": "src/test/ui/estr-subtyping.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/estr-subtyping.rs:10:15\n+   |\n+LL |    wants_uniq(x);\n+   |    ---------- ^- help: try using a conversion method: `.to_string()`\n+   |    |          |\n+   |    |          expected struct `String`, found `&str`\n+   |    arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/estr-subtyping.rs:1:4\n+   |\n+LL | fn wants_uniq(x: String) { }\n+   |    ^^^^^^^^^^ ---------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c25da900951cc658dda6fc7fe9da6c058a7685c1", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -296,20 +296,36 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n-   |                                ^^^ expected `usize`, found floating-point number\n+   |     ---------------------------^^^----\n+   |     |                          |\n+   |     |                          expected `usize`, found floating-point number\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   |\n+LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n+   |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n    |\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n-   |                                   ^^^ expected `usize`, found floating-point number\n+   |     ------------------------------^^^----\n+   |     |                             |\n+   |     |                             expected `usize`, found floating-point number\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   |\n+LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n+   |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors"}, {"sha": "16a0c10ea3a3a8f3d8ac7702953bbb72a0bab97b", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -12,7 +12,7 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n+    //~| expected type `fn(_) -> _ {foo::<u8>}`\n     //~| found fn item `fn(_) -> _ {bar::<u8>}`\n     //~| expected fn item, found a different fn item\n     //~| different `fn` items always have unique types, even if their signatures are the same\n@@ -28,7 +28,7 @@ fn main() {\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~| expected fn item `fn(_) -> _ {bar::<String>}`\n+    //~| expected type `fn(_) -> _ {bar::<String>}`\n     //~| found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n     //~| expected struct `String`, found struct `Vec`\n     //~| different `fn` items always have unique types, even if their signatures are the same\n@@ -45,7 +45,7 @@ fn main() {\n \n     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n     //~^ ERROR mismatched types\n-    //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n+    //~| expected type `fn(_) -> _ {foo::<u8>}`\n     //~| found fn pointer `fn(_) -> _`\n     //~| expected fn item, found fn pointer\n     //~| change the expected type to be function pointer"}, {"sha": "1fb120eb7a77839cc708dde3f1b7b204789749bf", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,60 +2,95 @@ error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:13:19\n    |\n LL |     eq(foo::<u8>, bar::<u8>);\n-   |                   ^^^^^^^^^ expected fn item, found a different fn item\n+   |     --            ^^^^^^^^^ expected fn item, found a different fn item\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n-              found fn item `fn(_) -> _ {bar::<u8>}`\n+   = note: expected type `fn(_) -> _ {foo::<u8>}`\n+           found fn item `fn(_) -> _ {bar::<u8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+note: function defined here\n+  --> $DIR/fn-item-type.rs:7:4\n+   |\n+LL | fn eq<T>(x: T, y: T) { }\n+   |    ^^    ----  ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:22:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n-   |                   ^^^^^^^^^ expected `u8`, found `i8`\n+   |     --            ^^^^^^^^^ expected `u8`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n-              found fn item `fn(_) -> _ {foo::<i8>}`\n+   = note: expected type `fn(_) -> _ {foo::<u8>}`\n+           found fn item `fn(_) -> _ {foo::<i8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+note: function defined here\n+  --> $DIR/fn-item-type.rs:7:4\n+   |\n+LL | fn eq<T>(x: T, y: T) { }\n+   |    ^^    ----  ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:29:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n-   |                       ^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n+   |     --                ^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected fn item `fn(_) -> _ {bar::<String>}`\n-              found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n+   = note: expected type `fn(_) -> _ {bar::<String>}`\n+           found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `bar::<String> as fn(isize) -> isize`\n+note: function defined here\n+  --> $DIR/fn-item-type.rs:7:4\n+   |\n+LL | fn eq<T>(x: T, y: T) { }\n+   |    ^^    ----  ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:39:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n-   |                          ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n+   |     --                   ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected fn item `fn() {<u8 as Foo>::foo}`\n-              found fn item `fn() {<u16 as Foo>::foo}`\n+   = note: expected type `fn() {<u8 as Foo>::foo}`\n+           found fn item `fn() {<u16 as Foo>::foo}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn()`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n+note: function defined here\n+  --> $DIR/fn-item-type.rs:7:4\n+   |\n+LL | fn eq<T>(x: T, y: T) { }\n+   |    ^^    ----  ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:46:19\n    |\n LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer\n+   |     --            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+   = note:    expected type `fn(_) -> _ {foo::<u8>}`\n            found fn pointer `fn(_) -> _`\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+note: function defined here\n+  --> $DIR/fn-item-type.rs:7:4\n+   |\n+LL | fn eq<T>(x: T, y: T) { }\n+   |    ^^    ----  ----\n \n error: aborting due to 5 previous errors\n "}, {"sha": "06c1efcd80b0df1ec52e304e13e30b67280a69c6", "filename": "src/test/ui/generic-associated-types/issue-68648-2.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,10 +4,17 @@ error[E0308]: mismatched types\n LL | fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n    |            - this type parameter\n LL |     T::identity(())\n-   |                 ^^ expected type parameter `T`, found `()`\n+   |     ----------- ^^ expected type parameter `T`, found `()`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n+note: associated function defined here\n+  --> $DIR/issue-68648-2.rs:6:8\n+   |\n+LL |     fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+   |        ^^^^^^^^     --------------\n \n error: aborting due to previous error\n "}, {"sha": "240be93cf961708801d1b7af36267ba964f68485", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -17,10 +17,17 @@ LL | impl<B> Add for A<B> where B: Add {\n    |      - this type parameter\n ...\n LL |         A(self.0 + rhs.0)\n-   |           ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         - ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         |\n+   |         arguments to this struct are incorrect\n    |\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n+note: tuple struct defined here\n+  --> $DIR/missing-bounds.rs:5:8\n+   |\n+LL | struct A<B>(B);\n+   |        ^\n help: consider further restricting this bound\n    |\n LL | impl<B> Add for A<B> where B: Add + Add<Output = B> {\n@@ -33,10 +40,17 @@ LL | impl<B: Add> Add for C<B> {\n    |      - this type parameter\n ...\n LL |         Self(self.0 + rhs.0)\n-   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         ---- ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n+note: tuple struct defined here\n+  --> $DIR/missing-bounds.rs:15:8\n+   |\n+LL | struct C<B>(B);\n+   |        ^\n help: consider further restricting this bound\n    |\n LL | impl<B: Add + Add<Output = B>> Add for C<B> {\n@@ -62,10 +76,17 @@ LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n    |      - this type parameter\n ...\n LL |         Self(self.0 + rhs.0)\n-   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         ---- ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n+note: tuple struct defined here\n+  --> $DIR/missing-bounds.rs:35:8\n+   |\n+LL | struct E<B>(B);\n+   |        ^\n help: consider further restricting type parameter `B`\n    |\n LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: Add<Output = B> {"}, {"sha": "d2b3b1c2aa0e5c6c6e0f1e8b4fc4110eb5732827", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,17 @@ error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-58451.rs:12:9\n    |\n LL |     f(&[f()]);\n-   |         ^-- supplied 0 arguments\n-   |         |\n-   |         expected 1 argument\n+   |         ^-- an argument is missing\n    |\n note: function defined here\n   --> $DIR/issue-58451.rs:5:4\n    |\n LL | fn f<I>(i: I)\n    |    ^    ----\n+help: provide the argument\n+   |\n+LL |     f(&[f({_})]);\n+   |         ~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "0f855ef57927ad55856780dd5f0a212df309318e", "filename": "src/test/ui/impl-trait/issues/issue-74282.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,7 +5,9 @@ LL |   type Closure = impl Fn() -> u64;\n    |                  ---------------- the expected opaque type\n ...\n LL |       Anonymous(|| {\n-   |  _______________^\n+   |  _____---------_^\n+   | |     |\n+   | |     arguments to this struct are incorrect\n LL | |         3\n LL | |     })\n    | |_____^ expected closure, found a different closure\n@@ -14,6 +16,11 @@ LL | |     })\n                   found closure `[closure@$DIR/issue-74282.rs:8:15: 10:6]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n+note: tuple struct defined here\n+  --> $DIR/issue-74282.rs:4:8\n+   |\n+LL | struct Anonymous(Closure);\n+   |        ^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-74282.rs:8:5"}, {"sha": "a9adff4faded9e5f4913e204002ae3e218202ab4", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -12,12 +12,15 @@ error[E0308]: mismatched types\n   --> $DIR/indexing-requires-a-uint.rs:12:18\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n-   |                  ^ expected `isize`, found `usize`\n+   |     ------------ ^ expected `isize`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n+note: function defined here\n+  --> $DIR/indexing-requires-a-uint.rs:5:8\n    |\n-LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n-   |                   ++++++++++++++++++++\n+LL |     fn bar<T>(_: T) {}\n+   |        ^^^    ----\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8ba9dacb4b21d35e6b167d62726b51c9b1326dc2", "filename": "src/test/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,16 +2,30 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:8:9\n    |\n LL |     foo(s);\n-   |         ^- help: try using a conversion method: `.to_string()`\n-   |         |\n-   |         expected struct `String`, found `&String`\n+   |     --- ^- help: try using a conversion method: `.to_string()`\n+   |     |   |\n+   |     |   expected struct `String`, found `&String`\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/deref-suggestion.rs:5:4\n+   |\n+LL | fn foo(_: String) {}\n+   |    ^^^ ---------\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:14:10\n    |\n LL |     foo3(u);\n-   |          ^ expected `u32`, found `&u32`\n+   |     ---- ^ expected `u32`, found `&u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/deref-suggestion.rs:12:4\n    |\n+LL | fn foo3(_: u32) {}\n+   |    ^^^^ ------\n help: consider dereferencing the borrow\n    |\n LL |     foo3(*u);\n@@ -21,8 +35,15 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n-   |         ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |     --- ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/deref-suggestion.rs:5:4\n+   |\n+LL | fn foo(_: String) {}\n+   |    ^^^ ---------\n help: consider removing the borrow\n    |\n LL -     foo(&\"aaa\".to_owned());\n@@ -33,8 +54,15 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |     --- ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/deref-suggestion.rs:5:4\n    |\n+LL | fn foo(_: String) {}\n+   |    ^^^ ---------\n help: consider removing the borrow\n    |\n LL -     foo(&mut \"aaa\".to_owned());\n@@ -48,8 +76,15 @@ LL |     ($x:expr) => { &$x }\n    |                    ^^^ expected `u32`, found `&{integer}`\n ...\n LL |     foo3(borrow!(0));\n-   |          ---------- in this macro invocation\n+   |     ---- ---------- in this macro invocation\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/deref-suggestion.rs:12:4\n    |\n+LL | fn foo3(_: u32) {}\n+   |    ^^^^ ------\n    = note: this error originates in the macro `borrow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types"}, {"sha": "d83a1367dbfae87816981dfeeeaa02edd2d9aa67", "filename": "src/test/ui/inference/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ftutorial-suffix-inference-test.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:9:18\n    |\n LL |     identity_u16(x);\n-   |                  ^ expected `u16`, found `u8`\n+   |     ------------ ^ expected `u16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/tutorial-suffix-inference-test.rs:6:8\n+   |\n+LL |     fn identity_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^^^^^^^ ------\n help: you can convert a `u8` to a `u16`\n    |\n LL |     identity_u16(x.into());\n@@ -13,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:12:18\n    |\n LL |     identity_u16(y);\n-   |                  ^ expected `u16`, found `i32`\n+   |     ------------ ^ expected `u16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/tutorial-suffix-inference-test.rs:6:8\n    |\n+LL |     fn identity_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^^^^^^^ ------\n help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n@@ -24,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:21:18\n    |\n LL |     identity_u16(a);\n-   |                  ^ expected `u16`, found `isize`\n+   |     ------------ ^ expected `u16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/tutorial-suffix-inference-test.rs:6:8\n    |\n+LL |     fn identity_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^^^^^^^ ------\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());"}, {"sha": "4d8a85a139715c8b52477ae56057f036d72e57da", "filename": "src/test/ui/issues/issue-10764.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-10764.rs:4:15\n    |\n LL | fn main() { f(bar) }\n-   |               ^^^ expected \"Rust\" fn, found \"C\" fn\n+   |             - ^^^ expected \"Rust\" fn, found \"C\" fn\n+   |             |\n+   |             arguments to this function are incorrect\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `extern \"C\" fn() {bar}`\n+note: function defined here\n+  --> $DIR/issue-10764.rs:1:4\n+   |\n+LL | fn f(_: extern \"Rust\" fn()) {}\n+   |    ^ ---------------------\n \n error: aborting due to previous error\n "}, {"sha": "3a1d43310e2fc30d3b8b5992e45392d233191ca7", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,13 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11374.rs:26:15\n    |\n LL |     c.read_to(v);\n-   |               ^\n-   |               |\n-   |               expected `&mut [u8]`, found struct `Vec`\n-   |               help: consider mutably borrowing here: `&mut v`\n+   |       ------- ^\n+   |       |       |\n+   |       |       expected `&mut [u8]`, found struct `Vec`\n+   |       |       help: consider mutably borrowing here: `&mut v`\n+   |       arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut [u8]`\n                          found struct `Vec<_>`\n+note: associated function defined here\n+  --> $DIR/issue-11374.rs:13:12\n+   |\n+LL |     pub fn read_to(&mut self, vec: &mut [u8]) {\n+   |            ^^^^^^^ ---------  --------------\n \n error: aborting due to previous error\n "}, {"sha": "2a3d0e3457b031ca24c92378fa01b94a6054a7d1", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,8 +4,16 @@ error[E0308]: mismatched types\n LL | #[bench]\n    | -------- in this procedural macro expansion\n LL | fn bar(x: isize) { }\n-   | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut Bencher`\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | expected `isize`, found `&mut Bencher`\n+   | arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/issue-12997-2.rs:8:4\n+   |\n+LL | fn bar(x: isize) { }\n+   |    ^^^ --------\n    = note: this error originates in the attribute macro `bench` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "db6283ea11f506577305f91eabc5d5f56bec2423", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,23 +2,29 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:6:9\n    |\n LL |     foo(1*(1 as isize));\n-   |         ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n+   |     --- ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n+note: function defined here\n+  --> $DIR/issue-13359.rs:1:4\n    |\n-LL |     foo((1*(1 as isize)).try_into().unwrap());\n-   |         +              +++++++++++++++++++++\n+LL | fn foo(_s: i16) { }\n+   |    ^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n    |\n LL |     bar(1*(1 as usize));\n-   |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n+   |     --- ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n+note: function defined here\n+  --> $DIR/issue-13359.rs:3:4\n    |\n-LL |     bar((1*(1 as usize)).try_into().unwrap());\n-   |         +              +++++++++++++++++++++\n+LL | fn bar(_s: u32) { }\n+   |    ^^^ -------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "657bda5f62b3f2605ec329981c7f442a10ea130f", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -20,13 +20,19 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13853.rs:37:13\n    |\n LL |     iterate(graph);\n-   |             ^^^^^\n-   |             |\n-   |             expected reference, found struct `Vec`\n-   |             help: consider borrowing here: `&graph`\n+   |     ------- ^^^^^\n+   |     |       |\n+   |     |       expected reference, found struct `Vec`\n+   |     |       help: consider borrowing here: `&graph`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `Vec<Stuff>`\n+note: function defined here\n+  --> $DIR/issue-13853.rs:26:4\n+   |\n+LL | fn iterate<N: Node, G: Graph<N>>(graph: &G) {\n+   |    ^^^^^^^                       ---------\n \n error: aborting due to 3 previous errors\n "}, {"sha": "203dd92c9fb022953fee9b9de1825ed4da0d3e01", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1448-2.rs:6:24\n    |\n LL |     println!(\"{}\", foo(10i32));\n-   |                        ^^^^^ expected `u32`, found `i32`\n+   |                    --- ^^^^^ expected `u32`, found `i32`\n+   |                    |\n+   |                    arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/issue-1448-2.rs:3:4\n+   |\n+LL | fn foo(a: u32) -> u32 { a }\n+   |    ^^^ ------\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     println!(\"{}\", foo(10u32));"}, {"sha": "660dfe9ed3d51bc7617b139fd900ba1b773f3137", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |                   ^ expected slice `[&str]`, found array `[&str; 1]`\n+   |               --- ^ expected slice `[&str]`, found array `[&str; 1]`\n+   |               |\n+   |               arguments to this function are incorrect\n    |\n    = note: expected enum `Option<&[&str]>`\n               found enum `Option<&[&str; 1]>`\n+note: function defined here\n+  --> $DIR/issue-15783.rs:1:8\n+   |\n+LL | pub fn foo(params: Option<&[&str]>) -> usize {\n+   |        ^^^ -----------------------\n \n error: aborting due to previous error\n "}, {"sha": "294524f0b6148de09fbe98c04247f78f4dc0ad71", "filename": "src/test/ui/issues/issue-16939.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,17 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-16939.rs:5:9\n    |\n LL |     |t| f(t);\n-   |         ^ - supplied 1 argument\n-   |         |\n-   |         expected 0 arguments\n+   |         ^ - argument unexpected\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL |     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n    |                           ^^^^\n+help: remove the extra argument\n+   |\n+LL |     |t| f();\n+   |         ~~~\n \n error: aborting due to previous error\n "}, {"sha": "f26bee5ff45d0154a37873367afe0c8d3ed46a1f", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/issue-17033.rs:2:10\n    |\n LL |     (*p)(())\n-   |          ^^\n-   |          |\n-   |          expected `&mut ()`, found `()`\n-   |          help: consider mutably borrowing here: `&mut ()`\n+   |     ---- ^^\n+   |     |    |\n+   |     |    expected `&mut ()`, found `()`\n+   |     |    help: consider mutably borrowing here: `&mut ()`\n+   |     arguments to this function are incorrect\n \n error: aborting due to previous error\n "}, {"sha": "db228fded6e409f14a816d4390d41de561d82569", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,26 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n LL |     print_x(X);\n-   |     ^^^^^^^ - supplied 1 argument\n-   |     |\n-   |     expected 2 arguments\n+   |     ^^^^^^^---\n+   |            ||\n+   |            |expected reference, found struct `X`\n+   |            an argument of type `&str` is missing\n    |\n+   = note: expected reference `&dyn Foo<Item = bool>`\n+                 found struct `X`\n note: function defined here\n   --> $DIR/issue-18819.rs:11:4\n    |\n LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n    |    ^^^^^^^ ----------------------  -----------\n+help: consider borrowing here\n+   |\n+LL |     print_x(&X);\n+   |             ~~\n+help: provide the argument\n+   |\n+LL |     print_x({&dyn Foo<Item = bool>}, {&str});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "982a11fef80e896fd4683c5ec6d3d2111570c84d", "filename": "src/test/ui/issues/issue-24819.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24819.rs:5:9\n    |\n LL |     foo(&mut v);\n-   |         ^^^^^^ expected struct `HashSet`, found struct `Vec`\n+   |     --- ^^^^^^ expected struct `HashSet`, found struct `Vec`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut HashSet<u32>`\n               found mutable reference `&mut Vec<_>`\n+note: function defined here\n+  --> $DIR/issue-24819.rs:10:4\n+   |\n+LL | fn foo(h: &mut HashSet<u32>) {\n+   |    ^^^ --------------------\n \n error: aborting due to previous error\n "}, {"sha": "981c3abb4bae0379ab83f451f423d7f18823b389", "filename": "src/test/ui/issues/issue-26094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,6 +1,6 @@\n macro_rules! some_macro {\n     ($other: expr) => ({\n-        $other(None) //~ NOTE supplied 1 argument\n+        $other(None) //~ NOTE argument unexpected\n     })\n }\n \n@@ -9,5 +9,5 @@ fn some_function() {} //~ NOTE defined here\n fn main() {\n     some_macro!(some_function);\n     //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n-    //~| NOTE expected 0 arguments\n+    //~| NOTE in this expansion of some_macro!\n }"}, {"sha": "1013518e1dad3f6b5161a1f3e446de848cf99c35", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,16 +2,20 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |                ---- supplied 1 argument\n+   |                ---- argument unexpected\n ...\n LL |     some_macro!(some_function);\n-   |                 ^^^^^^^^^^^^^ expected 0 arguments\n+   |                 ^^^^^^^^^^^^^\n    |\n note: function defined here\n   --> $DIR/issue-26094.rs:7:4\n    |\n LL | fn some_function() {}\n    |    ^^^^^^^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |         some_function()\n+   |         ~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7363cae8370ab26981fb163ed3d7c9de6f0ceb15", "filename": "src/test/ui/issues/issue-3044.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n     });\n-    //~^^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^^ ERROR mismatched types\n+    //~| ERROR this function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "5bb07cfda214286eeb8b8d99877166f84d26c09d", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,19 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-3044.rs:3:35\n+   |\n+LL |       needlesArr.iter().fold(|x, y| {\n+   |  ___________________________________^\n+LL | |     });\n+   | |_____^ expected closure, found `()`\n+   |\n+   = note: expected closure `[closure@$DIR/issue-3044.rs:3:28: 4:6]`\n+            found unit type `()`\n+\n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n LL |       needlesArr.iter().fold(|x, y| {\n-   |  _______________________^^^^_-\n-   | |                       |\n-   | |                       expected 2 arguments\n+   |  _______________________^^^^-\n LL | |     });\n-   | |_____- supplied 1 argument\n+   | |______- an argument is missing\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n    |        ^^^^\n+help: provide the argument\n+   |\n+LL ~     needlesArr.iter().fold(|x, y| {\n+LL ~     }, {_});\n+   |\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "58fd1121a6b99df48ba8ede83f2735c86a66a465", "filename": "src/test/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43420-no-over-suggest.rs:8:9\n    |\n LL |     foo(&a);\n-   |         ^^ expected slice `[u16]`, found struct `Vec`\n+   |     --- ^^ expected slice `[u16]`, found struct `Vec`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&[u16]`\n               found reference `&Vec<u8>`\n+note: function defined here\n+  --> $DIR/issue-43420-no-over-suggest.rs:4:4\n+   |\n+LL | fn foo(b: &[u16]) {}\n+   |    ^^^ ---------\n \n error: aborting due to previous error\n "}, {"sha": "70b4ca5ec496b2c49a5a150f9e74dadc6ea5dbbc", "filename": "src/test/ui/issues/issue-4517.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |         ^^^ expected `usize`, found array `[u8; 4]`\n+   |     --- ^^^ expected `usize`, found array `[u8; 4]`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-4517.rs:1:4\n+   |\n+LL | fn bar(int_param: usize) {}\n+   |    ^^^ ----------------\n \n error: aborting due to previous error\n "}, {"sha": "e874ded8ec54e2699d1708e6601432c19800d9a7", "filename": "src/test/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,19 +2,33 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:12:42\n    |\n LL |     light_flows_our_war_of_mocking_words(behold as usize);\n-   |                                          ^^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          expected `&usize`, found `usize`\n-   |                                          help: consider borrowing here: `&(behold as usize)`\n+   |     ------------------------------------ ^^^^^^^^^^^^^^^\n+   |     |                                    |\n+   |     |                                    expected `&usize`, found `usize`\n+   |     |                                    help: consider borrowing here: `&(behold as usize)`\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:5:4\n+   |\n+LL | fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:14:42\n    |\n LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n-   |                                          ^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          expected `&usize`, found `usize`\n-   |                                          help: consider borrowing here: `&(with_tears + 4)`\n+   |     ------------------------------------ ^^^^^^^^^^^^^^\n+   |     |                                    |\n+   |     |                                    expected `&usize`, found `usize`\n+   |     |                                    help: consider borrowing here: `&(with_tears + 4)`\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:5:4\n+   |\n+LL | fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fd36676df8c17c15d84ab81d3609bd13661f8bb", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |                     ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |         ----------- ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+   |\n+LL |     pub fn starts_with(&self, needle: &[T]) -> bool\n+   |            ^^^^^^^^^^^\n    = note: this error originates in the macro `stringify` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b4cebe2a68b5756d9f55805cf457c5b59e89a5c8", "filename": "src/test/ui/issues/issue-4935.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,17 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n LL | fn main() { foo(5, 6) }\n-   |             ^^^ -  - supplied 2 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^^    - argument unexpected\n    |\n note: function defined here\n   --> $DIR/issue-4935.rs:3:4\n    |\n LL | fn foo(a: usize) {}\n    |    ^^^ --------\n+help: remove the extra argument\n+   |\n+LL | fn main() { foo(5) }\n+   |             ~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "f2cbc3e6feb78d761f305a63b27de263003bbf5c", "filename": "src/test/ui/issues/issue-51154.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,11 +4,18 @@ error[E0308]: mismatched types\n LL | fn foo<F: FnMut()>() {\n    |        - this type parameter\n LL |     let _: Box<F> = Box::new(|| ());\n-   |                              ^^^^^ expected type parameter `F`, found closure\n+   |                     -------- ^^^^^ expected type parameter `F`, found closure\n+   |                     |\n+   |                     arguments to this function are incorrect\n    |\n    = note: expected type parameter `F`\n                      found closure `[closure@$DIR/issue-51154.rs:2:30: 2:35]`\n    = help: every closure has a distinct type and so could not always match the caller-chosen type of parameter `F`\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL |     pub fn new(x: T) -> Self {\n+   |            ^^^\n \n error: aborting due to previous error\n "}, {"sha": "1afff28f0b4e1dc16349d3e2ac52347908024bcd", "filename": "src/test/ui/issues/issue-5216.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:3:21\n    |\n LL | pub static C: S = S(f);\n-   |                     ^ expected struct `Box`, found fn item\n+   |                   - ^ expected struct `Box`, found fn item\n+   |                   |\n+   |                   arguments to this struct are incorrect\n    |\n    = note: expected struct `Box<(dyn FnMut() + Sync + 'static)>`\n              found fn item `fn() {f}`\n+note: tuple struct defined here\n+  --> $DIR/issue-5216.rs:2:8\n+   |\n+LL | struct S(Box<dyn FnMut() + Sync>);\n+   |        ^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:8:19"}, {"sha": "2bc09234116b1171e2465b4492771242473480bc", "filename": "src/test/ui/issues/issue-61106.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61106.rs:3:9\n    |\n LL |     foo(x.clone());\n-   |         ^^^^^^^^^\n-   |         |\n-   |         expected `&str`, found struct `String`\n-   |         help: consider borrowing here: `&x`\n+   |     --- ^^^^^^^^^\n+   |     |   |\n+   |     |   expected `&str`, found struct `String`\n+   |     |   help: consider borrowing here: `&x`\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-61106.rs:6:4\n+   |\n+LL | fn foo(_: &str) {}\n+   |    ^^^ -------\n \n error: aborting due to previous error\n "}, {"sha": "61ec5d3180cc3ea96f449bd5f5a6bf9e1be36008", "filename": "src/test/ui/issues/issue-69306.stderr", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,10 +4,17 @@ error[E0308]: mismatched types\n LL | impl<T> S0<T> {\n    |      - this type parameter\n LL |     const C: S0<u8> = Self(0);\n-   |                            ^ expected type parameter `T`, found integer\n+   |                       ---- ^ expected type parameter `T`, found integer\n+   |                       |\n+   |                       arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n+note: tuple struct defined here\n+  --> $DIR/issue-69306.rs:3:8\n+   |\n+LL | struct S0<T>(T);\n+   |        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:5:23\n@@ -27,10 +34,17 @@ LL | impl<T> S0<T> {\n    |      - this type parameter\n ...\n LL |         Self(0);\n-   |              ^ expected type parameter `T`, found integer\n+   |         ---- ^ expected type parameter `T`, found integer\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n+note: tuple struct defined here\n+  --> $DIR/issue-69306.rs:3:8\n+   |\n+LL | struct S0<T>(T);\n+   |        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:27:14\n@@ -39,21 +53,35 @@ LL | impl<T> Foo<T> for <S0<T> as Fun>::Out {\n    |      - this type parameter\n LL |     fn foo() {\n LL |         Self(0);\n-   |              ^ expected type parameter `T`, found integer\n+   |         ---- ^ expected type parameter `T`, found integer\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n+note: tuple struct defined here\n+  --> $DIR/issue-69306.rs:3:8\n+   |\n+LL | struct S0<T>(T);\n+   |        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:32\n    |\n LL | impl<T> S1<T, u8> {\n    |      - this type parameter\n LL |     const C: S1<u8, u8> = Self(0, 1);\n-   |                                ^ expected type parameter `T`, found integer\n+   |                           ---- ^ expected type parameter `T`, found integer\n+   |                           |\n+   |                           arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n+note: tuple struct defined here\n+  --> $DIR/issue-69306.rs:31:8\n+   |\n+LL | struct S1<T, U>(T, U);\n+   |        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:27\n@@ -74,12 +102,19 @@ LL | impl<T> S2<T> {\n LL |     fn map<U>(x: U) -> S2<U> {\n    |            - found type parameter\n LL |         Self(x)\n-   |              ^ expected type parameter `T`, found type parameter `U`\n+   |         ---- ^ expected type parameter `T`, found type parameter `U`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n               found type parameter `U`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+note: tuple struct defined here\n+  --> $DIR/issue-69306.rs:38:8\n+   |\n+LL | struct S2<T>(T);\n+   |        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:41:9"}, {"sha": "f83e192130bdb207d950b7c17b20e24db8df8805", "filename": "src/test/ui/macros/issue-29084.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmacros%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmacros%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-29084.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,11 +2,21 @@ error[E0308]: mismatched types\n   --> $DIR/issue-29084.rs:4:13\n    |\n LL |         bar(&mut $d);\n-   |             ^^^^^^^ expected `u8`, found `&mut u8`\n+   |         --- ^^^^^^^ expected `u8`, found `&mut u8`\n+   |         |\n+   |         arguments to this function are incorrect\n ...\n LL |     foo!(0u8);\n    |     --------- in this macro invocation\n    |\n+note: function defined here\n+  --> $DIR/issue-29084.rs:3:12\n+   |\n+LL |         fn bar(d: u8) { }\n+   |            ^^^ -----\n+...\n+LL |     foo!(0u8);\n+   |     --------- in this macro invocation\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "53e582f7f13a4ecb819c2d81ee4879aec4b4cd1d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,43 +2,49 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     x.zero(0)\n-   |       ^^^^ - supplied 1 argument\n-   |       |\n-   |       expected 0 arguments\n+   |       ^^^^ - argument unexpected\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n    |        ^^^^ ----\n+help: remove the extra argument\n+   |\n+LL |     x.zero()\n+   |       ~~~~~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7\n    |\n LL |      .one()\n-   |       ^^^- supplied 0 arguments\n-   |       |\n-   |       expected 1 argument\n+   |       ^^^-- an argument of type `isize` is missing\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:6:8\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n    |        ^^^ ----  --------\n+help: provide the argument\n+   |\n+LL |      .one({isize})\n+   |       ~~~~~~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:15:7\n    |\n LL |      .two(0);\n-   |       ^^^ - supplied 1 argument\n-   |       |\n-   |       expected 2 arguments\n+   |       ^^^--- an argument of type `isize` is missing\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:7:8\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |        ^^^ ----  --------  --------\n+help: provide the argument\n+   |\n+LL |      .two(0, {isize});\n+   |       ~~~~~~~~~~~~~~~\n \n error[E0599]: `Foo` is not an iterator\n   --> $DIR/method-call-err-msg.rs:19:7\n@@ -74,15 +80,17 @@ error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7\n    |\n LL |     y.three::<usize>();\n-   |       ^^^^^--------- supplied 0 arguments\n-   |       |\n-   |       expected 3 arguments\n+   |       ^^^^^^^^^^^^^^-- three arguments of type `usize`, `usize`, and `usize` are missing\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:8:8\n    |\n LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n    |        ^^^^^    ----  ----  ----  ----\n+help: provide the arguments\n+   |\n+LL |     y.three::<usize>({usize}, {usize}, {usize});\n+   |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "01fec6fcaaeece48207829be7ef86e1ea118c0d4", "filename": "src/test/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,19 +2,33 @@ error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:11:14\n    |\n LL |     Foo::bar(x);\n-   |              ^\n-   |              |\n-   |              expected `&Foo`, found struct `Foo`\n-   |              help: consider borrowing here: `&x`\n+   |     -------- ^\n+   |     |        |\n+   |     |        expected `&Foo`, found struct `Foo`\n+   |     |        help: consider borrowing here: `&x`\n+   |     arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $DIR/method-self-arg-1.rs:6:8\n+   |\n+LL |     fn bar(&self) {}\n+   |        ^^^ -----\n \n error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:13:14\n    |\n LL |     Foo::bar(&42);\n-   |              ^^^ expected struct `Foo`, found integer\n+   |     -------- ^^^ expected struct `Foo`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo`\n               found reference `&{integer}`\n+note: associated function defined here\n+  --> $DIR/method-self-arg-1.rs:6:8\n+   |\n+LL |     fn bar(&self) {}\n+   |        ^^^ -----\n \n error: aborting due to 2 previous errors\n "}, {"sha": "579a5b7ecb98ceec6f58c6b28aa1e726b38a7532", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,17 +1,20 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-26480.rs:16:19\n    |\n+LL |             write(stdout, $arr.as_ptr() as *const i8,\n+   |             ----- arguments to this function are incorrect\n LL |                   $arr.len() * size_of($arr[0]));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n ...\n LL |     write!(hello);\n    |     ------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n+note: function defined here\n+  --> $DIR/issue-26480.rs:2:8\n    |\n-LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n-   |                   +                             +++++++++++++++++++++\n+LL |     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n+   |        ^^^^^\n+   = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19"}, {"sha": "f0dea75001c2ce7cca6ffd46cfd5bc822a8f8323", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,7 +5,9 @@ LL | impl<bool> Parser<bool> for bool {\n    |      ---- this type parameter\n LL |     fn parse(text: &str) -> Option<bool> {\n LL |         Some(true)\n-   |              ^^^^ expected type parameter `bool`, found `bool`\n+   |         ---- ^^^^ expected type parameter `bool`, found `bool`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)"}, {"sha": "fcf3eccbcba2be9b2cbcd90bf2c36149bf369667", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:6:9\n    |\n LL |     foo(1u8);\n-   |         ^^^ expected `u16`, found `u8`\n+   |     --- ^^^ expected `u16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-literal-cast.rs:1:4\n+   |\n+LL | fn foo(_: u16) {}\n+   |    ^^^ ------\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n LL |     foo(1u16);\n@@ -13,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:8:10\n    |\n LL |     foo1(2f32);\n-   |          ^^^^ expected `f64`, found `f32`\n+   |     ---- ^^^^ expected `f64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-literal-cast.rs:2:4\n    |\n+LL | fn foo1(_: f64) {}\n+   |    ^^^^ ------\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n LL |     foo1(2f64);\n@@ -24,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:10:10\n    |\n LL |     foo2(3i16);\n-   |          ^^^^ expected `i32`, found `i16`\n+   |     ---- ^^^^ expected `i32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-literal-cast.rs:3:4\n    |\n+LL | fn foo2(_: i32) {}\n+   |    ^^^^ ------\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n LL |     foo2(3i32);"}, {"sha": "902a6ec81d60b9cd87d328c50e1a3c89f6495382", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -30,5 +30,4 @@ fn main() {\n     //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n-    //~| ERROR mismatched types\n }"}, {"sha": "a5742d6fe8c36e9e9ef85f90e76c28d906b3764b", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,43 +2,51 @@ error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:28:17\n    |\n LL |     let ans = s(\"what\");\n-   |                 ^^^^^^ expected `isize`, found `&str`\n+   |               - ^^^^^^ expected `isize`, found `&str`\n+   |               |\n+   |               arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+   |                           ^^^^^^^^\n \n error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15\n    |\n LL |     let ans = s();\n-   |               ^-- supplied 0 arguments\n-   |               |\n-   |               expected 1 argument\n+   |               ^-- an argument of type `isize` is missing\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/overloaded-calls-bad.rs:31:17\n+help: provide the argument\n    |\n-LL |     let ans = s(\"burma\", \"shave\");\n-   |                 ^^^^^^^ expected `isize`, found `&str`\n+LL |     let ans = s({isize});\n+   |               ~~~~~~~~~~\n \n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^ -------  ------- supplied 2 arguments\n-   |               |\n-   |               expected 1 argument\n+   |               ^ -------  ------- argument unexpected\n+   |                 |\n+   |                 expected `isize`, found `&str`\n    |\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |     let ans = s({isize});\n+   |               ~~~~~~~~~~\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0057, E0308.\n For more information about an error, try `rustc --explain E0057`."}, {"sha": "80aef7fcbe8e2fcd785f219e9a857e52961b7d2d", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-bounds-cant-coerce.rs:13:7\n    |\n LL |     a(x);\n-   |       ^ expected trait `Foo + Send`, found trait `Foo`\n+   |     - ^ expected trait `Foo + Send`, found trait `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Box<(dyn Foo + Send + 'static)>`\n               found struct `Box<(dyn Foo + 'static)>`\n+note: function defined here\n+  --> $DIR/trait-bounds-cant-coerce.rs:5:4\n+   |\n+LL | fn a(_x: Box<dyn Foo + Send>) {\n+   |    ^ -----------------------\n \n error: aborting due to previous error\n "}, {"sha": "ee739d6286a51d632330f3d7275a1e8c4a8e8b64", "filename": "src/test/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,13 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/mut-cross-borrowing.rs:7:7\n    |\n LL |     f(x)\n-   |       ^\n-   |       |\n-   |       expected `&mut isize`, found struct `Box`\n-   |       help: consider mutably borrowing here: `&mut x`\n+   |     - ^\n+   |     | |\n+   |     | expected `&mut isize`, found struct `Box`\n+   |     | help: consider mutably borrowing here: `&mut x`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut isize`\n                          found struct `Box<{integer}>`\n+note: function defined here\n+  --> $DIR/mut-cross-borrowing.rs:1:4\n+   |\n+LL | fn f(_: &mut isize) {}\n+   |    ^ -------------\n \n error: aborting due to previous error\n "}, {"sha": "fa3db33c9606f1d38aafd0c47c40ed0abd754ca4", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n    |\n LL |     foo(\"wow\");\n-   |         ^^^^^ expected `!`, found `&str`\n+   |     --- ^^^^^ expected `!`, found `&str`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:   expected type `!`\n            found reference `&'static str`\n+note: function defined here\n+  --> $DIR/call-fn-never-arg-wrong-type.rs:5:4\n+   |\n+LL | fn foo(x: !) -> ! {\n+   |    ^^^ ----\n \n error: aborting due to previous error\n "}, {"sha": "4f502acc95cbe654face1516b30ad294f8cd6881", "filename": "src/test/ui/not-enough-arguments.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,23 +2,23 @@ error[E0061]: this function takes 4 arguments but 3 arguments were supplied\n   --> $DIR/not-enough-arguments.rs:27:3\n    |\n LL |   foo(1, 2, 3);\n-   |   ^^^ -  -  - supplied 3 arguments\n-   |   |\n-   |   expected 4 arguments\n+   |   ^^^--------- an argument of type `isize` is missing\n    |\n note: function defined here\n   --> $DIR/not-enough-arguments.rs:5:4\n    |\n LL | fn foo(a: isize, b: isize, c: isize, d:isize) {\n    |    ^^^ --------  --------  --------  -------\n+help: provide the argument\n+   |\n+LL |   foo(1, 2, 3, {isize});\n+   |   ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0061]: this function takes 6 arguments but 3 arguments were supplied\n   --> $DIR/not-enough-arguments.rs:29:3\n    |\n LL |   bar(1, 2, 3);\n-   |   ^^^ -  -  - supplied 3 arguments\n-   |   |\n-   |   expected 6 arguments\n+   |   ^^^--------- three arguments of type `i32`, `i32`, and `i32` are missing\n    |\n note: function defined here\n   --> $DIR/not-enough-arguments.rs:10:4\n@@ -37,6 +37,10 @@ LL |     e: i32,\n    |     ------\n LL |     f: i32,\n    |     ------\n+help: provide the arguments\n+   |\n+LL |   bar(1, 2, 3, {i32}, {i32}, {i32});\n+   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5045f584c8977886ac002c53e385c9e1067af8d1", "filename": "src/test/ui/numeric/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 416, "deletions": 52, "changes": 468, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Finteger-literal-suffix-inference.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:38:11\n    |\n LL |     id_i8(a16);\n-   |           ^^^ expected `i8`, found `i16`\n+   |     ----- ^^^ expected `i8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n+   |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n@@ -13,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:41:11\n    |\n LL |     id_i8(a32);\n-   |           ^^^ expected `i8`, found `i32`\n+   |     ----- ^^^ expected `i8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n    |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n@@ -24,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:44:11\n    |\n LL |     id_i8(a64);\n-   |           ^^^ expected `i8`, found `i64`\n+   |     ----- ^^^ expected `i8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n+   |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n@@ -35,8 +56,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:47:11\n    |\n LL |     id_i8(asize);\n-   |           ^^^^^ expected `i8`, found `isize`\n+   |     ----- ^^^^^ expected `i8`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n    |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(asize.try_into().unwrap());\n@@ -46,8 +74,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:51:12\n    |\n LL |     id_i16(a8);\n-   |            ^^ expected `i16`, found `i8`\n+   |     ------ ^^ expected `i16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n+   |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i16`\n    |\n LL |     id_i16(a8.into());\n@@ -57,8 +92,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:55:12\n    |\n LL |     id_i16(a32);\n-   |            ^^^ expected `i16`, found `i32`\n+   |     ------ ^^^ expected `i16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n    |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n@@ -68,8 +110,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:58:12\n    |\n LL |     id_i16(a64);\n-   |            ^^^ expected `i16`, found `i64`\n+   |     ------ ^^^ expected `i16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n    |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n@@ -79,8 +128,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:61:12\n    |\n LL |     id_i16(asize);\n-   |            ^^^^^ expected `i16`, found `isize`\n+   |     ------ ^^^^^ expected `i16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n+   |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(asize.try_into().unwrap());\n@@ -90,8 +146,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:65:12\n    |\n LL |     id_i32(a8);\n-   |            ^^ expected `i32`, found `i8`\n+   |     ------ ^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n    |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i32`\n    |\n LL |     id_i32(a8.into());\n@@ -101,8 +164,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:68:12\n    |\n LL |     id_i32(a16);\n-   |            ^^^ expected `i32`, found `i16`\n+   |     ------ ^^^ expected `i32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n    |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i16` to an `i32`\n    |\n LL |     id_i32(a16.into());\n@@ -112,8 +182,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:72:12\n    |\n LL |     id_i32(a64);\n-   |            ^^^ expected `i32`, found `i64`\n+   |     ------ ^^^ expected `i32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n+   |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n@@ -123,8 +200,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:75:12\n    |\n LL |     id_i32(asize);\n-   |            ^^^^^ expected `i32`, found `isize`\n+   |     ------ ^^^^^ expected `i32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n    |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(asize.try_into().unwrap());\n@@ -134,8 +218,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:79:12\n    |\n LL |     id_i64(a8);\n-   |            ^^ expected `i64`, found `i8`\n+   |     ------ ^^ expected `i64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n    |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i64`\n    |\n LL |     id_i64(a8.into());\n@@ -145,8 +236,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^ expected `i64`, found `i16`\n+   |     ------ ^^^ expected `i64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n+   |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i16` to an `i64`\n    |\n LL |     id_i64(a16.into());\n@@ -156,8 +254,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:85:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^ expected `i64`, found `i32`\n+   |     ------ ^^^ expected `i64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n    |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i32` to an `i64`\n    |\n LL |     id_i64(a32.into());\n@@ -167,8 +272,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:89:12\n    |\n LL |     id_i64(asize);\n-   |            ^^^^^ expected `i64`, found `isize`\n+   |     ------ ^^^^^ expected `i64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n+   |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     id_i64(asize.try_into().unwrap());\n@@ -178,8 +290,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:93:14\n    |\n LL |     id_isize(a8);\n-   |              ^^ expected `isize`, found `i8`\n+   |     -------- ^^ expected `isize`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:19:8\n    |\n+LL |     fn id_isize(n: isize) -> isize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert an `i8` to an `isize`\n    |\n LL |     id_isize(a8.into());\n@@ -189,8 +308,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:96:14\n    |\n LL |     id_isize(a16);\n-   |              ^^^ expected `isize`, found `i16`\n+   |     -------- ^^^ expected `isize`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:19:8\n+   |\n+LL |     fn id_isize(n: isize) -> isize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert an `i16` to an `isize`\n    |\n LL |     id_isize(a16.into());\n@@ -200,8 +326,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:99:14\n    |\n LL |     id_isize(a32);\n-   |              ^^^ expected `isize`, found `i32`\n+   |     -------- ^^^ expected `isize`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:19:8\n    |\n+LL |     fn id_isize(n: isize) -> isize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a32.try_into().unwrap());\n@@ -211,8 +344,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:102:14\n    |\n LL |     id_isize(a64);\n-   |              ^^^ expected `isize`, found `i64`\n+   |     -------- ^^^ expected `isize`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:19:8\n    |\n+LL |     fn id_isize(n: isize) -> isize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a64.try_into().unwrap());\n@@ -222,8 +362,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:108:11\n    |\n LL |     id_i8(c16);\n-   |           ^^^ expected `i8`, found `i16`\n+   |     ----- ^^^ expected `i8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n+   |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n@@ -233,8 +380,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:111:11\n    |\n LL |     id_i8(c32);\n-   |           ^^^ expected `i8`, found `i32`\n+   |     ----- ^^^ expected `i8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n    |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n@@ -244,8 +398,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:114:11\n    |\n LL |     id_i8(c64);\n-   |           ^^^ expected `i8`, found `i64`\n+   |     ----- ^^^ expected `i8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:15:8\n    |\n+LL |     fn id_i8(n: i8) -> i8 { n }\n+   |        ^^^^^ -----\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n@@ -255,8 +416,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:118:12\n    |\n LL |     id_i16(c8);\n-   |            ^^ expected `i16`, found `i8`\n+   |     ------ ^^ expected `i16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n+   |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i16`\n    |\n LL |     id_i16(c8.into());\n@@ -266,8 +434,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:122:12\n    |\n LL |     id_i16(c32);\n-   |            ^^^ expected `i16`, found `i32`\n+   |     ------ ^^^ expected `i16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n    |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n@@ -277,8 +452,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:125:12\n    |\n LL |     id_i16(c64);\n-   |            ^^^ expected `i16`, found `i64`\n+   |     ------ ^^^ expected `i16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:16:8\n    |\n+LL |     fn id_i16(n: i16) -> i16 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n@@ -288,8 +470,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:129:12\n    |\n LL |     id_i32(c8);\n-   |            ^^ expected `i32`, found `i8`\n+   |     ------ ^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n+   |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i32`\n    |\n LL |     id_i32(c8.into());\n@@ -299,8 +488,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:132:12\n    |\n LL |     id_i32(c16);\n-   |            ^^^ expected `i32`, found `i16`\n+   |     ------ ^^^ expected `i32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n    |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i16` to an `i32`\n    |\n LL |     id_i32(c16.into());\n@@ -310,8 +506,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:136:12\n    |\n LL |     id_i32(c64);\n-   |            ^^^ expected `i32`, found `i64`\n+   |     ------ ^^^ expected `i32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:17:8\n+   |\n+LL |     fn id_i32(n: i32) -> i32 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n@@ -321,8 +524,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:140:12\n    |\n LL |     id_i64(a8);\n-   |            ^^ expected `i64`, found `i8`\n+   |     ------ ^^ expected `i64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n    |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i8` to an `i64`\n    |\n LL |     id_i64(a8.into());\n@@ -332,8 +542,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:143:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^ expected `i64`, found `i16`\n+   |     ------ ^^^ expected `i64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n+   |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i16` to an `i64`\n    |\n LL |     id_i64(a16.into());\n@@ -343,8 +560,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:146:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^ expected `i64`, found `i32`\n+   |     ------ ^^^ expected `i64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:18:8\n    |\n+LL |     fn id_i64(n: i64) -> i64 { n }\n+   |        ^^^^^^ ------\n help: you can convert an `i32` to an `i64`\n    |\n LL |     id_i64(a32.into());\n@@ -354,8 +578,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:152:11\n    |\n LL |     id_u8(b16);\n-   |           ^^^ expected `u8`, found `u16`\n+   |     ----- ^^^ expected `u8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:27:8\n    |\n+LL |     fn id_u8(n: u8) -> u8 { n }\n+   |        ^^^^^ -----\n help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n@@ -365,8 +596,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:155:11\n    |\n LL |     id_u8(b32);\n-   |           ^^^ expected `u8`, found `u32`\n+   |     ----- ^^^ expected `u8`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:27:8\n+   |\n+LL |     fn id_u8(n: u8) -> u8 { n }\n+   |        ^^^^^ -----\n help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n@@ -376,8 +614,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:158:11\n    |\n LL |     id_u8(b64);\n-   |           ^^^ expected `u8`, found `u64`\n+   |     ----- ^^^ expected `u8`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:27:8\n    |\n+LL |     fn id_u8(n: u8) -> u8 { n }\n+   |        ^^^^^ -----\n help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n@@ -387,8 +632,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:161:11\n    |\n LL |     id_u8(bsize);\n-   |           ^^^^^ expected `u8`, found `usize`\n+   |     ----- ^^^^^ expected `u8`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:27:8\n    |\n+LL |     fn id_u8(n: u8) -> u8 { n }\n+   |        ^^^^^ -----\n help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(bsize.try_into().unwrap());\n@@ -398,8 +650,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:165:12\n    |\n LL |     id_u16(b8);\n-   |            ^^ expected `u16`, found `u8`\n+   |     ------ ^^ expected `u16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:28:8\n+   |\n+LL |     fn id_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u8` to a `u16`\n    |\n LL |     id_u16(b8.into());\n@@ -409,8 +668,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:169:12\n    |\n LL |     id_u16(b32);\n-   |            ^^^ expected `u16`, found `u32`\n+   |     ------ ^^^ expected `u16`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:28:8\n    |\n+LL |     fn id_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n@@ -420,8 +686,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:172:12\n    |\n LL |     id_u16(b64);\n-   |            ^^^ expected `u16`, found `u64`\n+   |     ------ ^^^ expected `u16`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:28:8\n    |\n+LL |     fn id_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n@@ -431,8 +704,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:175:12\n    |\n LL |     id_u16(bsize);\n-   |            ^^^^^ expected `u16`, found `usize`\n+   |     ------ ^^^^^ expected `u16`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:28:8\n+   |\n+LL |     fn id_u16(n: u16) -> u16 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(bsize.try_into().unwrap());\n@@ -442,8 +722,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:179:12\n    |\n LL |     id_u32(b8);\n-   |            ^^ expected `u32`, found `u8`\n+   |     ------ ^^ expected `u32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:29:8\n    |\n+LL |     fn id_u32(n: u32) -> u32 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u8` to a `u32`\n    |\n LL |     id_u32(b8.into());\n@@ -453,8 +740,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:182:12\n    |\n LL |     id_u32(b16);\n-   |            ^^^ expected `u32`, found `u16`\n+   |     ------ ^^^ expected `u32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:29:8\n+   |\n+LL |     fn id_u32(n: u32) -> u32 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u16` to a `u32`\n    |\n LL |     id_u32(b16.into());\n@@ -464,8 +758,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:186:12\n    |\n LL |     id_u32(b64);\n-   |            ^^^ expected `u32`, found `u64`\n+   |     ------ ^^^ expected `u32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:29:8\n    |\n+LL |     fn id_u32(n: u32) -> u32 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n@@ -475,8 +776,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:189:12\n    |\n LL |     id_u32(bsize);\n-   |            ^^^^^ expected `u32`, found `usize`\n+   |     ------ ^^^^^ expected `u32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:29:8\n+   |\n+LL |     fn id_u32(n: u32) -> u32 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(bsize.try_into().unwrap());\n@@ -486,8 +794,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:193:12\n    |\n LL |     id_u64(b8);\n-   |            ^^ expected `u64`, found `u8`\n+   |     ------ ^^ expected `u64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:30:8\n    |\n+LL |     fn id_u64(n: u64) -> u64 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u8` to a `u64`\n    |\n LL |     id_u64(b8.into());\n@@ -497,8 +812,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:196:12\n    |\n LL |     id_u64(b16);\n-   |            ^^^ expected `u64`, found `u16`\n+   |     ------ ^^^ expected `u64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:30:8\n    |\n+LL |     fn id_u64(n: u64) -> u64 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u16` to a `u64`\n    |\n LL |     id_u64(b16.into());\n@@ -508,8 +830,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:199:12\n    |\n LL |     id_u64(b32);\n-   |            ^^^ expected `u64`, found `u32`\n+   |     ------ ^^^ expected `u64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:30:8\n+   |\n+LL |     fn id_u64(n: u64) -> u64 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `u32` to a `u64`\n    |\n LL |     id_u64(b32.into());\n@@ -519,8 +848,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:203:12\n    |\n LL |     id_u64(bsize);\n-   |            ^^^^^ expected `u64`, found `usize`\n+   |     ------ ^^^^^ expected `u64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:30:8\n    |\n+LL |     fn id_u64(n: u64) -> u64 { n }\n+   |        ^^^^^^ ------\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     id_u64(bsize.try_into().unwrap());\n@@ -530,8 +866,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:207:14\n    |\n LL |     id_usize(b8);\n-   |              ^^ expected `usize`, found `u8`\n+   |     -------- ^^ expected `usize`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:31:8\n    |\n+LL |     fn id_usize(n: usize) -> usize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert a `u8` to a `usize`\n    |\n LL |     id_usize(b8.into());\n@@ -541,8 +884,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:210:14\n    |\n LL |     id_usize(b16);\n-   |              ^^^ expected `usize`, found `u16`\n+   |     -------- ^^^ expected `usize`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:31:8\n+   |\n+LL |     fn id_usize(n: usize) -> usize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert a `u16` to a `usize`\n    |\n LL |     id_usize(b16.into());\n@@ -552,8 +902,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:213:14\n    |\n LL |     id_usize(b32);\n-   |              ^^^ expected `usize`, found `u32`\n+   |     -------- ^^^ expected `usize`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:31:8\n    |\n+LL |     fn id_usize(n: usize) -> usize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b32.try_into().unwrap());\n@@ -563,8 +920,15 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:216:14\n    |\n LL |     id_usize(b64);\n-   |              ^^^ expected `usize`, found `u64`\n+   |     -------- ^^^ expected `usize`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/integer-literal-suffix-inference.rs:31:8\n    |\n+LL |     fn id_usize(n: usize) -> usize { n }\n+   |        ^^^^^^^^ --------\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b64.try_into().unwrap());"}, {"sha": "55a61b5e443792e395e7c7627afc40e5f37689c6", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/len.rs:3:10\n    |\n LL |     test(array.len());\n-   |          ^^^^^^^^^^^ expected `u32`, found `usize`\n+   |     ---- ^^^^^^^^^^^ expected `u32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/len.rs:6:4\n+   |\n+LL | fn test(length: u32) {\n+   |    ^^^^ -----------\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     test(array.len().try_into().unwrap());"}, {"sha": "581b548abcac4e83795b20289bc4c268d369fb55", "filename": "src/test/ui/numeric/numeric-cast-without-suggestion.stderr", "status": "modified", "additions": 189, "deletions": 21, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,127 +2,295 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:17:18\n    |\n LL |     foo::<usize>(x_f64);\n-   |                  ^^^^^ expected `usize`, found `f64`\n+   |     ------------ ^^^^^ expected `usize`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:18:18\n    |\n LL |     foo::<usize>(x_f32);\n-   |                  ^^^^^ expected `usize`, found `f32`\n+   |     ------------ ^^^^^ expected `usize`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:19:18\n    |\n LL |     foo::<isize>(x_f64);\n-   |                  ^^^^^ expected `isize`, found `f64`\n+   |     ------------ ^^^^^ expected `isize`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:20:18\n    |\n LL |     foo::<isize>(x_f32);\n-   |                  ^^^^^ expected `isize`, found `f32`\n+   |     ------------ ^^^^^ expected `isize`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:21:16\n    |\n LL |     foo::<u64>(x_f64);\n-   |                ^^^^^ expected `u64`, found `f64`\n+   |     ---------- ^^^^^ expected `u64`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:22:16\n    |\n LL |     foo::<u64>(x_f32);\n-   |                ^^^^^ expected `u64`, found `f32`\n+   |     ---------- ^^^^^ expected `u64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:23:16\n    |\n LL |     foo::<i64>(x_f64);\n-   |                ^^^^^ expected `i64`, found `f64`\n+   |     ---------- ^^^^^ expected `i64`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:24:16\n    |\n LL |     foo::<i64>(x_f32);\n-   |                ^^^^^ expected `i64`, found `f32`\n+   |     ---------- ^^^^^ expected `i64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:25:16\n    |\n LL |     foo::<u32>(x_f64);\n-   |                ^^^^^ expected `u32`, found `f64`\n+   |     ---------- ^^^^^ expected `u32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:26:16\n    |\n LL |     foo::<u32>(x_f32);\n-   |                ^^^^^ expected `u32`, found `f32`\n+   |     ---------- ^^^^^ expected `u32`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:27:16\n    |\n LL |     foo::<i32>(x_f64);\n-   |                ^^^^^ expected `i32`, found `f64`\n+   |     ---------- ^^^^^ expected `i32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:28:16\n    |\n LL |     foo::<i32>(x_f32);\n-   |                ^^^^^ expected `i32`, found `f32`\n+   |     ---------- ^^^^^ expected `i32`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:29:16\n    |\n LL |     foo::<u16>(x_f64);\n-   |                ^^^^^ expected `u16`, found `f64`\n+   |     ---------- ^^^^^ expected `u16`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:30:16\n    |\n LL |     foo::<u16>(x_f32);\n-   |                ^^^^^ expected `u16`, found `f32`\n+   |     ---------- ^^^^^ expected `u16`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:31:16\n    |\n LL |     foo::<i16>(x_f64);\n-   |                ^^^^^ expected `i16`, found `f64`\n+   |     ---------- ^^^^^ expected `i16`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:32:16\n    |\n LL |     foo::<i16>(x_f32);\n-   |                ^^^^^ expected `i16`, found `f32`\n+   |     ---------- ^^^^^ expected `i16`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:33:15\n    |\n LL |     foo::<u8>(x_f64);\n-   |               ^^^^^ expected `u8`, found `f64`\n+   |     --------- ^^^^^ expected `u8`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:34:15\n    |\n LL |     foo::<u8>(x_f32);\n-   |               ^^^^^ expected `u8`, found `f32`\n+   |     --------- ^^^^^ expected `u8`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:35:15\n    |\n LL |     foo::<i8>(x_f64);\n-   |               ^^^^^ expected `i8`, found `f64`\n+   |     --------- ^^^^^ expected `i8`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:36:15\n    |\n LL |     foo::<i8>(x_f32);\n-   |               ^^^^^ expected `i8`, found `f32`\n+   |     --------- ^^^^^ expected `i8`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:37:16\n    |\n LL |     foo::<f32>(x_f64);\n-   |                ^^^^^ expected `f32`, found `f64`\n+   |     ---------- ^^^^^ expected `f32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast-without-suggestion.rs:1:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n \n error: aborting due to 21 previous errors\n "}, {"sha": "d347875d5a947df9231cc54cb60b3a642b69efa9", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 904, "deletions": 113, "changes": 1017, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:23:18\n    |\n LL |     foo::<usize>(x_u64);\n-   |                  ^^^^^ expected `usize`, found `u64`\n+   |     ------------ ^^^^^ expected `usize`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n@@ -13,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:25:18\n    |\n LL |     foo::<usize>(x_u32);\n-   |                  ^^^^^ expected `usize`, found `u32`\n+   |     ------------ ^^^^^ expected `usize`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n@@ -24,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:27:18\n    |\n LL |     foo::<usize>(x_u16);\n-   |                  ^^^^^ expected `usize`, found `u16`\n+   |     ------------ ^^^^^ expected `usize`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to a `usize`\n    |\n LL |     foo::<usize>(x_u16.into());\n@@ -35,8 +56,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n    |\n LL |     foo::<usize>(x_u8);\n-   |                  ^^^^ expected `usize`, found `u8`\n+   |     ------------ ^^^^ expected `usize`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to a `usize`\n    |\n LL |     foo::<usize>(x_u8.into());\n@@ -46,8 +74,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n    |\n LL |     foo::<usize>(x_isize);\n-   |                  ^^^^^^^ expected `usize`, found `isize`\n+   |     ------------ ^^^^^^^ expected `usize`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n@@ -57,8 +92,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:33:18\n    |\n LL |     foo::<usize>(x_i64);\n-   |                  ^^^^^ expected `usize`, found `i64`\n+   |     ------------ ^^^^^ expected `usize`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n@@ -68,8 +110,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:35:18\n    |\n LL |     foo::<usize>(x_i32);\n-   |                  ^^^^^ expected `usize`, found `i32`\n+   |     ------------ ^^^^^ expected `usize`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n@@ -79,8 +128,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:37:18\n    |\n LL |     foo::<usize>(x_i16);\n-   |                  ^^^^^ expected `usize`, found `i16`\n+   |     ------------ ^^^^^ expected `usize`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n@@ -90,8 +146,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:39:18\n    |\n LL |     foo::<usize>(x_i8);\n-   |                  ^^^^ expected `usize`, found `i8`\n+   |     ------------ ^^^^ expected `usize`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n@@ -101,8 +164,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:44:18\n    |\n LL |     foo::<isize>(x_usize);\n-   |                  ^^^^^^^ expected `isize`, found `usize`\n+   |     ------------ ^^^^^^^ expected `isize`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n@@ -112,8 +182,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:46:18\n    |\n LL |     foo::<isize>(x_u64);\n-   |                  ^^^^^ expected `isize`, found `u64`\n+   |     ------------ ^^^^^ expected `isize`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n@@ -123,8 +200,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:48:18\n    |\n LL |     foo::<isize>(x_u32);\n-   |                  ^^^^^ expected `isize`, found `u32`\n+   |     ------------ ^^^^^ expected `isize`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n@@ -134,8 +218,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:50:18\n    |\n LL |     foo::<isize>(x_u16);\n-   |                  ^^^^^ expected `isize`, found `u16`\n+   |     ------------ ^^^^^ expected `isize`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n@@ -145,8 +236,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^ expected `isize`, found `u8`\n+   |     ------------ ^^^^ expected `isize`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `isize`\n    |\n LL |     foo::<isize>(x_u8.into());\n@@ -156,8 +254,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n    |\n LL |     foo::<isize>(x_i64);\n-   |                  ^^^^^ expected `isize`, found `i64`\n+   |     ------------ ^^^^^ expected `isize`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n@@ -167,8 +272,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:57:18\n    |\n LL |     foo::<isize>(x_i32);\n-   |                  ^^^^^ expected `isize`, found `i32`\n+   |     ------------ ^^^^^ expected `isize`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n@@ -178,8 +290,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:59:18\n    |\n LL |     foo::<isize>(x_i16);\n-   |                  ^^^^^ expected `isize`, found `i16`\n+   |     ------------ ^^^^^ expected `isize`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `isize`\n    |\n LL |     foo::<isize>(x_i16.into());\n@@ -189,8 +308,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:61:18\n    |\n LL |     foo::<isize>(x_i8);\n-   |                  ^^^^ expected `isize`, found `i8`\n+   |     ------------ ^^^^ expected `isize`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `isize`\n    |\n LL |     foo::<isize>(x_i8.into());\n@@ -200,8 +326,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:66:16\n    |\n LL |     foo::<u64>(x_usize);\n-   |                ^^^^^^^ expected `u64`, found `usize`\n+   |     ---------- ^^^^^^^ expected `u64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n@@ -211,8 +344,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:69:16\n    |\n LL |     foo::<u64>(x_u32);\n-   |                ^^^^^ expected `u64`, found `u32`\n+   |     ---------- ^^^^^ expected `u64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to a `u64`\n    |\n LL |     foo::<u64>(x_u32.into());\n@@ -222,8 +362,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:71:16\n    |\n LL |     foo::<u64>(x_u16);\n-   |                ^^^^^ expected `u64`, found `u16`\n+   |     ---------- ^^^^^ expected `u64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to a `u64`\n    |\n LL |     foo::<u64>(x_u16.into());\n@@ -233,8 +380,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:73:16\n    |\n LL |     foo::<u64>(x_u8);\n-   |                ^^^^ expected `u64`, found `u8`\n+   |     ---------- ^^^^ expected `u64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to a `u64`\n    |\n LL |     foo::<u64>(x_u8.into());\n@@ -244,8 +398,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:75:16\n    |\n LL |     foo::<u64>(x_isize);\n-   |                ^^^^^^^ expected `u64`, found `isize`\n+   |     ---------- ^^^^^^^ expected `u64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n@@ -255,8 +416,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:77:16\n    |\n LL |     foo::<u64>(x_i64);\n-   |                ^^^^^ expected `u64`, found `i64`\n+   |     ---------- ^^^^^ expected `u64`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n@@ -266,8 +434,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:79:16\n    |\n LL |     foo::<u64>(x_i32);\n-   |                ^^^^^ expected `u64`, found `i32`\n+   |     ---------- ^^^^^ expected `u64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n@@ -277,8 +452,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:81:16\n    |\n LL |     foo::<u64>(x_i16);\n-   |                ^^^^^ expected `u64`, found `i16`\n+   |     ---------- ^^^^^ expected `u64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n@@ -288,8 +470,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:83:16\n    |\n LL |     foo::<u64>(x_i8);\n-   |                ^^^^ expected `u64`, found `i8`\n+   |     ---------- ^^^^ expected `u64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n@@ -299,8 +488,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:88:16\n    |\n LL |     foo::<i64>(x_usize);\n-   |                ^^^^^^^ expected `i64`, found `usize`\n+   |     ---------- ^^^^^^^ expected `i64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n@@ -310,8 +506,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:90:16\n    |\n LL |     foo::<i64>(x_u64);\n-   |                ^^^^^ expected `i64`, found `u64`\n+   |     ---------- ^^^^^ expected `i64`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n@@ -321,8 +524,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^ expected `i64`, found `u32`\n+   |     ---------- ^^^^^ expected `i64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `i64`\n    |\n LL |     foo::<i64>(x_u32.into());\n@@ -332,8 +542,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^ expected `i64`, found `u16`\n+   |     ---------- ^^^^^ expected `i64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `i64`\n    |\n LL |     foo::<i64>(x_u16.into());\n@@ -343,8 +560,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^ expected `i64`, found `u8`\n+   |     ---------- ^^^^ expected `i64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `i64`\n    |\n LL |     foo::<i64>(x_u8.into());\n@@ -354,8 +578,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n    |\n LL |     foo::<i64>(x_isize);\n-   |                ^^^^^^^ expected `i64`, found `isize`\n+   |     ---------- ^^^^^^^ expected `i64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n@@ -365,8 +596,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:101:16\n    |\n LL |     foo::<i64>(x_i32);\n-   |                ^^^^^ expected `i64`, found `i32`\n+   |     ---------- ^^^^^ expected `i64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `i64`\n    |\n LL |     foo::<i64>(x_i32.into());\n@@ -376,8 +614,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:103:16\n    |\n LL |     foo::<i64>(x_i16);\n-   |                ^^^^^ expected `i64`, found `i16`\n+   |     ---------- ^^^^^ expected `i64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `i64`\n    |\n LL |     foo::<i64>(x_i16.into());\n@@ -387,8 +632,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:105:16\n    |\n LL |     foo::<i64>(x_i8);\n-   |                ^^^^ expected `i64`, found `i8`\n+   |     ---------- ^^^^ expected `i64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `i64`\n    |\n LL |     foo::<i64>(x_i8.into());\n@@ -398,8 +650,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:110:16\n    |\n LL |     foo::<u32>(x_usize);\n-   |                ^^^^^^^ expected `u32`, found `usize`\n+   |     ---------- ^^^^^^^ expected `u32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n@@ -409,8 +668,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:112:16\n    |\n LL |     foo::<u32>(x_u64);\n-   |                ^^^^^ expected `u32`, found `u64`\n+   |     ---------- ^^^^^ expected `u32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n@@ -420,8 +686,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:115:16\n    |\n LL |     foo::<u32>(x_u16);\n-   |                ^^^^^ expected `u32`, found `u16`\n+   |     ---------- ^^^^^ expected `u32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to a `u32`\n    |\n LL |     foo::<u32>(x_u16.into());\n@@ -431,8 +704,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:117:16\n    |\n LL |     foo::<u32>(x_u8);\n-   |                ^^^^ expected `u32`, found `u8`\n+   |     ---------- ^^^^ expected `u32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to a `u32`\n    |\n LL |     foo::<u32>(x_u8.into());\n@@ -442,8 +722,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:119:16\n    |\n LL |     foo::<u32>(x_isize);\n-   |                ^^^^^^^ expected `u32`, found `isize`\n+   |     ---------- ^^^^^^^ expected `u32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n@@ -453,8 +740,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:121:16\n    |\n LL |     foo::<u32>(x_i64);\n-   |                ^^^^^ expected `u32`, found `i64`\n+   |     ---------- ^^^^^ expected `u32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n@@ -464,8 +758,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:123:16\n    |\n LL |     foo::<u32>(x_i32);\n-   |                ^^^^^ expected `u32`, found `i32`\n+   |     ---------- ^^^^^ expected `u32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n@@ -475,8 +776,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:125:16\n    |\n LL |     foo::<u32>(x_i16);\n-   |                ^^^^^ expected `u32`, found `i16`\n+   |     ---------- ^^^^^ expected `u32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n@@ -486,8 +794,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:127:16\n    |\n LL |     foo::<u32>(x_i8);\n-   |                ^^^^ expected `u32`, found `i8`\n+   |     ---------- ^^^^ expected `u32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n@@ -497,8 +812,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:132:16\n    |\n LL |     foo::<i32>(x_usize);\n-   |                ^^^^^^^ expected `i32`, found `usize`\n+   |     ---------- ^^^^^^^ expected `i32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n@@ -508,8 +830,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:134:16\n    |\n LL |     foo::<i32>(x_u64);\n-   |                ^^^^^ expected `i32`, found `u64`\n+   |     ---------- ^^^^^ expected `i32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n@@ -519,8 +848,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:136:16\n    |\n LL |     foo::<i32>(x_u32);\n-   |                ^^^^^ expected `i32`, found `u32`\n+   |     ---------- ^^^^^ expected `i32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n@@ -530,8 +866,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^ expected `i32`, found `u16`\n+   |     ---------- ^^^^^ expected `i32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `i32`\n    |\n LL |     foo::<i32>(x_u16.into());\n@@ -541,8 +884,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^ expected `i32`, found `u8`\n+   |     ---------- ^^^^ expected `i32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `i32`\n    |\n LL |     foo::<i32>(x_u8.into());\n@@ -552,8 +902,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n    |\n LL |     foo::<i32>(x_isize);\n-   |                ^^^^^^^ expected `i32`, found `isize`\n+   |     ---------- ^^^^^^^ expected `i32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n@@ -563,8 +920,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:144:16\n    |\n LL |     foo::<i32>(x_i64);\n-   |                ^^^^^ expected `i32`, found `i64`\n+   |     ---------- ^^^^^ expected `i32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n@@ -574,8 +938,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:147:16\n    |\n LL |     foo::<i32>(x_i16);\n-   |                ^^^^^ expected `i32`, found `i16`\n+   |     ---------- ^^^^^ expected `i32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `i32`\n    |\n LL |     foo::<i32>(x_i16.into());\n@@ -585,8 +956,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:149:16\n    |\n LL |     foo::<i32>(x_i8);\n-   |                ^^^^ expected `i32`, found `i8`\n+   |     ---------- ^^^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `i32`\n    |\n LL |     foo::<i32>(x_i8.into());\n@@ -596,8 +974,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:154:16\n    |\n LL |     foo::<u16>(x_usize);\n-   |                ^^^^^^^ expected `u16`, found `usize`\n+   |     ---------- ^^^^^^^ expected `u16`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n@@ -607,8 +992,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:156:16\n    |\n LL |     foo::<u16>(x_u64);\n-   |                ^^^^^ expected `u16`, found `u64`\n+   |     ---------- ^^^^^ expected `u16`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n@@ -618,8 +1010,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:158:16\n    |\n LL |     foo::<u16>(x_u32);\n-   |                ^^^^^ expected `u16`, found `u32`\n+   |     ---------- ^^^^^ expected `u16`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n@@ -629,8 +1028,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:161:16\n    |\n LL |     foo::<u16>(x_u8);\n-   |                ^^^^ expected `u16`, found `u8`\n+   |     ---------- ^^^^ expected `u16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to a `u16`\n    |\n LL |     foo::<u16>(x_u8.into());\n@@ -640,8 +1046,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:163:16\n    |\n LL |     foo::<u16>(x_isize);\n-   |                ^^^^^^^ expected `u16`, found `isize`\n+   |     ---------- ^^^^^^^ expected `u16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n@@ -651,8 +1064,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:165:16\n    |\n LL |     foo::<u16>(x_i64);\n-   |                ^^^^^ expected `u16`, found `i64`\n+   |     ---------- ^^^^^ expected `u16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n@@ -662,8 +1082,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:167:16\n    |\n LL |     foo::<u16>(x_i32);\n-   |                ^^^^^ expected `u16`, found `i32`\n+   |     ---------- ^^^^^ expected `u16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n@@ -673,8 +1100,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:169:16\n    |\n LL |     foo::<u16>(x_i16);\n-   |                ^^^^^ expected `u16`, found `i16`\n+   |     ---------- ^^^^^ expected `u16`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n@@ -684,8 +1118,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:171:16\n    |\n LL |     foo::<u16>(x_i8);\n-   |                ^^^^ expected `u16`, found `i8`\n+   |     ---------- ^^^^ expected `u16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n@@ -695,8 +1136,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:176:16\n    |\n LL |     foo::<i16>(x_usize);\n-   |                ^^^^^^^ expected `i16`, found `usize`\n+   |     ---------- ^^^^^^^ expected `i16`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n@@ -706,8 +1154,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:178:16\n    |\n LL |     foo::<i16>(x_u64);\n-   |                ^^^^^ expected `i16`, found `u64`\n+   |     ---------- ^^^^^ expected `i16`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n@@ -717,8 +1172,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:180:16\n    |\n LL |     foo::<i16>(x_u32);\n-   |                ^^^^^ expected `i16`, found `u32`\n+   |     ---------- ^^^^^ expected `i16`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n@@ -728,8 +1190,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:182:16\n    |\n LL |     foo::<i16>(x_u16);\n-   |                ^^^^^ expected `i16`, found `u16`\n+   |     ---------- ^^^^^ expected `i16`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n@@ -739,8 +1208,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^ expected `i16`, found `u8`\n+   |     ---------- ^^^^ expected `i16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `i16`\n    |\n LL |     foo::<i16>(x_u8.into());\n@@ -750,8 +1226,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16\n    |\n LL |     foo::<i16>(x_isize);\n-   |                ^^^^^^^ expected `i16`, found `isize`\n+   |     ---------- ^^^^^^^ expected `i16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n@@ -761,8 +1244,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:188:16\n    |\n LL |     foo::<i16>(x_i64);\n-   |                ^^^^^ expected `i16`, found `i64`\n+   |     ---------- ^^^^^ expected `i16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n@@ -772,8 +1262,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:190:16\n    |\n LL |     foo::<i16>(x_i32);\n-   |                ^^^^^ expected `i16`, found `i32`\n+   |     ---------- ^^^^^ expected `i16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n@@ -783,8 +1280,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:193:16\n    |\n LL |     foo::<i16>(x_i8);\n-   |                ^^^^ expected `i16`, found `i8`\n+   |     ---------- ^^^^ expected `i16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `i16`\n    |\n LL |     foo::<i16>(x_i8.into());\n@@ -794,8 +1298,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:198:15\n    |\n LL |     foo::<u8>(x_usize);\n-   |               ^^^^^^^ expected `u8`, found `usize`\n+   |     --------- ^^^^^^^ expected `u8`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n@@ -805,8 +1316,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:200:15\n    |\n LL |     foo::<u8>(x_u64);\n-   |               ^^^^^ expected `u8`, found `u64`\n+   |     --------- ^^^^^ expected `u8`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n@@ -816,8 +1334,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:202:15\n    |\n LL |     foo::<u8>(x_u32);\n-   |               ^^^^^ expected `u8`, found `u32`\n+   |     --------- ^^^^^ expected `u8`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n@@ -827,8 +1352,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:204:15\n    |\n LL |     foo::<u8>(x_u16);\n-   |               ^^^^^ expected `u8`, found `u16`\n+   |     --------- ^^^^^ expected `u8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n@@ -838,8 +1370,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:207:15\n    |\n LL |     foo::<u8>(x_isize);\n-   |               ^^^^^^^ expected `u8`, found `isize`\n+   |     --------- ^^^^^^^ expected `u8`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n@@ -849,8 +1388,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:209:15\n    |\n LL |     foo::<u8>(x_i64);\n-   |               ^^^^^ expected `u8`, found `i64`\n+   |     --------- ^^^^^ expected `u8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n@@ -860,8 +1406,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:211:15\n    |\n LL |     foo::<u8>(x_i32);\n-   |               ^^^^^ expected `u8`, found `i32`\n+   |     --------- ^^^^^ expected `u8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n@@ -871,8 +1424,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:213:15\n    |\n LL |     foo::<u8>(x_i16);\n-   |               ^^^^^ expected `u8`, found `i16`\n+   |     --------- ^^^^^ expected `u8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n@@ -882,8 +1442,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:215:15\n    |\n LL |     foo::<u8>(x_i8);\n-   |               ^^^^ expected `u8`, found `i8`\n+   |     --------- ^^^^ expected `u8`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n@@ -893,8 +1460,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:220:15\n    |\n LL |     foo::<i8>(x_usize);\n-   |               ^^^^^^^ expected `i8`, found `usize`\n+   |     --------- ^^^^^^^ expected `i8`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n@@ -904,8 +1478,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:222:15\n    |\n LL |     foo::<i8>(x_u64);\n-   |               ^^^^^ expected `i8`, found `u64`\n+   |     --------- ^^^^^ expected `i8`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n@@ -915,8 +1496,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:224:15\n    |\n LL |     foo::<i8>(x_u32);\n-   |               ^^^^^ expected `i8`, found `u32`\n+   |     --------- ^^^^^ expected `i8`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n@@ -926,8 +1514,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:226:15\n    |\n LL |     foo::<i8>(x_u16);\n-   |               ^^^^^ expected `i8`, found `u16`\n+   |     --------- ^^^^^ expected `i8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n@@ -937,8 +1532,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:228:15\n    |\n LL |     foo::<i8>(x_u8);\n-   |               ^^^^ expected `i8`, found `u8`\n+   |     --------- ^^^^ expected `i8`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n@@ -948,8 +1550,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:230:15\n    |\n LL |     foo::<i8>(x_isize);\n-   |               ^^^^^^^ expected `i8`, found `isize`\n+   |     --------- ^^^^^^^ expected `i8`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n@@ -959,8 +1568,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:232:15\n    |\n LL |     foo::<i8>(x_i64);\n-   |               ^^^^^ expected `i8`, found `i64`\n+   |     --------- ^^^^^ expected `i8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n@@ -970,8 +1586,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:234:15\n    |\n LL |     foo::<i8>(x_i32);\n-   |               ^^^^^ expected `i8`, found `i32`\n+   |     --------- ^^^^^ expected `i8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n@@ -981,8 +1604,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:236:15\n    |\n LL |     foo::<i8>(x_i16);\n-   |               ^^^^^ expected `i8`, found `i16`\n+   |     --------- ^^^^^ expected `i8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n@@ -992,8 +1622,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:242:16\n    |\n LL |     foo::<f64>(x_usize);\n-   |                ^^^^^^^ expected `f64`, found `usize`\n+   |     ---------- ^^^^^^^ expected `f64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can cast a `usize` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_usize as f64);\n@@ -1003,8 +1640,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:244:16\n    |\n LL |     foo::<f64>(x_u64);\n-   |                ^^^^^ expected `f64`, found `u64`\n+   |     ---------- ^^^^^ expected `f64`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can cast a `u64` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_u64 as f64);\n@@ -1014,8 +1658,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:246:16\n    |\n LL |     foo::<f64>(x_u32);\n-   |                ^^^^^ expected `f64`, found `u32`\n+   |     ---------- ^^^^^ expected `f64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n@@ -1025,8 +1676,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:248:16\n    |\n LL |     foo::<f64>(x_u16);\n-   |                ^^^^^ expected `f64`, found `u16`\n+   |     ---------- ^^^^^ expected `f64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n@@ -1036,8 +1694,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:250:16\n    |\n LL |     foo::<f64>(x_u8);\n-   |                ^^^^ expected `f64`, found `u8`\n+   |     ---------- ^^^^ expected `f64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n@@ -1047,8 +1712,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:252:16\n    |\n LL |     foo::<f64>(x_isize);\n-   |                ^^^^^^^ expected `f64`, found `isize`\n+   |     ---------- ^^^^^^^ expected `f64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_isize as f64);\n@@ -1058,8 +1730,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:254:16\n    |\n LL |     foo::<f64>(x_i64);\n-   |                ^^^^^ expected `f64`, found `i64`\n+   |     ---------- ^^^^^ expected `f64`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_i64 as f64);\n@@ -1069,8 +1748,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:256:16\n    |\n LL |     foo::<f64>(x_i32);\n-   |                ^^^^^ expected `f64`, found `i32`\n+   |     ---------- ^^^^^ expected `f64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i32.into());\n@@ -1080,8 +1766,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:258:16\n    |\n LL |     foo::<f64>(x_i16);\n-   |                ^^^^^ expected `f64`, found `i16`\n+   |     ---------- ^^^^^ expected `f64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i16.into());\n@@ -1091,8 +1784,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:260:16\n    |\n LL |     foo::<f64>(x_i8);\n-   |                ^^^^ expected `f64`, found `i8`\n+   |     ---------- ^^^^ expected `f64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i8.into());\n@@ -1102,8 +1802,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:263:16\n    |\n LL |     foo::<f64>(x_f32);\n-   |                ^^^^^ expected `f64`, found `f32`\n+   |     ---------- ^^^^^ expected `f64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `f32` to an `f64`\n    |\n LL |     foo::<f64>(x_f32.into());\n@@ -1113,8 +1820,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:266:16\n    |\n LL |     foo::<f32>(x_usize);\n-   |                ^^^^^^^ expected `f32`, found `usize`\n+   |     ---------- ^^^^^^^ expected `f32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can cast a `usize` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_usize as f32);\n@@ -1124,8 +1838,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:268:16\n    |\n LL |     foo::<f32>(x_u64);\n-   |                ^^^^^ expected `f32`, found `u64`\n+   |     ---------- ^^^^^ expected `f32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can cast a `u64` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_u64 as f32);\n@@ -1135,8 +1856,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:270:16\n    |\n LL |     foo::<f32>(x_u32);\n-   |                ^^^^^ expected `f32`, found `u32`\n+   |     ---------- ^^^^^ expected `f32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can cast a `u32` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_u32 as f32);\n@@ -1146,8 +1874,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:272:16\n    |\n LL |     foo::<f32>(x_u16);\n-   |                ^^^^^ expected `f32`, found `u16`\n+   |     ---------- ^^^^^ expected `f32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n@@ -1157,8 +1892,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:274:16\n    |\n LL |     foo::<f32>(x_u8);\n-   |                ^^^^ expected `f32`, found `u8`\n+   |     ---------- ^^^^ expected `f32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n@@ -1168,8 +1910,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:276:16\n    |\n LL |     foo::<f32>(x_isize);\n-   |                ^^^^^^^ expected `f32`, found `isize`\n+   |     ---------- ^^^^^^^ expected `f32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `isize` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_isize as f32);\n@@ -1179,8 +1928,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:278:16\n    |\n LL |     foo::<f32>(x_i64);\n-   |                ^^^^^ expected `f32`, found `i64`\n+   |     ---------- ^^^^^ expected `f32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i64` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i64 as f32);\n@@ -1190,8 +1946,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:280:16\n    |\n LL |     foo::<f32>(x_i32);\n-   |                ^^^^^ expected `f32`, found `i32`\n+   |     ---------- ^^^^^ expected `f32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i32` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i32 as f32);\n@@ -1201,8 +1964,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:282:16\n    |\n LL |     foo::<f32>(x_i16);\n-   |                ^^^^^ expected `f32`, found `i16`\n+   |     ---------- ^^^^^ expected `f32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i16.into());\n@@ -1212,8 +1982,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:284:16\n    |\n LL |     foo::<f32>(x_i8);\n-   |                ^^^^ expected `f32`, found `i8`\n+   |     ---------- ^^^^ expected `f32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i8.into());\n@@ -1223,8 +2000,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:289:16\n    |\n LL |     foo::<u32>(x_u8 as u16);\n-   |                ^^^^^^^^^^^ expected `u32`, found `u16`\n+   |     ---------- ^^^^^^^^^^^ expected `u32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert a `u16` to a `u32`\n    |\n LL |     foo::<u32>((x_u8 as u16).into());\n@@ -1234,8 +2018,15 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:291:16\n    |\n LL |     foo::<i32>(-x_i8);\n-   |                ^^^^^ expected `i32`, found `i8`\n+   |     ---------- ^^^^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-cast.rs:6:4\n    |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n help: you can convert an `i8` to an `i32`\n    |\n LL |     foo::<i32>((-x_i8).into());"}, {"sha": "53c5fe0f435f9ea31bc6239a72358fe8e69964c1", "filename": "src/test/ui/numeric/numeric-suffix.fixed", "status": "removed", "additions": 0, "deletions": 298, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,298 +0,0 @@\n-// run-rustfix\n-\n-fn foo<N>(_x: N) {}\n-\n-fn main() {\n-    foo::<usize>(42_usize);\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42usize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42usize);\n-    //~^ ERROR mismatched types\n-\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42isize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42isize);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42u64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42u64);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42i64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42i64);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42u32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42u32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42i32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42i32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42u16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42u16);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    foo::<i16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42i16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42i16);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42u8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42u8);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    foo::<i8>(42i8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42i8);\n-    //~^ ERROR mismatched types\n-\n-    foo::<f64>(42_f64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_f64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u32.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u16.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u8.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_f64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_f64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i32.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i16.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i8.into());\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42.0_f64);\n-    foo::<f64>(42.0_f64);\n-    //~^ ERROR mismatched types\n-\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u16.into());\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u8.into());\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i16.into());\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i8.into());\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42.0_f32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42.0_f32);\n-\n-    foo::<u32>((42_u8 as u16).into());\n-    //~^ ERROR mismatched types\n-    foo::<i32>((-42_i8).into());\n-    //~^ ERROR mismatched types\n-}"}, {"sha": "ca38ed82220b24b228adb8405c897c23ae298717", "filename": "src/test/ui/numeric/numeric-suffix.rs", "status": "removed", "additions": 0, "deletions": 298, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,298 +0,0 @@\n-// run-rustfix\n-\n-fn foo<N>(_x: N) {}\n-\n-fn main() {\n-    foo::<usize>(42_usize);\n-    foo::<usize>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<isize>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_isize);\n-    foo::<isize>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u64>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u64);\n-    foo::<u64>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i64>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i64);\n-    foo::<i64>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u32>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u32);\n-    foo::<u32>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i32>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i32);\n-    foo::<i32>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u16>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_u16);\n-    foo::<u16>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i16>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42_i16);\n-    foo::<i16>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<u8>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_u8);\n-    foo::<u8>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<i8>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42_i8);\n-    foo::<i8>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<f64>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<f64>(42.0_f64);\n-    foo::<f64>(42.0_f32);\n-    //~^ ERROR mismatched types\n-\n-    foo::<f32>(42_usize);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u64);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u16);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_u8);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_isize);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i64);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i32);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i16);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42_i8);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42.0_f64);\n-    //~^ ERROR mismatched types\n-    foo::<f32>(42.0_f32);\n-\n-    foo::<u32>(42_u8 as u16);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(-42_i8);\n-    //~^ ERROR mismatched types\n-}"}, {"sha": "b829946e522260f3e076bb0329cf9567b9fc9b2e", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "removed", "additions": 0, "deletions": 1477, "changes": 1477, "blob_url": "https://github.com/rust-lang/rust/blob/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "patch": "@@ -1,1477 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:7:18\n-   |\n-LL |     foo::<usize>(42_u64);\n-   |                  ^^^^^^ expected `usize`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:9:18\n-   |\n-LL |     foo::<usize>(42_u32);\n-   |                  ^^^^^^ expected `usize`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:11:18\n-   |\n-LL |     foo::<usize>(42_u16);\n-   |                  ^^^^^^ expected `usize`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:13:18\n-   |\n-LL |     foo::<usize>(42_u8);\n-   |                  ^^^^^ expected `usize`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:15:18\n-   |\n-LL |     foo::<usize>(42_isize);\n-   |                  ^^^^^^^^ expected `usize`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:17:18\n-   |\n-LL |     foo::<usize>(42_i64);\n-   |                  ^^^^^^ expected `usize`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:19:18\n-   |\n-LL |     foo::<usize>(42_i32);\n-   |                  ^^^^^^ expected `usize`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:21:18\n-   |\n-LL |     foo::<usize>(42_i16);\n-   |                  ^^^^^^ expected `usize`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:23:18\n-   |\n-LL |     foo::<usize>(42_i8);\n-   |                  ^^^^^ expected `usize`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `usize`\n-   |\n-LL |     foo::<usize>(42_usize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:25:18\n-   |\n-LL |     foo::<usize>(42.0_f64);\n-   |                  ^^^^^^^^ expected `usize`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `usize`\n-   |\n-LL |     foo::<usize>(42usize);\n-   |                    ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:27:18\n-   |\n-LL |     foo::<usize>(42.0_f32);\n-   |                  ^^^^^^^^ expected `usize`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `usize`\n-   |\n-LL |     foo::<usize>(42usize);\n-   |                    ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:30:18\n-   |\n-LL |     foo::<isize>(42_usize);\n-   |                  ^^^^^^^^ expected `isize`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:32:18\n-   |\n-LL |     foo::<isize>(42_u64);\n-   |                  ^^^^^^ expected `isize`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:34:18\n-   |\n-LL |     foo::<isize>(42_u32);\n-   |                  ^^^^^^ expected `isize`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:36:18\n-   |\n-LL |     foo::<isize>(42_u16);\n-   |                  ^^^^^^ expected `isize`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:38:18\n-   |\n-LL |     foo::<isize>(42_u8);\n-   |                  ^^^^^ expected `isize`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:41:18\n-   |\n-LL |     foo::<isize>(42_i64);\n-   |                  ^^^^^^ expected `isize`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:43:18\n-   |\n-LL |     foo::<isize>(42_i32);\n-   |                  ^^^^^^ expected `isize`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:45:18\n-   |\n-LL |     foo::<isize>(42_i16);\n-   |                  ^^^^^^ expected `isize`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:47:18\n-   |\n-LL |     foo::<isize>(42_i8);\n-   |                  ^^^^^ expected `isize`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `isize`\n-   |\n-LL |     foo::<isize>(42_isize);\n-   |                     ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:49:18\n-   |\n-LL |     foo::<isize>(42.0_f64);\n-   |                  ^^^^^^^^ expected `isize`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `isize`\n-   |\n-LL |     foo::<isize>(42isize);\n-   |                    ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:51:18\n-   |\n-LL |     foo::<isize>(42.0_f32);\n-   |                  ^^^^^^^^ expected `isize`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `isize`\n-   |\n-LL |     foo::<isize>(42isize);\n-   |                    ~~~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:54:16\n-   |\n-LL |     foo::<u64>(42_usize);\n-   |                ^^^^^^^^ expected `u64`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:57:16\n-   |\n-LL |     foo::<u64>(42_u32);\n-   |                ^^^^^^ expected `u64`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:59:16\n-   |\n-LL |     foo::<u64>(42_u16);\n-   |                ^^^^^^ expected `u64`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:61:16\n-   |\n-LL |     foo::<u64>(42_u8);\n-   |                ^^^^^ expected `u64`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:63:16\n-   |\n-LL |     foo::<u64>(42_isize);\n-   |                ^^^^^^^^ expected `u64`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:65:16\n-   |\n-LL |     foo::<u64>(42_i64);\n-   |                ^^^^^^ expected `u64`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:67:16\n-   |\n-LL |     foo::<u64>(42_i32);\n-   |                ^^^^^^ expected `u64`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:69:16\n-   |\n-LL |     foo::<u64>(42_i16);\n-   |                ^^^^^^ expected `u64`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:71:16\n-   |\n-LL |     foo::<u64>(42_i8);\n-   |                ^^^^^ expected `u64`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `u64`\n-   |\n-LL |     foo::<u64>(42_u64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:73:16\n-   |\n-LL |     foo::<u64>(42.0_f64);\n-   |                ^^^^^^^^ expected `u64`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `u64`\n-   |\n-LL |     foo::<u64>(42u64);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:75:16\n-   |\n-LL |     foo::<u64>(42.0_f32);\n-   |                ^^^^^^^^ expected `u64`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `u64`\n-   |\n-LL |     foo::<u64>(42u64);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:78:16\n-   |\n-LL |     foo::<i64>(42_usize);\n-   |                ^^^^^^^^ expected `i64`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:80:16\n-   |\n-LL |     foo::<i64>(42_u64);\n-   |                ^^^^^^ expected `i64`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:82:16\n-   |\n-LL |     foo::<i64>(42_u32);\n-   |                ^^^^^^ expected `i64`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:84:16\n-   |\n-LL |     foo::<i64>(42_u16);\n-   |                ^^^^^^ expected `i64`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:86:16\n-   |\n-LL |     foo::<i64>(42_u8);\n-   |                ^^^^^ expected `i64`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:88:16\n-   |\n-LL |     foo::<i64>(42_isize);\n-   |                ^^^^^^^^ expected `i64`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:91:16\n-   |\n-LL |     foo::<i64>(42_i32);\n-   |                ^^^^^^ expected `i64`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:93:16\n-   |\n-LL |     foo::<i64>(42_i16);\n-   |                ^^^^^^ expected `i64`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:95:16\n-   |\n-LL |     foo::<i64>(42_i8);\n-   |                ^^^^^ expected `i64`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `i64`\n-   |\n-LL |     foo::<i64>(42_i64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:97:16\n-   |\n-LL |     foo::<i64>(42.0_f64);\n-   |                ^^^^^^^^ expected `i64`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `i64`\n-   |\n-LL |     foo::<i64>(42i64);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:99:16\n-   |\n-LL |     foo::<i64>(42.0_f32);\n-   |                ^^^^^^^^ expected `i64`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `i64`\n-   |\n-LL |     foo::<i64>(42i64);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:102:16\n-   |\n-LL |     foo::<u32>(42_usize);\n-   |                ^^^^^^^^ expected `u32`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:104:16\n-   |\n-LL |     foo::<u32>(42_u64);\n-   |                ^^^^^^ expected `u32`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:107:16\n-   |\n-LL |     foo::<u32>(42_u16);\n-   |                ^^^^^^ expected `u32`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:109:16\n-   |\n-LL |     foo::<u32>(42_u8);\n-   |                ^^^^^ expected `u32`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:111:16\n-   |\n-LL |     foo::<u32>(42_isize);\n-   |                ^^^^^^^^ expected `u32`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:113:16\n-   |\n-LL |     foo::<u32>(42_i64);\n-   |                ^^^^^^ expected `u32`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:115:16\n-   |\n-LL |     foo::<u32>(42_i32);\n-   |                ^^^^^^ expected `u32`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:117:16\n-   |\n-LL |     foo::<u32>(42_i16);\n-   |                ^^^^^^ expected `u32`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:119:16\n-   |\n-LL |     foo::<u32>(42_i8);\n-   |                ^^^^^ expected `u32`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `u32`\n-   |\n-LL |     foo::<u32>(42_u32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:121:16\n-   |\n-LL |     foo::<u32>(42.0_f64);\n-   |                ^^^^^^^^ expected `u32`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `u32`\n-   |\n-LL |     foo::<u32>(42u32);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:123:16\n-   |\n-LL |     foo::<u32>(42.0_f32);\n-   |                ^^^^^^^^ expected `u32`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `u32`\n-   |\n-LL |     foo::<u32>(42u32);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:126:16\n-   |\n-LL |     foo::<i32>(42_usize);\n-   |                ^^^^^^^^ expected `i32`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:128:16\n-   |\n-LL |     foo::<i32>(42_u64);\n-   |                ^^^^^^ expected `i32`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:130:16\n-   |\n-LL |     foo::<i32>(42_u32);\n-   |                ^^^^^^ expected `i32`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:132:16\n-   |\n-LL |     foo::<i32>(42_u16);\n-   |                ^^^^^^ expected `i32`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:134:16\n-   |\n-LL |     foo::<i32>(42_u8);\n-   |                ^^^^^ expected `i32`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:136:16\n-   |\n-LL |     foo::<i32>(42_isize);\n-   |                ^^^^^^^^ expected `i32`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:138:16\n-   |\n-LL |     foo::<i32>(42_i64);\n-   |                ^^^^^^ expected `i32`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:141:16\n-   |\n-LL |     foo::<i32>(42_i16);\n-   |                ^^^^^^ expected `i32`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:143:16\n-   |\n-LL |     foo::<i32>(42_i8);\n-   |                ^^^^^ expected `i32`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `i32`\n-   |\n-LL |     foo::<i32>(42_i32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:145:16\n-   |\n-LL |     foo::<i32>(42.0_f64);\n-   |                ^^^^^^^^ expected `i32`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `i32`\n-   |\n-LL |     foo::<i32>(42i32);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:147:16\n-   |\n-LL |     foo::<i32>(42.0_f32);\n-   |                ^^^^^^^^ expected `i32`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `i32`\n-   |\n-LL |     foo::<i32>(42i32);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:150:16\n-   |\n-LL |     foo::<u16>(42_usize);\n-   |                ^^^^^^^^ expected `u16`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:152:16\n-   |\n-LL |     foo::<u16>(42_u64);\n-   |                ^^^^^^ expected `u16`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:154:16\n-   |\n-LL |     foo::<u16>(42_u32);\n-   |                ^^^^^^ expected `u16`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:157:16\n-   |\n-LL |     foo::<u16>(42_u8);\n-   |                ^^^^^ expected `u16`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:159:16\n-   |\n-LL |     foo::<u16>(42_isize);\n-   |                ^^^^^^^^ expected `u16`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:161:16\n-   |\n-LL |     foo::<u16>(42_i64);\n-   |                ^^^^^^ expected `u16`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:163:16\n-   |\n-LL |     foo::<u16>(42_i32);\n-   |                ^^^^^^ expected `u16`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:165:16\n-   |\n-LL |     foo::<u16>(42_i16);\n-   |                ^^^^^^ expected `u16`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:167:16\n-   |\n-LL |     foo::<u16>(42_i8);\n-   |                ^^^^^ expected `u16`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `u16`\n-   |\n-LL |     foo::<u16>(42_u16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:169:16\n-   |\n-LL |     foo::<u16>(42.0_f64);\n-   |                ^^^^^^^^ expected `u16`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `u16`\n-   |\n-LL |     foo::<u16>(42u16);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:171:16\n-   |\n-LL |     foo::<u16>(42.0_f32);\n-   |                ^^^^^^^^ expected `u16`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `u16`\n-   |\n-LL |     foo::<u16>(42u16);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:174:16\n-   |\n-LL |     foo::<i16>(42_usize);\n-   |                ^^^^^^^^ expected `i16`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:176:16\n-   |\n-LL |     foo::<i16>(42_u64);\n-   |                ^^^^^^ expected `i16`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:178:16\n-   |\n-LL |     foo::<i16>(42_u32);\n-   |                ^^^^^^ expected `i16`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:180:16\n-   |\n-LL |     foo::<i16>(42_u16);\n-   |                ^^^^^^ expected `i16`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:182:16\n-   |\n-LL |     foo::<i16>(42_u8);\n-   |                ^^^^^ expected `i16`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:184:16\n-   |\n-LL |     foo::<i16>(42_isize);\n-   |                ^^^^^^^^ expected `i16`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:186:16\n-   |\n-LL |     foo::<i16>(42_i64);\n-   |                ^^^^^^ expected `i16`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:188:16\n-   |\n-LL |     foo::<i16>(42_i32);\n-   |                ^^^^^^ expected `i16`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:191:16\n-   |\n-LL |     foo::<i16>(42_i8);\n-   |                ^^^^^ expected `i16`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `i16`\n-   |\n-LL |     foo::<i16>(42_i16);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:193:16\n-   |\n-LL |     foo::<i16>(42.0_f64);\n-   |                ^^^^^^^^ expected `i16`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `i16`\n-   |\n-LL |     foo::<i16>(42i16);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:195:16\n-   |\n-LL |     foo::<i16>(42.0_f32);\n-   |                ^^^^^^^^ expected `i16`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `i16`\n-   |\n-LL |     foo::<i16>(42i16);\n-   |                  ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:198:15\n-   |\n-LL |     foo::<u8>(42_usize);\n-   |               ^^^^^^^^ expected `u8`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:200:15\n-   |\n-LL |     foo::<u8>(42_u64);\n-   |               ^^^^^^ expected `u8`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:202:15\n-   |\n-LL |     foo::<u8>(42_u32);\n-   |               ^^^^^^ expected `u8`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:204:15\n-   |\n-LL |     foo::<u8>(42_u16);\n-   |               ^^^^^^ expected `u8`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:207:15\n-   |\n-LL |     foo::<u8>(42_isize);\n-   |               ^^^^^^^^ expected `u8`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:209:15\n-   |\n-LL |     foo::<u8>(42_i64);\n-   |               ^^^^^^ expected `u8`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:211:15\n-   |\n-LL |     foo::<u8>(42_i32);\n-   |               ^^^^^^ expected `u8`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:213:15\n-   |\n-LL |     foo::<u8>(42_i16);\n-   |               ^^^^^^ expected `u8`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:215:15\n-   |\n-LL |     foo::<u8>(42_i8);\n-   |               ^^^^^ expected `u8`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `u8`\n-   |\n-LL |     foo::<u8>(42_u8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:217:15\n-   |\n-LL |     foo::<u8>(42.0_f64);\n-   |               ^^^^^^^^ expected `u8`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `u8`\n-   |\n-LL |     foo::<u8>(42u8);\n-   |                 ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:219:15\n-   |\n-LL |     foo::<u8>(42.0_f32);\n-   |               ^^^^^^^^ expected `u8`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `u8`\n-   |\n-LL |     foo::<u8>(42u8);\n-   |                 ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:222:15\n-   |\n-LL |     foo::<i8>(42_usize);\n-   |               ^^^^^^^^ expected `i8`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:224:15\n-   |\n-LL |     foo::<i8>(42_u64);\n-   |               ^^^^^^ expected `i8`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:226:15\n-   |\n-LL |     foo::<i8>(42_u32);\n-   |               ^^^^^^ expected `i8`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:228:15\n-   |\n-LL |     foo::<i8>(42_u16);\n-   |               ^^^^^^ expected `i8`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:230:15\n-   |\n-LL |     foo::<i8>(42_u8);\n-   |               ^^^^^ expected `i8`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:232:15\n-   |\n-LL |     foo::<i8>(42_isize);\n-   |               ^^^^^^^^ expected `i8`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:234:15\n-   |\n-LL |     foo::<i8>(42_i64);\n-   |               ^^^^^^ expected `i8`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:236:15\n-   |\n-LL |     foo::<i8>(42_i32);\n-   |               ^^^^^^ expected `i8`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:238:15\n-   |\n-LL |     foo::<i8>(42_i16);\n-   |               ^^^^^^ expected `i8`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `i8`\n-   |\n-LL |     foo::<i8>(42_i8);\n-   |                  ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:241:15\n-   |\n-LL |     foo::<i8>(42.0_f64);\n-   |               ^^^^^^^^ expected `i8`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `i8`\n-   |\n-LL |     foo::<i8>(42i8);\n-   |                 ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:243:15\n-   |\n-LL |     foo::<i8>(42.0_f32);\n-   |               ^^^^^^^^ expected `i8`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `i8`\n-   |\n-LL |     foo::<i8>(42i8);\n-   |                 ~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:246:16\n-   |\n-LL |     foo::<f64>(42_usize);\n-   |                ^^^^^^^^ expected `f64`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `f64`\n-   |\n-LL |     foo::<f64>(42_f64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:248:16\n-   |\n-LL |     foo::<f64>(42_u64);\n-   |                ^^^^^^ expected `f64`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `f64`\n-   |\n-LL |     foo::<f64>(42_f64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:250:16\n-   |\n-LL |     foo::<f64>(42_u32);\n-   |                ^^^^^^ expected `f64`, found `u32`\n-   |\n-help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_u32.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:252:16\n-   |\n-LL |     foo::<f64>(42_u16);\n-   |                ^^^^^^ expected `f64`, found `u16`\n-   |\n-help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_u16.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:254:16\n-   |\n-LL |     foo::<f64>(42_u8);\n-   |                ^^^^^ expected `f64`, found `u8`\n-   |\n-help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_u8.into());\n-   |                     +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:256:16\n-   |\n-LL |     foo::<f64>(42_isize);\n-   |                ^^^^^^^^ expected `f64`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `f64`\n-   |\n-LL |     foo::<f64>(42_f64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:258:16\n-   |\n-LL |     foo::<f64>(42_i64);\n-   |                ^^^^^^ expected `f64`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `f64`\n-   |\n-LL |     foo::<f64>(42_f64);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:260:16\n-   |\n-LL |     foo::<f64>(42_i32);\n-   |                ^^^^^^ expected `f64`, found `i32`\n-   |\n-help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_i32.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:262:16\n-   |\n-LL |     foo::<f64>(42_i16);\n-   |                ^^^^^^ expected `f64`, found `i16`\n-   |\n-help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_i16.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:264:16\n-   |\n-LL |     foo::<f64>(42_i8);\n-   |                ^^^^^ expected `f64`, found `i8`\n-   |\n-help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f64>(42_i8.into());\n-   |                     +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:267:16\n-   |\n-LL |     foo::<f64>(42.0_f32);\n-   |                ^^^^^^^^ expected `f64`, found `f32`\n-   |\n-help: change the type of the numeric literal from `f32` to `f64`\n-   |\n-LL |     foo::<f64>(42.0_f64);\n-   |                     ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:270:16\n-   |\n-LL |     foo::<f32>(42_usize);\n-   |                ^^^^^^^^ expected `f32`, found `usize`\n-   |\n-help: change the type of the numeric literal from `usize` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:272:16\n-   |\n-LL |     foo::<f32>(42_u64);\n-   |                ^^^^^^ expected `f32`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:274:16\n-   |\n-LL |     foo::<f32>(42_u32);\n-   |                ^^^^^^ expected `f32`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:276:16\n-   |\n-LL |     foo::<f32>(42_u16);\n-   |                ^^^^^^ expected `f32`, found `u16`\n-   |\n-help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f32>(42_u16.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:278:16\n-   |\n-LL |     foo::<f32>(42_u8);\n-   |                ^^^^^ expected `f32`, found `u8`\n-   |\n-help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f32>(42_u8.into());\n-   |                     +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:280:16\n-   |\n-LL |     foo::<f32>(42_isize);\n-   |                ^^^^^^^^ expected `f32`, found `isize`\n-   |\n-help: change the type of the numeric literal from `isize` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:282:16\n-   |\n-LL |     foo::<f32>(42_i64);\n-   |                ^^^^^^ expected `f32`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:284:16\n-   |\n-LL |     foo::<f32>(42_i32);\n-   |                ^^^^^^ expected `f32`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `f32`\n-   |\n-LL |     foo::<f32>(42_f32);\n-   |                   ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:286:16\n-   |\n-LL |     foo::<f32>(42_i16);\n-   |                ^^^^^^ expected `f32`, found `i16`\n-   |\n-help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f32>(42_i16.into());\n-   |                      +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:288:16\n-   |\n-LL |     foo::<f32>(42_i8);\n-   |                ^^^^^ expected `f32`, found `i8`\n-   |\n-help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n-   |\n-LL |     foo::<f32>(42_i8.into());\n-   |                     +++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:290:16\n-   |\n-LL |     foo::<f32>(42.0_f64);\n-   |                ^^^^^^^^ expected `f32`, found `f64`\n-   |\n-help: change the type of the numeric literal from `f64` to `f32`\n-   |\n-LL |     foo::<f32>(42.0_f32);\n-   |                     ~~~\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:294:16\n-   |\n-LL |     foo::<u32>(42_u8 as u16);\n-   |                ^^^^^^^^^^^^ expected `u32`, found `u16`\n-   |\n-help: you can convert a `u16` to a `u32`\n-   |\n-LL |     foo::<u32>((42_u8 as u16).into());\n-   |                +            ++++++++\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-suffix.rs:296:16\n-   |\n-LL |     foo::<i32>(-42_i8);\n-   |                ^^^^^^ expected `i32`, found `i8`\n-   |\n-help: you can convert an `i8` to an `i32`\n-   |\n-LL |     foo::<i32>((-42_i8).into());\n-   |                +      ++++++++\n-\n-error: aborting due to 134 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "6e8c54df4b6073c37335c0d430c5ded41433c20a", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i32.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "b47b0ed02e7c860a63842f7f45a22e4eb46cd914", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i32.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<i32>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i32);\n+    foo::<i32>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "f4fb14e79923c6d045639ea75ab5e81e11414b2d", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i32.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i32.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:28:16\n+   |\n+LL |     foo::<i32>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `i32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:32:16\n+   |\n+LL |     foo::<i32>(42_u64);\n+   |     ---------- ^^^^^^ expected `i32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:36:16\n+   |\n+LL |     foo::<i32>(42_u32);\n+   |     ---------- ^^^^^^ expected `i32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:40:16\n+   |\n+LL |     foo::<i32>(42_u16);\n+   |     ---------- ^^^^^^ expected `i32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:44:16\n+   |\n+LL |     foo::<i32>(42_u8);\n+   |     ---------- ^^^^^ expected `i32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:48:16\n+   |\n+LL |     foo::<i32>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `i32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:52:16\n+   |\n+LL |     foo::<i32>(42_i64);\n+   |     ---------- ^^^^^^ expected `i32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:57:16\n+   |\n+LL |     foo::<i32>(42_i16);\n+   |     ---------- ^^^^^^ expected `i32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:61:16\n+   |\n+LL |     foo::<i32>(42_i8);\n+   |     ---------- ^^^^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:65:16\n+   |\n+LL |     foo::<i32>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `i32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `i32`\n+   |\n+LL |     foo::<i32>(42i32);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i32.rs:69:16\n+   |\n+LL |     foo::<i32>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `i32`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `i32`\n+   |\n+LL |     foo::<i32>(42i32);\n+   |                  ~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "03821cd447057285bbf0674563794858a0c31a60", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i64.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "629fe7e742c3eb3f751b2f4fb6f6016852d0b98b", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i64.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<i64>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i64);\n+    foo::<i64>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "47efe9f08bbd27c6cf903cf0b22453433e7e931e", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-i64.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-i64.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:28:16\n+   |\n+LL |     foo::<i64>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `i64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:32:16\n+   |\n+LL |     foo::<i64>(42_u64);\n+   |     ---------- ^^^^^^ expected `i64`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:36:16\n+   |\n+LL |     foo::<i64>(42_u32);\n+   |     ---------- ^^^^^^ expected `i64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:40:16\n+   |\n+LL |     foo::<i64>(42_u16);\n+   |     ---------- ^^^^^^ expected `i64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:44:16\n+   |\n+LL |     foo::<i64>(42_u8);\n+   |     ---------- ^^^^^ expected `i64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:48:16\n+   |\n+LL |     foo::<i64>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `i64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:53:16\n+   |\n+LL |     foo::<i64>(42_i32);\n+   |     ---------- ^^^^^^ expected `i64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:57:16\n+   |\n+LL |     foo::<i64>(42_i16);\n+   |     ---------- ^^^^^^ expected `i64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:61:16\n+   |\n+LL |     foo::<i64>(42_i8);\n+   |     ---------- ^^^^^ expected `i64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:65:16\n+   |\n+LL |     foo::<i64>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `i64`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `i64`\n+   |\n+LL |     foo::<i64>(42i64);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-i64.rs:69:16\n+   |\n+LL |     foo::<i64>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `i64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-i64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `i64`\n+   |\n+LL |     foo::<i64>(42i64);\n+   |                  ~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "faed65ca410ed22c2b8f68bf1cd2abd83aa8d193", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-isize.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "df0b4cb620435adc6ae36240fb3e4b97e576948b", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-isize.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<isize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_isize);\n+    foo::<isize>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<isize>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "28b79413f68d000a26e143afd4c8f2c03f86bd02", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-isize.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-isize.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:28:18\n+   |\n+LL |     foo::<isize>(42_usize);\n+   |     ------------ ^^^^^^^^ expected `isize`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:32:18\n+   |\n+LL |     foo::<isize>(42_u64);\n+   |     ------------ ^^^^^^ expected `isize`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:36:18\n+   |\n+LL |     foo::<isize>(42_u32);\n+   |     ------------ ^^^^^^ expected `isize`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:40:18\n+   |\n+LL |     foo::<isize>(42_u16);\n+   |     ------------ ^^^^^^ expected `isize`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:44:18\n+   |\n+LL |     foo::<isize>(42_u8);\n+   |     ------------ ^^^^^ expected `isize`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:49:18\n+   |\n+LL |     foo::<isize>(42_i64);\n+   |     ------------ ^^^^^^ expected `isize`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:53:18\n+   |\n+LL |     foo::<isize>(42_i32);\n+   |     ------------ ^^^^^^ expected `isize`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:57:18\n+   |\n+LL |     foo::<isize>(42_i16);\n+   |     ------------ ^^^^^^ expected `isize`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:61:18\n+   |\n+LL |     foo::<isize>(42_i8);\n+   |     ------------ ^^^^^ expected `isize`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:65:18\n+   |\n+LL |     foo::<isize>(42.0_f64);\n+   |     ------------ ^^^^^^^^ expected `isize`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `isize`\n+   |\n+LL |     foo::<isize>(42isize);\n+   |                    ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-isize.rs:69:18\n+   |\n+LL |     foo::<isize>(42.0_f32);\n+   |     ------------ ^^^^^^^^ expected `isize`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-isize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `isize`\n+   |\n+LL |     foo::<isize>(42isize);\n+   |                    ~~~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5955829e72c2c80e1dfde4172c43140990f1e5e1", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u32.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "5c303036a79b83ca54d4c52e019fc101d632c289", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u32.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<u32>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u32);\n+    foo::<u32>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "d966893a83b48f1cde2abc42e6f8d492b553e67c", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u32.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u32.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:28:16\n+   |\n+LL |     foo::<u32>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `u32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:32:16\n+   |\n+LL |     foo::<u32>(42_u64);\n+   |     ---------- ^^^^^^ expected `u32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:37:16\n+   |\n+LL |     foo::<u32>(42_u16);\n+   |     ---------- ^^^^^^ expected `u32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:41:16\n+   |\n+LL |     foo::<u32>(42_u8);\n+   |     ---------- ^^^^^ expected `u32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:45:16\n+   |\n+LL |     foo::<u32>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `u32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:49:16\n+   |\n+LL |     foo::<u32>(42_i64);\n+   |     ---------- ^^^^^^ expected `u32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:53:16\n+   |\n+LL |     foo::<u32>(42_i32);\n+   |     ---------- ^^^^^^ expected `u32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:57:16\n+   |\n+LL |     foo::<u32>(42_i16);\n+   |     ---------- ^^^^^^ expected `u32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:61:16\n+   |\n+LL |     foo::<u32>(42_i8);\n+   |     ---------- ^^^^^ expected `u32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:65:16\n+   |\n+LL |     foo::<u32>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `u32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `u32`\n+   |\n+LL |     foo::<u32>(42u32);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u32.rs:69:16\n+   |\n+LL |     foo::<u32>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `u32`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u32.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `u32`\n+   |\n+LL |     foo::<u32>(42u32);\n+   |                  ~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4623c211c1c0bbd2624c57d1761592b78493ec66", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u64.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "3e9995c7496ac0590c59d5ecfd814d748e340897", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u64.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<u64>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u64);\n+    foo::<u64>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "ff332fa914dd08c79131651fd8738ddcf8a0451d", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-u64.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-u64.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:28:16\n+   |\n+LL |     foo::<u64>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `u64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:33:16\n+   |\n+LL |     foo::<u64>(42_u32);\n+   |     ---------- ^^^^^^ expected `u64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:37:16\n+   |\n+LL |     foo::<u64>(42_u16);\n+   |     ---------- ^^^^^^ expected `u64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:41:16\n+   |\n+LL |     foo::<u64>(42_u8);\n+   |     ---------- ^^^^^ expected `u64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:45:16\n+   |\n+LL |     foo::<u64>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `u64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:49:16\n+   |\n+LL |     foo::<u64>(42_i64);\n+   |     ---------- ^^^^^^ expected `u64`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:53:16\n+   |\n+LL |     foo::<u64>(42_i32);\n+   |     ---------- ^^^^^^ expected `u64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:57:16\n+   |\n+LL |     foo::<u64>(42_i16);\n+   |     ---------- ^^^^^^ expected `u64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:61:16\n+   |\n+LL |     foo::<u64>(42_i8);\n+   |     ---------- ^^^^^ expected `u64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:65:16\n+   |\n+LL |     foo::<u64>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `u64`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `u64`\n+   |\n+LL |     foo::<u64>(42u64);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-u64.rs:69:16\n+   |\n+LL |     foo::<u64>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `u64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-u64.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `u64`\n+   |\n+LL |     foo::<u64>(42u64);\n+   |                  ~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6cb5243ca84dc2cf73e98dd6cdc7bee6198eb2d4", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-usize.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<usize>(42_usize);\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "a2304ba26c68a81c8f4ae14e0120e3b5c45be14e", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-usize.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+fn main() {\n+    foo::<usize>(42_usize);\n+    foo::<usize>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<usize>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "4889abee69c2ac326ddc4f65f543be1eb5e52b06", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix-usize.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix-usize.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,201 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:29:18\n+   |\n+LL |     foo::<usize>(42_u64);\n+   |     ------------ ^^^^^^ expected `usize`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:33:18\n+   |\n+LL |     foo::<usize>(42_u32);\n+   |     ------------ ^^^^^^ expected `usize`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:37:18\n+   |\n+LL |     foo::<usize>(42_u16);\n+   |     ------------ ^^^^^^ expected `usize`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:41:18\n+   |\n+LL |     foo::<usize>(42_u8);\n+   |     ------------ ^^^^^ expected `usize`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:45:18\n+   |\n+LL |     foo::<usize>(42_isize);\n+   |     ------------ ^^^^^^^^ expected `usize`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:49:18\n+   |\n+LL |     foo::<usize>(42_i64);\n+   |     ------------ ^^^^^^ expected `usize`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:53:18\n+   |\n+LL |     foo::<usize>(42_i32);\n+   |     ------------ ^^^^^^ expected `usize`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:57:18\n+   |\n+LL |     foo::<usize>(42_i16);\n+   |     ------------ ^^^^^^ expected `usize`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:61:18\n+   |\n+LL |     foo::<usize>(42_i8);\n+   |     ------------ ^^^^^ expected `usize`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                     ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:65:18\n+   |\n+LL |     foo::<usize>(42.0_f64);\n+   |     ------------ ^^^^^^^^ expected `usize`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `usize`\n+   |\n+LL |     foo::<usize>(42usize);\n+   |                    ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix-usize.rs:69:18\n+   |\n+LL |     foo::<usize>(42.0_f32);\n+   |     ------------ ^^^^^^^^ expected `usize`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix-usize.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `usize`\n+   |\n+LL |     foo::<usize>(42usize);\n+   |                    ~~~~~\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "69934db217b62a1f17a7b46e3bd14f445197ac38", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix.fixed", "status": "added", "additions": 427, "deletions": 0, "changes": 427, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.fixed?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,427 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+\n+fn main() {\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    foo::<i8>(42i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u32.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u16.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u8.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i32.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i16.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i8.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42.0_f64);\n+    foo::<f64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u16.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u8.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i16.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i8.into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42.0_f32);\n+\n+    foo::<u32>((42_u8 as u16).into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>((-42_i8).into());\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "dabf43f82046f8a18d104dd14a3dc761bedca681", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix.rs", "status": "added", "additions": 427, "deletions": 0, "changes": 427, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,427 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+//~^ NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE function defined here\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+//~| NOTE\n+\n+\n+fn main() {\n+    foo::<u16>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_u16);\n+    foo::<u16>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u16>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<i16>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42_i16);\n+    foo::<i16>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i16>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<u8>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_u8);\n+    foo::<u8>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<u8>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<i8>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42_i8);\n+    foo::<i8>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i8>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<f64>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f64>(42.0_f64);\n+    foo::<f64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+\n+    foo::<f32>(42_usize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_u8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_isize);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i32);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<f32>(42.0_f32);\n+\n+    foo::<u32>(42_u8 as u16);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+    foo::<i32>(-42_i8);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected\n+    //~| NOTE arguments\n+}"}, {"sha": "e05913b9c621c7dde79146374e50bd7dbb4663d6", "filename": "src/test/ui/numeric/numeric-suffix/numeric-suffix.stderr", "status": "added", "additions": 1227, "deletions": 0, "changes": 1227, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix%2Fnumeric-suffix.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,1227 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:143:16\n+   |\n+LL |     foo::<u16>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `u16`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:147:16\n+   |\n+LL |     foo::<u16>(42_u64);\n+   |     ---------- ^^^^^^ expected `u16`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:151:16\n+   |\n+LL |     foo::<u16>(42_u32);\n+   |     ---------- ^^^^^^ expected `u16`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:156:16\n+   |\n+LL |     foo::<u16>(42_u8);\n+   |     ---------- ^^^^^ expected `u16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:160:16\n+   |\n+LL |     foo::<u16>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `u16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:164:16\n+   |\n+LL |     foo::<u16>(42_i64);\n+   |     ---------- ^^^^^^ expected `u16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:168:16\n+   |\n+LL |     foo::<u16>(42_i32);\n+   |     ---------- ^^^^^^ expected `u16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:172:16\n+   |\n+LL |     foo::<u16>(42_i16);\n+   |     ---------- ^^^^^^ expected `u16`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:176:16\n+   |\n+LL |     foo::<u16>(42_i8);\n+   |     ---------- ^^^^^ expected `u16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:180:16\n+   |\n+LL |     foo::<u16>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `u16`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `u16`\n+   |\n+LL |     foo::<u16>(42u16);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:184:16\n+   |\n+LL |     foo::<u16>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `u16`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `u16`\n+   |\n+LL |     foo::<u16>(42u16);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:189:16\n+   |\n+LL |     foo::<i16>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `i16`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:193:16\n+   |\n+LL |     foo::<i16>(42_u64);\n+   |     ---------- ^^^^^^ expected `i16`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:197:16\n+   |\n+LL |     foo::<i16>(42_u32);\n+   |     ---------- ^^^^^^ expected `i16`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:201:16\n+   |\n+LL |     foo::<i16>(42_u16);\n+   |     ---------- ^^^^^^ expected `i16`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:205:16\n+   |\n+LL |     foo::<i16>(42_u8);\n+   |     ---------- ^^^^^ expected `i16`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:209:16\n+   |\n+LL |     foo::<i16>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `i16`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:213:16\n+   |\n+LL |     foo::<i16>(42_i64);\n+   |     ---------- ^^^^^^ expected `i16`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:217:16\n+   |\n+LL |     foo::<i16>(42_i32);\n+   |     ---------- ^^^^^^ expected `i16`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:222:16\n+   |\n+LL |     foo::<i16>(42_i8);\n+   |     ---------- ^^^^^ expected `i16`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:226:16\n+   |\n+LL |     foo::<i16>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `i16`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `i16`\n+   |\n+LL |     foo::<i16>(42i16);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:230:16\n+   |\n+LL |     foo::<i16>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `i16`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `i16`\n+   |\n+LL |     foo::<i16>(42i16);\n+   |                  ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:235:15\n+   |\n+LL |     foo::<u8>(42_usize);\n+   |     --------- ^^^^^^^^ expected `u8`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:239:15\n+   |\n+LL |     foo::<u8>(42_u64);\n+   |     --------- ^^^^^^ expected `u8`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:243:15\n+   |\n+LL |     foo::<u8>(42_u32);\n+   |     --------- ^^^^^^ expected `u8`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:247:15\n+   |\n+LL |     foo::<u8>(42_u16);\n+   |     --------- ^^^^^^ expected `u8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:252:15\n+   |\n+LL |     foo::<u8>(42_isize);\n+   |     --------- ^^^^^^^^ expected `u8`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:256:15\n+   |\n+LL |     foo::<u8>(42_i64);\n+   |     --------- ^^^^^^ expected `u8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:260:15\n+   |\n+LL |     foo::<u8>(42_i32);\n+   |     --------- ^^^^^^ expected `u8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:264:15\n+   |\n+LL |     foo::<u8>(42_i16);\n+   |     --------- ^^^^^^ expected `u8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:268:15\n+   |\n+LL |     foo::<u8>(42_i8);\n+   |     --------- ^^^^^ expected `u8`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i8` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:272:15\n+   |\n+LL |     foo::<u8>(42.0_f64);\n+   |     --------- ^^^^^^^^ expected `u8`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `u8`\n+   |\n+LL |     foo::<u8>(42u8);\n+   |                 ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:276:15\n+   |\n+LL |     foo::<u8>(42.0_f32);\n+   |     --------- ^^^^^^^^ expected `u8`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `u8`\n+   |\n+LL |     foo::<u8>(42u8);\n+   |                 ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:281:15\n+   |\n+LL |     foo::<i8>(42_usize);\n+   |     --------- ^^^^^^^^ expected `i8`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:285:15\n+   |\n+LL |     foo::<i8>(42_u64);\n+   |     --------- ^^^^^^ expected `i8`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:289:15\n+   |\n+LL |     foo::<i8>(42_u32);\n+   |     --------- ^^^^^^ expected `i8`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:293:15\n+   |\n+LL |     foo::<i8>(42_u16);\n+   |     --------- ^^^^^^ expected `i8`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u16` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:297:15\n+   |\n+LL |     foo::<i8>(42_u8);\n+   |     --------- ^^^^^ expected `i8`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u8` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:301:15\n+   |\n+LL |     foo::<i8>(42_isize);\n+   |     --------- ^^^^^^^^ expected `i8`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:305:15\n+   |\n+LL |     foo::<i8>(42_i64);\n+   |     --------- ^^^^^^ expected `i8`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:309:15\n+   |\n+LL |     foo::<i8>(42_i32);\n+   |     --------- ^^^^^^ expected `i8`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:313:15\n+   |\n+LL |     foo::<i8>(42_i16);\n+   |     --------- ^^^^^^ expected `i8`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i16` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |                  ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:318:15\n+   |\n+LL |     foo::<i8>(42.0_f64);\n+   |     --------- ^^^^^^^^ expected `i8`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `i8`\n+   |\n+LL |     foo::<i8>(42i8);\n+   |                 ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:322:15\n+   |\n+LL |     foo::<i8>(42.0_f32);\n+   |     --------- ^^^^^^^^ expected `i8`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `i8`\n+   |\n+LL |     foo::<i8>(42i8);\n+   |                 ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:327:16\n+   |\n+LL |     foo::<f64>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `f64`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:331:16\n+   |\n+LL |     foo::<f64>(42_u64);\n+   |     ---------- ^^^^^^ expected `f64`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:335:16\n+   |\n+LL |     foo::<f64>(42_u32);\n+   |     ---------- ^^^^^^ expected `f64`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u32.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:339:16\n+   |\n+LL |     foo::<f64>(42_u16);\n+   |     ---------- ^^^^^^ expected `f64`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u16.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:343:16\n+   |\n+LL |     foo::<f64>(42_u8);\n+   |     ---------- ^^^^^ expected `f64`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u8.into());\n+   |                     +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:347:16\n+   |\n+LL |     foo::<f64>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `f64`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:351:16\n+   |\n+LL |     foo::<f64>(42_i64);\n+   |     ---------- ^^^^^^ expected `f64`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:355:16\n+   |\n+LL |     foo::<f64>(42_i32);\n+   |     ---------- ^^^^^^ expected `f64`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i32.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:359:16\n+   |\n+LL |     foo::<f64>(42_i16);\n+   |     ---------- ^^^^^^ expected `f64`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i16.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:363:16\n+   |\n+LL |     foo::<f64>(42_i8);\n+   |     ---------- ^^^^^ expected `f64`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i8.into());\n+   |                     +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:368:16\n+   |\n+LL |     foo::<f64>(42.0_f32);\n+   |     ---------- ^^^^^^^^ expected `f64`, found `f32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f32` to `f64`\n+   |\n+LL |     foo::<f64>(42.0_f64);\n+   |                     ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:373:16\n+   |\n+LL |     foo::<f32>(42_usize);\n+   |     ---------- ^^^^^^^^ expected `f32`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `usize` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:377:16\n+   |\n+LL |     foo::<f32>(42_u64);\n+   |     ---------- ^^^^^^ expected `f32`, found `u64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u64` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:381:16\n+   |\n+LL |     foo::<f32>(42_u32);\n+   |     ---------- ^^^^^^ expected `f32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `u32` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:385:16\n+   |\n+LL |     foo::<f32>(42_u16);\n+   |     ---------- ^^^^^^ expected `f32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_u16.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:389:16\n+   |\n+LL |     foo::<f32>(42_u8);\n+   |     ---------- ^^^^^ expected `f32`, found `u8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_u8.into());\n+   |                     +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:393:16\n+   |\n+LL |     foo::<f32>(42_isize);\n+   |     ---------- ^^^^^^^^ expected `f32`, found `isize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `isize` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:397:16\n+   |\n+LL |     foo::<f32>(42_i64);\n+   |     ---------- ^^^^^^ expected `f32`, found `i64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i64` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:401:16\n+   |\n+LL |     foo::<f32>(42_i32);\n+   |     ---------- ^^^^^^ expected `f32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `i32` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:405:16\n+   |\n+LL |     foo::<f32>(42_i16);\n+   |     ---------- ^^^^^^ expected `f32`, found `i16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_i16.into());\n+   |                      +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:409:16\n+   |\n+LL |     foo::<f32>(42_i8);\n+   |     ---------- ^^^^^ expected `f32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_i8.into());\n+   |                     +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:413:16\n+   |\n+LL |     foo::<f32>(42.0_f64);\n+   |     ---------- ^^^^^^^^ expected `f32`, found `f64`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: change the type of the numeric literal from `f64` to `f32`\n+   |\n+LL |     foo::<f32>(42.0_f32);\n+   |                     ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:419:16\n+   |\n+LL |     foo::<u32>(42_u8 as u16);\n+   |     ---------- ^^^^^^^^^^^^ expected `u32`, found `u16`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |     foo::<u32>((42_u8 as u16).into());\n+   |                +            ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:423:16\n+   |\n+LL |     foo::<i32>(-42_i8);\n+   |     ---------- ^^^^^^ expected `i32`, found `i8`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/numeric-suffix.rs:3:4\n+   |\n+LL | fn foo<N>(_x: N) {}\n+   |    ^^^    -----\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     foo::<i32>((-42_i8).into());\n+   |                +      ++++++++\n+\n+error: aborting due to 68 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "21d753ad037253c09ba0fc1176bc643a1cd6b619", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,26 +1,30 @@\n-pub fn f(\n+pub fn f( //~ NOTE function defined here\n     /// Comment\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n+    //~| NOTE\n     id: u8,\n     /// Other\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n+    //~| NOTE\n     a: u8,\n ) {}\n \n fn bar(id: #[allow(dead_code)] i32) {}\n //~^ ERROR attributes cannot be applied to a function parameter's type\n //~| NOTE attributes are not allowed here\n+//~| NOTE function defined here\n+//~| NOTE\n \n fn main() {\n     // verify that the parser recovered and properly typechecked the args\n     f(\"\", \"\");\n-    //~^ ERROR mismatched types\n+    //~^ ERROR arguments to this function are incorrect\n     //~| NOTE expected `u8`, found `&str`\n-    //~| ERROR mismatched types\n     //~| NOTE expected `u8`, found `&str`\n     bar(\"\");\n     //~^ ERROR mismatched types\n+    //~| NOTE arguments to this function are incorrect\n     //~| NOTE expected `i32`, found `&str`\n }"}, {"sha": "c8d7e2efe799d5c876f76ebbed08e36c12239781", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -1,5 +1,5 @@\n error: attributes cannot be applied to a function parameter's type\n-  --> $DIR/fn-arg-doc-comment.rs:12:12\n+  --> $DIR/fn-arg-doc-comment.rs:14:12\n    |\n LL | fn bar(id: #[allow(dead_code)] i32) {}\n    |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n@@ -11,29 +11,51 @@ LL |     /// Comment\n    |     ^^^^^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/fn-arg-doc-comment.rs:6:5\n+  --> $DIR/fn-arg-doc-comment.rs:7:5\n    |\n LL |     /// Other\n    |     ^^^^^^^^^ doc comments are not allowed here\n \n-error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:18:7\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/fn-arg-doc-comment.rs:22:5\n    |\n LL |     f(\"\", \"\");\n-   |       ^^ expected `u8`, found `&str`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:18:11\n+   |     ^ --  -- expected `u8`, found `&str`\n+   |       |\n+   |       expected `u8`, found `&str`\n    |\n-LL |     f(\"\", \"\");\n-   |           ^^ expected `u8`, found `&str`\n+note: function defined here\n+  --> $DIR/fn-arg-doc-comment.rs:1:8\n+   |\n+LL |   pub fn f(\n+   |          ^\n+LL | /     /// Comment\n+LL | |\n+LL | |\n+LL | |\n+LL | |     id: u8,\n+   | |__________-\n+LL | /     /// Other\n+LL | |\n+LL | |\n+LL | |\n+LL | |     a: u8,\n+   | |_________-\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:23:9\n+  --> $DIR/fn-arg-doc-comment.rs:26:9\n    |\n LL |     bar(\"\");\n-   |         ^^ expected `i32`, found `&str`\n+   |     --- ^^ expected `i32`, found `&str`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/fn-arg-doc-comment.rs:14:4\n+   |\n+LL | fn bar(id: #[allow(dead_code)] i32) {}\n+   |    ^^^ ---------------------------\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "4c2eff63ab5e839b277ef317b3b7a31b0c138ba7", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -46,7 +46,15 @@ error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:28:7\n    |\n LL |     f(true);\n-   |       ^^^^ expected `char`, found `bool`\n+   |     - ^^^^ expected `char`, found `bool`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/pattern-error-continue.rs:13:4\n+   |\n+LL | fn f(_c: char) {}\n+   |    ^ --------\n \n error: aborting due to 5 previous errors\n "}, {"sha": "262a64acc544c20e60b22e1af0e493f7cd8e560a", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -9,6 +9,11 @@ LL | | }\n    |\n    = note: expected fn pointer `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n                  found fn item `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+note: associated function defined here\n+  --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n+   |\n+LL |     pub const fn custom_derive(\n+   |                  ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4cbf8869d0c59b4723857e55a21c45fd4adbbb96", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 120, "deletions": 48, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,145 +2,217 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:16:16\n    |\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `std::ops::Range`\n-   |                help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `std::ops::Range<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:21:16\n    |\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `std::ops::Range`\n-   |                help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `std::ops::Range<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:26:16\n    |\n LL |     take_range(std::ops::RangeFrom { start: 1 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeFrom`\n-   |                help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFrom`\n+   |     |          help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:31:16\n    |\n LL |     take_range(::std::ops::RangeFrom { start: 1 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeFrom`\n-   |                help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFrom`\n+   |     |          help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:36:16\n    |\n LL |     take_range(std::ops::RangeFull {});\n-   |                ^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeFull`\n-   |                help: consider borrowing here: `&std::ops::RangeFull {}`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFull`\n+   |     |          help: consider borrowing here: `&std::ops::RangeFull {}`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:41:16\n    |\n LL |     take_range(::std::ops::RangeFull {});\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeFull`\n-   |                help: consider borrowing here: `&::std::ops::RangeFull {}`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFull`\n+   |     |          help: consider borrowing here: `&::std::ops::RangeFull {}`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:46:16\n    |\n LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeInclusive`\n-   |                help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:51:16\n    |\n LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeInclusive`\n-   |                help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:56:16\n    |\n LL |     take_range(std::ops::RangeTo { end: 5 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeTo`\n-   |                help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeTo`\n+   |     |          help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:61:16\n    |\n LL |     take_range(::std::ops::RangeTo { end: 5 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeTo`\n-   |                help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeTo`\n+   |     |          help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:66:16\n    |\n LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeToInclusive`\n-   |                help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:71:16\n    |\n LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeToInclusive`\n-   |                help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-literals.rs:12:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error: aborting due to 12 previous errors\n "}, {"sha": "c4e36b0b159507a862352fe620ade1ca136419f8", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -4,73 +4,109 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:27:16\n    |\n LL |     take_range(0..1);\n-   |                ^^^^\n-   |                |\n-   |                expected reference, found struct `Range`\n-   |                help: consider borrowing here: `&(0..1)`\n+   |     ---------- ^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `Range`\n+   |     |          help: consider borrowing here: `&(0..1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `Range<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:32:16\n    |\n LL |     take_range(1..);\n-   |                ^^^\n-   |                |\n-   |                expected reference, found struct `RangeFrom`\n-   |                help: consider borrowing here: `&(1..)`\n+   |     ---------- ^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFrom`\n+   |     |          help: consider borrowing here: `&(1..)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:37:16\n    |\n LL |     take_range(..);\n-   |                ^^\n-   |                |\n-   |                expected reference, found struct `RangeFull`\n-   |                help: consider borrowing here: `&(..)`\n+   |     ---------- ^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFull`\n+   |     |          help: consider borrowing here: `&(..)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:42:16\n    |\n LL |     take_range(0..=1);\n-   |                ^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeInclusive`\n-   |                help: consider borrowing here: `&(0..=1)`\n+   |     ---------- ^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          help: consider borrowing here: `&(0..=1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:47:16\n    |\n LL |     take_range(..5);\n-   |                ^^^\n-   |                |\n-   |                expected reference, found struct `RangeTo`\n-   |                help: consider borrowing here: `&(..5)`\n+   |     ---------- ^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeTo`\n+   |     |          help: consider borrowing here: `&(..5)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:52:16\n    |\n LL |     take_range(..=42);\n-   |                ^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeToInclusive`\n-   |                help: consider borrowing here: `&(..=42)`\n+   |     ---------- ^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          help: consider borrowing here: `&(..=42)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505-no-std.rs:23:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error: aborting due to 7 previous errors\n "}, {"sha": "38df6e14496a626ef873498e4ae32f756c25cd3c", "filename": "src/test/ui/range/issue-54505.stderr", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,73 +2,109 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:14:16\n    |\n LL |     take_range(0..1);\n-   |                ^^^^\n-   |                |\n-   |                expected reference, found struct `std::ops::Range`\n-   |                help: consider borrowing here: `&(0..1)`\n+   |     ---------- ^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          help: consider borrowing here: `&(0..1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `std::ops::Range<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:19:16\n    |\n LL |     take_range(1..);\n-   |                ^^^\n-   |                |\n-   |                expected reference, found struct `RangeFrom`\n-   |                help: consider borrowing here: `&(1..)`\n+   |     ---------- ^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFrom`\n+   |     |          help: consider borrowing here: `&(1..)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:24:16\n    |\n LL |     take_range(..);\n-   |                ^^\n-   |                |\n-   |                expected reference, found struct `RangeFull`\n-   |                help: consider borrowing here: `&(..)`\n+   |     ---------- ^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeFull`\n+   |     |          help: consider borrowing here: `&(..)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:29:16\n    |\n LL |     take_range(0..=1);\n-   |                ^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeInclusive`\n-   |                help: consider borrowing here: `&(0..=1)`\n+   |     ---------- ^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          help: consider borrowing here: `&(0..=1)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:34:16\n    |\n LL |     take_range(..5);\n-   |                ^^^\n-   |                |\n-   |                expected reference, found struct `RangeTo`\n-   |                help: consider borrowing here: `&(..5)`\n+   |     ---------- ^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeTo`\n+   |     |          help: consider borrowing here: `&(..5)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:39:16\n    |\n LL |     take_range(..=42);\n-   |                ^^^^^\n-   |                |\n-   |                expected reference, found struct `RangeToInclusive`\n-   |                help: consider borrowing here: `&(..=42)`\n+   |     ---------- ^^^^^\n+   |     |          |\n+   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          help: consider borrowing here: `&(..=42)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-54505.rs:10:4\n+   |\n+LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n+   |    ^^^^^^^^^^ -------------------------\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6badd998f9617ab4af6e8306e4f8199218f60d4d", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,25 +2,37 @@ error[E0308]: mismatched types\n   --> $DIR/issue-73553-misinterp-range-literal.rs:12:10\n    |\n LL |     demo(tell(1)..tell(10));\n-   |          ^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          expected reference, found struct `std::ops::Range`\n-   |          help: consider borrowing here: `&(tell(1)..tell(10))`\n+   |     ---- ^^^^^^^^^^^^^^^^^\n+   |     |    |\n+   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&std::ops::Range<usize>`\n                  found struct `std::ops::Range<usize>`\n+note: function defined here\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:3:4\n+   |\n+LL | fn demo(r: &Range) {\n+   |    ^^^^ ---------\n \n error[E0308]: mismatched types\n   --> $DIR/issue-73553-misinterp-range-literal.rs:14:10\n    |\n LL |     demo(1..10);\n-   |          ^^^^^\n-   |          |\n-   |          expected reference, found struct `std::ops::Range`\n-   |          help: consider borrowing here: `&(1..10)`\n+   |     ---- ^^^^^\n+   |     |    |\n+   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    help: consider borrowing here: `&(1..10)`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&std::ops::Range<usize>`\n                  found struct `std::ops::Range<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:3:4\n+   |\n+LL | fn demo(r: &Range) {\n+   |    ^^^^ ---------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44631f954df33c9ad295651fd35d031f7a93d64d", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -19,15 +19,17 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5\n    |\n LL |     std::mem::size_of(u16);\n-   |     ^^^^^^^^^^^^^^^^^ --- supplied 1 argument\n-   |     |\n-   |     expected 0 arguments\n+   |     ^^^^^^^^^^^^^^^^^ --- argument unexpected\n    |\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n    |              ^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |     std::mem::size_of();\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dd7194dc2e840b897db177c1473e1ddbdec5b199", "filename": "src/test/ui/self/issue-61882.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fself%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fself%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fissue-61882.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:27\n    |\n LL |     const B: A<u8> = Self(0);\n-   |                           ^ expected `bool`, found integer\n+   |                      ---- ^ expected `bool`, found integer\n+   |                      |\n+   |                      arguments to this function are incorrect\n+   |\n+note: tuple struct defined here\n+  --> $DIR/issue-61882.rs:1:8\n+   |\n+LL | struct A<T>(T);\n+   |        ^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:22"}, {"sha": "83f941f65b9884ffaec7fe2af4e545bda0ae23f9", "filename": "src/test/ui/span/E0057.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let f = |x| x * 3;\n+    let a = f(); //~ ERROR E0057\n+    let b = f(4);\n+    let c = f(2, 3); //~ ERROR E0057\n+}"}, {"sha": "a151b20f865b22866e7e6ed8ee906486b145f241", "filename": "src/test/ui/span/E0057.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -0,0 +1,25 @@\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/E0057.rs:3:13\n+   |\n+LL |     let a = f();\n+   |             ^-- an argument is missing\n+   |\n+help: provide the argument\n+   |\n+LL |     let a = f({_});\n+   |             ~~~~~~\n+\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/E0057.rs:5:13\n+   |\n+LL |     let c = f(2, 3);\n+   |             ^    - argument unexpected\n+   |\n+help: remove the extra argument\n+   |\n+LL |     let c = f(2);\n+   |             ~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0057`."}, {"sha": "db784d5fe6cfc8be856bba650d3c73e750f2b061", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -20,19 +20,33 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:12:10\n    |\n LL |     test(&y);\n-   |          ^^ types differ in mutability\n+   |     ---- ^^ types differ in mutability\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut String`\n                       found reference `&String`\n+note: function defined here\n+  --> $DIR/coerce-suggestions.rs:1:4\n+   |\n+LL | fn test(_x: &mut String) {}\n+   |    ^^^^ ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:14:11\n    |\n LL |     test2(&y);\n-   |           ^^ types differ in mutability\n+   |     ----- ^^ types differ in mutability\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected mutable reference `&mut i32`\n                       found reference `&String`\n+note: function defined here\n+  --> $DIR/coerce-suggestions.rs:3:4\n+   |\n+LL | fn test2(_x: &mut i32) {}\n+   |    ^^^^^ ------------\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:17:9"}, {"sha": "68da9f0dc88ba2f7f8923092a0cfdc3a1da61182", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -54,35 +54,47 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n LL |     foo(Some(42), 2, \"\");\n-   |     ^^^ --------  -  -- supplied 3 arguments\n-   |     |\n-   |     expected 2 arguments\n+   |     ^^^              -- argument unexpected\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:1:4\n    |\n LL | fn foo(Option<i32>, String) {}\n    |    ^^^ -----------  ------\n+help: remove the extra argument\n+   |\n+LL |     foo(Some(42), 2);\n+   |     ~~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n    |\n LL |     bar(\"\", \"\");\n-   |             ^^ expected `usize`, found `&str`\n+   |     ---     ^^ expected `usize`, found `&str`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-34264.rs:3:4\n+   |\n+LL | fn bar(x, y: usize) {}\n+   |    ^^^ -  --------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n LL |     bar(1, 2, 3);\n-   |     ^^^ -  -  - supplied 3 arguments\n-   |     |\n-   |     expected 2 arguments\n+   |     ^^^       - argument unexpected\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:3:4\n    |\n LL | fn bar(x, y: usize) {}\n    |    ^^^ -  --------\n+help: remove the extra argument\n+   |\n+LL |     bar(1, 2);\n+   |     ~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c8e1a23288751a912fce8bb67605cab9419da7d9", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,88 +2,92 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:11:33\n    |\n LL |     let _: Result<(), String> = Ok();\n-   |                                 ^^-- supplied 0 arguments\n+   |                                 ^^-- an argument of type `()` is missing\n    |\n-help: expected the unit value `()`; create it with empty parentheses\n+help: provide the argument\n    |\n LL |     let _: Result<(), String> = Ok(());\n-   |                                    ++\n+   |                                 ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:12:5\n    |\n LL |     foo();\n-   |     ^^^-- supplied 0 arguments\n-   |     |\n-   |     expected 2 arguments\n+   |     ^^^-- two arguments of type `()` and `()` are missing\n    |\n note: function defined here\n   --> $DIR/missing-unit-argument.rs:1:4\n    |\n LL | fn foo(():(), ():()) {}\n    |    ^^^ -----  -----\n+help: provide the arguments\n+   |\n+LL |     foo((), ());\n+   |     ~~~~~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/missing-unit-argument.rs:13:5\n    |\n LL |     foo(());\n-   |     ^^^ -- supplied 1 argument\n-   |     |\n-   |     expected 2 arguments\n+   |     ^^^---- an argument of type `()` is missing\n    |\n note: function defined here\n   --> $DIR/missing-unit-argument.rs:1:4\n    |\n LL | fn foo(():(), ():()) {}\n    |    ^^^ -----  -----\n+help: provide the argument\n+   |\n+LL |     foo((), ());\n+   |     ~~~~~~~~~~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:14:5\n    |\n LL |     bar();\n-   |     ^^^-- supplied 0 arguments\n+   |     ^^^-- an argument of type `()` is missing\n    |\n note: function defined here\n   --> $DIR/missing-unit-argument.rs:2:4\n    |\n LL | fn bar(():()) {}\n    |    ^^^ -----\n-help: expected the unit value `()`; create it with empty parentheses\n+help: provide the argument\n    |\n LL |     bar(());\n-   |         ++\n+   |     ~~~~~~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n LL |     S.baz();\n-   |       ^^^- supplied 0 arguments\n+   |       ^^^-- an argument of type `()` is missing\n    |\n note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:6:8\n    |\n LL |     fn baz(self, (): ()) { }\n    |        ^^^ ----  ------\n-help: expected the unit value `()`; create it with empty parentheses\n+help: provide the argument\n    |\n LL |     S.baz(());\n-   |           ++\n+   |       ~~~~~~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n LL |     S.generic::<()>();\n-   |       ^^^^^^^------ supplied 0 arguments\n+   |       ^^^^^^^^^^^^^-- an argument of type `()` is missing\n    |\n note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:7:8\n    |\n LL |     fn generic<T>(self, _: T) { }\n    |        ^^^^^^^    ----  ----\n-help: expected the unit value `()`; create it with empty parentheses\n+help: provide the argument\n    |\n LL |     S.generic::<()>(());\n-   |                     ++\n+   |       ~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "991dde30629e93539f9ebf167cef79901ba384cf", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,37 +2,55 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^ -  - supplied 2 arguments\n-   |                                  |\n-   |                                  expected 1 argument\n+   |                                  ^^^^ -  - argument unexpected\n+   |                                       |\n+   |                                       expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32, bool)`\n+               found type `{integer}`\n+help: remove the extra argument\n+   |\n+LL |     let _: Option<(i32, bool)> = Some({(i32, bool)});\n+   |                                  ~~~~~~~~~~~~~~~~~~~\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^ -  - supplied 2 arguments\n-   |     |\n-   |     expected 1 argument\n+   |     ^^^^^^^^ -  - argument unexpected\n+   |              |\n+   |              expected tuple, found integer\n    |\n+   = note: expected tuple `(i32, bool)`\n+               found type `{integer}`\n note: function defined here\n   --> $DIR/args-instead-of-tuple-errors.rs:21:4\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n+help: remove the extra argument\n+   |\n+LL |     int_bool({(i32, bool)});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:11:28\n    |\n LL |     let _: Option<(i8,)> = Some();\n-   |                            ^^^^-- supplied 0 arguments\n-   |                            |\n-   |                            expected 1 argument\n+   |                            ^^^^-- an argument of type `(i8,)` is missing\n+   |\n+help: provide the argument\n+   |\n+LL |     let _: Option<(i8,)> = Some({(i8,)});\n+   |                            ~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:14:34\n    |\n LL |     let _: Option<(i32,)> = Some(5_usize);\n-   |                                  ^^^^^^^ expected tuple, found `usize`\n+   |                             ---- ^^^^^^^ expected tuple, found `usize`\n+   |                             |\n+   |                             arguments to this enum variant are incorrect\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n@@ -41,7 +59,9 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:17:34\n    |\n LL |     let _: Option<(i32,)> = Some((5_usize));\n-   |                                  ^^^^^^^^^ expected tuple, found `usize`\n+   |                             ---- ^^^^^^^^^ expected tuple, found `usize`\n+   |                             |\n+   |                             arguments to this enum variant are incorrect\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`"}, {"sha": "7ec10e88142c11c76f5b8b21746bd6457f85d518", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:7:36\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n-   |                                    ^^ -  - supplied 2 arguments\n+   |                                    ^^\n    |\n help: use parentheses to construct a tuple\n    |\n@@ -13,7 +13,7 @@ error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:9:46\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n-   |                                              ^^^^ -  -  ---- supplied 3 arguments\n+   |                                              ^^^^\n    |\n help: use parentheses to construct a tuple\n    |\n@@ -24,18 +24,20 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:11:25\n    |\n LL |     let _: Option<()> = Some();\n-   |                         ^^^^-- supplied 0 arguments\n+   |                         ^^^^-- an argument of type `()` is missing\n    |\n-help: expected the unit value `()`; create it with empty parentheses\n+help: provide the argument\n    |\n LL |     let _: Option<()> = Some(());\n-   |                              ++\n+   |                         ~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple.rs:14:34\n    |\n LL |     let _: Option<(i32,)> = Some(3);\n-   |                                  ^ expected tuple, found integer\n+   |                             ---- ^ expected tuple, found integer\n+   |                             |\n+   |                             arguments to this enum variant are incorrect\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n@@ -48,7 +50,9 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple.rs:17:34\n    |\n LL |     let _: Option<(i32,)> = Some((3));\n-   |                                  ^^^ expected tuple, found integer\n+   |                             ---- ^^^ expected tuple, found integer\n+   |                             |\n+   |                             arguments to this enum variant are incorrect\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n@@ -61,7 +65,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n-   |     ^^^^^^^^ -  - supplied 2 arguments\n+   |     ^^^^^^^^\n    |\n note: function defined here\n   --> $DIR/args-instead-of-tuple.rs:25:4\n@@ -77,7 +81,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n-   |     ^^^^^^^^^^^^ -  - supplied 2 arguments\n+   |     ^^^^^^^^^^^^\n    |\n note: function defined here\n   --> $DIR/args-instead-of-tuple.rs:28:4\n@@ -93,7 +97,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);\n-   |         ^^^^^^^^^^^^ -  - supplied 2 arguments\n+   |         ^^^^^^^^^^^^\n    |\n note: function defined here\n   --> $DIR/args-instead-of-tuple.rs:28:4"}, {"sha": "1efd1b317b7da25de6b895f0b7ee4a981734bc87", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,33 +2,61 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:7:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---                 ^^^ expected `&Foo`, found struct `Foo`\n-   |         |\n+   |         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         |         |\n+   |         |         arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:39\n    |\n LL |     opt.and_then(|arg| Some(takes_ref(arg)));\n-   |         --------                      ^^^ expected `&Foo`, found struct `Foo`\n-   |         |\n+   |         --------            --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         |                   |\n+   |         |                   arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:10:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---                 ^^^ expected `&Foo`, found struct `Foo`\n-   |         |\n+   |         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         |         |\n+   |         |         arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:37\n    |\n LL |     opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |         --------                    ^^^ expected `&Foo`, found struct `Foo`\n-   |         |\n+   |         --------          --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         |                 |\n+   |         |                 arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:29"}, {"sha": "6dfb73480a2b88b7e30fbd9280cb6cbf760acea1", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/boxed-variant-field.rs:9:31\n    |\n LL |         Ty::List(elem) => foo(elem),\n-   |                               ^^^^ expected enum `Ty`, found struct `Box`\n+   |                           --- ^^^^ expected enum `Ty`, found struct `Box`\n+   |                           |\n+   |                           arguments to this function are incorrect\n    |\n    = note: expected enum `Ty`\n             found struct `Box<Ty>`\n+note: function defined here\n+  --> $DIR/boxed-variant-field.rs:6:4\n+   |\n+LL | fn foo(x: Ty) -> Ty {\n+   |    ^^^ -----\n help: consider unboxing the value\n    |\n LL |         Ty::List(elem) => foo(*elem),"}, {"sha": "71facf57e8d659122dda5452473f0e0231d90021", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -34,10 +34,16 @@ LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static,\n LL |     Pin::new(x)\n    |     -------- ^ expected struct `Box`, found type parameter `F`\n    |     |\n+   |     arguments to this function are incorrect\n    |     help: use `Box::pin` to pin and box this expression: `Box::pin`\n    |\n    = note:      expected struct `Box<dyn Future<Output = i32> + Send>`\n            found type parameter `F`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+   |\n+LL |     pub const fn new(pointer: P) -> Pin<P> {\n+   |                  ^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5"}, {"sha": "8c9a41a202767813306bf508a328f785ad74e45c", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -17,10 +17,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n    |\n LL |     foo((Some(3)));\n-   |         ^^^^^^^^^ expected tuple, found enum `Option`\n+   |     --- ^^^^^^^^^ expected tuple, found enum `Option`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected tuple `(_,)`\n                found enum `Option<{integer}>`\n+note: function defined here\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:5:4\n+   |\n+LL | fn foo<T>(_t: (T,)) {}\n+   |    ^^^    --------\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     foo((Some(3),));"}, {"sha": "611f7d5ddda78574c68501208dccfc49580af855", "filename": "src/test/ui/suggestions/issue-90213-expected-boxfuture-self-ice.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,11 +2,18 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90213-expected-boxfuture-self-ice.rs:9:19\n    |\n LL |         Self::foo(None)\n-   |                   ^^^^ expected struct `Box`, found enum `Option`\n+   |         --------- ^^^^ expected struct `Box`, found enum `Option`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected struct `Box<Option<S>>`\n                 found enum `Option<_>`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+note: associated function defined here\n+  --> $DIR/issue-90213-expected-boxfuture-self-ice.rs:7:8\n+   |\n+LL |     fn foo(_: Box<Option<S>>) {}\n+   |        ^^^ -----------------\n help: store this in the heap by calling `Box::new`\n    |\n LL |         Self::foo(Box::new(None))"}, {"sha": "9588eedc98b4ae35b9f2020b5c0ff2b2b50d09ae", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -38,7 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:14:9\n    |\n LL |     foo(\"\");\n-   |         ^^ expected `usize`, found `&str`\n+   |     --- ^^ expected `usize`, found `&str`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:6:4\n+   |\n+LL | fn foo(a: usize) {};\n+   |    ^^^ --------\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b0ac770c06f0fcc295a3687835cbfee208adcf8d", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,31 +2,60 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:15:11\n    |\n LL |         x(123);\n-   |           ^^^\n-   |           |\n-   |           expected `&mut i32`, found integer\n-   |           help: consider mutably borrowing here: `&mut 123`\n+   |         - ^^^\n+   |         | |\n+   |         | expected `&mut i32`, found integer\n+   |         | help: consider mutably borrowing here: `&mut 123`\n+   |         arguments to this function are incorrect\n ...\n LL |     bla!();\n    |     ------ in this macro invocation\n    |\n+note: function defined here\n+  --> $DIR/suggest-ref-macro.rs:11:4\n+   |\n+LL | fn x(_: &mut i32) {}\n+   |    ^ -----------\n    = note: this error originates in the macro `bla` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:26:10\n    |\n+LL |         x($v)\n+   |         - arguments to this function are incorrect\n+...\n LL |     bla!(456);\n    |          ^^^\n    |          |\n    |          expected `&mut i32`, found integer\n    |          help: consider mutably borrowing here: `&mut 456`\n+   |\n+note: function defined here\n+  --> $DIR/suggest-ref-macro.rs:11:4\n+   |\n+LL | fn x(_: &mut i32) {}\n+   |    ^ -----------\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:8:1\n    |\n LL | #[hello]\n-   | ^^^^^^^^ expected `&mut i32`, found integer\n+   | ^^^^^^^^\n+   | |\n+   | expected `&mut i32`, found integer\n+   | arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/suggest-ref-macro.rs:8:1\n    |\n+LL |   #[hello]\n+   |  _-^^^^^^^\n+LL | | fn abc() {}\n+LL | |\n+LL | | fn x(_: &mut i32) {}\n+LL | |\n+LL | | macro_rules! bla {\n+   | |_____________-\n    = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "ac839ff7eb966c3869ebb6b192b0309ac2a95e0e", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.stderr", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:13:13\n    |\n LL |         qux(x.func())\n-   |             ^^^^^^^^ expected `usize`, found associated type\n+   |         --- ^^^^^^^^ expected `usize`, found associated type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<impl Trait as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n    |\n LL |     fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {\n@@ -15,10 +22,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:17:13\n    |\n LL |         qux(x.func())\n-   |             ^^^^^^^^ expected `usize`, found associated type\n+   |         --- ^^^^^^^^ expected `usize`, found associated type\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait>::A` to `usize`\n    |\n LL |     fn ban<T>(x: T) where T: Trait<A = usize> {\n@@ -28,10 +42,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:22:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<impl Trait as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n    |\n LL | fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {\n@@ -41,10 +62,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:26:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait>::A` to `usize`\n    |\n LL | fn bar<T: Trait<A = usize>>(x: T) {\n@@ -54,10 +82,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:30:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n    |\n LL | fn foo2(x: impl Trait<i32, A = usize>) {\n@@ -67,10 +102,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:34:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait<i32>>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n    |\n LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n@@ -80,10 +122,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:38:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait>::A` to `usize`\n    |\n LL | fn ban<T>(x: T) where T: Trait<A = usize> {"}, {"sha": "7583c875a1a37a667d483998e6d7242d5d142a6e", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -16,10 +16,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:14:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<impl Trait as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n    |\n LL | fn foo(_: impl Trait, x: impl Trait<A = usize>) {\n@@ -29,10 +36,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:18:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait>::A` to `usize`\n    |\n LL | fn bar<T: Trait<A = usize>>(x: T) {\n@@ -42,10 +56,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:22:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n    |\n LL | fn foo2(x: impl Trait<i32, A = usize>) {\n@@ -55,7 +76,9 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:26:12\n    |\n LL |     x.funk(3);\n-   |            ^ expected associated type, found integer\n+   |       ---- ^ expected associated type, found integer\n+   |       |\n+   |       arguments to this function are incorrect\n    |\n    = note: expected associated type `<T as Trait<i32>>::A`\n                          found type `{integer}`\n@@ -67,6 +90,11 @@ LL |     fn func(&self) -> Self::A;\n LL |     fn funk(&self, _: Self::A);\n LL |     fn funq(&self) -> Self::A {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::funq`\n+note: associated function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:9:8\n+   |\n+LL |     fn funk(&self, _: Self::A);\n+   |        ^^^^\n help: consider constraining the associated type `<T as Trait<i32>>::A` to `{integer}`\n    |\n LL | fn bar2<T: Trait<i32, A = {integer}>>(x: T) {\n@@ -76,10 +104,17 @@ error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:27:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait<i32>>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n    |\n LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n@@ -91,25 +126,47 @@ error[E0308]: mismatched types\n LL | fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n    |        - this type parameter\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found type parameter `D`\n+   |     --- ^^^^^^^^ expected `usize`, found type parameter `D`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:        expected type `usize`\n            found type parameter `D`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n \n error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:35:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found `()`\n+   |     --- ^^^^^^^^ expected `usize`, found `()`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n \n error[E0308]: mismatched types\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:39:9\n    |\n LL |     qux(x.func())\n-   |         ^^^^^^^^ expected `usize`, found associated type\n+   |     --- ^^^^^^^^ expected `usize`, found associated type\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note:         expected type `usize`\n            found associated type `<T as Trait>::A`\n+note: function defined here\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:42:4\n+   |\n+LL | fn qux(_: usize) {}\n+   |    ^^^ --------\n help: consider constraining the associated type `<T as Trait>::A` to `usize`\n    |\n LL | fn ban<T>(x: T) where T: Trait<A = usize> {"}, {"sha": "3d2530e204b3336943d618c880414612be503df2", "filename": "src/test/ui/terminal-width/flag-json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,5 +5,5 @@\n \n fn main() {\n     let _: () = 42;\n-    //~^ ERROR mismatched types\n+    //~^ ERROR arguments to this function are incorrect\n }"}, {"sha": "d2fda09c0767f5d6db0d8fa906983d7a99454875", "filename": "src/test/ui/terr-in-field.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterr-in-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterr-in-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-in-field.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/terr-in-field.rs:13:14\n    |\n LL |     want_foo(b);\n-   |              ^ expected struct `Foo`, found struct `Bar`\n+   |     -------- ^ expected struct `Foo`, found struct `Bar`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/terr-in-field.rs:11:4\n+   |\n+LL | fn want_foo(f: Foo) {}\n+   |    ^^^^^^^^ ------\n \n error: aborting due to previous error\n "}, {"sha": "5a61a2fab12658fe91122d636899345189423670", "filename": "src/test/ui/terr-sorts.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterr-sorts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fterr-sorts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/terr-sorts.rs:10:14\n    |\n LL |     want_foo(b);\n-   |              ^ expected struct `Foo`, found struct `Box`\n+   |     -------- ^ expected struct `Foo`, found struct `Box`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo`\n               found struct `Box<Foo>`\n+note: function defined here\n+  --> $DIR/terr-sorts.rs:8:4\n+   |\n+LL | fn want_foo(f: Foo) {}\n+   |    ^^^^^^^^ ------\n help: consider unboxing the value\n    |\n LL |     want_foo(*b);"}, {"sha": "b67648c7b04da6b60d04f58add32f3e6cb26d767", "filename": "src/test/ui/traits/bound/sugar.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/sugar.rs:12:7\n    |\n LL |     a(x);\n-   |       ^ expected trait `Foo + Send`, found trait `Foo + Sync`\n+   |     - ^ expected trait `Foo + Send`, found trait `Foo + Sync`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Box<(dyn Foo + Send + 'static)>`\n               found struct `Box<(dyn Foo + Sync + 'static)>`\n+note: function defined here\n+  --> $DIR/sugar.rs:5:4\n+   |\n+LL | fn a(_x: Box<dyn Foo + Send>) {\n+   |    ^ -----------------------\n \n error: aborting due to previous error\n "}, {"sha": "f0c718c7a16db853d7538fe0577eb602c9de73c8", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,10 +5,17 @@ LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n    |      - this type parameter\n ...\n LL |         builder.push(output);\n-   |                      ^^^^^^ expected type parameter `F`, found struct `Class`\n+   |                 ---- ^^^^^^ expected type parameter `F`, found struct `Class`\n+   |                 |\n+   |                 arguments to this function are incorrect\n    |\n-   = note: expected type parameter `F`\n-                      found struct `Class<P>`\n+   = note: expected type `F`\n+            found struct `Class<P>`\n+note: associated function defined here\n+  --> $DIR/issue-52893.rs:11:8\n+   |\n+LL |     fn push(self, other: T) -> Self::PushRes;\n+   |        ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8b6e610067be1f1d23dc44dbcb23ea2c1fc6d8f9", "filename": "src/test/ui/traits/multidispatch-bad.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,8 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/multidispatch-bad.rs:19:17\n    |\n LL |     test(22i32, 44i32);\n-   |                 ^^^^^ expected `u32`, found `i32`\n+   |     ----        ^^^^^ expected `u32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: function defined here\n+  --> $DIR/multidispatch-bad.rs:13:4\n+   |\n+LL | fn test<T,U>(_: T, _: U)\n+   |    ^^^^      ----  ----\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     test(22i32, 44u32);"}, {"sha": "fff7be987f2e8c57e669181aeeddb3e144902ffe", "filename": "src/test/ui/tuple/tuple-arity-mismatch.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Ftuple-arity-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Ftuple-arity-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-arity-mismatch.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,19 +2,33 @@ error[E0308]: mismatched types\n   --> $DIR/tuple-arity-mismatch.rs:6:20\n    |\n LL |     let y = first ((1,2.0,3));\n-   |                    ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |             -----  ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |             |\n+   |             arguments to this function are incorrect\n    |\n    = note: expected tuple `(isize, f64)`\n               found tuple `(isize, f64, {integer})`\n+note: function defined here\n+  --> $DIR/tuple-arity-mismatch.rs:3:4\n+   |\n+LL | fn first((value, _): (isize, f64)) -> isize { value }\n+   |    ^^^^^ ------------------------\n \n error[E0308]: mismatched types\n   --> $DIR/tuple-arity-mismatch.rs:12:20\n    |\n LL |     let y = first ((1,));\n-   |                    ^^^^ expected a tuple with 2 elements, found one with 1 element\n+   |             -----  ^^^^ expected a tuple with 2 elements, found one with 1 element\n+   |             |\n+   |             arguments to this function are incorrect\n    |\n    = note: expected tuple `(isize, f64)`\n               found tuple `(isize,)`\n+note: function defined here\n+  --> $DIR/tuple-arity-mismatch.rs:3:4\n+   |\n+LL | fn first((value, _): (isize, f64)) -> isize { value }\n+   |    ^^^^^ ------------------------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c704ae9934b1c5602647f8faebf07ef1ae18e445", "filename": "src/test/ui/tuple/wrong_argument_ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-2.rs:13:5\n    |\n LL |     test(x.qux(), x.qux());\n-   |     ^^^^ -------  ------- supplied 2 arguments\n+   |     ^^^^\n    |\n note: function defined here\n   --> $DIR/wrong_argument_ice-2.rs:1:4"}, {"sha": "6ea6e670fd600998b5c6f7723bd269e60784de68", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,21 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^ ---------  ------------- supplied 2 arguments\n-   |                |\n-   |                expected 1 argument\n+   |                ^^^^ ---------  ------------- argument unexpected\n+   |                     |\n+   |                     expected tuple, found struct `Vec`\n    |\n+   = note: expected tuple `(Vec<String>, Vec<Process>)`\n+             found struct `Vec<String>`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL |     pub fn push(&mut self, value: T) {\n    |            ^^^^\n+help: remove the extra argument\n+   |\n+LL |         groups.push({(Vec<String>, Vec<Process>)});\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "0c25b6801dc8efff0e11bf11f848cb420676cf45", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -3,12 +3,15 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n    |\n LL |       (|| {})(|| {\n    |  _____^^^^^^^_-\n-   | |     |\n-   | |     expected 0 arguments\n LL | |\n LL | |         let b = 1;\n LL | |     });\n-   | |_____- supplied 1 argument\n+   | |_____- argument unexpected\n+   |\n+help: remove the extra argument\n+   |\n+LL |     (|| {})();\n+   |     ~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "2b4cb669f5c7d7f04f9484ddfa33c59950972962", "filename": "src/test/ui/tuple/wrong_argument_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice.rs:11:18\n    |\n LL |         self.acc.push_back(self.current_provides, self.current_requires);\n-   |                  ^^^^^^^^^ ---------------------  --------------------- supplied 2 arguments\n+   |                  ^^^^^^^^^\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/collections/vec_deque/mod.rs:LL:COL"}, {"sha": "115ecb013766dd2e9bcd5fd60cd668c9577dfea8", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -5,10 +5,17 @@ LL | impl<T> Enum<T> {\n    |      - this type parameter\n LL |     fn ts_variant() {\n LL |         Self::TSVariant(());\n-   |                         ^^ expected type parameter `T`, found `()`\n+   |         --------------- ^^ expected type parameter `T`, found `()`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n+note: tuple variant defined here\n+  --> $DIR/enum-variant-generic-args.rs:7:16\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n+   |                ^^^^^^^^^\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n@@ -29,10 +36,17 @@ LL | impl<T> Enum<T> {\n    |      - this type parameter\n ...\n LL |         Self::<()>::TSVariant(());\n-   |                               ^^ expected type parameter `T`, found `()`\n+   |         --------------------- ^^ expected type parameter `T`, found `()`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n+note: tuple variant defined here\n+  --> $DIR/enum-variant-generic-args.rs:7:16\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n+   |                ^^^^^^^^^\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:20:16"}, {"sha": "3fc5a3594d852bd45f20da3df669c8aae9ee28e5", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,15 +2,17 @@ error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n LL |     <E>::V();\n-   |     ^^^^^^-- supplied 0 arguments\n-   |     |\n-   |     expected 1 argument\n+   |     ^^^^^^-- an argument of type `u8` is missing\n    |\n note: tuple variant defined here\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:5:5\n    |\n LL |     V(u8)\n    |     ^\n+help: provide the argument\n+   |\n+LL |     <E>::V({u8});\n+   |     ~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}, {"sha": "18ed4986f89312ba9aee248d56e623683ac3d051", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -11,15 +11,17 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:12\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |            ^^^^^^^^^^^^^^^^^^ --  -- supplied 2 arguments\n-   |            |\n-   |            expected 1 argument\n+   |            ^^^^^^^^^^^^^^^^^^     -- argument unexpected\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL |     pub fn with_capacity(capacity: usize) -> Self {\n    |            ^^^^^^^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |     let x: Vec::with_capacity(10);\n+   |            ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "783f747fa6db68beb62f48e54bcdc1c3542b7a08", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,19 +2,33 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:16:20\n    |\n LL |         a::try_foo(foo2);\n-   |                    ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n+   |         ---------- ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: perhaps two different versions of crate `crate_a1` are being used?\n+note: function defined here\n+  --> $DIR/auxiliary/crate_a1.rs:10:8\n+   |\n+LL | pub fn try_foo(x: Foo){}\n+   |        ^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:20:20\n    |\n LL |         a::try_bar(bar2);\n-   |                    ^^^^ expected trait `main::a::Bar`, found a different trait `main::a::Bar`\n+   |         ---------- ^^^^ expected trait `main::a::Bar`, found a different trait `main::a::Bar`\n+   |         |\n+   |         arguments to this function are incorrect\n    |\n    = note: expected struct `Box<(dyn main::a::Bar + 'static)>`\n               found struct `Box<dyn main::a::Bar>`\n    = note: perhaps two different versions of crate `crate_a1` are being used?\n+note: function defined here\n+  --> $DIR/auxiliary/crate_a1.rs:11:8\n+   |\n+LL | pub fn try_bar(x: Box<Bar>){}\n+   |        ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c187bad0725c7d525acf6db17b4acd32982c410", "filename": "src/test/ui/type/type-mismatch.stderr", "status": "modified", "additions": 384, "deletions": 53, "changes": 437, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,418 +2,749 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:17:17\n    |\n LL |     want::<foo>(f);\n-   |                 ^ expected struct `foo`, found `usize`\n+   |     ----------- ^ expected struct `foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:18:17\n    |\n LL |     want::<bar>(f);\n-   |                 ^ expected struct `bar`, found `usize`\n+   |     ----------- ^ expected struct `bar`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:19:24\n    |\n LL |     want::<Foo<usize>>(f);\n-   |                        ^ expected struct `Foo`, found `usize`\n+   |     ------------------ ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:20:27\n    |\n LL |     want::<Foo<usize, B>>(f);\n-   |                           ^ expected struct `Foo`, found `usize`\n+   |     --------------------- ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, B>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:21:22\n    |\n LL |     want::<Foo<foo>>(f);\n-   |                      ^ expected struct `Foo`, found `usize`\n+   |     ---------------- ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<foo>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:22:25\n    |\n LL |     want::<Foo<foo, B>>(f);\n-   |                         ^ expected struct `Foo`, found `usize`\n+   |     ------------------- ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<foo, B>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:23:22\n    |\n LL |     want::<Foo<bar>>(f);\n-   |                      ^ expected struct `Foo`, found `usize`\n+   |     ---------------- ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:24:25\n    |\n LL |     want::<Foo<bar, B>>(f);\n-   |                         ^ expected struct `Foo`, found `usize`\n+   |     ------------------- ^ expected struct `Foo`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, B>`\n                 found type `usize`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:28:19\n    |\n LL |     want::<usize>(f);\n-   |                   ^ expected `usize`, found struct `foo`\n+   |     ------------- ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:29:17\n    |\n LL |     want::<bar>(f);\n-   |                 ^ expected struct `bar`, found struct `foo`\n+   |     ----------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:30:24\n    |\n LL |     want::<Foo<usize>>(f);\n-   |                        ^ expected struct `Foo`, found struct `foo`\n+   |     ------------------ ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:31:27\n    |\n LL |     want::<Foo<usize, B>>(f);\n-   |                           ^ expected struct `Foo`, found struct `foo`\n+   |     --------------------- ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, B>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:32:22\n    |\n LL |     want::<Foo<foo>>(f);\n-   |                      ^ expected struct `Foo`, found struct `foo`\n+   |     ---------------- ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<foo>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:33:25\n    |\n LL |     want::<Foo<foo, B>>(f);\n-   |                         ^ expected struct `Foo`, found struct `foo`\n+   |     ------------------- ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<foo, B>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:34:22\n    |\n LL |     want::<Foo<bar>>(f);\n-   |                      ^ expected struct `Foo`, found struct `foo`\n+   |     ---------------- ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:35:25\n    |\n LL |     want::<Foo<bar, B>>(f);\n-   |                         ^ expected struct `Foo`, found struct `foo`\n+   |     ------------------- ^ expected struct `Foo`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, B>`\n               found struct `foo`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:39:19\n    |\n LL |     want::<usize>(f);\n-   |                   ^ expected `usize`, found struct `Foo`\n+   |     ------------- ^ expected `usize`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `usize`\n             found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:40:17\n    |\n LL |     want::<foo>(f);\n-   |                 ^ expected struct `foo`, found struct `Foo`\n+   |     ----------- ^ expected struct `foo`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `foo`\n               found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:41:17\n    |\n LL |     want::<bar>(f);\n-   |                 ^ expected struct `bar`, found struct `Foo`\n+   |     ----------- ^ expected struct `bar`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `bar`\n               found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:42:24\n    |\n LL |     want::<Foo<usize>>(f);\n-   |                        ^ expected `usize`, found struct `foo`\n+   |     ------------------ ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize>`\n               found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:43:27\n    |\n LL |     want::<Foo<usize, B>>(f);\n-   |                           ^ expected `usize`, found struct `foo`\n+   |     --------------------- ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, B>`\n               found struct `Foo<foo, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:44:25\n    |\n LL |     want::<Foo<foo, B>>(f);\n-   |                         ^ expected struct `B`, found struct `A`\n+   |     ------------------- ^ expected struct `B`, found struct `A`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<_, B>`\n               found struct `Foo<_, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:45:22\n    |\n LL |     want::<Foo<bar>>(f);\n-   |                      ^ expected struct `bar`, found struct `foo`\n+   |     ---------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar>`\n               found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:46:25\n    |\n LL |     want::<Foo<bar, B>>(f);\n-   |                         ^ expected struct `bar`, found struct `foo`\n+   |     ------------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, B>`\n               found struct `Foo<foo, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:47:23\n    |\n LL |     want::<&Foo<foo>>(f);\n-   |                       ^\n-   |                       |\n-   |                       expected `&Foo<foo>`, found struct `Foo`\n-   |                       help: consider borrowing here: `&f`\n+   |     ----------------- ^\n+   |     |                 |\n+   |     |                 expected `&Foo<foo>`, found struct `Foo`\n+   |     |                 help: consider borrowing here: `&f`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo>`\n                  found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:48:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |                          ^ expected `&Foo<foo, B>`, found struct `Foo`\n+   |     -------------------- ^ expected `&Foo<foo, B>`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:52:19\n    |\n LL |     want::<usize>(f);\n-   |                   ^ expected `usize`, found struct `Foo`\n+   |     ------------- ^ expected `usize`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `usize`\n             found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:53:17\n    |\n LL |     want::<foo>(f);\n-   |                 ^ expected struct `foo`, found struct `Foo`\n+   |     ----------- ^ expected struct `foo`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `foo`\n               found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:54:17\n    |\n LL |     want::<bar>(f);\n-   |                 ^ expected struct `bar`, found struct `Foo`\n+   |     ----------- ^ expected struct `bar`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `bar`\n               found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:55:24\n    |\n LL |     want::<Foo<usize>>(f);\n-   |                        ^ expected `usize`, found struct `foo`\n+   |     ------------------ ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, A>`\n               found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:56:27\n    |\n LL |     want::<Foo<usize, B>>(f);\n-   |                           ^ expected `usize`, found struct `foo`\n+   |     --------------------- ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, _>`\n               found struct `Foo<foo, _>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:57:22\n    |\n LL |     want::<Foo<foo>>(f);\n-   |                      ^ expected struct `A`, found struct `B`\n+   |     ---------------- ^ expected struct `A`, found struct `B`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<_, A>`\n               found struct `Foo<_, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:58:22\n    |\n LL |     want::<Foo<bar>>(f);\n-   |                      ^ expected struct `bar`, found struct `foo`\n+   |     ---------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, A>`\n               found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:59:25\n    |\n LL |     want::<Foo<bar, B>>(f);\n-   |                         ^ expected struct `bar`, found struct `foo`\n+   |     ------------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, _>`\n               found struct `Foo<foo, _>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:60:23\n    |\n LL |     want::<&Foo<foo>>(f);\n-   |                       ^ expected `&Foo<foo>`, found struct `Foo`\n+   |     ----------------- ^ expected `&Foo<foo>`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo>`\n                  found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:61:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |                          ^\n-   |                          |\n-   |                          expected `&Foo<foo, B>`, found struct `Foo`\n-   |                          help: consider borrowing here: `&f`\n+   |     -------------------- ^\n+   |     |                    |\n+   |     |                    expected `&Foo<foo, B>`, found struct `Foo`\n+   |     |                    help: consider borrowing here: `&f`\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo, B>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:65:19\n    |\n LL |     want::<usize>(f);\n-   |                   ^ expected `usize`, found struct `Foo`\n+   |     ------------- ^ expected `usize`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected type `usize`\n             found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:66:17\n    |\n LL |     want::<foo>(f);\n-   |                 ^ expected struct `foo`, found struct `Foo`\n+   |     ----------- ^ expected struct `foo`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `foo`\n               found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:67:17\n    |\n LL |     want::<bar>(f);\n-   |                 ^ expected struct `bar`, found struct `Foo`\n+   |     ----------- ^ expected struct `bar`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `bar`\n               found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:68:24\n    |\n LL |     want::<Foo<usize>>(f);\n-   |                        ^ expected `usize`, found struct `foo`\n+   |     ------------------ ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, A, B>`\n               found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:69:27\n    |\n LL |     want::<Foo<usize, B>>(f);\n-   |                           ^ expected `usize`, found struct `foo`\n+   |     --------------------- ^ expected `usize`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<usize, _, B>`\n               found struct `Foo<foo, _, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:70:22\n    |\n LL |     want::<Foo<foo>>(f);\n-   |                      ^ expected struct `A`, found struct `B`\n+   |     ---------------- ^ expected struct `A`, found struct `B`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<_, A, B>`\n               found struct `Foo<_, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:71:25\n    |\n LL |     want::<Foo<foo, B>>(f);\n-   |                         ^ expected struct `B`, found struct `A`\n+   |     ------------------- ^ expected struct `B`, found struct `A`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<_, _, B>`\n               found struct `Foo<_, _, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:72:22\n    |\n LL |     want::<Foo<bar>>(f);\n-   |                      ^ expected struct `bar`, found struct `foo`\n+   |     ---------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, A, B>`\n               found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:73:25\n    |\n LL |     want::<Foo<bar, B>>(f);\n-   |                         ^ expected struct `bar`, found struct `foo`\n+   |     ------------------- ^ expected struct `bar`, found struct `foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected struct `Foo<bar, _, B>`\n               found struct `Foo<foo, _, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:74:23\n    |\n LL |     want::<&Foo<foo>>(f);\n-   |                       ^ expected `&Foo<foo>`, found struct `Foo`\n+   |     ----------------- ^ expected `&Foo<foo>`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo>`\n                  found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:75:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |                          ^ expected `&Foo<foo, B>`, found struct `Foo`\n+   |     -------------------- ^ expected `&Foo<foo, B>`, found struct `Foo`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo, B, A>`\n+note: function defined here\n+  --> $DIR/type-mismatch.rs:14:4\n+   |\n+LL | fn want<T>(t: T) {}\n+   |    ^^^^    ----\n \n error: aborting due to 47 previous errors\n "}, {"sha": "9346150750128c4b61fdd256e71d081a0d086df4", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46112.rs:9:21\n    |\n LL | fn main() { test(Ok(())); }\n-   |                     ^^ expected enum `Option`, found `()`\n+   |                  -- ^^ expected enum `Option`, found `()`\n+   |                  |\n+   |                  arguments to this enum variant are incorrect\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`"}, {"sha": "04dc0e36520b4e7e9b5033f746c8270b3abeedce", "filename": "src/test/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -8,10 +8,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-84768.rs:7:42\n    |\n LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n-   |                                          ^ expected tuple, found integer\n+   |     ---------------------------------    ^ expected tuple, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected tuple `(&mut u8,)`\n                found type `{integer}`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+   |                           ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5fa1ae1a54f722591a341779584652c702b3aef2", "filename": "src/test/ui/typeck/issue-89856.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-89856.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fissue-89856.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89856.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/issue-89856.rs:6:20\n    |\n LL |     take_str_maybe(option);\n-   |                    ^^^^^^ expected `str`, found struct `String`\n+   |     -------------- ^^^^^^ expected `str`, found struct `String`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected enum `Option<&str>`\n               found enum `Option<&String>`\n+note: function defined here\n+  --> $DIR/issue-89856.rs:1:4\n+   |\n+LL | fn take_str_maybe(x: Option<&str>) -> Option<&str> { None }\n+   |    ^^^^^^^^^^^^^^ ---------------\n help: try converting the passed type into a `&str`\n    |\n LL |     take_str_maybe(option.map(|x| &**x));"}, {"sha": "721b2c821efec8b185b68d0d3918795a960c9647", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,95 +2,116 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:6:13\n    |\n LL |     let _ = Some(3, 2);\n-   |             ^^^^ -  - supplied 2 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^^^    - argument unexpected\n+   |\n+help: remove the extra argument\n+   |\n+LL |     let _ = Some(3);\n+   |             ~~~~~~~\n \n error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:7:13\n    |\n LL |     let _ = Ok(3, 6, 2);\n-   |             ^^ -  -  - supplied 3 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^    -  - argument unexpected\n+   |                   |\n+   |                   argument unexpected\n+   |\n+help: remove the extra arguments\n+   |\n+LL |     let _ = Ok(3);\n+   |             ~~~~~\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:8:13\n    |\n LL |     let _ = Ok();\n-   |             ^^-- supplied 0 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^-- an argument is missing\n+   |\n+help: provide the argument\n+   |\n+LL |     let _ = Ok({_});\n+   |             ~~~~~~~\n \n error[E0061]: this struct takes 1 argument but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:9:13\n    |\n LL |     let _ = Wrapper();\n-   |             ^^^^^^^-- supplied 0 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^^^^^^-- an argument of type `i32` is missing\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:2:8\n    |\n LL | struct Wrapper(i32);\n    |        ^^^^^^^\n+help: provide the argument\n+   |\n+LL |     let _ = Wrapper({i32});\n+   |             ~~~~~~~~~~~~~~\n \n error[E0061]: this struct takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:10:13\n    |\n LL |     let _ = Wrapper(5, 2);\n-   |             ^^^^^^^ -  - supplied 2 arguments\n-   |             |\n-   |             expected 1 argument\n+   |             ^^^^^^^    - argument unexpected\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:2:8\n    |\n LL | struct Wrapper(i32);\n    |        ^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |     let _ = Wrapper(5);\n+   |             ~~~~~~~~~~\n \n error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:11:13\n    |\n LL |     let _ = DoubleWrapper();\n-   |             ^^^^^^^^^^^^^-- supplied 0 arguments\n-   |             |\n-   |             expected 2 arguments\n+   |             ^^^^^^^^^^^^^-- two arguments of type `i32` and `i32` are missing\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:3:8\n    |\n LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n+help: provide the arguments\n+   |\n+LL |     let _ = DoubleWrapper({i32}, {i32});\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0061]: this struct takes 2 arguments but 1 argument was supplied\n   --> $DIR/struct-enum-wrong-args.rs:12:13\n    |\n LL |     let _ = DoubleWrapper(5);\n-   |             ^^^^^^^^^^^^^ - supplied 1 argument\n-   |             |\n-   |             expected 2 arguments\n+   |             ^^^^^^^^^^^^^--- an argument of type `i32` is missing\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:3:8\n    |\n LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n+help: provide the argument\n+   |\n+LL |     let _ = DoubleWrapper(5, {i32});\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0061]: this struct takes 2 arguments but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:13:13\n    |\n LL |     let _ = DoubleWrapper(5, 2, 7);\n-   |             ^^^^^^^^^^^^^ -  -  - supplied 3 arguments\n-   |             |\n-   |             expected 2 arguments\n+   |             ^^^^^^^^^^^^^       - argument unexpected\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:3:8\n    |\n LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n+help: remove the extra argument\n+   |\n+LL |     let _ = DoubleWrapper(5, 2);\n+   |             ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "c6f9b3661a232a84efb7c90365134c266866aa3c", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -20,8 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n-   |                            ^^^^ expected `i32`, found `u32`\n+   |     ---------------------- ^^^^ expected `i32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+   |\n+LL |     fn add(self, rhs: Rhs) -> Self::Output;\n+   |        ^^^\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1i32, 2);\n@@ -31,8 +38,15 @@ error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:8:31\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n-   |                               ^^^^ expected `i32`, found `u32`\n+   |     ----------------------    ^^^^ expected `i32`, found `u32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n+LL |     fn add(self, rhs: Rhs) -> Self::Output;\n+   |        ^^^\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1, 2i32);"}, {"sha": "ea1ca380b1c7a853c20c2b15e007f85f325649e6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07bb916d44a66d2caba427c7ee132bbeb245977b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=07bb916d44a66d2caba427c7ee132bbeb245977b", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/unboxed-closures-type-mismatch.rs:5:15\n    |\n LL |     let z = f(1_usize, 2);\n-   |               ^^^^^^^ expected `isize`, found `usize`\n+   |             - ^^^^^^^ expected `isize`, found `usize`\n+   |             |\n+   |             arguments to this function are incorrect\n    |\n help: change the type of the numeric literal from `usize` to `isize`\n    |"}]}