{"sha": "b92cd1a32c842e82575e59374545dda5f9b9f77a", "node_id": "C_kwDOAAsO6NoAKGI5MmNkMWEzMmM4NDJlODI1NzVlNTkzNzQ1NDVkZGE1ZjliOWY3N2E", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-04-10T20:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-10T20:04:57Z"}, "message": "Clarify str::from_utf8_unchecked's invariants\n\nSpecifically, make it clear that it is immediately UB to pass ill-formed UTF-8 into the function. The previous wording left space to interpret that the UB only occurred when calling another function, which \"assumes that `&str`s are valid UTF-8.\"\r\n\r\nThis does not change whether str being UTF-8 is a safety or a validity invariant. (As per previous discussion, it is a safety invariant, not a validity invariant.) It just makes it clear that valid UTF-8 is a precondition of str::from_utf8_unchecked, and that emitting an Abstract Machine fault (e.g. UB or a sanitizer error) on invalid UTF-8 is a valid thing to do.\r\n\r\nIf user code wants to create an unsafe `&str` pointing to ill-formed UTF-8, it must be done via transmutes. Also, just, don't.", "tree": {"sha": "ffd92326255a3ba08b1933645a2cafbea208801c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd92326255a3ba08b1933645a2cafbea208801c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92cd1a32c842e82575e59374545dda5f9b9f77a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUzhpCRBK7hj4Ov3rIwAA4lEIAIYG48ZdN+Uv6ngtAUiiccfM\nnTRR4vABz/nqtZuZlQCwmsorqsTOAZ+u4Q55P0UHTm1nBGq+5CBOAA/eKTJsgOna\nKFA1rwhin1pLx8MFCRqPKKFoRWrnYblKEDbrouCRpQ22R5PJBXUlH0a/YgnhMq7J\nAv1QvWSXFSZY1O4D5oqUmyeDW8dNgHIC2I2akLW1A04YT8bJtLO6rP7pjmaYdrJq\nfM+Oc36KGIeGB6KEU/vjjXY5OR9bkl1fn/7aod4KEUpJaxhJWetrCnqjsPqqPGTG\na3ni63GDmz9YdvDPKACC6W62IclRbsQeMgJEGc99crgsRGBZ+6raGe8Yzs7fL1U=\n=4mRd\n-----END PGP SIGNATURE-----\n", "payload": "tree ffd92326255a3ba08b1933645a2cafbea208801c\nparent 18f32b73bdb3833c18c73fe3062bde8e1721ccca\nauthor Christopher Durham <cad97@cad97.com> 1649621097 -0500\ncommitter GitHub <noreply@github.com> 1649621097 -0500\n\nClarify str::from_utf8_unchecked's invariants\n\nSpecifically, make it clear that it is immediately UB to pass ill-formed UTF-8 into the function. The previous wording left space to interpret that the UB only occurred when calling another function, which \"assumes that `&str`s are valid UTF-8.\"\r\n\r\nThis does not change whether str being UTF-8 is a safety or a validity invariant. (As per previous discussion, it is a safety invariant, not a validity invariant.) It just makes it clear that valid UTF-8 is a precondition of str::from_utf8_unchecked, and that emitting an Abstract Machine fault (e.g. UB or a sanitizer error) on invalid UTF-8 is a valid thing to do.\r\n\r\nIf user code wants to create an unsafe `&str` pointing to ill-formed UTF-8, it must be done via transmutes. Also, just, don't."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92cd1a32c842e82575e59374545dda5f9b9f77a", "html_url": "https://github.com/rust-lang/rust/commit/b92cd1a32c842e82575e59374545dda5f9b9f77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92cd1a32c842e82575e59374545dda5f9b9f77a/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f32b73bdb3833c18c73fe3062bde8e1721ccca", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f32b73bdb3833c18c73fe3062bde8e1721ccca", "html_url": "https://github.com/rust-lang/rust/commit/18f32b73bdb3833c18c73fe3062bde8e1721ccca"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "81b1db4ac6feda2a1290e767526ea5608078b6ca", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b92cd1a32c842e82575e59374545dda5f9b9f77a/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92cd1a32c842e82575e59374545dda5f9b9f77a/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=b92cd1a32c842e82575e59374545dda5f9b9f77a", "patch": "@@ -144,11 +144,7 @@ pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n ///\n /// # Safety\n ///\n-/// This function is unsafe because it does not check that the bytes passed to\n-/// it are valid UTF-8. If this constraint is violated, undefined behavior\n-/// results, as the rest of Rust assumes that [`&str`]s are valid UTF-8.\n-///\n-/// [`&str`]: str\n+/// The bytes passed in must be valid UTF-8.\n ///\n /// # Examples\n ///"}]}