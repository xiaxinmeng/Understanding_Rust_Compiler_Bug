{"sha": "6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MTFiYzg5YTc4NGNlNzJiNGRmZDhlMGJhNzJiZDIyY2U4OTgzOTU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-13T21:01:06Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-13T21:33:38Z"}, "message": "Rename N! to name!", "tree": {"sha": "7ca2a4f415d0c9b95e29a05172cb6105aaa5065b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca2a4f415d0c9b95e29a05172cb6105aaa5065b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "html_url": "https://github.com/rust-lang/rust/commit/6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259c42f00e2e85594c7373166bc8467ce375a045", "url": "https://api.github.com/repos/rust-lang/rust/commits/259c42f00e2e85594c7373166bc8467ce375a045", "html_url": "https://github.com/rust-lang/rust/commit/259c42f00e2e85594c7373166bc8467ce375a045"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "7850ea9a7124a48bc33d476eccd60eb408a31712", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n-    name::{AsName, N},\n+    name::{name, AsName},\n     MacroDefId,\n };\n use hir_ty::{\n@@ -723,7 +723,7 @@ impl Local {\n     }\n \n     pub fn is_self(self, db: &impl HirDatabase) -> bool {\n-        self.name(db) == Some(N![self])\n+        self.name(db) == Some(name![self])\n     }\n \n     pub fn is_mut(self, db: &impl HirDatabase) -> bool {"}, {"sha": "61193b4d8040827e49fc742de0a2f60fb505cb35", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -2,7 +2,7 @@\n //! representation.\n \n use either::Either;\n-use hir_expand::name::{AsName, Name, N};\n+use hir_expand::name::{name, AsName, Name};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -68,7 +68,7 @@ where\n                 let ptr = AstPtr::new(&self_param);\n                 let param_pat = self.alloc_pat(\n                     Pat::Bind {\n-                        name: N![self],\n+                        name: name![self],\n                         mode: BindingAnnotation::Unannotated,\n                         subpat: None,\n                     },"}, {"sha": "d14901a9b49f8b809094d0d78f6c4b49d982c2b7", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -5,7 +5,7 @@\n \n use std::fmt;\n \n-use hir_expand::name::{Name, N};\n+use hir_expand::name::{name, Name};\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum Signedness {\n@@ -52,26 +52,26 @@ pub enum BuiltinType {\n impl BuiltinType {\n     #[rustfmt::skip]\n     pub const ALL: &'static [(Name, BuiltinType)] = &[\n-        (N![char], BuiltinType::Char),\n-        (N![bool], BuiltinType::Bool),\n-        (N![str],  BuiltinType::Str),\n-\n-        (N![isize], BuiltinType::Int(BuiltinInt::ISIZE)),\n-        (N![i8],    BuiltinType::Int(BuiltinInt::I8)),\n-        (N![i16],   BuiltinType::Int(BuiltinInt::I16)),\n-        (N![i32],   BuiltinType::Int(BuiltinInt::I32)),\n-        (N![i64],   BuiltinType::Int(BuiltinInt::I64)),\n-        (N![i128],  BuiltinType::Int(BuiltinInt::I128)),\n-\n-        (N![usize], BuiltinType::Int(BuiltinInt::USIZE)),\n-        (N![u8],    BuiltinType::Int(BuiltinInt::U8)),\n-        (N![u16],   BuiltinType::Int(BuiltinInt::U16)),\n-        (N![u32],   BuiltinType::Int(BuiltinInt::U32)),\n-        (N![u64],   BuiltinType::Int(BuiltinInt::U64)),\n-        (N![u128],  BuiltinType::Int(BuiltinInt::U128)),\n-\n-        (N![f32], BuiltinType::Float(BuiltinFloat::F32)),\n-        (N![f64], BuiltinType::Float(BuiltinFloat::F64)),\n+        (name![char], BuiltinType::Char),\n+        (name![bool], BuiltinType::Bool),\n+        (name![str],  BuiltinType::Str),\n+\n+        (name![isize], BuiltinType::Int(BuiltinInt::ISIZE)),\n+        (name![i8],    BuiltinType::Int(BuiltinInt::I8)),\n+        (name![i16],   BuiltinType::Int(BuiltinInt::I16)),\n+        (name![i32],   BuiltinType::Int(BuiltinInt::I32)),\n+        (name![i64],   BuiltinType::Int(BuiltinInt::I64)),\n+        (name![i128],  BuiltinType::Int(BuiltinInt::I128)),\n+\n+        (name![usize], BuiltinType::Int(BuiltinInt::USIZE)),\n+        (name![u8],    BuiltinType::Int(BuiltinInt::U8)),\n+        (name![u16],   BuiltinType::Int(BuiltinInt::U16)),\n+        (name![u32],   BuiltinType::Int(BuiltinInt::U32)),\n+        (name![u64],   BuiltinType::Int(BuiltinInt::U64)),\n+        (name![u128],  BuiltinType::Int(BuiltinInt::U128)),\n+\n+        (name![f32], BuiltinType::Float(BuiltinFloat::F32)),\n+        (name![f64], BuiltinType::Float(BuiltinFloat::F64)),\n     ];\n }\n "}, {"sha": "4f4ef57cc0a4b0681cf1bfcf51e16273a3cb2933", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use hir_expand::{\n-    name::{AsName, Name, N},\n+    name::{name, AsName, Name},\n     AstId,\n };\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n@@ -37,7 +37,7 @@ impl FunctionData {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n-                    let self_type = TypeRef::Path(N![Self].into());\n+                    let self_type = TypeRef::Path(name![Self].into());\n                     match self_param.kind() {\n                         ast::SelfParamKind::Owned => self_type,\n                         ast::SelfParamKind::Ref => {"}, {"sha": "e9c28c7309e673104249a2e83dcd822f6a017008", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_expand::{\n-    name::{AsName, Name, N},\n+    name::{name, AsName, Name},\n     InFile,\n };\n use ra_arena::{map::ArenaMap, Arena};\n@@ -90,11 +90,11 @@ impl GenericParams {\n \n                 // traits get the Self type as an implicit first type parameter\n                 let self_param_id =\n-                    generics.types.alloc(TypeParamData { name: N![Self], default: None });\n+                    generics.types.alloc(TypeParamData { name: name![Self], default: None });\n                 sm.insert(self_param_id, Either::Left(src.value.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n-                let self_param = TypeRef::Path(N![Self].into());\n+                let self_param = TypeRef::Path(name![Self].into());\n                 generics.fill_bounds(&src.value, self_param);\n \n                 generics.fill(&mut sm, &src.value);"}, {"sha": "5d7469a6ecf3337fa04e02f1226b85b9ad473510", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -6,7 +6,7 @@\n use hir_expand::{\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n-    name::{AsName, Name, N},\n+    name::{name, AsName, Name},\n     HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use ra_cfg::CfgOptions;\n@@ -918,7 +918,7 @@ where\n }\n \n fn is_macro_rules(path: &Path) -> bool {\n-    path.as_ident() == Some(&N![macro_rules])\n+    path.as_ident() == Some(&name![macro_rules])\n }\n \n #[cfg(test)]"}, {"sha": "c1376af364f433e95bf56cbf3014309845b06551", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -6,7 +6,7 @@ use std::{iter, sync::Arc};\n use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n-    name::{AsName, Name, N},\n+    name::{name, AsName, Name},\n };\n use ra_db::CrateId;\n use ra_syntax::{\n@@ -276,7 +276,7 @@ impl GenericArgs {\n         }\n         if let Some(ret_type) = ret_type {\n             let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n-            bindings.push((N![Output], type_ref))\n+            bindings.push((name![Output], type_ref))\n         }\n         if args.is_empty() && bindings.is_empty() {\n             None\n@@ -297,12 +297,12 @@ impl From<Name> for Path {\n }\n \n pub mod known {\n-    use hir_expand::name::N;\n+    use hir_expand::name::name;\n \n     use super::{Path, PathKind};\n \n     macro_rules! P {\n-        ($start:ident $(:: $seg:ident)*) => { Path::from_simple_segments(PathKind::Abs, vec![N![$start], $(N![$seg],)*]) };\n+        ($start:ident $(:: $seg:ident)*) => { Path::from_simple_segments(PathKind::Abs, vec![name![$start], $(name![$seg],)*]) };\n     }\n \n     pub fn std_iter_into_iterator() -> Path {"}, {"sha": "b6d595a2092d907343ed622f63e208c989993472", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -2,7 +2,7 @@\n use std::sync::Arc;\n \n use hir_expand::{\n-    name::{Name, N},\n+    name::{name, Name},\n     MacroDefId,\n };\n use ra_db::CrateId;\n@@ -163,13 +163,13 @@ impl Resolver {\n                     }\n                 }\n                 Scope::ImplBlockScope(impl_) => {\n-                    if first_name == &N![Self] {\n+                    if first_name == &name![Self] {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::SelfType(*impl_), idx));\n                     }\n                 }\n                 Scope::AdtScope(adt) => {\n-                    if first_name == &N![Self] {\n+                    if first_name == &name![Self] {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::AdtSelfType(*adt), idx));\n                     }\n@@ -223,7 +223,7 @@ impl Resolver {\n             return None;\n         }\n         let n_segments = path.segments.len();\n-        let tmp = N![self];\n+        let tmp = name![self];\n         let first_name = if path.is_self() { &tmp } else { &path.segments.first()?.name };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n@@ -259,13 +259,13 @@ impl Resolver {\n                 Scope::GenericParams { .. } => continue,\n \n                 Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n-                    if first_name == &N![Self] {\n+                    if first_name == &name![Self] {\n                         let ty = TypeNs::SelfType(*impl_);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n                 Scope::AdtScope(adt) if n_segments > 1 => {\n-                    if first_name == &N![Self] {\n+                    if first_name == &name![Self] {\n                         let ty = TypeNs::AdtSelfType(*adt);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n@@ -439,10 +439,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(N![Self], ScopeDef::ImplSelfType((*i).into()));\n+                f(name![Self], ScopeDef::ImplSelfType((*i).into()));\n             }\n             Scope::AdtScope(i) => {\n-                f(N![Self], ScopeDef::AdtSelfType((*i).into()));\n+                f(name![Self], ScopeDef::AdtSelfType((*i).into()));\n             }\n             Scope::ExprScope(scope) => {\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {"}, {"sha": "b2644125383ce4c1a149ea012321c6eaf411a2b2", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -34,7 +34,7 @@ macro_rules! register_builtin {\n \n         pub fn find_builtin_derive(ident: &name::Name) -> Option<MacroDefId> {\n             let kind = match ident {\n-                $( id if id == &name::N![$trait] => BuiltinDeriveExpander::$trait, )*\n+                $( id if id == &name::name![$trait] => BuiltinDeriveExpander::$trait, )*\n                  _ => return None,\n             };\n "}, {"sha": "d2b3d769e8e73064c61ee2ecfac5b24b6bf6c00f", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -34,7 +34,7 @@ macro_rules! register_builtin {\n             ast_id: AstId<ast::MacroCall>,\n         ) -> Option<MacroDefId> {\n             let kind = match ident {\n-                 $( id if id == &name::N![$name] => BuiltinFnLikeExpander::$kind, )*\n+                 $( id if id == &name::name![$name] => BuiltinFnLikeExpander::$kind, )*\n                  _ => return None,\n             };\n "}, {"sha": "59d8214fde89f23b10a9d263ecfac6117a15511a", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -186,7 +186,7 @@ pub mod known {\n     pub const SELF_TYPE: super::Name = super::Name::new_inline_ascii(b\"Self\");\n \n     #[macro_export]\n-    macro_rules! N {\n+    macro_rules! name {\n         (self) => {\n             $crate::name::known::SELF_PARAM\n         };\n@@ -199,4 +199,4 @@ pub mod known {\n     }\n }\n \n-pub use crate::N;\n+pub use crate::name;"}, {"sha": "ee48fa53700767cfc0d2e632b0b9448b6ef6b810", "filename": "crates/ra_hir_ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -6,7 +6,7 @@\n use std::iter::successors;\n \n use hir_def::lang_item::LangItemTarget;\n-use hir_expand::name::N;\n+use hir_expand::name::name;\n use log::{info, warn};\n use ra_db::CrateId;\n \n@@ -52,7 +52,7 @@ fn deref_by_trait(\n         LangItemTarget::TraitId(it) => it,\n         _ => return None,\n     };\n-    let target = db.trait_data(deref_trait).associated_type_by_name(&N![Target])?;\n+    let target = db.trait_data(deref_trait).associated_type_by_name(&name![Target])?;\n \n     let generic_params = generics(db, target.into());\n     if generic_params.len() != 1 {"}, {"sha": "edf4e69ba94a5fc7246e247ab520a8ba58c8f24b", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -29,7 +29,7 @@ use hir_def::{\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TypeAliasId, VariantId,\n };\n-use hir_expand::{diagnostics::DiagnosticSink, name::N};\n+use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n \n@@ -424,31 +424,31 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n         let path = known::std_iter_into_iterator();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n-        self.db.trait_data(trait_).associated_type_by_name(&N![Item])\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Item])\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAliasId> {\n         let path = known::std_ops_try();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n-        self.db.trait_data(trait_).associated_type_by_name(&N![Ok])\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Ok])\n     }\n \n     fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n         let path = known::std_ops_neg();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n-        self.db.trait_data(trait_).associated_type_by_name(&N![Output])\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_ops_not_output(&self) -> Option<TypeAliasId> {\n         let path = known::std_ops_not();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n-        self.db.trait_data(trait_).associated_type_by_name(&N![Output])\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n         let path = known::std_future_future();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n-        self.db.trait_data(trait_).associated_type_by_name(&N![Output])\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_boxed_box(&self) -> Option<AdtId> {"}, {"sha": "2e3cdd53a00f9319a41db09e8c43234264c2cc63", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::resolver_for_expr,\n     AdtId, ContainerId, Lookup, StructFieldId,\n };\n-use hir_expand::name::{Name, N};\n+use hir_expand::name::{name, Name};\n use ra_syntax::ast::RangeOp;\n \n use crate::{\n@@ -631,7 +631,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.as_ref().map(|p| p.iter_parent()) {\n             for (_id, param) in parent_generics {\n-                if param.name == N![Self] {\n+                if param.name == name![Self] {\n                     substs.push(receiver_ty.clone());\n                 } else {\n                     substs.push(Ty::Unknown);"}, {"sha": "cd587a3382808650742d5dfb35634d9f585a2e85", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -1,7 +1,7 @@\n //! This module provides the built-in trait implementations, e.g. to make\n //! closures implement `Fn`.\n use hir_def::{expr::Expr, lang_item::LangItemTarget, TraitId, TypeAliasId};\n-use hir_expand::name::N;\n+use hir_expand::name::name;\n use ra_db::CrateId;\n \n use super::{AssocTyValue, Impl};\n@@ -79,7 +79,7 @@ fn closure_fn_trait_impl_datum(\n     // and don't want to return a valid value only to find out later that FnOnce\n     // is broken\n     let fn_once_trait = get_fn_trait(db, krate, super::FnTrait::FnOnce)?;\n-    let _output = db.trait_data(fn_once_trait).associated_type_by_name(&N![Output])?;\n+    let _output = db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n \n     let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,\n@@ -137,7 +137,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n \n     let output_ty_id = db\n         .trait_data(fn_once_trait)\n-        .associated_type_by_name(&N![Output])\n+        .associated_type_by_name(&name![Output])\n         .expect(\"assoc ty value should not exist\");\n \n     BuiltinImplAssocTyValueData {"}, {"sha": "0049d3c6fc01023cf6268483a9af70e56e082afd", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6911bc89a784ce72b4dfd8e0ba72bd22ce898395/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=6911bc89a784ce72b4dfd8e0ba72bd22ce898395", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     type_ref::TypeRef,\n     ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n-use hir_expand::name::{Name, N};\n+use hir_expand::name::{name, Name};\n \n fn direct_super_traits(db: &impl DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -22,7 +22,7 @@ fn direct_super_traits(db: &impl DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n         .where_predicates\n         .iter()\n         .filter_map(|pred| match &pred.type_ref {\n-            TypeRef::Path(p) if p.as_ident() == Some(&N![Self]) => pred.bound.as_path(),\n+            TypeRef::Path(p) if p.as_ident() == Some(&name![Self]) => pred.bound.as_path(),\n             _ => None,\n         })\n         .filter_map(|path| match resolver.resolve_path_in_type_ns_fully(db, path) {"}]}