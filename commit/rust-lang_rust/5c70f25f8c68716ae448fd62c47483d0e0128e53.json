{"sha": "5c70f25f8c68716ae448fd62c47483d0e0128e53", "node_id": "C_kwDOAAsO6NoAKDVjNzBmMjVmOGM2ODcxNmFlNDQ4ZmQ2MmM0NzQ4M2QwZTAxMjhlNTM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-25T18:23:07Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-26T16:52:10Z"}, "message": "Detect when negative literal indices are used and suggest appropriate code", "tree": {"sha": "8895de4cde912db53d440664252885876f26cd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8895de4cde912db53d440664252885876f26cd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c70f25f8c68716ae448fd62c47483d0e0128e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c70f25f8c68716ae448fd62c47483d0e0128e53", "html_url": "https://github.com/rust-lang/rust/commit/5c70f25f8c68716ae448fd62c47483d0e0128e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c70f25f8c68716ae448fd62c47483d0e0128e53/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f29a851917a706c01b6f51331894df1d15770b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f29a851917a706c01b6f51331894df1d15770b", "html_url": "https://github.com/rust-lang/rust/commit/e9f29a851917a706c01b6f51331894df1d15770b"}], "stats": {"total": 134, "additions": 132, "deletions": 2}, "files": [{"sha": "09aeb62fc02c7e507c37fe0ab6dc931ec1bd0abd", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c70f25f8c68716ae448fd62c47483d0e0128e53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c70f25f8c68716ae448fd62c47483d0e0128e53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=5c70f25f8c68716ae448fd62c47483d0e0128e53", "patch": "@@ -2136,7 +2136,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             idx_t\n         } else {\n             let base_t = self.structurally_resolved_type(base.span, base_t);\n-            match self.lookup_indexing(expr, base, base_t, idx_t) {\n+            match self.lookup_indexing(expr, base, base_t, idx, idx_t) {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);"}, {"sha": "e5a5066544a8fd8790648e89b696b74c094b3747", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5c70f25f8c68716ae448fd62c47483d0e0128e53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c70f25f8c68716ae448fd62c47483d0e0128e53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=5c70f25f8c68716ae448fd62c47483d0e0128e53", "patch": "@@ -1,5 +1,7 @@\n use crate::check::method::MethodCallee;\n use crate::check::{has_expected_num_generic_args, FnCtxt, PlaceOp};\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -47,6 +49,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         base_expr: &'tcx hir::Expr<'tcx>,\n         base_ty: Ty<'tcx>,\n+        idx_expr: &'tcx hir::Expr<'tcx>,\n         idx_ty: Ty<'tcx>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         // FIXME(#18741) -- this is almost but not quite the same as the\n@@ -56,7 +59,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut autoderef = self.autoderef(base_expr.span, base_ty);\n         let mut result = None;\n         while result.is_none() && autoderef.next().is_some() {\n-            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty);\n+            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty, idx_expr);\n         }\n         self.register_predicates(autoderef.into_obligations());\n         result\n@@ -73,6 +76,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_expr: &hir::Expr<'_>,\n         autoderef: &Autoderef<'a, 'tcx>,\n         index_ty: Ty<'tcx>,\n+        idx_expr: &hir::Expr<'_>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         let adjusted_ty =\n             self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n@@ -82,6 +86,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n+        let negative_index = || {\n+            let ty = self.resolve_vars_if_possible(adjusted_ty);\n+            let mut err = self.tcx.sess.struct_span_err(\n+                idx_expr.span,\n+                &format!(\"negative integers cannot be used to index on a `{}`\", ty),\n+            );\n+            err.span_label(\n+                idx_expr.span,\n+                &format!(\"cannot use a negative integer for indexing on `{}`\", ty),\n+            );\n+            if let (hir::ExprKind::Path(..), Ok(snippet)) =\n+                (&base_expr.kind, self.tcx.sess.source_map().span_to_snippet(base_expr.span))\n+            {\n+                // `foo[-1]` to `foo[foo.len() - 1]`\n+                err.span_suggestion_verbose(\n+                    idx_expr.span.shrink_to_lo(),\n+                    &format!(\n+                        \"if you wanted to access an element starting from the end of the `{}`, you \\\n+                        must compute it\",\n+                        ty,\n+                    ),\n+                    format!(\"{}.len() \", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+            Some((self.tcx.ty_error(), self.tcx.ty_error()))\n+        };\n+        if let hir::ExprKind::Unary(\n+            hir::UnOp::Neg,\n+            hir::Expr {\n+                kind: hir::ExprKind::Lit(hir::Lit { node: ast::LitKind::Int(..), .. }),\n+                ..\n+            },\n+        ) = idx_expr.kind\n+        {\n+            match adjusted_ty.kind() {\n+                ty::Adt(ty::AdtDef { did, .. }, _)\n+                    if self.tcx.is_diagnostic_item(sym::vec_type, *did) =>\n+                {\n+                    return negative_index();\n+                }\n+                ty::Slice(_) | ty::Array(_, _) => return negative_index(),\n+                _ => {}\n+            }\n+        }\n+\n         for unsize in [false, true] {\n             let mut self_ty = adjusted_ty;\n             if unsize {"}, {"sha": "e52714cf97fe6f5cc54d7830500bf65faad524bf", "filename": "src/test/ui/suggestions/negative-literal-index.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed?ref=5c70f25f8c68716ae448fd62c47483d0e0128e53", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+use std::ops::Index;\n+struct X;\n+impl Index<i32> for X {\n+    type Output = ();\n+\n+    fn index(&self, _: i32) -> &() {\n+        &()\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = [1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = &[1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let _ = x;\n+    X[-1];\n+}"}, {"sha": "d88b66e679e56d2fd6df33fdad7ab07310bf9be2", "filename": "src/test/ui/suggestions/negative-literal-index.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs?ref=5c70f25f8c68716ae448fd62c47483d0e0128e53", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+use std::ops::Index;\n+struct X;\n+impl Index<i32> for X {\n+    type Output = ();\n+\n+    fn index(&self, _: i32) -> &() {\n+        &()\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = [1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = &[1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let _ = x;\n+    X[-1];\n+}"}, {"sha": "f5ea980048b5bcb44ffddd9f8017c3cf71598c0f", "filename": "src/test/ui/suggestions/negative-literal-index.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c70f25f8c68716ae448fd62c47483d0e0128e53/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr?ref=5c70f25f8c68716ae448fd62c47483d0e0128e53", "patch": "@@ -0,0 +1,35 @@\n+error: negative integers cannot be used to index on a `Vec<{integer}>`\n+  --> $DIR/negative-literal-index.rs:15:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `Vec<{integer}>`\n+   |\n+help: if you wanted to access an element starting from the end of the `Vec<{integer}>`, you must compute it\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: negative integers cannot be used to index on a `[{integer}; 3]`\n+  --> $DIR/negative-literal-index.rs:17:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n+   |\n+help: if you wanted to access an element starting from the end of the `[{integer}; 3]`, you must compute it\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: negative integers cannot be used to index on a `[{integer}; 3]`\n+  --> $DIR/negative-literal-index.rs:19:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n+   |\n+help: if you wanted to access an element starting from the end of the `[{integer}; 3]`, you must compute it\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: aborting due to 3 previous errors\n+"}]}