{"sha": "c5975e9b6c5781b3b7300b7921c14b060086e1c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTc1ZTliNmM1NzgxYjNiNzMwMGI3OTIxYzE0YjA2MDA4NmUxYzE=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-04T08:10:11Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-22T10:08:40Z"}, "message": "Reduce duplicate in liballoc reserve error handling", "tree": {"sha": "7faf52024d571d69141a2193f754d901abc0c551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7faf52024d571d69141a2193f754d901abc0c551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5975e9b6c5781b3b7300b7921c14b060086e1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5975e9b6c5781b3b7300b7921c14b060086e1c1", "html_url": "https://github.com/rust-lang/rust/commit/c5975e9b6c5781b3b7300b7921c14b060086e1c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5975e9b6c5781b3b7300b7921c14b060086e1c1/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "html_url": "https://github.com/rust-lang/rust/commit/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "59e8bb087217d0d90f2b68f653e208f4e5dc1fab", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c5975e9b6c5781b3b7300b7921c14b060086e1c1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5975e9b6c5781b3b7300b7921c14b060086e1c1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=c5975e9b6c5781b3b7300b7921c14b060086e1c1", "patch": "@@ -303,11 +303,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// # }\n     /// ```\n     pub fn reserve(&mut self, len: usize, additional: usize) {\n-        match self.try_reserve(len, additional) {\n-            Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n-            Ok(()) => { /* yay */ }\n-        }\n+        handle_reserve(self.try_reserve(len, additional));\n     }\n \n     /// The same as `reserve`, but returns on errors instead of panicking or aborting.\n@@ -337,11 +333,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     ///\n     /// Aborts on OOM.\n     pub fn reserve_exact(&mut self, len: usize, additional: usize) {\n-        match self.try_reserve_exact(len, additional) {\n-            Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n-            Ok(()) => { /* yay */ }\n-        }\n+        handle_reserve(self.try_reserve_exact(len, additional));\n     }\n \n     /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.\n@@ -364,11 +356,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     ///\n     /// Aborts on OOM.\n     pub fn shrink_to_fit(&mut self, amount: usize) {\n-        match self.shrink(amount) {\n-            Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n-            Ok(()) => { /* yay */ }\n-        }\n+        handle_reserve(self.shrink(amount));\n     }\n }\n \n@@ -510,6 +498,16 @@ unsafe impl<#[may_dangle] T, A: AllocRef> Drop for RawVec<T, A> {\n     }\n }\n \n+// Central function for reserve error handling.\n+#[inline]\n+fn handle_reserve(result: Result<(), TryReserveError>) {\n+    match result {\n+        Err(CapacityOverflow) => capacity_overflow(),\n+        Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n+        Ok(()) => { /* yay */ }\n+    }\n+}\n+\n // We need to guarantee the following:\n // * We don't ever allocate `> isize::MAX` byte-size objects.\n // * We don't overflow `usize::MAX` and actually allocate too little."}]}