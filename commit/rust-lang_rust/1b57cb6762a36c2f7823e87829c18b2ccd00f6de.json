{"sha": "1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "node_id": "C_kwDOAAsO6NoAKDFiNTdjYjY3NjJhMzZjMmY3ODIzZTg3ODI5YzE4YjJjY2QwMGY2ZGU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-26T21:50:19Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-27T13:30:44Z"}, "message": "Unify all validity check intrinsics\n\nAlso merges the inhabitedness check into the query to further unify the\ncode paths.", "tree": {"sha": "f40bebbbf7bb7eb0ac56dafdfb7d3a4f6761ca83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f40bebbbf7bb7eb0ac56dafdfb7d3a4f6761ca83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "html_url": "https://github.com/rust-lang/rust/commit/1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b57cb6762a36c2f7823e87829c18b2ccd00f6de/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32317b5a5b8cbd2ab0b5f97dcbd0fb6962848383", "url": "https://api.github.com/repos/rust-lang/rust/commits/32317b5a5b8cbd2ab0b5f97dcbd0fb6962848383", "html_url": "https://github.com/rust-lang/rust/commit/32317b5a5b8cbd2ab0b5f97dcbd0fb6962848383"}], "stats": {"total": 80, "additions": 31, "deletions": 49}, "files": [{"sha": "e74aabf2fcb0d3a643ef277018de8d1b306c5a37", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1b57cb6762a36c2f7823e87829c18b2ccd00f6de/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b57cb6762a36c2f7823e87829c18b2ccd00f6de/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "patch": "@@ -22,7 +22,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n+use rustc_middle::ty::layout::{HasParamEnv, ValidityRequirement};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -628,57 +628,39 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                        source_info,\n-                    )\n-                });\n-                return;\n-            }\n \n-            if intrinsic == sym::assert_zero_valid\n-                && !fx\n-                    .tcx\n-                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to zero-initialize type `{}`, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    );\n-                });\n-                return;\n-            }\n+            let requirement = ValidityRequirement::from_intrinsic(intrinsic);\n \n-            if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx\n+            if let Some(requirement) = requirement {\n+                let do_panic = !fx\n                     .tcx\n-                    .check_validity_of_init((\n-                        InitKind::UninitMitigated0x01Fill,\n-                        fx.param_env().and(ty),\n-                    ))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    )\n-                });\n-                return;\n+                    .check_validity_requirement((requirement, fx.param_env().and(ty)))\n+                    .expect(\"expect to have layout during codegen\");\n+\n+                if do_panic {\n+                    let layout = fx.layout_of(ty);\n+\n+                    with_no_trimmed_paths!({\n+                        crate::base::codegen_panic_nounwind(\n+                            fx,\n+                            &if layout.abi.is_uninhabited() {\n+                                format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty)\n+                            } else if requirement == ValidityRequirement::Zero {\n+                                format!(\n+                                    \"attempted to zero-initialize type `{}`, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            } else {\n+                                format!(\n+                                    \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            },\n+                            source_info,\n+                        )\n+                    });\n+                    return;\n+                }\n             }\n         }\n "}]}